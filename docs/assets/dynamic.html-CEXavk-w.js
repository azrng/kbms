import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as o,a as n,d as s,e as t,b as l}from"./app-Bw62I61B.js";const i={},r=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>动态类型语言是指在运行时执行类型检查的语言。如果您不知道您将获得或需要分配的值的类型，则在此情况下，类型是在运行时定义的。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="扩充对象" tabindex="-1"><a class="header-anchor" href="#扩充对象"><span>扩充对象</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//实例化对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicTestUserInfo</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//将对象转动态类型</span>
<span class="token class-name"><span class="token keyword">dynamic</span></span> cc <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">ToExpandoObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//给对象赋值 扩充对象</span>
cc<span class="token punctuation">.</span>cehi <span class="token operator">=</span> <span class="token string">&quot;dd&quot;</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>cehi<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expandoobject扩展类" tabindex="-1"><a class="header-anchor" href="#expandoobject扩展类"><span>ExpandoObject扩展类</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// ExpandoObject扩展</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpandoObjectExtensions</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将对象转为dynamic</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>obj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">dynamic</span></span> <span class="token generic-method"><span class="token function">ToExpandoObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExpandoObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> property <span class="token keyword">in</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            dictionary<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> property<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> dictionary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,8),u={href:"https://www.cnblogs.com/simadi/p/6709481.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://mp.weixin.qq.com/s/XQyBqvtRGBA537NEKpeEYQ",target:"_blank",rel:"noopener noreferrer"};function k(m,h){const a=p("ExternalLinkIcon");return c(),o("div",null,[r,n("p",null,[n("a",u,[s("https://www.cnblogs.com/simadi/p/6709481.html"),t(a)]),n("a",d,[s("https://mp.weixin.qq.com/s/XQyBqvtRGBA537NEKpeEYQ"),t(a)]),s(" | 探究 C## dynamic动态类型本质")])])}const y=e(i,[["render",k],["__file","dynamic.html.vue"]]),b=JSON.parse('{"path":"/dotnet/csharp/fanshe/dynamic.html","title":"dynamic","lang":"zh-CN","frontmatter":{"title":"dynamic","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"dynamic","slug":"yq8g45","docsId":"65938395","description":"概述 动态类型语言是指在运行时执行类型检查的语言。如果您不知道您将获得或需要分配的值的类型，则在此情况下，类型是在运行时定义的。 操作 扩充对象 ExpandoObject扩展类 资料 https://www.cnblogs.com/simadi/p/6709481.html https://mp.weixin.qq.com/s/XQyBqvtRGBA...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/fanshe/dynamic.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"dynamic"}],["meta",{"property":"og:description","content":"概述 动态类型语言是指在运行时执行类型检查的语言。如果您不知道您将获得或需要分配的值的类型，则在此情况下，类型是在运行时定义的。 操作 扩充对象 ExpandoObject扩展类 资料 https://www.cnblogs.com/simadi/p/6709481.html https://mp.weixin.qq.com/s/XQyBqvtRGBA..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dynamic\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"扩充对象","slug":"扩充对象","link":"#扩充对象","children":[]},{"level":3,"title":"ExpandoObject扩展类","slug":"expandoobject扩展类","link":"#expandoobject扩展类","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.71,"words":214},"filePathRelative":"dotnet/csharp/fanshe/dynamic.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>动态类型语言是指在运行时执行类型检查的语言。如果您不知道您将获得或需要分配的值的类型，则在此情况下，类型是在运行时定义的。</p>\\n<h2>操作</h2>\\n<h3>扩充对象</h3>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">//实例化对象</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> stu <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">DynamicTestUserInfo</span> <span class=\\"token punctuation\\">{</span>Id <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"aa\\"</span><span class=\\"token punctuation\\">,</span> Name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"bb\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//将对象转动态类型</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">dynamic</span></span> cc <span class=\\"token operator\\">=</span> stu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToExpandoObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//给对象赋值 扩充对象</span>\\ncc<span class=\\"token punctuation\\">.</span>cehi <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"dd\\"</span><span class=\\"token punctuation\\">;</span>\\n\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>cc<span class=\\"token punctuation\\">.</span>cehi<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,b as data};
