import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,d as s,e as c,b as i}from"./app-qB9_Bjjp.js";const l={},u=i(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>对象的先进先出集合。</p><h3 id="存值取值" tabindex="-1"><a class="header-anchor" href="#存值取值"><span>存值取值</span></a></h3><p>简单的存值取值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BasicOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//new Queue&lt;int&gt;(10);//设置初始容量大小</span>

    <span class="token comment">//设置队列最小容量 如果超出直接2倍扩容</span>
    <span class="token class-name"><span class="token keyword">var</span></span> capacity <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">EnsureCapacity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;capacity:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">capacity</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//在尾部添加元素</span>
        queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取队列元素个数</span>
    <span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;count:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//看一下第一个元素，不移除  如果队列为空会抛出异常</span>
    <span class="token class-name"><span class="token keyword">var</span></span> lookItem <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//移除并返回第一位元素</span>
    <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//是否包含这个元素</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exist <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="concurrentqueue" tabindex="-1"><a class="header-anchor" href="#concurrentqueue"><span>ConcurrentQueue</span></a></h2><p>表示线程安全的先进先出 (FIFO) 集合。</p><p>通过一个示例来描述一下，一个生产者两个消费者来依次消费的情况</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var queue = new ConcurrentQueue&lt;int&gt;();

var producer = new Thread(AddNumbers);
var consumers1 = new Thread(ReadNumbers);
var consumers2 = new Thread(ReadNumbers);

producer.Start();
consumers1.Start();
consumers2.Start();

producer.Join();

consumers1.Interrupt();
consumers2.Interrupt();

consumers1.Join();
consumers2.Join();

Console.WriteLine(&quot;Done&quot;);


void AddNumbers()
{
    for (var i = 0; i &lt; 20; i++)
    {
        Thread.Sleep(20);
        queue.Enqueue(i);
    }
}

void ReadNumbers()
{
    try
    {
        while (true)
        {
            if (queue.TryDequeue(out var item))
            {
                Console.WriteLine(item);
            }

            Thread.Sleep(1);
        }
    }
    catch (ThreadInterruptedException e)
    {
        Console.WriteLine(&quot;线程终止&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,10),r={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.queue-1?view=net-6.0",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("API："),n("a",r,[s("https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.queue-1?view=net-6.0"),c(a)])])])}const h=e(l,[["render",d],["__file","queue.html.vue"]]),g=JSON.parse('{"path":"/dotnet/csharp/queue/queue.html","title":"Queue","lang":"zh-CN","frontmatter":{"title":"Queue","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"queue","slug":"esgiwf","docsId":"77867668","description":"概述 对象的先进先出集合。 存值取值 简单的存值取值 ConcurrentQueue 表示线程安全的先进先出 (FIFO) 集合。 通过一个示例来描述一下，一个生产者两个消费者来依次消费的情况 资料 API：https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.qu...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/queue/queue.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Queue"}],["meta",{"property":"og:description","content":"概述 对象的先进先出集合。 存值取值 简单的存值取值 ConcurrentQueue 表示线程安全的先进先出 (FIFO) 集合。 通过一个示例来描述一下，一个生产者两个消费者来依次消费的情况 资料 API：https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.qu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T13:30:26.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-31T13:30:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Queue\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-31T13:30:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"存值取值","slug":"存值取值","link":"#存值取值","children":[]}]},{"level":2,"title":"ConcurrentQueue","slug":"concurrentqueue","link":"#concurrentqueue","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1711891826000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"dotnet/csharp/queue/queue.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>对象的先进先出集合。</p>\\n<h3>存值取值</h3>\\n<p>简单的存值取值</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">BasicOperation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> queue <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Queue<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//new Queue&lt;int&gt;(10);//设置初始容量大小</span>\\n\\n    <span class=\\"token comment\\">//设置队列最小容量 如果超出直接2倍扩容</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> capacity <span class=\\"token operator\\">=</span> queue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">EnsureCapacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"capacity:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">capacity</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//在尾部添加元素</span>\\n        queue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">//获取队列元素个数</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> count <span class=\\"token operator\\">=</span> queue<span class=\\"token punctuation\\">.</span>Count<span class=\\"token punctuation\\">;</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"count:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">count</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//看一下第一个元素，不移除  如果队列为空会抛出异常</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> lookItem <span class=\\"token operator\\">=</span> queue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Peek</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//移除并返回第一位元素</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token operator\\">=</span> queue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//是否包含这个元素</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> exist <span class=\\"token operator\\">=</span> queue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,g as data};
