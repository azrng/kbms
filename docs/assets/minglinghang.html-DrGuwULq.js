import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as t,b as e}from"./app-qB9_Bjjp.js";const i={},u=e(`<h2 id="commandlineparser" tabindex="-1"><a class="header-anchor" href="#commandlineparser"><span>CommandLineParser</span></a></h2><p>用于 .NET 的简洁语法 C# 命令行分析器</p><p>仓库地址：https://github.com/commandlineparser/commandline</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>安装nuget包</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>&lt;ItemGroup&gt;
&lt;PackageReference Include=&quot;CommandLineParser&quot; Version=&quot;2.9.1&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置配置文件</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class Options
{
    /// &lt;summary&gt;
    /// 指令类型
    /// &lt;/summary&gt;
    [Option(&#39;t&#39;, &quot;command&quot;, Required = false, HelpText = &quot;运行指令 (add, update 或 delete)&quot;, Default = &quot;add&quot;)]
    public string Command { get; set; } = &quot;add&quot;;

    /// &lt;summary&gt;
    /// 模型文件，默认也存在在bin同级目录下
    /// &lt;/summary&gt;
    [Option(&#39;m&#39;, &quot;modelFile&quot;, Required = false, HelpText = &quot;使用的模型的文件名&quot;, Default = &quot;ggml-base.bin&quot;)]
    public string ModelName { get; set; } = &quot;ggml-base.bin&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 运行查看支持的参数：.\\CommandLineParserSample.exe --help

Parser.Default.ParseArguments&lt;Options&gt;(args)
    .WithParsed&lt;Options&gt;(o =&gt;
    {
        switch (o.Command)
        {
            case &quot;add&quot;:
                Console.WriteLine($&quot;添加!  模型为：{o.ModelName}&quot;);
                break;
            case &quot;update&quot;:
                Console.WriteLine($&quot;更新!  模型为：{o.ModelName}&quot;);
                break;
        }

        Console.WriteLine(&quot;over&quot;);
        Console.ReadLine();
    });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="powerargs" tabindex="-1"><a class="header-anchor" href="#powerargs"><span>PowerArgs</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>PowerArgs是一个开源的.NET库，用于将命令行参数转换为.NET对象，方便开发人员在程序中使用。它还额外提供很多功能，如参数校验、自动生成使用帮助和tab补全等，适用于任何使用命令行接口的.NET应用程序。</p>`,13),r={href:"https://github.com/adamabdelhamed/PowerArgs",target:"_blank",rel:"noopener noreferrer"},d=e(`<h3 id="项目特点" tabindex="-1"><a class="header-anchor" href="#项目特点"><span>项目特点</span></a></h3><p>1、将命令行参数转换为.NET对象：可以根据参数定义将命令行参数解析为.NET对象，使得程序可以更方便地使用命令行参数。 2、提供参数校验：可以对参数进行校验，确保参数满足指定的规则，如必填字段、数据类型和范围等。 3、自动生成使用帮助：可以根据参数的定义自动生成使用帮助文档，提供用户输入参数的指导。 4、支持tab补全：提供了命令行参数的tab补全功能，使得用户在输入参数时可以更方便地浏览和选择参数。 5、可扩展性：提供了丰富的扩展点，用户可以根据自己的需求自定义扩展，如自定义校验规则、自定义参数类型等。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">PowerArgs</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArgs</span>
<span class="token punctuation">{</span>
    <span class="token comment">//此参数是必需的，如果未指定，用户将提示。</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ArgRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span>PromptIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> StringArg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// 此参数不是必需的，但如果指定，则必须大于等于0且小于等于60</span>
    <span class="token punctuation">[</span><span class="token function">ArgRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ArgRequired</span><span class="token attribute-arguments"><span class="token punctuation">(</span>PromptIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IntArg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> parsed <span class="token operator">=</span> Args<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Parse</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyArgs<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;输入的字符：&#39;{0}&#39; 、数值 &#39;{1}&#39;&quot;</span><span class="token punctuation">,</span> parsed<span class="token punctuation">.</span>StringArg<span class="token punctuation">,</span> parsed<span class="token punctuation">.</span>IntArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArgException</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ArgUsage<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GenerateUsageFromTemplate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyArgs<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commandlinetool" tabindex="-1"><a class="header-anchor" href="#commandlinetool"><span>CommandLineTool</span></a></h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h3><p>通过输入的命令和参数，进行业务逻辑处理。</p><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h3><p>安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;CommandLineTool&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建命令行类TestCLI</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">App</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Demo&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 控制台描述</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestCLI</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 单个参数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span>示例：simpleinput aa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;simpleinput&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;单个参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SimpleInput</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ParamArgument</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aa</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 多个参数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>names<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span>示例：multiinput aa bb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;multiinput&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;多个参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MultiInput</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ParamArgument</span></span><span class="token punctuation">]</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> names<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> names<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aa,bb,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 额外的参数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>names<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>op1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span>示例：withpara aa -a bb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">&quot;withpara&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;额外参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WithPara</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ParamArgument</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> names<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ParamOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;-a&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> op1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;names:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">names</span><span class="token punctuation">}</span></span><span class="token string">  opl:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">op1</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// names:aa  opl:bb</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置启动命令</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Cli</span> cli <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TestCLI</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Introduction <span class="token operator">=</span> <span class="token string">&quot;这是一个 Demo 应用&quot;</span><span class="token punctuation">,</span> <span class="token comment">//启动时候输出简介</span>
        PromptText <span class="token operator">=</span> <span class="token string">&quot;Plus&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 类似于 &gt;&gt;&gt;</span>
        Title <span class="token operator">=</span> <span class="token string">&quot;控制台应用程序&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    cli<span class="token punctuation">.</span><span class="token function">SetCancellationKeys</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;exit&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 退出命令</span>
    cli<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h3>`,15),k={href:"https://mp.weixin.qq.com/s/JFfcmIfkbQLSP7nY7N25EQ",target:"_blank",rel:"noopener noreferrer"};function m(v,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("仓库地址："),n("a",r,[s("https://github.com/adamabdelhamed/PowerArgs"),t(a)])]),d,n("blockquote",null,[n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/JFfcmIfkbQLSP7nY7N25EQ"),t(a)])])])])}const q=p(i,[["render",m],["__file","minglinghang.html.vue"]]),y=JSON.parse('{"path":"/dotnet/commonNuget/minglinghang.html","title":"命令行","lang":"zh-CN","frontmatter":{"title":"命令行","lang":"zh-CN","date":"2023-09-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"minglinghang","slug":"chl770g1ws4l95rd","docsId":"140131729","description":"CommandLineParser 用于 .NET 的简洁语法 C# 命令行分析器 仓库地址：https://github.com/commandlineparser/commandline 示例 安装nuget包 设置配置文件 示例代码 PowerArgs 概述 PowerArgs是一个开源的.NET库，用于将命令行参数转换为.NET对象，方便开发人...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/minglinghang.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"命令行"}],["meta",{"property":"og:description","content":"CommandLineParser 用于 .NET 的简洁语法 C# 命令行分析器 仓库地址：https://github.com/commandlineparser/commandline 示例 安装nuget包 设置配置文件 示例代码 PowerArgs 概述 PowerArgs是一个开源的.NET库，用于将命令行参数转换为.NET对象，方便开发人..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命令行\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"CommandLineParser","slug":"commandlineparser","link":"#commandlineparser","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"PowerArgs","slug":"powerargs","link":"#powerargs","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"项目特点","slug":"项目特点","link":"#项目特点","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"CommandLineTool","slug":"commandlinetool","link":"#commandlinetool","children":[{"level":3,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":3,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.94,"words":881},"filePathRelative":"dotnet/commonNuget/minglinghang.md","localizedDate":"2023年9月25日","excerpt":"<h2>CommandLineParser</h2>\\n<p>用于 .NET 的简洁语法 C# 命令行分析器</p>\\n<p>仓库地址：https://github.com/commandlineparser/commandline</p>\\n<h3>示例</h3>\\n<p>安装nuget包</p>\\n<div class=\\"language-c#\\" data-ext=\\"c#\\" data-title=\\"c#\\"><pre class=\\"language-c#\\"><code>&lt;ItemGroup&gt;\\n&lt;PackageReference Include=\\"CommandLineParser\\" Version=\\"2.9.1\\" /&gt;\\n&lt;/ItemGroup&gt;\\n</code></pre></div>","autoDesc":true}');export{q as comp,y as data};
