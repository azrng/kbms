import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-B8CExjn9.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Autofac 是一个开源的控制反转容器，<a href="http://xn--pet571jdha.NET" target="_blank" rel="noopener noreferrer">通过将.NET</a> 程序的控制反转容器替换为 Autofac，可以实现例如属性注入、面向切面编程等功能。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="引用包" tabindex="-1"><a class="header-anchor" href="#引用包"><span>引用包</span></a></h3><p>从 NuGet 引用 Autofac.Extensions.DependencyInjection包。</p><h3 id="使用容器" tabindex="-1"><a class="header-anchor" href="#使用容器"><span>使用容器</span></a></h3><p>打开MauiProgram.cs文件，在<strong>所有代码最后</strong>、return builder.Build();<strong>之前</strong>，通过ConfigureContainer来使用AutofacServiceProviderFactory来构建使用 Autofac 容器：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MauiApp</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CreateMauiApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 添加以下代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ConfigureContainer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AutofacServiceProviderFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">containerBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        containerBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Populate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        containerBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MainPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        containerBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MainViewModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，通过调用Populate方法，将 Maui 在ServiceCollection中的服务注册，配置到了 Autofac 容器中，然后通过RegisterType将项目中的服务注册到 Autofac 容器中。</p><blockquote><p>上述步骤中的代码顺序至关重要，他将影响服务在容器中的注册，详情参见 Autofac 文档。</p></blockquote><h3 id="解析依赖项" tabindex="-1"><a class="header-anchor" href="#解析依赖项"><span>解析依赖项</span></a></h3><p>通过上述步骤将依赖注入容器替换为 Autofac，将不会影响在 Maui 中解析依赖项的方式。正如<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MTcyODU5Mg==&amp;mid=2247483657&amp;idx=1&amp;sn=4761e7e87ec27cc25d9a47bd02507ac8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">如何在 Maui 中使用依赖注入</a>中所介绍的，可以通过构造函数来解析依赖项。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> partial</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Application</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MainPage</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> mainPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        InitializeComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        MainPage</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mainPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>公众号【捕获异常】： <a href="http://zhangchi.io" target="_blank" rel="noopener noreferrer">zhangchi.io</a></p>`,15)]))}const k=s(t,[["render",l],["__file","shiyongautofac.html.vue"]]),d=JSON.parse('{"path":"/dotnet/maui/caozuo/shiyongautofac.html","title":"使用Autofac","lang":"zh-CN","frontmatter":{"title":"使用Autofac","lang":"zh-CN","date":"2023-04-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shiyongautofac","slug":"iolofwswe8be4fn4","docsId":"120345827","description":"概述 Autofac 是一个开源的控制反转容器，通过将.NET 程序的控制反转容器替换为 Autofac，可以实现例如属性注入、面向切面编程等功能。 操作 引用包 从 NuGet 引用 Autofac.Extensions.DependencyInjection包。 使用容器 打开MauiProgram.cs文件，在所有代码最后、return buil...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/maui/caozuo/shiyongautofac.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"使用Autofac"}],["meta",{"property":"og:description","content":"概述 Autofac 是一个开源的控制反转容器，通过将.NET 程序的控制反转容器替换为 Autofac，可以实现例如属性注入、面向切面编程等功能。 操作 引用包 从 NuGet 引用 Autofac.Extensions.DependencyInjection包。 使用容器 打开MauiProgram.cs文件，在所有代码最后、return buil..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Autofac\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"引用包","slug":"引用包","link":"#引用包","children":[]},{"level":3,"title":"使用容器","slug":"使用容器","link":"#使用容器","children":[]},{"level":3,"title":"解析依赖项","slug":"解析依赖项","link":"#解析依赖项","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"dotnet/maui/caozuo/shiyongautofac.md","localizedDate":"2023年4月2日","excerpt":"<h2>概述</h2>\\n<p>Autofac 是一个开源的控制反转容器，<a href=\\"http://xn--pet571jdha.NET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">通过将.NET</a> 程序的控制反转容器替换为 Autofac，可以实现例如属性注入、面向切面编程等功能。</p>\\n<h2>操作</h2>\\n<h3>引用包</h3>\\n<p>从 NuGet 引用 Autofac.Extensions.DependencyInjection包。</p>\\n<h3>使用容器</h3>\\n<p>打开MauiProgram.cs文件，在<strong>所有代码最后</strong>、return builder.Build();<strong>之前</strong>，通过ConfigureContainer来使用AutofacServiceProviderFactory来构建使用 Autofac 容器：</p>","autoDesc":true}');export{k as comp,d as data};
