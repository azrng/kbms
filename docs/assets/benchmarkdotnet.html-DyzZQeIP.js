import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as t,b as l}from"./app-DMmdIwn0.js";const i={},r=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u={href:"https://benchmarkdotnet.org/index.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://benchmarkdotnet.org/articles/overview.html",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>什么是基准测试？ 基准测试是对应用程序的一段代码的性能提供一个或者一组度量值，度量代码本质来说就是让你清楚了解你的应用程序的性能到底是咋样的，当你想优化代码的是，手里有可以这些性能度量值是多好。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>[SimpleJob(RuntimeMoniker.NetCoreApp30)] <ul><li>与其它版本的基准进行比较</li></ul></li><li>RankColumn <ul><li>输出的性能信息增加一个排名列</li></ul></li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>新建控制台项目并安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;BenchmarkDotNet&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;0.13.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们要对比字符串拼接的效率高低，那么我们可以新建一个测试的类叫做StringJoinTest</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MemoryDiagnoser</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringJoinTest</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;田七&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;田七&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;田七&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">JiaHao</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;张三&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;李四&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;王五&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;赵六&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;田七&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们想运行就可以在Program的Main方法中编写</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>StringJoinTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后这个时候修改项目运行模式为Release(Debug模式下会报错，因为程序集是没有优化过的)，或者直接在项目目录下运行命令行</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet run <span class="token operator">-</span>c Release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成结果如下 BenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.2604) AMD Ryzen 7 4800H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores .NET SDK=7.0.200-preview.22628.1 [Host]     : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2 DefaultJob : .NET 6.0.14 (6.0.1423.7309), X64 RyuJIT AVX2</p><table><thead><tr><th>Method</th><th>Mean</th><th>Error</th><th>StdDev</th><th>Median</th><th>Gen0</th><th>Allocated</th></tr></thead><tbody><tr><td>Join</td><td>38.2772 ns</td><td>0.5005 ns</td><td>0.4179 ns</td><td>38.4088 ns</td><td>0.0535</td><td>112 B</td></tr><tr><td>Concat</td><td>38.8657 ns</td><td>0.2936 ns</td><td>0.2746 ns</td><td>38.7899 ns</td><td>0.0535</td><td>112 B</td></tr><tr><td>StringBuilder</td><td>31.8107 ns</td><td>0.0967 ns</td><td>0.0905 ns</td><td>31.8033 ns</td><td>0.0727</td><td>152 B</td></tr><tr><td>JiaHao</td><td>0.0004 ns</td><td>0.0008 ns</td><td>0.0007 ns</td><td>0.0000 ns</td><td>-</td><td>-</td></tr></tbody></table><p>里面包含BenchmarkDotNet的版本信息、操作系统、计算机硬件、.Net版本、编辑器的一些信息以及一些应用程序相关的性能信息，从这个图中可以看到StringBuilder的性能最好(JiaHao方法应该是做了优化直接当成一个字符串处理了)，但是占用了更多的内存。</p><p>图注： Mean：平均值，表示一组数据的平均数。在基准测试中，通常用于表示每次测试运行的平均时间或性能指标。 Error：误差，表示测量值与真实值之间的偏差。在基准测试中，通常用于表示每次测试的测量误差范围 StdDev：标准差，表示一组数据的离散程度。在基准测试中，通常用于衡量测试结果的稳定性和可靠性。较小的标准差意味着测试结果更加稳定 Median：中位数，表示一组数据按大小排序后的中间值。在基准测试中，中位数通常用于表示数据的集中趋势，比平均值更不受异常值的影响。 Gen0：表示.NET垃圾回收（GC）的代数。GC将内存分为不同的代（Generation），根据对象的存活时间来进行垃圾回收。Gen0代表最新创建的对象，Gen2代表存活时间最长的对象，而Gen1则处于两者之间。在基准测试中，这些指标表示了垃圾回收的次数。 Allocated：表示每次测试执行期间分配的内存数量。在基准测试中，用于测量每次测试运行时对象的分配情况</p><h3 id="数组拷贝示例" tabindex="-1"><a class="header-anchor" href="#数组拷贝示例"><span>数组拷贝示例</span></a></h3><p>测试几种数组拷贝的方法测试效率</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">BenchmarkDotNet<span class="token punctuation">.</span>Attributes</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">BenchmarkDotNet<span class="token punctuation">.</span>Running</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MemoryDiagnoser</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _testData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _testData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">CopyByFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> rawPacketData <span class="token operator">=</span> _testData<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> length <span class="token operator">=</span> _testData<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> localIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rawArrayIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> localIndex <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> localIndex<span class="token operator">++</span><span class="token punctuation">,</span> rawArrayIndex<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            data<span class="token punctuation">[</span>localIndex<span class="token punctuation">]</span> <span class="token operator">=</span> rawPacketData<span class="token punctuation">[</span>rawArrayIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">CopyByArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> length <span class="token operator">=</span> _testData<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> rawPacketData <span class="token operator">=</span> _testData<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>rawPacketData<span class="token punctuation">,</span> start<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">CopyByClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_testData<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _testData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码返回 data 作为 object 仅仅只是为了做性能测试，避免被 dotnet 优化掉</p></blockquote><p>我的设备测试结果 BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1503 (21H2) AMD Ryzen 7 4800H with Radeon Graphics, 1 CPU, 16 logical and 8 physical cores .NET SDK=6.0.200-preview.22055.15 [Host] : .NET 6.0.1 (6.0.121.56705), X64 RyuJIT [AttachedDebugger] DefaultJob : .NET 6.0.1 (6.0.121.56705), X64 RyuJIT</p><table><thead><tr><th>Method</th><th>Mean</th><th>Error</th><th>StdDev</th><th>Gen 0</th><th>Allocated</th></tr></thead><tbody><tr><td>CopyByFor</td><td>723.0 ns</td><td>4.58 ns</td><td>4.06 ns</td><td>1.9226</td><td>4 KB</td></tr><tr><td>CopyByArray</td><td>186.1 ns</td><td>1.06 ns</td><td>0.94 ns</td><td>1.9228</td><td>4 KB</td></tr><tr><td>CopyByClone</td><td>199.8 ns</td><td>2.65 ns</td><td>2.35 ns</td><td>1.9157</td><td>4 KB</td></tr></tbody></table><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,24),m={href:"https://mp.weixin.qq.com/s/Nem3nLZ1vhd9NUTaAhYu1A",target:"_blank",rel:"noopener noreferrer"};function v(h,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("BenchmarkDotNet是一个用于对C#代码进行基准测试的.NET工具包。它可以将你的方法转化为基准，并提供一些测试报告，可以帮助你进行基准、性能测试。 官网："),n("a",u,[s("https://benchmarkdotnet.org/index.html"),t(a)]),s(" 文档："),n("a",d,[s("https://benchmarkdotnet.org/articles/overview.html"),t(a)])]),k,n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/Nem3nLZ1vhd9NUTaAhYu1A"),t(a)]),s(" | .NET 6 数组拷贝性能对比")])])}const w=e(i,[["render",v],["__file","benchmarkdotnet.html.vue"]]),f=JSON.parse('{"path":"/middleware/testMange/jizhunceshi/benchmarkdotnet.html","title":"BenchmarkDotNet","lang":"zh-CN","frontmatter":{"title":"BenchmarkDotNet","lang":"zh-CN","date":"2023-06-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"benchmarkdotnet","slug":"oggkof","docsId":"66071100","description":"概述 BenchmarkDotNet是一个用于对C#代码进行基准测试的.NET工具包。它可以将你的方法转化为基准，并提供一些测试报告，可以帮助你进行基准、性能测试。 官网：https://benchmarkdotnet.org/index.html 文档：https://benchmarkdotnet.org/articles/overview.htm...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/jizhunceshi/benchmarkdotnet.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"BenchmarkDotNet"}],["meta",{"property":"og:description","content":"概述 BenchmarkDotNet是一个用于对C#代码进行基准测试的.NET工具包。它可以将你的方法转化为基准，并提供一些测试报告，可以帮助你进行基准、性能测试。 官网：https://benchmarkdotnet.org/index.html 文档：https://benchmarkdotnet.org/articles/overview.htm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T02:43:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T02:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BenchmarkDotNet\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T02:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"数组拷贝示例","slug":"数组拷贝示例","link":"#数组拷贝示例","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1700361818000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.01,"words":1202},"filePathRelative":"middleware/testMange/jizhunceshi/benchmarkdotnet.md","localizedDate":"2023年6月25日","excerpt":"<h2>概述</h2>\\n<p>BenchmarkDotNet是一个用于对C#代码进行基准测试的.NET工具包。它可以将你的方法转化为基准，并提供一些测试报告，可以帮助你进行基准、性能测试。\\n官网：<a href=\\"https://benchmarkdotnet.org/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://benchmarkdotnet.org/index.html</a>\\n文档：<a href=\\"https://benchmarkdotnet.org/articles/overview.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://benchmarkdotnet.org/articles/overview.html</a></p>","autoDesc":true}');export{w as comp,f as data};
