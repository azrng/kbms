import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as t,o as n}from"./app-pTjtTAfI.js";const a={};function l(i,e){return n(),o("div",null,e[0]||(e[0]=[t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><a href="http://xn--Workflow-Core-n00udt63cs12gnp5c.NET" target="_blank" rel="noopener noreferrer">Workflow-Core是一个基于.NET</a> Standard的轻量级工作流引擎，目前有超过3100+个star。它提供了FluentAPI、多任务、持久化以及并行处理的功能，适合于小型工作流、责任链的需求开发。<br> 由于Workflow-Core支持工作流长期运行，因此Workflow-Core支持以下多种数据源格式的持久化，可以通过安装不同的Provider包来实现对应的持久化：</p><ul><li>（默认提供，用于测试和开发）内存</li><li>MongoDB</li><li>MS SQL Server</li><li>MySql</li><li>Sqlite</li><li>Redis</li><li>PostgreSQL</li></ul><p>仓库地址：<a href="https://github.com/danielgerlag/workflow-core" target="_blank" rel="noopener noreferrer">https://github.com/danielgerlag/workflow-core</a><br> 使用文档：<a href="https://www.cnblogs.com/edisonchou/p/lightweight_workflow_engine_for_dotnetcore.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/edisonchou/p/lightweight_workflow_engine_for_dotnetcore.html</a></p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/nUJJa-8SNlzLOrD838XHYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/nUJJa-8SNlzLOrD838XHYA</a> | .NET Core 工作流WorkFlowCore</p>',6)]))}const s=r(a,[["render",l],["__file","workflow-core.html.vue"]]),d=JSON.parse('{"path":"/middleware/gongzuoliu/workflow-core.html","title":"Workflow-Core","lang":"zh-CN","frontmatter":{"title":"Workflow-Core","lang":"zh-CN","date":"2021-12-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"workflow-core","slug":"yw3w43","docsId":"61783542","description":"概述 Workflow-Core是一个基于.NET Standard的轻量级工作流引擎，目前有超过3100+个star。它提供了FluentAPI、多任务、持久化以及并行处理的功能，适合于小型工作流、责任链的需求开发。 由于Workflow-Core支持工作流长期运行，因此Workflow-Core支持以下多种数据源格式的持久化，可以通过安装不同的Pr...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/gongzuoliu/workflow-core.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Workflow-Core"}],["meta",{"property":"og:description","content":"概述 Workflow-Core是一个基于.NET Standard的轻量级工作流引擎，目前有超过3100+个star。它提供了FluentAPI、多任务、持久化以及并行处理的功能，适合于小型工作流、责任链的需求开发。 由于Workflow-Core支持工作流长期运行，因此Workflow-Core支持以下多种数据源格式的持久化，可以通过安装不同的Pr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T09:10:20.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-12-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-25T09:10:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Workflow-Core\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-25T09:10:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1714036220000,"contributors":[{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2},{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"middleware/gongzuoliu/workflow-core.md","localizedDate":"2021年12月3日","excerpt":"<h2>概述</h2>\\n<p><a href=\\"http://xn--Workflow-Core-n00udt63cs12gnp5c.NET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Workflow-Core是一个基于.NET</a> Standard的轻量级工作流引擎，目前有超过3100+个star。它提供了FluentAPI、多任务、持久化以及并行处理的功能，适合于小型工作流、责任链的需求开发。<br>\\n由于Workflow-Core支持工作流长期运行，因此Workflow-Core支持以下多种数据源格式的持久化，可以通过安装不同的Provider包来实现对应的持久化：</p>","autoDesc":true}');export{s as comp,d as data};
