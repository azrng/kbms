import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,b as n,e as s,f as l,d as a}from"./app-CBxp4zeL.js";const i="/kbms/common/1629206240618-629e15ed-1b90-44d0-b5f8-85023f177022.png",u={},r=a('<h3 id="_1-基本了解" tabindex="-1"><a class="header-anchor" href="#_1-基本了解"><span>1. 基本了解</span></a></h3><h4 id="_1-1-反射概述" tabindex="-1"><a class="header-anchor" href="#_1-1-反射概述"><span>1.1 反射概述</span></a></h4><p>文字说明 审查元数据并收集关于它的类型信息的能力称为反射，其中元数据（编译以后的最基本数据单元）就是一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等 反射提供了封装程序集、模块和类型的对象（Type 类型），可以使用反射动态创建类型的实例，将类型绑定到现有对象，或从现有对象获取类型并调用其方法或访问其字段和属性。如果代码中使用了属性，可以利用反射对它们进行访问 实际上 反射是微软封装的一个帮助类库：using System.Reflection;</p><h4 id="_1-2-反射用途" tabindex="-1"><a class="header-anchor" href="#_1-2-反射用途"><span>1.2 反射用途</span></a></h4><ul><li><strong>使用Assembly定义和加载程序集，加载在程序集清单中列出模块，以及从此程序集中查找类型并创建该类型的实例</strong></li><li><strong>使用Module了解包含模块的程序集以及模块中的类等，还可以获取在模块上定义的所有全局方法或其他特定的非全局方法</strong></li><li><strong>使用ConstructorInfo了解构造函数的名称、参数、访问修饰符（如pulic 或private）和实现详细信息（如abstract或virtual）等；使用Type的GetConstructors或GetConstructor方法来调用特定的构造函数</strong></li><li><strong>使用MethodInfo了解方法的名称、返回类型、参数、访问修饰符（如pulic 或private）和实现详细信息（如abstract或virtual）等；使用Type的GetMethods或GetMethod方法来调用特定的方法</strong></li><li><strong>使用FiedInfo了解字段的名称、访问修饰符（如public或private）和实现详细信息（如static）等，并获取或设置字段值。</strong></li><li><strong>使用EventInfo了解事件的名称、事件处理程序数据类型、自定义属性、声明类型和反射类型等，添加或移除事件处理程序。</strong></li><li><strong>使用PropertyInfo了解属性的名称、数据类型、声明类型、反射类型和只读或可写状态等，获取或设置属性值</strong></li><li><strong>使用ParameterInfo了解参数的名称、数据类型、是输入参数还是输出参数，以及参数在方法签名中的位置等</strong></li></ul><h4 id="_1-3-反射常用类" tabindex="-1"><a class="header-anchor" href="#_1-3-反射常用类"><span>1.3 反射常用类</span></a></h4><p>反射是一个程序集发现及执行的过程，通过反射能够得到 .exe 或.dll 等程序集内部的信息，使用反射能够看到一个程序集内部的接口、类、方法、字段、属性、特性等信息</p><table><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Assembly</td><td>通过此类能够载入操纵一个程序集，并获取程序集内部信息</td></tr><tr><td>FieldInfo</td><td>该类保存给定的字段信息</td></tr><tr><td>MethodInfo</td><td>该类保存给定的方法信息</td></tr><tr><td>MemberInfo</td><td>该类是一个基类，定义了EventInfo,FieldInfo,MethodInfo,PropertyInfo的多个公用行为</td></tr><tr><td>Module</td><td>该类能够使你能訪问多个程序集中的给定模块</td></tr><tr><td>ParameterInfo</td><td>该类保存给定的參数信息</td></tr><tr><td>PropertyInfo</td><td>该类保存给定的属性信息</td></tr></tbody></table><h3 id="_2-assembly-程序集对象" tabindex="-1"><a class="header-anchor" href="#_2-assembly-程序集对象"><span>2. Assembly 程序集对象</span></a></h3><h4 id="_2-1-对象简介" tabindex="-1"><a class="header-anchor" href="#_2-1-对象简介"><span>2.1 对象简介</span></a></h4><p>官方文档 程序集包含模块、模块包含类型，而类型包含成员。 反射提供封装程序集、模块和类型的对象。 可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型 其它文档 System.Reflection.Assembly：表示一个程序集 程序集是代码进行编译是的一个逻辑单元，把相关的代码和类型进行组合，然后生成PE文件（例如可执行文件.exe和类库文件.dll） 由于程序集在编译后并不一定会生成单个文件，而可能会生成多个物理文件，甚至可能会生成分布在不同位置的多个物理文件，所以程序集是一个逻辑单元，而不是一个物理单元；即程序集在逻辑上是一个编译单元，但在物理储存上可以有多种存在形式 对于静态程序集可以生成单个或多个文件，而动态程序集是存在于内存中的 在C#中程序集处处可见，因为任何基于.NET的代码在编译时都至少存在一个程序集（所有.NET项目都会默认引用mscorlib程序集） 程序集包含了两种文件：可执行文件（.exe文件）和 类库文件（.dll文件） 在VS开发环境中，一个解决方案可以包含多个项目，而每个项目就是一个程序集</p><h4 id="_2-2-应用程序结构" tabindex="-1"><a class="header-anchor" href="#_2-2-应用程序结构"><span>2.2 应用程序结构</span></a></h4>',12),d={href:"https://img2020.cnblogs.com/blog/1446823/202108/1446823-20210805203304924-460469547.png",target:"_blank",rel:"noopener noreferrer"},k=n("img",{src:i,alt:"image.png",loading:"lazy"},null,-1),m=a(`<h4 id="_2-3-静态方法" tabindex="-1"><a class="header-anchor" href="#_2-3-静态方法"><span>2.3 静态方法</span></a></h4><p>常用静态方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Assembly.Load</td><td>Assembly</td><td>加载相对路径下指定名称程序集</td></tr><tr><td>Assembly.LoadFile</td><td>Assembly</td><td>根据全路径获取指定程序集</td></tr><tr><td>Assembly.LoadFrom</td><td>Assembly</td><td>根据全路径获取指定程序集</td></tr></tbody></table><h4 id="_2-4-实例方法-属性" tabindex="-1"><a class="header-anchor" href="#_2-4-实例方法-属性"><span>2.4 实例方法,属性</span></a></h4><p>常用实例属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>属性值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>assembly.FullName</td><td>string</td><td>获取程序集的显示名称</td></tr><tr><td>assembly.Location</td><td>string</td><td>获取程序集的完整路径（全名称）</td></tr><tr><td>assembly.DefinedTypes</td><td>IEnumerable</td><td>获取定义在程序集中类型集合</td></tr><tr><td>assembly.Modules</td><td>IEnumerable</td><td>获取定义在程序集中模块集合</td></tr></tbody></table><p>常用实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>assembly.GetTypes()</td><td>Type[]</td><td>获取程序集中定义的类型数组</td></tr><tr><td>assembly.GetType()</td><td>Type</td><td>获取程序集中定义的类型</td></tr><tr><td>assembly.GetExportedTypes()</td><td>Type[]</td><td>获取程序集中定义的所有公共类型（类，接口，枚举等）</td></tr><tr><td>assembly.CreateInstance()</td><td>object</td><td>根据传入类型创建类型实例</td></tr></tbody></table><h4 id="_2-5-示例-加载程序集" tabindex="-1"><a class="header-anchor" href="#_2-5-示例-加载程序集"><span>2.5 示例：加载程序集</span></a></h4><p>方式一：Load，c2 引用了 Helper，有引用关系</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Helper</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">c2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 相对路径下加载指定名称程序集文件</span>
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;Helper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例二：LoadFile，c2与taskdao无引用关系</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">c2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 根据全名称（路径+文件名.后缀）下加载指定名称程序集文件</span>
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> 
                Assembly<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span><span class="token string">@&quot;E:\\SolutionZX\\taskdao\\bin\\Debug\\taskdao.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例三：LoadFrom，c2与taskdao无引用关系</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">c2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 根据全名称（路径+文件名.后缀）下加载指定名称程序集文件</span>
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> 
                Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">@&quot;E:\\SolutionZX\\taskdao\\bin\\Debug\\taskdao.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例四：根据类型创建类型实例，c2与taskdao无引用关系 dynamic 类型为动态类型，使用时编译器不会检查（运行时检查）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">c2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token comment">// 根据全名称（路径+文件名.后缀）下加载指定名称程序集文件</span>
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> 
                Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">@&quot;E:\\SolutionZX\\taskdao\\bin\\Debug\\taskdao.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// object _t = assembly.CreateInstance(&quot;task1dao.task1&quot;);</span>
            <span class="token comment">// 报错，object类型识别不出Show方法，因为C#是强类型语言</span>
            <span class="token comment">// _t.Show();</span>
            
            <span class="token class-name"><span class="token keyword">dynamic</span></span> _t <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">&quot;task1dao.task1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _t<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6-获取类型" tabindex="-1"><a class="header-anchor" href="#_2-6-获取类型"><span>2.6 获取类型</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">// 获取普通类型</span>
<span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
<span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.UserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 获取泛型类型</span>
<span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
<span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.UserInfo\`1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// UserInfo\`1 英文状态下数字1左边符号，参数个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-type-类型" tabindex="-1"><a class="header-anchor" href="#_3-type-类型"><span>3. Type 类型</span></a></h3><p>在C#中可以理解为一个类对应一个Type对象</p><h4 id="_3-1-实例属性-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-实例属性-方法"><span>3.1 实例属性,方法</span></a></h4><p>实例属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>属性值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>type.Name</td><td>string</td><td>获取类型名称（类名）</td></tr><tr><td>type.FullName</td><td>string</td><td>获取类全名（命名空间+类名称）</td></tr><tr><td>type.Namespace</td><td>string</td><td>获取类所在的命名空间</td></tr><tr><td>type.Assembly</td><td>string</td><td>获取类所在程序集名称</td></tr><tr><td>type.BaseType</td><td>Type</td><td>获取基类（父类）</td></tr><tr><td>type.IsSubclassOf(Type parent)</td><td>bool</td><td>type是否是parent的子类</td></tr><tr><td>type.IsInstanceOfType(object o)</td><td>bool</td><td>o是否是type类的对象</td></tr><tr><td>type.IsClass</td><td>bool</td><td>获取对象类型是否是类</td></tr><tr><td>type.IsInterface</td><td>bool</td><td>获取对象类型是否是接口</td></tr><tr><td>type.IsNotPublic</td><td>bool</td><td>获取对象类型是否公开</td></tr><tr><td>type.IsAbstract</td><td>bool</td><td>获取对象类型是否是抽象的</td></tr><tr><td>type.IsSealed</td><td>bool</td><td>获取对象类型是否是密封的</td></tr><tr><td>type.IsArray</td><td>bool</td><td>获取对象类型是否是数组</td></tr><tr><td>type.IsEnum</td><td>bool</td><td>获取对象类型是否是枚举</td></tr></tbody></table><p>实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>type.GetMembers()</td><td>MemberInfo[]</td><td>获取类型中所有公共成员</td></tr><tr><td>type.GetMethods()</td><td>MethodInfo[]</td><td>获取所有公共方法(包含基类)</td></tr><tr><td>type.GetConstructors()</td><td>ConstructorInfo[]</td><td>获取类型中所有公共构造函数</td></tr><tr><td>type.GetFields()</td><td>FieldInfo[]</td><td>获取所有公共字段</td></tr><tr><td>type.GetProperties()</td><td>PropertyInfo[]</td><td>获取所有公共属性</td></tr><tr><td>type.GetInterfaces()</td><td>Type[]</td><td>获取所有公共接口</td></tr><tr><td>type.GetCustomAttributes(...)</td><td>object[]</td><td>获取此类型指定特性数组</td></tr><tr><td></td><td></td><td></td></tr><tr><td>type.MakeGenericType(...)</td><td>Type</td><td>设置泛型类，泛型参数类型</td></tr><tr><td></td><td></td><td></td></tr><tr><td>type.GetMember(...)</td><td>MemberInfo[]</td><td>多个，获取公共成员(不常用)</td></tr><tr><td>type.GetMethod(...)</td><td>MethodInfo</td><td>单个，获取公共方法</td></tr><tr><td>type.GetConstructor(...)</td><td>ConstructorInfo</td><td>单个，获取公共方法</td></tr><tr><td>type.GetField(...)</td><td>FieldInfo</td><td>单个，获取公共字段</td></tr><tr><td>type.GetProperty(...)</td><td>PropertyInfo</td><td>单个，获取公共属性</td></tr><tr><td>type.GetInterface(...)</td><td>Type</td><td>单个，获取公共接口</td></tr><tr><td>type.IsDefined(...)</td><td>bool</td><td>获取此类型是否继承指定特性</td></tr><tr><td>type.GetCustomAttribute(...)</td><td>Attribute</td><td>单个，获取此类型指定特性</td></tr></tbody></table><h4 id="_3-2-操作示例一" tabindex="-1"><a class="header-anchor" href="#_3-2-操作示例一"><span>3.2 操作示例一</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Inta</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Intb</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo<span class="token punctuation">&lt;</span>A<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Base</span><span class="token punctuation">,</span> <span class="token class-name">Inta</span><span class="token punctuation">,</span> <span class="token class-name">Intb</span></span>
<span class="token punctuation">{</span>
    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共构造函数</span>
    <span class="token keyword">public</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;无参构造方法...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;1个参数构造方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 私有构造函数</span>
    <span class="token keyword">private</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共字段</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> code<span class="token punctuation">;</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 私有字段</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">;</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共属性</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共方法</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;无参数实例方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;无参数重载实例方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;有参数重载实例方法-&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共静态方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Statc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 私有方法</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;无参数私有方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetM</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;有参数私有方法-&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 公共泛型方法</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GenericC</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;公共泛型无参方法:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">GenericS</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;公共泛型无参方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">GenericsA</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">,</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;公共泛型有参方法：&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过类获得对应的Type</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 Assembly 对象，通过类的fullname类获得Type对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Assembly</span> assem <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span><span class="token string">@&quot;E:\\SolutionRP\\DMO\\bin\\Debug\\DMO.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Type</span> type <span class="token operator">=</span> assem<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;DMO.UserInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>综合示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;类型名:&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;类全名：&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;命名空间名:&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;程序集名：&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;模块名:&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;基类名：&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>BaseType<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;是否类：&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得实例的方法</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;类的公共成员：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MemberInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> memberInfos <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到所有公共成员</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> memberInfos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;成员类型：&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>MemberType <span class="token operator">+</span> <span class="token string">&quot;\\t成员：&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-示例二-获取公共方法" tabindex="-1"><a class="header-anchor" href="#_3-3-示例二-获取公共方法"><span>3.3 示例二：获取公共方法</span></a></h4><p>一：获取所有公共成员</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共成员：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MemberInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> members <span class="token operator">=</span>  type<span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>members<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共方法(包含基类)：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> methods <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共构造函数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> constructors <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>constructors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共字段：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fields <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共属性：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> properties <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;获取所有公共接口：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> interfaces <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


根据名称获取公共成员<span class="token punctuation">(</span>不常用<span class="token punctuation">)</span>
<span class="token class-name">MemberInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> memberInfo1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMember</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MemberInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> memberInfo2 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMember</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>memberInfo1<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>memberInfo2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>


根据名称获取公共方法
<span class="token comment">// 获取公共方法（非重载方法）</span>
<span class="token class-name">MethodInfo</span> methodInfo1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>methodInfo1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取公共重载方法，根据参数顺序，类型，个数获取</span>
<span class="token comment">// 1.调用有一个int类型参数的重载方法</span>
<span class="token class-name">MethodInfo</span> methodInfo2 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.调用无参数重载方法(不可传null)</span>
<span class="token class-name">MethodInfo</span> methodInfo3 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>methodInfo3<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>


根据参数的类型，数量，顺序返回指定构造方法
<span class="token comment">// 返回无参公共构造方法</span>
<span class="token class-name">ConstructorInfo</span> constructor1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 返回有一个int类型参数的公共构造方法</span>
<span class="token class-name">ConstructorInfo</span> constructor2 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


获取类型公共字段
<span class="token class-name">FieldInfo</span> fieldInfo1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fieldInfo1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>


获取类型公共属性
<span class="token class-name">PropertyInfo</span> propertyInfo1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>propertyInfo1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-示例三-获取静态方法" tabindex="-1"><a class="header-anchor" href="#_3-4-示例三-获取静态方法"><span>3.4 示例三：获取静态方法</span></a></h4><h4 id="_3-5-示例四-获取泛型方法" tabindex="-1"><a class="header-anchor" href="#_3-5-示例四-获取泛型方法"><span>3.5 示例四：获取泛型方法</span></a></h4><p>获取泛型方法</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Assembly assembly <span class="token operator">=</span> typeof<span class="token punctuation">(</span>Program<span class="token punctuation">)</span>.Assembly<span class="token punctuation">;</span>

// 获取有一个泛型参数的类
Type <span class="token builtin class-name">type</span> <span class="token operator">=</span> assembly.GetType<span class="token punctuation">(</span>&quot;c2.UserInfo\`1&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>

// 指定泛型参数类型
Type generictype <span class="token operator">=</span> type.MakeGenericType<span class="token punctuation">(</span>new Type<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> typeof<span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

object oType <span class="token operator">=</span> Activator.CreateInstance<span class="token punctuation">(</span>generictype<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-6-示例五-获取特性" tabindex="-1"><a class="header-anchor" href="#_3-6-示例五-获取特性"><span>3.6 示例五：获取特性</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomAttribute</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Studen</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Studen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 如果有多个相同特性，默认取首个</span>
        <span class="token class-name">Attribute</span> attribute <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> oAttrbute <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>oAttrbute<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-methodinfo-方法" tabindex="-1"><a class="header-anchor" href="#_4-methodinfo-方法"><span>4. MethodInfo 方法</span></a></h3><p>MemberInfo：MemberInfo是一个抽象基类，代表某个类型的成员（如字段、方法、属性等）。它是所有成员信息的基类，包括FieldInfo、MethodInfo、PropertyInfo等。通过MemberInfo，可以获取成员的名称、属性、特性以及其他相关信息。</p><p>一个 MethodInfo 表示一个方法（公共，私有，静态，构造）</p><h4 id="_4-1-实例属性-方法" tabindex="-1"><a class="header-anchor" href="#_4-1-实例属性-方法"><span>4.1 实例属性,方法</span></a></h4><p>实例属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>属性值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>methodInfo.Name</td><td>string</td><td>方法名称</td></tr><tr><td>methodInfo.ReturnType</td><td>Type</td><td>获取方法返回值类型</td></tr><tr><td>methodInfo.IsConstructor</td><td>bool</td><td>是否是构造方法</td></tr><tr><td>methodInfo.IsAbstract</td><td>bool</td><td>是否为抽象方法</td></tr><tr><td>methodInfo.IsPrivate</td><td>bool</td><td>是否为私有方法</td></tr><tr><td>methodInfo.IsPublic</td><td>bool</td><td>是否为公共方法</td></tr><tr><td>methodInfo.IsStatic</td><td>bool</td><td>是否为静态方法</td></tr><tr><td>methodInfo.IsVirtual</td><td>bool</td><td>是否为虚方法</td></tr><tr><td>methodInfo.IsGenericMethod</td><td>bool</td><td>是否为泛型方法</td></tr></tbody></table><p>实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>methodInfo.Invoke(...)</td><td>object</td><td>调用非泛型方法</td></tr><tr><td>methodInfo.GetParameters()</td><td>ParameterInfo[]</td><td>获取方法参数数组</td></tr><tr><td>methodInfo.IsDefined(...)</td><td>bool</td><td>获取此方法是否继承指定特性</td></tr><tr><td>methodInfo.GetCustomAttribute(...)</td><td>Attribute</td><td>单个，获取指定特性</td></tr><tr><td>methodInfo.GetCustomAttributes(...)</td><td>object[]</td><td>获取此方法指定特性数组</td></tr></tbody></table><h4 id="_4-2-操作示例一" tabindex="-1"><a class="header-anchor" href="#_4-2-操作示例一"><span>4.2 操作示例一</span></a></h4><p>获取调用非泛型<strong>非重载</strong>无参数方法，无参数方法第二个参数可传null，但不推荐</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

methodInfo <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取调用非泛型<strong>重载</strong>无参数方法，无参数方法第二个参数可传null，但不推荐</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

methodInfo <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取调用非泛型<strong>重载</strong>有参数方法，多个参数用逗号隔开，参数类型，个数，顺序必须相同</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

methodInfo <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Show&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-操作示例二" tabindex="-1"><a class="header-anchor" href="#_4-3-操作示例二"><span>4.3 操作示例二</span></a></h4><p>获取泛型方法与获取普通方法一致，泛型参数按从左到右顺序传入，方法参数类型与泛型参数类型一致</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>调用公共泛型无参方法
<span class="token comment">// 获取泛型方法</span>
<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GenericS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 指定泛型方法参数</span>
<span class="token class-name">MethodInfo</span> genericmethod <span class="token operator">=</span> methodInfo<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

genericmethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


调用公共泛型有参方法
<span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GenericsA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodInfo</span> genericsmethod <span class="token operator">=</span> 
    methodInfo<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
genericsmethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


调用公共泛型类的有参方法，泛型类中的泛型参数与泛型方法的泛型参数一致
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
    <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.UserInfo\`1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Type</span> generictype <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>generictype<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> generictype<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GenericC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    methodInfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


调用公共泛型类的有参方法，泛型类中的泛型参数与泛型方法的泛型参数不一致
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
    <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.UserInfo\`1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Type</span> generictype <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>generictype<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MethodInfo</span> methodInfo <span class="token operator">=</span> generictype<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GenericsA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodInfo</span> genericsmethodinfo <span class="token operator">=</span> 
        methodInfo<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    genericsmethodinfo<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;af&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-constructorinfo-构造函数" tabindex="-1"><a class="header-anchor" href="#_5-constructorinfo-构造函数"><span>5. ConstructorInfo 构造函数</span></a></h3><h4 id="_5-1-实例属性-方法" tabindex="-1"><a class="header-anchor" href="#_5-1-实例属性-方法"><span>5.1 实例属性,方法</span></a></h4><p>实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>constructor.Invoke(...)</td><td>object</td><td>执行构造函数</td></tr><tr><td>constructor.IsDefined(...)</td><td>bool</td><td>获取此构造函数是否继承指定特性</td></tr><tr><td>constructor.GetCustomAttribute(...)</td><td>Attribute</td><td>单个，获取指定特性</td></tr><tr><td>constructor.GetCustomAttributes(...)</td><td>object[]</td><td>获取此构造函数指定特性数组</td></tr></tbody></table><h4 id="_5-2-操作实例一" tabindex="-1"><a class="header-anchor" href="#_5-2-操作实例一"><span>5.2 操作实例一</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;无参构造函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> n<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;有参构造函数：&quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


调用构造函数
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
    <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">ConstructorInfo</span> constructor <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ConstructorInfo</span> constructor1 <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constructor1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;liai&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ParameterInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">GetParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>parameters<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-propertyinfo-属性" tabindex="-1"><a class="header-anchor" href="#_6-propertyinfo-属性"><span>6. PropertyInfo 属性</span></a></h3><h4 id="_6-1-实例属性-方法" tabindex="-1"><a class="header-anchor" href="#_6-1-实例属性-方法"><span>6.1 实例属性,方法</span></a></h4><p>实例属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>属性值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>property.Name</td><td>string</td><td>获取属性名称</td></tr><tr><td>property.CanRead</td><td>bool</td><td>获取属性是否可读</td></tr><tr><td>property.CanWrite</td><td>bool</td><td>获取属性是否可写</td></tr><tr><td>property.PropertyType</td><td>Type</td><td>获取属性类型</td></tr></tbody></table><p>实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>property.SetValue(...)</td><td>void</td><td>设置对象属性</td></tr><tr><td>property.GetValue(...)</td><td>object</td><td>获取对象属性值</td></tr><tr><td>property.IsDefined(...)</td><td>bool</td><td>获取此属性是否继承指定特性</td></tr><tr><td>property.GetCustomAttribute(...)</td><td>Attribute</td><td>单个，获取指定特性</td></tr><tr><td>property.GetCustomAttributes(...)</td><td>object[]</td><td>获取此属性指定特性数组</td></tr></tbody></table><h4 id="_6-2-操作实例一" tabindex="-1"><a class="header-anchor" href="#_6-2-操作实例一"><span>6.2 操作实例一</span></a></h4><p>获取公共属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 获取所有</span>
<span class="token class-name">PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> propertys <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取指定</span>
<span class="token class-name">PropertyInfo</span> property <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取属性，设置属性值，获取属性值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReflectSetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//反射创建对象</span>
    <span class="token class-name"><span class="token keyword">var</span></span> testClass1 <span class="token operator">=</span> <span class="token punctuation">(</span>ReflectTestClass<span class="token punctuation">)</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ReflectTestClass</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    testClass1<span class="token punctuation">.</span>Name<span class="token operator">=</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//给已知的对象赋值</span>
    <span class="token class-name"><span class="token keyword">var</span></span> testClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReflectTestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> namePro <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//赋值</span>
    namePro<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>testClass<span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//取值</span>
    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> namePro<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>testClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//给你不知道泛型数据类型的值赋值，假设我们不知道InfoList的泛型类型</span>

    <span class="token class-name"><span class="token keyword">var</span></span> propertyInfo <span class="token operator">=</span> testClass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>testClass<span class="token punctuation">.</span>InfoList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//对属性进行初始化。propertyInfo.PropertyType.GenericTypeArguments是列表的泛型类型</span>
    <span class="token class-name"><span class="token keyword">var</span></span> newList <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">List<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span>propertyInfo<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>GenericTypeArguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyInfo<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>testClass<span class="token punctuation">,</span> newList<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> addMethod <span class="token operator">=</span> newList<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    addMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>newList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;李思&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> testClass<span class="token punctuation">.</span>InfoList<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-fieldinfo-字段" tabindex="-1"><a class="header-anchor" href="#_7-fieldinfo-字段"><span>7. FieldInfo 字段</span></a></h3><p>FieldInfo：FieldInfo是MemberInfo的子类，用于表示类型的字段。它提供了访问和操作字段的能力，例如获取或设置字段的值、获取字段的类型、获取字段的修饰符等。</p><p>总结来说，MemberInfo是用于表示任意成员的基类，而FieldInfo是专门用于表示字段的子类。FieldInfo提供了更具体的方法和属性，可用于对字段进行操作和访问。如果你只需要处理字段相关的信息，那么使用FieldInfo更加方便。如果需要涉及到其他类型的成员，可以使用MemberInfo来处理更广泛的情况。</p><h4 id="_7-1-实例属性-方法" tabindex="-1"><a class="header-anchor" href="#_7-1-实例属性-方法"><span>7.1 实例属性,方法</span></a></h4><p>实例属性</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>属性值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>field.Name</td><td>string</td><td>获取字段名称</td></tr><tr><td>field.Is...</td><td>bool</td><td>获取字段是否为...</td></tr><tr><td>field.FieldType</td><td>Type</td><td>获取字段类型</td></tr></tbody></table><p>实例方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>返回值类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>field.IsDefined(...)</td><td>bool</td><td>获取此字段是否继承指定特性</td></tr><tr><td>field.GetCustomAttribute(...)</td><td>Attribute</td><td>单个，获取指定特性</td></tr><tr><td>field.GetCustomAttributes(...)</td><td>object[]</td><td>获取此字段指定特性数组</td></tr></tbody></table><h4 id="_7-2-操作实例一" tabindex="-1"><a class="header-anchor" href="#_7-2-操作实例一"><span>7.2 操作实例一</span></a></h4><p>获取字段</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
        <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.Order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FieldInfo</span> field <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fields <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取值，设置值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
        <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;c2.Order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">object</span></span> oType <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FieldInfo</span> field <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oType<span class="token punctuation">,</span> <span class="token string">&quot;libai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>oType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-扩展补充" tabindex="-1"><a class="header-anchor" href="#_8-扩展补充"><span>8. 扩展补充</span></a></h3><h4 id="_8-1-加载程序集" tabindex="-1"><a class="header-anchor" href="#_8-1-加载程序集"><span>8.1 加载程序集</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 获得当前【应用程序域】中的所有程序集</span>
<span class="token class-name">Assembly<span class="token punctuation">[</span><span class="token punctuation">]</span></span> ass <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span><span class="token function">GetAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获得当前对象所属的类所在的程序集</span>
<span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assembly.LoadFile 与 Assembly.LoadFrom的差别</p><ul><li><strong>LoadFile 方法用来载入和检查具有同样标识但位于不同路径中的程序集，但不会载入程序的依赖项</strong></li><li><strong>LoadFrom 不能用于载入标识同样但路径不同的程序集</strong></li></ul><p>创建实例对象 此方法的作用与 new 一个实例对象相同</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8-2-module-程序集模块" tabindex="-1"><a class="header-anchor" href="#_8-2-module-程序集模块"><span>8.2 Module 程序集模块</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;mscorlib&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载程序集</span>
<span class="token class-name">Module</span> module <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetModule</span><span class="token punctuation">(</span><span class="token string">&quot;CommonLanguageRuntimeLibrary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到指定模块</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;模块名：&quot;</span> <span class="token operator">+</span> module<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> types <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">FindTypes</span><span class="token punctuation">(</span>Module<span class="token punctuation">.</span>FilterTypeName<span class="token punctuation">,</span> <span class="token string">&quot;Assembly*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> types<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;类名：&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出类型名</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-3-bindingflags说明" tabindex="-1"><a class="header-anchor" href="#_8-3-bindingflags说明"><span>8.3 BindingFlags说明</span></a></h4><table><thead><tr><th><strong>枚举值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>BindingFlags.Instance</td><td>对象实例</td></tr><tr><td>BindingFlags.Static</td><td>静态成员</td></tr><tr><td>BindingFlags.Public</td><td>指可在搜索中包含公共成员</td></tr><tr><td>BindingFlags.NonPublic</td><td>指可在搜索中包含非公共成员（即私有成员和受保护的成员）</td></tr><tr><td>BindingFlags.FlattenHierarchy</td><td>指可包含层次结构上的静态成员</td></tr><tr><td>BindingFlags.IgnoreCase</td><td>表示忽略 name 的大小写</td></tr><tr><td>BindingFlags.DeclaredOnly</td><td>仅搜索 Type 上声明的成员，而不搜索被简单继承的成员</td></tr><tr><td>BindingFlags.CreateInstance</td><td>表示调用构造函数。忽略 name。对其他调用标志无效</td></tr></tbody></table><h4 id="_8-4-属性应用-orm" tabindex="-1"><a class="header-anchor" href="#_8-4-属性应用-orm"><span><strong>8.4 属性应用：ORM</strong></span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>简易实现
<span class="token keyword">public</span> <span class="token return-type class-name">Order</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,name,createTime from order where id = &quot;</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>

    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">object</span></span> oOrder <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;constr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SqlDataReader</span> reader <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oOrder<span class="token punctuation">,</span>prop<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>Order<span class="token punctuation">)</span>oOrder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// DTD</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> no <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> createTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


泛型版本
<span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Find</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,name,createTime from order where id = &quot;</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>

    <span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">object</span></span> oOrder <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;constr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SqlDataReader</span> reader <span class="token operator">=</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>oOrder<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>oOrder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">BaseEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> no <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> createTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转载说明" tabindex="-1"><a class="header-anchor" href="#转载说明"><span>转载说明</span></a></h3><p>本文作者： Mr.wei 本文链接： https://www.cnblogs.com/weiyongguang/p/15105287.html</p>`,106);function v(b,y){const t=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("包含应用程序域（AppDomain），程序集（Assembly），模块（Module），类型（Type），成员（EventInfo、FieldInfo、MethodInfo、PropertyInfo） 几个层次 "),n("a",d,[k,l(t)]),s(" img")]),m])}const f=p(u,[["render",v],["__file","fanshexiangjie.html.vue"]]),w=JSON.parse('{"path":"/dotnet/csharp/fanshe/fanshexiangjie.html","title":"反射详解","lang":"zh-CN","frontmatter":{"title":"反射详解","lang":"zh-CN","date":"2023-10-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"fanshexiangjie","slug":"wi00xa","docsId":"51328481","description":"1. 基本了解 1.1 反射概述 文字说明 审查元数据并收集关于它的类型信息的能力称为反射，其中元数据（编译以后的最基本数据单元）就是一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等 反射提供了封装程序集、模块和类型的对象（Type 类型），可以使用反射动态创建类型的实例，将类型绑定到现有对象，或从现有对...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/fanshe/fanshexiangjie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"反射详解"}],["meta",{"property":"og:description","content":"1. 基本了解 1.1 反射概述 文字说明 审查元数据并收集关于它的类型信息的能力称为反射，其中元数据（编译以后的最基本数据单元）就是一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等 反射提供了封装程序集、模块和类型的对象（Type 类型），可以使用反射动态创建类型的实例，将类型绑定到现有对象，或从现有对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1629206240618-629e15ed-1b90-44d0-b5f8-85023f177022.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射详解\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1629206240618-629e15ed-1b90-44d0-b5f8-85023f177022.png\\"],\\"datePublished\\":\\"2023-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"1. 基本了解","slug":"_1-基本了解","link":"#_1-基本了解","children":[{"level":4,"title":"1.1 反射概述","slug":"_1-1-反射概述","link":"#_1-1-反射概述","children":[]},{"level":4,"title":"1.2 反射用途","slug":"_1-2-反射用途","link":"#_1-2-反射用途","children":[]},{"level":4,"title":"1.3 反射常用类","slug":"_1-3-反射常用类","link":"#_1-3-反射常用类","children":[]}]},{"level":3,"title":"2. Assembly 程序集对象","slug":"_2-assembly-程序集对象","link":"#_2-assembly-程序集对象","children":[{"level":4,"title":"2.1 对象简介","slug":"_2-1-对象简介","link":"#_2-1-对象简介","children":[]},{"level":4,"title":"2.2 应用程序结构","slug":"_2-2-应用程序结构","link":"#_2-2-应用程序结构","children":[]},{"level":4,"title":"2.3 静态方法","slug":"_2-3-静态方法","link":"#_2-3-静态方法","children":[]},{"level":4,"title":"2.4 实例方法,属性","slug":"_2-4-实例方法-属性","link":"#_2-4-实例方法-属性","children":[]},{"level":4,"title":"2.5 示例：加载程序集","slug":"_2-5-示例-加载程序集","link":"#_2-5-示例-加载程序集","children":[]},{"level":4,"title":"2.6 获取类型","slug":"_2-6-获取类型","link":"#_2-6-获取类型","children":[]}]},{"level":3,"title":"3. Type 类型","slug":"_3-type-类型","link":"#_3-type-类型","children":[{"level":4,"title":"3.1 实例属性,方法","slug":"_3-1-实例属性-方法","link":"#_3-1-实例属性-方法","children":[]},{"level":4,"title":"3.2 操作示例一","slug":"_3-2-操作示例一","link":"#_3-2-操作示例一","children":[]},{"level":4,"title":"3.3 示例二：获取公共方法","slug":"_3-3-示例二-获取公共方法","link":"#_3-3-示例二-获取公共方法","children":[]},{"level":4,"title":"3.4 示例三：获取静态方法","slug":"_3-4-示例三-获取静态方法","link":"#_3-4-示例三-获取静态方法","children":[]},{"level":4,"title":"3.5 示例四：获取泛型方法","slug":"_3-5-示例四-获取泛型方法","link":"#_3-5-示例四-获取泛型方法","children":[]},{"level":4,"title":"3.6 示例五：获取特性","slug":"_3-6-示例五-获取特性","link":"#_3-6-示例五-获取特性","children":[]}]},{"level":3,"title":"4. MethodInfo 方法","slug":"_4-methodinfo-方法","link":"#_4-methodinfo-方法","children":[{"level":4,"title":"4.1 实例属性,方法","slug":"_4-1-实例属性-方法","link":"#_4-1-实例属性-方法","children":[]},{"level":4,"title":"4.2 操作示例一","slug":"_4-2-操作示例一","link":"#_4-2-操作示例一","children":[]},{"level":4,"title":"4.3 操作示例二","slug":"_4-3-操作示例二","link":"#_4-3-操作示例二","children":[]}]},{"level":3,"title":"5. ConstructorInfo 构造函数","slug":"_5-constructorinfo-构造函数","link":"#_5-constructorinfo-构造函数","children":[{"level":4,"title":"5.1 实例属性,方法","slug":"_5-1-实例属性-方法","link":"#_5-1-实例属性-方法","children":[]},{"level":4,"title":"5.2 操作实例一","slug":"_5-2-操作实例一","link":"#_5-2-操作实例一","children":[]}]},{"level":3,"title":"6. PropertyInfo 属性","slug":"_6-propertyinfo-属性","link":"#_6-propertyinfo-属性","children":[{"level":4,"title":"6.1 实例属性,方法","slug":"_6-1-实例属性-方法","link":"#_6-1-实例属性-方法","children":[]},{"level":4,"title":"6.2 操作实例一","slug":"_6-2-操作实例一","link":"#_6-2-操作实例一","children":[]}]},{"level":3,"title":"7. FieldInfo 字段","slug":"_7-fieldinfo-字段","link":"#_7-fieldinfo-字段","children":[{"level":4,"title":"7.1 实例属性,方法","slug":"_7-1-实例属性-方法","link":"#_7-1-实例属性-方法","children":[]},{"level":4,"title":"7.2 操作实例一","slug":"_7-2-操作实例一","link":"#_7-2-操作实例一","children":[]}]},{"level":3,"title":"8. 扩展补充","slug":"_8-扩展补充","link":"#_8-扩展补充","children":[{"level":4,"title":"8.1 加载程序集","slug":"_8-1-加载程序集","link":"#_8-1-加载程序集","children":[]},{"level":4,"title":"8.2 Module 程序集模块","slug":"_8-2-module-程序集模块","link":"#_8-2-module-程序集模块","children":[]},{"level":4,"title":"8.3 BindingFlags说明","slug":"_8-3-bindingflags说明","link":"#_8-3-bindingflags说明","children":[]},{"level":4,"title":"8.4 属性应用：ORM","slug":"_8-4-属性应用-orm","link":"#_8-4-属性应用-orm","children":[]}]},{"level":3,"title":"转载说明","slug":"转载说明","link":"#转载说明","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":17.16,"words":5148},"filePathRelative":"dotnet/csharp/fanshe/fanshexiangjie.md","localizedDate":"2023年10月25日","excerpt":"<h3>1. 基本了解</h3>\\n<h4>1.1 反射概述</h4>\\n<p>文字说明\\n审查元数据并收集关于它的类型信息的能力称为反射，其中元数据（编译以后的最基本数据单元）就是一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等\\n反射提供了封装程序集、模块和类型的对象（Type 类型），可以使用反射动态创建类型的实例，将类型绑定到现有对象，或从现有对象获取类型并调用其方法或访问其字段和属性。如果代码中使用了属性，可以利用反射对它们进行访问\\n实际上\\n反射是微软封装的一个帮助类库：using System.Reflection;</p>\\n<h4>1.2 反射用途</h4>","autoDesc":true}');export{f as comp,w as data};
