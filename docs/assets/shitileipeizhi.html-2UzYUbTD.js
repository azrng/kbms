import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,e as t,b as e}from"./app-DMmdIwn0.js";const l="/kbms/common/image-20230819181757549.png",u={},r=e(`<h2 id="实体类状态" tabindex="-1"><a class="header-anchor" href="#实体类状态"><span>实体类状态</span></a></h2><p>EFCoreState：通过状态跟踪，任何一个增删改查的操作都会记录一个状态在内存中，增删改的状态一旦SaveChanges就根据状态落实到数据库中的。</p><ul><li>Detached(0)：游离状态，与数据库并没有啥关系，上下文(DbContext)未跟踪该实体，比如new一个实体，状态就是Detached。</li><li>Added(4)：已添加，实体正在被上下文(DbContext)跟踪，但是在数据库中尚不存在。</li><li>Unchanged(1)：未改变状态，DbContext正在跟踪此实体，该实体存在于数据库中，属性值和数据库内容相比未发生变化。从数据库刚查询出来的对象就是该状态。</li><li>Modified(3)：已修改状态，实体被上下文跟踪并且存在于数据库中，并且部署属性或者它的所有属性值已经被修改；</li><li>Deleded(2)：实体正在被上下文跟踪，并且存在于数据库中，但是已经被标记为从数据库中删除。</li></ul><blockquote><p>注意：如果查询出来的时候设置为AsNoTracking(不追踪,如果只是查询就没必要追踪，如果下面是修改操作，那么就不建议加这个，因为那个情况必须手动去SaveChanges，否则就没有真正的实现修改)，那么就变成了Detached(游离)状态。</p></blockquote><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfoEntity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>_dbContext<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span>State<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出当前实体状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型映射" tabindex="-1"><a class="header-anchor" href="#数据类型映射"><span>数据类型映射</span></a></h2><table><thead><tr><th>c#类型/数据库类型</th><th>SqlServer</th><th>MySQL</th><th>postgresql</th><th>Oracle</th></tr></thead><tbody><tr><td>string</td><td>varchar/nchar/nvarcahr/text/ntext</td><td>longtext/varchar</td><td>text/varchar/nvarchar</td><td></td></tr><tr><td>char</td><td></td><td>varchar(1)</td><td>character(1)</td><td></td></tr><tr><td>int</td><td>int</td><td>int</td><td>integer</td><td></td></tr><tr><td>uint</td><td>int</td><td>int unsigned</td><td>bigint</td><td></td></tr><tr><td>long</td><td>bigint</td><td>bigint</td><td>bigint</td><td></td></tr><tr><td>ulong</td><td>bitint</td><td>bigint unsigned</td><td>numeric(20,0)</td><td></td></tr><tr><td>byte</td><td>tinyint</td><td>tinyint unsigned</td><td>smallint</td><td></td></tr><tr><td>byte[]</td><td>binary/images</td><td></td><td></td><td></td></tr><tr><td>bool</td><td>bit</td><td>tinyint(1)</td><td>boolean</td><td></td></tr><tr><td>short</td><td>smallint</td><td></td><td></td><td></td></tr><tr><td>DateTime</td><td>datetime</td><td>datetime(6)</td><td>timestamp without time zone</td><td></td></tr><tr><td>TimeSpan</td><td></td><td>time(6)</td><td>interval</td><td></td></tr><tr><td>decimal</td><td>money</td><td>decimal(65,30)/decimal(18, 2)</td><td>numeric</td><td></td></tr><tr><td>float</td><td>real</td><td>float</td><td>real</td><td></td></tr><tr><td>double</td><td>float</td><td>double</td><td>double precision</td><td></td></tr><tr><td>guid</td><td>uniqueidentifier</td><td>char(36)</td><td>uuid</td><td>raw(16)</td></tr></tbody></table><ul><li><p>char：固定长度，存储ANSI字符（中文和符号不兼容），不足的补英文半角空格</p></li><li><p>varchar：可变长度，存储ANSI字符（中文和符号不兼容），根据数据长度自动变化</p></li><li><p>nchar：固定长度，存储Unicode字符(支持中英文以及符号)，不足的补英文半角空格</p></li><li><p>nvcarchar：可变长度，存储Unicode字符(支持中英文以及符号)，根据数据长度自动变化。</p></li></ul><h3 id="主键的类型" tabindex="-1"><a class="header-anchor" href="#主键的类型"><span>主键的类型</span></a></h3><p>常见的生成策略：自动增长、Guid、HI/Lo算法、雪花ID</p><p>自增主键(int 、long) 优点：简单 缺点： 数据库迁移以及分布式系统中比较麻烦； 并发性差； 默认不能为ID赋值，必须保持默认值为0，否则运行会报错； 当遇到批量插入主表以及详情表的时候，详情表需要关联到主表的ID，那么这个时候只能循环去添加到数据库后才能得到主表的ID(当然也可以通过code等关联)。 ID容易被模拟。</p><p>Guid 优点：适合分布式系统，数据库数据合并的时候简单。简单、高并发，全局唯一 缺点：磁盘占用空间大、不连续</p><blockquote><p>使用guid作为主键的时候，不能将主键设置为聚集索引，因为聚集索引按照顺序保存主键的，因此使用guid作为主键性能差。 比如MySQL的InnoDb引擎中主键强制使用聚集索引的。有的数据库支持部分的连续guid，比如SQL server中的NewSequentialId(),但是也不能解决问题。 在SqlServer中，不要将guid主键设置为聚集索引。 在MySQL中，插入频繁的表不要用guid作为主键。</p></blockquote>`,14),d={href:"https://github.com/dotnet/efcore/blob/release/8.0/src/EFCore/ValueGeneration/SequentialGuidValueGenerator.cs",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="实体类映射配置" tabindex="-1"><a class="header-anchor" href="#实体类映射配置"><span>实体类映射配置</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>下面创建的实体类对应的属性，仅为演示使用，没有实际</p></div><p>Fluent API的优先级高于Data Annotation的优先级。</p><h3 id="实体类注解-data-annotation" tabindex="-1"><a class="header-anchor" href="#实体类注解-data-annotation"><span>实体类注解(Data Annotation)</span></a></h3><p>这种方法只需要在实体类上面添加注解来映射数据库配置。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Table</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;userinfo&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//设置表名称</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span><span class="token comment">//标识主键</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 字符长度限制</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>Required<span class="token punctuation">]</span><span class="token comment">//必填</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> MinimumLength <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//长度限制</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RegularExpression</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;/^1[3,4,5,7,8,9]\\d{9}$/&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//正则限制</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Range</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//范围限制</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Display</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Date<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//格式限制</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>EmailAddress<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EmailAddress</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Comment</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;设置&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;settings&quot;</span><span class="token punctuation">,</span> TypeName <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//映射到MySQL：json</span>
    <span class="token punctuation">[</span>Required<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Settings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意： 1.如果是SqlServer并且主键是int类型，默认情况下迁移数据库是自增： Id = table.Column&lt;int&gt;(nullable: false, comment: &quot;主键&quot;).Annotation(&quot;SqlServer:Identity&quot;, &quot;1, 1&quot;) 2.如果是MySQL实现自增需要将类型改为int类型，并且在etc里面为主键增加标识ValueGeneratedOnAdd();</p></div><h3 id="fluent-api" tabindex="-1"><a class="header-anchor" href="#fluent-api"><span>Fluent API</span></a></h3><h4 id="etc形式-推荐" tabindex="-1"><a class="header-anchor" href="#etc形式-推荐"><span>ETC形式-推荐</span></a></h4><p>实体类和上面一样不配置注解</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 自增</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 账号</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 内容</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Content <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 余额</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Money <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否有效</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsValid <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 创建时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 时间2</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan</span> CreateTime2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 时间3</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan</span> CreateTime3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Settings <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建文件TestEtc继承自：IEntityTypeConfiguration&lt;T&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEtc</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEntityTypeConfiguration<span class="token punctuation">&lt;</span>Test<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>Test<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValueGeneratedOnAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;主键自增&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;账号标识&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;decimal(18, 2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;余额&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;是否有效&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;时间1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateTime2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;bigint(20)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;时间2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateTime3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;时间3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Settings<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;设置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//查询过滤  如果在查询的时候想忽略使用：db.Users.IgnoreQueryFilters().ToList();</span>
        builder<span class="token punctuation">.</span><span class="token function">HasQueryFilter</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>Deleted<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        builder<span class="token punctuation">.</span><span class="token function">HasIndex</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置索引</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="onmodelcreating配置" tabindex="-1"><a class="header-anchor" href="#onmodelcreating配置"><span>OnModelCreating配置</span></a></h4><p>在实体类中不设置设置注解，例如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在上下文类的OnModelCreating方法中进行配置（只是演示各种写法）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenDbContextSample</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//设置表名称</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;user_info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义全局数据表架构</span>
        modelBuilder<span class="token punctuation">.</span><span class="token function">HasDefaultSchema</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//联合主键 不建议使用联合主键</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Account <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//查询过滤器</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasQueryFilter</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//排除属性映射</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Ignore</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Credit<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//种子数据</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span> Account <span class="token operator">=</span> <span class="token string">&quot;azrng&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//配置数据类型</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Credit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;decimal(18,2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//计算列</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComputedColumnSql</span><span class="token punctuation">(</span><span class="token string">&quot;[LastName] + &#39;, &#39; + [FirstName]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//一对一主</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>SysUserInfoDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasForeignKey</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserInfoDetail<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>SysUserInfoDetailId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//一对多</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Company<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>SysUsers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>CompanyId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 多对多的关系</span>

        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserRoleMapping<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>SysUserInfo<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>SysUserRoleMapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>SysUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserRoleMapping<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>SysRole<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>SysUserRoleMapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>SysRoleId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysUserRoleMapping<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> p<span class="token punctuation">.</span>SysUserId<span class="token punctuation">,</span> p<span class="token punctuation">.</span>SysRoleId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置联合主键</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token comment">//设置整个表配置</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            b<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;AppUsers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置主键</span>
            b<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;用户ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;账号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Test<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValueGeneratedOnAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;主键自增&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;账号标识&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValue</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CreateTime2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;时间2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;是否有效&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Settings<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;设置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//设置索引</span>
            t<span class="token punctuation">.</span><span class="token function">HasIndex</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//默认值</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDefaultValueSql</span><span class="token punctuation">(</span><span class="token string">&quot;getdate()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 将数据库的一个数组 json字符串转为实体类中的IEnumerable&lt;string&gt;  ToJson是序列化扩展方法，ToObject是反序列化扩展方法</span>
            t<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>ModuleCodeCollect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnName</span><span class="token punctuation">(</span><span class="token string">&quot;module_code_collect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;jsonb&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">HasConversion</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ToObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                	<span class="token punctuation">.</span><span class="token function">HasDefaultValueSql</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;[]&#39;&quot;</span><span class="token punctuation">)</span>
                	<span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ForNpgsqlHasComment</span><span class="token punctuation">(</span><span class="token string">&quot;模块编码集合&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//索引</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//非聚集索引</span>
            o<span class="token punctuation">.</span><span class="token function">HasIndex</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>Account<span class="token punctuation">,</span> t<span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//账号唯一索引  </span>
            o<span class="token punctuation">.</span><span class="token function">HasIndex</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasDatabaseName</span><span class="token punctuation">(</span><span class="token string">&quot;user_account_index_isunique&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//初始化数据</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysLog<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SysLog<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实体类配置细节说明" tabindex="-1"><a class="header-anchor" href="#实体类配置细节说明"><span>实体类配置细节说明</span></a></h2><h3 id="isunicode" tabindex="-1"><a class="header-anchor" href="#isunicode"><span>IsUnicode</span></a></h3><p>是否是Unicode编码，默认是true，除了可以存储英文等，还可以存储中文、符号等内容</p><p>使用 MariaDB/MySQL数据库，或者使用 Pomelo.EntityFrameworkCore.MySql 这个包时该方法用不用都无所谓了，默认的对 string 的配置就是 IsUnicode(true)。</p><p>使用 MSSQL Server 时，我认为，当我们确定一个 string 类型的属性是 **ASCII 安全（ASCII SAFE）**的时候，即这个属性的值只会包含数字、英文字母和英文符号时，可以为它配置 IsUnicode(false)，这样它在数据库中就是 varchar 类型。但如果你不确定，最好还是保持默认。如果你不放心，或者想让团队的其他开发成员能够明明白白的知道每个 string 类型的属性到底是 varchar 还是 nvarchar，可以全部都显式配置。</p><p>总结： 对于 ASCII 安全的字符串来说，nvarchar 要比 varchar 多占 1 倍的存储空间，而且还要考虑性能的影响，假设你确实有一张表要存上千万甚至上亿数据，把 ASCII 安全的列设置 IsUnicode(false) 是有必要的，但是如果你不确定你的字符串是 ASCII 安全的，最好使用默认的配置，或者显式配置 IsUnicode() 或 IsUnicode(true)</p><p>文档：https://blog.kitlau.dev/posts/when-and-why-to-use-isunicode-in-ef-core/</p><h2 id="实体类转换器" tabindex="-1"><a class="header-anchor" href="#实体类转换器"><span>实体类转换器</span></a></h2><p>实体类类型和数据库类型不一致的情况，如何做实体类型转换</p><h3 id="automapper" tabindex="-1"><a class="header-anchor" href="#automapper"><span>AutoMapper</span></a></h3><p>暂无内容</p><h3 id="内置转换器" tabindex="-1"><a class="header-anchor" href="#内置转换器"><span>内置转换器</span></a></h3>`,30),m={href:"https://docs.microsoft.com/zh-cn/ef/core/modeling/value-conversions?tabs=data-annotations",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>比如实体类中配置的是枚举，数据库配置的是枚举的名称(例如：Man)，那么就需要内置转换器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    modelBuilder
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>Mount<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">HasConversion</span><span class="token punctuation">(</span>
            v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            v <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>EquineBeast<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">EquineBeast</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间转换</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityTypeConfiguration<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEntityTypeConfiguration<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DataEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Type</span> genericType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> convertDateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueConverter<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">,</span> DateTime<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasConversion</span><span class="token punctuation">(</span>convertDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实操" tabindex="-1"><a class="header-anchor" href="#实操"><span>实操</span></a></h2><h3 id="ownsone-从属实体类型" tabindex="-1"><a class="header-anchor" href="#ownsone-从属实体类型"><span>OwnsOne(从属实体类型)</span></a></h3><p>配置一个关系，其中目标实体是当前实体的一部分</p><p>使用场景：值对象依附于实体对象存在，所以可以使用该方法来表达值对象的效果</p><p>具体操作如下，创建实体</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// 包含值对象的用户表
/// &lt;/summary&gt;
public class ContainsValueObjectUser : DataEntity
{
    private ContainsValueObjectUser()
    {
    }

    public ContainsValueObjectUser(string userName, ValueObjectArea area)
    {
        UserName = userName;
        Area = area;
    }

    /// &lt;summary&gt;
    /// 用户名
    /// &lt;/summary&gt;
    public string UserName { get; init; }

    /// &lt;summary&gt;
    /// 用户地址
    /// &lt;/summary&gt;
    public ValueObjectArea Area { get; set; }
}

/// &lt;summary&gt;
/// 地区值对象
/// &lt;/summary&gt;
public class ValueObjectArea
{
    private ValueObjectArea()
    {
    }

    public ValueObjectArea(string province, string city)
    {
        Province = province;
        City = city;
    }

    /// &lt;summary&gt;
    /// 省份
    /// &lt;/summary&gt;
    public string Province { get; init; }

    /// &lt;summary&gt;
    /// 市
    /// &lt;/summary&gt;
    public string City { get; init; }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中实体ContainsValueObjectUser里面包含了一个值对象Area，然后我们设置模型配置</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class ContainsValueObjectUserEtc : EntityTypeConfiguration&lt;ContainsValueObjectUser&gt;
{
    public override void Configure(EntityTypeBuilder&lt;ContainsValueObjectUser&gt; builder)
    {
        builder.Property(x =&gt; x.UserName).IsRequired().HasMaxLength(50).HasComment(&quot;姓名&quot;);

        builder.OwnsOne(x =&gt; x.Area, ar =&gt;
        {
            ar.Property(e =&gt; e.Province).HasMaxLength(50).HasConversion&lt;string&gt;().HasComment(&quot;省&quot;);
            ar.Property(e =&gt; e.City).HasMaxLength(50).HasConversion&lt;string&gt;().HasComment(&quot;市&quot;);
        });

        base.Configure(builder);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候我们通过迁移的方式去生成数据库，如下图</p><figure><img src="`+l+`" alt="image-20230819181757549" tabindex="0" loading="lazy"><figcaption>image-20230819181757549</figcaption></figure><p>我们可以看到containsvalueobjectuser表自动将值对象的内容生成了列，并且以实体内的area开头，下面我们开始操作该实体</p><p>添加数据</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var valueObject = new ValueObjectArea(&quot;河南&quot;, &quot;焦作&quot;);
var user = new ContainsValueObjectUser(&quot;测试用户&quot;, valueObject);
await _openDbContext.AddAsync(user);
await _openDbContext.SaveChangesAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询数据</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 查询数据  该方案行不通
//var user = await _openDbContext.Set&lt;ContainsValueObjectUser&gt;()
//    .Where(t =&gt; t.Area == new ValueObjectArea(&quot;河南&quot;, &quot;焦作&quot;))
//    .FirstOrDefaultAsync();

// 需要这么进行查询 值对象的属性比较多的时候就比较麻烦了
var user = await _openDbContext.Set&lt;ContainsValueObjectUser&gt;()
    .Where(t =&gt; t.Area.Province == &quot;河南&quot; &amp;&amp; t.Area.City == &quot;焦作&quot;)
    .FirstOrDefaultAsync();
/*
    生成SQL
SELECT c.id, c.create_time, c.modify_time, c.user_name, c.area_city, c.area_province
FROM sample.containsvalueobjectuser AS c
WHERE (c.area_province = &#39;河南&#39;) AND (c.area_city = &#39;焦作&#39;)
LIMIT 1
    */

// 或者可以通过自己编写表达式树来进行值对象的比较，结果生成的sql和上面一致
var user1 = await _openDbContext.Set&lt;ContainsValueObjectUser&gt;()
    .Where(ExpressionHelper.MarkEqual((ContainsValueObjectUser area) =&gt; area.Area, new ValueObjectArea(&quot;河南&quot;, &quot;焦作&quot;)))
    .FirstOrDefaultAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后展示一下表达式树的写法(该表达式树写法来自杨中科老师书籍)</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// 表达式树帮助类
/// &lt;/summary&gt;
public class ExpressionHelper
{
    /// &lt;summary&gt;
    /// 值对象比较
    /// &lt;/summary&gt;
    /// &lt;typeparam name=&quot;TItem&quot;&gt;&lt;/typeparam&gt;
    /// &lt;typeparam name=&quot;TProp&quot;&gt;&lt;/typeparam&gt;
    /// &lt;param name=&quot;propAccessor&quot;&gt;待比较的表达式&lt;/param&gt;
    /// &lt;param name=&quot;other&quot;&gt;待比较的值对象&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Expression&lt;Func&lt;TItem, bool&gt;&gt; MarkEqual&lt;TItem, TProp&gt;(Expression&lt;Func&lt;TItem, TProp&gt;&gt; propAccessor, TProp? other)
        where TItem : class
        where TProp : class
    {
        var e1 = propAccessor.Parameters.Single();
        BinaryExpression? conditionalExpr = null;
        foreach (var prop in typeof(TProp).GetProperties())
        {
            BinaryExpression equalExpr;
            object? otherValue = null;
            if (other != null)
                otherValue = prop.GetValue(other);

            var propType = prop.PropertyType;
            var leftExpr = Expression.MakeMemberAccess(propAccessor.Body, prop);
            Expression rightExpr = Expression.Constant(otherValue, propType);
            if (propType.IsPrimitive)
            {
                equalExpr = Expression.Equal(leftExpr, rightExpr);
            }
            else
            {
                equalExpr = Expression.MakeBinary(ExpressionType.Equal, leftExpr, rightExpr, false, prop.PropertyType.GetMethod(&quot;op_Equality&quot;));
            }

            if (conditionalExpr is null)
                conditionalExpr = equalExpr;
            else
                conditionalExpr = Expression.AndAlso(conditionalExpr, equalExpr);
        }
        return Expression.Lambda&lt;Func&lt;TItem, bool&gt;&gt;(conditionalExpr, e1);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="queryfilter" tabindex="-1"><a class="header-anchor" href="#queryfilter"><span>QueryFilter</span></a></h3><p>在上面的示例中，我们可以通过HasQueryFilter方法来实现对一个表添加查询过滤条件，通过该配置可以实现，项目中其他查询该表的地方自动实现查询过滤的效果</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>//查询过滤  如果在查询的时候想忽略使用：db.Users.IgnoreQueryFilters().ToList();
builder.HasQueryFilter(t =&gt; !t.Deleted);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以通过下面方法来配置整个项目数据库表的通用查询过滤效果，比如全部表过滤掉已删除的，首先我们需要创建一个接口(这只是其中一个实现方案)</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public interface ISoftDelete
{
    bool IsDeleted { get; }
    void SoftDelete();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以让我们的实现类提成该接口并实现该接口的方法，比如</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class User : ISoftDelete
{
	public Guid Id{ get; init; }
	
	public Int UserName{ get; init; }
	 
    public DateTime CreationTime { get; init; }

    public DateTime? DeletionTime { get; private set; }

    public bool IsDeleted { get; private set; }

    public User(string userName)
    {
        Id = Guid.NewGuid();
        UserName = userName;
        CreationTime = DateTime.Now;
    }

    public void SoftDelete()
    {
        this.IsDeleted = true;
        this.DeletionTime = DateTime.Now;
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以编写数据库上下文中OnModelCreating方法参数ModelBuilder的扩展方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// set global &#39;IsDeleted=false&#39; queryfilter for every entity
/// &lt;/summary&gt;
/// &lt;param name=&quot;modelBuilder&quot;&gt;&lt;/param&gt;
public static void EnableSoftDeletionGlobalFilter(this ModelBuilder modelBuilder)
{
    var entityTypesHasSoftDeletion = modelBuilder.Model.GetEntityTypes()
        .Where(e =&gt; e.ClrType.IsAssignableTo(typeof(ISoftDelete)));

    foreach (var entityType in entityTypesHasSoftDeletion)
    {
        var isDeletedProperty = entityType.FindProperty(nameof(ISoftDelete.IsDeleted));
        var parameter = Expression.Parameter(entityType.ClrType, &quot;p&quot;);
        var filter = Expression.Lambda(Expression.Not(Expression.Property(parameter, isDeletedProperty.PropertyInfo)), parameter);
        entityType.SetQueryFilter(filter);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例如下</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class IdDbContext : DbContext
{
    public IdDbContext(DbContextOptions&lt;IdDbContext&gt; options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        // 使用扩展方法
        modelBuilder.EnableSoftDeletionGlobalFilter();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,33),b={href:"https://docs.microsoft.com/zh-cn/ef/core/modeling/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,null,-1);function y(h,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[n("a",d,[s("MySQL顺序GUID"),t(a)])]),k,n("p",null,[s("网址："),n("a",m,[s("https://docs.microsoft.com/zh-cn/ef/core/modeling/value-conversions?tabs=data-annotations"),t(a)])]),v,n("p",null,[s("模型："),n("a",b,[s("https://docs.microsoft.com/zh-cn/ef/core/modeling/"),t(a)])]),g])}const w=p(u,[["render",y],["__file","shitileipeizhi.html.vue"]]),C=JSON.parse('{"path":"/orm/efcore/jichuzhishi/shitileipeizhi.html","title":"实体类配置","lang":"zh-CN","frontmatter":{"title":"实体类配置","lang":"zh-CN","date":"2023-05-08T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shitileipeizhi","slug":"lv588q","docsId":"30842890","description":"实体类状态 EFCoreState：通过状态跟踪，任何一个增删改查的操作都会记录一个状态在内存中，增删改的状态一旦SaveChanges就根据状态落实到数据库中的。 Detached(0)：游离状态，与数据库并没有啥关系，上下文(DbContext)未跟踪该实体，比如new一个实体，状态就是Detached。 Added(4)：已添加，实体正在被上下文...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/shitileipeizhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"实体类配置"}],["meta",{"property":"og:description","content":"实体类状态 EFCoreState：通过状态跟踪，任何一个增删改查的操作都会记录一个状态在内存中，增删改的状态一旦SaveChanges就根据状态落实到数据库中的。 Detached(0)：游离状态，与数据库并没有啥关系，上下文(DbContext)未跟踪该实体，比如new一个实体，状态就是Detached。 Added(4)：已添加，实体正在被上下文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/image-20230819181757549.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T14:34:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-12T14:34:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实体类配置\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/image-20230819181757549.png\\"],\\"datePublished\\":\\"2023-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-12T14:34:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"实体类状态","slug":"实体类状态","link":"#实体类状态","children":[]},{"level":2,"title":"数据类型映射","slug":"数据类型映射","link":"#数据类型映射","children":[{"level":3,"title":"主键的类型","slug":"主键的类型","link":"#主键的类型","children":[]}]},{"level":2,"title":"实体类映射配置","slug":"实体类映射配置","link":"#实体类映射配置","children":[{"level":3,"title":"实体类注解(Data Annotation)","slug":"实体类注解-data-annotation","link":"#实体类注解-data-annotation","children":[]},{"level":3,"title":"Fluent API","slug":"fluent-api","link":"#fluent-api","children":[{"level":4,"title":"ETC形式-推荐","slug":"etc形式-推荐","link":"#etc形式-推荐","children":[]},{"level":4,"title":"OnModelCreating配置","slug":"onmodelcreating配置","link":"#onmodelcreating配置","children":[]}]}]},{"level":2,"title":"实体类配置细节说明","slug":"实体类配置细节说明","link":"#实体类配置细节说明","children":[{"level":3,"title":"IsUnicode","slug":"isunicode","link":"#isunicode","children":[]}]},{"level":2,"title":"实体类转换器","slug":"实体类转换器","link":"#实体类转换器","children":[{"level":3,"title":"AutoMapper","slug":"automapper","link":"#automapper","children":[]},{"level":3,"title":"内置转换器","slug":"内置转换器","link":"#内置转换器","children":[]}]},{"level":2,"title":"实操","slug":"实操","link":"#实操","children":[{"level":3,"title":"OwnsOne(从属实体类型)","slug":"ownsone-从属实体类型","link":"#ownsone-从属实体类型","children":[]},{"level":3,"title":"QueryFilter","slug":"queryfilter","link":"#queryfilter","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1710254086000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":7},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":6}]},"readingTime":{"minutes":11.81,"words":3543},"filePathRelative":"orm/efcore/jichuzhishi/shitileipeizhi.md","localizedDate":"2023年5月8日","excerpt":"<h2>实体类状态</h2>\\n<p>EFCoreState：通过状态跟踪，任何一个增删改查的操作都会记录一个状态在内存中，增删改的状态一旦SaveChanges就根据状态落实到数据库中的。</p>\\n<ul>\\n<li>Detached(0)：游离状态，与数据库并没有啥关系，上下文(DbContext)未跟踪该实体，比如new一个实体，状态就是Detached。</li>\\n<li>Added(4)：已添加，实体正在被上下文(DbContext)跟踪，但是在数据库中尚不存在。</li>\\n<li>Unchanged(1)：未改变状态，DbContext正在跟踪此实体，该实体存在于数据库中，属性值和数据库内容相比未发生变化。从数据库刚查询出来的对象就是该状态。</li>\\n<li>Modified(3)：已修改状态，实体被上下文跟踪并且存在于数据库中，并且部署属性或者它的所有属性值已经被修改；</li>\\n<li>Deleded(2)：实体正在被上下文跟踪，并且存在于数据库中，但是已经被标记为从数据库中删除。</li>\\n</ul>","autoDesc":true}');export{w as comp,C as data};
