import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,b as s}from"./app-Bw62I61B.js";const e={},o=s(`<h3 id="过滤查询" tabindex="-1"><a class="header-anchor" href="#过滤查询"><span>过滤查询</span></a></h3><p>示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains</p><blockquote><p>var data3 = dbContext.T_UserInfor.Where(u =&gt; u.userName.Contains(&quot;p&quot;)).ToList();</p></blockquote><p>这点和efcore的不一样，efcore生成的是CHARINDEX(&quot;p&quot;,userName)&gt;0</p><h3 id="包含关系" tabindex="-1"><a class="header-anchor" href="#包含关系"><span>包含关系</span></a></h3><p>示例：求用户姓名为 &quot;p1,p2,p3,p4,x2,y4&quot;的所有用户信息，已知字符串 string str = &quot;p1,p2,p3,p4,x2,y4&quot;; 正确做法：将字符串转成list，然后再使用contains</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> <span class="token string">&quot;p1,p2,p3,p4,x2,y4&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> strList <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> data5 <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>T_UserInfor<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> strList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p=[o];function c(r,i){return t(),a("div",null,p)}const d=n(e,[["render",c],["__file","youhua.html.vue"]]),m=JSON.parse('{"path":"/orm/ef/youhua.html","title":"优化","lang":"zh-CN","frontmatter":{"title":"优化","lang":"zh-CN","date":"2022-02-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"youhua","slug":"gnobou","docsId":"29914634","description":"过滤查询 示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains var data3 = dbContext.T_UserInfor.Where(u => u.userName.Contains(\\"p\\")).ToList(); 这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)>0 包...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/ef/youhua.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"优化"}],["meta",{"property":"og:description","content":"过滤查询 示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains var data3 = dbContext.T_UserInfor.Where(u => u.userName.Contains(\\"p\\")).ToList(); 这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)>0 包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T14:35:45.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-23T14:35:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-23T14:35:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"过滤查询","slug":"过滤查询","link":"#过滤查询","children":[]},{"level":3,"title":"包含关系","slug":"包含关系","link":"#包含关系","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1700750145000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"orm/ef/youhua.md","localizedDate":"2022年2月13日","excerpt":"<h3>过滤查询</h3>\\n<p>示例:查询用户姓名中包含有p字母的所有用户信息\\n推荐写法：使用contains</p>\\n<blockquote>\\n<p>var data3 = dbContext.T_UserInfor.Where(u =&gt; u.userName.Contains(\\"p\\")).ToList();</p>\\n</blockquote>\\n<p>这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)&gt;0</p>\\n<h3>包含关系</h3>\\n<p>示例：求用户姓名为&nbsp;\\"p1,p2,p3,p4,x2,y4\\"的所有用户信息，已知字符串 string str = \\"p1,p2,p3,p4,x2,y4\\";\\n正确做法：将字符串转成list，然后再使用contains</p>","autoDesc":true}');export{d as comp,m as data};
