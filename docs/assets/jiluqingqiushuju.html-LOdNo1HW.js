import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-CBxp4zeL.js";const p={},e=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 记录请求和响应中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestResponseMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RequestResponseMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RequestResponseMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span>
        <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RequestResponseMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 过滤，只有接口的时候报错才记录请求的参数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//_logger.LogInformation($&quot;Header: {JsonConvert.SerializeObject(context.Request.Headers, Formatting.Indented)}&quot;);</span>
            <span class="token comment">//设置可以多次读取</span>
            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>
                <span class="token interpolation-string"><span class="token string">$&quot;Time:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string"> requestUrl:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string">  Method:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">}</span></span><span class="token string">  requestBodyData: &quot;</span></span> <span class="token operator">+</span>
                data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Host: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Host</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Client IP: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用中间件，在Configure中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RequestResponseMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Onsolve<span class="token punctuation">.</span>ONE<span class="token punctuation">.</span>WebApi<span class="token punctuation">.</span>Middlewares</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">RequestHandlerMiddleware</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger</span> logger<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">RequestHandlerMiddleware</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RequestHandlerMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span> <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Header: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">,</span> Formatting<span class="token punctuation">.</span>Indented<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Body: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">body</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Host: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Host</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Client IP: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","jiluqingqiushuju.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/pipeline/middleware/tazhan/jiluqingqiushuju.html","title":"记录请求数据","lang":"zh-CN","frontmatter":{"title":"记录请求数据","lang":"zh-CN","date":"2023-04-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jiluqingqiushuju","slug":"ao0zhn","docsId":"30053893","description":"使用中间件，在Configure中使用 另一个写法","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/middleware/tazhan/jiluqingqiushuju.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"记录请求数据"}],["meta",{"property":"og:description","content":"使用中间件，在Configure中使用 另一个写法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记录请求数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.85,"words":254},"filePathRelative":"dotnet/base/pipeline/middleware/tazhan/jiluqingqiushuju.md","localizedDate":"2023年4月11日","excerpt":"<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 记录请求和响应中间件</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RequestResponseMiddleware</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">RequestDelegate</span> _next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>RequestResponseMiddleware<span class=\\"token punctuation\\">&gt;</span></span> _logger<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">RequestResponseMiddleware</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestDelegate</span> next<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>RequestResponseMiddleware<span class=\\"token punctuation\\">&gt;</span></span> logger<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        _next <span class=\\"token operator\\">=</span> next<span class=\\"token punctuation\\">;</span>\\n        _logger <span class=\\"token operator\\">=</span> logger<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">InvokeAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> context<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 过滤，只有接口的时候报错才记录请求的参数</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"api\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//_logger.LogInformation($\\"Header: {JsonConvert.SerializeObject(context.Request.Headers, Formatting.Indented)}\\");</span>\\n            <span class=\\"token comment\\">//设置可以多次读取</span>\\n            context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">EnableBuffering</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> data <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> sr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span>\\n                <span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Time:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">DateTime<span class=\\"token punctuation\\">.</span>Now</span><span class=\\"token format-string\\"><span class=\\"token punctuation\\">:</span>yyyy-MM-dd HH:mm:ss</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> requestUrl:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">  Method:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Method</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">  requestBodyData: \\"</span></span> <span class=\\"token operator\\">+</span>\\n                data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n            context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Host: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Host<span class=\\"token punctuation\\">.</span>Host</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Client IP: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>Connection<span class=\\"token punctuation\\">.</span>RemoteIpAddress</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
