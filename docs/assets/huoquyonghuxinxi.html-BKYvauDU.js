import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,d as s,e,b as a}from"./app-DMmdIwn0.js";const i="/kbms/common/1634040801377-67c45596-41af-418d-922e-8e3c5f885a5a.png",u={},r=a(`<h2 id="用户信息设置" tabindex="-1"><a class="header-anchor" href="#用户信息设置"><span>用户信息设置</span></a></h2><p>用户信息一般是保存在上下文的HttpContext的User中，然后我们可以通过下面的方法去获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">// 保存用户信息</span>
<span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhagnsna&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;11111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>Type<span class="token operator">==</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案一-redis" tabindex="-1"><a class="header-anchor" href="#方案一-redis"><span>方案一(Redis)</span></a></h2><p>条件：redis 登录成功后将用户信息存储到redis中，用户ID返回给前端，后续请求中需要获取用户信息的操作，那么就根据用户ID去redis中查询，然后获取完整信息。</p><h2 id="方案二-httpcontext" tabindex="-1"><a class="header-anchor" href="#方案二-httpcontext"><span>方案二(HttpContext)</span></a></h2><p>条件：使用jwt方式、cookie方式应该也行 服务层都继承一个基类，然后在该基类中获取上下文中的用户信息 缺点：只能保存jwt里面包含的信息。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">UserIdentityDto</span> UserIdentity
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> currUser <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currUser<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserIdentityDto</span>
                <span class="token punctuation">{</span>
                    UserId <span class="token operator">=</span> currUser<span class="token punctuation">.</span><span class="token function">FindFirstValue</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span> <span class="token operator">??</span>
                        <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>
                    UserName <span class="token operator">=</span> currUser<span class="token punctuation">.</span><span class="token function">FindFirstValue</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">??</span>
                        <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> dto<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">&quot;登录状态无效，请检查登录状态&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案三-过滤器" tabindex="-1"><a class="header-anchor" href="#方案三-过滤器"><span>方案三(过滤器)</span></a></h2><p>该方法比较灵活，可以使用redis也可以使用上下文获取的方式，通过借助一个异步的过滤器来实现</p>`,10),k={href:"https://www.cnblogs.com/CreateMyself/p/14979315.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>创建一个类来接收用户信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentUser</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如项目我们使用JWT，则拿到声明中用户标识和用户账号，那么我们接下来我们只需要使用上述过滤器接口即可，如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义授权过滤器(推荐)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerAuthorizeFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">IAuthorizationFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CurrentUser</span> _currentUser<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomerAuthorizeFilter</span><span class="token punctuation">(</span><span class="token class-name">CurrentUser</span> currentUser<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _currentUser <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAuthorization</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationFilterContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>

        _currentUser<span class="token punctuation">.</span>UserId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        _currentUser<span class="token punctuation">.</span>UserName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义Action过滤器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerActionFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncActionFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CurrentUser</span> _currentUser<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomerActionFilter</span><span class="token punctuation">(</span><span class="token class-name">CurrentUser</span> currentUser<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _currentUser <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnActionExecutionAsync</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ActionExecutionDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
        _currentUser<span class="token punctuation">.</span>UserId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        _currentUser<span class="token punctuation">.</span>UserName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>

        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：上面讲述了两种方式，推荐使用授权过滤器，授权过滤器比Action过滤器更早</p></blockquote><p>过滤器注入，如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注册用户会话</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CurrentUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
<span class="token comment">//注册全局过滤器   </span>
services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorizeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加全局的Authorize</span>
    <span class="token comment">//options.Filters.Add&lt;CustomerActionFilter&gt;(); // 自定义Action过滤器</span>
    options<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerAuthorizeFilter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义授权过滤器，推荐</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取用户信息，在需要获取的地方进行依赖注入CurrentUser即可拿到我们的用户信息。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CurrentUser</span> _currentUser<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">TestController</span><span class="token punctuation">(</span><span class="token class-name">CurrentUser</span> currentUser<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _currentUser <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IResultModel<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetCurrentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Code <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span> Data <span class="token operator">=</span> _currentUser<span class="token punctuation">.</span>UserId <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案四-属性获取-※" tabindex="-1"><a class="header-anchor" href="#方案四-属性获取-※"><span>方案四(属性获取)※</span></a></h2><p>通过jwt认证，在需要权限访问的接口里面获取用户信息，在获取用户信息的时候会从Claim中获取用户信息，获取的数据全是通过jwt token中可以获取到的信息。 测试条件：已经生成jwt token、项目中已经配置了jwt鉴权 新建获取信息的接口和实现类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICurrentUser</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户ID </span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICurrentUser</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _httpContext<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CurrentUser</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _httpContext <span class="token operator">=</span> httpContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _httpContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirstValue</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _httpContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirstValue</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：官方不建议使用IHttpContextAccessor，因为它依赖于<code>AsyncLocal&lt;T&gt;</code>异步调用对性能产生负面影响。并且不利于单元测试。</p></blockquote><p>注册配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ICurrentUser<span class="token punctuation">,</span> CurrentUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法(该项目已经配置了全局需要授权)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICurrentUser</span> _currentUser<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">TestController</span><span class="token punctuation">(</span><span class="token class-name">ICurrentUser</span> currentUser<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _currentUser <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetCurrentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> _currentUser<span class="token punctuation">.</span>UserId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看效果 <img src="`+i+`" alt="image.png" loading="lazy"></p><h2 id="方案五-扩展参数" tabindex="-1"><a class="header-anchor" href="#方案五-扩展参数"><span>方案五(扩展参数)</span></a></h2><h3 id="使用中间件增加" tabindex="-1"><a class="header-anchor" href="#使用中间件增加"><span>使用中间件增加</span></a></h3><p>在解析原有的jwt token数据的情况下，再从其他地方(数据库)查询信息存储到claim中 增加存储的中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentUserClaimMiddlerware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">CurrentUserClaimMiddlerware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">?.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>IsAuthenticated<span class="token punctuation">)</span>
            <span class="token keyword">return</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> oldClaims <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newClaims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldClaims<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">)</span>
            newClaims<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> oldClaims<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldClaims<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
            newClaims<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> oldClaims<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 模拟从数据库中查询出来的数据存入Claim中</span>
        newClaims<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">&quot;123456@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> claimIdentiies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ClaimsIdentity<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        claimIdentiies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>newClaims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">AddIdentities</span><span class="token punctuation">(</span>claimIdentiies<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//认证</span>
app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//授权</span>
app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CurrentUserClaimMiddlerware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法，这次是直接使用的IHttpContextAccessor(使用需要注册该服务)，可以按照上面的方式封装</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _httpContext<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TestController</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _httpContext <span class="token operator">=</span> httpContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetCurrentEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>_httpContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
        <span class="token punctuation">{</span>
            t<span class="token punctuation">.</span>Type<span class="token punctuation">,</span>
            t<span class="token punctuation">.</span>Value
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用声明转换处理" tabindex="-1"><a class="header-anchor" href="#使用声明转换处理"><span>使用声明转换处理</span></a></h3><p>借助接口<code>IClaimsTransformation</code>来实现声明转换操作，来实现在原有的基础上增加Claim等，当然还有其他的作用，这里只是用来扩展声明信息</p>`,28),m={href:"https://www.milanjovanovic.tech/blog/master-claims-transformation-for-flexible-aspnetcore-authorization?utm_source=newsletter&utm_medium=email&utm_campaign=tnw84",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class CustomApppendClaims : IClaimsTransformation
{
    public Task&lt;ClaimsPrincipal&gt; TransformAsync(ClaimsPrincipal principal)
    {
        if (principal.HasClaim(claim =&gt; claim.Type == &quot;no&quot;))
        {
            return Task.FromResult(principal);
        }

        var claimsIdentity = new ClaimsIdentity();
        claimsIdentity.AddClaim(new Claim(&quot;no&quot;, &quot;123456&quot;));
        principal.AddIdentity(claimsIdentity);
        return Task.FromResult(principal);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入服务</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 在原来的基础上追加claim
builder.Services.AddTransient&lt;IClaimsTransformation, CustomApppendClaims&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后从<code>HttpContext.User.Claims</code>中可以看看到<code>no</code>信息。</p>`,4);function b(y,g){const t=c("ExternalLinkIcon");return o(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("该方式来自："),n("a",k,[s("https://www.cnblogs.com/CreateMyself/p/14979315.html"),e(t)])])]),d,n("p",null,[s("参考资料："),n("a",m,[s("掌握灵活的 ASP.NET Core 授权的声明转换"),e(t)])]),v])}const C=p(u,[["render",b],["__file","huoquyonghuxinxi.html.vue"]]),x=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/huoquyonghuxinxi.html","title":"获取用户信息","lang":"zh-CN","frontmatter":{"title":"获取用户信息","lang":"zh-CN","date":"2023-10-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"huoquyonghuxinxi","slug":"lh3gma","docsId":"48532499","description":"用户信息设置 用户信息一般是保存在上下文的HttpContext的User中，然后我们可以通过下面的方法去获取 方案一(Redis) 条件：redis 登录成功后将用户信息存储到redis中，用户ID返回给前端，后续请求中需要获取用户信息的操作，那么就根据用户ID去redis中查询，然后获取完整信息。 方案二(HttpContext) 条件：使用jwt...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/huoquyonghuxinxi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"获取用户信息"}],["meta",{"property":"og:description","content":"用户信息设置 用户信息一般是保存在上下文的HttpContext的User中，然后我们可以通过下面的方法去获取 方案一(Redis) 条件：redis 登录成功后将用户信息存储到redis中，用户ID返回给前端，后续请求中需要获取用户信息的操作，那么就根据用户ID去redis中查询，然后获取完整信息。 方案二(HttpContext) 条件：使用jwt..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1634040801377-67c45596-41af-418d-922e-8e3c5f885a5a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-17T14:35:02.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-17T14:35:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"获取用户信息\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1634040801377-67c45596-41af-418d-922e-8e3c5f885a5a.png\\"],\\"datePublished\\":\\"2023-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-17T14:35:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"用户信息设置","slug":"用户信息设置","link":"#用户信息设置","children":[]},{"level":2,"title":"方案一(Redis)","slug":"方案一-redis","link":"#方案一-redis","children":[]},{"level":2,"title":"方案二(HttpContext)","slug":"方案二-httpcontext","link":"#方案二-httpcontext","children":[]},{"level":2,"title":"方案三(过滤器)","slug":"方案三-过滤器","link":"#方案三-过滤器","children":[]},{"level":2,"title":"方案四(属性获取)※","slug":"方案四-属性获取-※","link":"#方案四-属性获取-※","children":[]},{"level":2,"title":"方案五(扩展参数)","slug":"方案五-扩展参数","link":"#方案五-扩展参数","children":[{"level":3,"title":"使用中间件增加","slug":"使用中间件增加","link":"#使用中间件增加","children":[]},{"level":3,"title":"使用声明转换处理","slug":"使用声明转换处理","link":"#使用声明转换处理","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1713364502000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":4.43,"words":1330},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/huoquyonghuxinxi.md","localizedDate":"2023年10月3日","excerpt":"<h2>用户信息设置</h2>\\n<p>用户信息一般是保存在上下文的HttpContext的User中，然后我们可以通过下面的方法去获取</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>\\n<span class=\\"token comment\\">// 保存用户信息</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> identity <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ClaimsIdentity</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nidentity<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddClaim</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Claim</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"name\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"zhagnsna\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nidentity<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddClaim</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Claim</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"id\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"11111\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nHttpContext<span class=\\"token punctuation\\">.</span>User <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ClaimsPrincipal</span><span class=\\"token punctuation\\">(</span>identity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取方法</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> bb <span class=\\"token operator\\">=</span> HttpContext<span class=\\"token punctuation\\">.</span>User<span class=\\"token punctuation\\">.</span>Claims<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FirstOrDefault</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token operator\\">=&gt;</span>t<span class=\\"token punctuation\\">.</span>Type<span class=\\"token operator\\">==</span><span class=\\"token string\\">\\"id\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{C as comp,x as data};
