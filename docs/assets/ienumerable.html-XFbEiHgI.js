import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c,a as n,d as s,e,b as t}from"./app-DMmdIwn0.js";const i={},r=t(`<h2 id="ienumerable" tabindex="-1"><a class="header-anchor" href="#ienumerable"><span>IEnumerable</span></a></h2><p>最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该<code>IEnumerable&lt;T&gt;</code>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>AddTimePeriodDto<span class="token punctuation">&gt;</span></span> TimePeriod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AddTimePeriodDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="iqueryable" tabindex="-1"><a class="header-anchor" href="#iqueryable"><span>IQueryable</span></a></h2><p>实现了<code>IEnumerable&lt;T&gt;</code>，包含<code>IEnumerable&lt;T&gt;</code>的全部功能，在System.Linq的命名空间中，通过下面的代码来比较IQueryable和IEnumerable</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 当遇到 ToList() 等方法后，在数据库中执行，执行的 SQL 语句会是 \`TOP(3)\` 这种，只查前3条 </span>
<span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Persons<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Take</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将所有符合 Where() 条件的数据都查到内存中，再取 3 条</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span> persons <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Persons<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Take</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在数据源上执行linq操作来提高效率，那么就使用IQueryable，如果想将一些处理在内存中处理，那么这个时候就需要使用到IEnumerable</p><h2 id="icollection-t" tabindex="-1"><a class="header-anchor" href="#icollection-t"><span><code>ICollection&lt;T&gt;</code></span></a></h2><p>继承了<code>IEnumerable&lt;T&gt;</code>, IEnumerable，包含<code>IEnumerable&lt;T&gt;</code>的全部功能，还支持添加、删除集合中的元素，使用Add()和Remove()等方法。</p><h3 id="数组t" tabindex="-1"><a class="header-anchor" href="#数组t"><span>数组T[]</span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code></p><h3 id="ilist-t" tabindex="-1"><a class="header-anchor" href="#ilist-t"><span><code>IList&lt;T&gt;</code></span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code>,<code>IEnumerable&lt;T&gt;</code>，在原来的基础上增加了IndexOf、Insert、RemoveAt等方法</p><h3 id="list-t" tabindex="-1"><a class="header-anchor" href="#list-t"><span><code>List&lt;T&gt;</code></span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code>, <code>IEnumerable&lt;T&gt;</code>, <code>IEnumerable</code>, <code>IList&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code>, <code>IReadOnlyList&lt;T&gt;</code>, <code>ICollection</code>, <code>IList</code>在原有的基础上增加了不少方法</p><h2 id="ireadonlycollection" tabindex="-1"><a class="header-anchor" href="#ireadonlycollection"><span>IReadonlyCollection</span></a></h2><p>不可变集合，增加了count属性</p><h3 id="ireadonlylist-t" tabindex="-1"><a class="header-anchor" href="#ireadonlylist-t"><span><code>IReadOnlyList&lt;T&gt;</code></span></a></h3><p>继承自：<code>IEnumerable&lt;T&gt;</code>, <code>IEnumerable</code>, <code>IReadOnlyCollection&lt;T&gt;</code>，在原有的基础上增加了通过索引获取值的方法。</p><h2 id="blockingcollection" tabindex="-1"><a class="header-anchor" href="#blockingcollection"><span>BlockingCollection</span></a></h2>`,20),u={href:"https://www.cnblogs.com/baibaomen-org/p/17162795.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>如果你想玩转C## 里面多线程，工厂模式，生产者/消费者,队列等高级操作，就可以和我一起探索这个强大的线程安全提供阻塞和限制功能的.Net神器类</p><h2 id="collectionsmarshal" tabindex="-1"><a class="header-anchor" href="#collectionsmarshal"><span>CollectionsMarshal</span></a></h2><p>基础使用示例</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>var list = new List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>();
var aaa = CollectionsMarshal.AsSpan(list);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合选择" tabindex="-1"><a class="header-anchor" href="#集合选择"><span>集合选择</span></a></h2><p>只考虑各种集合类型的功能，得出的初步但不完全合适的规则：</p><ol><li>当需要添加和删除集合中的元素时，用 <code>ICollection&lt;T&gt;</code>；</li><li>当需要在数据源上执行 LINQ 操作以提升效率时，选择 <code>IQueryable&lt;T&gt;</code>，典型场景是使用 EF Core 等 ORM 框架时；</li><li>其他情况选择 <code>IEnumerable&lt;T&gt;</code>。</li></ol><p>进一步考虑可维护性等元素，得出的规则：</p><ol><li>当你的方法需要一个集合类型的输入参数时，可以选择 <code>IEnumerable&lt;T&gt;</code>；</li><li>返回集合类型时选择 <code>IReadOnlyCollection&lt;T&gt;</code> 或它的子类。</li></ol>`,9),k=n("code",null,"IEnumerable<T>",-1),m=n("code",null,"IEnumerable<T>",-1),h={href:"https://cat.aiursoft.cn/post/2023/3/10/a-guide-to-ienumerable-iqueryable-and-icollection",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span>Distinct</span></a></h3><p>自定义去重</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerComparer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> x<span class="token punctuation">,</span> <span class="token class-name">UserInfo</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> y <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> x<span class="token punctuation">.</span>UserName <span class="token operator">==</span> y<span class="token punctuation">?.</span>UserName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>UserName<span class="token punctuation">?.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>  UserName<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Password<span class="token operator">=</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>  UserName<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Password<span class="token operator">=</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> distinctList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2条</span>
<span class="token class-name"><span class="token keyword">var</span></span> customerDistinctList<span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerComparer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1条</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="orderby" tabindex="-1"><a class="header-anchor" href="#orderby"><span>OrderBy</span></a></h3>`,7),g={href:"https://dotnet.libhunt.com/naturalsort-extension-changelog",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"yield",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#yield"},[n("span",null,"Yield")])],-1),y={href:"https://www.cnblogs.com/czzj/p/yield.html",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),f={href:"https://mp.weixin.qq.com/s/iJKWQ7Zfv3QLBSLE3kA-_A",target:"_blank",rel:"noopener noreferrer"};function T(w,_){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[n("a",u,[s("https://www.cnblogs.com/baibaomen-org/p/17162795.html"),e(a)])]),d,n("p",null,[s("促使我们不把 "),k,s(" 作为返回集合类型实际上还有一个原因。就是 "),m,s(" 有“延迟评估”的特性。 资料："),n("a",h,[s("https://cat.aiursoft.cn/post/2023/3/10/a-guide-to-ienumerable-iqueryable-and-icollection"),e(a)])]),b,n("p",null,[s("自定义排序支持，通过安装nuget包：NaturalSort.Extension 更新日志："),n("a",g,[s("https://dotnet.libhunt.com/naturalsort-extension-changelog"),e(a)])]),v,n("p",null,[s("关于 yield 关键字（C#）"),n("a",y,[s("https://www.cnblogs.com/czzj/p/yield.html"),e(a)])]),I,n("p",null,[n("a",f,[s("https://mp.weixin.qq.com/s/iJKWQ7Zfv3QLBSLE3kA-_A"),e(a)]),s(" | .NET性能优化之快速遍历List集合")])])}const C=o(i,[["render",T],["__file","ienumerable.html.vue"]]),L=JSON.parse('{"path":"/dotnet/csharp/jigecaozuo/ienumerable.html","title":"IEnumerable","lang":"zh-CN","frontmatter":{"title":"IEnumerable","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"ienumerable","slug":"gynli5","docsId":"49851115","description":"IEnumerable 最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该IEnumerable<T>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值 IQueryable 实现了IEnumerable<T>，包含IEnumerable<T>的全部功能，在System.L...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/jigecaozuo/ienumerable.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"IEnumerable"}],["meta",{"property":"og:description","content":"IEnumerable 最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该IEnumerable<T>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值 IQueryable 实现了IEnumerable<T>，包含IEnumerable<T>的全部功能，在System.L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T15:44:14.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T15:44:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IEnumerable\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T15:44:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"IEnumerable","slug":"ienumerable","link":"#ienumerable","children":[]},{"level":2,"title":"IQueryable","slug":"iqueryable","link":"#iqueryable","children":[]},{"level":2,"title":"ICollection<T>","slug":"icollection-t","link":"#icollection-t","children":[{"level":3,"title":"数组T[]","slug":"数组t","link":"#数组t","children":[]},{"level":3,"title":"IList<T>","slug":"ilist-t","link":"#ilist-t","children":[]},{"level":3,"title":"List<T>","slug":"list-t","link":"#list-t","children":[]}]},{"level":2,"title":"IReadonlyCollection","slug":"ireadonlycollection","link":"#ireadonlycollection","children":[{"level":3,"title":"IReadOnlyList<T>","slug":"ireadonlylist-t","link":"#ireadonlylist-t","children":[]}]},{"level":2,"title":"BlockingCollection","slug":"blockingcollection","link":"#blockingcollection","children":[]},{"level":2,"title":"CollectionsMarshal","slug":"collectionsmarshal","link":"#collectionsmarshal","children":[]},{"level":2,"title":"集合选择","slug":"集合选择","link":"#集合选择","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"Distinct","slug":"distinct","link":"#distinct","children":[]},{"level":3,"title":"OrderBy","slug":"orderby","link":"#orderby","children":[]},{"level":3,"title":"Yield","slug":"yield","link":"#yield","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700235854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.88,"words":865},"filePathRelative":"dotnet/csharp/jigecaozuo/ienumerable.md","localizedDate":"2023年10月22日","excerpt":"<h2>IEnumerable</h2>\\n<p>最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该<code>IEnumerable&lt;T&gt;</code>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。\\n设置默认值</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">IEnumerable<span class=\\"token punctuation\\">&lt;</span>AddTimePeriodDto<span class=\\"token punctuation\\">&gt;</span></span> TimePeriod <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> Enumerable<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">Empty</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>AddTimePeriodDto<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{C as comp,L as data};
