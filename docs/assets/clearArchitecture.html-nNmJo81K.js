import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as n}from"./app-CF6xeyXt.js";const r="/kbms/common/1693141717170-c76e1825-6a0b-40ac-bd30-b2641e68b4d3.png",i={},o=n('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>整洁架构也叫做洋葱架构</p><figure><img src="'+r+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li>内层的部分比外层的部分更加抽象-&gt;内层表达抽象，外层表达实现(内层定义接口，外层定义实现 )</li><li>外层的代码只能调用内层的代码，内层的代码可以通过依赖注入的形式间接调用外层的代码，举例：读取文件然后发送邮件</li></ul><p>从图中可以看出，领域模型位于应用程序的核心部分，外界与领域模型的交互都通过应用层完成，应用层是领域模型的直接客户。然而，应用层中不应该包含有业务逻辑，否则就造成了领域逻辑的泄漏，而应该是很薄的一层，主要起到协调的作用，它所做的只是将业务操作代理给我们的领域模型。同时，如果我们的业务操作有事务需求，那么对于事务的管理应该放在应用层上，因为事务也是以业务用例为单位的。</p><p>应用层负责调用领域层的的方法来实现业务，然后领域层处理业务逻辑</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="防腐层-adapter" tabindex="-1"><a class="header-anchor" href="#防腐层-adapter"><span>防腐层(Adapter)</span></a></h3><p>防腐层(ACL)：外部服务(短信服务、邮件服务、存储服务)的变化比较频繁。把这些服务定义为接口，在内层代码我们之定义和使用接口，在外层代码中定义接口的实现。体现的仍然是洋葱结构的理念。</p><h2 id="分层" tabindex="-1"><a class="header-anchor" href="#分层"><span>分层</span></a></h2><p>简单分三层模式 WebApi：控制器、请求和响应类、领域事件处理 Domain：实体类、事件模型、公共方法、防腐层接口、仓储接口、Domain服务 Infrastrcuture：实体类配置、数据库迁移文件、数据库上下文、仓储接口实现</p><h2 id="示例项目" tabindex="-1"><a class="header-anchor" href="#示例项目"><span>示例项目</span></a></h2><p>整洁架构NorthwindTraders(5.7k)：<a href="https://github.com/jasontaylordev/NorthwindTraders" target="_blank" rel="noopener noreferrer">地址</a></p><p>示例.NET Core REST API CQRS实现与原始SQL和DDD使用清洁架构(2.7k)：<a href="https://github.com/kgrzybek/sample-dotnet-core-cqrs-api" target="_blank" rel="noopener noreferrer">地址</a></p><p>OnionArch - 采用DDD+CQRS+.Net 7.0实现的洋葱架构：<a href="https://www.cnblogs.com/xiaozhuang/p/16772485.html" target="_blank" rel="noopener noreferrer">地址</a></p><p>EdisonZhou整洁架构模板：<a href="https://github.com/Coder-EdisonZhou/CleanArchitectureTemplate" target="_blank" rel="noopener noreferrer">地址</a></p>',16),p=[o];function c(l,s){return a(),t("div",null,p)}const h=e(i,[["render",c],["__file","clearArchitecture.html.vue"]]),d=JSON.parse('{"path":"/softwareDesign/domainDrivenDesign/clearArchitecture.html","title":"整洁架构","lang":"zh-CN","frontmatter":{"title":"整洁架构","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"zhengjiejiagou","slug":"mfsa2m0miq43k3wn","docsId":"137494323","description":"概述 整洁架构也叫做洋葱架构 image.pngimage.png 内层的部分比外层的部分更加抽象->内层表达抽象，外层表达实现(内层定义接口，外层定义实现 ) 外层的代码只能调用内层的代码，内层的代码可以通过依赖注入的形式间接调用外层的代码，举例：读取文件然后发送邮件 从图中可以看出，领域模型位于应用程序的核心部分，外界与领域模型的交互都通过应用层完...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/domainDrivenDesign/clearArchitecture.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"整洁架构"}],["meta",{"property":"og:description","content":"概述 整洁架构也叫做洋葱架构 image.pngimage.png 内层的部分比外层的部分更加抽象->内层表达抽象，外层表达实现(内层定义接口，外层定义实现 ) 外层的代码只能调用内层的代码，内层的代码可以通过依赖注入的形式间接调用外层的代码，举例：读取文件然后发送邮件 从图中可以看出，领域模型位于应用程序的核心部分，外界与领域模型的交互都通过应用层完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1693141717170-c76e1825-6a0b-40ac-bd30-b2641e68b4d3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T16:06:56.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T16:06:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"整洁架构\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1693141717170-c76e1825-6a0b-40ac-bd30-b2641e68b4d3.png\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-24T16:06:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"防腐层(Adapter)","slug":"防腐层-adapter","link":"#防腐层-adapter","children":[]}]},{"level":2,"title":"分层","slug":"分层","link":"#分层","children":[]},{"level":2,"title":"示例项目","slug":"示例项目","link":"#示例项目","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1711296416000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.91,"words":572},"filePathRelative":"softwareDesign/domainDrivenDesign/clearArchitecture.md","localizedDate":"2023年9月5日","excerpt":"<h2>概述</h2>\\n<p>整洁架构也叫做洋葱架构</p>\\n<figure><img src=\\"/common/1693141717170-c76e1825-6a0b-40ac-bd30-b2641e68b4d3.png\\" alt=\\"image.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image.png</figcaption></figure>\\n<ul>\\n<li>内层的部分比外层的部分更加抽象-&gt;内层表达抽象，外层表达实现(内层定义接口，外层定义实现 )</li>\\n<li>外层的代码只能调用内层的代码，内层的代码可以通过依赖注入的形式间接调用外层的代码，举例：读取文件然后发送邮件</li>\\n</ul>","autoDesc":true}');export{h as comp,d as data};
