import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,e as n,f as e,d as t}from"./app-Bfb6-vFH.js";const i={},u=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>一个默认的高性能、低内存的处理Json的工具。</p><ul><li>将对象序列化为Json文本以及将Json文本反序列化为对象(支持UTF-8)</li><li>可以读取和写入编码为UTF-8的Json文本</li><li>创建内存中文档对象模型，以及访问元素的内容。</li></ul><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><p>在 System.Text.Json 中，有几个重量级的对象，所有的JSON互操作，都是围绕这几个对象进行，只要理解了他们各自的用途用法，就基本上掌握了JSON和实体对象的互操作。 <strong>JsonDocument</strong> 提供用于检查 JSON 值的结构内容，而不自动实例化数据值的机制。JsonDocument 有一个属性 RootElement，提供对JSON文档根元素的访问，RootElement是一个JsonElement对象。 <strong>JsonElement</strong> 提供对JSON值的访问，在System.Text.Json 中，大到一个对象、数组，小到一个属性、值，都可以通过 JsonElement 进行互操作 <strong>JsonProperty</strong> JSON中最小的单元，提供对属性、值的访问 <strong>JsonSerializer</strong> 提供JSON互操作的静态类，提供了一系列 Serializer/Deserialize 的互操作的方法，其中还有一些异步/流式操作方法。 <strong>JsonSerializerOptions</strong> 与上面的 JsonSerializer 配合使用，提供自定义的个性化互操作选项，包括命名、枚举转换、字符转义、注释规则、自定义转换器等等操作选项。 <strong>Utf8JsonWriter/Utf8JsonReader</strong> 这两个对象是整个 System.Text.Json 的核心对象，所有的JSON互操作几乎都是通过这两个对象进行，他们提供的高性能的底层读写操作。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="初始化json对象" tabindex="-1"><a class="header-anchor" href="#初始化json对象"><span>初始化Json对象</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Utf8JsonWriter</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteStartObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ron&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteNumber</span><span class="token punctuation">(</span><span class="token string">&quot;No&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteNumber</span><span class="token punctuation">(</span><span class="token string">&quot;Price&quot;</span><span class="token punctuation">,</span> <span class="token number">2.34m</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">WriteEndObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串转对象" tabindex="-1"><a class="header-anchor" href="#字符串转对象"><span>字符串转对象</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Ron\\&quot;,\\&quot;money\\&quot;:4.5}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jDoc <span class="token operator">=</span> JsonDocument<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素"><span>查找元素</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
	Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
	Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
	CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
	Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;111&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	No <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
	Price <span class="token operator">=</span> <span class="token number">2.34m</span><span class="token punctuation">,</span>
	Email <span class="token operator">=</span> <span class="token string">&quot;Test.@qq.com&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//查找元素</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;Ron\\&quot;,\\&quot;money\\&quot;:4.5,\\&quot;price\\&quot;:null}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jDoc <span class="token operator">=</span> JsonDocument<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// var obj = jDoc.RootElement[0];// 这里会报错，索引仅支持 Array 类型的JSON文档</span>

<span class="token comment">//查找name的值</span>
<span class="token class-name"><span class="token keyword">var</span></span> nameValue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//方案一，迭代获取</span>
<span class="token class-name"><span class="token keyword">var</span></span> enumerate <span class="token operator">=</span> jDoc<span class="token punctuation">.</span>RootElement<span class="token punctuation">.</span><span class="token function">EnumerateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>enumerate<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>enumerate<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		nameValue <span class="token operator">=</span> enumerate<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//方案二</span>
<span class="token comment">//var nameValue2 = jDoc.RootElement.GetProperty(&quot;name&quot;).ToString();//如果不存在会报错</span>
<span class="token comment">//var nameValue2 = jDoc.RootElement.GetProperty(&quot;name&quot;).GetString();//如果获取的值是int类型，但是如果为null就会报错</span>
<span class="token comment">//_ = jDoc.RootElement.TryGetProperty(&quot;name&quot;, out JsonElement nameJsonElement2);</span>

<span class="token comment">//获取值类型值，可能获取到是null，如果GetProperty不存在的值，会报错，所以就需要TryGetProperty</span>
<span class="token class-name"><span class="token keyword">var</span></span> priceJsonElement2 <span class="token operator">=</span> jDoc<span class="token punctuation">.</span>RootElement<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> moneyValue <span class="token operator">=</span> <span class="token number">0m</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>priceJsonElement2<span class="token punctuation">.</span>ValueKind <span class="token operator">!=</span> JsonValueKind<span class="token punctuation">.</span>Null<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	moneyValue <span class="token operator">=</span> priceJsonElement2<span class="token punctuation">.</span><span class="token function">GetDecimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化"><span>序列化和反序列化</span></a></h3><p>实体类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDto</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 标识ID</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonPropertyName</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;TestName&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 邮箱</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 编号</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> No <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">SexEnum</span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonIgnore</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TestValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用来存储多余溢出的值</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>JsonExtensionData<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> ExtensionData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///未知</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    Unknown<span class="token punctuation">,</span>

    <span class="token doc-comment comment">///&lt;summary</span>
    <span class="token doc-comment comment">///男</span>
    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    Man<span class="token punctuation">,</span>

    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///女</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    Woman
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体操作代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//基本操作</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result：&quot;{\\&quot;Id\\&quot;:1,\\&quot;TestName\\&quot;:\\&quot;\\\\u5F20\\\\u4E09\\&quot;,\\&quot;Email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;Price\\&quot;:2.34,\\&quot;CreateTime\\&quot;:\\&quot;2022-05-08T17:01:17.6049701+08:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;No\\&quot;:10}&quot;</span>
<span class="token class-name"><span class="token keyword">var</span></span> user2 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> json2 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置中文编码，默认会转义</span>
    Encoder <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encodings<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>JavaScriptEncoder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>UnicodeRanges<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//json美化</span>
    WriteIndented <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//属性名不区分大小写</span>
    PropertyNameCaseInsensitive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//允许有逗号的json</span>
    AllowTrailingCommas <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//默认缓冲区大小</span>
    DefaultBufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token comment">//默认忽略条件</span>
    DefaultIgnoreCondition <span class="token operator">=</span> JsonIgnoreCondition<span class="token punctuation">.</span>Never<span class="token punctuation">,</span>
    <span class="token comment">//驼峰命名 默认null</span>
    DictionaryKeyPolicy <span class="token operator">=</span> JsonNamingPolicy<span class="token punctuation">.</span>CamelCase<span class="token punctuation">,</span>
    <span class="token comment">//忽略只读字段</span>
    IgnoreReadOnlyFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//忽略只读属性</span>
    IgnoreReadOnlyProperties <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//包含字段</span>
    IncludeFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//最大深度</span>
    MaxDepth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">////数字处理方式</span>
    NumberHandling <span class="token operator">=</span> JsonNumberHandling<span class="token punctuation">.</span>AllowNamedFloatingPointLiterals<span class="token punctuation">,</span>
    <span class="token comment">//属性命名</span>
    PropertyNamingPolicy <span class="token operator">=</span> JsonNamingPolicy<span class="token punctuation">.</span>CamelCase<span class="token punctuation">,</span>
    <span class="token comment">//是否读取注释</span>
    ReadCommentHandling <span class="token operator">=</span> JsonCommentHandling<span class="token punctuation">.</span>Skip<span class="token punctuation">,</span>
    <span class="token comment">//未知类型处理</span>
    UnknownTypeHandling <span class="token operator">=</span> JsonUnknownTypeHandling<span class="token punctuation">.</span>JsonElement<span class="token punctuation">,</span>
    <span class="token comment">//ReferenceHandler = new CustomReferenceHandler(),//引用处理</span>
    <span class="token comment">//Converters = new JsonConverter[] { new CustomJsonConverter() },//自定义转换器</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result：&quot;{\\r\\n  \\&quot;id\\&quot;: 1,\\r\\n  \\&quot;TestName\\&quot;: \\&quot;张三\\&quot;,\\r\\n  \\&quot;email\\&quot;: \\&quot;Test.@qq.com\\&quot;,\\r\\n  \\&quot;price\\&quot;: 2.34,\\r\\n  \\&quot;createTime\\&quot;: \\&quot;2022-05-08T17:01:17.6049701+08:00\\&quot;,\\r\\n  \\&quot;sizes\\&quot;: [\\r\\n    \\&quot;111\\&quot;\\r\\n  ],\\r\\n  \\&quot;no\\&quot;: 10\\r\\n}&quot;</span>

<span class="token comment">//设置自定义属性名称命名策略</span>
<span class="token class-name"><span class="token keyword">var</span></span> json3 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LowerCaseNamingPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result:&quot;{\\&quot;id\\&quot;:1,\\&quot;TestName\\&quot;:\\&quot;\\\\u5F20\\\\u4E09\\&quot;,\\&quot;email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;price\\&quot;:2.34,\\&quot;createtime\\&quot;:\\&quot;2022-05-08T17:10:16.7422842+08:00\\&quot;,\\&quot;sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;no\\&quot;:10,\\&quot;sex\\&quot;:0}&quot;</span>

<span class="token comment">//设置枚举名称序列化</span>
<span class="token class-name"><span class="token keyword">var</span></span> user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;111&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    No <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>

    Price <span class="token operator">=</span> <span class="token number">2.34m</span><span class="token punctuation">,</span>
    Email <span class="token operator">=</span> <span class="token string">&quot;Test.@qq.com&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span>Man
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> options4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加转换器</span>
options4<span class="token punctuation">.</span>Converters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonStringEnumConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> json4 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user4<span class="token punctuation">,</span> options4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result:&quot;{\\&quot;Id\\&quot;:1,\\&quot;TestName\\&quot;:\\&quot;\\\\u5F20\\\\u4E09\\&quot;,\\&quot;Email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;Price\\&quot;:2.34,\\&quot;CreateTime\\&quot;:\\&quot;2022-05-08T17:12:08.7925047+08:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;No\\&quot;:10,\\&quot;Sex\\&quot;:\\&quot;Man\\&quot;}&quot;</span>

<span class="token comment">//排除值为null的属性</span>
<span class="token class-name"><span class="token keyword">var</span></span> user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;111&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    No <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>

    Price <span class="token operator">=</span> <span class="token number">2.34m</span><span class="token punctuation">,</span>
    Email <span class="token operator">=</span> <span class="token string">&quot;Test.@qq.com&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span>Man
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> json5 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user5<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    Encoder <span class="token operator">=</span> JavaScriptEncoder<span class="token punctuation">.</span>UnsafeRelaxedJsonEscaping<span class="token punctuation">,</span>
    DefaultIgnoreCondition <span class="token operator">=</span> JsonIgnoreCondition<span class="token punctuation">.</span>WhenWritingNull
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result：&quot;{\\&quot;Id\\&quot;:1,\\&quot;TestName\\&quot;:\\&quot;张三\\&quot;,\\&quot;Email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;Price\\&quot;:2.34,\\&quot;CreateTime\\&quot;:\\&quot;2022-05-08T17:15:36.3579325+08:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;No\\&quot;:10,\\&quot;Sex\\&quot;:1}&quot;</span>

<span class="token comment">//排除指定标记属性</span>
<span class="token comment">//使用特性：[JsonIgnore]</span>

<span class="token comment">//设置排除派生类的属性</span>
<span class="token class-name"><span class="token keyword">var</span></span> json6 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user5<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserDto</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置包含注释序列化</span>
<span class="token comment">//默认情况下你的json字符串不允许出现注释，除非你配置 JsonCommentHandling.Skip，但是我们可以配置让注释出现到反序列化里面</span>
<span class="token class-name"><span class="token keyword">var</span></span> json7 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Id\\&quot;:1/* 标识 */,\\&quot;TestName\\&quot;:\\&quot;张三\\&quot;,\\&quot;Email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;Price\\&quot;:2.34,\\&quot;CreateTime\\&quot;:\\&quot;2022-05-08T17:15:36.3579325+08:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;No\\&quot;:10,\\&quot;Sex\\&quot;:1}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> user7 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json7<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    AllowTrailingCommas <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    ReadCommentHandling <span class="token operator">=</span> JsonCommentHandling<span class="token punctuation">.</span>Skip
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置允许字段溢出   允许json里面包含多余的值  默认是忽略多余的值</span>
<span class="token comment">//使用特性JsonExtensionData可以读取溢出的值</span>

<span class="token comment">//使用自定义转换器</span>
<span class="token class-name"><span class="token keyword">var</span></span> options8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
options8<span class="token punctuation">.</span>Converters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonConverterUnixDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//然后再需要应用的属性上面标注特性：    [JsonConverter(typeof(JsonConverterUnixDateTime))]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义命名策略</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 转小写命名策略</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LowerCaseNamingPolicy</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonNamingPolicy</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ConvertName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义转换器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 将日期类型输出为 Unix 时间戳而不是格式化的日期内容</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConverterUnixDateTime</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonConverter<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DateTime</span> Greenwich_Mean_Time <span class="token operator">=</span> TimeZoneInfo<span class="token punctuation">.</span><span class="token function">ConvertTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeZoneInfo<span class="token punctuation">.</span>Local<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> Limit <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DateTime</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Utf8JsonReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">Type</span> typeToConvert<span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span>TokenType <span class="token operator">==</span> JsonTokenType<span class="token punctuation">.</span>Number<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> unixTime <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">GetInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span>Greenwich_Mean_Time<span class="token punctuation">.</span>Ticks <span class="token operator">+</span> unixTime <span class="token operator">*</span> Limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> dt<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> reader<span class="token punctuation">.</span><span class="token function">GetDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name">Utf8JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> unixTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">-</span> Greenwich_Mean_Time<span class="token punctuation">)</span><span class="token punctuation">.</span>Ticks <span class="token operator">/</span> Limit<span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteNumberValue</span><span class="token punctuation">(</span>unixTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化和反序列化通知" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化通知"><span>序列化和反序列化通知</span></a></h3><p>在 .NET 6 中，System.Text.Json 公开序列化和反序列化的通知。 有四个新接口可以根据您的需要进行实现：</p><ul><li>IJsonOnDeserialized</li><li>IJsonOnDeserializing</li><li>IJsonOnSerialized</li><li>IJsonOnSerializing</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Product</span> invalidProduct <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> Test <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>invalidProduct<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// The InvalidOperationException is thrown</span>

<span class="token class-name"><span class="token keyword">string</span></span> invalidJson <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">;</span>
JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>invalidJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// The InvalidOperationException is thrown</span>

<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJsonOnDeserialized</span><span class="token punctuation">,</span> <span class="token class-name">IJsonOnSerializing</span><span class="token punctuation">,</span> <span class="token class-name">IJsonOnSerialized</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Test <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSerialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> IJsonOnDeserialized<span class="token punctuation">.</span><span class="token function">OnDeserialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Call after deserialization</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> IJsonOnSerializing<span class="token punctuation">.</span><span class="token function">OnSerializing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Call before serialization</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Name <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;The &#39;Name&#39; property cannot be &#39;null&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),r={href:"https://mp.weixin.qq.com/s/y9fPateH8Mg6iS5PUgOvMQ",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="转义问题" tabindex="-1"><a class="header-anchor" href="#转义问题"><span>转义问题</span></a></h3><p>默认情况下会将中文进行转义，你不确定是哪种字符集或者有全球化的需求，可以直接使用 UnicodeRanges.All 来支持所有的字符</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> option9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    Encoder <span class="token operator">=</span> JavaScriptEncoder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>UnicodeRanges<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一些包含 html 标签的文本即使指定了所有字符集也会被转义，这是出于安全考虑。如果觉得不需要转义也可以配置，配置使用 JavaScriptEncoder.UnsafeRelaxedJsonEscaping 即可，示例如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> option9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
<span class="token punctuation">{</span>
    Encoder <span class="token operator">=</span> JavaScriptEncoder<span class="token punctuation">.</span>UnsafeRelaxedJsonEscaping
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> user9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Name<span class="token operator">=</span> <span class="token string">&quot;&lt;h1&gt;这是标题&lt;/h1&gt;&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> json8 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>user9<span class="token punctuation">,</span> option9<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//result:&quot;{\\&quot;Id\\&quot;:1,\\&quot;TestName\\&quot;:\\&quot;&lt;h1&gt;这是标题&lt;/h1&gt;\\&quot;,\\&quot;Email\\&quot;:null,\\&quot;Price\\&quot;:0,\\&quot;CreateTime\\&quot;:\\&quot;0001-01-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:null,\\&quot;No\\&quot;:0,\\&quot;Sex\\&quot;:0}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反序列化读取溢出值" tabindex="-1"><a class="header-anchor" href="#反序列化读取溢出值"><span>反序列化读取溢出值</span></a></h3><p>当你需要返回反序列化的json字符串中包含对象中没有的属性时候，默认会忽略，但是我们还可以使用其他方法来读取。首先需要修改对象增加下面的属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用来存储多余溢出的值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>JsonExtensionData<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> ExtensionData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token comment">//or</span>

<span class="token punctuation">[</span>JsonExtensionData<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> JsonElement<span class="token punctuation">&gt;</span></span> ExtensionData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作示例，UserDto对象中不包含age，但是会映射到上面的ExtensionData中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json8 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Id\\&quot;:1,\\&quot;age\\&quot;:10,\\&quot;TestName\\&quot;:\\&quot;张三\\&quot;,\\&quot;Email\\&quot;:\\&quot;Test.@qq.com\\&quot;,\\&quot;Price\\&quot;:2.34,\\&quot;CreateTime\\&quot;:\\&quot;2022-05-08T17:15:36.3579325+08:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;111\\&quot;],\\&quot;No\\&quot;:10,\\&quot;Sex\\&quot;:1}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> user8 <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json8<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化顺序" tabindex="-1"><a class="header-anchor" href="#序列化顺序"><span>序列化顺序</span></a></h3><p>默认的顺序是按照属性的位置来进行排列的，现在可以通过标注特性来自定义顺序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonPropertyOrder</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
 <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-和-stream-互转" tabindex="-1"><a class="header-anchor" href="#json-和-stream-互转"><span>JSON 和 Stream 互转</span></a></h3>`,14),d={href:"https://mp.weixin.qq.com/s/t-TL0KXFxuDZwtDdtwc8_A",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Value\\&quot;:\\&quot;Deserialized from stream\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Deserialize from stream</span>
<span class="token keyword">using</span> <span class="token class-name">MemoryStream</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Example</span> desializedExample <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Example<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>desializedExample<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output: Deserialized from stream</span>

<span class="token comment">// ==================================================================</span>

<span class="token comment">// Serialize to stream</span>
<span class="token class-name">JsonSerializerOptions</span> options <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> WriteIndented <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name">Stream</span> outputStream <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">OpenStandardOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Example</span> exampleToSerialize <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> <span class="token string">&quot;Serialized from stream&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Serialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Example<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> exampleToSerialize<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output:</span>
<span class="token comment">// {</span>
<span class="token comment">//    &quot;Value&quot;: &quot;Serialized from stream&quot;</span>
<span class="token comment">// }</span>

<span class="token keyword">class</span> <span class="token class-name">Example</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展序列化" tabindex="-1"><a class="header-anchor" href="#扩展序列化"><span>扩展序列化</span></a></h3><p>通过一个自定义转换器来将序列化内容里面的DateTimeOffset时间转为时间戳</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">JsonSerialization</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个 DateTimeOffset 对象</span>
            <span class="token class-name"><span class="token keyword">var</span></span> dateTimeOffset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 序列化 DateTimeOffset 对象为 JSON</span>
            <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>dateTimeOffset<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 设置时间戳格式</span>
                Converters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffsetConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 输出结果</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 等待用户输入</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义 DateTimeOffset 转换器</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeOffsetConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonConverter<span class="token punctuation">&lt;</span>DateTimeOffset<span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DateTimeOffset</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Utf8JsonReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">Type</span> typeToConvert<span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> DateTimeOffset<span class="token punctuation">.</span><span class="token function">FromUnixTimeMilliseconds</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">GetInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name">Utf8JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">WriteNumberValue</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义转换器" tabindex="-1"><a class="header-anchor" href="#自定义转换器"><span>自定义转换器</span></a></h2><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// Json时间转化器
/// &lt;/summary&gt;
public class DateTimeJsonConverter : System.Text.Json.Serialization.JsonConverter&lt;DateTime&gt;
{
    public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        if (string.IsNullOrWhiteSpace(value))
        {
            return default;
        }

        return DateTime.Parse(value);
    }

    public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
    {
        writer.WriteStringValue(value.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;));
    }
}

/// &lt;summary&gt;
/// Json时间转化器
/// &lt;/summary&gt;
public class DateTimeNullJsonConverter : System.Text.Json.Serialization.JsonConverter&lt;DateTime?&gt;
{
    public override DateTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        if (string.IsNullOrWhiteSpace(value))
        {
            return default;
        }

        return DateTime.Parse(value);
    }

    public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions options)
    {
        if (value == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Value.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;));
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><h3 id="无法序列化字段" tabindex="-1"><a class="header-anchor" href="#无法序列化字段"><span>无法序列化字段</span></a></h3><p>.netcore3.1版本不支持序列化字段， .net5版本增加了IncludeFields属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Customer</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">,</span>
            Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//netcore3.1版本不支持序列化字段， net5版本增加了IncludeFields属性</span>
        <span class="token class-name"><span class="token keyword">var</span></span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span> <span class="token punctuation">{</span> IncludeFields <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;{\\&quot;Id\\&quot;:2021}&quot;  无法直接序列化字段</span>
        <span class="token class-name"><span class="token keyword">var</span></span> custoemr <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>custoemr<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 只能序列化属性</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">;</span> <span class="token comment">// 不能序列化字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,11),v={href:"https://www.cnblogs.com/viter/p/12116640.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.text.json?view=net-6.0",target:"_blank",rel:"noopener noreferrer"},y={href:"https://mp.weixin.qq.com/s/ZLN4lldxPNgAXlINDMSAKw",target:"_blank",rel:"noopener noreferrer"},g={href:"https://mp.weixin.qq.com/s/jB_ZbNoVzm6_SlPh9RWxBw",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s/MJYx2-bvph_1RVBsoAkJdw",target:"_blank",rel:"noopener noreferrer"},w={href:"https://mp.weixin.qq.com/s/t-TL0KXFxuDZwtDdtwc8_A",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/y9fPateH8Mg6iS5PUgOvMQ",target:"_blank",rel:"noopener noreferrer"},J={href:"https://devblogs.microsoft.com/dotnet/the-convenience-of-system-text-json/System.Text.Json",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,"自定义 Key 类型的字典无法序列化的 N 种解决方案：https://www.cnblogs.com/artech/p/18075402/dictionary_key_serialization",-1);function S(T,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,s("blockquote",null,[s("p",null,[s("a",r,[n("https://mp.weixin.qq.com/s/y9fPateH8Mg6iS5PUgOvMQ"),e(a)]),n(" | .NET 6 中的七个 System.Text.Json 特性")])]),k,s("p",null,[n("资料："),s("a",d,[n("https://mp.weixin.qq.com/s/t-TL0KXFxuDZwtDdtwc8_A"),e(a)]),n(" | .NET 6 中 System.Text.Json 的新特性")]),m,s("p",null,[n("DotNet程序园："),s("a",v,[n("https://www.cnblogs.com/viter/p/12116640.html"),e(a)]),n(" 官网API浏览器："),s("a",b,[n("https://docs.microsoft.com/zh-cn/dotnet/api/system.text.json?view=net-6.0"),e(a)]),s("a",y,[n("https://mp.weixin.qq.com/s/ZLN4lldxPNgAXlINDMSAKw"),e(a)]),n(" | System.Text.Json 中的字符编码 "),s("a",g,[n("https://mp.weixin.qq.com/s/jB_ZbNoVzm6_SlPh9RWxBw"),e(a)]),n(" | System.Text.Json 中的 JsonExtensionData "),s("a",q,[n("https://mp.weixin.qq.com/s/MJYx2-bvph_1RVBsoAkJdw"),e(a)]),n(" | System.Text.Json 自定义 Conveter "),s("a",w,[n("https://mp.weixin.qq.com/s/t-TL0KXFxuDZwtDdtwc8_A"),e(a)]),n(" | .NET 6 中 System.Text.Json 的新特性 "),s("a",h,[n("https://mp.weixin.qq.com/s/y9fPateH8Mg6iS5PUgOvMQ"),e(a)]),n(" | .NET 6 中的七个 System.Text.Json 特性")]),s("p",null,[s("a",J,[n("https://devblogs.microsoft.com/dotnet/the-convenience-of-system-text-json"),e(a)]),n(" System.Text.Json的便利性说明。")]),f])}const D=p(i,[["render",S],["__file","system_text_json.html.vue"]]),O=JSON.parse('{"path":"/dotnet/base/serialize/json/system_text_json.html","title":"System.Text.Json","lang":"zh-CN","frontmatter":{"title":"System.Text.Json","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"system_text_json","slug":"btqeca","docsId":"29808563","description":"概述 一个默认的高性能、低内存的处理Json的工具。 将对象序列化为Json文本以及将Json文本反序列化为对象(支持UTF-8) 可以读取和写入编码为UTF-8的Json文本 创建内存中文档对象模型，以及访问元素的内容。 对象 在 System.Text.Json 中，有几个重量级的对象，所有的JSON互操作，都是围绕这几个对象进行，只要理解了他们各...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/json/system_text_json.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"System.Text.Json"}],["meta",{"property":"og:description","content":"概述 一个默认的高性能、低内存的处理Json的工具。 将对象序列化为Json文本以及将Json文本反序列化为对象(支持UTF-8) 可以读取和写入编码为UTF-8的Json文本 创建内存中文档对象模型，以及访问元素的内容。 对象 在 System.Text.Json 中，有几个重量级的对象，所有的JSON互操作，都是围绕这几个对象进行，只要理解了他们各..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-29T01:27:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-29T01:27:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"System.Text.Json\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-29T01:27:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"初始化Json对象","slug":"初始化json对象","link":"#初始化json对象","children":[]},{"level":3,"title":"字符串转对象","slug":"字符串转对象","link":"#字符串转对象","children":[]},{"level":3,"title":"查找元素","slug":"查找元素","link":"#查找元素","children":[]},{"level":3,"title":"序列化和反序列化","slug":"序列化和反序列化","link":"#序列化和反序列化","children":[]},{"level":3,"title":"序列化和反序列化通知","slug":"序列化和反序列化通知","link":"#序列化和反序列化通知","children":[]},{"level":3,"title":"转义问题","slug":"转义问题","link":"#转义问题","children":[]},{"level":3,"title":"反序列化读取溢出值","slug":"反序列化读取溢出值","link":"#反序列化读取溢出值","children":[]},{"level":3,"title":"序列化顺序","slug":"序列化顺序","link":"#序列化顺序","children":[]},{"level":3,"title":"JSON 和 Stream 互转","slug":"json-和-stream-互转","link":"#json-和-stream-互转","children":[]},{"level":3,"title":"扩展序列化","slug":"扩展序列化","link":"#扩展序列化","children":[]}]},{"level":2,"title":"自定义转换器","slug":"自定义转换器","link":"#自定义转换器","children":[]},{"level":2,"title":"注意","slug":"注意","link":"#注意","children":[{"level":3,"title":"无法序列化字段","slug":"无法序列化字段","link":"#无法序列化字段","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1714354044000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":9.08,"words":2724},"filePathRelative":"dotnet/base/serialize/json/system_text_json.md","localizedDate":"2023年9月5日","excerpt":"<h2>概述</h2>\\n<p>一个默认的高性能、低内存的处理Json的工具。</p>\\n<ul>\\n<li>将对象序列化为Json文本以及将Json文本反序列化为对象(支持UTF-8)</li>\\n<li>可以读取和写入编码为UTF-8的Json文本</li>\\n<li>创建内存中文档对象模型，以及访问元素的内容。</li>\\n</ul>\\n<h2>对象</h2>\\n<p>在 System.Text.Json 中，有几个重量级的对象，所有的JSON互操作，都是围绕这几个对象进行，只要理解了他们各自的用途用法，就基本上掌握了JSON和实体对象的互操作。\\n<strong>JsonDocument</strong>\\n提供用于检查 JSON 值的结构内容，而不自动实例化数据值的机制。JsonDocument 有一个属性 RootElement，提供对JSON文档根元素的访问，RootElement是一个JsonElement对象。\\n<strong>JsonElement</strong>\\n提供对JSON值的访问，在System.Text.Json 中，大到一个对象、数组，小到一个属性、值，都可以通过 JsonElement 进行互操作\\n<strong>JsonProperty</strong>\\nJSON中最小的单元，提供对属性、值的访问\\n<strong>JsonSerializer</strong>\\n提供JSON互操作的静态类，提供了一系列 Serializer/Deserialize 的互操作的方法，其中还有一些异步/流式操作方法。\\n<strong>JsonSerializerOptions</strong>\\n与上面的 JsonSerializer 配合使用，提供自定义的个性化互操作选项，包括命名、枚举转换、字符转义、注释规则、自定义转换器等等操作选项。\\n<strong>Utf8JsonWriter/Utf8JsonReader</strong>\\n这两个对象是整个 System.Text.Json 的核心对象，所有的JSON互操作几乎都是通过这两个对象进行，他们提供的高性能的底层读写操作。</p>","autoDesc":true}');export{D as comp,O as data};
