import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-BIR_P--4.js";const t="/kbms/dotnet/image-20240421221535572.png",l="/kbms/common/1669531947826-e0a4440d-3a42.png",h="/kbms/dotnet/image-20240421223806666.png",p="/kbms/common/1669532487711-64968ba4-12f3.png",r="/kbms/common/1631024347306-6cb8d6a8-0f4e-4422-9fcf-cefc50c57988.png",k="/kbms/common/1669534749945-a3c326b9-0c5e-476f-a677-d3ffa2822908.png",g="/kbms/dotnet/image-20240421225548372.png",d="/kbms/cloud/image-20240421224837038.png",o="/kbms/dotnet/image-20240421225902231.png",c="/kbms/cloud/1725717770052-da6f0d03-549e-4270-a74b-5eb18dde4140.png",b="/kbms/cloud/1725713703216-9af83f33-b7d4-4746-9088-626f32e8858f.png",m="/kbms/cloud/1725713918373-e0b04224-6584-4ecb-8394-8739f2cb9e8b.png",u="/kbms/common/1630853106274-e18c02ab-fb18-485e-8d50-16b05cff1f51.png",y="/kbms/cloud/image-20240908150552108.png",A="/kbms/common/1630853156788-69b4bfb8-dec8-436d-a9ff-78be35be0724.png",f="/kbms/common/1669540260122-0be4c35e-a786-4ad2-aa53-4592b3a8a740.png",F={};function v(C,i){return e(),a("div",null,i[0]||(i[0]=[n('<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。</p><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><p>Ubuntu服务器A：已经安装了docker，并使用docker部署了gitlab</p><p>服务器B：已经安装了docker</p><h2 id="gitlab检查" tabindex="-1"><a class="header-anchor" href="#gitlab检查"><span>Gitlab检查</span></a></h2><p>这里我们来检查一下Gitlab是否运行正常，这里我访问我服务器A地址：<a href="http://192.168.137.125:9006" target="_blank" rel="noopener noreferrer">http://192.168.137.125:9006</a></p><figure><img src="'+t+'" alt="image-20240421221535572" tabindex="0" loading="lazy"><figcaption>image-20240421221535572</figcaption></figure><p>登录然后创建一个项目，用于我们测试自动部署的流程</p><h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目"><span>创建项目</span></a></h3><p>直接开始创建项目</p><figure><img src="'+l+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>拉取项目并填充内容</p><figure><img src="'+h+'" alt="image-20240421223806666" tabindex="0" loading="lazy"><figcaption>image-20240421223806666</figcaption></figure><p>拷贝一个简单<a href="https://gitee.com/AZRNG/my-example/tree/9e720cad80eb1bb46816cdaa7b5f217692bfd256/" target="_blank" rel="noopener noreferrer">示例项目</a>提交到gitlab上</p><figure><img src="'+p+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="服务部署服务器" tabindex="-1"><a class="header-anchor" href="#服务部署服务器"><span>服务部署服务器</span></a></h2><h3 id="安装gitlab-runner" tabindex="-1"><a class="header-anchor" href="#安装gitlab-runner"><span>安装gitlab-runner</span></a></h3><p>在要部署服务的服务器上gitlab-runner，本次安装直接安装在服务器中，不使用docker安装gitlab-runner，避免产生Dind(docker in docker)问题。<a href="https://docs.gitlab.com/runner/install/linux-repository.html" target="_blank" rel="noopener noreferrer">官网安装资料</a></p><p>首先导入repository，这里我部署在Ubuntu，然后直接采用第一个链接即可</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对于 Debian/Ubuntu/Mint </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对于 RHEL/CentOS/Fedora</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image.png" loading="lazy"><br> 开始安装gitlab-runner</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对于 Debian/Ubuntu/Mint</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --user=root</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 以root用户安装</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 对于 RHEL/CentOS/Fedora</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="runner注册到gitlab" tabindex="-1"><a class="header-anchor" href="#runner注册到gitlab"><span>Runner注册到Gitlab</span></a></h3><h4 id="单独仓库设置runner" tabindex="-1"><a class="header-anchor" href="#单独仓库设置runner"><span>单独仓库设置Runner</span></a></h4><p>在我们要部署的仓库里面找到Runner配置信息(设置=&gt;CI/CD)</p><figure><img src="'+g+'" alt="image-20240421225548372" tabindex="0" loading="lazy"><figcaption>image-20240421225548372</figcaption></figure><p>输入命令进行注册</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> register</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+d+'" alt="image-20240421224837038" tabindex="0" loading="lazy"><figcaption>image-20240421224837038</figcaption></figure><ul><li>输入Gitlab地址</li><li>输入注册token</li><li>输入说明</li><li>输入tags</li><li>输入注意事项</li><li>输入执行者，这里我使用shell</li></ul><blockquote><p>执行者参考：<a href="https://docs.gitlab.com/runner/executors/index.html" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/runner/executors/index.html</a></p></blockquote><p>然后就可以在仓库的配置下可以看到我们注册的东西</p><figure><img src="'+o+'" alt="image-20240421225902231" tabindex="0" loading="lazy"><figcaption>image-20240421225902231</figcaption></figure><h4 id="注册群组runner" tabindex="-1"><a class="header-anchor" href="#注册群组runner"><span>注册群组Runner</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果需要注册群组的可以看这里，不想注册群组的Runner可以跳过</p></div><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>下面就有文档步骤了，按照文档操作</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在之前我们已经安装过Runner，所以这里直接拷贝文档上的命令去安装Runner的服务器上执行即可</p><figure><img src="'+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="runner命令" tabindex="-1"><a class="header-anchor" href="#runner命令"><span>Runner命令</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 此命令列出了保存在配置文件中的所有运行程序</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 检查注册的 runner 是否可以连接，但不验证 GitLab 服务是否正在使用 runner。--delete 删除</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> verify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 该命令使用 GitLab 取消已注册的 runner。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unregister</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用名称注销（同名删除第一个）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unregister</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test-runner</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 注销所有</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unregister</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --all-runners</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gitlab-runner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/gitlab-runner/config.toml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="配置帐号-可选" tabindex="-1"><a class="header-anchor" href="#配置帐号-可选"><span>配置帐号(可选)</span></a></h3><p>添加gitlab-runner用户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo adduser gitlab-runner</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将该用户添加到docker组中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo gpasswd -a gitlab-runner docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看docker组是否已经添加用户成功</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>cat /etc/group |grep docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>验证是否可以通过gitlab-runner访问docker</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo -u gitlab-runner -H docker info</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重启docker容器服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo systemctl restart docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>给docker.sock设置权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo chmod a+rw /var/run/docker.sock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="配置流水线" tabindex="-1"><a class="header-anchor" href="#配置流水线"><span>配置流水线</span></a></h2><h3 id="pipeline核心语法" tabindex="-1"><a class="header-anchor" href="#pipeline核心语法"><span>Pipeline核心语法</span></a></h3><p>再pipeline语法中，最主要的有三个部分，分别是stages阶段控制、variables环境变量、Job任务三部分。</p><h4 id="stages阶段控制" tabindex="-1"><a class="header-anchor" href="#stages阶段控制"><span>stages阶段控制</span></a></h4><p>再gitlab中，一共分为三个阶段，分别是开始时阶段、自定义阶段和结束时阶段三个阶段。</p><ul><li>.pre阶段的作业总是再流水线开始时执行；</li><li>.post阶段的作业总是在流水线结束时执行;</li><li>自定义阶段</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>CI/CD是gitlab提供的一套持续集成、持续交付的解决方案。每个项目中如需接入CI/CD，则需在项目根目录配置名为.gitlab-ci.yml的YML文件。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># .gitlab-ci.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">deploy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># start:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   stage: .pre</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   script:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - echo &quot;开始阶段&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   tags:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ls</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker-compose up -d --build</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dotnet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   stage: test</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   script:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - echo &quot;Test阶段&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   tags:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">deploy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">deploy</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker ps -a</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dotnet</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># end:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   stage: .post</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   script:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - echo &quot;结束阶段&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   tags:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     - build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>提交推送代码，然后在gitlab的CI/CD=&gt;Pipeliners查看</p><figure><img src="`+y+'" alt="image-20240908150552108" tabindex="0" loading="lazy"><figcaption>image-20240908150552108</figcaption></figure><p>查看详细信息</p><figure><img src="'+A+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>部署成功，进入该服务器查看容器信息</p><figure><img src="'+f+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过外部访问服务：<code>http://IP:8060/swagger/index.html</code> 成功显示swagger界面，部署成功。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p><a href="https://mp.weixin.qq.com/s/h3W7ltj4xl1tzDEia_xCag" target="_blank" rel="noopener noreferrer">GitLab 自带的 CI/CD 实现 .NET Core 应用程序的部署</a></p><p><a href="https://mp.weixin.qq.com/s/h3W7ltj4xl1tzDEia_xCag" target="_blank" rel="noopener noreferrer">gitlab+docker+gitlab-runner自动化部署.net core</a></p><p><a href="https://www.cnblogs.com/kzk520/articles/18377770" target="_blank" rel="noopener noreferrer">Gitlab-runner部署和使用详解 </a></p>',78)]))}const x=s(F,[["render",v]]),_=JSON.parse('{"path":"/cloud/ciAndCd/gitlab/sampleOperator.html","title":"简单操作","lang":"zh-CN","frontmatter":{"title":"简单操作","lang":"zh-CN","date":"2022-11-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"jianchanbushu","slug":"kt0nof","docsId":"52858788","description":"目的 我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。 环境准备 Ubuntu服务器A：已经安装了docker，并使用docker部署了gitlab 服务器B：已经安装了docker Gitlab检查 这里我们来检查一下Gitlab是否运行正常，这里我访问我服务器A地址：http://192.168.137....","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单操作\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240421221535572.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1669531947826-e0a4440d-3a42.png\\",\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240421223806666.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1669532487711-64968ba4-12f3.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631024347306-6cb8d6a8-0f4e-4422-9fcf-cefc50c57988.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1669534749945-a3c326b9-0c5e-476f-a677-d3ffa2822908.png\\",\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240421225548372.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20240421224837038.png\\",\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240421225902231.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/1725717770052-da6f0d03-549e-4270-a74b-5eb18dde4140.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/1725713703216-9af83f33-b7d4-4746-9088-626f32e8858f.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/1725713918373-e0b04224-6584-4ecb-8394-8739f2cb9e8b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1630853106274-e18c02ab-fb18-485e-8d50-16b05cff1f51.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20240908150552108.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1630853156788-69b4bfb8-dec8-436d-a9ff-78be35be0724.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1669540260122-0be4c35e-a786-4ad2-aa53-4592b3a8a740.png\\"],\\"datePublished\\":\\"2022-11-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T01:53:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/gitlab/sampleOperator.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"简单操作"}],["meta",{"property":"og:description","content":"目的 我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。 环境准备 Ubuntu服务器A：已经安装了docker，并使用docker部署了gitlab 服务器B：已经安装了docker Gitlab检查 这里我们来检查一下Gitlab是否运行正常，这里我访问我服务器A地址：http://192.168.137...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240421221535572.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T01:53:51.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-11-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T01:53:51.000Z"}]]},"git":{"createdTime":1695541854000,"updatedTime":1725846831000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":4},{"name":"zhangyunpeng","username":"","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.95,"words":1185},"filePathRelative":"cloud/ciAndCd/gitlab/sampleOperator.md","excerpt":"<h2>目的</h2>\\n<p>我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。</p>\\n<h2>环境准备</h2>\\n<p>Ubuntu服务器A：已经安装了docker，并使用docker部署了gitlab</p>\\n<p>服务器B：已经安装了docker</p>\\n<h2>Gitlab检查</h2>\\n<p>这里我们来检查一下Gitlab是否运行正常，这里我访问我服务器A地址：<a href=\\"http://192.168.137.125:9006\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://192.168.137.125:9006</a></p>","autoDesc":true}');export{x as comp,_ as data};
