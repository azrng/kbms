import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-vSdX8vi3.js";const e={},p=t(`<p>创建一个简单的函数</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $$
<span class="token keyword">DROP</span> <span class="token keyword">FUNCTION</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> genPerson$$
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> genPerson<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">DECLARE</span> str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">SET</span> <span class="token variable">@tableName</span><span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">SET</span> str<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;create table &#39;</span><span class="token punctuation">,</span> <span class="token variable">@tableName</span><span class="token punctuation">,</span><span class="token string">&#39;(id int, name varchar(20));&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token keyword">END</span> $$
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用函数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FunctionNoParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">AdoHelper</span> ado <span class="token operator">=</span> AdoHelper<span class="token punctuation">.</span><span class="token function">CreateHelper</span><span class="token punctuation">(</span>DbProvideType<span class="token punctuation">.</span>MySql<span class="token punctuation">)</span><span class="token punctuation">;</span>

            ado<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token string">&quot;CREATE FUNCTION fnTest() RETURNS CHAR(50)&quot;</span> <span class="token operator">+</span>
          <span class="token string">&quot; LANGUAGE SQL DETERMINISTIC BEGIN  RETURN \\&quot;Test\\&quot;; END&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> ado<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token string">&quot;SELECT fnTest()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>



<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CallingStoredFunctionasProcedure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">AdoHelper</span> ado <span class="token operator">=</span> AdoHelper<span class="token punctuation">.</span><span class="token function">CreateHelper</span><span class="token punctuation">(</span>DbProvideType<span class="token punctuation">.</span>MySql<span class="token punctuation">)</span><span class="token punctuation">;</span>

            ado<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token string">&quot;CREATE FUNCTION fnTest1(valin int) RETURNS INT &quot;</span> <span class="token operator">+</span>
          <span class="token string">&quot; LANGUAGE SQL DETERMINISTIC BEGIN return valin * 2; END&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">IDataParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> param1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IDataParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span>
                ado<span class="token punctuation">.</span><span class="token function">GetParameter</span><span class="token punctuation">(</span><span class="token string">&quot;?rt&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">,</span>
                ado<span class="token punctuation">.</span><span class="token function">GetParameter</span><span class="token punctuation">(</span><span class="token string">&quot;valin&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//Return 函数必须加？符号</span>
            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> ado<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">,</span> <span class="token string">&quot;fnTest1&quot;</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","hanshu.html.vue"]]),d=JSON.parse(`{"path":"/dataBase/mysql/jichuzhishi/hanshu.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","lang":"zh-CN","date":"2023-08-01T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"hanshu","slug":"fkon8v","docsId":"26499862","description":"创建一个简单的函数 调用函数","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/mysql/jichuzhishi/hanshu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"创建一个简单的函数 调用函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.55,"words":164},"filePathRelative":"dataBase/mysql/jichuzhishi/hanshu.md","localizedDate":"2023年8月1日","excerpt":"<p>创建一个简单的函数</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">DELIMITER</span> $$\\n<span class=\\"token keyword\\">DROP</span> <span class=\\"token keyword\\">FUNCTION</span> <span class=\\"token keyword\\">IF</span> <span class=\\"token keyword\\">EXISTS</span> genPerson$$\\n<span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">FUNCTION</span> genPerson<span class=\\"token punctuation\\">(</span>name <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">RETURNS</span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">BEGIN</span>\\n  <span class=\\"token keyword\\">DECLARE</span> str <span class=\\"token keyword\\">VARCHAR</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">SET</span> <span class=\\"token variable\\">@tableName</span><span class=\\"token operator\\">=</span>name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">SET</span> str<span class=\\"token operator\\">=</span>CONCAT<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'create table '</span><span class=\\"token punctuation\\">,</span> <span class=\\"token variable\\">@tableName</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'(id int, name varchar(20));'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> str<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">END</span> $$\\n<span class=\\"token keyword\\">DELIMITER</span> <span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
