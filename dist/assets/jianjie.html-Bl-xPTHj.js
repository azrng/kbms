import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as t,o as n}from"./app-pTjtTAfI.js";const l={};function r(s,e){return n(),i("div",null,e[0]||(e[0]=[t('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>首先它要具有队列的特性，再给它附加一个延迟消费队列消息的功能，也就是说可以指定队列中的消息在哪个时间点被消费。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>延迟队列在项目中的应用还是比较多的，尤其像电商类平台：</p><ol><li>订单成功后，在30分钟内没有支付，自动取消订单</li><li>外卖平台发送订餐通知，下单成功后60s给用户推送短信。</li><li>如果订单一直处于某一个未完结状态时，及时处理关单，并退还库存</li><li>淘宝新建商户一个月内还没上传商品信息，将冻结商铺等</li></ol><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案"><span>方案</span></a></h2><h3 id="redis过期监听" tabindex="-1"><a class="header-anchor" href="#redis过期监听"><span>Redis过期监听</span></a></h3><p>实现方式是：定时任务离线扫描并删除部分过期键；在访问键时惰性检查是否过期并删除过期键。</p><p>注意：<br> 不保证在设定的过期时间立即删除并发送通知，数据量大的时候会延迟，在数量达到3w的时候，有些会延迟到120s<br> 不保证一定送达<br> 发送即忘策略，不包含持久化</p><h3 id="rabbitmq死信" tabindex="-1"><a class="header-anchor" href="#rabbitmq死信"><span>RabbitMQ死信</span></a></h3><p>Rabbit 官方推出了延迟投递插件 rabbitmq-delayed-message-exchange ，推荐使用官方插件来做延时消息。</p><h3 id="时间轮" tabindex="-1"><a class="header-anchor" href="#时间轮"><span>时间轮</span></a></h3><p>时间轮是一种很优秀的定时任务的数据结构，然而绝大多数时间轮实现是纯内存没有持久化的。</p><h4 id="redisson-delayqueue" tabindex="-1"><a class="header-anchor" href="#redisson-delayqueue"><span>Redisson DelayQueue</span></a></h4><p>Redisson DelayQueue 是一种基于 Redis Zset 结构的延时队列实现。DelayQueue 中有一个名为 timeoutSetName 的有序集合，其中元素的 score 为投递时间戳。</p><p>DelayQueue 会定时使用 zrangebyscore 扫描已到投递时间的消息，然后把它们移动到就绪消息列表中。<br> DelayQueue 保证 Redis 不崩溃的情况下不会丢失消息，在没有更好的解决方案时不妨一试。<br> 在数据库索引设计良好的情况下，定时扫描数据库中未完成的订单产生的开销并没有想象中那么大。<br> 在使用 Redisson DelayQueue 等定时任务中间件时可以同时使用扫描数据库的方法作为补偿机制，避免中间件故障造成任务丢失。</p><h3 id="hangfire延迟任务" tabindex="-1"><a class="header-anchor" href="#hangfire延迟任务"><span>Hangfire延迟任务</span></a></h3><h3 id="计时管理器" tabindex="-1"><a class="header-anchor" href="#计时管理器"><span>计时管理器</span></a></h3>',18)]))}const h=a(l,[["render",r],["__file","jianjie.html.vue"]]),p=JSON.parse('{"path":"/middleware/yanchiduilie/jianjie.html","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","lang":"zh-CN","date":"2023-02-08T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"jianjie","slug":"wvkklg","docsId":"49682621","description":"介绍 首先它要具有队列的特性，再给它附加一个延迟消费队列消息的功能，也就是说可以指定队列中的消息在哪个时间点被消费。 使用场景 延迟队列在项目中的应用还是比较多的，尤其像电商类平台： 订单成功后，在30分钟内没有支付，自动取消订单 外卖平台发送订餐通知，下单成功后60s给用户推送短信。 如果订单一直处于某一个未完结状态时，及时处理关单，并退还库存 淘宝...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/yanchiduilie/jianjie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"介绍 首先它要具有队列的特性，再给它附加一个延迟消费队列消息的功能，也就是说可以指定队列中的消息在哪个时间点被消费。 使用场景 延迟队列在项目中的应用还是比较多的，尤其像电商类平台： 订单成功后，在30分钟内没有支付，自动取消订单 外卖平台发送订餐通知，下单成功后60s给用户推送短信。 如果订单一直处于某一个未完结状态时，及时处理关单，并退还库存 淘宝..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"方案","slug":"方案","link":"#方案","children":[{"level":3,"title":"Redis过期监听","slug":"redis过期监听","link":"#redis过期监听","children":[]},{"level":3,"title":"RabbitMQ死信","slug":"rabbitmq死信","link":"#rabbitmq死信","children":[]},{"level":3,"title":"时间轮","slug":"时间轮","link":"#时间轮","children":[{"level":4,"title":"Redisson DelayQueue","slug":"redisson-delayqueue","link":"#redisson-delayqueue","children":[]}]},{"level":3,"title":"Hangfire延迟任务","slug":"hangfire延迟任务","link":"#hangfire延迟任务","children":[]},{"level":3,"title":"计时管理器","slug":"计时管理器","link":"#计时管理器","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"middleware/yanchiduilie/jianjie.md","localizedDate":"2023年2月8日","excerpt":"<h2>介绍</h2>\\n<p>首先它要具有队列的特性，再给它附加一个延迟消费队列消息的功能，也就是说可以指定队列中的消息在哪个时间点被消费。</p>\\n<h2>使用场景</h2>\\n<p>延迟队列在项目中的应用还是比较多的，尤其像电商类平台：</p>\\n<ol>\\n<li>订单成功后，在30分钟内没有支付，自动取消订单</li>\\n<li>外卖平台发送订餐通知，下单成功后60s给用户推送短信。</li>\\n<li>如果订单一直处于某一个未完结状态时，及时处理关单，并退还库存</li>\\n<li>淘宝新建商户一个月内还没上传商品信息，将冻结商铺等</li>\\n</ol>\\n<h2>方案</h2>\\n<h3>Redis过期监听</h3>","autoDesc":true}');export{h as comp,p as data};
