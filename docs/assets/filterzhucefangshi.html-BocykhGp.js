import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-BguyEeV-.js";const e={},n=t(`<p>过滤器的注册方式有：Action、Controller、全局</p><h2 id="action注册方式" tabindex="-1"><a class="header-anchor" href="#action注册方式"><span>Action注册方式</span></a></h2><p>局部注册方式，针对控制器中的某个方法上标注特性的方式进行注册，代码如下</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AuthonizationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> IActionResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller注册方式" tabindex="-1"><a class="header-anchor" href="#controller注册方式"><span>Controller注册方式</span></a></h2><p>如果使用action方式，如果一个控制器中的好几个action方式都使用了这个过滤器，那么我们就需要一个一个action进行标注注册，所以我们直接使用控制器注册方式，必须是无参数的构造函数</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AuthonizationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> FirstController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ILogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FirstController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FirstController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ILogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FirstController</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">		_logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> logger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> IActionResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要传递参数，需要通过TyperFilter标记在方法和控制器 [TypeFilter(typeof(customerAttribute))]</p><h2 id="全局注册方式" tabindex="-1"><a class="header-anchor" href="#全局注册方式"><span>全局注册方式</span></a></h2><p>比如说我们需要全局系统中的异常或者收集操作日志等，需要全局注册一个Exception来实现，就不需要一个一个action或者控制器进行注册</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">AddMvc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 //options.Filters.Add(typeof(CustomerExceptionFilter));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	 options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Filters</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">CustomerExceptionFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	 options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Filters</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AuthorizeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">	 options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Filters</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AuthorizeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖注入两种方式" tabindex="-1"><a class="header-anchor" href="#依赖注入两种方式"><span>依赖注入两种方式</span></a></h2><h3 id="servicefilterattribute" tabindex="-1"><a class="header-anchor" href="#servicefilterattribute"><span>ServiceFilterAttribute</span></a></h3><p>将要用的ActionFilter本身注册为一个Service注册到DI容器中(必须)。通过ServiceFilter从容器中检索你的ActionFile，并且注入到需要的地方</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//步骤一</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">AddScoped</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">CustomResourceFilterAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//步骤二</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">在action上使用serviceFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ServiceFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FilterInjectAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ServiceFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FilterInjectAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">IsReusable</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServiceFilter有一个属性叫IsReusable。从字面意思也很好理解，就是是否可重用的意思。显而易见如果这个属性设置为True，那么多个请求就会复用这个ActionFilter,但是并不是真正的单例</p><blockquote><p>可以支持无参构造函数，可以支持依赖注入，但是必须注册服务</p></blockquote><h3 id="typefilterattribute" tabindex="-1"><a class="header-anchor" href="#typefilterattribute"><span>TypeFilterAttribute</span></a></h3><p>使用TypeFilterAttribute注入的ActionFilter并不从DI容器中查找，而是直接通过Microsoft.Extensions.DependencyInjection.ObjectFactory来实例化对象。所以我们的FilterInjectAttribute不需要提前注册到DI容器中。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TypeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">MyExceptionFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TypeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">MyExceptionFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">Arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] { </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;aa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;bb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> })]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Arguments参数是TypeFilterAttribute跟ServiceFilterAttribute的一个重要区别，ServiceFilterAttribute并没有这属性。Arguments类型为object数组。通过TypeFilterAttribute实例化的ActionFilter，如果它的构造器中的参数类型在DI容器中找不到，会继续在Arguments参数列表里按顺序获取。</p><blockquote><p>可以支持无参构造函数，可以支持依赖注入</p></blockquote><h2 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序"><span>执行顺序</span></a></h2><p>定义三个ActionFilter，分别注册全局，控制器，Action 执行顺序如下： 全局注册的ActionExecuting 控制器注册的ActionExecuting Action注册的ActionExecuting 执行Action内部逻辑计算 Action注册的ActionExecuted 控制器注册的ActionExecuted 全局注册的ActionExecuted</p>`,24),l=[n];function h(p,r){return a(),s("div",null,l)}const c=i(e,[["render",h],["__file","filterzhucefangshi.html.vue"]]),g=JSON.parse('{"path":"/dotnet/base/pipeline/filter/filterzhucefangshi.html","title":"过滤器注册方式","lang":"zh-CN","frontmatter":{"title":"过滤器注册方式","lang":"zh-CN","date":"2022-07-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guolvqizhucefangshi","slug":"xhn2ow","docsId":"31414090","description":"过滤器的注册方式有：Action、Controller、全局 Action注册方式 局部注册方式，针对控制器中的某个方法上标注特性的方式进行注册，代码如下 Controller注册方式 如果使用action方式，如果一个控制器中的好几个action方式都使用了这个过滤器，那么我们就需要一个一个action进行标注注册，所以我们直接使用控制器注册方式，必...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/filter/filterzhucefangshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"过滤器注册方式"}],["meta",{"property":"og:description","content":"过滤器的注册方式有：Action、Controller、全局 Action注册方式 局部注册方式，针对控制器中的某个方法上标注特性的方式进行注册，代码如下 Controller注册方式 如果使用action方式，如果一个控制器中的好几个action方式都使用了这个过滤器，那么我们就需要一个一个action进行标注注册，所以我们直接使用控制器注册方式，必..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过滤器注册方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"Action注册方式","slug":"action注册方式","link":"#action注册方式","children":[]},{"level":2,"title":"Controller注册方式","slug":"controller注册方式","link":"#controller注册方式","children":[]},{"level":2,"title":"全局注册方式","slug":"全局注册方式","link":"#全局注册方式","children":[]},{"level":2,"title":"依赖注入两种方式","slug":"依赖注入两种方式","link":"#依赖注入两种方式","children":[{"level":3,"title":"ServiceFilterAttribute","slug":"servicefilterattribute","link":"#servicefilterattribute","children":[]},{"level":3,"title":"TypeFilterAttribute","slug":"typefilterattribute","link":"#typefilterattribute","children":[]}]},{"level":2,"title":"执行顺序","slug":"执行顺序","link":"#执行顺序","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"dotnet/base/pipeline/filter/filterzhucefangshi.md","localizedDate":"2022年7月19日","excerpt":"<p>过滤器的注册方式有：Action、Controller、全局</p>\\n<h2>Action注册方式</h2>\\n<p>局部注册方式，针对控制器中的某个方法上标注特性的方式进行注册，代码如下</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">AuthonizationFilter</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">()]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> IActionResult</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> Index</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">\\treturn</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> View</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,g as data};
