import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as l}from"./app-qB9_Bjjp.js";const i={},u=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>DotNetty是一个高性能的基于.Net 平台开发的网络通信框架，其底层基于Netty框架，可以用于开发TCP、UDP、HTTP、WebSocket等应用程序。 DotNetty的主要特点包括： 高性能：采用了异步 I/O 模型和零拷贝技术，极大的提高了程序的性能。 易用性：提供丰富的API，用户可以方便的进行网络编程。 可扩展性：支持自定义解码器、编码器、处理器和协议。 支持多种协议：支持TCP、UDP、HTTP、WebSocket等协议。</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><p>DotNetty适用于高性能的网络编程场景，特别是需要高并发、低延迟的场景。以下是几个可能使用DotNetty的场景： 实时通信：如果您正在构建实时通信应用程序，例如聊天应用、实时协作平台等，DotNetty可以提供高性能、低延迟的基础设施，并支持自定义协议和消息格式。 游戏服务器：游戏服务器需要处理大量并发连接，而且需要快速响应玩家的操作。DotNetty可以提供高效的处理器和优化的消息传递，以保证游戏体验的流畅性和可扩展性。 IoT应用程序：IoT应用程序需要处理大量传感器和设备的数据，而且需要在较短的时间内对数据进行处理和分析。DotNetty可以提供高效的编解码器和处理器，以便更有效地处理传感器和设备数据。 大规模分布式系统：在大规模分布式系统中，节点之间需要进行高频的通信和数据传输。DotNetty可以提供高效的网络通信框架，以便更快地传输数据和执行操作。 举个例子，如果您正在构建一个远程存储系统，该系统需要处理大量同时连接和数据传输，那么DotNetty可能是一个很好的选择。通过使用DotNetty，您可以实现高性能、低延迟的数据传输，并可以自定义协议和消息格式来适应特定的应用场景。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>一个使用DotNetty实现Echo Server的示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">EchoServer</span>
<span class="token punctuation">{</span>
	<span class="token keyword">class</span> <span class="token class-name">Program</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultithreadEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultithreadEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">try</span>
			<span class="token punctuation">{</span>
				<span class="token class-name"><span class="token keyword">var</span></span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				bootstrap<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Channel</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TcpServerSocketChannel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">Option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SoBacklog<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token string">&quot;LISN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">ChildHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ActionChannelInitializer<span class="token punctuation">&lt;</span>ISocketChannel<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>channel <span class="token operator">=&gt;</span>
				<span class="token punctuation">{</span>
					<span class="token class-name"><span class="token keyword">var</span></span> pipeline <span class="token operator">=</span> channel<span class="token punctuation">.</span>Pipeline<span class="token punctuation">;</span>
					pipeline<span class="token punctuation">.</span><span class="token function">AddLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token string">&quot;CONN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					pipeline<span class="token punctuation">.</span><span class="token function">AddLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EchoServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name"><span class="token keyword">var</span></span> bindTask <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">BindAsync</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				bindTask<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Echo server started and listening on </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bindTask<span class="token punctuation">.</span>Result<span class="token punctuation">.</span>LocalAddress</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">finally</span>
			<span class="token punctuation">{</span>
				workerGroup<span class="token punctuation">.</span><span class="token function">ShutdownGracefullyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				bossGroup<span class="token punctuation">.</span><span class="token function">ShutdownGracefullyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">class</span> <span class="token class-name">EchoServerHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SimpleChannelInboundHandler<span class="token punctuation">&lt;</span>IByteBuffer<span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">{</span>
		<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChannelRead0</span><span class="token punctuation">(</span><span class="token class-name">IChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">IByteBuffer</span> msg<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Received message: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			ctx<span class="token punctuation">.</span><span class="token function">WriteAndFlushAsync</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">CopiedBuffer</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">IChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Exception caught: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			ctx<span class="token punctuation">.</span><span class="token function">CloseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,8),r={href:"https://www.51cto.com/article/758077.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("DotNetty一个高性能的基于.Net 平台开发的网络通信框架："),n("a",r,[s("https://www.51cto.com/article/758077.html"),c(a)])])])}const h=t(i,[["render",k],["__file","dotnetty.html.vue"]]),b=JSON.parse('{"path":"/dotnet/zhuomianchengxu/kaiyuanzujian/dotnetty.html","title":"DotNetty","lang":"zh-CN","frontmatter":{"title":"DotNetty","lang":"zh-CN","date":"2023-09-21T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dotnetty","slug":"yk95emobfcg9okm0","docsId":"125998527","description":"概述 DotNetty是一个高性能的基于.Net 平台开发的网络通信框架，其底层基于Netty框架，可以用于开发TCP、UDP、HTTP、WebSocket等应用程序。 DotNetty的主要特点包括： 高性能：采用了异步 I/O 模型和零拷贝技术，极大的提高了程序的性能。 易用性：提供丰富的API，用户可以方便的进行网络编程。 可扩展性：支持自定义解...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/zhuomianchengxu/kaiyuanzujian/dotnetty.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"DotNetty"}],["meta",{"property":"og:description","content":"概述 DotNetty是一个高性能的基于.Net 平台开发的网络通信框架，其底层基于Netty框架，可以用于开发TCP、UDP、HTTP、WebSocket等应用程序。 DotNetty的主要特点包括： 高性能：采用了异步 I/O 模型和零拷贝技术，极大的提高了程序的性能。 易用性：提供丰富的API，用户可以方便的进行网络编程。 可扩展性：支持自定义解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DotNetty\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"dotnet/zhuomianchengxu/kaiyuanzujian/dotnetty.md","localizedDate":"2023年9月21日","excerpt":"<h2>概述</h2>\\n<p>DotNetty是一个高性能的基于.Net 平台开发的网络通信框架，其底层基于Netty框架，可以用于开发TCP、UDP、HTTP、WebSocket等应用程序。\\nDotNetty的主要特点包括：\\n高性能：采用了异步 I/O 模型和零拷贝技术，极大的提高了程序的性能。\\n易用性：提供丰富的API，用户可以方便的进行网络编程。\\n可扩展性：支持自定义解码器、编码器、处理器和协议。\\n支持多种协议：支持TCP、UDP、HTTP、WebSocket等协议。</p>\\n<h3>适用场景</h3>\\n<p>DotNetty适用于高性能的网络编程场景，特别是需要高并发、低延迟的场景。以下是几个可能使用DotNetty的场景：\\n实时通信：如果您正在构建实时通信应用程序，例如聊天应用、实时协作平台等，DotNetty可以提供高性能、低延迟的基础设施，并支持自定义协议和消息格式。\\n游戏服务器：游戏服务器需要处理大量并发连接，而且需要快速响应玩家的操作。DotNetty可以提供高效的处理器和优化的消息传递，以保证游戏体验的流畅性和可扩展性。\\nIoT应用程序：IoT应用程序需要处理大量传感器和设备的数据，而且需要在较短的时间内对数据进行处理和分析。DotNetty可以提供高效的编解码器和处理器，以便更有效地处理传感器和设备数据。\\n大规模分布式系统：在大规模分布式系统中，节点之间需要进行高频的通信和数据传输。DotNetty可以提供高效的网络通信框架，以便更快地传输数据和执行操作。\\n举个例子，如果您正在构建一个远程存储系统，该系统需要处理大量同时连接和数据传输，那么DotNetty可能是一个很好的选择。通过使用DotNetty，您可以实现高性能、低延迟的数据传输，并可以自定义协议和消息格式来适应特定的应用场景。</p>","autoDesc":true}');export{h as comp,b as data};
