import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,e as s,f as t,d as e}from"./app-CBxp4zeL.js";const l={},u=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在大多数情况下，数据库由多个应用程序实例并发使用，每个实例对数据分别执行修改。 在同一时间修改相同的数据时，可能会出现不一致和数据损坏，例如，当两个客户端修改同一行中以某种方式关联的不同列时。 本文来讨论确保数据在发生此类并发更改时保持一致的机制。</p><p>EFCore不直接提供悲观锁。如果想使用悲观锁，需要开发人员自己编写原生SQL语句来使用悲观并发控制。</p><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>避免多个用户同时操作资源造成的并发冲突问题。举例：统计点击量</p><p>最好的解决方案：非数据库解决方案 数据库层面的两种策略：悲观、乐观。</p><p>悲观并发和乐观并发 1)悲观并发：比如有两个用户a,b,同时登陆一个系统操作一个文档，如果a先进去修改，系统就把该文档锁住，b就没办法打开了，只有等a修改完，完全退出之后b才能进入修改。 2)乐观开发:a,b两个用户同时登录，如果a先进去修改紧接着b也进入修改了，a修改文档的同时b也在修改，如果a保存之后b在保存他的修改，此时系统检测到数据库中的文档记录和b刚进入时候的不一致，b保存时候会抛出异常，修改失败。</p><h2 id="准备知识" tabindex="-1"><a class="header-anchor" href="#准备知识"><span>准备知识</span></a></h2><p>锁是和事务相关的，所以需要开启一个事务，并且需要在所有操作完成之后提交事务。</p><h2 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁"><span>悲观锁</span></a></h2><p>一般采用行锁、表锁等排他锁对资源局进行锁定，确保只有一个使用者操作被锁定的资源。 缺点：锁是独占、排他的，如果系统并发量很大的话，会严重影响性能(会等待锁释放)，如果使用不当的话，设置会导致死锁。</p><blockquote><p>需要开发人员编写原生SQL实现，并且每个数据库的操作方式还不一样。</p></blockquote><h3 id="pgsql原生操作" tabindex="-1"><a class="header-anchor" href="#pgsql原生操作"><span>pgsql原生操作</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TicketType<span class="token punctuation">&gt;</span></span> <span class="token function">GetWithLockAsync</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> context
        <span class="token punctuation">.</span>TicketTypes
        <span class="token punctuation">.</span><span class="token function">FromSql</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$@&quot;
            SELECT id, event_id, name, price, currency, quantity
            FROM ticketing.ticket_types
            WHERE id = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">
            FOR UPDATE NOWAIT&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// PostgreSQL: Lock or fail immediately</span>
        <span class="token punctuation">.</span><span class="token function">SingleAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>FOR UPDATE NOWAIT</code> ：这是PostgreSQL中悲观锁的核心。它告诉数据库“抓取这一行，为我锁定它，如果它已经锁定，现在就引发一个错误</li><li>错误处理：我们将 <code>GetWithLockAsync</code> 调用包装在 <code>try-catch</code> 块中，以优雅地处理锁定失败，重试或通知用户。</li></ul><p><code>NO WAIT</code> -如果无法锁定行而不是等待，则报告错误；<code>SKIP LOCKED</code> -跳过任何无法锁定的选定行；</p>`,16),r={href:"https://www.milanjovanovic.tech/blog/a-clever-way-to-implement-pessimistic-locking-in-ef-core?utm_source=newsletter&utm_medium=email&utm_campaign=tnw85",target:"_blank",rel:"noopener noreferrer"},k=e(`<h3 id="mysql原生操作" tabindex="-1"><a class="header-anchor" href="#mysql原生操作"><span>MySQL原生操作</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PessimismLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加测试数据</span>
    <span class="token comment">//var groupInfo = new Group(&quot;我是班级名称1&quot;);</span>
    <span class="token comment">//await db.Groups.AddAsync(groupInfo);</span>
    <span class="token comment">//await db.SaveChangesAsync();</span>

    <span class="token class-name"><span class="token keyword">var</span></span> guid <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;当前名称是&quot;</span> <span class="token operator">+</span> guid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> tran <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;准备select update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//通过表锁来实现一个人操作资源  当执行到这发现有其他人在访问，那么就会卡主等待行锁释放继续执行</span>
    <span class="token class-name"><span class="token keyword">var</span></span> groupInfo2 <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Groups<span class="token punctuation">.</span><span class="token function">FromSqlInterpolated</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;select  * from \`groups\` where id=6938925881452843009 for update&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;结束 select update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">&quot;我是班级名称1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">==</span> guid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;该班级已经属于你了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;该班级上个名称叫做 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">groupInfo2<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">=</span> guid<span class="token punctuation">;</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;恭喜你抢到了锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;保存成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> tran<span class="token punctuation">.</span><span class="token function">CommitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>Serializable</span></a></h3><p>使用<strong>Serializable</strong>事务的模式来进行实现类似悲观锁的操作</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>using var db = new OpenDbContext();
var tran = await db.Database.BeginTransactionAsync(IsolationLevel.Serializable);
var user = await db.Users.Where(t =&gt; t.Account == &quot;admin11&quot;).FirstOrDefaultAsync();
if (user is null)
    return;

user.Name = &quot;测试&quot;;
await db.SaveChangesAsync();
await tran.CommitAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁</span></a></h2><p>原理：使用了类似update employee set name=新值 where id=1 and name=老值，当更新的时候，如果数据库中name的值已经被其他操作者更新为其他值，那么where语句的值就会为false，因此和这个修改语句影响的行数就是0，EDCore就知道“发生并发冲突”； 因此SaveChanges()方法就会抛出DbUpdateConcurrencyException异常。</p><h3 id="并发令牌" tabindex="-1"><a class="header-anchor" href="#并发令牌"><span>并发令牌</span></a></h3><p>将不能被并发修改的属性设置为并发令牌</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//把被并发修改的属性使用IsConcurrencyToken设置为并发令牌</span>
builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsConcurrencyToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写乐观锁的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OptimismLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//需要在IEntityTypeConfiguration中配置builder.Property(t =&gt; t.Name).IsConcurrencyToken();</span>

    <span class="token class-name"><span class="token keyword">var</span></span> guid <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;将班级名称设置为：&quot;</span> <span class="token operator">+</span> guid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> groupInfo2 <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Groups<span class="token punctuation">.</span><span class="token function">SingleAsync</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">6938925881452843009</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">&quot;我是班级名称1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">==</span> guid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;该班级已经属于你了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;该班级上个名称叫做 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">groupInfo2<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">=</span> guid<span class="token punctuation">;</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/*
            执行SQL效果：会把并发令牌旧的值传入作为校验
            UPDATE \`groups\` SET \`name\` = @p0
            WHERE \`id\` = @p1 AND \`name\` = @p2;
            SELECT ROW_COUNT();
            */</span>
        <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;恭喜你抢到了锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;保存成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbUpdateConcurrencyException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//获取新值</span>
        <span class="token class-name"><span class="token keyword">var</span></span> entry <span class="token operator">=</span> ex<span class="token punctuation">.</span>Entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dbValues <span class="token operator">=</span> <span class="token keyword">await</span> entry<span class="token punctuation">.</span><span class="token function">GetDatabaseValuesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> newName <span class="token operator">=</span> dbValues<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Group<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;并发访问冲突，没有抢到锁,被</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newName</span><span class="token punctuation">}</span></span><span class="token string">提前设置了班级名称 结束&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者直接在属性上标记以下特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ConcurrencyCheck</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> UpdateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后查询出来更新该条数据的值的时候</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//乐观锁更新</span>
entity<span class="token punctuation">.</span>UpdateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToNowDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的sql如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>UPDATE meta_data<span class="token punctuation">.</span>meta_data_element <span class="token class-name">SET</span> update_time <span class="token operator">=</span> @p0 <span class="token class-name">WHERE</span> id <span class="token operator">=</span> @p1 AND update_time <span class="token class-name">IS</span> NULL<span class="token punctuation">;</span> <span class="token comment">// 这点update_time IS NULL是因为updatetime原来的值为null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rowversion" tabindex="-1"><a class="header-anchor" href="#rowversion"><span>RowVersion</span></a></h3><p>SqlServer数据库可以使用一个byte[]类型的属性做并发控制，然后使用使用IsRowVersion()把这个属性设置为RowVersion类型，这样子这属性对应的数据库列就会被设置为RowVersion类型(数据类型是timestamp)。每次插入或者更新的时候，数据库自动为这一行的rowversion类型的列生成新值。</p><p>MySQL中没有像SqlServer那样子的东西，所以我们可以模仿着乐观锁的原理，自己新增一列比如说guid类型或者雪花id类型，然后将该列设置为并发令牌，在每次添加或者修改的时候去生成新值，也能达到我们上面的效果。 增加RowVersion列</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 对应MySql数据库中的字段类型是longblob</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> RowVersion <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置模型约定</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//乐观锁：引入额外的列设置并发令牌</span>
builder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>RowVersion<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsConcurrencyToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，也是最重要的，我们自己需要在添加或者修改的时候赋新值，那么重写SaveChanges。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 重写SaveChanges(乐观锁引入新列使用)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//检查数据库更改</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ChangeTracker<span class="token punctuation">.</span><span class="token function">DetectChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//筛选新增/修改的实体对象</span>
    <span class="token class-name"><span class="token keyword">var</span></span> modifiedEntities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ChangeTracker
        <span class="token punctuation">.</span><span class="token function">Entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>State <span class="token operator">==</span> EntityState<span class="token punctuation">.</span>Modified <span class="token operator">||</span> x<span class="token punctuation">.</span>State <span class="token operator">==</span> EntityState<span class="token punctuation">.</span>Added<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Entity<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token keyword">in</span> modifiedEntities<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//存储一个新的Guid值</span>
        entity<span class="token punctuation">?.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;RowVersion&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">?.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写实现代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">RowVersionOptimismLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//需要在IEntityTypeConfiguration中配置builder.Property(t =&gt; t.RowVersion).IsConcurrencyToken();</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//添加测试数据</span>
    <span class="token comment">//var groupInfo = new Group(&quot;我是班级名称1&quot;);</span>
    <span class="token comment">//await db.Groups.AddAsync(groupInfo);</span>
    <span class="token comment">//await db.SaveChangesAsync();</span>

    <span class="token class-name"><span class="token keyword">var</span></span> guid <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;将班级名称设置为：&quot;</span> <span class="token operator">+</span> guid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> groupInfo2 <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Groups<span class="token punctuation">.</span><span class="token function">SingleAsync</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">6939017060314206209</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">&quot;我是班级名称1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">==</span> guid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;该班级已经属于你了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;该班级上个名称叫做 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">groupInfo2<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    groupInfo2<span class="token punctuation">.</span>Name <span class="token operator">=</span> guid<span class="token punctuation">;</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/*
            执行SQL效果：会把并发令牌旧的值传入作为校验
            UPDATE \`groups\` SET \`name\` = @p0, \`row_version\` = @p1
            WHERE \`id\` = @p2 AND \`row_version\` = @p3;
            SELECT ROW_COUNT();
            */</span>
        <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;恭喜你抢到了锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;保存成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbUpdateConcurrencyException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//获取新值</span>
        <span class="token class-name"><span class="token keyword">var</span></span> entry <span class="token operator">=</span> ex<span class="token punctuation">.</span>Entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dbValues <span class="token operator">=</span> <span class="token keyword">await</span> entry<span class="token punctuation">.</span><span class="token function">GetDatabaseValuesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> newName <span class="token operator">=</span> dbValues<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Group<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;并发访问冲突，没有抢到锁,被</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newName</span><span class="token punctuation">}</span></span><span class="token string">提前设置了班级名称 结束&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>乐观并发控制能够避免悲观锁带来的性能、死锁等问题，因此更推荐。 如果有一个确定的字段要被并发控制，那么直接将该字段设置为并发令牌即可。 如果无法确定要一个唯一的并发令牌列，那么就引入一个额外的属性设置为并发令牌，并且在每次更新数据的时候，手动更新这一列的值(有的数据库提供了RowVersion列，那么就不用我们额外手动处理了)。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,31),d={href:"https://learn.microsoft.com/zh-cn/ef/core/saving/concurrency?tabs=data-annotations",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"isconcurrencytoken vs isrowversion：https://www.cnblogs.com/qianxingmu/p/13376164.html",-1),v={href:"https://docs.microsoft.com/zh-cn/ef/core/modeling/concurrency?tabs=data-annotations",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"在EFCore中使用乐观并发：https://www.cnblogs.com/JackyGz/p/17935350.html",-1);function g(y,h){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("参考资料："),n("a",r,[s("一种在EFCore中实现悲观锁的巧妙方法"),t(a)])]),k,n("p",null,[n("a",d,[s("官网处理并发文档"),t(a)])]),m,n("p",null,[s("杨老师教程 官网："),n("a",v,[s("https://docs.microsoft.com/zh-cn/ef/core/modeling/concurrency?tabs=data-annotations"),t(a)])]),b])}const q=p(l,[["render",g],["__file","efcoreConcurrency.html.vue"]]),C=JSON.parse('{"path":"/orm/efcore/jinjie/efcoreConcurrency.html","title":"EFCore并发处理","lang":"zh-CN","frontmatter":{"title":"EFCore并发处理","lang":"zh-CN","date":"2023-09-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["锁","efcore"],"filename":"efcoreConcurrency","docsId":"c7c29acc-ab67-4a43-9d8b-4b6484de196d","description":"概述 在大多数情况下，数据库由多个应用程序实例并发使用，每个实例对数据分别执行修改。 在同一时间修改相同的数据时，可能会出现不一致和数据损坏，例如，当两个客户端修改同一行中以某种方式关联的不同列时。 本文来讨论确保数据在发生此类并发更改时保持一致的机制。 EFCore不直接提供悲观锁。如果想使用悲观锁，需要开发人员自己编写原生SQL语句来使用悲观并发控...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jinjie/efcoreConcurrency.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"EFCore并发处理"}],["meta",{"property":"og:description","content":"概述 在大多数情况下，数据库由多个应用程序实例并发使用，每个实例对数据分别执行修改。 在同一时间修改相同的数据时，可能会出现不一致和数据损坏，例如，当两个客户端修改同一行中以某种方式关联的不同列时。 本文来讨论确保数据在发生此类并发更改时保持一致的机制。 EFCore不直接提供悲观锁。如果想使用悲观锁，需要开发人员自己编写原生SQL语句来使用悲观并发控..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T07:56:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"锁"}],["meta",{"property":"article:tag","content":"efcore"}],["meta",{"property":"article:published_time","content":"2023-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-16T07:56:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EFCore并发处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-16T07:56:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"准备知识","slug":"准备知识","link":"#准备知识","children":[]},{"level":2,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[{"level":3,"title":"pgsql原生操作","slug":"pgsql原生操作","link":"#pgsql原生操作","children":[]},{"level":3,"title":"MySQL原生操作","slug":"mysql原生操作","link":"#mysql原生操作","children":[]},{"level":3,"title":"Serializable","slug":"serializable","link":"#serializable","children":[]}]},{"level":2,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[{"level":3,"title":"并发令牌","slug":"并发令牌","link":"#并发令牌","children":[]},{"level":3,"title":"RowVersion","slug":"rowversion","link":"#rowversion","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1693671207000,"updatedTime":1713254198000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2215},"filePathRelative":"orm/efcore/jinjie/efcoreConcurrency.md","localizedDate":"2023年9月2日","excerpt":"<h2>概述</h2>\\n<p>在大多数情况下，数据库由多个应用程序实例并发使用，每个实例对数据分别执行修改。 在同一时间修改相同的数据时，可能会出现不一致和数据损坏，例如，当两个客户端修改同一行中以某种方式关联的不同列时。 本文来讨论确保数据在发生此类并发更改时保持一致的机制。</p>\\n<p>EFCore不直接提供悲观锁。如果想使用悲观锁，需要开发人员自己编写原生SQL语句来使用悲观并发控制。</p>\\n<h2>目的</h2>\\n<p>避免多个用户同时操作资源造成的并发冲突问题。举例：统计点击量</p>\\n<p>最好的解决方案：非数据库解决方案\\n数据库层面的两种策略：悲观、乐观。</p>\\n<p>悲观并发和乐观并发\\n1)悲观并发：比如有两个用户a,b,同时登陆一个系统操作一个文档，如果a先进去修改，系统就把该文档锁住，b就没办法打开了，只有等a修改完，完全退出之后b才能进入修改。\\n2)乐观开发:a,b两个用户同时登录，如果a先进去修改紧接着b也进入修改了，a修改文档的同时b也在修改，如果a保存之后b在保存他的修改，此时系统检测到数据库中的文档记录和b刚进入时候的不一致，b保存时候会抛出异常，修改失败。</p>","autoDesc":true}');export{q as comp,C as data};
