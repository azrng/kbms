import{_ as n}from"./1611106025062-d5831aff-0228-44e2-9aed-c3b235645694-Cy4xoVtT.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-qB9_Bjjp.js";const i="/kbms/common/1611106307255-ac3999ac-60b4-4f11-b263-93a4c52d6c37.png",o={},l=t(`<blockquote><p>该方法部署的jenkins包含netcore环境，并且包含如何部署netcore</p></blockquote><h3 id="_1-更新系统" tabindex="-1"><a class="header-anchor" href="#_1-更新系统"><span>1. 更新系统</span></a></h3><blockquote><p>yum update</p></blockquote><h3 id="_2-安装docker" tabindex="-1"><a class="header-anchor" href="#_2-安装docker"><span>2. 安装docker</span></a></h3><p>这里就不安装了</p><h3 id="_3-安装jenkins" tabindex="-1"><a class="header-anchor" href="#_3-安装jenkins"><span>3. 安装jenkins</span></a></h3><h4 id="_3-1-检索jenkins镜像" tabindex="-1"><a class="header-anchor" href="#_3-1-检索jenkins镜像"><span>3.1 检索jenkins镜像</span></a></h4><blockquote><p>docker search jenkins</p></blockquote><h4 id="_3-2制作包含dotnet环境的jenkins的docker的容器" tabindex="-1"><a class="header-anchor" href="#_3-2制作包含dotnet环境的jenkins的docker的容器"><span>3.2制作包含dotnet环境的jenkins的docker的容器</span></a></h4><p>创建dockerfile</p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> jenkins/jenkins</span>

<span class="token comment">## Switch to root to install .NET Core SDK</span>
<span class="token instruction"><span class="token keyword">USER</span> root</span>

<span class="token comment">## Show distro information!</span>
<span class="token instruction"><span class="token keyword">RUN</span> uname -a &amp;&amp; cat /etc/*release</span>

<span class="token comment">## Based on instructiions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span>
<span class="token comment">## Install dependency for .NET Core 3</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y curl libunwind8 gettext apt-transport-https</span>

<span class="token comment">## Based on instructions at https://www.microsoft.com/net/download/linux-package-manager/debian9/sdk-current</span>
<span class="token comment">## Install microsoft.qpg</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span>
<span class="token instruction"><span class="token keyword">RUN</span> mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</span>
<span class="token instruction"><span class="token keyword">RUN</span> sh -c <span class="token string">&#39;echo &quot;deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main&quot; &gt; /etc/apt/sources.list.d/dotnetdev.list&#39;</span></span>

<span class="token comment">## Install the .NET Core framework</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y dotnet-sdk-3.1</span>

<span class="token comment">## Switch back to the jenkins user.</span>
<span class="token instruction"><span class="token keyword">USER</span> jenkins</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这个Dockerfile来构建一个新的镜像</p><blockquote><p>docker build -t my-docker-jenk .</p></blockquote><h4 id="_3-3-生成容器示例" tabindex="-1"><a class="header-anchor" href="#_3-3-生成容器示例"><span>3.3 生成容器示例</span></a></h4><h5 id="_3-3-1-创建jenkins的工作目录" tabindex="-1"><a class="header-anchor" href="#_3-3-1-创建jenkins的工作目录"><span>3.3.1 创建jenkins的工作目录</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//创建工作目录 </span>
mkdir <span class="token operator">/</span>home<span class="token operator">/</span>jenkins_home

<span class="token comment">//赋予权限 </span>
chown <span class="token operator">-</span>R <span class="token number">1000</span> <span class="token operator">/</span>home<span class="token operator">/</span>jenkins_home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-2-生成容器" tabindex="-1"><a class="header-anchor" href="#_3-3-2-生成容器"><span>3.3.2 生成容器</span></a></h5><blockquote><p>docker run -d --name jenkins_01 -p 80:8080 -v /home/jenkins_01:/home/jenkins_01 my-docker-jenk</p></blockquote><p>Jenkins默认的开放容器端口是8080和50000，但是你可以自定义宿主机的监听端口，比如我 这里就直接80端口了。</p><h3 id="_4-访问jenkins网站" tabindex="-1"><a class="header-anchor" href="#_4-访问jenkins网站"><span>4. 访问jenkins网站</span></a></h3><figure><img src="`+n+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="_4-1-寻找超级管理员密码" tabindex="-1"><a class="header-anchor" href="#_4-1-寻找超级管理员密码"><span>4.1 寻找超级管理员密码</span></a></h4><p>进入容器，然后去容器的执行目录下查找管理员的密码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 进入容器 </span>
docker exec <span class="token operator">-</span>it 容器ID bash 
<span class="token comment">// 查看密码 </span>
cat <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>jenkins_home<span class="token operator">/</span>secrets<span class="token operator">/</span>initialAdminPassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入找到的管理员密码然后进入系统</p><h4 id="_4-2-进入jenkins" tabindex="-1"><a class="header-anchor" href="#_4-2-进入jenkins"><span>4.2 进入jenkins</span></a></h4><p>新手入门，选择安装插件的方式，这里我们直接选择安装推荐的插件然后进入系统 注意：安装插件报错的话继续在执行一遍。</p><h4 id="_4-3-设置管理员用户密码" tabindex="-1"><a class="header-anchor" href="#_4-3-设置管理员用户密码"><span>4.3 设置管理员用户密码</span></a></h4><p>创建管理员用户密码</p><h4 id="_4-4-系统界面" tabindex="-1"><a class="header-anchor" href="#_4-4-系统界面"><span>4.4 系统界面</span></a></h4><p>如果系统管理里面有错误，那么我们可以手动安装和修改。</p><h3 id="_5-部署net程序" tabindex="-1"><a class="header-anchor" href="#_5-部署net程序"><span>5. 部署net程序</span></a></h3><h4 id="_5-1-创建任务" tabindex="-1"><a class="header-anchor" href="#_5-1-创建任务"><span>5.1 创建任务</span></a></h4><h5 id="_5-1-1-选择自由风格的软件项目" tabindex="-1"><a class="header-anchor" href="#_5-1-1-选择自由风格的软件项目"><span>5.1.1 选择自由风格的软件项目</span></a></h5><figure><img src="`+i+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h5 id="_5-1-2-添加源代码管理" tabindex="-1"><a class="header-anchor" href="#_5-1-2-添加源代码管理"><span>5.1.2 添加源代码管理</span></a></h5><p>在源码管理里面勾兑Git，然后输入仓库地址，添加你仓库对应的用户名和密码并且执行分支</p><h5 id="_5-1-3-构建命令" tabindex="-1"><a class="header-anchor" href="#_5-1-3-构建命令"><span>5.1.3 构建命令</span></a></h5><p>选择执行shell脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dotnet restore
dotnet build
dotnet publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存，选择立即构建。 构建历史的构建状态变为蓝色，则代表构建成功；红色代表构建失败。</p><h3 id="_6-错误" tabindex="-1"><a class="header-anchor" href="#_6-错误"><span>6. 错误</span></a></h3><p>如果出现错误，那么就需要去查看控制台输出，根据错误找原因。</p>`,43),c=[l];function r(d,p){return s(),a("div",null,c)}const u=e(o,[["render",r],["__file","dockerInstallContainsDotNet.html.vue"]]),g=JSON.parse('{"path":"/cloud/ciAndCd/jenkins/install/dockerInstallContainsDotNet.html","title":"docker部署包含net环境jenkins","lang":"zh-CN","frontmatter":{"title":"docker部署包含net环境jenkins","lang":"zh-CN","date":"2022-08-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"dockerInstallContainsDotNet","slug":"ri6zt6","docsId":"30400490","description":"该方法部署的jenkins包含netcore环境，并且包含如何部署netcore 1. 更新系统 yum update 2. 安装docker 这里就不安装了 3. 安装jenkins 3.1 检索jenkins镜像 docker search jenkins 3.2制作包含dotnet环境的jenkins的docker的容器 创建dockerfile...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/jenkins/install/dockerInstallContainsDotNet.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"docker部署包含net环境jenkins"}],["meta",{"property":"og:description","content":"该方法部署的jenkins包含netcore环境，并且包含如何部署netcore 1. 更新系统 yum update 2. 安装docker 这里就不安装了 3. 安装jenkins 3.1 检索jenkins镜像 docker search jenkins 3.2制作包含dotnet环境的jenkins的docker的容器 创建dockerfile..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1611106025062-d5831aff-0228-44e2-9aed-c3b235645694.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T08:50:00.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T08:50:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker部署包含net环境jenkins\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1611106025062-d5831aff-0228-44e2-9aed-c3b235645694.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1611106307255-ac3999ac-60b4-4f11-b263-93a4c52d6c37.png\\"],\\"datePublished\\":\\"2022-08-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T08:50:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"1. 更新系统","slug":"_1-更新系统","link":"#_1-更新系统","children":[]},{"level":3,"title":"2. 安装docker","slug":"_2-安装docker","link":"#_2-安装docker","children":[]},{"level":3,"title":"3. 安装jenkins","slug":"_3-安装jenkins","link":"#_3-安装jenkins","children":[{"level":4,"title":"3.1 检索jenkins镜像","slug":"_3-1-检索jenkins镜像","link":"#_3-1-检索jenkins镜像","children":[]},{"level":4,"title":"3.2制作包含dotnet环境的jenkins的docker的容器","slug":"_3-2制作包含dotnet环境的jenkins的docker的容器","link":"#_3-2制作包含dotnet环境的jenkins的docker的容器","children":[]},{"level":4,"title":"3.3 生成容器示例","slug":"_3-3-生成容器示例","link":"#_3-3-生成容器示例","children":[{"level":5,"title":"3.3.1 创建jenkins的工作目录","slug":"_3-3-1-创建jenkins的工作目录","link":"#_3-3-1-创建jenkins的工作目录","children":[]},{"level":5,"title":"3.3.2 生成容器","slug":"_3-3-2-生成容器","link":"#_3-3-2-生成容器","children":[]}]}]},{"level":3,"title":"4. 访问jenkins网站","slug":"_4-访问jenkins网站","link":"#_4-访问jenkins网站","children":[{"level":4,"title":"4.1 寻找超级管理员密码","slug":"_4-1-寻找超级管理员密码","link":"#_4-1-寻找超级管理员密码","children":[]},{"level":4,"title":"4.2 进入jenkins","slug":"_4-2-进入jenkins","link":"#_4-2-进入jenkins","children":[]},{"level":4,"title":"4.3 设置管理员用户密码","slug":"_4-3-设置管理员用户密码","link":"#_4-3-设置管理员用户密码","children":[]},{"level":4,"title":"4.4 系统界面","slug":"_4-4-系统界面","link":"#_4-4-系统界面","children":[]}]},{"level":3,"title":"5. 部署net程序","slug":"_5-部署net程序","link":"#_5-部署net程序","children":[{"level":4,"title":"5.1 创建任务","slug":"_5-1-创建任务","link":"#_5-1-创建任务","children":[{"level":5,"title":"5.1.1 选择自由风格的软件项目","slug":"_5-1-1-选择自由风格的软件项目","link":"#_5-1-1-选择自由风格的软件项目","children":[]},{"level":5,"title":"5.1.2 添加源代码管理","slug":"_5-1-2-添加源代码管理","link":"#_5-1-2-添加源代码管理","children":[]},{"level":5,"title":"5.1.3 构建命令","slug":"_5-1-3-构建命令","link":"#_5-1-3-构建命令","children":[]}]}]},{"level":3,"title":"6. 错误","slug":"_6-错误","link":"#_6-错误","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1695545400000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.26,"words":679},"filePathRelative":"cloud/ciAndCd/jenkins/install/dockerInstallContainsDotNet.md","localizedDate":"2022年8月17日","excerpt":"<blockquote>\\n<p>该方法部署的jenkins包含netcore环境，并且包含如何部署netcore</p>\\n</blockquote>\\n<h3>1. 更新系统</h3>\\n<blockquote>\\n<p>yum update</p>\\n</blockquote>\\n<h3>2. 安装docker</h3>\\n<p>这里就不安装了</p>\\n<h3>3. 安装jenkins</h3>\\n<h4>3.1 检索jenkins镜像</h4>\\n<blockquote>\\n<p>docker search jenkins</p>\\n</blockquote>\\n<h4>3.2制作包含dotnet环境的jenkins的docker的容器</h4>","autoDesc":true}');export{u as comp,g as data};
