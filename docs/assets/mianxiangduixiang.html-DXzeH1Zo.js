import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-CBxp4zeL.js";const t={},p=e(`<h2 id="面向对象-oop" tabindex="-1"><a class="header-anchor" href="#面向对象-oop"><span>面向对象(OOP)</span></a></h2><p>面向对象是现在最主流编程风格，英文缩写是OOP。 三大特性：封装、继承、多态。 面向对象编程是一种编程范式或者编程风格，它以类或者对象作为组织代码的基本单元，并且将封装、继承、多态三个特性作为代码设计和实现的基石。 面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便第实现面向对象三大特性的编程语言。</p><p>相比较面向过程编程的优点：</p><ul><li>更能应对大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。</li><li>具有丰富的特性(封装继承多态)，可以帮助我们编写出来更易扩展、易复用、易维护的代码</li><li>从编程语言跟机器打交道方式的演进规律中，可以总结出来：面向对象编程语言比面向过程编程语言，更加人性化、更加高级、更加智能。</li></ul><h3 id="面向过程-pop" tabindex="-1"><a class="header-anchor" href="#面向过程-pop"><span>面向过程(POP)</span></a></h3><p>面向过程编程也是一种编程范式或者编程风格，以过程(可以理解方法、函数、操作)作为组织代码的基本单元，以数据(可以理解为成员变量、属性)与方法相分离为最主要的特点。 面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法来操作数据完成一项功能。</p><p>相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><p>比如我们要讲一个文本文件内容进行解析格式化，文本文件存储的是“张三&amp;15岁&amp;河南”，然后想格式化为“姓名：张三 年级：15岁 地址：河南”。 面向过程编程：我们会将该文件读取然后通过一些方法转成结构体，然后通过结构体去格式化成合适的结构。 面过对象编程：我们将该文件通过一些方法转成类，里面的姓名等信息是属性，然后格式化成合适的结构。</p><ul><li>POP面向过程编程：以过程为中心的编程思想，思考方式从实际出发</li><li>OOP面向对象编程：相比较上面的流程比较清楚。编写前先考虑如何将需求翻译为类，如何给类之间建立交互关系，而完成这些工作完全不需要考虑错综复杂的处理流程。 <ul><li>不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。</li></ul></li></ul><p>AOP面向切面编程：在不修改原始类的情况下给程序动态增加统一功能的一种技术，是对OOP的一种补充，解决共性问题(同一个功能多次使用)和扩展问题(后台项目改造，扩展需求) 优势：1.将通用功能从业务逻辑中抽离出来，提供代码重用性，有利于后期的维护和扩展。 2.软件设计时候，抽离出通用的功能(切面)，有利于软件设计的模块化，降低软件架构的复杂度。 缺点：是对OOP思想的补充，无法单独存在，首先POP来梳理整个业务流程，根据流程OOP去整理类和模块。</p><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>封装也叫做信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式来访问内部信息或者数据。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>新建UserInfo，然后对属性进行限制。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Id <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
        UpdateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> UpdateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        UpdateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上面这个类进行封装，Name只允许通过方法进行设置值，而不能通过属性直接进行设置。</p><h3 id="解决的问题" tabindex="-1"><a class="header-anchor" href="#解决的问题"><span>解决的问题</span></a></h3><p>通过有限的方法暴露必要的操作，不开放过多的功能给调用者，反而徒增负担。</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p>在c#中类只能单继承，接口可以多继承。 需要注意的是，继承层次不应该过深过复杂，这样子就会导致代码可读性、可维护性变差。</p><h3 id="解决的问题-1" tabindex="-1"><a class="header-anchor" href="#解决的问题-1"><span>解决的问题</span></a></h3><p>继承最大的一个好处就是代码复用，将个类中相同的属性和方法抽取到父类中，让两个子类继承父类，这样子两个子类就可以重用父类中的代码，避免代码重复写多遍。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p>继承层次过深、继承关系过于复杂就会影响到代码的可读性和可维护性。 示例：首先定义一个鸟的基类，然后会不会飞、会不会下蛋、会不会叫等层级扩展开来不好维护。</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1. 介绍</span></a></h3><p>一个事物拥有不同形式的能力，子类可以替代父类。</p><blockquote><p>一句话描述多态：通过继承实现不同对象调用相同的方法，表现出不同的行为，称之为多态。</p></blockquote><h3 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念"><span>2. 概念</span></a></h3><h4 id="_2-1-重载" tabindex="-1"><a class="header-anchor" href="#_2-1-重载"><span>2.1 重载</span></a></h4><p>在同一个作用域(一般指一个类)的两个或多个方法函数名相同，参数列表不同的方法叫做重载。它们有三个特点(俗称两必须一可以)</p><ul><li>方法名必须相同</li><li>参数列表必须不相同</li><li>返回值类型可以不相同</li></ul><h4 id="_2-2-重写" tabindex="-1"><a class="header-anchor" href="#_2-2-重写"><span>2.2 重写</span></a></h4><p>子类为了满足自己的需要来重复定义某个方法的不同实现，需要用override关键字，被重写的方法必须是虚方法，用的是virtual关键字，他们的特点是(三个相同)</p><ul><li>相同的方法名</li><li>相同的参数列表</li><li>相同的返回值</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//父类中的定义：</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EatFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Animal吃东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//子类中的定义</span>
<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EatFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Cat吃东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//base.EatFood();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-虚方法" tabindex="-1"><a class="header-anchor" href="#_2-3-虚方法"><span>2.3 虚方法</span></a></h4><p>基类中定义的允许在派生类中重写的方法，使用virtual关键字定义</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EatFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Animal吃东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-抽象方法" tabindex="-1"><a class="header-anchor" href="#_2-4-抽象方法"><span>2.4 抽象方法</span></a></h4><p>在基类中定义的必须在派生类中重写的方法，使用abstract关键字定义。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Biology</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Live</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Biology</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Live</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Animal重写的抽象方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//throw new NotImplementedException();</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>抽象方法只能在抽象类中定义，如果不在抽象类中定义，则报错。</p></blockquote><h4 id="_2-5-隐藏方法" tabindex="-1"><a class="header-anchor" href="#_2-5-隐藏方法"><span>2.5 隐藏方法</span></a></h4><p>在派生类中定义和基类中某个方法同名的方法，使用new关键字定义。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//在基类animal中有一个方法sleep</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Animal Sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//派生类cat中定义隐藏方法的代码</span>
<span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Cat Sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>隐藏方法不但可以隐藏基类中的虚方法，而且也可以隐藏基类中的非虚方法。</li><li>隐藏方法中父类的实例调用父类的方法，子类的实例调用子类的方法。</li></ul><h3 id="解决的问题-2" tabindex="-1"><a class="header-anchor" href="#解决的问题-2"><span>解决的问题</span></a></h3><p>多态特性能提高代码的可扩展性和复用性。</p>`,53),l=[p];function i(c,o){return s(),a("div",null,l)}const d=n(t,[["render",i],["__file","mianxiangduixiang.html.vue"]]),k=JSON.parse('{"path":"/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiang.html","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2022-06-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"mianxiangduixiang","slug":"kaaq7n","docsId":"31921833","description":"面向对象(OOP) 面向对象是现在最主流编程风格，英文缩写是OOP。 三大特性：封装、继承、多态。 面向对象编程是一种编程范式或者编程风格，它以类或者对象作为组织代码的基本单元，并且将封装、继承、多态三个特性作为代码设计和实现的基石。 面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便第实现面向对象三大特性的编程语言。 相比较面向过程...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiang.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"面向对象(OOP) 面向对象是现在最主流编程风格，英文缩写是OOP。 三大特性：封装、继承、多态。 面向对象编程是一种编程范式或者编程风格，它以类或者对象作为组织代码的基本单元，并且将封装、继承、多态三个特性作为代码设计和实现的基石。 面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便第实现面向对象三大特性的编程语言。 相比较面向过程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"面向对象(OOP)","slug":"面向对象-oop","link":"#面向对象-oop","children":[{"level":3,"title":"面向过程(POP)","slug":"面向过程-pop","link":"#面向过程-pop","children":[]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}]},{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"解决的问题","slug":"解决的问题","link":"#解决的问题","children":[]}]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"解决的问题","slug":"解决的问题-1","link":"#解决的问题-1","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"1. 介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2. 概念","slug":"_2-概念","link":"#_2-概念","children":[{"level":4,"title":"2.1 重载","slug":"_2-1-重载","link":"#_2-1-重载","children":[]},{"level":4,"title":"2.2 重写","slug":"_2-2-重写","link":"#_2-2-重写","children":[]},{"level":4,"title":"2.3 虚方法","slug":"_2-3-虚方法","link":"#_2-3-虚方法","children":[]},{"level":4,"title":"2.4 抽象方法","slug":"_2-4-抽象方法","link":"#_2-4-抽象方法","children":[]},{"level":4,"title":"2.5 隐藏方法","slug":"_2-5-隐藏方法","link":"#_2-5-隐藏方法","children":[]}]},{"level":3,"title":"解决的问题","slug":"解决的问题-2","link":"#解决的问题-2","children":[]}]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":6.29,"words":1888},"filePathRelative":"softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiang.md","localizedDate":"2022年6月26日","excerpt":"<h2>面向对象(OOP)</h2>\\n<p>面向对象是现在最主流编程风格，英文缩写是OOP。\\n三大特性：封装、继承、多态。\\n面向对象编程是一种编程范式或者编程风格，它以类或者对象作为组织代码的基本单元，并且将封装、继承、多态三个特性作为代码设计和实现的基石。\\n面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便第实现面向对象三大特性的编程语言。</p>\\n<p>相比较面向过程编程的优点：</p>\\n<ul>\\n<li>更能应对大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。</li>\\n<li>具有丰富的特性(封装继承多态)，可以帮助我们编写出来更易扩展、易复用、易维护的代码</li>\\n<li>从编程语言跟机器打交道方式的演进规律中，可以总结出来：面向对象编程语言比面向过程编程语言，更加人性化、更加高级、更加智能。</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
