import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const e={},p=t(`<h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>在 C## 7.0 中，弃元的使用场景主要有下面四种： 元组和对象的解构 使用 is 和 switch 的模式匹配 对具有 out 参数的方法的调用 作用域内独立使用场景</p><h4 id="场景一-元组-对象的解构" tabindex="-1"><a class="header-anchor" href="#场景一-元组-对象的解构"><span>场景一：元组/对象的解构</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">var</span></span> fifth<span class="token punctuation">)</span> <span class="token operator">=</span> tuple<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景二-使用-is-switch-的模式匹配" tabindex="-1"><a class="header-anchor" href="#场景二-使用-is-switch-的模式匹配"><span>场景二：使用 is/switch 的模式匹配</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> CultureInfo<span class="token punctuation">.</span>CurrentCulture<span class="token punctuation">.</span>DateTimeFormat<span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">IFormatProvider</span> fmt<span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fmt</span><span class="token punctuation">}</span></span><span class="token string"> object&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;A null object reference&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name"><span class="token keyword">object</span></span> _<span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Some object type without format information&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">object</span></span> _<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景三-对具有-out-参数的方法的调用" tabindex="-1"><a class="header-anchor" href="#场景三-对具有-out-参数的方法的调用"><span>场景三：对具有 out 参数的方法的调用</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 只要 x, 不关心 y</span>
point<span class="token punctuation">.</span><span class="token function">GetCoordinates</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="场景四-作用域内独立使用场景" tabindex="-1"><a class="header-anchor" href="#场景四-作用域内独立使用场景"><span>场景四：作用域内独立使用场景</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name">Dto</span> dto<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _ <span class="token operator">=</span> dto <span class="token operator">??</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增加的场景" tabindex="-1"><a class="header-anchor" href="#增加的场景"><span>增加的场景</span></a></h4><p>C## 9.0 对弃元增加了一种场景支持：Lambda参数，也包括匿名方法参数。示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// C## 9 之前</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> zero <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// C## 9</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> zero <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> _<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 C## 9 之前，即便不使用的Lambda 参数也需要给它命名。C## 9 支持弃元参数一方面简化了命名，另一方面也节省了内存分配。更重要的是它使得编程的意图更明确，让人一看就知道这个参数是不用的，增强了代码的可读性和可维护性。</p>`,14),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","qiyuan.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/hexincsharp/qiyuan.html","title":"弃元","lang":"zh-CN","frontmatter":{"title":"弃元","lang":"zh-CN","date":"2023-11-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"qiyuan","slug":"vgkrbsrn501izhxo","docsId":"146446337","description":"介绍 在 C## 7.0 中，弃元的使用场景主要有下面四种： 元组和对象的解构 使用 is 和 switch 的模式匹配 对具有 out 参数的方法的调用 作用域内独立使用场景 场景一：元组/对象的解构 场景二：使用 is/switch 的模式匹配 场景三：对具有 out 参数的方法的调用 场景四：作用域内独立使用场景 增加的场景 C## 9.0 对弃...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/hexincsharp/qiyuan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"弃元"}],["meta",{"property":"og:description","content":"介绍 在 C## 7.0 中，弃元的使用场景主要有下面四种： 元组和对象的解构 使用 is 和 switch 的模式匹配 对具有 out 参数的方法的调用 作用域内独立使用场景 场景一：元组/对象的解构 场景二：使用 is/switch 的模式匹配 场景三：对具有 out 参数的方法的调用 场景四：作用域内独立使用场景 增加的场景 C## 9.0 对弃..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"弃元\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":4,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":4,"title":"场景一：元组/对象的解构","slug":"场景一-元组-对象的解构","link":"#场景一-元组-对象的解构","children":[]},{"level":4,"title":"场景二：使用 is/switch 的模式匹配","slug":"场景二-使用-is-switch-的模式匹配","link":"#场景二-使用-is-switch-的模式匹配","children":[]},{"level":4,"title":"场景三：对具有 out 参数的方法的调用","slug":"场景三-对具有-out-参数的方法的调用","link":"#场景三-对具有-out-参数的方法的调用","children":[]},{"level":4,"title":"场景四：作用域内独立使用场景","slug":"场景四-作用域内独立使用场景","link":"#场景四-作用域内独立使用场景","children":[]},{"level":4,"title":"增加的场景","slug":"增加的场景","link":"#增加的场景","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"dotnet/csharp/hexincsharp/qiyuan.md","localizedDate":"2023年11月9日","excerpt":"<h4>介绍</h4>\\n<p>在 C## 7.0 中，弃元的使用场景主要有下面四种：\\n元组和对象的解构\\n使用 is 和 switch 的模式匹配\\n对具有 out 参数的方法的调用\\n作用域内独立使用场景</p>\\n<h4>场景一：元组/对象的解构</h4>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> tuple <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">(</span>_<span class=\\"token punctuation\\">,</span> _<span class=\\"token punctuation\\">,</span> _<span class=\\"token punctuation\\">,</span> _<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> fifth<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> tuple<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
