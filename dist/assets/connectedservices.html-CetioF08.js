import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as t,o as a}from"./app-B8CExjn9.js";const n={};function p(r,e){return a(),s("div",null,e[0]||(e[0]=[t(`<h2 id="生成api调用代码" tabindex="-1"><a class="header-anchor" href="#生成api调用代码"><span>生成API调用代码</span></a></h2><p>生成的代码将和接口对应的参数、返回值一一对应，本文底层使用的工具为NSwag.exe，其他可替代的方案还有AutoSet.exe。<br> 本文中生成的代码将在编译过程中自动编译，类似grpc生成代码的模式，如果使用AutoSet则需要手动引入代码。<br> 另外也可以使用NSwag对应的vs插件(<a href="https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice</a>)</p><p>右键项目然后添加=&gt;连接的服务，然后配置生成的代码，选择你想生成调用代码的API的 swagger.json文件地址，然后就可以生成调用代码，比如我们将生辰的代码提供类名称设置为TestClient，那么调用示例就是</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TestClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://192.168.2.49:7000/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> enums</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ExecAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProcedureInDto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">enums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">JsonConvert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SerializeObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">enums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const k=i(n,[["render",p],["__file","connectedservices.html.vue"]]),c=JSON.parse('{"path":"/dotnet/api/connectedservices.html","title":"Connected Services","lang":"zh-CN","frontmatter":{"title":"Connected Services","lang":"zh-CN","date":"2023-05-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"connectedservices","slug":"lsv2wgvgabsd6pi1","docsId":"126104582","description":"生成API调用代码 生成的代码将和接口对应的参数、返回值一一对应，本文底层使用的工具为NSwag.exe，其他可替代的方案还有AutoSet.exe。 本文中生成的代码将在编译过程中自动编译，类似grpc生成代码的模式，如果使用AutoSet则需要手动引入代码。 另外也可以使用NSwag对应的vs插件(https://marketplace.visua...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/connectedservices.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Connected Services"}],["meta",{"property":"og:description","content":"生成API调用代码 生成的代码将和接口对应的参数、返回值一一对应，本文底层使用的工具为NSwag.exe，其他可替代的方案还有AutoSet.exe。 本文中生成的代码将在编译过程中自动编译，类似grpc生成代码的模式，如果使用AutoSet则需要手动引入代码。 另外也可以使用NSwag对应的vs插件(https://marketplace.visua..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Connected Services\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"生成API调用代码","slug":"生成api调用代码","link":"#生成api调用代码","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"dotnet/api/connectedservices.md","localizedDate":"2023年5月29日","excerpt":"<h2>生成API调用代码</h2>\\n<p>生成的代码将和接口对应的参数、返回值一一对应，本文底层使用的工具为NSwag.exe，其他可替代的方案还有AutoSet.exe。<br>\\n本文中生成的代码将在编译过程中自动编译，类似grpc生成代码的模式，如果使用AutoSet则需要手动引入代码。<br>\\n另外也可以使用NSwag对应的vs插件(<a href=\\"https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice</a>)</p>","autoDesc":true}');export{k as comp,c as data};
