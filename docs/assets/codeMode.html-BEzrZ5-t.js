import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as t,d as e}from"./app-Bfb6-vFH.js";const i="/kbms/common/1651382972817-e1da619b-e47f-452c-8dc5-1f4fd35070b9.png",u="/kbms/common/1651382998256-35f3eef4-f451-4327-809b-80c46f6693c2.png",r={},k=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>关于简化模式中，通过客户端以浏览器的形式请求「IdentityServer」服务获取访问令牌，从而请求获取受保护的资源，但由于token携带在url中，安全性方面不能保证。因此，我们可以考虑通过其他方式来解决这个问题。 我们通过Oauth2.0的「授权码模式」了解，这种模式不同于简化模式，「在于授权码模式不直接返回token，而是先返回一个授权码，然后再根据这个授权码去请求token」。这显得更为安全。 所以在这一篇中，我们将通过多种授权模式中的「授权码」模式进行说明，主要针对介绍「IdentityServer」保护API的资源，「授权码」访问API资源。</p><h2 id="_6-授权码模式" tabindex="-1"><a class="header-anchor" href="#_6-授权码模式"><span>6. 授权码模式</span></a></h2><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>「指的是第三方应用先申请一个授权码，然后再用该码获取令牌，实现与资源服务器的通信。」</strong></p></blockquote><p>看一个常见的QQ登陆第三方网站的流程如下图所示： <img src="'+u+`" alt="" loading="lazy"></p><h3 id="_6-1-适用场景" tabindex="-1"><a class="header-anchor" href="#_6-1-适用场景"><span>6.1 适用场景</span></a></h3><p>授权码模式(authorization code)是功能最完整、流程最严密的授权模式。</p><h3 id="_6-2-授权码授权流程" tabindex="-1"><a class="header-anchor" href="#_6-2-授权码授权流程"><span>6.2 授权码授权流程</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
     <span class="token operator">|</span> Resource <span class="token operator">|</span>
     <span class="token operator">|</span>   Owner  <span class="token operator">|</span>
     <span class="token operator">|</span>          <span class="token operator">|</span>
     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>
          <span class="token operator">^</span>
          <span class="token operator">|</span>
         <span class="token punctuation">(</span>B<span class="token punctuation">)</span>
     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>          Client Identifier      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
     <span class="token operator">|</span>         <span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">--</span> <span class="token operator">&amp;</span> Redirection URI <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">|</span>               <span class="token operator">|</span>
     <span class="token operator">|</span>  User<span class="token operator">-</span>   <span class="token operator">|</span>                                 <span class="token operator">|</span> Authorization <span class="token operator">|</span>
     <span class="token operator">|</span>  Agent  <span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token operator">--</span> User authenticates <span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token operator">|</span>     Server    <span class="token operator">|</span>
     <span class="token operator">|</span>          <span class="token operator">|</span>                                 <span class="token operator">|</span>               <span class="token operator">|</span>
     <span class="token operator">|</span>         <span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token operator">--</span> Authorization Code <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">|</span>               <span class="token operator">|</span>
     <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                                 <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
       <span class="token operator">|</span>    <span class="token operator">|</span>                                         <span class="token operator">^</span>      v
      <span class="token punctuation">(</span>A<span class="token punctuation">)</span>  <span class="token punctuation">(</span>C<span class="token punctuation">)</span>                                        <span class="token operator">|</span>      <span class="token operator">|</span>
       <span class="token operator">|</span>    <span class="token operator">|</span>                                         <span class="token operator">|</span>      <span class="token operator">|</span>
       <span class="token operator">^</span>    v                                         <span class="token operator">|</span>      <span class="token operator">|</span>
     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>                                      <span class="token operator">|</span>      <span class="token operator">|</span>
     <span class="token operator">|</span>         <span class="token operator">|</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token operator">--</span> Authorization Code <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>&#39;      <span class="token operator">|</span>
     <span class="token operator">|</span>  Client <span class="token operator">|</span>          <span class="token operator">&amp;</span> Redirection URI                  <span class="token operator">|</span>
     <span class="token operator">|</span>         <span class="token operator">|</span>                                             <span class="token operator">|</span>
     <span class="token operator">|</span>         <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> Access Token <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>&#39;
     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>       <span class="token punctuation">(</span>w<span class="token operator">/</span> Optional <span class="token class-name">Refresh</span> Token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>「授权码授权流程描述」 （A）「用户访问第三方应用，第三方应用将用户导向认证服务器」； （B）「用户选择是否给予第三方应用授权」； （C）「假设用户给予授权，认证服务器将用户导向第三方应用事先指定的重定向URI，同时带上一个授权码」； （D）「第三方应用收到授权码，带上上一步时的重定向URI，向认证服务器申请访问令牌。这一步是在第三方应用的后台的服务器上完成的，对用户不可见」； （E）「认证服务器核对了授权码和重定向URI，确认无误后，向第三方应用发送访问令牌(Access Token)和更新令牌(Refresh token)」； （F）「访问令牌过期后，刷新访问令牌」；</p><h4 id="_6-2-1-过程详解" tabindex="-1"><a class="header-anchor" href="#_6-2-1-过程详解"><span>6.2.1 过程详解</span></a></h4><p>访问令牌请求 「（1）用户访问第三方应用，第三方应用将用户导向认证服务器」 (用户的操作：用户访问https://client.example.com/cb跳转到登录地址，选择授权服务器方式登录)</p><p>在授权开始之前，它首先生成state参数(随机字符串)。client端将需要存储这个（cookie，会话或其他方式），以便在下一步中使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>GET <span class="token operator">/</span>authorize<span class="token punctuation">?</span>response_type<span class="token operator">=</span>code<span class="token operator">&amp;</span>client_id<span class="token operator">=</span>s6BhdRkqt3<span class="token operator">&amp;</span>state<span class="token operator">=</span>xyz
        <span class="token operator">&amp;</span>redirect_uri<span class="token operator">=</span>https<span class="token operator">%</span>3A<span class="token operator">%</span><span class="token number">2F</span><span class="token operator">%</span>2Fclient<span class="token operator">%</span>2Eexample<span class="token operator">%</span>2Ecom<span class="token operator">%</span>2Fcb HTTP<span class="token operator">/</span><span class="token number">1.1</span>
HTTP<span class="token operator">/</span><span class="token number">1.1</span> Host<span class="token punctuation">:</span> server<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的授权URL如上所述（如上），请求这个地址后重定向访问授权服务器，其中 response_type参数为code,表示授权类型，返回code授权码。</p><table><thead><tr><th>参数</th><th>是否必须</th><th>含义</th></tr></thead><tbody><tr><td>response_type</td><td>必需</td><td>表示授权类型，此处的值固定为&quot;code&quot;</td></tr><tr><td>client_id</td><td>必需</td><td>客户端ID</td></tr><tr><td>redirect_uri</td><td>可选</td><td>表示重定向的URI</td></tr><tr><td>scope</td><td>可选</td><td>表示授权范围。</td></tr><tr><td>state</td><td>可选</td><td>表示随机字符串,可指定任意值，认证服务器会返回这个值</td></tr></tbody></table><p><strong>「（2）假设用户给予授权，认证服务器将用户导向第三方应用事先指定的重定向URI，同时带上一个授权码」</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> <span class="token class-name">Found</span>
Location<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>client<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>cb<span class="token punctuation">?</span>code<span class="token operator">=</span>SplxlOBeZQQYbYS6WxSbIA<span class="token operator">&amp;</span>state<span class="token operator">=</span>xyz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>code</td><td>表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。</td></tr><tr><td>state</td><td>如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</td></tr></tbody></table><p><strong>「（3）第三方应用收到授权码，带上上一步时的重定向URI，向认证服务器申请访问令牌。这一步是在第三方应用的后台的服务器上完成的，对用户不可见」</strong>。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>POST <span class="token operator">/</span>token HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Host<span class="token punctuation">:</span> <span class="token class-name">server<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com</span>
Authorization<span class="token punctuation">:</span> Bearer czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span><span class="token class-name">urlencoded</span>
grant_type<span class="token operator">=</span>authorization_code<span class="token operator">&amp;</span>code<span class="token operator">=</span>SplxlOBeZQQYbYS6WxSbIA
<span class="token operator">&amp;</span>redirect_uri<span class="token operator">=</span>https<span class="token operator">%</span>3A<span class="token operator">%</span><span class="token number">2F</span><span class="token operator">%</span>2Fclient<span class="token operator">%</span>2Eexample<span class="token operator">%</span>2Ecom<span class="token operator">%</span>2Fcb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>grant_type</td><td>表示使用的授权模式，必选项，此处的值固定为&quot;authorization_code&quot;。</td></tr><tr><td>code</td><td>表示上一步获得的授权码，必选项。</td></tr><tr><td>redirect_uri</td><td>表示重定向URI，必选项，且必须与步骤1中的该参数值保持一致。</td></tr><tr><td>client_id</td><td>表示客户端ID，必选项。</td></tr></tbody></table><p><strong>「（4）认证服务器核对了授权码和重定向URI，确认无误后，向第三方应用发送访问令牌(Access Token)和更新令牌(Refresh token)」</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> OK
     Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">;</span>charset<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span>
     Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> no<span class="token operator">-</span><span class="token class-name">store</span>
     Pragma<span class="token punctuation">:</span> no<span class="token operator">-</span>cache
     <span class="token punctuation">{</span>
       <span class="token string">&quot;access_token&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2YotnFZFEjr1zCsicMWpAA&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;token_type&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;expires_in&quot;</span><span class="token punctuation">:</span><span class="token number">3600</span><span class="token punctuation">,</span>
       <span class="token string">&quot;refresh_token&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;example_parameter&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;example_value&quot;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-实践" tabindex="-1"><a class="header-anchor" href="#_6-3-实践"><span>6.3 实践</span></a></h3><p>在示例实践中，我们将创建一个授权访问服务，定义一个HTML客户端，HTML客户端通过「IdentityServer」上请求访问令牌，并使用它来访问API。</p><h4 id="_6-3-1-搭建认证授权服务" tabindex="-1"><a class="header-anchor" href="#_6-3-1-搭建认证授权服务"><span>6.3.1 搭建认证授权服务</span></a></h4><p>使用我们之前创建的AuthCenterInMemory项目。</p><h5 id="_6-3-1-1-配置内容" tabindex="-1"><a class="header-anchor" href="#_6-3-1-1-配置内容"><span>6.3.1.1 配置内容</span></a></h5><p>修改IdentityConfig文件内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IdentityConfig</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 资源</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IdentityResource<span class="token punctuation">&gt;</span></span> IdentityResources <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResource<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResources<span class="token punctuation">.</span>OpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResources<span class="token punctuation">.</span>Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     在3.1.x 到 4.x 的变更中，ApiResource 的 Scope 正式独立出来为 ApiScope 对象，区别ApiResource 和 Scope的关系,
     Scope 是属于ApiResource 的一个属性，可以包含多个Scope。
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ApiResource<span class="token punctuation">&gt;</span></span> ApiResources <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiResource<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiResource</span><span class="token punctuation">(</span><span class="token string">&quot;API01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;api1DisplayName&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Scopes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                ApiSecrets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//api密钥</span>
                UserClaims <span class="token operator">=</span> <span class="token punctuation">{</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>NickName<span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Authorization Server保护了哪些 API Scope（作用域）</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ApiScope<span class="token punctuation">&gt;</span></span> <span class="token function">GetApiScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiScope</span><span class="token punctuation">(</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_scope1 DisplayName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 哪些客户端 Client（应用） 可以使用这个 Authorization Server</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Client<span class="token punctuation">&gt;</span></span> <span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//客户端凭据模式</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;ConsoleClient01&quot;</span><span class="token punctuation">,</span> <span class="token comment">//客户端的标识，要是唯一的</span>
                ClientSecrets <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//客户端密码，进行了加密</span>
                AllowedGrantTypes <span class="token operator">=</span>
                    GrantTypes
                        <span class="token punctuation">.</span>ClientCredentials<span class="token punctuation">,</span> <span class="token comment">//授权方式，这里采用的是客户端认证模式，只要ClientId，以及ClientSecrets正确即可访问对应的AllowedScopes里面的api资源</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//定义这个客户端可以访问的scopes</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//资源密码模式</span>

                ClientId <span class="token operator">=</span> <span class="token string">&quot;ResourceOwnerPassword01&quot;</span><span class="token punctuation">,</span>
                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>ResourceOwnerPassword<span class="token punctuation">,</span>
                ClientSecrets <span class="token operator">=</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                AllowedScopes <span class="token operator">=</span>
                <span class="token punctuation">{</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Phone<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">/*
                 简化模式：创建一个mvc客户端，然后启动该身份服务器，然后启动客户端，让客户端去访问需要权限的接口，然后会直接转到身份服务器登录，
                 登录成功会重新跳转回去
                 */</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;ImplicitClientMvc&quot;</span><span class="token punctuation">,</span>

                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Implicit<span class="token punctuation">,</span>

                <span class="token comment">//登录后重定向到哪里，客户端地址</span>
                RedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5021/signin-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                <span class="token comment">//FrontChannelLogoutUri=&quot;&quot;,</span>
                <span class="token comment">//注销后重定向到哪里，客户端地址</span>
                PostLogoutRedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5021/signout-callback-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                AllowOfflineAccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//刷新令牌</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//允许将token通过浏览器传递</span>
                AllowAccessTokensViaBrowser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token comment">//是否需要统一授权（默认是false）</span>
                RequireConsent <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//授权码模式</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;AuthorizationCodeWebClient&quot;</span><span class="token punctuation">,</span>
                ClientName <span class="token operator">=</span> <span class="token string">&quot;授权码 Web Client 名称&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">//授权模式</span>
                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>
                AccessTokenLifetime <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token comment">//单位是秒</span>

                RequirePkce <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//指定基于代码请求的授权令牌是否需要证明密钥</span>
                RequireClientSecret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

                <span class="token comment">//登录后重定向的位置</span>
                RedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024/callback.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//注销后重定向的位置</span>
                PostLogoutRedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024/index.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                AllowedCorsOrigins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//允许跨域请求的地址</span>

                <span class="token comment">//客户端有权访问的范围</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token doc-comment comment">////允许token通过浏览器传递</span>
                <span class="token comment">//AllowAccessTokensViaBrowser = true,</span>
                <span class="token doc-comment comment">////是否显示同意界面</span>
                <span class="token comment">//RequireConsent = true,</span>
                <span class="token doc-comment comment">////是否记住同意选项</span>
                <span class="token comment">//AllowRememberConsent = false,</span>
                <span class="token doc-comment comment">////支持刷新令牌</span>
                <span class="token comment">//AllowOfflineAccess = true,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 哪些User可以被这个AuthorizationServer识别并授权</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TestUser<span class="token punctuation">&gt;</span></span> <span class="token function">GetTestUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestUser</span>
            <span class="token punctuation">{</span>
                SubjectId <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                Username <span class="token operator">=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span>
                Password <span class="token operator">=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span>

                Claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://alice.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestUser</span>
            <span class="token punctuation">{</span>
                SubjectId <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
                Username <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
                Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>

                Claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>NickName<span class="token punctuation">,</span> <span class="token string">&quot;Bob nickname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">&quot;itzhangyunpeng@163.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>WebSite<span class="token punctuation">,</span> <span class="token string">&quot;状态&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>PhoneNumber<span class="token punctuation">,</span> <span class="token string">&quot;18838940824&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;ceshi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//添加角色</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;today&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhouyi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;ceshi1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ceshi11&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedirectUris : 登录成功回调处理的客户端地址，处理回调返回的数据，可以有多个。 PostLogoutRedirectUris ：跳转登出到的客户端的地址。 这两个都是配置的客户端的地址，且是identityserver4组件里面封装好的地址，作用分别是登录，注销的回调</p><blockquote><p>在配置内容中配置客户端(client)中定义了一个AllowedGrantTypes的属性，这个属性决定了Client可以被哪种模式被访问，「GrantTypes.Code」为「授权码模式」。所以在本文中我们需要添加一个Client用于支持授权码模式(「Authorization Code」)。</p></blockquote><h5 id="_6-3-1-2-注册服务" tabindex="-1"><a class="header-anchor" href="#_6-3-1-2-注册服务"><span>6.3.1.2 注册服务</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetTestUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryApiScopes</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetApiScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span>ApiResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-3-1-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_6-3-1-3-配置管道"><span>6.3.1.3 配置管道</span></a></h5><p>保持之前的不变。</p><h4 id="_6-3-2-搭建api资源项目" tabindex="-1"><a class="header-anchor" href="#_6-3-2-搭建api资源项目"><span>6.3.2 搭建API资源项目</span></a></h4><h5 id="_6-3-2-1-安装nuget包" tabindex="-1"><a class="header-anchor" href="#_6-3-2-1-安装nuget包"><span>6.3.2.1 安装Nuget包</span></a></h5><p>IdentityServer4.AccessTokenValidation 包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;IdentityServer4.AccessTokenValidation&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6-3-2-2-注册服务" tabindex="-1"><a class="header-anchor" href="#_6-3-2-2-注册服务"><span>6.3.2.2 注册服务</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AddIdentityServerAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5014&quot;</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>ApiName <span class="token operator">=</span> <span class="token string">&quot;API01&quot;</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>ApiSecret <span class="token operator">=</span> <span class="token string">&quot;secrets&quot;</span><span class="token punctuation">;</span><span class="token comment">//对应ApiResources中的密钥</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AddAuthentication把Bearer配置成默认模式，将身份认证服务添加到DI中。 AddIdentityServerAuthentication把IdentityServer的access token添加到DI中，供身份认证服务使用。</p><h5 id="_6-3-2-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_6-3-2-3-配置管道"><span>6.3.2.3 配置管道</span></a></h5><p>然后要确保认证服务执行对每个请求的验证，加入UseAuthentication和UseAuthorization到Configure中,在startup.cs中Configure方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UseAuthentication将身份验证中间件添加到管道中； UseAuthorization 将启动授权中间件添加到管道中，以便在每次调用主机时执行身份验证授权功能。</p><h5 id="_6-3-2-4-api资源接口" tabindex="-1"><a class="header-anchor" href="#_6-3-2-4-api资源接口"><span>6.3.2.4 API资源接口</span></a></h5><p>添加IdentityController控制器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentityController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>IdentityController<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">IdentityController</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>IdentityController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;UserClaims&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetUserClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">from</span> c <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在IdentityController 控制器中添加 [Authorize] , 在进行请求资源的时候，需进行认证授权通过后，才能进行访问。</p><h4 id="_6-3-3-搭建前端html客户端" tabindex="-1"><a class="header-anchor" href="#_6-3-3-搭建前端html客户端"><span>6.3.3 搭建前端HTML客户端</span></a></h4><p>实现对客户端认证授权访问资源</p><h5 id="_6-3-3-1-新建空-netcoreapi项目" tabindex="-1"><a class="header-anchor" href="#_6-3-3-1-新建空-netcoreapi项目"><span>6.3.3.1 新建空.NetCoreAPI项目</span></a></h5><p>修改Program文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-3-3-1-编写前端页面" tabindex="-1"><a class="header-anchor" href="#_6-3-3-1-编写前端页面"><span>6.3.3.1 编写前端页面</span></a></h5><p>新建wwwroot目录，在里面创建index.html和callback.html页面</p>`,60),d={href:"https://identityserver4.readthedocs.io/en/latest/quickstarts/4_javascript_client.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>核心配置代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    authority<span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5014&quot;</span><span class="token punctuation">,</span><span class="token comment">//授权服务器地址</span>
    client_id<span class="token punctuation">:</span> <span class="token string">&quot;AuthorizationCodeWebClient&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">redirect_uri</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5024/callback.html&quot;</span><span class="token punctuation">,</span> <span class="token comment">//登录后重定向的位置</span>
    response_type<span class="token punctuation">:</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">scope</span><span class="token punctuation">:</span> <span class="token string">&quot;openid profile client_scope1&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">post_logout_redirect_uri</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5024/index.html&quot;</span><span class="token punctuation">,</span><span class="token comment">//注销后重定向的位置</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录成功后即可调用需要授权才能访问的资源</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">function</span> <span class="token function">api</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mgr<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//请求需要授权的资源</span>
        <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5020/api/Identity/UserClaims&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>access_token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>具体代码会放代码仓库</p></blockquote><h4 id="_6-3-4-请求资源服务是mvc客户端" tabindex="-1"><a class="header-anchor" href="#_6-3-4-请求资源服务是mvc客户端"><span>6.3.4 请求资源服务是MVC客户端</span></a></h4><p>这里是演示另一种情况，如果请求的资源服务的客户端是MVC客户端，如何操作。(该示例我并没有操作)</p><h5 id="_6-3-4-1-安装nuget包" tabindex="-1"><a class="header-anchor" href="#_6-3-4-1-安装nuget包"><span>6.3.4.1 安装Nuget包</span></a></h5><p>IdentityServer4.AccessTokenValidation 包</p><h5 id="_6-3-4-2-安装注册服务" tabindex="-1"><a class="header-anchor" href="#_6-3-4-2-安装注册服务"><span>6.3.4.2 安装注册服务</span></a></h5><p>要将对 OpenID Connect 身份认证的支持添加到MVC应用程序中。 在startup.cs中ConfigureServices方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllersWithViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>DefaultScheme <span class="token operator">=</span> <span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">&quot;oidc&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//使用Cookie作为验证用户的首选方式</span>
          <span class="token punctuation">.</span><span class="token function">AddOpenIdConnect</span><span class="token punctuation">(</span><span class="token string">&quot;oidc&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
          <span class="token punctuation">{</span>
              options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5001&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//授权服务器地址</span>
              options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//暂时不用https</span>
              options<span class="token punctuation">.</span>ClientId <span class="token operator">=</span> <span class="token string">&quot;code_client&quot;</span><span class="token punctuation">;</span>
              options<span class="token punctuation">.</span>ClientSecret <span class="token operator">=</span> <span class="token string">&quot;511536EF-F270-4058-80CA-1C89C192F69A&quot;</span><span class="token punctuation">;</span>
              options<span class="token punctuation">.</span>ResponseType <span class="token operator">=</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">;</span> <span class="token comment">//代表Authorization Code</span>
              options<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;code_scope1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加授权资源</span>
              options<span class="token punctuation">.</span>SaveTokens <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//表示把获取的Token存到Cookie中</span>
              options<span class="token punctuation">.</span>GetClaimsFromUserInfoEndpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">ConfigureNonBreakingSameSiteCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>AddAuthentication注入添加认证授权，当需要用户登录时，使用 cookie 来本地登录用户（通过“Cookies”作为DefaultScheme），并将 DefaultChallengeScheme 设置为“oidc”，</li><li>使用 AddCookie 添加可以处理 cookie 的处理程序。</li><li>在AddOpenIdConnect用于配置执行 OpenID Connect 协议的处理程序和相关参数。Authority表明之前搭建的 IdentityServer 授权服务地址。然后我们通过ClientId、ClientSecret,识别这个客户端。SaveTokens用于保存从IdentityServer获取的token至cookie,「ture」标识ASP.NETCore将会自动存储身份认证session的access和refresh token。</li></ol></blockquote><h5 id="_6-3-4-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_6-3-4-3-配置管道"><span>6.3.4.3 配置管道</span></a></h5><p>然后要确保认证服务执行对每个请求的验证，加入UseAuthentication和UseAuthorization到Configure中,在startup.cs中Configure方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Home/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseCookiePolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        endpoints<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>
            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">&quot;{controller=Home}/{action=Index}/{id?}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UseAuthentication将身份验证中间件添加到管道中； UseAuthorization 将启动授权中间件添加到管道中，以便在每次调用主机时执行身份验证授权功能。</p><h5 id="_6-3-4-4-添加授权" tabindex="-1"><a class="header-anchor" href="#_6-3-4-4-添加授权"><span>6.3.4.4 添加授权</span></a></h5><p>在HomeController控制器并添加[Authorize]特性到其中一个方法。在进行请求的时候，需进行认证授权通过后，才能进行访问。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Privacy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ViewData<span class="token punctuation">[</span><span class="token string">&quot;Message&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Secure page.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还要修改主视图以显示用户的Claim以及cookie属性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@<span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication

<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Claims<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>dl<span class="token operator">&gt;</span>
    @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> claim <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>@claim<span class="token punctuation">.</span>Type<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span>@claim<span class="token punctuation">.</span>Value<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Properties<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>dl<span class="token operator">&gt;</span>
    @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token keyword">await</span> Context<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>@prop<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span>@prop<span class="token punctuation">.</span>Value<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 Privacy 页面，跳转到认证服务地址，进行账号密码登录，Logout 用于用户的注销操作。</p><h5 id="_6-3-4-5-添加资源访问" tabindex="-1"><a class="header-anchor" href="#_6-3-4-5-添加资源访问"><span>6.3.4.5 添加资源访问</span></a></h5><p>在HomeController控制器添加对API资源访问的接口方法。在进行请求的时候，访问API受保护资源。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 测试请求API资源(api1)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">getApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> accessToken <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetTokenAsync</span><span class="token punctuation">(</span>OpenIdConnectParameterNames<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> msg <span class="token operator">=</span> <span class="token string">&quot;accesstoken 获取失败&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpResponse <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5003/api/identity/GetUserClaims&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpResponse<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpResponse<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> msg <span class="token operator">=</span> <span class="token string">&quot;请求 api1 失败。&quot;</span><span class="token punctuation">,</span> error <span class="token operator">=</span> result <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        msg <span class="token operator">=</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
        data <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">DeserializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>测试这里通过获取accessToken之后，设置client请求头的认证，访问API资源受保护的地址，获取资源。</p></blockquote><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><h4 id="跨域问题" tabindex="-1"><a class="header-anchor" href="#跨域问题"><span>跨域问题</span></a></h4>`,29),m={href:"http://localhost:5014/.well-known/openid-configuration'",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>需要对授权服务器的client配置设置允许跨域请求。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>AllowedCorsOrigins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//允许跨域请求的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,3),h={href:"https://mp.weixin.qq.com/s/gSp8DxRuUZEWCA0Ac-DrvQ",target:"_blank",rel:"noopener noreferrer"};function g(y,q){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,n("blockquote",null,[n("p",null,[s("具体代码参考："),n("a",d,[s("https://identityserver4.readthedocs.io/en/latest/quickstarts/4_javascript_client.html"),t(a)])])]),v,n("p",null,[s("Access to XMLHttpRequest at '"),n("a",m,[s("http://localhost:5014/.well-known/openid-configuration'"),t(a)]),s(" from origin 'http://localhost:5024' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.")]),b,n("p",null,[n("a",h,[s("https://mp.weixin.qq.com/s/gSp8DxRuUZEWCA0Ac-DrvQ"),t(a)]),s(" | IdentityServer4系列 | 授权码模式")])])}const C=p(r,[["render",g],["__file","codeMode.html.vue"]]),_=JSON.parse('{"path":"/middleware/authorize/identityserver4/mode/codeMode.html","title":"授权码模式","lang":"zh-CN","frontmatter":{"title":"授权码模式","lang":"zh-CN","date":"2023-02-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"shouquanmamoshi","slug":"fnpc39","docsId":"75705725","description":"前言 关于简化模式中，通过客户端以浏览器的形式请求「IdentityServer」服务获取访问令牌，从而请求获取受保护的资源，但由于token携带在url中，安全性方面不能保证。因此，我们可以考虑通过其他方式来解决这个问题。 我们通过Oauth2.0的「授权码模式」了解，这种模式不同于简化模式，「在于授权码模式不直接返回token，而是先返回一个授权码...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/authorize/identityserver4/mode/codeMode.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"授权码模式"}],["meta",{"property":"og:description","content":"前言 关于简化模式中，通过客户端以浏览器的形式请求「IdentityServer」服务获取访问令牌，从而请求获取受保护的资源，但由于token携带在url中，安全性方面不能保证。因此，我们可以考虑通过其他方式来解决这个问题。 我们通过Oauth2.0的「授权码模式」了解，这种模式不同于简化模式，「在于授权码模式不直接返回token，而是先返回一个授权码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1651382972817-e1da619b-e47f-452c-8dc5-1f4fd35070b9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-16T05:03:06.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-16T05:03:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"授权码模式\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1651382972817-e1da619b-e47f-452c-8dc5-1f4fd35070b9.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1651382998256-35f3eef4-f451-4327-809b-80c46f6693c2.png\\"],\\"datePublished\\":\\"2023-02-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-16T05:03:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"6. 授权码模式","slug":"_6-授权码模式","link":"#_6-授权码模式","children":[{"level":3,"title":"6.1 适用场景","slug":"_6-1-适用场景","link":"#_6-1-适用场景","children":[]},{"level":3,"title":"6.2 授权码授权流程","slug":"_6-2-授权码授权流程","link":"#_6-2-授权码授权流程","children":[{"level":4,"title":"6.2.1 过程详解","slug":"_6-2-1-过程详解","link":"#_6-2-1-过程详解","children":[]}]},{"level":3,"title":"6.3 实践","slug":"_6-3-实践","link":"#_6-3-实践","children":[{"level":4,"title":"6.3.1 搭建认证授权服务","slug":"_6-3-1-搭建认证授权服务","link":"#_6-3-1-搭建认证授权服务","children":[{"level":5,"title":"6.3.1.1 配置内容","slug":"_6-3-1-1-配置内容","link":"#_6-3-1-1-配置内容","children":[]},{"level":5,"title":"6.3.1.2 注册服务","slug":"_6-3-1-2-注册服务","link":"#_6-3-1-2-注册服务","children":[]},{"level":5,"title":"6.3.1.3 配置管道","slug":"_6-3-1-3-配置管道","link":"#_6-3-1-3-配置管道","children":[]}]},{"level":4,"title":"6.3.2 搭建API资源项目","slug":"_6-3-2-搭建api资源项目","link":"#_6-3-2-搭建api资源项目","children":[{"level":5,"title":"6.3.2.1 安装Nuget包","slug":"_6-3-2-1-安装nuget包","link":"#_6-3-2-1-安装nuget包","children":[]},{"level":5,"title":"6.3.2.2 注册服务","slug":"_6-3-2-2-注册服务","link":"#_6-3-2-2-注册服务","children":[]},{"level":5,"title":"6.3.2.3 配置管道","slug":"_6-3-2-3-配置管道","link":"#_6-3-2-3-配置管道","children":[]},{"level":5,"title":"6.3.2.4 API资源接口","slug":"_6-3-2-4-api资源接口","link":"#_6-3-2-4-api资源接口","children":[]}]},{"level":4,"title":"6.3.3 搭建前端HTML客户端","slug":"_6-3-3-搭建前端html客户端","link":"#_6-3-3-搭建前端html客户端","children":[{"level":5,"title":"6.3.3.1 新建空.NetCoreAPI项目","slug":"_6-3-3-1-新建空-netcoreapi项目","link":"#_6-3-3-1-新建空-netcoreapi项目","children":[]},{"level":5,"title":"6.3.3.1 编写前端页面","slug":"_6-3-3-1-编写前端页面","link":"#_6-3-3-1-编写前端页面","children":[]}]},{"level":4,"title":"6.3.4 请求资源服务是MVC客户端","slug":"_6-3-4-请求资源服务是mvc客户端","link":"#_6-3-4-请求资源服务是mvc客户端","children":[{"level":5,"title":"6.3.4.1 安装Nuget包","slug":"_6-3-4-1-安装nuget包","link":"#_6-3-4-1-安装nuget包","children":[]},{"level":5,"title":"6.3.4.2 安装注册服务","slug":"_6-3-4-2-安装注册服务","link":"#_6-3-4-2-安装注册服务","children":[]},{"level":5,"title":"6.3.4.3 配置管道","slug":"_6-3-4-3-配置管道","link":"#_6-3-4-3-配置管道","children":[]},{"level":5,"title":"6.3.4.4 添加授权","slug":"_6-3-4-4-添加授权","link":"#_6-3-4-4-添加授权","children":[]},{"level":5,"title":"6.3.4.5 添加资源访问","slug":"_6-3-4-5-添加资源访问","link":"#_6-3-4-5-添加资源访问","children":[]}]}]},{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[{"level":4,"title":"跨域问题","slug":"跨域问题","link":"#跨域问题","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1708059786000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":11.93,"words":3580},"filePathRelative":"middleware/authorize/identityserver4/mode/codeMode.md","localizedDate":"2023年2月19日","excerpt":"<h2>前言</h2>\\n<p>关于简化模式中，通过客户端以浏览器的形式请求「IdentityServer」服务获取访问令牌，从而请求获取受保护的资源，但由于token携带在url中，安全性方面不能保证。因此，我们可以考虑通过其他方式来解决这个问题。\\n我们通过Oauth2.0的「授权码模式」了解，这种模式不同于简化模式，「在于授权码模式不直接返回token，而是先返回一个授权码，然后再根据这个授权码去请求token」。这显得更为安全。\\n所以在这一篇中，我们将通过多种授权模式中的「授权码」模式进行说明，主要针对介绍「IdentityServer」保护API的资源，「授权码」访问API资源。</p>","autoDesc":true}');export{C as comp,_ as data};
