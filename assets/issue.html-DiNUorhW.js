import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-SmdjEsew.js";const t={};function l(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="未使用fluent主题导致的不能预览" tabindex="-1"><a class="header-anchor" href="#未使用fluent主题导致的不能预览"><span>未使用Fluent主题导致的不能预览</span></a></h2><p>新创建的项目会自动应用一个名为 Fluent 的主题，对应的 Nuget 是：Avalonia.Themes.Fluent 。不过当你不使用这个主题，使用其他主题的时候，会导致无法预览，比如 Visual Studio 错误信息为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Unable to resolve type Avalonia.Data.RelativeSource</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最终的解决方案是恢复对 Fluent 主题的引用，并确保 Application.Styles 节点中有 FluentTheme 标签：</p><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span>&lt;Application.Styles&gt;</span></span>
<span class="line"><span>  &lt;FluentTheme /&gt;</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   &lt;!--引用其他的主题--&gt; </span></span>
<span class="line"><span>  &lt;StyleInclude Source=&quot;avares://Semi.Avalonia/Themes/Index.axaml&quot; /&gt;</span></span>
<span class="line"><span>&lt;/Application.Styles&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="browser-项目不能展示中文的问题" tabindex="-1"><a class="header-anchor" href="#browser-项目不能展示中文的问题"><span>Browser 项目不能展示中文的问题</span></a></h2><p>基于 wasm 的 Browser 项目在启动后所有的中文字符都变成方框，无法正常显示。推测是字体的问题，于是找到了另一个库 Quick-AvaloniaFonts ：<a href="https://github.com/Quick-AvaloniaFonts" target="_blank" rel="noopener noreferrer">https://github.com/Quick-AvaloniaFonts</a></p><p>该库在 Nuget 上有多个包，其中两个是：</p><ol><li>Quick.AvaloniaFonts.SourceHanSansCN</li><li>Quick.AvaloniaFonts.SourceHanSansCN.Slim</li></ol><p>Source Han Sans （思源黑体），是由 Google 和 Adobe 合作开发的开源字体，使用 Apache 2.0 许可。第一个包内嵌了完整的字体文件，有将近 60 MB。第二个包只含一个 Normal 字体粗细，不到 10MB。</p><p>使用方是把 Programe.cs 文件中的 .WithInterFont() 替换为 .WithFont_SourceHanSansCN() 即可。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c#"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Avalonia</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Program</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Initialization code. Don&#39;t use any Avalonia, third-party APIs or any</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // SynchronizationContext-reliant code before AppMain is called: things aren&#39;t initialized</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // yet and stuff might break.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">STAThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">BuildAvaloniaApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">StartWithClassicDesktopLifetime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Avalonia configuration, don&#39;t remove; also used by visual designer.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AppBuilder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BuildAvaloniaApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">AppBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UsePlatformDetect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //.WithInterFont()()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WithFont_SourceHanSansCN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LogToTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)]))}const k=i(t,[["render",l]]),o=JSON.parse('{"path":"/dotnet/avalonia/issue.html","title":"问题","lang":"zh-CN","frontmatter":{"title":"问题","lang":"zh-CN","date":"2024-03-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["avalonia","issue"],"description":"未使用Fluent主题导致的不能预览 新创建的项目会自动应用一个名为 Fluent 的主题，对应的 Nuget 是：Avalonia.Themes.Fluent 。不过当你不使用这个主题，使用其他主题的时候，会导致无法预览，比如 Visual Studio 错误信息为 最终的解决方案是恢复对 Fluent 主题的引用，并确保 Application.S...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-13T15:00:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/avalonia/issue.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"问题"}],["meta",{"property":"og:description","content":"未使用Fluent主题导致的不能预览 新创建的项目会自动应用一个名为 Fluent 的主题，对应的 Nuget 是：Avalonia.Themes.Fluent 。不过当你不使用这个主题，使用其他主题的时候，会导致无法预览，比如 Visual Studio 错误信息为 最终的解决方案是恢复对 Fluent 主题的引用，并确保 Application.S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-13T15:00:26.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"issue"}],["meta",{"property":"article:tag","content":"avalonia"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-13T15:00:26.000Z"}]]},"git":{"createdTime":1710342026000,"updatedTime":1710342026000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"dotnet/avalonia/issue.md","excerpt":"<h2>未使用Fluent主题导致的不能预览</h2>\\n<p>新创建的项目会自动应用一个名为 Fluent 的主题，对应的 Nuget 是：Avalonia.Themes.Fluent 。不过当你不使用这个主题，使用其他主题的时候，会导致无法预览，比如 Visual Studio 错误信息为</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>Unable to resolve type Avalonia.Data.RelativeSource</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,o as data};
