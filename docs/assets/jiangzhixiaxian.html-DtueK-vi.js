import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as t}from"./app-CBxp4zeL.js";const e={},p=t(`<h2 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一"><span>方案一</span></a></h2><ul><li>jwt验证人设置为动态的，每个用户都有自己自己的验证人，如果让用户强制下线，那么就修改该用户的验证人</li><li>生成token的时候，验证用户信息，然后根据user表的验证人去生成jwt</li><li>验证jwt的时候通过AudienceValidator方法去校验该验证人是否在数据库中存在数据，如果存在数据，那么说明验证通过。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>var db <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>IBaseQuery<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Db<span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token comment">//认证</span>
<span class="token punctuation">{</span>
	o<span class="token punctuation">.</span>Challenge <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
	o<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> false<span class="token punctuation">;</span>
	o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> new TokenValidationParameters
	<span class="token punctuation">{</span>
		<span class="token comment">//3+2</span>

		<span class="token comment">// 是否开启签名认证</span>
		ValidateIssuerSigningKey <span class="token operator">=</span> true<span class="token punctuation">,</span>
		IssuerSigningKey <span class="token operator">=</span> new <span class="token function">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>JwtSecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token comment">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>

		ValidateIssuer <span class="token operator">=</span> true<span class="token punctuation">,</span>
		ValidIssuer <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtIssuer<span class="token punctuation">,</span><span class="token comment">//发行人</span>

		<span class="token comment">// 接收人验证</span>
		ValidateAudience <span class="token operator">=</span> true<span class="token punctuation">,</span>
		<span class="token comment">//ValidAudience = config.JwtAudience,//验证人</span>
		<span class="token comment">//或者</span>
		AudienceValidator <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
		<span class="token punctuation">{</span>
			var bbb <span class="token operator">=</span> new <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//m:Audience集合  n:解析后的jwt  z: token验证参数</span>
			<span class="token keyword">return</span> m <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bbb<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>

		RequireExpirationTime <span class="token operator">=</span> true<span class="token punctuation">,</span>
		ValidateLifetime <span class="token operator">=</span> true<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>
	o<span class="token punctuation">.</span>Events <span class="token operator">=</span> new JwtBearerEvents
	<span class="token punctuation">{</span>
		OnAuthenticationFailed <span class="token operator">=</span> content <span class="token operator">=</span><span class="token operator">&gt;</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>SecurityTokenExpiredException<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				content<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Token-Expired&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>public bool <span class="token function">Exist</span><span class="token punctuation">(</span>ISqlSugarClient _db<span class="token punctuation">,</span> string audience<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	var aa <span class="token operator">=</span> _db<span class="token punctuation">.</span>Queryable<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Audience <span class="token operator">==</span> audience<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> aa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试，可以实现需求</p><h2 id="方案二" tabindex="-1"><a class="header-anchor" href="#方案二"><span>方案二</span></a></h2><p>通过将指定用户加入黑名单的形式来设置用户强制下线操作。比如将用户ID存入redis中,每次请求校验一次用户ID是否在redis中，如果在就不允许登录。 如果想实现某一个token不能用，那么就需要将某一个token存入redis，设置这个token的用户强制下线。</p><h2 id="方案三" tabindex="-1"><a class="header-anchor" href="#方案三"><span>方案三</span></a></h2><p>在用户表增加一个整数的列叫做JwtVersion，代表最后一次发放出来的令牌的版本号，每次登录、发放令牌、禁用用户、撤回令牌的时候都让该值进行自增，同时将jwtversion的值也放到jwt令牌中，当服务端收到客户端提交的jwt令牌去认证的时候，然后多一步和数据库中jwtversion的值进行比较，如果小于数据库版本号，那么就说明这jwt令牌过期了。</p><blockquote><p>这个校验判断的方法可以加上缓存，在每次登录、发放令牌等操作的时候删除缓存</p></blockquote>`,10),o=[p];function c(i,u){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","jiangzhixiaxian.html.vue"]]),d=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jiangzhixiaxian.html","title":"强制下线","lang":"zh-CN","frontmatter":{"title":"强制下线","lang":"zh-CN","date":"2022-08-28T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jiangzhixiaxian","slug":"sosu7e","docsId":"31329426","description":"方案一 jwt验证人设置为动态的，每个用户都有自己自己的验证人，如果让用户强制下线，那么就修改该用户的验证人 生成token的时候，验证用户信息，然后根据user表的验证人去生成jwt 验证jwt的时候通过AudienceValidator方法去校验该验证人是否在数据库中存在数据，如果存在数据，那么说明验证通过。 经过测试，可以实现需求 方案二 通过将...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jiangzhixiaxian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"强制下线"}],["meta",{"property":"og:description","content":"方案一 jwt验证人设置为动态的，每个用户都有自己自己的验证人，如果让用户强制下线，那么就修改该用户的验证人 生成token的时候，验证用户信息，然后根据user表的验证人去生成jwt 验证jwt的时候通过AudienceValidator方法去校验该验证人是否在数据库中存在数据，如果存在数据，那么说明验证通过。 经过测试，可以实现需求 方案二 通过将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"强制下线\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"方案一","slug":"方案一","link":"#方案一","children":[]},{"level":2,"title":"方案二","slug":"方案二","link":"#方案二","children":[]},{"level":2,"title":"方案三","slug":"方案三","link":"#方案三","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.03,"words":608},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jiangzhixiaxian.md","localizedDate":"2022年8月28日","excerpt":"<h2>方案一</h2>\\n<ul>\\n<li>jwt验证人设置为动态的，每个用户都有自己自己的验证人，如果让用户强制下线，那么就修改该用户的验证人</li>\\n<li>生成token的时候，验证用户信息，然后根据user表的验证人去生成jwt</li>\\n<li>验证jwt的时候通过AudienceValidator方法去校验该验证人是否在数据库中存在数据，如果存在数据，那么说明验证通过。</li>\\n</ul>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code>var db <span class=\\"token operator\\">=</span> services<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">BuildServiceProvider</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>GetService<span class=\\"token operator\\">&lt;</span>IBaseQuery<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>Db<span class=\\"token punctuation\\">;</span>\\n\\nservices<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddAuthentication</span><span class=\\"token punctuation\\">(</span>JwtBearerDefaults<span class=\\"token punctuation\\">.</span>AuthenticationScheme<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddJwtBearer</span><span class=\\"token punctuation\\">(</span>o <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span><span class=\\"token comment\\">//认证</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\to<span class=\\"token punctuation\\">.</span>Challenge <span class=\\"token operator\\">=</span> JwtBearerDefaults<span class=\\"token punctuation\\">.</span>AuthenticationScheme<span class=\\"token punctuation\\">;</span>\\n\\to<span class=\\"token punctuation\\">.</span>RequireHttpsMetadata <span class=\\"token operator\\">=</span> false<span class=\\"token punctuation\\">;</span>\\n\\to<span class=\\"token punctuation\\">.</span>TokenValidationParameters <span class=\\"token operator\\">=</span> new TokenValidationParameters\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">//3+2</span>\\n\\n\\t\\t<span class=\\"token comment\\">// 是否开启签名认证</span>\\n\\t\\tValidateIssuerSigningKey <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">,</span>\\n\\t\\tIssuerSigningKey <span class=\\"token operator\\">=</span> new <span class=\\"token function\\">SymmetricSecurityKey</span><span class=\\"token punctuation\\">(</span>Encoding<span class=\\"token punctuation\\">.</span>ASCII<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetBytes</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span>JwtSecretKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token comment\\">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>\\n\\n\\t\\tValidateIssuer <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">,</span>\\n\\t\\tValidIssuer <span class=\\"token operator\\">=</span> config<span class=\\"token punctuation\\">.</span>JwtIssuer<span class=\\"token punctuation\\">,</span><span class=\\"token comment\\">//发行人</span>\\n\\n\\t\\t<span class=\\"token comment\\">// 接收人验证</span>\\n\\t\\tValidateAudience <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token comment\\">//ValidAudience = config.JwtAudience,//验证人</span>\\n\\t\\t<span class=\\"token comment\\">//或者</span>\\n\\t\\tAudienceValidator <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>m<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">,</span> z<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tvar bbb <span class=\\"token operator\\">=</span> new <span class=\\"token function\\">UserInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Exist</span><span class=\\"token punctuation\\">(</span>db<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FirstOrDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">//m:Audience集合  n:解析后的jwt  z: token验证参数</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> m <span class=\\"token operator\\">!=</span> null <span class=\\"token operator\\">&amp;&amp;</span> bbb<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n\\t\\tRequireExpirationTime <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">,</span>\\n\\t\\tValidateLifetime <span class=\\"token operator\\">=</span> true<span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>\\n\\to<span class=\\"token punctuation\\">.</span>Events <span class=\\"token operator\\">=</span> new JwtBearerEvents\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tOnAuthenticationFailed <span class=\\"token operator\\">=</span> content <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">.</span>Exception<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span>SecurityTokenExpiredException<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tcontent<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Token-Expired\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"true\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
