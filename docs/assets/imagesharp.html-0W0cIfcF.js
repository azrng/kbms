import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,e as t,b as p}from"./app-DMmdIwn0.js";const l={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),r={href:"https://github.com/SixLabors/ImageSharp",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.sixlabors.com/articles/imagesharp/",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">&quot;SixLabors.ImageSharp&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="操作示例" tabindex="-1"><a class="header-anchor" href="#操作示例"><span>操作示例</span></a></h2><h3 id="调整图片大小" tabindex="-1"><a class="header-anchor" href="#调整图片大小"><span>调整图片大小</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Image</span> image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\docs\\\\1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 调整图像大小</span>
    <span class="token comment">//image.Mutate(x =&gt; x.Resize(image.Width / 2, image.Height / 2));</span>

    <span class="token comment">//设置为指定像素高和宽</span>
    image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    image<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\bar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),m={href:"https://docs.sixlabors.com/articles/imagesharp/resize.html",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="图片上标注" tabindex="-1"><a class="header-anchor" href="#图片上标注"><span>图片上标注</span></a></h3><p>首先要注意字体问题，Windows自带的字体一般存储于 C:\\Windows\\Fonts 文件夹内，如果是部署在Linux系统的应用程序，则存储于 usr/share/fonts 文件夹内。 以黑体为例，我们找到对应的字体文件 SIMHEI.TTF ，将其放入项目的根目录内方便调用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> <span class="token string">&quot;Image/Mud.png&quot;</span>             <span class="token comment">//图片路径</span>
<span class="token class-name">FontCollection</span> fonts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FontCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FontFamily</span> fontfamily <span class="token operator">=</span> fonts<span class="token punctuation">.</span><span class="token function">Install</span><span class="token punctuation">(</span><span class="token string">&quot;Source/SIMHEI.TTF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字体的路径     var font  = new Font(fontfamily,50);</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Image<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span> image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>DrawText <span class="token punctuation">(</span>
              <span class="token string">&quot;陆家嘴旗舰店&quot;</span><span class="token punctuation">,</span>           <span class="token comment">//文字内容</span>
              font<span class="token punctuation">,</span>
              Rgba32<span class="token punctuation">.</span>Black<span class="token punctuation">,</span>           <span class="token comment">//文字颜色</span>
              <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//坐标位置（浮点）</span>
       <span class="token punctuation">)</span><span class="token punctuation">;</span>
   image<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Image.Load()获取图片方法的使用，可以直接读取Stream类型的流，也可以根据图片的本地路径获取。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//线上地址的图片，通过获取流的方式读取   </span>
<span class="token class-name">WebRequest</span> imgRequest <span class="token operator">=</span> WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebResponse<span class="token punctuation">)</span>imgRequest<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> image  <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取文字的像素宽度，可以使用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token string">&quot;我是什么长度&quot;</span>； 
<span class="token class-name"><span class="token keyword">var</span></span> size <span class="token operator">=</span> TextMeasurer<span class="token punctuation">.</span><span class="token function">Measure</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RendererOptions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Font</span><span class="token punctuation">(</span>fontfamily<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name"><span class="token keyword">var</span></span> width <span class="token operator">=</span> size<span class="token punctuation">.</span>Width<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图片上加入头像" tabindex="-1"><a class="header-anchor" href="#图片上加入头像"><span>图片上加入头像</span></a></h3><p>在ImageSharp的源码中，发现有画圆形的工具类可以使用，在这里直接copy出来。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp<span class="token punctuation">.</span>PixelFormats</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp<span class="token punctuation">.</span>Processing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>Primitives</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>Shapes</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">CodePicDownload</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CupCircularHelper</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IImageProcessingContext<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span> <span class="token function">ConvertToAvatar</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IImageProcessingContext<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span> processingContext<span class="token punctuation">,</span> <span class="token class-name">Size</span> size<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> cornerRadius<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> processingContext<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResizeOptions</span>
            <span class="token punctuation">{</span>
                Size <span class="token operator">=</span> size<span class="token punctuation">,</span>
                Mode <span class="token operator">=</span> ResizeMode<span class="token punctuation">.</span>Crop
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Apply</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token function">ApplyRoundedCorners</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">// This method can be seen as an inline implementation of an \`IImageProcessor\`:</span>
        <span class="token comment">// (The combination of \`IImageOperations.Apply()\` + this could be replaced with an \`IImageProcessor\`)</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ApplyRoundedCorners</span><span class="token punctuation">(</span><span class="token class-name">Image<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span> img<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> cornerRadius<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IPathCollection</span> corners <span class="token operator">=</span> <span class="token function">BuildCorners</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> img<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> graphicOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsOptions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                AlphaCompositionMode <span class="token operator">=</span> PixelAlphaCompositionMode<span class="token punctuation">.</span>DestOut <span class="token comment">// enforces that any part of this shape that has color is punched out of the background</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">// mutating in here as we already have a cloned original</span>
            <span class="token comment">// use any color (not Transparent), so the corners will be clipped</span>
            img<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>graphicOptions<span class="token punctuation">,</span> Rgba32<span class="token punctuation">.</span>LimeGreen<span class="token punctuation">,</span> corners<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IPathCollection</span> <span class="token function">BuildCorners</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> imageWidth<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> imageHeight<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> cornerRadius<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// first create a square</span>
            <span class="token class-name"><span class="token keyword">var</span></span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RectangularPolygon</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5f</span><span class="token punctuation">,</span> cornerRadius<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// then cut out of the square a circle so we are left with a corner</span>
            <span class="token class-name">IPath</span> cornerTopLeft <span class="token operator">=</span> rect<span class="token punctuation">.</span><span class="token function">Clip</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">EllipsePolygon</span><span class="token punctuation">(</span>cornerRadius <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">,</span> cornerRadius <span class="token operator">-</span> <span class="token number">0.5f</span><span class="token punctuation">,</span> cornerRadius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// corner is now a corner shape positions top left</span>
            <span class="token comment">//lets make 3 more positioned correctly, we can do that by translating the orgional artound the center of the image</span>

            <span class="token class-name"><span class="token keyword">float</span></span> rightPos <span class="token operator">=</span> imageWidth <span class="token operator">-</span> cornerTopLeft<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Width <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">float</span></span> bottomPos <span class="token operator">=</span> imageHeight <span class="token operator">-</span> cornerTopLeft<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token comment">// move it across the width of the image - the width of the shape</span>
            <span class="token class-name">IPath</span> cornerTopRight <span class="token operator">=</span> cornerTopLeft<span class="token punctuation">.</span><span class="token function">RotateDegree</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>rightPos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IPath</span> cornerBottomLeft <span class="token operator">=</span> cornerTopLeft<span class="token punctuation">.</span><span class="token function">RotateDegree</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> bottomPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IPath</span> cornerBottomRight <span class="token operator">=</span> cornerTopLeft<span class="token punctuation">.</span><span class="token function">RotateDegree</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>rightPos<span class="token punctuation">,</span> bottomPos<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathCollection</span><span class="token punctuation">(</span>cornerTopLeft<span class="token punctuation">,</span> cornerBottomLeft<span class="token punctuation">,</span> cornerTopRight<span class="token punctuation">,</span> cornerBottomRight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了画圆形的方法，我们只需要调用ConvertToAvatar() 方法把方形的图片转为圆形，画在图片上即可。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Image<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span> image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;Image/Mud.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> logoWidth <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> logo <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;Image/Logo.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logo<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">ConvertToAvatar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Size</span><span class="token punctuation">(</span>logoWidth<span class="token punctuation">,</span> logoWidth<span class="token punctuation">)</span><span class="token punctuation">,</span> logoWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>logo<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Image<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理二维码的bitmatrix类型" tabindex="-1"><a class="header-anchor" href="#处理二维码的bitmatrix类型"><span>处理二维码的BitMatrix类型</span></a></h3><p>以微信获取的二维码类型为例，因为我的项目中二维码是从微信公众号平台API获取，在这次获取图片中，将BitMatrix类型转换为流的格式从而可以通过Image.Load()方法获取图片信息成为了关键。 在这里我还是引用到了System.Drawing，可以单独提取公用方法。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteToStream</span><span class="token punctuation">(</span><span class="token class-name">BitMatrix</span> QrMatrix<span class="token punctuation">,</span> <span class="token class-name">ImageFormat</span> imageFormat<span class="token punctuation">,</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>imageFormat <span class="token operator">!=</span> ImageFormat<span class="token punctuation">.</span>Exif <span class="token operator">&amp;&amp;</span> imageFormat <span class="token operator">!=</span> ImageFormat<span class="token punctuation">.</span>Icon <span class="token operator">&amp;&amp;</span> imageFormat <span class="token operator">!=</span> ImageFormat<span class="token punctuation">.</span>MemoryBmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">DrawingSize</span> size <span class="token operator">=</span> m_iSize<span class="token punctuation">.</span><span class="token function">GetSize</span><span class="token punctuation">(</span>QrMatrix<span class="token punctuation">?.</span>Width <span class="token operator">??</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>CodeWidth<span class="token punctuation">,</span> size<span class="token punctuation">.</span>CodeWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Graphics</span> graphics <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">Draw</span><span class="token punctuation">(</span>graphics<span class="token punctuation">,</span> QrMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span>
                bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> imageFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样数据就存入了stream中，但直接用ImageSharp去Load处理过的流可能会有些问题，为了保险，我将数据流中的byte取出，实例化了一个新的MemoryStream类型。 这样，就可以获取到二维码的图片了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//Matrix为BitMatrix类型数据，ImageFormat我选择了png类型</span>
<span class="token class-name">MemoryStream</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token function">WriteToStream</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">,</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Png<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>ms<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
ms<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
ms<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> image <span class="token operator">=</span>  Image<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绘制纯色带字图片" tabindex="-1"><a class="header-anchor" href="#绘制纯色带字图片"><span>绘制纯色带字图片</span></a></h3><p>需要引用nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;SixLabors.ImageSharp&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;SixLabors.ImageSharp.Drawing&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Image<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>
	img<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Mutate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> isVercatcal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RichTextOptions</span><span class="token punctuation">(</span>SystemFonts<span class="token punctuation">.</span><span class="token function">CreateFont</span><span class="token punctuation">(</span><span class="token string">&quot;SimHei&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> FontStyle<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			TabWidth <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
			WrappingLength <span class="token operator">=</span> isVercatcal <span class="token punctuation">?</span> <span class="token number">80</span> <span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span>
			HorizontalAlignment <span class="token operator">=</span> HorizontalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">,</span>
			VerticalAlignment <span class="token operator">=</span> VerticalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		ctx<span class="token punctuation">.</span><span class="token function">DrawText</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token string">&quot;秀儿&quot;</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	img<span class="token punctuation">.</span><span class="token function">SaveAsJpeg</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\temp\\\\1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,23),g={href:"https://mp.weixin.qq.com/s/YsRjHEa4YtluxOrL__ZLBQ",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/hellotim/p/14023632.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/-8vfJQgTsAL6mZVCuY3bqg",target:"_blank",rel:"noopener noreferrer"};function f(w,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("ImageSharp 是一个全新的、功能齐全的、完全托管的、跨平台的 2D 图形库。旨在简化图像处理，ImageSharp 为您带来了一个非常强大但非常简单的 API。 github："),n("a",r,[s("https://github.com/SixLabors/ImageSharp"),t(a)]),s(" 官网："),n("a",k,[s("https://docs.sixlabors.com/articles/imagesharp/"),t(a)])]),d,n("p",null,[s("资料："),n("a",m,[s("https://docs.sixlabors.com/articles/imagesharp/resize.html"),t(a)])]),v,n("p",null,[n("a",g,[s("https://mp.weixin.qq.com/s/YsRjHEa4YtluxOrL__ZLBQ"),t(a)]),s(" | .NET Core 使用 ImageSharp 生成图片 合并图片资料："),n("a",b,[s("https://www.cnblogs.com/hellotim/p/14023632.html"),t(a)]),n("a",h,[s("https://mp.weixin.qq.com/s/-8vfJQgTsAL6mZVCuY3bqg"),t(a)]),s(" | ImageSharp.Web实战：轻松搭建高效图片服务")])])}const S=e(l,[["render",f],["__file","imagesharp.html.vue"]]),q=JSON.parse('{"path":"/middleware/tuxiangchuli/imagesharp.html","title":"ImageSharp","lang":"zh-CN","frontmatter":{"title":"ImageSharp","lang":"zh-CN","date":"2023-09-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"imagesharp","slug":"lcq2dc","docsId":"66988977","description":"概述 ImageSharp 是一个全新的、功能齐全的、完全托管的、跨平台的 2D 图形库。旨在简化图像处理，ImageSharp 为您带来了一个非常强大但非常简单的 API。 github：https://github.com/SixLabors/ImageSharp 官网：https://docs.sixlabors.com/articles/ima...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/tuxiangchuli/imagesharp.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"ImageSharp"}],["meta",{"property":"og:description","content":"概述 ImageSharp 是一个全新的、功能齐全的、完全托管的、跨平台的 2D 图形库。旨在简化图像处理，ImageSharp 为您带来了一个非常强大但非常简单的 API。 github：https://github.com/SixLabors/ImageSharp 官网：https://docs.sixlabors.com/articles/ima..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ImageSharp\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[]},{"level":2,"title":"操作示例","slug":"操作示例","link":"#操作示例","children":[{"level":3,"title":"调整图片大小","slug":"调整图片大小","link":"#调整图片大小","children":[]},{"level":3,"title":"图片上标注","slug":"图片上标注","link":"#图片上标注","children":[]},{"level":3,"title":"图片上加入头像","slug":"图片上加入头像","link":"#图片上加入头像","children":[]},{"level":3,"title":"处理二维码的BitMatrix类型","slug":"处理二维码的bitmatrix类型","link":"#处理二维码的bitmatrix类型","children":[]},{"level":3,"title":"绘制纯色带字图片","slug":"绘制纯色带字图片","link":"#绘制纯色带字图片","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.93,"words":1180},"filePathRelative":"middleware/tuxiangchuli/imagesharp.md","localizedDate":"2023年9月17日","excerpt":"<h2>概述</h2>\\n<p>ImageSharp 是一个全新的、功能齐全的、完全托管的、跨平台的 2D 图形库。旨在简化图像处理，ImageSharp 为您带来了一个非常强大但非常简单的 API。\\ngithub：<a href=\\"https://github.com/SixLabors/ImageSharp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/SixLabors/ImageSharp</a>\\n官网：<a href=\\"https://docs.sixlabors.com/articles/imagesharp/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://docs.sixlabors.com/articles/imagesharp/</a></p>","autoDesc":true}');export{S as comp,q as data};
