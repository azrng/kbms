import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as e,a as s,d as n,e as c,b as i}from"./app-qB9_Bjjp.js";const u={},l=i(`<blockquote><p>本文为学习笔记</p></blockquote><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><ul><li>以kevy-value字符串键值对的方式存储配置</li><li>支持从各种不同的数据源读取配置信息</li></ul><p>四个核心接口：IConfiguration、IConfigurationRoot、IConfigurationSection、IConfigurationBuilder 扩展点(注入我们自己的配置源):IConfigurationSource、IConfigurationPrivider</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="配置创建和读取" tabindex="-1"><a class="header-anchor" href="#配置创建和读取"><span>配置创建和读取</span></a></h3><p>新建一个控制台来构建配置源并读取配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IConfigurationBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">AddInMemoryCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;section1:key4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value4&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IConfigurationRoot</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">IConfiguration</span> configuration <span class="token operator">=</span> configurationRoot<span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configuration<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configuration<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取嵌套方式，通过Section分组 </span>
<span class="token class-name"><span class="token keyword">var</span></span> section <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;section1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>section<span class="token punctuation">[</span><span class="token string">&quot;key4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出参数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>value1
value2
value1
value2
value4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过源码看配置读取" tabindex="-1"><a class="header-anchor" href="#通过源码看配置读取"><span>通过源码看配置读取</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IConfigurationBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">AddInMemoryCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;section1:key4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value4&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IConfigurationRoot</span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过该写法我们发现值是从configurationRoot索引器中读取的，我们查看该ConfigurationRoot源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span>IConfigurationProvider<span class="token punctuation">&gt;</span></span> _providers<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token operator">=&gt;</span> ConfigurationRoot<span class="token punctuation">.</span><span class="token function">GetConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_providers<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token operator">=&gt;</span> ConfigurationRoot<span class="token punctuation">.</span><span class="token function">SetConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_providers<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetConfiguration</span><span class="token punctuation">(</span><span class="token class-name">IList<span class="token punctuation">&lt;</span>IConfigurationProvider<span class="token punctuation">&gt;</span></span> providers<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> providers<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>index<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">string</span></span> configuration<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>providers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">TryGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">out</span> configuration<span class="token punctuation">)</span><span class="token punctuation">)</span>
	  <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里我们可以看出这个值是从_providers属性里面获取的，通过循环该值，然后依次通过TryGet去获取值，然后我们看下这个ConfigurationProvider的TryGet方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryGet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Data<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以上面获取值的方法在一个IConfigurationProvider配置提供者的情况下可以写成</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>configurationRoot<span class="token punctuation">.</span>Providers<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">TryGet</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> key1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们引入 &quot;Microsoft.Extensions.Configuration.Binder&quot; nuget包 ，读取配置操作时会发现一些新的方法。 比如配置和强模型绑定,并结合泛型使用 ，如:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过源码看配置写入" tabindex="-1"><a class="header-anchor" href="#通过源码看配置写入"><span>通过源码看配置写入</span></a></h3><p>现在我们需要找Provider中的Data 属性是怎么写入的 ，还从开头的控制台程序入手 ，上面代码中我们讲配置的值给了AddInMemoryCollection，查看ConfigurationBuilder源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IConfigurationBuilder</span> <span class="token function">AddInMemoryCollection</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span> <span class="token class-name">IConfigurationBuilder</span> configurationBuilder<span class="token punctuation">,</span>
  <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> initialData<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>configurationBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span> <span class="token punctuation">(</span>configurationBuilder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  configurationBuilder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IConfigurationSource<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
	InitialData <span class="token operator">=</span> initialData
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> configurationBuilder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了IConfigurationBuilder的Add方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>IConfigurationSource<span class="token punctuation">&gt;</span></span> Sources <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>IList<span class="token operator">&lt;</span>IConfigurationSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IConfigurationSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IConfigurationBuilder</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">IConfigurationSource</span> source<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>Sources<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>IConfigurationBuilder<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们看到这个IConfigurationSource又给了Sources，那么我们看下最后ConfigurationBuilder调用Build方法返回ConfigurationRoot的地方</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IConfigurationRoot</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">List<span class="token punctuation">&lt;</span>IConfigurationProvider<span class="token punctuation">&gt;</span></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IConfigurationProvider<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IConfigurationSource</span> source <span class="token keyword">in</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>IConfigurationSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Sources<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
	<span class="token class-name">IConfigurationProvider</span> configurationProvider <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IConfigurationBuilder<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	providers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>configurationProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>IConfigurationRoot<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationRoot</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IList<span class="token operator">&lt;</span>IConfigurationProvider<span class="token operator">&gt;</span><span class="token punctuation">)</span> providers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们看到又将上面Add时候的Sources值给了providers存储起来，这样子就和我们上面读取的时候接上了。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,29),r={href:"https://www.cnblogs.com/francisXu/p/15563861.html",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=o("ExternalLinkIcon");return p(),e("div",null,[l,s("p",null,[n("极客时间教程 "),s("a",r,[n("https://www.cnblogs.com/francisXu/p/15563861.html"),c(a)]),n(" | .Net Core 配置源码学习 （一） - francisXu - 博客园")])])}const y=t(u,[["render",k],["__file","neicunshujuyuanpeizhi.html.vue"]]),f=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/neicunshujuyuanpeizhi.html","title":"内存数据源配置","lang":"zh-CN","frontmatter":{"title":"内存数据源配置","lang":"zh-CN","date":"2023-09-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"neicunshujuyuanpeizhi","slug":"lfnenh","docsId":"51585041","description":"本文为学习笔记 介绍 以kevy-value字符串键值对的方式存储配置 支持从各种不同的数据源读取配置信息 四个核心接口：IConfiguration、IConfigurationRoot、IConfigurationSection、IConfigurationBuilder 扩展点(注入我们自己的配置源):IConfigurationSource、I...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/neicunshujuyuanpeizhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"内存数据源配置"}],["meta",{"property":"og:description","content":"本文为学习笔记 介绍 以kevy-value字符串键值对的方式存储配置 支持从各种不同的数据源读取配置信息 四个核心接口：IConfiguration、IConfigurationRoot、IConfigurationSection、IConfigurationBuilder 扩展点(注入我们自己的配置源):IConfigurationSource、I..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存数据源配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"配置创建和读取","slug":"配置创建和读取","link":"#配置创建和读取","children":[]},{"level":3,"title":"通过源码看配置读取","slug":"通过源码看配置读取","link":"#通过源码看配置读取","children":[]},{"level":3,"title":"通过源码看配置写入","slug":"通过源码看配置写入","link":"#通过源码看配置写入","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"dotnet/base/peizhikuangjia/zidingyipeizhiyuan/neicunshujuyuanpeizhi.md","localizedDate":"2023年9月25日","excerpt":"<blockquote>\\n<p>本文为学习笔记</p>\\n</blockquote>\\n<h2>介绍</h2>\\n<ul>\\n<li>以kevy-value字符串键值对的方式存储配置</li>\\n<li>支持从各种不同的数据源读取配置信息</li>\\n</ul>\\n<p>四个核心接口：IConfiguration、IConfigurationRoot、IConfigurationSection、IConfigurationBuilder\\n扩展点(注入我们自己的配置源):IConfigurationSource、IConfigurationPrivider</p>\\n<h2>操作</h2>\\n<h3>配置创建和读取</h3>","autoDesc":true}');export{y as comp,f as data};
