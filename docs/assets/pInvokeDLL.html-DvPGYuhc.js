import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const e="/kbms/common/3089082-20230329095716796-1581020064.png",p="/kbms/common/3089082-20230329095725016-1392588948.png",o="/kbms/common/3089082-20230329095732290-1263354054.png",c="/kbms/common/3089082-20230329095744430-1061697530.png",i={},l=t(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>本编所涉及到的工具以及框架： 1、Visual Studio 2022 2、.net 6.0</p></div><h2 id="p-invok是什么" tabindex="-1"><a class="header-anchor" href="#p-invok是什么"><span>P/Invok是什么？</span></a></h2><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>P/Invoke全称为Platform <span class="token function">Invoke</span><span class="token punctuation">(</span>平台调用<span class="token punctuation">)</span>，其实际上就是一种函数调用机制，通过P/Invoke就可以实现调用非托管Dll中的函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="在开始之前-我们首先需要了解c-中有关托管与非托管的区别" tabindex="-1"><a class="header-anchor" href="#在开始之前-我们首先需要了解c-中有关托管与非托管的区别"><span>在开始之前，我们首先需要了解C#中有关托管与非托管的区别</span></a></h2><div class="language-undefined line-numbers-mode" data-ext="undefined" data-title="undefined"><pre class="language-undefined"><code>托管（Collocation），即在程序运行时会自动释放内存;
非托管，即在程序运行时不会自动释放内存。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="废话不多说-直接实操" tabindex="-1"><a class="header-anchor" href="#废话不多说-直接实操"><span>废话不多说，直接实操</span></a></h2><h3 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步"><span>第一步：</span></a></h3><ol><li><p>打开VS2022，新建一个C#控制台应用 <img src="`+e+'" alt="img" loading="lazy"></p></li><li><p>右击解决方案，添加一个新建项，新建一个&quot;动态链接库（DLL）&quot;，新建完之后需要右击当前项目--&gt; 属性 --&gt; C/C++ --&gt; 预编译头 --&gt; 选择&quot;不使用编译头&quot;</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>在新建的DLL中我们新建一个头文件，用于编写我们的方法定义，然后再次新建一个C++文件，后缀以.c 结尾</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ol><h3 id="第二步" tabindex="-1"><a class="header-anchor" href="#第二步"><span>第二步：</span></a></h3><ol><li><p>在我们DLL中的头文件(Native.h)中定义相关的Test方法，具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">// 定义一些宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTERN</span> <span class="token expression"><span class="token keyword">extern</span> </span><span class="token string">&quot;C&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTERN</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CallingConvention</span> <span class="token expression">_cdecl</span></span>

<span class="token comment">// 判断用户是否有输入，从而定义区分使用dllimport还是dllexport</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DLL_IMPORT </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HEAD</span> <span class="token expression">EXTERN <span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">HEAD</span> <span class="token expression">EXTERN <span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

HEAD <span class="token keyword">int</span> CallingConvention <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>之后需要去实现头文件中的方法，在Native.c中实现，具体实现如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Native.h&quot;</span> <span class="token comment">// 导入头部文件</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>

HEAD <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在这些步骤做完后，可以尝试生成解决方案，检查是否报错，没有报错之后，将进入项目文件中，检查是否生成DLL (../x64/Debug)</p><figure><img src="`+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ol><h3 id="第三步" tabindex="-1"><a class="header-anchor" href="#第三步"><span>第三步:</span></a></h3><ol><li><p>在这里之后，就可以在C#中去尝试调用刚刚所声明的方法，以便验证是否调用DLL成功，其具体实现如下：</p><div class="language-Csharp line-numbers-mode" data-ext="Csharp" data-title="Csharp"><pre class="language-Csharp"><code>using System.Runtime.InteropServices;

class Program
{
    [DllImport(@&quot;C:\\My_project\\C#_Call_C\\CSharp_P_Invoke_Dll\\x64\\Debug\\NativeDll.dll&quot;)]
    public static extern int Add(int a, int b);

    public static void Main(string[] args)
    {
        int sum = Add(23, 45);
        Console.WriteLine(sum);
        Console.ReadKey();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果为：<code>68</code>，证明我们成功调用了DLL动态链库</p></li></ol><h2 id="c-中通过p-invoke调用dll动态链库的流程" tabindex="-1"><a class="header-anchor" href="#c-中通过p-invoke调用dll动态链库的流程"><span>C#中通过P/Invoke调用DLL动态链库的流程</span></a></h2><p>通过上述一个简单的例子，我们大致了解到了在C#中通过P/Invoke调用DLL动态链库的流程，接下我们将对C#中的代码块做一些改动，便于维护</p><ol><li><p>在改动中我们将用到<code>NativeLibrary</code>类中的一个方法，用于设置回调，解析从程序集进行的本机库导入，并实现通过设置DLL的相对路径进行加载，其方法如下：</p><div class="language-Csharp line-numbers-mode" data-ext="Csharp" data-title="Csharp"><pre class="language-Csharp"><code>public static void SetDllImportResolver (System.Reflection.Assembly assembly, System.Runtime.InteropServices.DllImportResolver resolver);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在使用这个方法前，先查看一下其参数</p><p>a、assembly: 主要是获取包含当前正在执行的代码的程序集（不过多讲解）</p><p>b、resolber: 此参数是我们要注重实现的，我们可以通过查看他的元代码，发现其实现的是一个委托，因此我们对其进行实现。</p><p>原始方法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">DllImportResolver</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> libraryName<span class="token punctuation">,</span> <span class="token class-name">Assembly</span> assembly<span class="token punctuation">,</span> <span class="token class-name">DllImportSearchPath<span class="token punctuation">?</span></span> searchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实现resolver方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> NativeLib <span class="token operator">=</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">DllImportResolver</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> libraryName<span class="token punctuation">,</span> <span class="token class-name">Assembly</span> assembly<span class="token punctuation">,</span> <span class="token class-name">DllImportSearchPath<span class="token punctuation">?</span></span> searchPath<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> dll <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory<span class="token punctuation">)</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;x64&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Release&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处为Dll的路径</span>
    <span class="token comment">//Console.WriteLine(dll);</span>
    <span class="token keyword">return</span> libraryName <span class="token keyword">switch</span>
    <span class="token punctuation">{</span>
        NativeLib <span class="token operator">=&gt;</span> NativeLibrary<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>dll<span class="token punctuation">,</span> assembly<span class="token punctuation">,</span> searchPath<span class="token punctuation">)</span><span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> IntPtr<span class="token punctuation">.</span>Zero
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法主要是用于区分在加载DLL时不一定只能是设置绝对路径，也可以使用相对路径对其加载，本区域代码是通过使用委托去实现加载相对路径对其DLL加载，这样做的好处是，便于以后需要更改DLL的路径时，只需要在这个方法中对其相对路径进行修改即可。</p></li><li><p>更新C#中的代码，其代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> NativeLib <span class="token operator">=</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span>NativeLib<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">DllImportResolver</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> libraryName<span class="token punctuation">,</span> <span class="token class-name">Assembly</span> assembly<span class="token punctuation">,</span> <span class="token class-name">DllImportSearchPath<span class="token punctuation">?</span></span> searchPath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> dll <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory<span class="token punctuation">)</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;x64&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Release&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dll<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> libraryName <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            NativeLib <span class="token operator">=&gt;</span> NativeLibrary<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>dll<span class="token punctuation">,</span> assembly<span class="token punctuation">,</span> searchPath<span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> IntPtr<span class="token punctuation">.</span>Zero
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NativeLibrary<span class="token punctuation">.</span><span class="token function">SetDllImportResolver</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DllImportResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后重新编译，检查其是否能顺利编译通过，最终我们的到的结果为：<code>68</code></p></li></ol><h2 id="至此-我们就完成了一个简单的c-调用动态链接库的案例" tabindex="-1"><a class="header-anchor" href="#至此-我们就完成了一个简单的c-调用动态链接库的案例"><span>至此，我们就完成了一个简单的C#调用动态链接库的案例</span></a></h2><p>下面将通过一个具体实例，讲述为什么要这样做？（本实例通过从性能方面进行对比）</p><ol><li><p>在DLL中的头文件中，加入如下代码：</p><div class="language-Csharp line-numbers-mode" data-ext="Csharp" data-title="Csharp"><pre class="language-Csharp"><code>HEAD void CBubbleSort(int* array, int length);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在.c文件中加入如下代码：</p><div class="language-C line-numbers-mode" data-ext="C" data-title="C"><pre class="language-C"><code>HEAD void CBubbleSort(int* array, int length)
{
    int temp = 0;
    for (int i = 0; i &lt; length; i++)
    {
        for (int j = i + 1; j &lt; length; j++)
        {
            if (array[i] &gt; array[j])
            {
                temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C#中的代码修改：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> NativeLib <span class="token operator">=</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span>NativeLib<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CBubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">DllImportResolver</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> libraryName<span class="token punctuation">,</span> <span class="token class-name">Assembly</span> assembly<span class="token punctuation">,</span> <span class="token class-name">DllImportSearchPath<span class="token punctuation">?</span></span> searchPath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> dll <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory<span class="token punctuation">)</span><span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;x64&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Release&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NativeDll.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Console.WriteLine(dll);</span>
        <span class="token keyword">return</span> libraryName <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            NativeLib <span class="token operator">=&gt;</span> NativeLibrary<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>dll<span class="token punctuation">,</span> assembly<span class="token punctuation">,</span> searchPath<span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> IntPtr<span class="token punctuation">.</span>Zero
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">unsafe</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> cSharpResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">//随机生成num数量个（0-10000）的数字</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//利用冒泡排序对其数组进行排序</span>
        <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cSharpResult<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cSharpResult <span class="token operator">=</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>cSharpResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;\\n C#实现排序所耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用Dll中的冒泡排序算法</span>
        NativeLibrary<span class="token punctuation">.</span><span class="token function">SetDllImportResolver</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DllImportResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sw<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">CBubbleSort</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;\\n C实现排序所耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">//冒泡排序算法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行结果:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>C<span class="token comment">#实现排序所耗时: 130ms</span>
C实现排序所耗时：3ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现本案例中，可能在编译后，大家所看到的结果不是很出乎意料，但这只是一种案例，希望通过此案例的分析，能给大家带来一些意想不到的收获叭。</p></li></ol><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>简单做一下总结叭，通过上述所描述的从第一步如何创建一个DLL到如何通过C#去调用的一个简单实例，也应该能给正在查阅相关资料的你有所收获，也希望能给在这方面有所研究的你有一些相关的启发，同时也希望能给目前对这方面毫无了解的你有一个更进一步的学习。</p><p>作者：百宝门-刘忠帅</p><p>原文地址：https://blog.baibaomen.com/p-invoke之c调用动态链接库dll/</p>`,22),u=[l];function r(k,d){return s(),a("div",null,u)}const b=n(i,[["render",r],["__file","pInvokeDLL.html.vue"]]),g=JSON.parse('{"path":"/dotnet/chengxujicaozuo/pInvokeDLL.html","title":"P/Invoke之C#调用动态链接库DLL","lang":"zh-CN","frontmatter":{"title":"P/Invoke之C#调用动态链接库DLL","lang":"zh-CN","date":"2023-08-12T00:00:00.000Z","publish":true,"author":"baibaomen-org","isOriginal":false,"category":["dotNet"],"tag":["pInvoke","DLL"],"filename":"pInvokeDLL","docsId":"13b2dcb3-ad4e-4e23-9b27-5cb195dd38a9","description":"提示 本编所涉及到的工具以及框架： 1、Visual Studio 2022 2、.net 6.0 P/Invok是什么？ 在开始之前，我们首先需要了解C#中有关托管与非托管的区别 废话不多说，直接实操 第一步： 打开VS2022，新建一个C#控制台应用 img 右击解决方案，添加一个新建项，新建一个\\"动态链接库（DLL）\\"，新建完之后需要右击当前项目...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/chengxujicaozuo/pInvokeDLL.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"P/Invoke之C#调用动态链接库DLL"}],["meta",{"property":"og:description","content":"提示 本编所涉及到的工具以及框架： 1、Visual Studio 2022 2、.net 6.0 P/Invok是什么？ 在开始之前，我们首先需要了解C#中有关托管与非托管的区别 废话不多说，直接实操 第一步： 打开VS2022，新建一个C#控制台应用 img 右击解决方案，添加一个新建项，新建一个\\"动态链接库（DLL）\\"，新建完之后需要右击当前项目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/3089082-20230329095716796-1581020064.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-29T03:06:47.000Z"}],["meta",{"property":"article:author","content":"baibaomen-org"}],["meta",{"property":"article:tag","content":"pInvoke"}],["meta",{"property":"article:tag","content":"DLL"}],["meta",{"property":"article:published_time","content":"2023-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-29T03:06:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"P/Invoke之C#调用动态链接库DLL\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/3089082-20230329095716796-1581020064.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/3089082-20230329095725016-1392588948.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/3089082-20230329095732290-1263354054.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/3089082-20230329095744430-1061697530.png\\"],\\"datePublished\\":\\"2023-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-29T03:06:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"baibaomen-org\\"}]}"]]},"headers":[{"level":2,"title":"P/Invok是什么？","slug":"p-invok是什么","link":"#p-invok是什么","children":[]},{"level":2,"title":"在开始之前，我们首先需要了解C#中有关托管与非托管的区别","slug":"在开始之前-我们首先需要了解c-中有关托管与非托管的区别","link":"#在开始之前-我们首先需要了解c-中有关托管与非托管的区别","children":[]},{"level":2,"title":"废话不多说，直接实操","slug":"废话不多说-直接实操","link":"#废话不多说-直接实操","children":[{"level":3,"title":"第一步：","slug":"第一步","link":"#第一步","children":[]},{"level":3,"title":"第二步：","slug":"第二步","link":"#第二步","children":[]},{"level":3,"title":"第三步:","slug":"第三步","link":"#第三步","children":[]}]},{"level":2,"title":"C#中通过P/Invoke调用DLL动态链库的流程","slug":"c-中通过p-invoke调用dll动态链库的流程","link":"#c-中通过p-invoke调用dll动态链库的流程","children":[]},{"level":2,"title":"至此，我们就完成了一个简单的C#调用动态链接库的案例","slug":"至此-我们就完成了一个简单的c-调用动态链接库的案例","link":"#至此-我们就完成了一个简单的c-调用动态链接库的案例","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1691808880000,"updatedTime":1698548807000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.72,"words":1717},"filePathRelative":"dotnet/chengxujicaozuo/pInvokeDLL.md","localizedDate":"2023年8月12日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本编所涉及到的工具以及框架：\\n1、Visual Studio 2022\\n2、.net 6.0</p>\\n</div>\\n<h2>P/Invok是什么？</h2>\\n<div class=\\"language-css\\" data-ext=\\"css\\" data-title=\\"css\\"><pre class=\\"language-css\\"><code>P/Invoke全称为Platform <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span>平台调用<span class=\\"token punctuation\\">)</span>，其实际上就是一种函数调用机制，通过P/Invoke就可以实现调用非托管Dll中的函数。\\n</code></pre></div>","autoDesc":true}');export{b as comp,g as data};
