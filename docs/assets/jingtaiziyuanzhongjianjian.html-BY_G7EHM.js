import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-qB9_Bjjp.js";const e="/kbms/common/1633250518150-ceff440d-6252-4b12-84f3-6fbba6e9db85.png",p={},o=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>静态文件都存储在Core Web根目录中。默认目录是&lt;content_root&gt;/wwwroot，但可通过 UseWebRoot方法更改访问目录。而content_root是指web项目的所有文件夹，包括bin和wwwroot文件夹。</p><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><ul><li>支持指定相对路径</li><li>支持目录浏览</li><li>支持设置默认文档</li><li>支持多目录映射</li></ul><h2 id="资源操作" tabindex="-1"><a class="header-anchor" href="#资源操作"><span>资源操作</span></a></h2><h3 id="简单配置" tabindex="-1"><a class="header-anchor" href="#简单配置"><span>简单配置</span></a></h3><p>在Configure方法中设置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认静态文件目录是wwwroot</span>

<span class="token comment">//特殊配置</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticFileOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ServeUnknownFileTypes <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//是否可以访问不知道的文件类型</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改静态文件目录" tabindex="-1"><a class="header-anchor" href="#修改静态文件目录"><span>修改静态文件目录</span></a></h3><p>在Configure方法中设置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">StaticFiles</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 私有方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>StaticFiles方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 设置静态文件目录</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>env<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StaticFiles</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会先去该目录查找文件，找不到了会查找下面的配置</span>

    <span class="token comment">//静态文件重载</span>
    app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticFileOptions</span>
    <span class="token punctuation">{</span>
        FileProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> <span class="token string">&quot;Upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//将目录切换到静态文件所在目录</span>
        RequestPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathString</span><span class="token punctuation">(</span><span class="token string">&quot;/fileupload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//虚拟路径用来访问静态文件（真正的访问目录）</span>
        OnPrepareResponse <span class="token operator">=</span> ctx <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> cacheControl <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment">//设置缓存静态文件的时间</span>
            <span class="token class-name"><span class="token keyword">var</span></span> headers <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">GetTypedHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            headers<span class="token punctuation">.</span>CacheControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CacheControlHeaderValue</span>
            <span class="token punctuation">{</span>
                MaxAge <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在项目目录下的Upload文件夹下新建一个1.txt文件，这个时候我们启动项目，就可以通过地址：http://localhost:8001/fileupload/1.txt 获取文件的内容。</p><h3 id="启动访问目录" tabindex="-1"><a class="header-anchor" href="#启动访问目录"><span>启动访问目录</span></a></h3><p>ConfigureServices中注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddDirectoryBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Configure中启动目录浏览中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseDirectoryBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>浏览展示效果 <img src="`+e+`" alt="image.png" loading="lazy"></p><h3 id="设置请求路径重写" tabindex="-1"><a class="header-anchor" href="#设置请求路径重写"><span>设置请求路径重写</span></a></h3><p>如果请求的地址不是api开头，那么就重写路径转到一个默认的html界面</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">MapWhen</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> <span class="token operator">!</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appBuilder <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RewriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    option<span class="token punctuation">.</span><span class="token function">AddRewrite</span><span class="token punctuation">(</span><span class="token string">&quot;.*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/index.html&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    appBuilder<span class="token punctuation">.</span><span class="token function">UseRewriter</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>
    appBuilder<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果访问的是包含api的，那么就不能访问到静态文件。</p><h2 id="文件提供程序核心" tabindex="-1"><a class="header-anchor" href="#文件提供程序核心"><span>文件提供程序核心</span></a></h2><h3 id="physicalfileprovider" tabindex="-1"><a class="header-anchor" href="#physicalfileprovider"><span>PhysicalFileProvider</span></a></h3><p>物理文件提供程序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IFileProvider</span> provider1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> contents <span class="token operator">=</span> provider1<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> contents<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;我的文件名是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">,我是否是目录</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>IsDirectory</span><span class="token punctuation">}</span></span><span class="token string">,最后修改时间</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>LastModified</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="embeddedfileprovider" tabindex="-1"><a class="header-anchor" href="#embeddedfileprovider"><span>EmbeddedFileProvider</span></a></h3><p>通过嵌入式读取来获取编译时候构建到我们程序集里面的资源 添加一个html文件，并且右键属性设置生成操作为嵌入式资源</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">EmbeddedResource</span> Include<span class="token operator">=</span><span class="token string">&quot;index.html&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装组件包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.FileProviders.Embedded&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.10&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IFileProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EmbeddedFileProvider</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前嵌入的文件名是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">html<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compositefileprovider" tabindex="-1"><a class="header-anchor" href="#compositefileprovider"><span>CompositeFileProvider</span></a></h3><p>组合文件提供程序，就是将各种文件提供程序组合成一个目录来访问 在上面的基础上安装组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.FileProviders.Composite&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>展示代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IFileProvider</span> provider1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> contents <span class="token operator">=</span> provider1<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> contents<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;我的文件名是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">,我是否是目录</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>IsDirectory</span><span class="token punctuation">}</span></span><span class="token string">,最后修改时间</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>LastModified</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">IFileProvider</span> provider2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EmbeddedFileProvider</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> provider2<span class="token punctuation">.</span><span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>html<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前嵌入的文件名是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">html<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">IFileProvider</span> provider3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompositeFileProvider</span><span class="token punctuation">(</span>provider1<span class="token punctuation">,</span> provider2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> contents3 <span class="token operator">=</span> provider3<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> contents3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;我的文件名是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">,我是否是目录</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>IsDirectory</span><span class="token punctuation">}</span></span><span class="token string">,最后修改时间</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>LastModified</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提高：可以通过配置远程oss文件给CompositeFileProvider来实现就仿佛调用本地方法一样的效果。</p></blockquote><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>极客时间教程</p>`,43),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","jingtaiziyuanzhongjianjian.html.vue"]]),m=JSON.parse('{"path":"/dotnet/base/zhongjianjian/jingtaiziyuanzhongjianjian/jingtaiziyuanzhongjianjian.html","title":"静态资源中间件","lang":"zh-CN","frontmatter":{"title":"静态资源中间件","lang":"zh-CN","date":"2023-06-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jingtaiziyuanzhongjianjian","slug":"qfh3d1","docsId":"30977155","description":"介绍 静态文件都存储在Core Web根目录中。默认目录是<content_root>/wwwroot，但可通过 UseWebRoot方法更改访问目录。而content_root是指web项目的所有文件夹，包括bin和wwwroot文件夹。 目的 支持指定相对路径 支持目录浏览 支持设置默认文档 支持多目录映射 资源操作 简单配置 在Configure...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/zhongjianjian/jingtaiziyuanzhongjianjian/jingtaiziyuanzhongjianjian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"静态资源中间件"}],["meta",{"property":"og:description","content":"介绍 静态文件都存储在Core Web根目录中。默认目录是<content_root>/wwwroot，但可通过 UseWebRoot方法更改访问目录。而content_root是指web项目的所有文件夹，包括bin和wwwroot文件夹。 目的 支持指定相对路径 支持目录浏览 支持设置默认文档 支持多目录映射 资源操作 简单配置 在Configure..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1633250518150-ceff440d-6252-4b12-84f3-6fbba6e9db85.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"静态资源中间件\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1633250518150-ceff440d-6252-4b12-84f3-6fbba6e9db85.png\\"],\\"datePublished\\":\\"2023-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"资源操作","slug":"资源操作","link":"#资源操作","children":[{"level":3,"title":"简单配置","slug":"简单配置","link":"#简单配置","children":[]},{"level":3,"title":"修改静态文件目录","slug":"修改静态文件目录","link":"#修改静态文件目录","children":[]},{"level":3,"title":"启动访问目录","slug":"启动访问目录","link":"#启动访问目录","children":[]},{"level":3,"title":"设置请求路径重写","slug":"设置请求路径重写","link":"#设置请求路径重写","children":[]}]},{"level":2,"title":"文件提供程序核心","slug":"文件提供程序核心","link":"#文件提供程序核心","children":[{"level":3,"title":"PhysicalFileProvider","slug":"physicalfileprovider","link":"#physicalfileprovider","children":[]},{"level":3,"title":"EmbeddedFileProvider","slug":"embeddedfileprovider","link":"#embeddedfileprovider","children":[]},{"level":3,"title":"CompositeFileProvider","slug":"compositefileprovider","link":"#compositefileprovider","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.82,"words":846},"filePathRelative":"dotnet/base/zhongjianjian/jingtaiziyuanzhongjianjian/jingtaiziyuanzhongjianjian.md","localizedDate":"2023年6月27日","excerpt":"<h2>介绍</h2>\\n<p>静态文件都存储在Core Web根目录中。默认目录是&lt;content_root&gt;/wwwroot，但可通过 UseWebRoot方法更改访问目录。而content_root是指web项目的所有文件夹，包括bin和wwwroot文件夹。</p>\\n<h2>目的</h2>\\n<ul>\\n<li>支持指定相对路径</li>\\n<li>支持目录浏览</li>\\n<li>支持设置默认文档</li>\\n<li>支持多目录映射</li>\\n</ul>\\n<h2>资源操作</h2>\\n<h3>简单配置</h3>\\n<p>在Configure方法中设置</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseStaticFiles</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//默认静态文件目录是wwwroot</span>\\n\\n<span class=\\"token comment\\">//特殊配置</span>\\napp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseStaticFiles</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StaticFileOptions</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    ServeUnknownFileTypes <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span> <span class=\\"token comment\\">//是否可以访问不知道的文件类型</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,m as data};
