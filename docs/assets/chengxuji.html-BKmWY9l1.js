import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,b as e}from"./app-DMmdIwn0.js";const t={},p=e(`<h2 id="程序集别名" tabindex="-1"><a class="header-anchor" href="#程序集别名"><span>程序集别名</span></a></h2><p>使用场景：当你使用的一个开源项目中他依赖一个程序集，然后这个程序集刚好也是你的依赖项，但是这两个程序集的版本不一样，这个时候你就会遇到这个问题</p><p>当你现在有一个程序A，它引用了两个类库B和C，这个B和C的程序集名称一样，项目文件如下配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>net7<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ImplicitUsings<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>ImplicitUsings<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Nullable<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>Nullable<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>RootNamespace<span class="token operator">&gt;</span>ClassLibrarySample<span class="token operator">&lt;</span><span class="token operator">/</span>RootNamespace<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候当我们这两个类库里面包含相同的类的时候，我们实例化类的时候会提示该类在两个类库中同时存在，所以这时候我们可以为程序集设置别名来处理该方案，原来的引用方式是这样子的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">ProjectReference</span> Include<span class="token operator">=</span><span class="token string">&quot;..\\ClassLibrary1\\ClassLibrary1.csproj&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">ProjectReference</span> Include<span class="token operator">=</span><span class="token string">&quot;..\\ClassLibrary2\\ClassLibrary2.csproj&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以进行别名设置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">ProjectReference</span> Include<span class="token operator">=</span><span class="token string">&quot;..\\ClassLibrary1\\ClassLibrary1.csproj&quot;</span> <span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Aliases<span class="token operator">&gt;</span>ClassLibrary1<span class="token operator">&lt;</span><span class="token operator">/</span>Aliases<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ProjectReference<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">ProjectReference</span> Include<span class="token operator">=</span><span class="token string">&quot;..\\ClassLibrary2\\ClassLibrary2.csproj&quot;</span> <span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Aliases<span class="token operator">&gt;</span>ClassLibrary2<span class="token operator">&lt;</span><span class="token operator">/</span>Aliases<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ProjectReference<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用的方法就变成了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">extern</span> <span class="token keyword">alias</span> ClassLibrary1<span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> classHandler <span class="token operator">=</span> <span class="token keyword">new</span> ClassLibrary1<span class="token punctuation">::</span>ClassLibrarySample<span class="token punctuation">.</span><span class="token function">Class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="判断文件是否为程序集" tabindex="-1"><a class="header-anchor" href="#判断文件是否为程序集"><span>判断文件是否为程序集</span></a></h3><p>之前版本</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsAssembly</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Assembly<span class="token punctuation">.</span><span class="token function">ReflectionOnlyLoadFrom</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在.Netcore中可以使用下面方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 判断file这个文件是否是程序集</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsManagedAssembly</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenRead</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> peReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PEReader</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> peReader<span class="token punctuation">.</span>HasMetadata <span class="token operator">&amp;&amp;</span> peReader<span class="token punctuation">.</span><span class="token function">GetMetadataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsAssembly<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function l(c,r){return a(),n("div",null,o)}const d=s(t,[["render",l],["__file","chengxuji.html.vue"]]),k=JSON.parse('{"path":"/dotnet/base/chengxuji.html","title":"程序集","lang":"zh-CN","frontmatter":{"title":"程序集","lang":"zh-CN","date":"2023-10-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"chengxuji","slug":"next5xe1nd5pc6fu","docsId":"142193965","description":"程序集别名 使用场景：当你使用的一个开源项目中他依赖一个程序集，然后这个程序集刚好也是你的依赖项，但是这两个程序集的版本不一样，这个时候你就会遇到这个问题 当你现在有一个程序A，它引用了两个类库B和C，这个B和C的程序集名称一样，项目文件如下配置 这个时候当我们这两个类库里面包含相同的类的时候，我们实例化类的时候会提示该类在两个类库中同时存在，所以这时...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/chengxuji.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"程序集"}],["meta",{"property":"og:description","content":"程序集别名 使用场景：当你使用的一个开源项目中他依赖一个程序集，然后这个程序集刚好也是你的依赖项，但是这两个程序集的版本不一样，这个时候你就会遇到这个问题 当你现在有一个程序A，它引用了两个类库B和C，这个B和C的程序集名称一样，项目文件如下配置 这个时候当我们这两个类库里面包含相同的类的时候，我们实例化类的时候会提示该类在两个类库中同时存在，所以这时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"程序集别名","slug":"程序集别名","link":"#程序集别名","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"判断文件是否为程序集","slug":"判断文件是否为程序集","link":"#判断文件是否为程序集","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.33,"words":399},"filePathRelative":"dotnet/base/chengxuji.md","localizedDate":"2023年10月13日","excerpt":"<h2>程序集别名</h2>\\n<p>使用场景：当你使用的一个开源项目中他依赖一个程序集，然后这个程序集刚好也是你的依赖项，但是这两个程序集的版本不一样，这个时候你就会遇到这个问题</p>\\n<p>当你现在有一个程序A，它引用了两个类库B和C，这个B和C的程序集名称一样，项目文件如下配置</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span>PropertyGroup<span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span>TargetFramework<span class=\\"token operator\\">&gt;</span>net7<span class=\\"token punctuation\\">.</span><span class=\\"token number\\">0</span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>TargetFramework<span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span>ImplicitUsings<span class=\\"token operator\\">&gt;</span>enable<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>ImplicitUsings<span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span>Nullable<span class=\\"token operator\\">&gt;</span>enable<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>Nullable<span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span>RootNamespace<span class=\\"token operator\\">&gt;</span>ClassLibrarySample<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>RootNamespace<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>PropertyGroup<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
