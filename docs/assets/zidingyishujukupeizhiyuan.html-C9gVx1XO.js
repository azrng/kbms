import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,e as s,f as c,d as i}from"./app-CBxp4zeL.js";const l={},u=i(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>创建一个自定义配置提供程序，从数据库读取我们的配置</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="初始化数据库" tabindex="-1"><a class="header-anchor" href="#初始化数据库"><span>初始化数据库</span></a></h3><p>在我们开始之前，我们需要先安装两个 Nuget 包：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer <span class="token operator">-</span>v <span class="token number">3.1</span><span class="token number">.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们需要这个包，因为我们将使用 SQL Server 实例，并且：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Tools <span class="token operator">-</span>v <span class="token number">3.1</span><span class="token number">.7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为我们将通过 CLI 执行数据库的初始创建和迁移。 我们需要一个包含键值配置对的类（Models 文件夹）：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationEntity</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和一个DbContext类（模型文件夹）：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ConfigurationDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions</span> options<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>ConfigurationEntity<span class="token punctuation">&gt;</span></span> ConfigurationEntities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要一个DbSet的ConfigurationEntity，这将映射到我们的数据库中的表。 现在我们只需要ConfigureServices()在Startup类中的方法中建立到我们的服务器的连接：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
    opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，您需要将appsettings.json文件中的连接字符串更改为您的数据库。如果您使用的是 SqlExpress，它很可能如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;ConnectionStrings&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;server=.\\\\SQLEXPRESS; database=CodeMazeCommerce; Integrated Security=true&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这样，现在我们可以简单地通过包管理器控制台添加初始迁移： PM&gt; Add-Migration InitialSetup 并将该迁移应用于数据库： Update-Database 现在我们的数据库已创建并准备好用于存储配置数据。</p><h3 id="实现自定义efcore提供程序" tabindex="-1"><a class="header-anchor" href="#实现自定义efcore提供程序"><span>实现自定义EFCore提供程序</span></a></h3><p>首先，让我们在 Models 文件夹中创建一个文件夹 ConfigurationProviders，以便正确地对我们的类进行分组。 之后，我们需要通过继承ConfigurationProvider类来实际创建一个配置提供者。我们将在ConfigurationProviders文件夹中创建我们自己的提供程序类并将其命名为EFConfigurationProvider：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EFConfigurationProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ConfigurationProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">EFConfigurationProvider</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> optionsAction<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        OptionsAction <span class="token operator">=</span> optionsAction<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> OptionsAction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DbContextOptionsBuilder<span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">OptionsAction</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationDbContext</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Data <span class="token operator">=</span> <span class="token operator">!</span>dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">?</span> <span class="token function">CreateAndSaveDefaultValues</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">)</span>
                <span class="token punctuation">:</span> dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">CreateAndSaveDefaultValues</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationDbContext</span> dbContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> configValues <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:WelcomeMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Welcome to the ProjectConfigurationDemo Home Page&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:ShowWelcomeMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:Color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:UseRandomTitleColor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

        dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>configValues
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>kvp <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationEntity</span>
            <span class="token punctuation">{</span>
                Key <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
                Value <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> configValues<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这门课乍一看可能有点吓人，但其实没那么吓人。 构造函数有一个参数，即委托<code>Action&lt;DbContextOptionsBuilder&gt;</code> optionsAction。稍后我们将使用DbContextOptionsBuilder该类为我们的数据库定义上下文。我们之前定义连接字符串时已经完成了。我们公开了上下文选项构建器，以便向我们的自定义提供程序提供该选项。 我们正在重写该Load()方法，以便ConfigurationEntity使用数据库中的数据填充我们的方法，或者如果数据库表为空，则创建一些默认的方法。这里的所有都是它的。 接下来，我们要将我们的配置提供程序注册为源。为了做到这一点，我们需要实现IConfigurationSource接口。所以让我们EFConfigurationSource在ConfigurationProviders文件夹中创建类：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EFConfigurationSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IConfigurationSource</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> _optionsAction<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">EFConfigurationSource</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> optionsAction<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _optionsAction <span class="token operator">=</span> optionsAction<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IConfigurationProvider</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EFConfigurationProvider</span><span class="token punctuation">(</span>_optionsAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要实现该Build()方法，在我们的例子中，它会初始化配置，其中包含我们通过配置源构造函数发送的选项。 这看起来真的很令人困惑，所以让我们看看如何将我们的数据库配置提供程序添加到配置源列表中。我们将以与以前类似的方式进行：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> configBuilder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> configSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EFConfigurationSource</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
                opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            configBuilder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>configSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，我们正在构建配置构建器以获取IConfiguration. 我们需要它，因为我们的连接字符串存储在appsettings.json文件中。现在我们可以使用该连接字符串创建一个配置源，并使用该configBuilder.Add()方法将其添加到现有配置源中。 现在我们要稍微清除一下 appsettings.json 文件：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;Logging&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;LogLevel&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Default&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Microsoft&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Information&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;ConnectionStrings&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;server=.\\\\SQLEXPRESS; database=CodeMazeCommerce; Integrated Security=true&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;AllowedHosts&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们删除了“页面”部分以确保它是从数据库中读取的。 我们需要删除AddDbContext()我们之前在 Startup 类中使用的方法，因为它不再需要了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//remove!!!</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span>
            opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于本示例不需要任何迁移，因此请通过 SQL Management Studio 或通过 SQL Server 对象资源管理器手动创建一个名为“CodeMazeCommerce”的数据库。 就是这样，让我们运行应用程序。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,30),r={href:"https://mp.weixin.qq.com/s/LmZeBUxgcPi2QBKtx9bnJg",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/LmZeBUxgcPi2QBKtx9bnJg"),c(a)]),s(" | ASP.NET Core 配置 - 创建自定义配置提供程序")])])}const b=t(l,[["render",d],["__file","zidingyishujukupeizhiyuan.html.vue"]]),h=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyishujukupeizhiyuan.html","title":"自定义数据库配置源","lang":"zh-CN","frontmatter":{"title":"自定义数据库配置源","lang":"zh-CN","date":"2023-03-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"zidingyishujukupeizhiyuan","slug":"rngtdq","docsId":"65369120","description":"目的 创建一个自定义配置提供程序，从数据库读取我们的配置 操作 初始化数据库 在我们开始之前，我们需要先安装两个 Nuget 包： 我们需要这个包，因为我们将使用 SQL Server 实例，并且： 因为我们将通过 CLI 执行数据库的初始创建和迁移。 我们需要一个包含键值配置对的类（Models 文件夹）： 和一个DbContext类（模型文件夹）：...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyishujukupeizhiyuan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"自定义数据库配置源"}],["meta",{"property":"og:description","content":"目的 创建一个自定义配置提供程序，从数据库读取我们的配置 操作 初始化数据库 在我们开始之前，我们需要先安装两个 Nuget 包： 我们需要这个包，因为我们将使用 SQL Server 实例，并且： 因为我们将通过 CLI 执行数据库的初始创建和迁移。 我们需要一个包含键值配置对的类（Models 文件夹）： 和一个DbContext类（模型文件夹）：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义数据库配置源\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"初始化数据库","slug":"初始化数据库","link":"#初始化数据库","children":[]},{"level":3,"title":"实现自定义EFCore提供程序","slug":"实现自定义efcore提供程序","link":"#实现自定义efcore提供程序","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1192},"filePathRelative":"dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyishujukupeizhiyuan.md","localizedDate":"2023年3月18日","excerpt":"<h2>目的</h2>\\n<p>创建一个自定义配置提供程序，从数据库读取我们的配置</p>\\n<h2>操作</h2>\\n<h3>初始化数据库</h3>\\n<p>在我们开始之前，我们需要先安装两个 Nuget 包：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>Install<span class=\\"token operator\\">-</span>Package Microsoft<span class=\\"token punctuation\\">.</span>EntityFrameworkCore<span class=\\"token punctuation\\">.</span>SqlServer <span class=\\"token operator\\">-</span>v <span class=\\"token number\\">3.1</span><span class=\\"token number\\">.7</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,h as data};
