import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-HmxoaDfj.js";const n={},t=a(`<h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>编写单元测试的时候，尽量不要引入基础结构依赖项，依赖项会降低测试的速度，使测试更脆弱，该方式应该在集成测试的时候使用。</p><p>将单元测试项目保存在单独的项目中，和集成测试相互分割，这样子可以确保单元测试项目没有引用或者依赖基础结构包。</p><h2 id="优质单元测试的特征" tabindex="-1"><a class="header-anchor" href="#优质单元测试的特征"><span>优质单元测试的特征</span></a></h2><ul><li>快速：对成熟项目进行数千次单元测试，这很常见。 单元测试应该只需很少的时间即可运行。 几毫秒。</li><li>独立：单元测试是独立的，可以单独运行，并且不依赖文件系统或数据库等任何外部因素。</li><li>可重复：运行单元测试的结果应该保持一致，也就是说，如果在运行期间不更改任何内容，总是返回相同的结果。</li><li>自检查：测试应该能够在没有任何人工交互的情况下自动检测测试是否通过。</li><li>适时：与要测试的代码相比，编写单元测试不应花费过多不必要的时间。 如果发现测试代码与编写代码相比需要花费大量的时间，请考虑一种更易测试的设计。</li></ul><h2 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范"><span>命名规范</span></a></h2><p>命名标准非常重要，因为它们明确地表达了测试的意图。 测试不仅能确保代码有效，还能提供文档。 只需查看单元测试套件，就可以在不查看代码本身的情况下推断代码的行为。 此外，测试失败时，你可以确切地看到不符合预期的方案。</p><p>测试的名字应该包含三个部分</p><ul><li>要测试的方法名称</li><li>测试的方案</li><li>调用方案时的预期行为</li></ul><h3 id="测试方法举例" tabindex="-1"><a class="header-anchor" href="#测试方法举例"><span>测试方法举例</span></a></h3><p>测试一个添加方法</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Fact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Add_SingleNumber_ReturnsSameNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> stringCalculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> StringCalculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> actual</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> stringCalculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Equal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">actual</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一个抛出异常的方法</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Fact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Add_MaximumSumResult_ThrowsOverflowException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> stringCalculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> StringCalculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> MAXIMUM_RESULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;1001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    Action</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> actual</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> stringCalculator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MAXIMUM_RESULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">OverflowException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">actual</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名方式分类" tabindex="-1"><a class="header-anchor" href="#命名方式分类"><span>命名方式分类</span></a></h3><h4 id="doesxgiveny" tabindex="-1"><a class="header-anchor" href="#doesxgiveny"><span>DoesXGivenY</span></a></h4><p>为每个类生成一个测试类，下面是该类的一些示例方法名字</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ReturnsPositiveSumGivenTwoPositiveNumbers()</span></span>
<span class="line"><span>ReturnsNegativeSumGivenTwoNegativeNumbers()</span></span>
<span class="line"><span>ReturnsZeroGivenTwoZeroes()</span></span>
<span class="line"><span>ThrowsArgumentExceptionGivenInvalidValues()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你喜欢下划线可以使用下划线来分割名称的各个部分。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Add_WhenTwoPositiveNumbers_ResultIsPositive</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="given-precondition-when-action-then-expectedresult" tabindex="-1"><a class="header-anchor" href="#given-precondition-when-action-then-expectedresult"><span>Given_Precondition_When_Action_Then_ExpectedResult</span></a></h4><p>Given/When/Then 几乎 1：1 映射与 Arrange/Act/Assert，因此您可以将这些约定中的任何一个与另一个约定一起使用。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Given_TwoPositiveNumbers_When_Adding_Then_ReturnPositiveSum</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>单元测试命名和最佳实践：<a href="https://ardalis.com/mastering-unit-tests-dotnet-best-practices-naming-conventions/" target="_blank" rel="noopener noreferrer">https://ardalis.com/mastering-unit-tests-dotnet-best-practices-naming-conventions/</a> 在.Net中编写单元测试最佳做法：<a href="https://learn.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices</a><a href="https://mp.weixin.qq.com/s/YFcKMDoPtJGD5PeAiTj4Ag" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/YFcKMDoPtJGD5PeAiTj4Ag</a> | 5个关键问题让单元测试的价值最大化</p><p>智能测试简化了单元测试的编写和维护：https://devblogs.microsoft.com/visualstudio/intellitest-simplifies-writing-and-maintaining-unit-tests/</p>`,26),l=[t];function h(r,p){return e(),s("div",null,l)}const c=i(n,[["render",h],["__file","testSpecification.html.vue"]]),o=JSON.parse('{"path":"/middleware/testMange/unitTest/testSpecification.html","title":"单元测试规范","lang":"zh-CN","frontmatter":{"title":"单元测试规范","lang":"zh-CN","date":"2023-09-10T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"chanyuanceshiguifan","slug":"hiimf57authx3vfk","docsId":"138284937","description":"最佳实践 编写单元测试的时候，尽量不要引入基础结构依赖项，依赖项会降低测试的速度，使测试更脆弱，该方式应该在集成测试的时候使用。 将单元测试项目保存在单独的项目中，和集成测试相互分割，这样子可以确保单元测试项目没有引用或者依赖基础结构包。 优质单元测试的特征 快速：对成熟项目进行数千次单元测试，这很常见。 单元测试应该只需很少的时间即可运行。 几毫秒。...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/unitTest/testSpecification.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"单元测试规范"}],["meta",{"property":"og:description","content":"最佳实践 编写单元测试的时候，尽量不要引入基础结构依赖项，依赖项会降低测试的速度，使测试更脆弱，该方式应该在集成测试的时候使用。 将单元测试项目保存在单独的项目中，和集成测试相互分割，这样子可以确保单元测试项目没有引用或者依赖基础结构包。 优质单元测试的特征 快速：对成熟项目进行数千次单元测试，这很常见。 单元测试应该只需很少的时间即可运行。 几毫秒。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T02:43:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T02:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单元测试规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T02:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"优质单元测试的特征","slug":"优质单元测试的特征","link":"#优质单元测试的特征","children":[]},{"level":2,"title":"命名规范","slug":"命名规范","link":"#命名规范","children":[{"level":3,"title":"测试方法举例","slug":"测试方法举例","link":"#测试方法举例","children":[]},{"level":3,"title":"命名方式分类","slug":"命名方式分类","link":"#命名方式分类","children":[{"level":4,"title":"DoesXGivenY","slug":"doesxgiveny","link":"#doesxgiveny","children":[]},{"level":4,"title":"Given_Precondition_When_Action_Then_ExpectedResult","slug":"given-precondition-when-action-then-expectedresult","link":"#given-precondition-when-action-then-expectedresult","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1700361818000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"middleware/testMange/unitTest/testSpecification.md","localizedDate":"2023年9月10日","excerpt":"<h2>最佳实践</h2>\\n<p>编写单元测试的时候，尽量不要引入基础结构依赖项，依赖项会降低测试的速度，使测试更脆弱，该方式应该在集成测试的时候使用。</p>\\n<p>将单元测试项目保存在单独的项目中，和集成测试相互分割，这样子可以确保单元测试项目没有引用或者依赖基础结构包。</p>\\n<h2>优质单元测试的特征</h2>\\n<ul>\\n<li>快速：对成熟项目进行数千次单元测试，这很常见。 单元测试应该只需很少的时间即可运行。 几毫秒。</li>\\n<li>独立：单元测试是独立的，可以单独运行，并且不依赖文件系统或数据库等任何外部因素。</li>\\n<li>可重复：运行单元测试的结果应该保持一致，也就是说，如果在运行期间不更改任何内容，总是返回相同的结果。</li>\\n<li>自检查：测试应该能够在没有任何人工交互的情况下自动检测测试是否通过。</li>\\n<li>适时：与要测试的代码相比，编写单元测试不应花费过多不必要的时间。 如果发现测试代码与编写代码相比需要花费大量的时间，请考虑一种更易测试的设计。</li>\\n</ul>","autoDesc":true}');export{c as comp,o as data};
