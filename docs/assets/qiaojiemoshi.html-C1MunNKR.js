import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-D8HBJYTp.js";const p="/kbms/common/1659105919521-ab7fe559-73da-44ac-b90e-7d5fa781e682.png",t="/kbms/common/1659105943062-d407db50-d296-437e-bc2f-7b24f3059d70.png",o="/kbms/common/1659106791343-89dd17c2-d3d9-47e5-85fb-01d5ca0be901.png",c="/kbms/common/1659106811244-db171695-4a4f-4e7a-b9d0-9dd27331df32.png",l="/kbms/common/1659107170223-f2fd846a-3fd0-475c-a000-d972262f771b.png",i="/kbms/common/1659107213865-0f8b4403-40f4-4319-92b2-06afba97d8f3.png",u="/kbms/common/1659107465021-09a12b98-fc3d-4303-8422-4e2042b9a1e7.png",d="/kbms/common/1659108338588-e8e29d8f-8e87-4fa6-98aa-d64c617c2b12.png",k={},r=e('<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>桥接模式，也叫做桥梁模式，翻译为中文就是将抽象和实现部分，让它们可以独立变化。</p><p>这里的抽象，并非指的是抽象类或者接口，而是被抽象出来的一套“类库” 这里说的实现，也并非指的“接口的实现类”，而是跟具体的一套“类库”</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>利用面向对象的技术来使得类型能够轻松沿着多个方向进行变化，而又不引入额外的复杂度，这就要使用桥接模式。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>我们要开发一个通用的日志记录工具，他支持数据库记录DataBaseLog和文本记录FileLog两种方式，同时既可以运行在.Net平台上，也可以运行在Java平台上。 所以我们就把不同的日志记录方式分别作为单独的对象来对待，并且为日志记录类抽象出一个基类Log类，各种不同的日志记录方式都继承自该基类： <img src="'+p+`" alt="image.png" loading="lazy"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Log</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Log</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;写日志到数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextFileLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Log</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;写日志到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到不同平台的日志系统，对于操作系统、写入文本文件所调用的方式可能是不一样的，为此对不同的日志记录方式，我们需要提供不同平台上的实现，对上面的类做进一步的设计得到下面的结构图： <img src="`+t+`" alt="image.png" loading="lazy"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NDatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DatabaseLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;.Net 平台写入日志到数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DatabaseLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Java 平台写入日志到数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NTextLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TextFileLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;.Net 平台写入日志到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTextLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TextFileLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Java 平台写入日志到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前这种设计方案本身是没有任何错误的，假如我们要引入一种新的xml文件的记录方式，则上面的类结构图就会变成 <img src="`+o+'" alt="image.png" loading="lazy"> 如图蓝色所示，我们增加一个继承自Log基类的子类，而没有修改其他的类，所以也符合了开放-封闭原则。如果我们引入一种新的平台，比如我们现在开发的日志记录工具还需要支持Borland平台，此时类结构又变成了 <img src="'+c+'" alt="image.png" loading="lazy"> 同样我们没有修改任何东西，只是增加了两个继承于DatabaseLog和TextFile的子类，也符合开放-封闭原则。 但是它违背了单一职责原则(一个类只有一个引起它变化的原因)，这里引起log变化的原因有两个，日志记录范式的变化或者日志记录平台的变化，还有就是重复代码会很多，不同的日志记录方式在不同的平台上也会有一部分的代码是相同的，再次就是累的结构过于复杂，继承关系太多，难以维护，特别是扩展性差，如果变化沿着日志记录方式和不同的运行平台两个方向变化，我们就会看到这个类的结构会迅速的变庞大。</p><p>所以这时候就应该使用桥接模式，我们需要解耦这两个方向的变化，把他们之间的强耦合关系改为弱联系。我们把日志记录方式和不同平台上的实现分别当做两个独立的部分来对待，对于日志记录方式，类结构图仍然是： <img src="'+l+'" alt="image.png" loading="lazy"> 我们现在引入另外一个抽象类ImpLog，它是日志记录在不同的平台的实现的基类，结构图如下： <img src="'+i+`" alt="image.png" loading="lazy"> 实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 日志记录在不同平台实现的基类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ImpLog</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Nlog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;在.Net平台的实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jlog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;在java平台的实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候日志记录方式和不同的记录平台这两个类都可以独立的变化，我们需要做的工作就是将这两部分连接起来，如何连接就是我们的对象组合的方式，类结构图如下： <img src="`+u+`" alt="image.png" loading="lazy"> 实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Log</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">ImpLog</span> implementor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">ImpLog</span> Implementor
    <span class="token punctuation">{</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span> implementor <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        implementor<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Log</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        implementor<span class="token punctuation">.</span><span class="token function">Excute</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextFileLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Log</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        implementor<span class="token punctuation">.</span><span class="token function">Excute</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 日志记录在不同平台实现的基类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ImpLog</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Nlog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;在.Net平台的实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jlog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Excute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;在java平台的实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对象组合的方式，桥接模式将两个角色之间的继承关系改为耦合关系，从而是的这两者可以各自独立的变化，这也是桥接模式的本意，再看下客户端如何使用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// .net平台的databaselog 记录</span>
<span class="token class-name">Log</span> dbLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DatabaseLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dbLog<span class="token punctuation">.</span>Implementor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Nlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dbLog<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;记录日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//java平台的文本文件日志记录</span>
<span class="token class-name">Log</span> txtLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFileLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
txtLog<span class="token punctuation">.</span>Implementor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Jlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
txtLog<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;记录日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能有人会担心，这不就又增加了客户端程序和具体日志记录方式之间的耦合性吗，其实这是没有必要的，这种耦合性是由于对象的创建所带来的，完全可以用创建型模式来解决。</p><p>另一个问题，为什么桥接模式用对象组合的方式，而不是采用继承的方式，比如log和ImpLog类都为接口，类结构图如下 <img src="`+d+`" alt="image.png" loading="lazy"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NDatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DatabaseLog</span><span class="token punctuation">,</span> <span class="token class-name">IImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDatabaseLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DatabaseLog</span><span class="token punctuation">,</span> <span class="token class-name">IImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NTextFileLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TextFileLog</span><span class="token punctuation">,</span> <span class="token class-name">IImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JTextFileLog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TextFileLog</span><span class="token punctuation">,</span> <span class="token class-name">IImpLog</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面图中蓝色的部分所示，它们既具有日志记录方式的特性，也具有接口IImpLog的特性，已经违背了面向对象设计原则中的单一职责原则。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果在开发中遇到两个方向上纵横交错的变化时候，应该能够想到使用桥接模式，有时候如果虽然有两个方向向上的变化，但是在某一个方向的变化不是很剧烈的时候，并不一定要使用桥接模式。</p>`,23),m=[r];function v(b,g){return s(),a("div",null,m)}const h=n(k,[["render",v],["__file","qiaojiemoshi.html.vue"]]),f=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/jiegouxing/qiaojiemoshi.html","title":"桥接模式","lang":"zh-CN","frontmatter":{"title":"桥接模式","lang":"zh-CN","date":"2022-12-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"qiaojiemoshi","slug":"wyylfm","docsId":"84022372","description":"简述 桥接模式，也叫做桥梁模式，翻译为中文就是将抽象和实现部分，让它们可以独立变化。 这里的抽象，并非指的是抽象类或者接口，而是被抽象出来的一套“类库” 这里说的实现，也并非指的“接口的实现类”，而是跟具体的一套“类库” 使用场景 利用面向对象的技术来使得类型能够轻松沿着多个方向进行变化，而又不引入额外的复杂度，这就要使用桥接模式。 实现 我们要开发一...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/jiegouxing/qiaojiemoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"桥接模式"}],["meta",{"property":"og:description","content":"简述 桥接模式，也叫做桥梁模式，翻译为中文就是将抽象和实现部分，让它们可以独立变化。 这里的抽象，并非指的是抽象类或者接口，而是被抽象出来的一套“类库” 这里说的实现，也并非指的“接口的实现类”，而是跟具体的一套“类库” 使用场景 利用面向对象的技术来使得类型能够轻松沿着多个方向进行变化，而又不引入额外的复杂度，这就要使用桥接模式。 实现 我们要开发一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1659105919521-ab7fe559-73da-44ac-b90e-7d5fa781e682.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-12-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"桥接模式\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1659105919521-ab7fe559-73da-44ac-b90e-7d5fa781e682.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659105943062-d407db50-d296-437e-bc2f-7b24f3059d70.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659106791343-89dd17c2-d3d9-47e5-85fb-01d5ca0be901.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659106811244-db171695-4a4f-4e7a-b9d0-9dd27331df32.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659107170223-f2fd846a-3fd0-475c-a000-d972262f771b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659107213865-0f8b4403-40f4-4319-92b2-06afba97d8f3.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659107465021-09a12b98-fc3d-4303-8422-4e2042b9a1e7.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1659108338588-e8e29d8f-8e87-4fa6-98aa-d64c617c2b12.png\\"],\\"datePublished\\":\\"2022-12-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":5.66,"words":1699},"filePathRelative":"softwareDesign/highQualityCode/designMode/jiegouxing/qiaojiemoshi.md","localizedDate":"2022年12月25日","excerpt":"<h2>简述</h2>\\n<p>桥接模式，也叫做桥梁模式，翻译为中文就是将抽象和实现部分，让它们可以独立变化。</p>\\n<p>这里的抽象，并非指的是抽象类或者接口，而是被抽象出来的一套“类库”\\n这里说的实现，也并非指的“接口的实现类”，而是跟具体的一套“类库”</p>\\n<h2>使用场景</h2>\\n<p>利用面向对象的技术来使得类型能够轻松沿着多个方向进行变化，而又不引入额外的复杂度，这就要使用桥接模式。</p>\\n<h2>实现</h2>\\n<p>我们要开发一个通用的日志记录工具，他支持数据库记录DataBaseLog和文本记录FileLog两种方式，同时既可以运行在.Net平台上，也可以运行在Java平台上。\\n所以我们就把不同的日志记录方式分别作为单独的对象来对待，并且为日志记录类抽象出一个基类Log类，各种不同的日志记录方式都继承自该基类：\\n<img src=\\"/common/1659105919521-ab7fe559-73da-44ac-b90e-7d5fa781e682.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{h as comp,f as data};
