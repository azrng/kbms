import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c,b as n,e as s,f as o,d as l}from"./app-Bfb6-vFH.js";const i={},u=l(`<h2 id="可为空数值" tabindex="-1"><a class="header-anchor" href="#可为空数值"><span>可为空数值</span></a></h2><p>为什么数据类型也需要为null，考虑下两个场景：</p><p>1、数据库中一个int字段可以被设置为null，在c#中值被取出来之后，为了将它赋值给int类型，不得不受限判断下它是否为null。如果将nll直接赋值给int类型会引发异常。</p><p>2、在一个分布式系统中，服务器需要接受并解析来自客户端的数据，一个int类型的数据可能在传输中丢失了或者被篡改了，转型失败后应该保存为null值，而不是提供一个初始值。</p><p>类似场景很多，所以从.Net2.0开始提供了一个额外的类型，可为空的类型Nullable&lt;T&gt;。它是一个结构体，因为是结构化所以只有值引用类型才开一作为可为空的类型(引用类型本身就可以为null)，一个可为空的int类型表示为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Nullable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 或者简化为</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span>随机数</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> randowm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result0 <span class="token operator">=</span> randowm<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span>BitConverter<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换"><span>格式转换</span></a></h2><p>d = 4.56789 向上取整</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
或
<span class="token class-name"><span class="token keyword">string</span></span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向下取整</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//res为5 </span>
或
<span class="token class-name"><span class="token keyword">string</span></span> res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Floor</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//res为4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四舍五入：round</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span>
<span class="token comment">//固定精度：tiFixed</span>
<span class="token number">100.456001</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100.46</span>
<span class="token number">100.456001</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100.456</span>
<span class="token comment">//固定长度：toPrecision</span>
<span class="token number">99.456001</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//99.456</span>
<span class="token number">100.456001</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100.46</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//取整：parseint //1.将字符串值转化为Number整数，对字符串的每一个字符进行转化，直到遇到不可转化的字符（包括小数点）停止。 2.对浮点类型数值取整，忽略小数部分，不做四舍五入处理</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">Parseint</span><span class="token punctuation">(</span>&#39;<span class="token number">100</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
<span class="token function">Parseint</span><span class="token punctuation">(</span>&#39;100axt&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
<span class="token comment">//Number类型</span>
<span class="token function">Parseint</span><span class="token punctuation">(</span><span class="token number">100.12</span><span class="token punctuation">)</span>；<span class="token comment">//100</span>
<span class="token function">Parseint</span><span class="token punctuation">(</span><span class="token number">100.78</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点型的三个特殊值" tabindex="-1"><a class="header-anchor" href="#浮点型的三个特殊值"><span>浮点型的三个特殊值</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Double<span class="token punctuation">.</span>NEGATIVE_INFINITY 负无穷
Double<span class="token punctuation">.</span>POSITIVE_INFINITY 正无穷
Double<span class="token punctuation">.</span>NaN 非数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高精度数值" tabindex="-1"><a class="header-anchor" href="#高精度数值"><span>高精度数值</span></a></h2>`,20),r={href:"https://mp.weixin.qq.com/s/itbwJ3qz5TH9Mu9nqzqvkg",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const a=e("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/itbwJ3qz5TH9Mu9nqzqvkg"),o(a)]),s(" | 超越.NET极限-我做的高精度数值计算库")])])}const b=t(i,[["render",d],["__file","shuzhi.html.vue"]]),g=JSON.parse('{"path":"/dotnet/csharp/hexincsharp/shuzhi.html","title":"数值","lang":"zh-CN","frontmatter":{"title":"数值","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"shuzhi","slug":"ip7ila","docsId":"30989874","description":"可为空数值 为什么数据类型也需要为null，考虑下两个场景： 1、数据库中一个int字段可以被设置为null，在c#中值被取出来之后，为了将它赋值给int类型，不得不受限判断下它是否为null。如果将nll直接赋值给int类型会引发异常。 2、在一个分布式系统中，服务器需要接受并解析来自客户端的数据，一个int类型的数据可能在传输中丢失了或者被篡改了，...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/hexincsharp/shuzhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数值"}],["meta",{"property":"og:description","content":"可为空数值 为什么数据类型也需要为null，考虑下两个场景： 1、数据库中一个int字段可以被设置为null，在c#中值被取出来之后，为了将它赋值给int类型，不得不受限判断下它是否为null。如果将nll直接赋值给int类型会引发异常。 2、在一个分布式系统中，服务器需要接受并解析来自客户端的数据，一个int类型的数据可能在传输中丢失了或者被篡改了，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-19T14:58:52.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-19T14:58:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-19T14:58:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"可为空数值","slug":"可为空数值","link":"#可为空数值","children":[]},{"level":2,"title":"随机数","slug":"随机数","link":"#随机数","children":[]},{"level":2,"title":"格式转换","slug":"格式转换","link":"#格式转换","children":[]},{"level":2,"title":"浮点型的三个特殊值","slug":"浮点型的三个特殊值","link":"#浮点型的三个特殊值","children":[]},{"level":2,"title":"高精度数值","slug":"高精度数值","link":"#高精度数值","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1716130732000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.77,"words":530},"filePathRelative":"dotnet/csharp/hexincsharp/shuzhi.md","localizedDate":"2023年10月22日","excerpt":"<h2>可为空数值</h2>\\n<p>为什么数据类型也需要为null，考虑下两个场景：</p>\\n<p>1、数据库中一个int字段可以被设置为null，在c#中值被取出来之后，为了将它赋值给int类型，不得不受限判断下它是否为null。如果将nll直接赋值给int类型会引发异常。</p>\\n<p>2、在一个分布式系统中，服务器需要接受并解析来自客户端的数据，一个int类型的数据可能在传输中丢失了或者被篡改了，转型失败后应该保存为null值，而不是提供一个初始值。</p>\\n<p>类似场景很多，所以从.Net2.0开始提供了一个额外的类型，可为空的类型Nullable&lt;T&gt;。它是一个结构体，因为是结构化所以只有值引用类型才开一作为可为空的类型(引用类型本身就可以为null)，一个可为空的int类型表示为</p>","autoDesc":true}');export{b as comp,g as data};
