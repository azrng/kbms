import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,e as n,f as t,d as e}from"./app-Bfb6-vFH.js";const i="/kbms/common/1676439707756-ba969083-a7ab-48bf-bea7-8aa4ed63738d.png",u="/kbms/common/1631872707111-5bc7e39a-e7c5-484d-88e3-2687849ea4a9.png",r="/kbms/common/1631872791679-fd470686-fef4-4c00-b540-f7a6e27c2019.png",k="/kbms/common/1631975072340-e40ce55e-c83a-45f7-9213-00374223b06c.png",d="/kbms/common/1631976003428-be50fafe-b02e-48a0-b4e0-b75a6297b9f2.png",m="/kbms/common/1631876238234-b6957159-6ddf-4415-b19e-974ae7084451.png",v="/kbms/common/1631877298918-c66d17bd-c606-4915-8650-26f3d4f4ab17.png",b={},g=s("h2",{id:"概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概述"},[s("span",null,"概述")])],-1),h={href:"https://xunit.net/",target:"_blank",rel:"noopener noreferrer"},y=e('<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><h4 id="创建单元测试项目" tabindex="-1"><a class="header-anchor" href="#创建单元测试项目"><span>创建单元测试项目</span></a></h4>',3),f={href:"https://gitee.com/AZRNG/my-example",target:"_blank",rel:"noopener noreferrer"},w=s("img",{src:i,alt:"image.png",loading:"lazy"},null,-1),_=s("img",{src:u,alt:"image.png",loading:"lazy"},null,-1),x=s("img",{src:r,alt:"image.png",loading:"lazy"},null,-1),q=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Project</span> Sdk<span class="token operator">=</span><span class="token string">&quot;Microsoft.NET.Sdk&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span><span class="token punctuation">.</span>NETCoreApp<span class="token punctuation">,</span>Version<span class="token operator">=</span>v5<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>IsPackable<span class="token operator">&gt;</span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>IsPackable<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.TestHost&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.10&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.NET.Test.Sdk&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;16.9.4&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;xunit&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.4.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;xunit.runner.visualstudio&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.4.3&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>IncludeAssets<span class="token operator">&gt;</span>runtime<span class="token punctuation">;</span> build<span class="token punctuation">;</span> native<span class="token punctuation">;</span> contentfiles<span class="token punctuation">;</span> analyzers<span class="token punctuation">;</span> buildtransitive<span class="token operator">&lt;</span><span class="token operator">/</span>IncludeAssets<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>PrivateAssets<span class="token operator">&gt;</span>all<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateAssets<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>PackageReference<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;coverlet.collector&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.0.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">ProjectReference</span> Include<span class="token operator">=</span><span class="token string">&quot;..\\Net5ByDocker\\Net5ByDocker.csproj&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>Project<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>组件说明</summary><ul><li>TargetFramework：指定测试项目的目标框架</li><li>IsPackable：设置是否允许打包单元测试项目</li><li>xunit：该xunit包引入了三个子包，其中包括大多数开发人员想要的功能：（xunit.core测试框架本身）、 xunit.assert（包含Assert类的库）和xunit.analyzers（使 Roslyn 分析器能够检测单元测试和 xUnit.net 可扩展性的常见问题） 包xunit.runner.visualstudio和Microsoft.NET.Test.Sdk 是能够在 Visual Studio 中运行测试项目以及使用 dotnet test.</li><li>coverlet.collector：该coverlet.collector包允许收集代码覆盖率。如果您不打算收集代码覆盖率，则应删除此包引用。</li></ul></details><h4 id="编写测试方法" tabindex="-1"><a class="header-anchor" href="#编写测试方法"><span>编写测试方法</span></a></h4><details class="hint-container details"><summary>测试方法步骤</summary><p>写单元测试一般有三个步骤：Arrange，Act 和 Assert。</p><ul><li><strong>Arrange</strong> 是准备阶段，这个阶段是准备工作，比如模拟数据、初始化对象等；</li><li><strong>Act</strong> 是行为阶段，这个阶段是用准备好的数据去调用要测试的方法；</li><li><strong>Assert</strong> 是断定阶段，就是把调用目标方法返回的值和预期的值进行比较，如果和预期一致说明测试通过，否则为失败。</li></ul></details><p>要针对一个方法编写单元测试，并且要保证没有其他因素干扰的情况下去进行单元测试。</p><p>比如我们去对IUserService里面的GetListAsync做单元测试,然后查看该Service依赖于一些配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> _userRep<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUnitOfWork</span> _unitOfWork<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMapper</span> _mapper<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IMapper</span> mapper<span class="token punctuation">,</span>
    <span class="token class-name">IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> userRep<span class="token punctuation">,</span> <span class="token class-name">IUnitOfWork</span> unitOfWork<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>
    _userRep <span class="token operator">=</span> userRep<span class="token punctuation">;</span>
    _unitOfWork <span class="token operator">=</span> unitOfWork<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们就需要使用moq组件去模拟出来这些依赖项减少影响。这个时候就需要引用nuget包，比如这里使用Moq组件来进行Mock</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Moq<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.18.2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过该接口有些依赖项用不到，不需要模拟直接传null</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//模拟用户数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span>Account <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span>Account <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// mock 数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> mockRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以实例化UserService进行使用，完整代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">GetUser_ReturnOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//Arrange：准备阶段</span>
    <span class="token comment">//模拟用户数据</span>
    <span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span>Account <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span>Account <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>	
    <span class="token class-name"><span class="token keyword">var</span></span> mockRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserService</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> mockRepository<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Act：行为阶段</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Assert：断言阶段</span>
    Assert<span class="token punctuation">.</span><span class="token function">True</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以对该方法进行单元测试了，点击测试方法名字右键可以运行测试或者调试测试。</p><p>下面再演示一个对用户添加的方法编写单元测试 <img src="`+k+`" alt="image.png" loading="lazy"> 因为我们依赖这三个东西，那么就需要mock这三个</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mockRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> mockUnitWork <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IUnitOfWork<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mockUnitWork<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>CancellationToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddUserVm</span> <span class="token punctuation">{</span> Account <span class="token operator">=</span> <span class="token string">&quot;789&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;455&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> Net5ByDocker<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>SexEnum<span class="token punctuation">.</span>Man <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> mockIMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IMapper<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mockIMapper<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> Account <span class="token operator">=</span> <span class="token string">&quot;789&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;455&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们模拟IBaseRepository传入任何的User到添加方法都返回，模拟单元提交也返回1，还模拟了IMapper进行映射，完整代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">AddUser_ReturnOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 模拟数据</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mockRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IBaseRepository<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mockRepository<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> mockUnitWork <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IUnitOfWork<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mockUnitWork<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>CancellationToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ReturnsAsync</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddUserVm</span> <span class="token punctuation">{</span> Account <span class="token operator">=</span> <span class="token string">&quot;789&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;455&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> Net5ByDocker<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span>SexEnum<span class="token punctuation">.</span>Man <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> mockIMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IMapper<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mockIMapper<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> Account <span class="token operator">=</span> <span class="token string">&quot;789&quot;</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">&quot;455&quot;</span><span class="token punctuation">,</span> IsValid <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserService</span><span class="token punctuation">(</span>mockIMapper<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> mockRepository<span class="token punctuation">.</span>Object<span class="token punctuation">,</span> mockUnitWork<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//行为阶段</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 断言阶段</span>
    Assert<span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后单元测试就编写完成了，启动单元测试 <img src="`+d+`" alt="image.png" loading="lazy"> 单元测试成功，我理解的大概就是这样子的，如果有哪里不对的地方，麻烦指出来一起成长。</p><h3 id="测试方法示例" tabindex="-1"><a class="header-anchor" href="#测试方法示例"><span>测试方法示例</span></a></h3><p>使用 XUnit 来写测试方法可以使得测试代码更为简洁，更加简单，推荐使用 xunit 来测试自己的代码 测试示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultModelTest</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span><span class="token comment">//标识该方法是一个测试方法</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SuccessTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> ResultModel<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">Null</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>ErrorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>Success<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Theory</span></span><span class="token punctuation">]</span><span class="token comment">//表明该方法是一个测试方法，并且具有数据驱动测试的功能</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//InlineData特性用于提供测试数据</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>NoPermission<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>RequestError<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>NotImplemented<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>ResourceNotFound<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ResultStatus<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//多个InlineData将会使测试方法多次执行</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FailTest</span><span class="token punctuation">(</span><span class="token class-name">ResultStatus</span> resultStatus<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> ResultModel<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token string">&quot;test error&quot;</span><span class="token punctuation">,</span> resultStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>resultStatus<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最基本的测试，使用 Fact 标记测试方法，使用 Assert 来断言自己对结果的预期 可以使用 Theory 来自己指定一批数据来进行测试，来实现测试数据驱动测试，简单的数据可以通过 InlineData 直接指定，也可以使用 MemberData 来指定一个方法来返回用于测试的数据，也可以自定义一个继承于 DataAttribute 的 Data Provider</p><h3 id="并行运行测试" tabindex="-1"><a class="header-anchor" href="#并行运行测试"><span>并行运行测试</span></a></h3><p>在Xunit的2.x版本以后支持并行运行测试。这样子相比如之前可以更好利用服务器性能。 新建测试类RunnerTimeTest，</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnerTimeTest</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们猜一下运行该测试类的话需要耗时多少？2s？3s？ <img src="`+m+`" alt="image.png" loading="lazy"> 通过这个结果我们可以得出来一个测试类内并不是并行执行的。默认情况下每一个测试类都是一个唯一的测试集合，同一个测试类的测试不会彼此并行运行。那么我们将这两个测试方法分别放入不同的测试类中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnerTimeTest</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnerTimeTest2</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行查看效果 <img src="`+v+'" alt="image.png" loading="lazy"> 可以得到不同的测试类之间是并行执行的。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>',30),R={href:"https://xunit.net/docs/getting-started/netcore/visual-studio",target:"_blank",rel:"noopener noreferrer"},A={href:"https://cat.aiursoft.cn/post/2023/8/12/five-minute-intro-to-dotnet-unit-testing",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.meziantou.net/quick-introduction-to-xunitdotnet.htm",target:"_blank",rel:"noopener noreferrer"},S={href:"https://xunit.net/docs/getting-started/netcore/cmdline",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.cnblogs.com/willick/p/aspnetcore-unit-tests-with-xunit.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://xunit.net/docs/running-tests-in-parallel",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.cnblogs.com/baoshu/p/14500273.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/Moq/moq4/wiki/Quickstart",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices",target:"_blank",rel:"noopener noreferrer"};function W(E,V){const a=o("ExternalLinkIcon");return c(),l("div",null,[g,s("p",null,[n("xUnit 是一个针对 .NET 平台的开源单元测试框架，用于编写和执行自动化单元测试，常用来测试指定的方法。 官网："),s("a",h,[n("https://xunit.net/"),t(a)])]),y,s("p",null,[n("本次文章还在原来项目的基础上进行操作("),s("a",f,[n("https://gitee.com/AZRNG/my-example"),t(a)]),n(")，右键解决方案添加单元测试项目 "),w,n(" 点击下一步 "),_,n(" 选择框架版本为.Net 5.0 "),x,n(" 单元测试项目创建完成。然后引用我们的包")]),q,s("p",null,[n("在.NetCore中使用xUnit的教程："),s("a",R,[n("https://xunit.net/docs/getting-started/netcore/visual-studio"),t(a)]),s("a",A,[n("https://cat.aiursoft.cn/post/2023/8/12/five-minute-intro-to-dotnet-unit-testing"),t(a)]),n(" | 5 分钟 .NET 单元测试极简入门 - kitlau's blog 单元测试最佳做法："),s("a",T,[n("https://docs.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices"),t(a)]),n(" xunit学习教程："),s("a",I,[n("https://www.meziantou.net/quick-introduction-to-xunitdotnet.htm"),t(a)])]),s("p",null,[n("命令行创建单元测试项目："),s("a",S,[n("https://xunit.net/docs/getting-started/netcore/cmdline"),t(a)]),n(" ASP.NET Core单元测试："),s("a",U,[n("https://www.cnblogs.com/willick/p/aspnetcore-unit-tests-with-xunit.html"),t(a)]),n(" 并行运行测试："),s("a",M,[n("https://xunit.net/docs/running-tests-in-parallel"),t(a)]),n(" .NetCore单元测试："),s("a",z,[n("https://www.cnblogs.com/baoshu/p/14500273.html"),t(a)]),n(" Mock："),s("a",N,[n("https://github.com/Moq/moq4/wiki/Quickstart"),t(a)]),n(" 单元测试最佳做法："),s("a",P,[n("https://docs.microsoft.com/zh-cn/dotnet/core/testing/unit-testing-best-practices"),t(a)])])])}const G=p(b,[["render",W],["__file","xunitTest.html.vue"]]),B=JSON.parse('{"path":"/middleware/testMange/unitTest/xunitTest.html","title":"xUnit","lang":"zh-CN","frontmatter":{"title":"xUnit","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["test"],"description":"概述 xUnit 是一个针对 .NET 平台的开源单元测试框架，用于编写和执行自动化单元测试，常用来测试指定的方法。 官网：https://xunit.net/ 操作 快速上手 创建单元测试项目 本次文章还在原来项目的基础上进行操作(https://gitee.com/AZRNG/my-example)，右键解决方案添加单元测试项目 image.png...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/unitTest/xunitTest.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"xUnit"}],["meta",{"property":"og:description","content":"概述 xUnit 是一个针对 .NET 平台的开源单元测试框架，用于编写和执行自动化单元测试，常用来测试指定的方法。 官网：https://xunit.net/ 操作 快速上手 创建单元测试项目 本次文章还在原来项目的基础上进行操作(https://gitee.com/AZRNG/my-example)，右键解决方案添加单元测试项目 image.png..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1676439707756-ba969083-a7ab-48bf-bea7-8aa4ed63738d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T02:43:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T02:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"xUnit\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1676439707756-ba969083-a7ab-48bf-bea7-8aa4ed63738d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631872707111-5bc7e39a-e7c5-484d-88e3-2687849ea4a9.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631872791679-fd470686-fef4-4c00-b540-f7a6e27c2019.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631975072340-e40ce55e-c83a-45f7-9213-00374223b06c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631976003428-be50fafe-b02e-48a0-b4e0-b75a6297b9f2.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631876238234-b6957159-6ddf-4415-b19e-974ae7084451.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631877298918-c66d17bd-c606-4915-8650-26f3d4f4ab17.png\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T02:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[{"level":4,"title":"创建单元测试项目","slug":"创建单元测试项目","link":"#创建单元测试项目","children":[]},{"level":4,"title":"编写测试方法","slug":"编写测试方法","link":"#编写测试方法","children":[]}]},{"level":3,"title":"测试方法示例","slug":"测试方法示例","link":"#测试方法示例","children":[]},{"level":3,"title":"并行运行测试","slug":"并行运行测试","link":"#并行运行测试","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1700361818000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.17,"words":1851},"filePathRelative":"middleware/testMange/unitTest/xunitTest.md","localizedDate":"2023年10月18日","excerpt":"<h2>概述</h2>\\n<p>xUnit 是一个针对 .NET 平台的开源单元测试框架，用于编写和执行自动化单元测试，常用来测试指定的方法。\\n官网：<a href=\\"https://xunit.net/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://xunit.net/</a></p>\\n<h2>操作</h2>\\n<h3>快速上手</h3>\\n<h4>创建单元测试项目</h4>\\n<p>本次文章还在原来项目的基础上进行操作(<a href=\\"https://gitee.com/AZRNG/my-example\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://gitee.com/AZRNG/my-example</a>)，右键解决方案添加单元测试项目\\n<img src=\\"/common/1676439707756-ba969083-a7ab-48bf-bea7-8aa4ed63738d.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n点击下一步\\n<img src=\\"/common/1631872707111-5bc7e39a-e7c5-484d-88e3-2687849ea4a9.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n选择框架版本为.Net 5.0\\n<img src=\\"/common/1631872791679-fd470686-fef4-4c00-b540-f7a6e27c2019.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n单元测试项目创建完成。然后引用我们的包</p>","autoDesc":true}');export{G as comp,B as data};
