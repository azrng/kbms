import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as e,a as n,d as s,e as c,b as l}from"./app-Bw62I61B.js";const i="/kbms/common/1649149006943-dcfb7793-63b0-45b2-a7db-c386bd97d7f2.png",u={},k=l(`<h2 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存"><span>共享内存</span></a></h2><p>面向对象编程中，万物都是对象，数据+行为=对象； 多核时代，可并行多个线程，但是受限于资源对象，线程之间存在对共享内存的抢占/等待，实质是多线程调用对象的行为方法，这涉及线程安全线程同步。 假如现在有一个任务，找100000以内的素数的个数，如果用共享内存的方法，代码如下：</p><p>可以看到，这些线程共享了sum变量，对sum做sum++操作时必须上锁。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Paralleler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> syncObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;共享内存并发模型耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 被[2,x/2]任一数字整除，就不是质数</span>
                        f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">lock</span><span class="token punctuation">(</span>syncObj<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        sum<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// 共享了sum对象，“++”就是调用sum对象的成员方法</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;1-100000内质数的个数是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>共享内存更贴合&quot;面向对象开发者的固定思维&quot;， 强调线程对于资源的掌控力。</p></blockquote><h2 id="actor模型" tabindex="-1"><a class="header-anchor" href="#actor模型"><span>Actor模型</span></a></h2><p>Actor模型则认为一切皆是Actor，share nothing， Actor模型内部的状态由自己的行为维护，外部线程不能直接调对象的行为，必须通过消息才能激发行为，也就是消息传递机制来代替共享内存模型对成员方法的调用， 这样保证Actor内部数据只能被自己修改， Actor模型= 数据+行为+消息。 <img src="`+i+`" alt="" loading="lazy"> 还是找到100000内的素数，我们使用.NET TPL Dataflow来完成，代码如下： 每个Actor的产出物就是流转到下一个Actor的消息。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">.</span>Dataflow</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Paralleler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Actor并发模型耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> linkOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataflowLinkOptions</span> <span class="token punctuation">{</span> PropagateCompletion <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> transfromBlock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TransformBlock<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>x<span class="token operator">=&gt;</span> 
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 被[2,x/2]任一数字整除，就不是质数</span>
                        f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> f<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutionDataflowBlockOptions</span> <span class="token punctuation">{</span> MaxDegreeOfParallelism <span class="token operator">=</span><span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           
            <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> actionBlock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ActionBlock<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>x<span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    sum<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutionDataflowBlockOptions</span> <span class="token punctuation">{</span> MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">1</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里必须使用默认并发度</span>
            transfromBlock<span class="token punctuation">.</span><span class="token function">LinkTo</span><span class="token punctuation">(</span>actionBlock<span class="token punctuation">,</span> linkOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 准备从pipeline头部开始投递</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                transfromBlock<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            transfromBlock<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通知头部，不再投递了; 会将信息传递到下游。</span>
            actionBlock<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待尾部执行完成</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;1-100000内质数的个数是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Actor并发模型强调的是消息触发。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><strong>共享内存模型</strong>：其实是并行线程调用对象的成员方法，这里不可避免存在加锁/解锁， 需要开发者自行关注线程同步、线程安全。 <strong>Actor模型</strong>：以流水线管道的形式，各Actor独立挨个处理各自专属业务，等待消息流入。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,12),r={href:"https://mp.weixin.qq.com/s/QK_C0wmW2RAXcZvB1k6DYA",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const a=t("ExternalLinkIcon");return o(),e("div",null,[k,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/QK_C0wmW2RAXcZvB1k6DYA"),c(a)]),s(" | 三分钟掌握共享内存 & Actor并发模型")])])}const g=p(u,[["render",d],["__file","sharedMemory.html.vue"]]),w=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/sharedMemory.html","title":"共享内存&Actor","lang":"zh-CN","frontmatter":{"title":"共享内存&Actor","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"gongxiangneicun&actor","slug":"mqom4v","docsId":"72282804","description":"共享内存 面向对象编程中，万物都是对象，数据+行为=对象； 多核时代，可并行多个线程，但是受限于资源对象，线程之间存在对共享内存的抢占/等待，实质是多线程调用对象的行为方法，这涉及线程安全线程同步。 假如现在有一个任务，找100000以内的素数的个数，如果用共享内存的方法，代码如下： 可以看到，这些线程共享了sum变量，对sum做sum++操作时必须上...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/sharedMemory.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"共享内存&Actor"}],["meta",{"property":"og:description","content":"共享内存 面向对象编程中，万物都是对象，数据+行为=对象； 多核时代，可并行多个线程，但是受限于资源对象，线程之间存在对共享内存的抢占/等待，实质是多线程调用对象的行为方法，这涉及线程安全线程同步。 假如现在有一个任务，找100000以内的素数的个数，如果用共享内存的方法，代码如下： 可以看到，这些线程共享了sum变量，对sum做sum++操作时必须上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1649149006943-dcfb7793-63b0-45b2-a7db-c386bd97d7f2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T07:23:18.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T07:23:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"共享内存&Actor\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1649149006943-dcfb7793-63b0-45b2-a7db-c386bd97d7f2.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-25T07:23:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"共享内存","slug":"共享内存","link":"#共享内存","children":[]},{"level":2,"title":"Actor模型","slug":"actor模型","link":"#actor模型","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1711351398000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.69,"words":806},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/sharedMemory.md","localizedDate":"2023年10月22日","excerpt":"<h2>共享内存</h2>\\n<p>面向对象编程中，万物都是对象，数据+行为=对象；\\n多核时代，可并行多个线程，但是受限于资源对象，线程之间存在对共享内存的抢占/等待，实质是多线程调用对象的行为方法，这涉及线程安全线程同步。\\n假如现在有一个任务，找100000以内的素数的个数，如果用共享内存的方法，代码如下：</p>\\n<p>可以看到，这些线程共享了sum变量，对sum做sum++操作时必须上锁。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Threading<span class=\\"token punctuation\\">.</span>Tasks</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Collections</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Collections<span class=\\"token punctuation\\">.</span>Generic</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Threading</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Diagnostics</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">Paralleler</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Program</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span> syncObj <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">object</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Stopwatch</span> sw <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Stopwatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            sw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">ShareMemory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            sw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Stop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"共享内存并发模型耗时：</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">sw<span class=\\"token punctuation\\">.</span>Elapsed</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">ShareMemory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n            Parallel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">For</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100000</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> f <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n                    f <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> x <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">%</span> i <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">// 被[2,x/2]任一数字整除，就不是质数</span>\\n                        f <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>f<span class=\\"token operator\\">==</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">lock</span><span class=\\"token punctuation\\">(</span>syncObj<span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        sum<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">// 共享了sum对象，“++”就是调用sum对象的成员方法</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"1-100000内质数的个数是</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">sum</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,w as data};
