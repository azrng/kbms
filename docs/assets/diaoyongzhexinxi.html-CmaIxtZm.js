import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,e,b as t}from"./app-qB9_Bjjp.js";const l={},r=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>为了方便我们获取调用方的方法名等信息，而不再传播nameof来获取，所以找到了下面的方法。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="获取调用者行号" tabindex="-1"><a class="header-anchor" href="#获取调用者行号"><span>获取调用者行号</span></a></h3>',4),u={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Something happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span>
					   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerLineNumber</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">int</span></span> sourceLineNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;行: {0} - {1}&quot;</span><span class="token punctuation">,</span> sourceLineNumber<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出结果</span>
行<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">-</span> Something happened<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取调用者文件路径" tabindex="-1"><a class="header-anchor" href="#获取调用者文件路径"><span>获取调用者文件路径</span></a></h3>`,2),k={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callerfilepathattribute?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Something happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span>
						<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerFilePath</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> sourceFilePath <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;File: {0} - {1}&quot;</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>sourceFilePath<span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出结果</span>
File<span class="token punctuation">:</span> LINQPadQuery <span class="token operator">-</span> Something happened<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取调用者方法名" tabindex="-1"><a class="header-anchor" href="#获取调用者方法名"><span>获取调用者方法名</span></a></h3>`,2),v={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">DoProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Something happened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span>
					 <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> memberName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Member: {0} - {1}&quot;</span><span class="token punctuation">,</span> memberName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出结果</span>
Member<span class="token punctuation">:</span> DoProcessing <span class="token operator">-</span> Something happened<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取调用者的参数表达式" tabindex="-1"><a class="header-anchor" href="#获取调用者的参数表达式"><span>获取调用者的参数表达式</span></a></h3>`,2),b={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token function">Assert</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">,</span> <span class="token string">&quot;x &gt; y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> condition<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerArgumentExpression</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;condition&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Condition: {0} - {1}&quot;</span><span class="token punctuation">,</span> condition<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出结果</span>
Condition<span class="token punctuation">:</span> True <span class="token operator">-</span> x <span class="token operator">&gt;</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,2),y={href:"https://mp.weixin.qq.com/s/iDq51PY78vZJEItJL-0TWQ",target:"_blank",rel:"noopener noreferrer"};function f(_,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("通过CallerLineNumber来获取调用者的行号"),n("a",u,[s("文档地址"),e(a)])]),d,n("p",null,[s("获取调用方的源文件的完整路径，这是编译时的文件路径"),n("a",k,[s("文档地址"),e(a)])]),m,n("p",null,[s("获取方法调用方或者属性名称 "),n("a",v,[s("文档地址"),e(a)])]),h,n("p",null,[s("参数将为另一个参数传递的表达式捕捉为字符串 "),n("a",b,[s("文档地址"),e(a)])]),g,n("p",null,[s("我不想再传递nameof了："),n("a",y,[s("https://mp.weixin.qq.com/s/iDq51PY78vZJEItJL-0TWQ"),e(a)])])])}const z=p(l,[["render",f],["__file","diaoyongzhexinxi.html.vue"]]),N=JSON.parse('{"path":"/dotnet/base/diaoyongzhexinxi.html","title":"调用者信息","lang":"zh-CN","frontmatter":{"title":"调用者信息","lang":"zh-CN","date":"2023-03-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"diaoyongzhexinxi","slug":"ghuvkgnt6tehlvlm","docsId":"116506204","description":"概述 为了方便我们获取调用方的方法名等信息，而不再传播nameof来获取，所以找到了下面的方法。 操作 获取调用者行号 通过CallerLineNumber来获取调用者的行号文档地址 获取调用者文件路径 获取调用方的源文件的完整路径，这是编译时的文件路径文档地址 获取调用者方法名 获取方法调用方或者属性名称 文档地址 获取调用者的参数表达式 参数将为另...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/diaoyongzhexinxi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"调用者信息"}],["meta",{"property":"og:description","content":"概述 为了方便我们获取调用方的方法名等信息，而不再传播nameof来获取，所以找到了下面的方法。 操作 获取调用者行号 通过CallerLineNumber来获取调用者的行号文档地址 获取调用者文件路径 获取调用方的源文件的完整路径，这是编译时的文件路径文档地址 获取调用者方法名 获取方法调用方或者属性名称 文档地址 获取调用者的参数表达式 参数将为另..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T15:52:53.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-29T15:52:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"调用者信息\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-29T15:52:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"获取调用者行号","slug":"获取调用者行号","link":"#获取调用者行号","children":[]},{"level":3,"title":"获取调用者文件路径","slug":"获取调用者文件路径","link":"#获取调用者文件路径","children":[]},{"level":3,"title":"获取调用者方法名","slug":"获取调用者方法名","link":"#获取调用者方法名","children":[]},{"level":3,"title":"获取调用者的参数表达式","slug":"获取调用者的参数表达式","link":"#获取调用者的参数表达式","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1703865173000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"dotnet/base/diaoyongzhexinxi.md","localizedDate":"2023年3月2日","excerpt":"<h2>概述</h2>\\n<p>为了方便我们获取调用方的方法名等信息，而不再传播nameof来获取，所以找到了下面的方法。</p>\\n<h2>操作</h2>\\n<h3>获取调用者行号</h3>\\n<p>通过CallerLineNumber来获取调用者的行号<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute?view=net-7.0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文档地址</a></p>","autoDesc":true}');export{z as comp,N as data};
