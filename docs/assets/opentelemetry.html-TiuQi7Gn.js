import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as a,b as i}from"./app-qB9_Bjjp.js";const l={},r=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u=n("p",null,"OpenTelemetry 是一个功能强大的观测性框架，它提供了跟踪、度量和日志记录等功能。在 OpenTelemetry 中，跟踪信息通过上下文对象传递，这个上下文对象可以被嵌入到各个调用中，从而实现跨服务的跟踪传递。",-1),d={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="基础获取统计的数据" tabindex="-1"><a class="header-anchor" href="#基础获取统计的数据"><span>基础获取统计的数据</span></a></h3><p>在.Net8中可以简单配置获取统计的数据，新建一个WebApi的程序，然后引用下面的包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.OpenApi&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;8.0.0-rc.1.23421.29&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.4.0&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;OpenTelemetry.Exporter.Prometheus.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.6.0-rc.1&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;OpenTelemetry.Extensions.Hosting&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.6.0&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以注册服务来配置我们监控的信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">OpenTelemetry<span class="token punctuation">.</span>Metrics</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add services to the container.</span>
<span class="token comment">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置监控</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithMetrics</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span><span class="token function">AddPrometheusExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        x<span class="token punctuation">.</span><span class="token function">AddMeter</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.AspNetCore.Hosting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Microsoft.AspNetCore.Server.Kestrel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">AddView</span><span class="token punctuation">(</span><span class="token string">&quot;request-duration&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExplicitBucketHistogramConfiguration</span>
        <span class="token punctuation">{</span>
            Boundaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">,</span> <span class="token number">0.05</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就使用我们注入的内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">MapPrometheusScrapingEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候我们启用服务，并访问地址地址：<code>ip+metrics </code>就可以看到我们监控的信息，如：<code>http://localhost:5010/metrics</code></p><p>可以尝试进行展示好看的仪表盘：https://github.com/dotnet/aspire/tree/main/src/Grafana</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,11),m={href:"https://cat.aiursoft.cn/post/2023/3/19/troubleshooting-production-issues-get-to-know-opentelemetry",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s/321ZU2OdO2drFFFIN7Oavw",target:"_blank",rel:"noopener noreferrer"},g={href:"https://martinjt.me/2023/07/14/i-finally-found-a-use-for-logging-in-net/",target:"_blank",rel:"noopener noreferrer"};function h(b,y){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,u,n("p",null,[s("OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。 OpenTelemetry 要解决的是对可观测性的大一统，它提供了一组 API 和 SDK 来标准化遥测数据的采集和传输，opentelemetry 并不想对所有的组件都进行重写，而是最大程度复用目前业界在各大领域常用工具，通过提供了一个安全，厂商中立的能用协议、组件，这样就可以按照需要形成 pipeline 将数据发往不同的后端。 官网："),n("a",d,[s("https://opentelemetry.io/"),a(e)])]),k,n("p",null,[s("微服务生产环境故障难调试？OpenTelemetry 了解一下？："),n("a",m,[s("https://cat.aiursoft.cn/post/2023/3/19/troubleshooting-production-issues-get-to-know-opentelemetry"),a(e)]),s(" 在.net8中使用OpenTelemetry来metric："),n("a",v,[s("https://mp.weixin.qq.com/s/321ZU2OdO2drFFFIN7Oavw"),a(e)]),s(" 我终于在 .NET 中找到了登录的用途！"),n("a",g,[s("https://martinjt.me/2023/07/14/i-finally-found-a-use-for-logging-in-net/"),a(e)]),s("在错误配置对 OpenTelemetry 的跟踪时获取错误日志的技术。由于导出器在后台运行，即使发生错误，也不会出现在表中，因此事件由EventListener获取。")])])}const T=t(l,[["render",h],["__file","opentelemetry.html.vue"]]),_=JSON.parse('{"path":"/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html","title":"OpenTelemetry说明","lang":"zh-CN","frontmatter":{"title":"OpenTelemetry说明","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["OpenTelemetry"],"description":"概述 OpenTelemetry 是一个功能强大的观测性框架，它提供了跟踪、度量和日志记录等功能。在 OpenTelemetry 中，跟踪信息通过上下文对象传递，这个上下文对象可以被嵌入到各个调用中，从而实现跨服务的跟踪传递。 OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"OpenTelemetry说明"}],["meta",{"property":"og:description","content":"概述 OpenTelemetry 是一个功能强大的观测性框架，它提供了跟踪、度量和日志记录等功能。在 OpenTelemetry 中，跟踪信息通过上下文对象传递，这个上下文对象可以被嵌入到各个调用中，从而实现跨服务的跟踪传递。 OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-02T08:43:04.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"OpenTelemetry"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-02T08:43:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenTelemetry说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-02T08:43:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础获取统计的数据","slug":"基础获取统计的数据","link":"#基础获取统计的数据","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1709368984000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.04,"words":611},"filePathRelative":"middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.md","localizedDate":"2023年9月29日","excerpt":"<h2>概述</h2>\\n<p>OpenTelemetry 是一个功能强大的观测性框架，它提供了跟踪、度量和日志记录等功能。在 OpenTelemetry 中，跟踪信息通过上下文对象传递，这个上下文对象可以被嵌入到各个调用中，从而实现跨服务的跟踪传递。</p>\\n<p>OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。\\nOpenTelemetry 要解决的是对可观测性的大一统，它提供了一组 API 和 SDK 来标准化遥测数据的采集和传输，opentelemetry 并不想对所有的组件都进行重写，而是最大程度复用目前业界在各大领域常用工具，通过提供了一个安全，厂商中立的能用协议、组件，这样就可以按照需要形成 pipeline 将数据发往不同的后端。\\n官网：<a href=\\"https://opentelemetry.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://opentelemetry.io/</a></p>","autoDesc":true}');export{T as comp,_ as data};
