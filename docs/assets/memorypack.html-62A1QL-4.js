import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,d as s,e as c,b as l}from"./app-Bw62I61B.js";const i={},r=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>如果要兼顾序列化后大小和性能的话我们应该要选择MemoryPackBrotli，它序列化以后的结果最小，而且兼顾了性能。 注意：需要.NET7 版本</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>引用nuget包</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>&lt;PackageReference Include=<span class="token string">&quot;MemoryPack&quot;</span> Version=<span class="token string">&quot;1.4.4&quot;</span> <span class="token operator">/</span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基础操作" tabindex="-1"><a class="header-anchor" href="#基础操作"><span>基础操作</span></a></h3><p>只需要给对应的类加上partial关键字，另外打上MemoryPackable特性即可：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MemoryPackable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">DemoClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> P1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> P2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> P3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> P4 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> P5 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化和反序列化也是调用静态方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Serialize</span>
<span class="token punctuation">[</span><span class="token function">MethodImpl</span><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">MemoryPack</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> origin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">global</span><span class="token punctuation">::</span>MemoryPack<span class="token punctuation">.</span>MemoryPackSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Deserialize</span>
<span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">MemoryPack</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">global</span><span class="token punctuation">::</span>MemoryPack<span class="token punctuation">.</span>MemoryPackSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它原生支持 Brotli 压缩算法，使用如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Serialize</span>
<span class="token punctuation">[</span><span class="token function">MethodImpl</span><span class="token punctuation">(</span>MethodImplOptions<span class="token punctuation">.</span>AggressiveInlining<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">MemoryPackBrotli</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> origin<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> compressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrotliCompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">global</span><span class="token punctuation">::</span>MemoryPack<span class="token punctuation">.</span>MemoryPackSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>compressor<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> compressor<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Deserialize</span>
<span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">MemoryPackBrotli</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> decompressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrotliDecompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> decompressedBuffer <span class="token operator">=</span> decompressor<span class="token punctuation">.</span><span class="token function">Decompress</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> MemoryPackSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>decompressedBuffer<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,13),u={href:"https://mp.weixin.qq.com/s/_J3B1sJrFC8oT4Xx3e3wyQ",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[s("https://mp.weixin.qq.com/s/_J3B1sJrFC8oT4Xx3e3wyQ"),c(a)]),s(" | .NET性能优化-是时候换个序列化协议了")])])}const g=e(i,[["render",k],["__file","memorypack.html.vue"]]),b=JSON.parse('{"path":"/dotnet/base/serialize/erjinzhi/memorypack.html","title":"MemoryPack","lang":"zh-CN","frontmatter":{"title":"MemoryPack","lang":"zh-CN","date":"2023-09-01T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"memorypack","slug":"gesxogr54c2hddi8","docsId":"131919367","description":"概述 如果要兼顾序列化后大小和性能的话我们应该要选择MemoryPackBrotli，它序列化以后的结果最小，而且兼顾了性能。 注意：需要.NET7 版本 操作 引用nuget包 基础操作 只需要给对应的类加上partial关键字，另外打上MemoryPackable特性即可： 序列化和反序列化也是调用静态方法： 它原生支持 Brotli 压缩算法，使...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/erjinzhi/memorypack.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"MemoryPack"}],["meta",{"property":"og:description","content":"概述 如果要兼顾序列化后大小和性能的话我们应该要选择MemoryPackBrotli，它序列化以后的结果最小，而且兼顾了性能。 注意：需要.NET7 版本 操作 引用nuget包 基础操作 只需要给对应的类加上partial关键字，另外打上MemoryPackable特性即可： 序列化和反序列化也是调用静态方法： 它原生支持 Brotli 压缩算法，使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MemoryPack\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础操作","slug":"基础操作","link":"#基础操作","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"dotnet/base/serialize/erjinzhi/memorypack.md","localizedDate":"2023年9月1日","excerpt":"<h2>概述</h2>\\n<p>如果要兼顾序列化后大小和性能的话我们应该要选择MemoryPackBrotli，它序列化以后的结果最小，而且兼顾了性能。\\n注意：需要.NET7 版本</p>\\n<h2>操作</h2>\\n<p>引用nuget包</p>\\n<div class=\\"language-powershell\\" data-ext=\\"powershell\\" data-title=\\"powershell\\"><pre class=\\"language-powershell\\"><code>&lt;PackageReference Include=<span class=\\"token string\\">\\"MemoryPack\\"</span> Version=<span class=\\"token string\\">\\"1.4.4\\"</span> <span class=\\"token operator\\">/</span>&gt;\\n</code></pre></div>","autoDesc":true}');export{g as comp,b as data};
