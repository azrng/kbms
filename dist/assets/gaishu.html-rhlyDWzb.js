import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as t,e as i}from"./app-vSdX8vi3.js";const l={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),r=n("p",null,"关于DiagnosticSource它本身是一个基于发布订阅模式的工作模式，由于它本身的实现方式是异步的，所以不仅仅可以把它用到日志上，还可以用它实现异步操作，或者用它简化实现发布订阅的功能。DiagnosticSource本身是一个抽象类，我们最常用到的是它的子类DiagnosticListener，通过DiagnosticSource的Write方法实现发布一条有具体名称的消息，然后通过IObserver去订阅消息。DiagnosticListener可以实现不同的实例，每个实例可以有自己的名称，每个实例还可以发布不同名称的消息，好比一个在写代码的时候我们可以定义多个程序集，一个程序集下面可以包含多个命名空间。",-1),k=n("h2",{id:"历史",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#历史"},[n("span",null,"历史")])],-1),d={href:"https://www.cnblogs.com/savorboard/p/diagnostics.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="netf之eventsource" tabindex="-1"><a class="header-anchor" href="#netf之eventsource"><span>NETF之EventSource</span></a></h3><p>在 .NET Framework 中 EventSource 通过 Windows ETW 提供的 ETW Channels 与其进行集成，下面给出一个示例代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">EventSource</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;Samples-EventSourceDemos-Minimal&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MinimalEventSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventSource</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Define singleton instance</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MinimalEventSource</span> Log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MinimalEventSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Define Event methods</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> baseAddress<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> imageName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">WriteEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> baseAddress<span class="token punctuation">,</span> imageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在.Net Framework 4.5以及更高版本，EventSouce已经被集成到了System命名空间。</p></blockquote><p>由于 EventSource 只支持 Windows，所以在全新的 .NET Core 中，它已经被悄悄的取代了，下面我们来看一下全新的 DiagnosticSource。</p><h3 id="net-core之diagnosticsource" tabindex="-1"><a class="header-anchor" href="#net-core之diagnosticsource"><span>.Net Core之DiagnosticSource</span></a></h3><p>在 .NET Core 中 .NET 团队设计了一个全新的 DiagnosticSource，新的 DiagnosticSource 非常的简单，它允许你在生产环境记录丰富的 payload 数据，然后你可以在另外一个消费者可以消费感兴趣的记录。先来说说 DiagnosticSource 和上面的 EventSource 的区别，他们的架构设计有点类似，主要区别是 EventSource 它记录的数据是可序列化的数据，会被在进程外消费，所以要求记录的对象必须是可以被序列化的。而 DiagnosticSource 被设计为在进程内处理数据，所以通过它可以拿到更加丰富的一些数据信息，它支持非序列化的对象，比如 HttpContext , HttpResponseMessage 等。如果你想在 EventSource 中获取 DiagnosticSource 中的事件数据，你可以通过 DiagnosticSourceEventSource 这个对象来进行数据桥接。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>对于DiagnosticSource还说到了一个子类DiagnosticListener，关于DiagnosticSource的处理都是围绕着DiagnosticListener实现的。</p><h3 id="简单发布消息" tabindex="-1"><a class="header-anchor" href="#简单发布消息"><span>简单发布消息</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 编写日志</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">WriteLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//声明DiagnosticListener并命名为MyTest</span>
    <span class="token class-name">DiagnosticSource</span> diagnosticSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DiagnosticListener</span><span class="token punctuation">(</span><span class="token string">&quot;MyTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> pubName <span class="token operator">=</span> <span class="token string">&quot;MyTest.Log&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//判断是否存在MyTest.Log的订阅者</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>diagnosticSource<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>pubName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//发送名为MyTest.Log的消息，包含Name，Address两个属性</span>
        diagnosticSource<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>pubName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Address <span class="token operator">=</span> <span class="token string">&quot;武陟县&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的方式我们就可以完成针对消息的发布，其中的IsEnabled方法，这个是用来判断是否存在对应名称的消费者，这样就可以有效避免发送无效的消息。</p><h3 id="订阅发布" tabindex="-1"><a class="header-anchor" href="#订阅发布"><span>订阅发布</span></a></h3><p>订阅消息是通过IObserver接口实现的，IObserver代表了订阅者。虽然我们通过DiagnosticSource去发布消息，但是真正描述发布者身份的是IObservable接口，IObservable的唯一方法Subscribe是用来注册订阅者IObserver，但是默认系统并没有为我们提供一个具体的实现类，所以我们需要定义一个IObserver订阅者的实现类。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObserver<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IObserver<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> _next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MyObserver</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnNext</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_next</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了具体的订阅者实现类，我们就可以为发布者注册订阅者了，具体实现如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerHostService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//AllListeners获取所有发布者，Subscribe为发布者注册订阅者MyObserver</span>
        DiagnosticListener<span class="token punctuation">.</span>AllListeners<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyObserver<span class="token punctuation">&lt;</span>DiagnosticListener<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//判断发布者的名字</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;MyTest&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//方案一： 获取订阅信息</span>
                listener<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyObserver<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listenerData <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;监听名称:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">listenerData<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">dynamic</span></span> data <span class="token operator">=</span> listenerData<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                    <span class="token comment">//打印发布的消息</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;获取的信息为 姓名：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">data<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> 地址：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">data<span class="token punctuation">.</span>Address</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先发布者注册订阅者，然后订阅者获取发布的消息，上面的方法还是比较繁琐的，所以我们可以通过另外的方法来处理。</p><p>安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.DiagnosticAdapter&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.1.27&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该包主要解决了订阅者注册难的问题以及消息解析男的问题，用了这个包我们可以直接订阅一个适配类来充当订阅者的载体，其次我们可以定义方法来获取发布的消息，参数就是我们发布的消息内容。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///我的诊断监听服务</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDiagnosticListener</span>
<span class="token punctuation">{</span>
    <span class="token comment">//发布的消息主题名称</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DiagnosticName</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;MyTest.Log&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyLog</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> address<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;监听名称:MyTest.Log&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;获取的信息为 姓名：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> 地址：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">address</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想让方法订阅消息，需要在方法上声明DiagnosticName，然后名称就是你要订阅消息的名称，方法的参数就是你发布消息的字段属性名称。</p><blockquote><p>订阅的参数名称需要和发布属性名称一致。</p></blockquote><p>监听订阅处理</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerHostService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//AllListeners获取所有发布者，Subscribe为发布者注册订阅者MyObserver</span>
        DiagnosticListener<span class="token punctuation">.</span>AllListeners<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyObserver<span class="token punctuation">&lt;</span>DiagnosticListener<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//判断发布者的名字</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;MyTest&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                listener<span class="token punctuation">.</span><span class="token function">SubscribeWithAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDiagnosticListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想自定义订阅者，还有更加简介的实现方式，所以整个过程可以简化为：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//声明DiagnosticListener并命名为MyTest</span>
<span class="token class-name">DiagnosticListener</span> diagnosticSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DiagnosticListener</span><span class="token punctuation">(</span><span class="token string">&quot;MyTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//直接去适配订阅者</span>
diagnosticSource<span class="token punctuation">.</span><span class="token function">SubscribeWithAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDiagnosticListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> pubName <span class="token operator">=</span> <span class="token string">&quot;MyTest.Log&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//判断是否存在MyTest.Log的订阅者</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>diagnosticSource<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span>pubName<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//发送名为MyTest.Log的消息，包含Name，Address两个属性</span>
    diagnosticSource<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>pubName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Address <span class="token operator">=</span> <span class="token string">&quot;武陟县&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方案极大的节省了工作量，但是这种写法只能针对特定的DiagnosticListener进行订阅处理，如果你需要监听所有发布者，就需要使用DiagnosticListener.AllListeners.Subscribe的方式。</p><h2 id="netcore的应用" tabindex="-1"><a class="header-anchor" href="#netcore的应用"><span>NetCore的应用</span></a></h2><p>在.Net Core的源码中，微软默认在涉及到网络请求或处理请求等许多重要的节点都使用了DiagnosticListener来发布拦截的消息，接下来就罗列一些我知道的比较常见的埋点，通过这些操作我们就可以看出，诊断日志还是很便利的，而且微软在.Net Core中也非常重视它的使用。</p>`,31),g={href:"https://github.com/dotnet/aspnetcore/blob/v3.1.7/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs#L80",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),h={href:"https://www.cnblogs.com/savorboard/p/diagnostics.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/wucy/p/13532534.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://article.itxueyuan.com/vOKZPZ",target:"_blank",rel:"noopener noreferrer"};function f(D,S){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,r,k,n("blockquote",null,[n("p",null,[s("资料来自："),n("a",d,[s("https://www.cnblogs.com/savorboard/p/diagnostics.html"),t(a)])])]),n("p",null,[s("让我们把时间往前拉回到 2013 年 8 月，微软在 NuGet 发布了一个新的关于 Diagnostics 的包叫做 "),n("a",m,[s("Microsoft.Diagnostics.Tracing.TraceEvent"),t(a)]),s("，这个包用来为 Windows 事件追踪（ETW）提供一个强大的支持，使用这个包可以很容易的为我们在云环境和生产环境来提供端到端的监控日志事件记录，它轻量级，高效，并且可以和系统日志进行交互。 总结一下，对 Diagnostics 下个定义 ：在应用程序出现问题的时候，特别是出现可用性或者性能问题的时候，开发人员或者IT人员经常会对这些问题花费大量的时间来进行诊断，很多时候生产环境的问题都无法复现，这可能会对业务造成很大的影响，Diagnostics 就是提供一组功能使我们能够很方便的可以记录在应用程序运行期间发生的关键性操作以及他们的执行时间等，使管理员可以查找特别是生产环境中出现问题所在的根本原因。")]),v,n("p",null,[s("当我们通过ConfigureWebHostDefaults配置Web主机的时候，程序就已经默认给我们注入了诊断名称为Microsoft.AspNetCore的DiagnosticListener和DiagnosticSource，这样我们就可以很方便的在程序中直接获取DiagnosticListener实例去发布消息或者监听发布的内部消息，具体注入逻辑位于可以去GenericWebHostBuilder类中查看"),n("a",g,[s("点击查看源码"),t(a)])]),b,n("p",null,[s("在 .NET Core 中使用 Diagnostics (Diagnostic Source) 记录跟踪信息："),n("a",h,[s("https://www.cnblogs.com/savorboard/p/diagnostics.html"),t(a)]),s(" .Net Core中的诊断日志DiagnosticSource讲解："),n("a",y,[s("https://www.cnblogs.com/wucy/p/13532534.html"),t(a)])]),n("p",null,[n("a",w,[s("https://article.itxueyuan.com/vOKZPZ"),t(a)])])])}const _=e(l,[["render",f],["__file","gaishu.html.vue"]]),q=JSON.parse('{"path":"/dotnet/server/diagnostics/gaishu.html","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","lang":"zh-CN","date":"2023-10-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gaishu","slug":"at1zgv","docsId":"88937023","description":"概述 关于DiagnosticSource它本身是一个基于发布订阅模式的工作模式，由于它本身的实现方式是异步的，所以不仅仅可以把它用到日志上，还可以用它实现异步操作，或者用它简化实现发布订阅的功能。DiagnosticSource本身是一个抽象类，我们最常用到的是它的子类DiagnosticListener，通过DiagnosticSource的Wri...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/server/diagnostics/gaishu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"概述 关于DiagnosticSource它本身是一个基于发布订阅模式的工作模式，由于它本身的实现方式是异步的，所以不仅仅可以把它用到日志上，还可以用它实现异步操作，或者用它简化实现发布订阅的功能。DiagnosticSource本身是一个抽象类，我们最常用到的是它的子类DiagnosticListener，通过DiagnosticSource的Wri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T13:49:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T13:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-27T13:49:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"历史","slug":"历史","link":"#历史","children":[{"level":3,"title":"NETF之EventSource","slug":"netf之eventsource","link":"#netf之eventsource","children":[]},{"level":3,"title":".Net Core之DiagnosticSource","slug":"net-core之diagnosticsource","link":"#net-core之diagnosticsource","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"简单发布消息","slug":"简单发布消息","link":"#简单发布消息","children":[]},{"level":3,"title":"订阅发布","slug":"订阅发布","link":"#订阅发布","children":[]}]},{"level":2,"title":"NetCore的应用","slug":"netcore的应用","link":"#netcore的应用","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698414586000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.88,"words":2063},"filePathRelative":"dotnet/server/diagnostics/gaishu.md","localizedDate":"2023年10月17日","excerpt":"<h2>概述</h2>\\n<p>关于DiagnosticSource它本身是一个基于发布订阅模式的工作模式，由于它本身的实现方式是异步的，所以不仅仅可以把它用到日志上，还可以用它实现异步操作，或者用它简化实现发布订阅的功能。DiagnosticSource本身是一个抽象类，我们最常用到的是它的子类DiagnosticListener，通过DiagnosticSource的Write方法实现发布一条有具体名称的消息，然后通过IObserver去订阅消息。DiagnosticListener可以实现不同的实例，每个实例可以有自己的名称，每个实例还可以发布不同名称的消息，好比一个在写代码的时候我们可以定义多个程序集，一个程序集下面可以包含多个命名空间。</p>","autoDesc":true}');export{_ as comp,q as data};
