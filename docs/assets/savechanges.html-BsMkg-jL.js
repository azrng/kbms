import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-DaCCUZLQ.js";const t="/kbms/common/7bbb14d0523a425ca2f3b1aa39380043.png",h={};function l(p,s){return e(),a("div",null,s[0]||(s[0]=[n('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>本文来简单了解一下EFCore中的SaveChanges方法。</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>从字面意思看是保存状态，也就是最终将数据保存到数据库的时候，它直接关系到数据持久性和一致性(当存在多个实体的时候会自动开启事务)。官网对其描述为保留数据库的所有更新，并在对象上下文中重置更改跟踪。</p><p>SaveChanges有以下关键点</p><ul><li><p>数据提交和事务性操作：SaveChanges是将对数据上下文所做的更改保存到数据库的方法。它其实是一个事务性操作，数据要么所有更改都成功提交到数据库，要么它们都会回滚。这样保证了数据的一致性，如果在保存期间发生错误，数据库不会处于部分更改的状态。</p></li><li><p>更改跟踪：在EF中，对实体对象的更改首先保存在内存中的一个缓冲区中，也就是所谓的更改跟踪。当我调用SaveChanges时，EF会检查这个缓冲区，将更改保存到数据库中的相应实体。</p></li><li><p>异常处理：SaveChanges方法可能会引发各种异常，如数据库约束违规、连接问题等。因此，在实际应用中，需要编写相应的异常处理代码，以确保系统能够发现这些潜在问题，并记录错误日志，可以给解决错误提供帮助。</p></li><li><p>性能优化：EF有时会将多个更改批量提交到数据库，以提高性能。不过，根据应用程序的需求，我们可以调整EF的跟踪状态，以满足特定的性能要求。</p></li><li><p>返回值：SaveChanges通常返回一个整数，表示成功保存到数据库的实体数量。这代表数据是否插入成功。</p></li></ul><h2 id="执行步骤" tabindex="-1"><a class="header-anchor" href="#执行步骤"><span>执行步骤</span></a></h2><p><img src="'+t+`" alt="图片"></p><p>1、首先是更改跟踪（Change Tracking） 当你在应用程序中对实体对象进行更改（新增、更新、删除）时，Entity Framework会使用一种称为更改跟踪的机制来跟踪这些更改。每个实体对象都有一个状态，表示它在内存中的状态，例如Added（新增）、Modified（修改）、Deleted（删除）等。</p><p>2、构建SQL语句：在调用SaveChanges方法之前，Entity Framework会分析内存中的更改跟踪信息，确定哪些实体需要插入、更新或删除。然后，它会生成相应的SQL语句来执行这些操作。没有问题后这些SQL语句会被发送到数据库以执行。</p><p>3、数据库连接和事务：Entity Framework会打开与数据库的连接，并在一个事务中执行生成的SQL语句。这一步非常关键，因为它确保了所有更改要么全部成功保存到数据库，要么全部回滚。如果有任何一个SQL语句失败，事务会回滚，以确保数据的一致性。</p><p>4、执行SQL语句：数据库管理系统会执行生成的SQL语句，将更改应用到数据库中的相应表。这包括插入新记录、更新现有记录和删除记录等操作。</p><p>5、处理异常：如果在执行SQL语句时发生异常（如唯一性约束冲突、数据完整性违规等），Entity Framework会捕获这些异常并将它们转化为.NET异常。开发人员可以选择在代码中捕获并处理这些异常，以便采取适当的措施，例如回滚事务或记录错误。</p><p>6、最后是返回结果：SaveChanges方法通常会返回一个整数，表示成功保存到数据库的实体数量。这个值对于了解操作的成功与否以及影响的行数非常有用。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="全局赋值" tabindex="-1"><a class="header-anchor" href="#全局赋值"><span>全局赋值</span></a></h3><p>因为更新和添加的时候会走Savechanges所以共有的字段，比如说创建人、修改人、创建时间、修改时间这些东西可以在保存的时候统一赋值处理</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OpenDbContextSample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DbContext</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SaveChangesAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CancellationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cancellationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> default)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //全局设置创建时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        ChangeTracker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EntityState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Added</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ForEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ((</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">CreateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">DateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //设置更新时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        ChangeTracker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EntityState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Modified</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ForEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">              ((</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DataEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">UpdateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">DateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SaveChangesAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cancellationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>https://mp.weixin.qq.com/s/xR2ZMaXlXu7OqB4F_GK6NQ | 面试官：说说对EF中SaveChanges的理解？作者：莫小星</p>`,20)]))}const d=i(h,[["render",l],["__file","savechanges.html.vue"]]),B=JSON.parse('{"path":"/orm/efcore/base/savechanges.html","title":"SaveChanges","lang":"zh-CN","frontmatter":{"title":"SaveChanges","lang":"zh-CN","date":"2022-03-31T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["orm"],"tag":["无"],"filename":"savechangeskuozhan","slug":"fpdoto","docsId":"66563893","description":"前言 本文来简单了解一下EFCore中的SaveChanges方法。 概述 从字面意思看是保存状态，也就是最终将数据保存到数据库的时候，它直接关系到数据持久性和一致性(当存在多个实体的时候会自动开启事务)。官网对其描述为保留数据库的所有更新，并在对象上下文中重置更改跟踪。 SaveChanges有以下关键点 数据提交和事务性操作：SaveChanges...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/base/savechanges.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"SaveChanges"}],["meta",{"property":"og:description","content":"前言 本文来简单了解一下EFCore中的SaveChanges方法。 概述 从字面意思看是保存状态，也就是最终将数据保存到数据库的时候，它直接关系到数据持久性和一致性(当存在多个实体的时候会自动开启事务)。官网对其描述为保留数据库的所有更新，并在对象上下文中重置更改跟踪。 SaveChanges有以下关键点 数据提交和事务性操作：SaveChanges..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/7bbb14d0523a425ca2f3b1aa39380043.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T07:15:56.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T07:15:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SaveChanges\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/7bbb14d0523a425ca2f3b1aa39380043.png\\"],\\"datePublished\\":\\"2022-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T07:15:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"执行步骤","slug":"执行步骤","link":"#执行步骤","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"全局赋值","slug":"全局赋值","link":"#全局赋值","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697288823000,"updatedTime":1716016556000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":3.78,"words":1134},"filePathRelative":"orm/efcore/base/savechanges.md","localizedDate":"2022年3月31日","excerpt":"<h2>前言</h2>\\n<p>本文来简单了解一下EFCore中的SaveChanges方法。</p>\\n<h2>概述</h2>\\n<p>从字面意思看是保存状态，也就是最终将数据保存到数据库的时候，它直接关系到数据持久性和一致性(当存在多个实体的时候会自动开启事务)。官网对其描述为保留数据库的所有更新，并在对象上下文中重置更改跟踪。</p>\\n<p>SaveChanges有以下关键点</p>\\n<ul>\\n<li>\\n<p>数据提交和事务性操作：SaveChanges是将对数据上下文所做的更改保存到数据库的方法。它其实是一个事务性操作，数据要么所有更改都成功提交到数据库，要么它们都会回滚。这样保证了数据的一致性，如果在保存期间发生错误，数据库不会处于部分更改的状态。</p>\\n</li>\\n<li>\\n<p>更改跟踪：在EF中，对实体对象的更改首先保存在内存中的一个缓冲区中，也就是所谓的更改跟踪。当我调用SaveChanges时，EF会检查这个缓冲区，将更改保存到数据库中的相应实体。</p>\\n</li>\\n<li>\\n<p>异常处理：SaveChanges方法可能会引发各种异常，如数据库约束违规、连接问题等。因此，在实际应用中，需要编写相应的异常处理代码，以确保系统能够发现这些潜在问题，并记录错误日志，可以给解决错误提供帮助。</p>\\n</li>\\n<li>\\n<p>性能优化：EF有时会将多个更改批量提交到数据库，以提高性能。不过，根据应用程序的需求，我们可以调整EF的跟踪状态，以满足特定的性能要求。</p>\\n</li>\\n<li>\\n<p>返回值：SaveChanges通常返回一个整数，表示成功保存到数据库的实体数量。这代表数据是否插入成功。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,B as data};
