import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-qB9_Bjjp.js";const t={},p=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>为了提高封装性，类型或者类型成员可以在声明中添加以下五个访问权限修饰符来限定其他类型和其他程序集的对它的访问。</p><p>通过下面的实例来进行操作 新建两个控制台程序和一个类库程序，类库程序里面有一个类为User，控制台下有一个类为Animal</p><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public"><span>public</span></a></h3><p>完全访问权限。枚举类型成员或者接口成员默认的可访问性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Model</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置该类的访问修饰符为public，默认是internal</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> 
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//User类可以在其他程序集下访问</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="internal" tabindex="-1"><a class="header-anchor" href="#internal"><span>internal</span></a></h3><p>仅可以在同一个程序集内可以访问，或供友元程序集访问。这是非嵌套类型的默认可访问性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//错误 “User”不可访问，因为具有一定的保护级别</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="private" tabindex="-1"><a class="header-anchor" href="#private"><span>private</span></a></h3><p>仅可以在包含类型中访问，这是类或者结构体成员的默认可访问性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token comment">//错误 命名空间中定义的元素无法显示声明为private、protected、protected internal或private protected</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Animal</span>
<span class="token punctuation">{</span>
    Sex <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span> <span class="token comment">// name不可访问</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="projected" tabindex="-1"><a class="header-anchor" href="#projected"><span>projected</span></a></h3><p>仅可以在包含类型或者子类中访问</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//仅可以在包含类型或者子类中访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animal<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无法访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="protected-internal" tabindex="-1"><a class="header-anchor" href="#protected-internal"><span>protected internal</span></a></h3><blockquote><p>注意：CLR有protected和internal可访问呢性交集的定义，但是c#不支持</p></blockquote><p>protected和internal可访问性的并集。默认情况尽可能将一切规定为私有，然后每一个修饰符都会提高其访问级别。所以要哪个protected internal修饰的成员在两个方面的访问级别都提高了</p><h2 id="其他概念" tabindex="-1"><a class="header-anchor" href="#其他概念"><span>其他概念</span></a></h2><h3 id="可访问性封顶" tabindex="-1"><a class="header-anchor" href="#可访问性封顶"><span>可访问性封顶</span></a></h3><p>类的可访问性是它内部声明成员可访问性的最大访问性。</p><h3 id="访问修饰符限制" tabindex="-1"><a class="header-anchor" href="#访问修饰符限制"><span>访问修饰符限制</span></a></h3><ul><li>继承基类重写函数，重写的函数访问性必须一致。</li><li>子类可以比基类的访问权限低，但是不能比基类访问权限高。</li></ul>`,24),c=[p];function l(o,i){return s(),a("div",null,c)}const d=n(t,[["render",l],["__file","fangwenxiushifu.html.vue"]]),k=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/fangwenxiushifu.html","title":"访问修饰符","lang":"zh-CN","frontmatter":{"title":"访问修饰符","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"fangwenxiushifu","slug":"qcqig1","docsId":"47625832","description":"概述 为了提高封装性，类型或者类型成员可以在声明中添加以下五个访问权限修饰符来限定其他类型和其他程序集的对它的访问。 通过下面的实例来进行操作 新建两个控制台程序和一个类库程序，类库程序里面有一个类为User，控制台下有一个类为Animal public 完全访问权限。枚举类型成员或者接口成员默认的可访问性。 internal 仅可以在同一个程序集内可...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/fangwenxiushifu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"访问修饰符"}],["meta",{"property":"og:description","content":"概述 为了提高封装性，类型或者类型成员可以在声明中添加以下五个访问权限修饰符来限定其他类型和其他程序集的对它的访问。 通过下面的实例来进行操作 新建两个控制台程序和一个类库程序，类库程序里面有一个类为User，控制台下有一个类为Animal public 完全访问权限。枚举类型成员或者接口成员默认的可访问性。 internal 仅可以在同一个程序集内可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"访问修饰符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"public","slug":"public","link":"#public","children":[]},{"level":3,"title":"internal","slug":"internal","link":"#internal","children":[]},{"level":3,"title":"private","slug":"private","link":"#private","children":[]},{"level":3,"title":"projected","slug":"projected","link":"#projected","children":[]},{"level":3,"title":"protected internal","slug":"protected-internal","link":"#protected-internal","children":[]}]},{"level":2,"title":"其他概念","slug":"其他概念","link":"#其他概念","children":[{"level":3,"title":"可访问性封顶","slug":"可访问性封顶","link":"#可访问性封顶","children":[]},{"level":3,"title":"访问修饰符限制","slug":"访问修饰符限制","link":"#访问修饰符限制","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"dotnet/csharp/duixiangheleixing/fangwenxiushifu.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>为了提高封装性，类型或者类型成员可以在声明中添加以下五个访问权限修饰符来限定其他类型和其他程序集的对它的访问。</p>\\n<p>通过下面的实例来进行操作\\n新建两个控制台程序和一个类库程序，类库程序里面有一个类为User，控制台下有一个类为Animal</p>\\n<h3>public</h3>\\n<p>完全访问权限。枚举类型成员或者接口成员默认的可访问性。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">Model</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//设置该类的访问修饰符为public，默认是internal</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> \\n    <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Animal</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">Animal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> user <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//User类可以在其他程序集下访问</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Sex <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
