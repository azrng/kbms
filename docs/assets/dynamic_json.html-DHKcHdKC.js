import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,d as s,e as c,b as i}from"./app-Bw62I61B.js";const l={},r=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),u={href:"https://github.com/Groxan/Dynamic.Json",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h2 id="实例化动态json" tabindex="-1"><a class="header-anchor" href="#实例化动态json"><span>实例化动态Json</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// parse json from string/stream/etc, for example</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> DJson<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">@&quot;
{
    &quot;&quot;versionNumber&quot;&quot;: 1,
    &quot;&quot;product_name&quot;&quot;: &quot;&quot;qwerty&quot;&quot;,
    &quot;&quot;items&quot;&quot;: [ 1, 2, 3 ],
    &quot;&quot;settings&quot;&quot;: {
        &quot;&quot;enabled&quot;&quot;: false
    }
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or read json from file</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> DJson<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token string">&quot;file.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or get json from HTTP</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> DJson<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.com/endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or use HttpClient extension</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetJsonAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.com/endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中间件读取请求体" tabindex="-1"><a class="header-anchor" href="#中间件读取请求体"><span>中间件读取请求体</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">HasJsonContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> requestStream <span class="token operator">=</span> content<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>BodyReader<span class="token punctuation">.</span><span class="token function">AsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">dynamic</span></span> jsonObject <span class="token operator">=</span> DJson<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>requestStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    content<span class="token punctuation">.</span>Items<span class="token punctuation">[</span><span class="token string">&quot;BodyJson&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> jsonObject<span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function m(k,h){const a=e("ExternalLinkIcon");return o(),p("div",null,[r,n("p",null,[s("用于基于新的System.Text.Json提供轻量级动态包装器。 github："),n("a",u,[s("https://github.com/Groxan/Dynamic.Json"),c(a)])]),d])}const b=t(l,[["render",m],["__file","dynamic_json.html.vue"]]),y=JSON.parse('{"path":"/dotnet/base/serialize/json/dynamic_json.html","title":"Dynamic.Json","lang":"zh-CN","frontmatter":{"title":"Dynamic.Json","lang":"zh-CN","date":"2022-08-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dynamic_json","slug":"xdk2hb","docsId":"90089292","description":"介绍 用于基于新的System.Text.Json提供轻量级动态包装器。 github：https://github.com/Groxan/Dynamic.Json 操作 实例化动态Json 中间件读取请求体","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/json/dynamic_json.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Dynamic.Json"}],["meta",{"property":"og:description","content":"介绍 用于基于新的System.Text.Json提供轻量级动态包装器。 github：https://github.com/Groxan/Dynamic.Json 操作 实例化动态Json 中间件读取请求体"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dynamic.Json\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"实例化动态Json","slug":"实例化动态json","link":"#实例化动态json","children":[{"level":3,"title":"中间件读取请求体","slug":"中间件读取请求体","link":"#中间件读取请求体","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.46,"words":137},"filePathRelative":"dotnet/base/serialize/json/dynamic_json.md","localizedDate":"2022年8月20日","excerpt":"<h2>介绍</h2>\\n<p>用于基于新的System.Text.Json提供轻量级动态包装器。\\ngithub：<a href=\\"https://github.com/Groxan/Dynamic.Json\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/Groxan/Dynamic.Json</a></p>\\n<h2>操作</h2>\\n<h2>实例化动态Json</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">// parse json from string/stream/etc, for example</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> json <span class=\\"token operator\\">=</span> DJson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Parse</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">@\\"\\n{\\n    \\"\\"versionNumber\\"\\": 1,\\n    \\"\\"product_name\\"\\": \\"\\"qwerty\\"\\",\\n    \\"\\"items\\"\\": [ 1, 2, 3 ],\\n    \\"\\"settings\\"\\": {\\n        \\"\\"enabled\\"\\": false\\n    }\\n}\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// or read json from file</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> json <span class=\\"token operator\\">=</span> DJson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Read</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"file.json\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// or get json from HTTP</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> json <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> DJson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"https://api.com/endpoint\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// or use HttpClient extension</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> json <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> httpClient<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetJsonAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"https://api.com/endpoint\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,y as data};
