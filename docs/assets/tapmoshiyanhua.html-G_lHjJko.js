import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as s,e as n,f as c,d as i}from"./app-Bfb6-vFH.js";const l="/kbms/common/1697290664180-01986408-3ef6-43d9-a68d-50e4d683bb8e.png",u={},r=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>看不懂await，async执行流，其实看不懂太正常了，因为你没用过ContinueWith就不知道await,async有多重要，下面我举两个案例佐证一下？</p><h2 id="嵌套下的异步" tabindex="-1"><a class="header-anchor" href="#嵌套下的异步"><span>嵌套下的异步</span></a></h2><p>写了这么多年的程序，相信大家都知道连接数据库少不了这几个对象，DbConnection，DbCommand，DbDataReader等等。。先来看看ContinueWith在连接数据库时嵌套过深的尴尬。</p><h3 id="_1-netframework-4-0之前的写法" tabindex="-1"><a class="header-anchor" href="#_1-netframework-4-0之前的写法"><span>1. NetFramework 4.0之前的写法</span></a></h3><p>这个时期的代码没有什么好说的，都是程式代码，一撸到底，简洁明了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SyncGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(1) from messages&quot;</span><span class="token punctuation">;</span>

			<span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录条数:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">-</span>

记录条数<span class="token punctuation">:</span><span class="token number">75896</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-netframework-4-0下continuewith的写法" tabindex="-1"><a class="header-anchor" href="#_2-netframework-4-0下continuewith的写法"><span>2. NetFramework 4.0下ContinueWith的写法</span></a></h3><p>当年异步和并发编程概念特别火，这个时期的C#率先使用新的Task一网兜，在数据库操作的几大类中开始有了Async结尾的方法，如OpenAsync,ExecuteScalarAsync,ReadAsync 等等,但遗憾的是那时写异步，只能像下面这样写。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">ContinueWithGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t1 <span class="token operator">=&gt;</span>
	 <span class="token punctuation">{</span>
		 <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		 command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(1) from messages&quot;</span><span class="token punctuation">;</span>

		 <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalarAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t2 <span class="token operator">=&gt;</span>
		 <span class="token punctuation">{</span>
			 command<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			 connection<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			 Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录条数:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">t2<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			 <span class="token keyword">return</span> t2<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
		 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">return</span> task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">-</span>

记录条数<span class="token punctuation">:</span><span class="token number">75896</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比同步代码，这异步代码写的是不是很憋屈，为了应对渐进式的Async方法，我不得不进行ContinueWith的深层嵌套，如果Async更多，那对可读性将是毁灭性的打击，这就是所谓的回调地狱。</p><h3 id="_3-netframework-4-5-下-await-async的写法" tabindex="-1"><a class="header-anchor" href="#_3-netframework-4-5-下-await-async的写法"><span>3. NetFramework 4.5 下 await,async的写法</span></a></h3><p>写到这里让我想起了邢老大的那本自传书《左手梦想，右手疗伤》，这苦这心酸只有真正经历过的人才会懂，没有人能够随随便便成功，接下来大家的期望就是如何做到有同步式的代码又有异步功效，鱼和熊掌我都要，当然是可以的，看看如何用await,async进行改造。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">AsyncGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(1) from messages&quot;</span><span class="token punctuation">;</span>

			<span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> <span class="token keyword">await</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalarAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录条数:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">-</span>

记录条数<span class="token punctuation">:</span><span class="token number">75896</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这代码太简洁了，眼花的朋友还以为是同步代码呢？改造的地方也仅仅是方法签名处加上一个async，异步方法前加上await，相当于痛苦版的ContinueWith。</p><h2 id="循环下的异步" tabindex="-1"><a class="header-anchor" href="#循环下的异步"><span>循环下的异步</span></a></h2><p>上一个案例只是使用ExecuteScalarAsync从数据库中读取一个值来得到表中的记录数，在业务开发中更多的是使用ExecuteReader从数据库中获取批量记录，这个就涉及到了如何在循环中使用异步，想想就太苦难了(┬＿┬)。</p><h3 id="_1-netframework-4-0之前的写法-1" tabindex="-1"><a class="header-anchor" href="#_1-netframework-4-0之前的写法-1"><span>1. NetFramework 4.0之前的写法</span></a></h3><p>这里我从messages表中读取5条记录，然后输出到控制台，详细代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SyncGetMessageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> messageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select message from messages limit 5;&quot;</span><span class="token punctuation">;</span>
			<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					messageList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	messageList<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> messageList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-netframework-4-0下continuewith的写法-1" tabindex="-1"><a class="header-anchor" href="#_2-netframework-4-0下continuewith的写法-1"><span>2. NetFramework 4.0下ContinueWith的写法</span></a></h3><p>要想用ContinueWith完成这功能，最简单有效的办法就是使用递归，用递归的方式把若干个ContinueWith串联起来，而要用递归的话还要单独定义一个方法，写的有点乱，大家将就着看吧。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> <span class="token function">ContinueWithAsyncGetMessageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		task<span class="token punctuation">.</span>Result<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">;</span>

		Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">ContinueWithAsyncGetMessageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t1 <span class="token operator">=&gt;</span>
		 <span class="token punctuation">{</span>
			 <span class="token class-name"><span class="token keyword">var</span></span> messageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			 <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			 command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select message from messages limit 5;&quot;</span><span class="token punctuation">;</span>

			 <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">ExecuteReaderAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t2 <span class="token operator">=&gt;</span>
			 <span class="token punctuation">{</span>
				 <span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token punctuation">(</span>MySqlDataReader<span class="token punctuation">)</span>t2<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
				 <span class="token keyword">return</span> <span class="token function">GetMessageList</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> messageList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t3 <span class="token operator">=&gt;</span>
				 <span class="token punctuation">{</span>
					 reader<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					 command<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					 connection<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t3 <span class="token operator">=&gt;</span> messageList<span class="token punctuation">)</span><span class="token punctuation">;</span>

		 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> task<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 采用递归处理循环</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reader<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetMessageList</span><span class="token punctuation">(</span><span class="token class-name">MySqlDataReader</span> reader<span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> messageList<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
		  <span class="token punctuation">{</span>
			  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>Result<span class="token punctuation">)</span>
			  <span class="token punctuation">{</span>
				  <span class="token class-name"><span class="token keyword">var</span></span> massage <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				  messageList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>massage<span class="token punctuation">)</span><span class="token punctuation">;</span>
				  <span class="token keyword">return</span> <span class="token function">GetMessageList</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> messageList<span class="token punctuation">)</span><span class="token punctuation">;</span>
			  <span class="token punctuation">}</span>
			  <span class="token keyword">else</span>
			  <span class="token punctuation">{</span>
				  <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			  <span class="token punctuation">}</span>
		  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> task<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在递归下探的过程中把messageList集合给填满了，而后将messageList返回给调用端即可，如果没看明白，我画一张图吧！ <img src="`+l+`" alt="" loading="lazy"></p><h3 id="_3-netframework-4-5-下-await-async的写法-1" tabindex="-1"><a class="header-anchor" href="#_3-netframework-4-5-下-await-async的写法-1"><span>3. NetFramework 4.5 下 await,async的写法</span></a></h3><p>刚刚是不是噩梦般经历，救世主来啦，还是要鱼和熊掌一起兼得。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">AsyncGetMessageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> messageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">&quot;server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select message from messages limit 5;&quot;</span><span class="token punctuation">;</span>
			<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">await</span> command<span class="token punctuation">.</span><span class="token function">ExecuteReaderAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					messageList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>reader<span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> messageList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>天底下还有如此简洁的代码就可以实现ContinueWith那种垃圾般代码所实现的功能，我都想仰天长啸，我太难了。</p><h2 id="来源" tabindex="-1"><a class="header-anchor" href="#来源"><span>来源</span></a></h2>`,29),k={href:"https://mp.weixin.qq.com/s/ZGMC-g3FM6oXsmHJzsorCQ",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,s("p",null,[n("微信公众号【一线码农】 "),s("a",k,[n("https://mp.weixin.qq.com/s/ZGMC-g3FM6oXsmHJzsorCQ"),c(a)]),n(" | async,await执行流看不懂？看完这篇以后再也不会了")])])}const y=t(u,[["render",d],["__file","tapmoshiyanhua.html.vue"]]),w=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshiyanhua.html","title":"TAP模式演化","lang":"zh-CN","frontmatter":{"title":"TAP模式演化","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"tapmoshiyanhua","slug":"gg4ghcv908m69ut1","docsId":"142333317","description":"前言 看不懂await，async执行流，其实看不懂太正常了，因为你没用过ContinueWith就不知道await,async有多重要，下面我举两个案例佐证一下？ 嵌套下的异步 写了这么多年的程序，相信大家都知道连接数据库少不了这几个对象，DbConnection，DbCommand，DbDataReader等等。。先来看看ContinueWith在...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshiyanhua.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"TAP模式演化"}],["meta",{"property":"og:description","content":"前言 看不懂await，async执行流，其实看不懂太正常了，因为你没用过ContinueWith就不知道await,async有多重要，下面我举两个案例佐证一下？ 嵌套下的异步 写了这么多年的程序，相信大家都知道连接数据库少不了这几个对象，DbConnection，DbCommand，DbDataReader等等。。先来看看ContinueWith在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1697290664180-01986408-3ef6-43d9-a68d-50e4d683bb8e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:36:41.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:36:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TAP模式演化\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1697290664180-01986408-3ef6-43d9-a68d-50e4d683bb8e.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-17T09:36:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"嵌套下的异步","slug":"嵌套下的异步","link":"#嵌套下的异步","children":[{"level":3,"title":"1. NetFramework 4.0之前的写法","slug":"_1-netframework-4-0之前的写法","link":"#_1-netframework-4-0之前的写法","children":[]},{"level":3,"title":"2. NetFramework 4.0下ContinueWith的写法","slug":"_2-netframework-4-0下continuewith的写法","link":"#_2-netframework-4-0下continuewith的写法","children":[]},{"level":3,"title":"3. NetFramework 4.5 下 await,async的写法","slug":"_3-netframework-4-5-下-await-async的写法","link":"#_3-netframework-4-5-下-await-async的写法","children":[]}]},{"level":2,"title":"循环下的异步","slug":"循环下的异步","link":"#循环下的异步","children":[{"level":3,"title":"1. NetFramework 4.0之前的写法","slug":"_1-netframework-4-0之前的写法-1","link":"#_1-netframework-4-0之前的写法-1","children":[]},{"level":3,"title":"2. NetFramework 4.0下ContinueWith的写法","slug":"_2-netframework-4-0下continuewith的写法-1","link":"#_2-netframework-4-0下continuewith的写法-1","children":[]},{"level":3,"title":"3. NetFramework 4.5 下 await,async的写法","slug":"_3-netframework-4-5-下-await-async的写法-1","link":"#_3-netframework-4-5-下-await-async的写法-1","children":[]}]},{"level":2,"title":"来源","slug":"来源","link":"#来源","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1710668201000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.23,"words":1270},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshiyanhua.md","localizedDate":"2023年10月22日","excerpt":"<h2>前言</h2>\\n<p>看不懂await，async执行流，其实看不懂太正常了，因为你没用过ContinueWith就不知道await,async有多重要，下面我举两个案例佐证一下？</p>\\n<h2>嵌套下的异步</h2>\\n<p>写了这么多年的程序，相信大家都知道连接数据库少不了这几个对象，DbConnection，DbCommand，DbDataReader等等。。先来看看ContinueWith在连接数据库时嵌套过深的尴尬。</p>\\n<h3>1. NetFramework 4.0之前的写法</h3>\\n<p>这个时期的代码没有什么好说的，都是程式代码，一撸到底，简洁明了。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">int</span></span> <span class=\\"token function\\">SyncGetCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> connection <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MySqlConnection</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tconnection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Open</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> command <span class=\\"token operator\\">=</span> connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateCommand</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tcommand<span class=\\"token punctuation\\">.</span>CommandText <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"select count(1) from messages\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> count <span class=\\"token operator\\">=</span> command<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ExecuteScalar</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\tConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"记录条数:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">count</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> Convert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToInt32</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span>output<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span> <span class=\\"token operator\\">-</span>\\n\\n记录条数<span class=\\"token punctuation\\">:</span><span class=\\"token number\\">75896</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,w as data};
