import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as r,o as n}from"./app-B8CExjn9.js";const i={};function l(s,e){return n(),t("div",null,e[0]||(e[0]=[r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>一种发布/订阅结构，通过发布订阅模式解决业务之间的解耦，订阅者之间相互不认识也互不干扰。</p><h3 id="事件总线类型" tabindex="-1"><a class="header-anchor" href="#事件总线类型"><span>事件总线类型</span></a></h3><p>跨进程事件总线：发布方与订阅方不在同一个进程中，订阅方是一个新的请求。组件：CAP、MasaFramework<br> 进程内事件总线：发布方与订阅方在同一个进程中，订阅方出错会引起当前请求的出错。组件：Mediatr、MasaFramework</p><h3 id="常用的模型" tabindex="-1"><a class="header-anchor" href="#常用的模型"><span>常用的模型</span></a></h3><p>事件总线常用的模型：内存模型、传统的队列模型、发布-订阅模型。</p><ul><li>内存模型：进程内模型，事件总线在内部遍历消费者列表传递数据</li><li>队列模型：消息或者事件持久化到传统消息队列(Queue)即返回，以实时性降低换取吞吐能力提升</li><li>发布-订阅模型：事件源(EventSource)得到强化，出现如分布式、持久化、消费复制/分区等特性。</li></ul><h3 id="事务类型" tabindex="-1"><a class="header-anchor" href="#事务类型"><span>事务类型</span></a></h3><p>最终一致性、 saga、 tcc</p><h2 id="对比消息队列" tabindex="-1"><a class="header-anchor" href="#对比消息队列"><span>对比消息队列</span></a></h2><p>事件总线(EventBus)是一个模式，是事件集散中心，负责收集、散发事件，但是它本身不消费事件。<br> mq是一种技术，一般是事件处理者，接收到事件之后，内部消费掉。</p><p>事件总线是一种消息传递的模型，它提供了一种架构，用于实现多个系统之间消息传递。消息队列是一种消息传递的机制，它将消息从发送方发送到接收方的队列中，以便在接收时进行处理。事件总线可以使用消息队列来实现。事件总线将消息发布到消息队列，然后交给消费者来处理。</p><p>一个不恰当例子：<br> 消息队列=美团骑手。<br> 消息总线=本地外卖骑手管理公司，统一接各大外卖平台的单子然后分发给骑手，可以发给美团骑手，但是也可以发给饿了吗骑手！</p><h2 id="常用框架" tabindex="-1"><a class="header-anchor" href="#常用框架"><span>常用框架</span></a></h2><ul><li><a href="https://github.com/MassTransit/MassTransit" target="_blank" rel="noopener noreferrer">MassTransit</a></li><li><a href="https://github.com/Particular/NServiceBus" target="_blank" rel="noopener noreferrer">NServiceBus</a></li><li><a href="https://www.nuget.org/packages/WolverineFx" target="_blank" rel="noopener noreferrer">WolverineFx </a></li><li><a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener noreferrer">CAP</a></li><li>Rabbitmq</li><li>Jaina</li><li>MediatR</li><li>SlimMessageBus</li></ul><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>开源项目示例：<a href="https://github.com/EasilyNET/EasilyNET/tree/1.5.1/src/EasilyNET.RabbitBus" target="_blank" rel="noopener noreferrer">https://github.com/EasilyNET/EasilyNET/tree/1.5.1/src/EasilyNET.RabbitBus</a></p><p>事件总线：<a href="https://dotnet.libhunt.com/slimmessagebus-alternatives" target="_blank" rel="noopener noreferrer">https://dotnet.libhunt.com/slimmessagebus-alternatives</a></p><p>在 .NET 8 中使用 <a href="http://WireMock.NET" target="_blank" rel="noopener noreferrer">WireMock.NET</a> 进行集成测试：<a href="https://mp.weixin.qq.com/s/GX0J3sSwFU1BmPULY0WoLQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GX0J3sSwFU1BmPULY0WoLQ</a></p>',19)]))}const h=a(i,[["render",l],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/middleware/eventBus/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"readme","slug":"vlgr58uq099gk26d","docsId":"112774377","description":"概述 一种发布/订阅结构，通过发布订阅模式解决业务之间的解耦，订阅者之间相互不认识也互不干扰。 事件总线类型 跨进程事件总线：发布方与订阅方不在同一个进程中，订阅方是一个新的请求。组件：CAP、MasaFramework 进程内事件总线：发布方与订阅方在同一个进程中，订阅方出错会引起当前请求的出错。组件：Mediatr、MasaFramework 常用...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/eventBus/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 一种发布/订阅结构，通过发布订阅模式解决业务之间的解耦，订阅者之间相互不认识也互不干扰。 事件总线类型 跨进程事件总线：发布方与订阅方不在同一个进程中，订阅方是一个新的请求。组件：CAP、MasaFramework 进程内事件总线：发布方与订阅方在同一个进程中，订阅方出错会引起当前请求的出错。组件：Mediatr、MasaFramework 常用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-03T01:56:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-03T01:56:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-03T01:56:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"事件总线类型","slug":"事件总线类型","link":"#事件总线类型","children":[]},{"level":3,"title":"常用的模型","slug":"常用的模型","link":"#常用的模型","children":[]},{"level":3,"title":"事务类型","slug":"事务类型","link":"#事务类型","children":[]}]},{"level":2,"title":"对比消息队列","slug":"对比消息队列","link":"#对比消息队列","children":[]},{"level":2,"title":"常用框架","slug":"常用框架","link":"#常用框架","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1725328598000,"contributors":[{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1},{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":5}]},"readingTime":{"minutes":1.99,"words":597},"filePathRelative":"middleware/eventBus/readme.md","localizedDate":"2023年10月18日","excerpt":"<h2>概述</h2>\\n<p>一种发布/订阅结构，通过发布订阅模式解决业务之间的解耦，订阅者之间相互不认识也互不干扰。</p>\\n<h3>事件总线类型</h3>\\n<p>跨进程事件总线：发布方与订阅方不在同一个进程中，订阅方是一个新的请求。组件：CAP、MasaFramework<br>\\n进程内事件总线：发布方与订阅方在同一个进程中，订阅方出错会引起当前请求的出错。组件：Mediatr、MasaFramework</p>\\n<h3>常用的模型</h3>\\n<p>事件总线常用的模型：内存模型、传统的队列模型、发布-订阅模型。</p>\\n<ul>\\n<li>内存模型：进程内模型，事件总线在内部遍历消费者列表传递数据</li>\\n<li>队列模型：消息或者事件持久化到传统消息队列(Queue)即返回，以实时性降低换取吞吐能力提升</li>\\n<li>发布-订阅模型：事件源(EventSource)得到强化，出现如分布式、持久化、消费复制/分区等特性。</li>\\n</ul>","autoDesc":true}');export{h as comp,c as data};
