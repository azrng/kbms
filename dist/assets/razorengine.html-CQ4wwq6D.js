import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const r={},i=e('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>RazorEngine 是基于 Microsoft 的 Razor 解析引擎构建的模板引擎，允许您使用 Razor 语法构建动态模板。</p><p><strong>注意：目前该包已经不更新</strong></p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>.Net在编译的时候会把.cshtml文件生成一个动态程序集，每次调用，就会每次生成一个不重复的动态程序集，通过设置模板key来实现一次编译，下次会使用缓存，不会生成新的动态程序集。 如果cshtml文件发生了修改，那么还调用缓存的话，那么就不合适了，所以可以将模板key设置为动态的。</p><ul><li>根据文件名+修改时间</li><li>文件的MD5值作为模板key</li></ul>',6),u={href:"https://www.cnblogs.com/green-jcx/p/5786669.html",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"razorengine",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#razorengine"},[n("span",null,"RazorEngine")])],-1),d={href:"https://github.com/Antaris/RazorEngine",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="基础操作" tabindex="-1"><a class="header-anchor" href="#基础操作"><span>基础操作</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">RazorEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">RazorEngine<span class="token punctuation">.</span>Templating</span><span class="token punctuation">;</span> <span class="token comment">// For extension methods.</span>

<span class="token class-name"><span class="token keyword">string</span></span> template <span class="token operator">=</span> <span class="token string">&quot;Hello @Model.Name, welcome to RazorEngine!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">RunCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">&quot;templateKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;templateKey&quot;是一个模板key，可以根据这个重新运行，如果你模板会一直不变化，只编译一次模块可以多次使用，如果你的模板内容会变，那么缓存会失效。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// using RazorEngine.Templating; </span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;templateKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Max&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>null参数是modeType，为null意味着我们使用dynamic作为模型的类型，也可以提供类型对象来使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// using RazorEngine.Templating; // Dont forget to include this.</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">RunCompile</span><span class="token punctuation">(</span><span class="token string">&quot;templateKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Max&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用@model的时候，modeType参数将被忽略，但您应该在每次调用时使用相同的类型实例或者null，以防止由于缓存层中的类型不匹配而导致不必要的重新编译。</p><blockquote><p>在实际操作的时候，页面模板头部使用@model会报错，可能是我操作不对，但是不影响我的使用。</p></blockquote><h2 id="razorengine-netcore" tabindex="-1"><a class="header-anchor" href="#razorengine-netcore"><span>RazorEngine.NetCore</span></a></h2>`,9),v={href:"https://github.com/fouadmess/RazorEngine",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="基础操作-1" tabindex="-1"><a class="header-anchor" href="#基础操作-1"><span>基础操作</span></a></h3><p>和上面的RazorEngine一样，不再描述。</p><h3 id="填充内容导出html" tabindex="-1"><a class="header-anchor" href="#填充内容导出html"><span>填充内容导出HTML</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;RazorEngine.NetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">table</span> border<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;border:1px solid black;text-align:center&quot;</span> cellpadding<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> cellspacing<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">th</span> colspan<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span>@Model<span class="token punctuation">.</span>UserName<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>科目<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>成绩<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
        @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> Model<span class="token punctuation">.</span>SubjectList<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>@item<span class="token punctuation">.</span>SubjectName<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>@item<span class="token punctuation">.</span>Grade<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span>

    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要右键设置始终复制</p></blockquote><p>涉及到的UserGradeDto类如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">RazorEngineConsoleApp<span class="token punctuation">.</span>Models</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserGradeDto</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 科目成绩集合</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>SubjectGradeDto<span class="token punctuation">&gt;</span></span> SubjectList <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">UserGradeDto</span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserGradeDto</span>
            <span class="token punctuation">{</span>
                UserName <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
                SubjectList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SubjectGradeDto<span class="token punctuation">&gt;</span></span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubjectGradeDto</span>
                        <span class="token punctuation">{</span>
                            SubjectName <span class="token operator">=</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">,</span>
                            Grade <span class="token operator">=</span> <span class="token number">90</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubjectGradeDto</span>
                        <span class="token punctuation">{</span>
                            SubjectName <span class="token operator">=</span> <span class="token string">&quot;数学&quot;</span><span class="token punctuation">,</span>
                            Grade <span class="token operator">=</span> <span class="token number">80</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubjectGradeDto</span>
                        <span class="token punctuation">{</span>
                            SubjectName <span class="token operator">=</span> <span class="token string">&quot;英语&quot;</span><span class="token punctuation">,</span>
                            Grade <span class="token operator">=</span> <span class="token number">70</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectGradeDto</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 科目名字</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SubjectName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 成绩</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Grade <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模板通过强类型方式填充" tabindex="-1"><a class="header-anchor" href="#模板通过强类型方式填充"><span>模板通过强类型方式填充</span></a></h4><p>配置生成的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> <span class="token string">&quot;View&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usergrade1.cshtml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;模板文件不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//打开并且读取模板</span>
<span class="token class-name"><span class="token keyword">string</span></span> template <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//一次编译多次使用</span>
<span class="token punctuation">{</span>
    <span class="token comment">//modelType为null</span>
    <span class="token comment">//添加模板</span>
    Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">AddTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;usergrade1&quot;</span><span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//编译模板</span>
    Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">&quot;usergrade1&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">modelType</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//运行模板</span>
    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;usergrade1&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">modelType</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> UserGradeDto<span class="token punctuation">.</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//modelType不为null</span>
    <span class="token doc-comment comment">////添加模板</span>
    <span class="token comment">//Engine.Razor.AddTemplate(&quot;usergrade1&quot;, template);</span>
    <span class="token doc-comment comment">////编译模板</span>
    <span class="token comment">//Engine.Razor.Compile(&quot;usergrade1&quot;, typeof(UserGradeDto));</span>
    <span class="token doc-comment comment">////运行模板</span>
    <span class="token comment">//string str = Engine.Razor.Run(&quot;usergrade1&quot;, typeof(UserGradeDto), UserGradeDto.GetInfo());</span>
    <span class="token comment">//Console.WriteLine(str);</span>
<span class="token punctuation">}</span>

<span class="token comment">//一次编译一次使用</span>
<span class="token punctuation">{</span>
    <span class="token comment">//var str = Engine.Razor.RunCompile(template, &quot;usergrade1&quot;, typeof(UserGradeDto), UserGradeDto.GetInfo());</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">table</span> border<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> style<span class="token operator">=</span><span class="token string">&quot;border:1px solid black;text-align:center&quot;</span> cellpadding<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> cellspacing<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">th</span> colspan<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>科目<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>成绩<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>语文<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">90</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>数学<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">80</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>英语<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token number">70</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模板通过dynamic填充" tabindex="-1"><a class="header-anchor" href="#模板通过dynamic填充"><span>模板通过dynamic填充</span></a></h4><p>配置生成的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> <span class="token string">&quot;View&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;usergrade2.cshtml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;模板文件不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//打开并且读取模板</span>
<span class="token class-name"><span class="token keyword">string</span></span> template <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//dynamic方式</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Engine<span class="token punctuation">.</span>Razor<span class="token punctuation">.</span><span class="token function">RunCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token string">&quot;templateKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> UserName <span class="token operator">=</span> <span class="token string">&quot;李思&quot;</span><span class="token punctuation">,</span> SubjectList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SubjectGradeDto<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SubjectGradeDto</span> <span class="token punctuation">{</span> SubjectName <span class="token operator">=</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">,</span> Grade <span class="token operator">=</span> <span class="token number">90</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的SubjectGradeDto内容就是上面UserGradeDto的内容</p></blockquote><p>生成结果和上面示例结果一致，不在张贴。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这两个包都已经不再更新，但是该项目正在寻求新的维护者，感兴趣的可以去研究下源码。</p>`,22);function b(h,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[n("p",null,[s("资料来源：Razor模板引擎："),n("a",u,[s("https://www.cnblogs.com/green-jcx/p/5786669.html"),t(a)])])]),k,n("p",null,[s("支持NetFramework4.0和4.5，最后更新时间2017.06.16 仓库地址："),n("a",d,[s("https://github.com/Antaris/RazorEngine"),t(a)])]),m,n("p",null,[s("支持.NetCore3.1、.NetSandard2.1，最后更新时间2020.06.19 仓库地址："),n("a",v,[s("https://github.com/fouadmess/RazorEngine"),t(a)])]),g])}const z=p(r,[["render",b],["__file","razorengine.html.vue"]]),f=JSON.parse('{"path":"/dotnet/mobanyinqing/razor/razorengine.html","title":"RazorEngine","lang":"zh-CN","frontmatter":{"title":"RazorEngine","lang":"zh-CN","date":"2023-02-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"razorengine","slug":"yuzzvr","docsId":"74438261","description":"介绍 RazorEngine 是基于 Microsoft 的 Razor 解析引擎构建的模板引擎，允许您使用 Razor 语法构建动态模板。 注意：目前该包已经不更新 原理 .Net在编译的时候会把.cshtml文件生成一个动态程序集，每次调用，就会每次生成一个不重复的动态程序集，通过设置模板key来实现一次编译，下次会使用缓存，不会生成新的动态程序集...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/mobanyinqing/razor/razorengine.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"RazorEngine"}],["meta",{"property":"og:description","content":"介绍 RazorEngine 是基于 Microsoft 的 Razor 解析引擎构建的模板引擎，允许您使用 Razor 语法构建动态模板。 注意：目前该包已经不更新 原理 .Net在编译的时候会把.cshtml文件生成一个动态程序集，每次调用，就会每次生成一个不重复的动态程序集，通过设置模板key来实现一次编译，下次会使用缓存，不会生成新的动态程序集..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RazorEngine\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"RazorEngine","slug":"razorengine","link":"#razorengine","children":[{"level":3,"title":"基础操作","slug":"基础操作","link":"#基础操作","children":[]}]},{"level":2,"title":"RazorEngine.NetCore","slug":"razorengine-netcore","link":"#razorengine-netcore","children":[{"level":3,"title":"基础操作","slug":"基础操作-1","link":"#基础操作-1","children":[]},{"level":3,"title":"填充内容导出HTML","slug":"填充内容导出html","link":"#填充内容导出html","children":[{"level":4,"title":"模板通过强类型方式填充","slug":"模板通过强类型方式填充","link":"#模板通过强类型方式填充","children":[]},{"level":4,"title":"模板通过dynamic填充","slug":"模板通过dynamic填充","link":"#模板通过dynamic填充","children":[]}]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.56,"words":1069},"filePathRelative":"dotnet/mobanyinqing/razor/razorengine.md","localizedDate":"2023年2月6日","excerpt":"<h2>介绍</h2>\\n<p>RazorEngine 是基于 Microsoft 的 Razor 解析引擎构建的模板引擎，允许您使用 Razor 语法构建动态模板。</p>\\n<p><strong>注意：目前该包已经不更新</strong></p>\\n<h2>原理</h2>\\n<p>.Net在编译的时候会把.cshtml文件生成一个动态程序集，每次调用，就会每次生成一个不重复的动态程序集，通过设置模板key来实现一次编译，下次会使用缓存，不会生成新的动态程序集。\\n如果cshtml文件发生了修改，那么还调用缓存的话，那么就不合适了，所以可以将模板key设置为动态的。</p>\\n<ul>\\n<li>根据文件名+修改时间</li>\\n<li>文件的MD5值作为模板key</li>\\n</ul>","autoDesc":true}');export{z as comp,f as data};
