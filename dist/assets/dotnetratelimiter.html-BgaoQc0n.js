import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as s}from"./app-pTjtTAfI.js";const t={};function l(r,e){return s(),a("div",null,e[0]||(e[0]=[n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在构建 .NET API 时，您可能希望控制用户请求的频率以防止恶意攻击。换句话说，您可能希望限制短时间内来自某个 IP 地址的请求数量，以减轻拒绝服务攻击，这也称为限流。有很多 Nuget 包使用中间件来处理用户请求，但中间件存在一个问题，那就是它们会影响所有传入请求！但是，如果您只想控制一些关键的接口，有没有简单的方案， 当然有，使用 DotNetRateLimiter 就可以实现！</p><p>仓库地址：<a href="https://github.com/sa-es-ir/DotNet.RateLimit" target="_blank" rel="noopener noreferrer">https://github.com/sa-es-ir/DotNet.RateLimit</a></p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h3><ol><li><ol><li>使用 Nuget 安装 DotNetRateLimiter</li></ol></li><li><ol start="2"><li>修改 Program.cs, 添加限流服务，如下</li></ol></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>using DotNet.RateLimiter;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var builder = WebApplication.CreateBuilder(args);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>builder.Services.AddRateLimitService(builder.Configuration);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以直接在接口的方法上，使用限流，通过添加 RateLimit 特性，如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[HttpGet]</span></span>
<span class="line"><span>[RateLimit(PeriodInSec = 60, Limit = 3)]</span></span>
<span class="line"><span>public IEnumerable&lt;WeatherForecast&gt; Get()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        Date = DateTime.Now.AddDays(index),</span></span>
<span class="line"><span>        TemperatureC = Random.Shared.Next(-20, 55),</span></span>
<span class="line"><span>        Summary = Summaries[Random.Shared.Next(Summaries.Length)]</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>    .ToArray();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RateLimit(PeriodInSec = 60, Limit = 3) 这个接口方法每分钟只允许 3 个请求， 如果调用 api 超过 3 次，就会收到 429（请求过多）, 我们可以在 swagger 中进行测试。</p><p>还可以搭配路由参数一起使用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[HttpGet(&quot;by-route/{id}&quot;)]</span></span>
<span class="line"><span>[RateLimit(PeriodInSec = 60, Limit = 3, RouteParams = &quot;id&quot;)]</span></span>
<span class="line"><span>public IEnumerable&lt;WeatherForecast&gt; Get(int id)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   ....</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接在控制器上进行使用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[RateLimit(Limit = 3, PeriodInSec = 60, Scope = RateLimitScope.Controller)]</span></span>
<span class="line"><span>public class RateLimitOnAllController : ControllerBase</span></span>
<span class="line"><span>{ .... }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您希望自定义错误响应内容，返回更友好的提示， 可以在 appsetting.json 中进行配置，如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;RateLimitOption&quot;: {</span></span>
<span class="line"><span>    &quot;EnableRateLimit&quot;: true, </span></span>
<span class="line"><span>    &quot;HttpStatusCode&quot;: 429, /</span></span>
<span class="line"><span>    &quot;ErrorMessage&quot;: &quot;请求过多&quot;, </span></span>
<span class="line"><span>    &quot;IpHeaderName&quot;: &quot;X-Forwarded-For&quot;  </span></span>
<span class="line"><span>    &quot;RedisConnection&quot;: &quot;127.0.0.1:6379&quot;,  </span></span>
<span class="line"><span>    &quot;IpWhiteList&quot;: [&quot;::1&quot;], </span></span>
<span class="line"><span>    &quot;ClientIdentifier&quot;: &quot;X-Client-Id&quot;    </span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RateLimit 默认使用内存缓存，并且支持配置 Redis 连接， 这样可以对分布式应用进行限流。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/SljGcSKdIrBJKO2u32XNOA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/SljGcSKdIrBJKO2u32XNOA</a> | 简单好用！.NET 基于 ActionFilters 的限流库！</p>`,19)]))}const o=i(t,[["render",l],["__file","dotnetratelimiter.html.vue"]]),c=JSON.parse('{"path":"/dotnet/commonNuget/xianliu/dotnetratelimiter.html","title":"DotNetRateLimiter","lang":"zh-CN","frontmatter":{"title":"DotNetRateLimiter","lang":"zh-CN","date":"2023-08-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dotnetratelimiter","slug":"zkhdxsm75nfc7wtu","docsId":"135422573","description":"概述 在构建 .NET API 时，您可能希望控制用户请求的频率以防止恶意攻击。换句话说，您可能希望限制短时间内来自某个 IP 地址的请求数量，以减轻拒绝服务攻击，这也称为限流。有很多 Nuget 包使用中间件来处理用户请求，但中间件存在一个问题，那就是它们会影响所有传入请求！但是，如果您只想控制一些关键的接口，有没有简单的方案， 当然有，使用 Dot...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/xianliu/dotnetratelimiter.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"DotNetRateLimiter"}],["meta",{"property":"og:description","content":"概述 在构建 .NET API 时，您可能希望控制用户请求的频率以防止恶意攻击。换句话说，您可能希望限制短时间内来自某个 IP 地址的请求数量，以减轻拒绝服务攻击，这也称为限流。有很多 Nuget 包使用中间件来处理用户请求，但中间件存在一个问题，那就是它们会影响所有传入请求！但是，如果您只想控制一些关键的接口，有没有简单的方案， 当然有，使用 Dot..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DotNetRateLimiter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"dotnet/commonNuget/xianliu/dotnetratelimiter.md","localizedDate":"2023年8月6日","excerpt":"<h2>概述</h2>\\n<p>在构建 .NET API 时，您可能希望控制用户请求的频率以防止恶意攻击。换句话说，您可能希望限制短时间内来自某个 IP 地址的请求数量，以减轻拒绝服务攻击，这也称为限流。有很多 Nuget 包使用中间件来处理用户请求，但中间件存在一个问题，那就是它们会影响所有传入请求！但是，如果您只想控制一些关键的接口，有没有简单的方案， 当然有，使用 DotNetRateLimiter 就可以实现！</p>\\n<p>仓库地址：<a href=\\"https://github.com/sa-es-ir/DotNet.RateLimit\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/sa-es-ir/DotNet.RateLimit</a></p>","autoDesc":true}');export{o as comp,c as data};
