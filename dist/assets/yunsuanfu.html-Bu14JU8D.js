import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app-vSdX8vi3.js";const u={},i=t(`<h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>本文是对Linq用法的一次复习，里面包含的部分源码涉及删减。</p><blockquote><p>本文示例代码环境：VS2022、.Net6、C#10</p></blockquote><h2 id="linq库" tabindex="-1"><a class="header-anchor" href="#linq库"><span>Linq库</span></a></h2><p>https://github.com/morelinq/MoreLINQ https://githubub.com/viceroypenguin/SuperLinq</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1 概述</span></a></h2><p>标准查询运算符分为三类</p><ul><li>输入是序列，输出是序列（序列对序列）</li><li>输入是集合，输出是单个元素或者标量值</li><li>没有输入，输出是序列（生成方法）</li></ul><h2 id="_2-序列-序列" tabindex="-1"><a class="header-anchor" href="#_2-序列-序列"><span>2. 序列-&gt;序列</span></a></h2><p>大多数查询运算符都属于这种，接收一个或者多个输入序列，并且生成单一的输出序列。</p><h3 id="_2-1-筛选运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-筛选运算符"><span>2.1 筛选运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> <span class="token operator">-&gt;</span> IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此类运算符返回原始序列的一个子集。</p><blockquote><p>where take takewhile skip skipwhile distinct</p></blockquote><h4 id="_2-1-1-where" tabindex="-1"><a class="header-anchor" href="#_2-1-1-where"><span>2.1.1 Where</span></a></h4><p>返回满足给定条件的元素集合</p><h5 id="_2-1-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-1-1-方法1"><span>2.1.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询该集合中元素长度大于2的元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result2 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你只是添加where时候，该语句只是执行扩展方法做下面操作，然后将predicate(有返回值的委托)和集合赋值给构造函数，并没有立即执行(延迟执行)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Enumerable<span class="token punctuation">.</span>Iterator<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> iterator<span class="token punctuation">:</span>
            <span class="token keyword">return</span> iterator<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">TSource<span class="token punctuation">[</span><span class="token punctuation">]</span></span> source1<span class="token punctuation">:</span>
            <span class="token keyword">return</span> source1<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerable<span class="token punctuation">.</span>WhereArrayIterator<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span> predicate<span class="token punctuation">)</span> <span class="token punctuation">:</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source2<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerable<span class="token punctuation">.</span>WhereListIterator<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerable<span class="token punctuation">.</span>WhereEnumerableIterator<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你进行ToList的时候，会进行类似下面的逻辑</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">TSource</span> source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_source<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_predicate</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>
            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候才是真正的执行。</p><h5 id="_2-1-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-1-1-2-方法2"><span>2.1.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询该集合中元素的值等于numList[i]的元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result3 <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t <span class="token operator">==</span> numList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i代表的是当前序列在集合中的索引</span>
<span class="token class-name"><span class="token keyword">var</span></span> str3 <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [\\&quot;one\\&quot;,\\&quot;two\\&quot;,\\&quot;three\\&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">WhereIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">TSource</span> source1 <span class="token keyword">in</span> source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">checked</span> <span class="token punctuation">{</span> <span class="token operator">++</span>index<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">yield</span> <span class="token keyword">return</span> source1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-take" tabindex="-1"><a class="header-anchor" href="#_2-1-2-take"><span>2.1.2 Take</span></a></h4><p>返回前count个元素，丢弃剩余的元素</p><h5 id="_2-1-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-2-1-方法1"><span>2.1.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Take</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询该集合的前1个元素</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>var numList <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">&gt;</span>
{
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
}<span class="token punctuation">;</span>
var <span class="token keyword">result</span> <span class="token operator">=</span> numList<span class="token punctuation">.</span>Take<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var str <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span>SerializeObject<span class="token punctuation">(</span><span class="token keyword">result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>  <span class="token string">&quot;[\\&quot;one\\&quot;]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码也是延迟执行，当你运行Take的时候也是只将参数给构造函数</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">private</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> TakeIterator<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span>
    IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> source<span class="token punctuation">,</span>
    <span class="token keyword">int</span> <span class="token keyword">count</span><span class="token punctuation">)</span>
{
    switch <span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    {
        <span class="token keyword">case</span> IPartition<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> <span class="token keyword">partition</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">partition</span><span class="token punctuation">.</span>Take<span class="token punctuation">(</span><span class="token keyword">count</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> IList<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> source1<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> Enumerable<span class="token punctuation">.</span>ListPartition<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">count</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">count</span>：<span class="token number">1</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> Enumerable<span class="token punctuation">.</span>EnumerablePartition<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">count</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你执行后面的ToList的时候才会真正执行</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">public</span> List<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> ToList<span class="token punctuation">(</span><span class="token punctuation">)</span>
{
    <span class="token keyword">int</span> <span class="token keyword">count</span> <span class="token operator">=</span> this<span class="token punctuation">.</span><span class="token keyword">Count</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">count</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">count</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> this<span class="token punctuation">.</span>_minIndexInclusive <span class="token operator">+</span> <span class="token keyword">count</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> _minIndexInclusive <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> minIndexInclusive <span class="token operator">=</span> this<span class="token punctuation">.</span>_minIndexInclusive<span class="token punctuation">;</span> minIndexInclusive <span class="token operator">!=</span> num<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>minIndexInclusive<span class="token punctuation">)</span>
        list<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>_source<span class="token punctuation">[</span>minIndexInclusive<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面做了一个for循环，然后添加到新的List里面，知道minIndexInclusive==num后，不满足条件退出循环。</p><h5 id="_2-1-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-1-2-2-方法2"><span>2.1.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Take</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Range</span> range<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>var numList <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">&gt;</span>
{
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
}<span class="token punctuation">;</span>
var <span class="token keyword">result</span> <span class="token operator">=</span> numList<span class="token punctuation">.</span>Take<span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var str <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span>SerializeObject<span class="token punctuation">(</span><span class="token keyword">result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看源码，是取从开始索引1到开始索引2-1的元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Take</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name">System<span class="token punctuation">.</span>Range</span> range<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        ThrowHelper<span class="token punctuation">.</span><span class="token function">ThrowArgumentNullException</span><span class="token punctuation">(</span>ExceptionArgument<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Index</span> start <span class="token operator">=</span> range<span class="token punctuation">.</span>Start<span class="token punctuation">;</span>
    <span class="token class-name">Index</span> end <span class="token operator">=</span> range<span class="token punctuation">.</span>End<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> isFromEnd1 <span class="token operator">=</span> start<span class="token punctuation">.</span>IsFromEnd<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> isFromEnd2 <span class="token operator">=</span> end<span class="token punctuation">.</span>IsFromEnd<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> startIndex <span class="token operator">=</span> start<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> endIndex <span class="token operator">=</span> end<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFromEnd1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> isFromEnd2 <span class="token operator">&amp;&amp;</span> endIndex <span class="token operator">&gt;=</span> startIndex<span class="token punctuation">)</span>
            <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFromEnd2<span class="token punctuation">)</span>
        <span class="token keyword">return</span> startIndex <span class="token operator">&lt;</span> <span class="token return-type class-name">endIndex <span class="token punctuation">?</span></span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TakeRangeIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">:</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TakeRangeFromEndIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> isFromEnd1<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> isFromEnd2<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeRangeIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> startIndex<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">int</span></span> endIndex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">IPartition<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> partition<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token function">TakePartitionRange</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source1<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerable<span class="token punctuation">.</span>ListPartition<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Enumerable<span class="token punctuation">.</span>EnumerablePartition<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-takewhile" tabindex="-1"><a class="header-anchor" href="#_2-1-3-takewhile"><span>2.1.3 TakeWhile</span></a></h4><p>返回输入序列的元素，直到满足条件为false</p><h5 id="_2-1-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-3-1-方法1"><span>2.1.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeWhile</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 获取TakeWhile里面lambda表达式返回false之前的所有元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">TakeWhile</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;one&quot;,&quot;two&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看源码,当predicate(source1)为false的时候，那么就跳出循环，返回结果。所以如果一直为true，那么就返回所有的元素。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeWhileIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">TSource</span> source1 <span class="token keyword">in</span> source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>source1<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">yield</span> <span class="token keyword">return</span> source1<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-方法2"><span>2.3.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeWhile</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 和上面一样如果TakeWhile里面的表达式返回false，那么就返回之前的数据，下面示例中i是循环的索引。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">TakeWhile</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;one&quot;,&quot;two&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeWhileIterator</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">TSource</span> source1 <span class="token keyword">in</span> source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">checked</span> <span class="token punctuation">{</span> <span class="token operator">++</span>index<span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">yield</span> <span class="token keyword">return</span> source1<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-4-takelast" tabindex="-1"><a class="header-anchor" href="#_2-1-4-takelast"><span>2.1.4 TakeLast</span></a></h4><p>从集合中取出最后count数量的元素返回</p><h5 id="_2-1-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-4-1-方法1"><span>2.1.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">TakeLast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">TakeLast</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;123456&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看源码</p><h4 id="_2-1-5-skip" tabindex="-1"><a class="header-anchor" href="#_2-1-5-skip"><span>2.1.5 Skip</span></a></h4><p>跳过前count个元素，返回剩余的元素</p><h5 id="_2-1-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-5-1-方法1"><span>2.1.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Skip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-6-skiplast" tabindex="-1"><a class="header-anchor" href="#_2-1-6-skiplast"><span>2.1.6 SkipLast</span></a></h4><h5 id="_2-1-6-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-6-1-方法1"><span>2.1.6.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SkipLast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-7-skipwhile" tabindex="-1"><a class="header-anchor" href="#_2-1-7-skipwhile"><span>2.1.7 SkipWhile</span></a></h4><p>忽略输入序列的元素，直到满足条件为false，然后返回剩余的元素</p><h5 id="_2-1-7-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-7-1-方法1"><span>2.1.7.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SkipWhile</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-1-7-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-1-7-2-方法2"><span>2.1.7.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SkipWhile</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-8-takelast" tabindex="-1"><a class="header-anchor" href="#_2-1-8-takelast"><span>2.1.8 TakeLast</span></a></h4><h4 id="_2-1-9-distinct" tabindex="-1"><a class="header-anchor" href="#_2-1-9-distinct"><span>2.1.9 Distinct</span></a></h4><h5 id="_2-1-9-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-9-1-方法1"><span>2.1.9.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Distinct</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 返回一个没有重复元素的集合</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> distinct <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// distinct = { 1, 2, 3, 4, 5 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-9-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-1-9-2-方法2"><span>2.1.9.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Distinct</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-10-distinctby" tabindex="-1"><a class="header-anchor" href="#_2-1-10-distinctby"><span>2.1.10 DistinctBy</span></a></h4><p>根据某一列返回一个没有重复元素的集合</p><h5 id="_2-1-10-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-1-10-1-方法1"><span>2.1.10.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DistinctBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-1-10-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-1-10-2-方法2"><span>2.1.10.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DistinctBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-映射运算符" tabindex="-1"><a class="header-anchor" href="#_2-2-映射运算符"><span>2.2 映射运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> <span class="token operator">-&gt;</span> IEnumerable<span class="token operator">&lt;</span>TResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用Lambda函数将每个元素转换为其他形式</p><blockquote><p>select selectMany</p></blockquote><h4 id="_2-2-1-select" tabindex="-1"><a class="header-anchor" href="#_2-2-1-select"><span>2.2.1 Select</span></a></h4><h5 id="_2-2-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-2-1-1-方法1"><span>2.2.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-2-1-2-方法2"><span>2.2.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-2-selectmany" tabindex="-1"><a class="header-anchor" href="#_2-2-2-selectmany"><span>2.2.2 SelectMany</span></a></h4><h5 id="_2-2-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-2-2-1-方法1"><span>2.2.2.1 方法1</span></a></h5><p>SelectMany 可以把多维集合降维，比如把二维的集合平铺成一个一维的集合。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SelectMany</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result = [1, 2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-2-2-2-方法2"><span>2.2.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SelectMany</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-2-3-方法3" tabindex="-1"><a class="header-anchor" href="#_2-2-2-3-方法3"><span>2.2.2.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SelectMany</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TCollection<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TCollection<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collectionSelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TCollection<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-2-4-方法4" tabindex="-1"><a class="header-anchor" href="#_2-2-2-4-方法4"><span>2.2.2.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SelectMany</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TCollection<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TCollection<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collectionSelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TCollection<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-连接运算符" tabindex="-1"><a class="header-anchor" href="#_2-3-连接运算符"><span>2.3 连接运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TOuter<span class="token operator">&gt;</span><span class="token punctuation">,</span>IEnumerable<span class="token operator">&lt;</span>TInner<span class="token operator">&gt;</span><span class="token operator">-&gt;</span>IEnumerable<span class="token operator">&lt;</span>TResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将两个序列中的元素连接在一起。</p><blockquote><p>Join GroupJoin Zip</p></blockquote><h4 id="_2-3-1-join" tabindex="-1"><a class="header-anchor" href="#_2-3-1-join"><span>2.3.1 Join</span></a></h4><p>可以高效执行本次查询，支持内连接</p><h5 id="_2-3-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-3-1-1-方法1"><span>2.3.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">&gt;</span></span> outer<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span></span> inner<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> outerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> innerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-3-1-2-方法2"><span>2.3.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Join</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">&gt;</span></span> outer<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span></span> inner<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> outerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> innerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-2-groupjoin" tabindex="-1"><a class="header-anchor" href="#_2-3-2-groupjoin"><span>2.3.2 GroupJoin</span></a></h4><p>可以高效执行本地查询，支持左外连接</p><h5 id="_2-3-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-3-2-1-方法1"><span>2.3.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupJoin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">&gt;</span></span> outer<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span></span> inner<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> outerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> innerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-3-2-2-方法2"><span>2.3.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupJoin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">&gt;</span></span> outer<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span></span> inner<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> outerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> innerKeySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TOuter<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TInner<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-3-zip" tabindex="-1"><a class="header-anchor" href="#_2-3-3-zip"><span>2.3.3 Zip</span></a></h4><p>将同时枚举两个序列，并对每一对元素进行操作。</p><p>Zip 扩展方法操作的对象是两个集合，它就像拉链一样，根据位置将两个系列中的每个元素依次配对在一起。其接收的参数是一个 Func 实例，该 Func 实例允许我们成对在处理两个集合中的元素。如果两个集合中的元素个数不相等，那么多出来的将会被忽略。</p><h5 id="_2-3-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-3-3-1-方法1"><span>2.3.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>TFirst First<span class="token punctuation">,</span> TSecond Second<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Zip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">,</span> TSecond<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSecond<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-3-2-方法2-1" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-方法2-1"><span>2.3.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>TFirst First<span class="token punctuation">,</span> TSecond Second<span class="token punctuation">,</span> TThird Third<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Zip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">,</span> TSecond<span class="token punctuation">,</span> TThird<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSecond<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TThird<span class="token punctuation">&gt;</span></span> third<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-3-3-3-方法3" tabindex="-1"><a class="header-anchor" href="#_2-3-3-3-方法3"><span>2.3.3.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Zip</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">,</span> TSecond<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSecond<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TFirst<span class="token punctuation">,</span> TSecond<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;five&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;seven&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ignored&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> zip <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Zip</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token keyword">in</span> zip<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
输出
<span class="token number">3</span><span class="token operator">=</span>three
<span class="token number">5</span><span class="token operator">=</span>five
<span class="token number">7</span><span class="token operator">=</span>seven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-排序运算符" tabindex="-1"><a class="header-anchor" href="#_2-4-排序运算符"><span>2.4 排序运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span>IOrderedEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回一个排序后的序列</p><blockquote><p>OrderBy ThenBy Reverse</p></blockquote><h4 id="_2-4-1-orderby" tabindex="-1"><a class="header-anchor" href="#_2-4-1-orderby"><span>2.4.1 OrderBy</span></a></h4><h5 id="_2-4-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-4-1-1-方法1"><span>2.4.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OrderBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> useList <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 基础的查询，根据集合的某一列进行排序,按照id从小到大排序</span>
<span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span> userListOrder <span class="token operator">=</span> useList<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> userListOrder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-4-1-2-方法2"><span>2.4.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OrderBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Compare方法的实现必须Int32返回具有以下三个值之一的，如下表所示。</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>小于零</td><td>此对象在排序顺序中位于CompareTo方法所指定的对象之前。</td></tr><tr><td>零</td><td>此当前实例在排序顺序中与CompareTo方法参数指定的对象出现在同一位置。</td></tr><tr><td>大于零</td><td>此当前实例位于排序顺序中由CompareTo方法自变量指定的对象之后。</td></tr></tbody></table><p>举例示例一</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 需求：将userList按照sortList的顺序进行排序</span>
	<span class="token comment">// 需要排序的内容</span>
	<span class="token class-name"><span class="token keyword">var</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;diagnose&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;emr&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 根据该顺序进行排序</span>
	<span class="token class-name"><span class="token keyword">var</span></span> sortList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;emr&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;check&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;treat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;diagnose&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> userListOrder <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerSortComparer</span><span class="token punctuation">(</span>sortList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> userListOrder<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义排序比较器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerSortComparer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparer<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _moduleCodes<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token function">CustomerSortComparer</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> moduleCodes<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_moduleCodes <span class="token operator">=</span> moduleCodes<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> y<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> xIndex <span class="token operator">=</span> _moduleCodes<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> yIndex <span class="token operator">=</span> _moduleCodes<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 如果index大说明排序靠后</span>

		xIndex <span class="token operator">=</span> xIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token number">99</span> <span class="token punctuation">:</span> xIndex<span class="token punctuation">;</span>
		yIndex <span class="token operator">=</span> yIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> <span class="token number">99</span> <span class="token punctuation">:</span> yIndex<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>xIndex <span class="token operator">&gt;</span> yIndex<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xIndex <span class="token operator">&lt;</span> yIndex<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// x应该在y之前</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例示例二</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 自己构造排序比较器</span>

<span class="token comment">//需求：将userList里面的Name列根据长度进行排序</span>
<span class="token class-name"><span class="token keyword">var</span></span> userList <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span> userListOrder <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerLengthComparer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> userListOrder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 自定义比较器</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义长度排序比较器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerLengthComparer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparer<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> y<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,161),r={href:"https://www.jb51.net/article/177756.htm",target:"_blank",rel:"noopener noreferrer"},k=t(`<h4 id="_2-4-2-orderbydescending" tabindex="-1"><a class="header-anchor" href="#_2-4-2-orderbydescending"><span>2.4.2 OrderByDescending</span></a></h4><p>关于倒序的使用方法和上面正序的使用方法类似，就不在叙述了。</p><h5 id="_2-4-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-4-2-1-方法1"><span>2.4.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OrderByDescending</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-4-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-4-2-2-方法2"><span>2.4.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OrderByDescending</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-4-3-thenby" tabindex="-1"><a class="header-anchor" href="#_2-4-3-thenby"><span>2.4.3 ThenBy</span></a></h4><h5 id="_2-4-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-4-3-1-方法1"><span>2.4.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ThenBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-4-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-4-3-2-方法2"><span>2.4.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ThenBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-4-4-thenbydescending" tabindex="-1"><a class="header-anchor" href="#_2-4-4-thenbydescending"><span>2.4.4 ThenByDescending</span></a></h4><h5 id="_2-4-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-4-4-1-方法1"><span>2.4.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ThenByDescending</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-4-4-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-4-4-2-方法2"><span>2.4.4.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ThenByDescending</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IOrderedEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-4-5-reverse" tabindex="-1"><a class="header-anchor" href="#_2-4-5-reverse"><span>2.4.5 Reverse</span></a></h4><p>反转序列中元素的顺序。</p><h5 id="_2-4-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-4-5-1-方法1"><span>2.4.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Reverse</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-分组运算符" tabindex="-1"><a class="header-anchor" href="#_2-5-分组运算符"><span>2.5 分组运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span>IEnumerable<span class="token operator">&lt;</span>IGrouping<span class="token operator">&lt;</span>TKey<span class="token punctuation">,</span>TElement<span class="token operator">&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将一个序列分组为若干子序列</p><blockquote><p>GroupBy</p></blockquote><h4 id="_2-5-1-groupby" tabindex="-1"><a class="header-anchor" href="#_2-5-1-groupby"><span>2.5.1 GroupBy</span></a></h4><h5 id="_2-5-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-5-1-1-方法1"><span>2.5.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IGrouping<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-5-1-2-方法2"><span>2.5.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IGrouping<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-3-方法3" tabindex="-1"><a class="header-anchor" href="#_2-5-1-3-方法3"><span>2.5.1.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IGrouping<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-4-方法4" tabindex="-1"><a class="header-anchor" href="#_2-5-1-4-方法4"><span>2.5.1.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IGrouping<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-5-方法5" tabindex="-1"><a class="header-anchor" href="#_2-5-1-5-方法5"><span>2.5.1.5 方法5</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-6-方法6" tabindex="-1"><a class="header-anchor" href="#_2-5-1-6-方法6"><span>2.5.1.6 方法6</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-7-方法7" tabindex="-1"><a class="header-anchor" href="#_2-5-1-7-方法7"><span>2.5.1.7 方法7</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TElement<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-5-1-8-方法8" tabindex="-1"><a class="header-anchor" href="#_2-5-1-8-方法8"><span>2.5.1.8 方法8</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GroupBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>TElement<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证是否包含重复数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> receptionIdDupli <span class="token operator">=</span> dto<span class="token punctuation">.</span>SkillReceptionistIds<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>ReceptionistId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>g <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>g <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>分组取值 根据班级ID进行分组，然后取得每个班级下用户</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> listUserInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>ClassId <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>ClassId <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;李思&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>ClassId <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span> <span class="token punctuation">{</span>ClassId <span class="token operator">=</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> listUserInfo<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>ClassId<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfoDto</span>
    <span class="token punctuation">{</span>
        ClassId <span class="token operator">=</span> t<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
        UserInfo <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
            Name <span class="token operator">=</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-集合运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-集合运算符"><span>2.6 集合运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">,</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接受两个相同类型的序列，并返回其共有的元素序列、合并元素的序列或者不同元素的序列。</p><blockquote><p>Concat Union Intersect Except</p></blockquote><h4 id="_2-6-1-concat" tabindex="-1"><a class="header-anchor" href="#_2-6-1-concat"><span>2.6.1 Concat</span></a></h4><p>Concat 用来拼接两个集合，不会去除重复元素，示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> foo <span class="token operator">=</span> newList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> bar <span class="token operator">=</span> newList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 通过 Enumerable 类的静态方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,3,4,5</span>
<span class="token comment">// 通过扩展方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,3,4,5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-6-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-1-1-方法1"><span>2.6.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Concat</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-6-2-union" tabindex="-1"><a class="header-anchor" href="#_2-6-2-union"><span>2.6.2 Union</span></a></h4><p>Union 也是用来拼接两个集合，与 Concat 不同的是，它会去除重复项，</p><h4 id="_2-6-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-2-1-方法1"><span>2.6.2.1 方法1</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Union</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,4,5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-2-2-方法2"><span>2.6.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Union</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-6-3-unionby" tabindex="-1"><a class="header-anchor" href="#_2-6-3-unionby"><span>2.6.3 UnionBy</span></a></h4><p>根据指定的键选择器生成两个序列的并集函数。</p><h5 id="_2-6-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-3-1-方法1"><span>2.6.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">UnionBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-3-2-方法2"><span>2.6.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">UnionBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-6-4-intersect" tabindex="-1"><a class="header-anchor" href="#_2-6-4-intersect"><span>2.6.4 Intersect</span></a></h4><h5 id="_2-6-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-4-1-方法1"><span>2.6.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Intersect</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-4-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-4-2-方法2"><span>2.6.4.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Intersect</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-6-5-intersectby" tabindex="-1"><a class="header-anchor" href="#_2-6-5-intersectby"><span>2.6.5 IntersectBy</span></a></h4><h5 id="_2-6-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-5-1-方法1"><span>2.6.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">IntersectBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-5-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-5-2-方法2"><span>2.6.5.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">IntersectBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-6-6-except" tabindex="-1"><a class="header-anchor" href="#_2-6-6-except"><span>2.6.6 Except</span></a></h4><p>用来取差集，即取出集合中与另一个集合所有元素不同的元素。</p><h5 id="_2-6-6-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-6-1-方法1"><span>2.6.6.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Except</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-6-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-6-2-方法2"><span>2.6.6.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Except</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> first <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> second <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">Except</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result = { 1, 4 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意 Except 方法会去除重复元素：</p></blockquote><h4 id="_2-6-7-exceptby" tabindex="-1"><a class="header-anchor" href="#_2-6-7-exceptby"><span>2.6.7 ExceptBy</span></a></h4><h5 id="_2-6-7-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-6-7-1-方法1"><span>2.6.7.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ExceptBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-6-7-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-6-7-2-方法2"><span>2.6.7.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ExceptBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-7-转换方法-导入" tabindex="-1"><a class="header-anchor" href="#_2-7-转换方法-导入"><span>2.7 转换方法：导入</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable <span class="token operator">-&gt;</span>IEnumerable<span class="token operator">&lt;</span>TResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>OfType Cast</p></blockquote><h4 id="_2-7-1-oftype" tabindex="-1"><a class="header-anchor" href="#_2-7-1-oftype"><span>2.7.1 OfType</span></a></h4><p>OfType操作符与Cast操作符类似，用于将类型为IEnumerable的集合对象转换为<code>IEnumerable&lt;T&gt;</code>类型的集合对象。不同的是，Cast操作符会视图将输入序列中的所有元素转换成类型为T的对象，，如果有转换失败的元素存在Cast操作符将抛出一个异常；而OfType操作符仅会将能够成功转换的元素进行转换，并将这些结果添加到结果序列中去。与Cast操作符相比，OfType操作符更加安全。</p><h5 id="_2-7-1-1-方法一" tabindex="-1"><a class="header-anchor" href="#_2-7-1-1-方法一"><span>2.7.1.1 方法一</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable</span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ArrayList</span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//IEnumerable&lt;int&gt; IECast = al.Cast&lt;int&gt;();    //抛出异常</span>
<span class="token comment">//foreach (var i in IECast)</span>
<span class="token comment">//{</span>
<span class="token comment">//    Console.WriteLine(i);</span>
<span class="token comment">//}</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> IEOfType <span class="token operator">=</span> al<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> IEOfType<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出 1 2 其中转换不了的a不转换</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>它是一种类型过滤器，可以筛选出那些可以被转换成 <code>X</code> 类型的元素。</p></blockquote><p>获取集合中指定类型元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">int</span></span> max <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果是555, 获取int类型中的最大值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-7-2-cast" tabindex="-1"><a class="header-anchor" href="#_2-7-2-cast"><span>2.7.2 Cast</span></a></h4><p>Cast操作符用于将一个类型为IEnumerable的集合对象转换为<code>IEnumerable&lt;T&gt;</code>类型的集合对象。也就是非泛型集合转成泛型集合，因为在Linq to OBJECT中，绝大部分操作符都是针对<code>IEnumerable&lt;T&gt;</code>类型进行的扩展方法。因此对非泛型集合并不适用。</p><h5 id="_2-7-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-7-2-1-方法1"><span>2.7.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable</span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ArrayList</span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
al<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> IEInt <span class="token operator">=</span> al<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//非泛型转泛型</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token keyword">in</span> IEInt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出 1 2 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>它会将所有的元素转换成 <code>X</code> 类型，只要有一个不能转换则会抛出异常。</p></blockquote><h3 id="_2-8-转换方法-导出" tabindex="-1"><a class="header-anchor" href="#_2-8-转换方法-导出"><span>2.8 转换方法：导出</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable <span class="token operator">-&gt;</span><span class="token class-name">An</span> array<span class="token punctuation">,</span>list<span class="token punctuation">,</span>dictionary<span class="token punctuation">,</span>lookup<span class="token punctuation">,</span><span class="token keyword">or</span> sequence
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>ToArray ToList ToDictionary ToLookup AsEnumerable AsQueryable</p></blockquote><h4 id="_2-8-1-toarray" tabindex="-1"><a class="header-anchor" href="#_2-8-1-toarray"><span>2.8.1 ToArray</span></a></h4><h5 id="_2-8-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-1-1-方法1"><span>2.8.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">ToArray</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-8-2-todictionary" tabindex="-1"><a class="header-anchor" href="#_2-8-2-todictionary"><span>2.8.2 ToDictionary</span></a></h4><p>ToDictionary 扩展方法可以把集合 <code>IEnumerable&lt;TElement&gt;</code> 转换为 <code>Dictionary&lt;TKey, TValue&gt;</code> 结构的字典，它接收一个 <code>Func&lt;TSource, TKey&gt;</code> 参数用来返回每个元素指定的键与值。</p><h5 id="_2-8-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-2-1-方法1"><span>2.8.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TKey</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">notnull</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span> usersById <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-8-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-8-2-2-方法2"><span>2.8.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TKey</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">notnull</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-8-2-3-方法3" tabindex="-1"><a class="header-anchor" href="#_2-8-2-3-方法3"><span>2.8.2.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TKey</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">notnull</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-8-2-4-方法4" tabindex="-1"><a class="header-anchor" href="#_2-8-2-4-方法4"><span>2.8.2.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToDictionary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TKey</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">notnull</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-8-3-tohashset" tabindex="-1"><a class="header-anchor" href="#_2-8-3-tohashset"><span>2.8.3 ToHashSet</span></a></h4><h5 id="_2-8-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-3-1-方法1"><span>2.8.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToHashSet</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-8-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-8-3-2-方法2"><span>2.8.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">HashSet<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToHashSet</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-8-4-tolist" tabindex="-1"><a class="header-anchor" href="#_2-8-4-tolist"><span>2.8.4 ToList</span></a></h4><h5 id="_2-8-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-4-1-方法1"><span>2.8.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">List<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-8-5-tolookup" tabindex="-1"><a class="header-anchor" href="#_2-8-5-tolookup"><span>2.8.5 ToLookup</span></a></h4><p>ToLookup 扩展方法返回的是可索引查找的数据结构，它是一个 ILookup 实例，所有元素根据指定的键进行分组并可以按键进行索引。这样说有点抽象</p><h5 id="_2-8-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-5-1-方法1"><span>2.8.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">ILookup<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToLookup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来看具体示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 根据元素字符串长度创建一个查找对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> lookup <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">ToLookup</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查找字符串长度为 3 的元素</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> lookup<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// result: one,two</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-8-5-2-方法2" tabindex="-1"><a class="header-anchor" href="#_2-8-5-2-方法2"><span>2.8.5.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">ILookup<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToLookup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-8-5-3-方法3" tabindex="-1"><a class="header-anchor" href="#_2-8-5-3-方法3"><span>2.8.5.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">ILookup<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToLookup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-8-5-4-方法4" tabindex="-1"><a class="header-anchor" href="#_2-8-5-4-方法4"><span>2.8.5.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">ILookup<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ToLookup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TElement<span class="token punctuation">&gt;</span></span> elementSelector<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-8-6-asenumerable" tabindex="-1"><a class="header-anchor" href="#_2-8-6-asenumerable"><span>2.8.6 AsEnumerable</span></a></h4><p>AsEnumerable是最简单的查询运算符，作用是将一个<code>IQueryable&lt;T&gt;</code>序列转换为一个<code>IEnumerable&lt;T&gt;</code>序列，强制将后续的查询运算符绑定到Enumerable的运算符(而不是Queryable的运算符)上，从而使后续的查询按本地查询处理。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsEnumerable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">thisIEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>AsEnumerable() 和 AsQueryable()如果后面不继续跟过滤条件等，效果是一样的。如果后面加了Where / Select / Take() /Skip 等条件，AsEnumerable()先查数据库再过滤,AsQueryable()将条件生成sql，一起在数据库中过滤。</p></blockquote><h5 id="_2-8-6-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-8-6-1-方法1"><span>2.8.6.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsEnumerable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-9-添加运算符" tabindex="-1"><a class="header-anchor" href="#_2-9-添加运算符"><span>2.9 添加运算符</span></a></h3><h4 id="_2-9-1-append" tabindex="-1"><a class="header-anchor" href="#_2-9-1-append"><span>2.9.1 Append</span></a></h4><h5 id="_2-9-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-9-1-1-方法1"><span>2.9.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Append</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-9-2-prepend" tabindex="-1"><a class="header-anchor" href="#_2-9-2-prepend"><span>2.9.2 Prepend</span></a></h4><h5 id="_2-9-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_2-9-2-1-方法1"><span>2.9.2.1 方法1</span></a></h5><p>向序列的开头添加一个值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Prepend</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-10-分割运算符" tabindex="-1"><a class="header-anchor" href="#_3-10-分割运算符"><span>3.10 分割运算符</span></a></h4><h4 id="_3-10-1-chunk" tabindex="-1"><a class="header-anchor" href="#_3-10-1-chunk"><span>3.10.1 Chunk</span></a></h4><p>将序列的元素分割成最多大小的块。</p><h5 id="_3-10-1-1-方法一" tabindex="-1"><a class="header-anchor" href="#_3-10-1-1-方法一"><span>3.10.1.1 方法一</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Chunk</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-序列-元素或标量值" tabindex="-1"><a class="header-anchor" href="#_3-序列-元素或标量值"><span>3. 序列-&gt;元素或标量值</span></a></h2><p>接受一个输入序列，并返回单个元素或值。</p><h3 id="_3-1-元素运算符" tabindex="-1"><a class="header-anchor" href="#_3-1-元素运算符"><span>3.1 元素运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span>TSource
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从一个序列中取出一个特定的元素。</p><blockquote><p>First FirstOrDefault Last LastOrDefault Single SingleOrDeafult ElementAt ElementAtOrDefault DefaultIfEmpty</p></blockquote><h4 id="_3-1-1-first" tabindex="-1"><a class="header-anchor" href="#_3-1-1-first"><span>3.1.1 First</span></a></h4><p>取序列中满足条件的第一个元素，如果没有元素满足条件则抛出异常</p><h5 id="_3-1-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-1-1-方法1"><span>3.1.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">First</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-1-2-方法2"><span>3.1.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">First</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-2-firstordefault" tabindex="-1"><a class="header-anchor" href="#_3-1-2-firstordefault"><span>3.1.2 FirstOrDefault</span></a></h4><p>取序列中满足条件的第一个元素，如果没有元素满足条件，则返回默认值(对于可以为null的对象，默认值是null，对于默认值不能为null的对象，比如int，默认值为0)；</p><h5 id="_3-1-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-2-1-方法1"><span>3.1.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">FirstOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询该集合中第一个元素,如果没有就返回null</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//one</span>

<span class="token class-name"><span class="token keyword">var</span></span> numList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList2<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-2-2-方法2"><span>3.1.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">FirstOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询一个集合中的第一个元素，如果没有找到，则返回一个默认值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList2<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token string">&quot;默认值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;默认值&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-2-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-1-2-3-方法3"><span>3.1.2.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">FirstOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询一个集合中满足条件的一个元素，如果没有找到就返回null</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t <span class="token operator">==</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-2-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-1-2-4-方法4"><span>3.1.2.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">FirstOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 查询一个集合中满足条件的一个元素，如果没有找到就返回默认值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;three&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t <span class="token operator">==</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;默认值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;默认值&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="速度对比" tabindex="-1"><a class="header-anchor" href="#速度对比"><span>速度对比</span></a></h5><p>Find方法只能再<code>List&lt;T&gt;</code>上使用，FirstOrDefault可以广泛用在<code>IEnumerable&lt;T&gt;</code>上，Find的查询是建立在Array上，而在IEnumerable上的FirstOrDefault是使用foreach查找的，因此Find速度快于FirstOrDefault。</p><h4 id="_3-1-3-last" tabindex="-1"><a class="header-anchor" href="#_3-1-3-last"><span>3.1.3 Last</span></a></h4><h5 id="_3-1-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-3-1-方法1"><span>3.1.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">Last</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-3-2-方法2"><span>3.1.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">Last</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-4-lastordefault" tabindex="-1"><a class="header-anchor" href="#_3-1-4-lastordefault"><span>3.1.4 LastOrDefault</span></a></h4><h5 id="_3-1-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-4-1-方法1"><span>3.1.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">LastOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-4-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-4-2-方法2"><span>3.1.4.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">LastOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-4-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-1-4-3-方法3"><span>3.1.4.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">LastOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-4-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-1-4-4-方法4"><span>3.1.4.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">LastOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-5-single" tabindex="-1"><a class="header-anchor" href="#_3-1-5-single"><span>3.1.5 Single</span></a></h4><h5 id="_3-1-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-5-1-方法1"><span>3.1.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-5-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-5-2-方法2"><span>3.1.5.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">Single</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-6-singleordefault" tabindex="-1"><a class="header-anchor" href="#_3-1-6-singleordefault"><span>3.1.6 SingleOrDefault</span></a></h4><h5 id="_3-1-6-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-6-1-方法1"><span>3.1.6.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">SingleOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-6-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-6-2-方法2"><span>3.1.6.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">SingleOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-6-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-1-6-3-方法3"><span>3.1.6.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">SingleOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-6-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-1-6-4-方法4"><span>3.1.6.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">SingleOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-7-elementat" tabindex="-1"><a class="header-anchor" href="#_3-1-7-elementat"><span>3.1.7 ElementAt</span></a></h4><h5 id="_3-1-7-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-7-1-方法1"><span>3.1.7.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">ElementAt</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Index</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-17-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-17-2-方法2"><span>3.17.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">ElementAt</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-8-elementatordefault" tabindex="-1"><a class="header-anchor" href="#_3-1-8-elementatordefault"><span>3.1.8 ElementAtOrDefault</span></a></h4><h5 id="_3-1-8-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-8-1-方法1"><span>3.1.8.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ElementAtOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Index</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-8-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-1-8-2-方法2"><span>3.1.8.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ElementAtOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-1-9-defaultifempty" tabindex="-1"><a class="header-anchor" href="#_3-1-9-defaultifempty"><span>3.1.9 DefaultIfEmpty</span></a></h4><h5 id="_3-1-9-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-1-9-1-方法1"><span>3.1.9.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DefaultIfEmpty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-1-9-1-方法1-1" tabindex="-1"><a class="header-anchor" href="#_3-1-9-1-方法1-1"><span>3.1.9.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DefaultIfEmpty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> defaultValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-聚合方法" tabindex="-1"><a class="header-anchor" href="#_3-2-聚合方法"><span>3.2 聚合方法</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span>scalar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对集合中的元素进行计算，返回返回一个标量值（通常干是数字）。</p><blockquote><p>Aggregate Average Count LongCount Sum Max Min</p></blockquote><h4 id="_3-2-1-aggregate" tabindex="-1"><a class="header-anchor" href="#_3-2-1-aggregate"><span>3.2.1 Aggregate</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//普通活动</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Marketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MarketingID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> MarketingName <span class="token operator">=</span> <span class="token string">&quot;普通活动1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Marketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MarketingID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> MarketingName <span class="token operator">=</span> <span class="token string">&quot;普通活动2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//事件活动</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dic<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    dic<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Marketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MarketingID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> MarketingName <span class="token operator">=</span> <span class="token string">&quot;事件活动1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Marketing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> MarketingID <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> MarketingName <span class="token operator">=</span> <span class="token string">&quot;事件活动2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//需求：将字典里面的key合并为一个集合</span>
<span class="token comment">//foreach写法</span>
<span class="token class-name"><span class="token keyword">var</span></span> marketingList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    marketingList<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Aggregate</span>
<span class="token class-name"><span class="token keyword">var</span></span> marketingList2 <span class="token operator">=</span> dic<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span>Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Marketing<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                                        <span class="token punctuation">{</span>
                                            <span class="token keyword">return</span> total<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-方法1"><span>3.2.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource</span> <span class="token generic-method"><span class="token function">Aggregate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TSource<span class="token punctuation">,</span> TSource<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-方法2"><span>3.2.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TAccumulate</span> <span class="token generic-method"><span class="token function">Aggregate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TAccumulate<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TAccumulate</span> seed<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TAccumulate<span class="token punctuation">,</span> TSource<span class="token punctuation">,</span> TAccumulate<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-1-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-2-1-3-方法3"><span>3.2.1.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TResult</span> <span class="token generic-method"><span class="token function">Aggregate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TAccumulate<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TAccumulate</span> seed<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TAccumulate<span class="token punctuation">,</span> TSource<span class="token punctuation">,</span> TAccumulate<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TAccumulate<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> resultSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-2-average" tabindex="-1"><a class="header-anchor" href="#_3-2-2-average"><span>3.2.2 Average</span></a></h4><h5 id="_3-2-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-方法1"><span>3.2.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-2-2-方法2"><span>3.2.2.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-2-2-3-方法3"><span>3.2.2.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-2-2-4-方法4"><span>3.2.2.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-5-方法5" tabindex="-1"><a class="header-anchor" href="#_3-2-2-5-方法5"><span>3.2.2.5 方法5</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-6-方法6" tabindex="-1"><a class="header-anchor" href="#_3-2-2-6-方法6"><span>3.2.2.6 方法6</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-7-方法7" tabindex="-1"><a class="header-anchor" href="#_3-2-2-7-方法7"><span>3.2.2.7 方法7</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-8-方法8" tabindex="-1"><a class="header-anchor" href="#_3-2-2-8-方法8"><span>3.2.2.8 方法8</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-9-方法9" tabindex="-1"><a class="header-anchor" href="#_3-2-2-9-方法9"><span>3.2.2.9 方法9</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-10-方法10" tabindex="-1"><a class="header-anchor" href="#_3-2-2-10-方法10"><span>3.2.2.10 方法10</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-11-方法11" tabindex="-1"><a class="header-anchor" href="#_3-2-2-11-方法11"><span>3.2.2.11 方法11</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-12-方法12" tabindex="-1"><a class="header-anchor" href="#_3-2-2-12-方法12"><span>3.2.2.12 方法12</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-13-方法13" tabindex="-1"><a class="header-anchor" href="#_3-2-2-13-方法13"><span>3.2.2.13 方法13</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-14-方法14" tabindex="-1"><a class="header-anchor" href="#_3-2-2-14-方法14"><span>3.2.2.14 方法14</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-15-方法15" tabindex="-1"><a class="header-anchor" href="#_3-2-2-15-方法15"><span>3.2.2.15 方法15</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-16-方法16" tabindex="-1"><a class="header-anchor" href="#_3-2-2-16-方法16"><span>3.2.2.16 方法16</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-17-方法17" tabindex="-1"><a class="header-anchor" href="#_3-2-2-17-方法17"><span>3.2.2.17 方法17</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-18-方法18" tabindex="-1"><a class="header-anchor" href="#_3-2-2-18-方法18"><span>3.2.2.18 方法18</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-19-方法19" tabindex="-1"><a class="header-anchor" href="#_3-2-2-19-方法19"><span>3.2.2.19 方法19</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-2-20-方法20" tabindex="-1"><a class="header-anchor" href="#_3-2-2-20-方法20"><span>3.2.2.20 方法20</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token generic-method"><span class="token function">Average</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-3-count" tabindex="-1"><a class="header-anchor" href="#_3-2-3-count"><span>3.2.3 Count</span></a></h4><h5 id="_3-2-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-3-1-方法1"><span>3.2.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Count</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-3-2-方法2"><span>3.2.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Count</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-4-longcount" tabindex="-1"><a class="header-anchor" href="#_3-2-4-longcount"><span>3.2.4 LongCount</span></a></h4><h5 id="_3-2-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-4-1-方法1"><span>3.2.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">LongCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-4-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-4-2-方法2"><span>3.2.4.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">LongCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-5-sum" tabindex="-1"><a class="header-anchor" href="#_3-2-5-sum"><span>3.2.5 Sum</span></a></h4><h5 id="_3-2-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-5-1-方法1"><span>3.2.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-5-2-方法2"><span>3.2.5.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-5-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-2-5-3-方法3"><span>3.2.5.3 方法3</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-2-5-4-方法4"><span>3.2.5.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-5-方法5" tabindex="-1"><a class="header-anchor" href="#_3-2-5-5-方法5"><span>3.2.5.5 方法5</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-6-方法6" tabindex="-1"><a class="header-anchor" href="#_3-2-5-6-方法6"><span>3.2.5.6 方法6</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-7-方法7" tabindex="-1"><a class="header-anchor" href="#_3-2-5-7-方法7"><span>3.2.5.7 方法7</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-8-方法8" tabindex="-1"><a class="header-anchor" href="#_3-2-5-8-方法8"><span>3.2.5.8 方法8</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-9-方法9" tabindex="-1"><a class="header-anchor" href="#_3-2-5-9-方法9"><span>3.2.5.9 方法9</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-10-方法10" tabindex="-1"><a class="header-anchor" href="#_3-2-5-10-方法10"><span>3.2.5.10 方法10</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-11-方法11" tabindex="-1"><a class="header-anchor" href="#_3-2-5-11-方法11"><span>3.2.5.11 方法11</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-12-方法12" tabindex="-1"><a class="header-anchor" href="#_3-2-5-12-方法12"><span>3.2.5.12 方法12</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-13-方法13" tabindex="-1"><a class="header-anchor" href="#_3-2-5-13-方法13"><span>3.2.5.13 方法13</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-14-方法14" tabindex="-1"><a class="header-anchor" href="#_3-2-5-14-方法14"><span>3.2.5.14 方法14</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-15-方法15" tabindex="-1"><a class="header-anchor" href="#_3-2-5-15-方法15"><span>3.2.5.15 方法15</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-16-方法16" tabindex="-1"><a class="header-anchor" href="#_3-2-5-16-方法16"><span>3.2.5.16 方法16</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-17-方法17" tabindex="-1"><a class="header-anchor" href="#_3-2-5-17-方法17"><span>3.2.5.17 方法17</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-18-方法18" tabindex="-1"><a class="header-anchor" href="#_3-2-5-18-方法18"><span>3.2.5.18 方法18</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-19-方法19" tabindex="-1"><a class="header-anchor" href="#_3-2-5-19-方法19"><span>3.2.5.19 方法19</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-5-20-方法20" tabindex="-1"><a class="header-anchor" href="#_3-2-5-20-方法20"><span>3.2.5.20 方法20</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token generic-method"><span class="token function">Sum</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-6-max" tabindex="-1"><a class="header-anchor" href="#_3-2-6-max"><span>3.2.6 Max</span></a></h4><h5 id="_3-2-6-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-6-1-方法1"><span>3.2.6.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-6-2-方法2"><span>3.2.6.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-2-6-3-方法3"><span>3.2.6.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-2-6-4-方法4"><span>3.2.6.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-5-方法5" tabindex="-1"><a class="header-anchor" href="#_3-2-6-5-方法5"><span>3.2.6.5 方法5</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-6-方法6" tabindex="-1"><a class="header-anchor" href="#_3-2-6-6-方法6"><span>3.2.6.6 方法6</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-7-方法7" tabindex="-1"><a class="header-anchor" href="#_3-2-6-7-方法7"><span>3.2.6.7 方法7</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-8-方法8" tabindex="-1"><a class="header-anchor" href="#_3-2-6-8-方法8"><span>3.2.6.8 方法8</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-9-方法9" tabindex="-1"><a class="header-anchor" href="#_3-2-6-9-方法9"><span>3.2.6.9 方法9</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-10-方法10" tabindex="-1"><a class="header-anchor" href="#_3-2-6-10-方法10"><span>3.2.6.10 方法10</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-11-方法11" tabindex="-1"><a class="header-anchor" href="#_3-2-6-11-方法11"><span>3.2.6.11 方法11</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-12-方法12" tabindex="-1"><a class="header-anchor" href="#_3-2-6-12-方法12"><span>3.2.6.12 方法12</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-13-方法13" tabindex="-1"><a class="header-anchor" href="#_3-2-6-13-方法13"><span>3.2.6.13 方法13</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-14-方法14" tabindex="-1"><a class="header-anchor" href="#_3-2-6-14-方法14"><span>3.2.6.14 方法14</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-15-方法15" tabindex="-1"><a class="header-anchor" href="#_3-2-6-15-方法15"><span>3.2.6.15 方法15</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-16-方法16" tabindex="-1"><a class="header-anchor" href="#_3-2-6-16-方法16"><span>3.2.6.16 方法16</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-17-方法17" tabindex="-1"><a class="header-anchor" href="#_3-2-6-17-方法17"><span>3.2.6.17 方法17</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-18-方法18" tabindex="-1"><a class="header-anchor" href="#_3-2-6-18-方法18"><span>3.2.6.18 方法18</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-19-方法19" tabindex="-1"><a class="header-anchor" href="#_3-2-6-19-方法19"><span>3.2.6.19 方法19</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-20-方法20" tabindex="-1"><a class="header-anchor" href="#_3-2-6-20-方法20"><span>3.2.6.20 方法20</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-21-方法21" tabindex="-1"><a class="header-anchor" href="#_3-2-6-21-方法21"><span>3.2.6.21 方法21</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-22-方法22" tabindex="-1"><a class="header-anchor" href="#_3-2-6-22-方法22"><span>3.2.6.22 方法22</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-6-23-方法23" tabindex="-1"><a class="header-anchor" href="#_3-2-6-23-方法23"><span>3.2.6.23 方法23</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TResult<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Max</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-7-maxby" tabindex="-1"><a class="header-anchor" href="#_3-2-7-maxby"><span>3.2.7 MaxBy</span></a></h4><h5 id="_3-2-7-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-7-1-方法1"><span>3.2.7.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">MaxBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-7-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-7-2-方法2"><span>3.2.7.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">MaxBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-8-min" tabindex="-1"><a class="header-anchor" href="#_3-2-8-min"><span>3.2.8 Min</span></a></h4><h5 id="_3-2-8-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-8-1-方法1"><span>3.2.8.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-8-2-方法2"><span>3.2.8.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-3-方法3" tabindex="-1"><a class="header-anchor" href="#_3-2-8-3-方法3"><span>3.2.8.3 方法3</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-4-方法4" tabindex="-1"><a class="header-anchor" href="#_3-2-8-4-方法4"><span>3.2.8.4 方法4</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-5-方法5" tabindex="-1"><a class="header-anchor" href="#_3-2-8-5-方法5"><span>3.2.8.5 方法5</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-6-方法6" tabindex="-1"><a class="header-anchor" href="#_3-2-8-6-方法6"><span>3.2.8.6 方法6</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-7-方法7" tabindex="-1"><a class="header-anchor" href="#_3-2-8-7-方法7"><span>3.2.8.7 方法7</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-8-方法8" tabindex="-1"><a class="header-anchor" href="#_3-2-8-8-方法8"><span>3.2.8.8 方法8</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-9-方法9" tabindex="-1"><a class="header-anchor" href="#_3-2-8-9-方法9"><span>3.2.8.9 方法9</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-10-方法10" tabindex="-1"><a class="header-anchor" href="#_3-2-8-10-方法10"><span>3.2.8.10 方法10</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-11-方法11" tabindex="-1"><a class="header-anchor" href="#_3-2-8-11-方法11"><span>3.2.8.11 方法11</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-12-方法12" tabindex="-1"><a class="header-anchor" href="#_3-2-8-12-方法12"><span>3.2.8.12 方法12</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-13-方法13" tabindex="-1"><a class="header-anchor" href="#_3-2-8-13-方法13"><span>3.2.8.13 方法13</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-14-方法14" tabindex="-1"><a class="header-anchor" href="#_3-2-8-14-方法14"><span>3.2.8.14 方法14</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-15-方法15" tabindex="-1"><a class="header-anchor" href="#_3-2-8-15-方法15"><span>3.2.8.15 方法15</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-16-方法16" tabindex="-1"><a class="header-anchor" href="#_3-2-8-16-方法16"><span>3.2.8.16 方法16</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-17-方法17" tabindex="-1"><a class="header-anchor" href="#_3-2-8-17-方法17"><span>3.2.8.17 方法17</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">decimal</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">decimal</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-18-方法18" tabindex="-1"><a class="header-anchor" href="#_3-2-8-18-方法18"><span>3.2.8.18 方法18</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">double</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-19-方法19" tabindex="-1"><a class="header-anchor" href="#_3-2-8-19-方法19"><span>3.2.8.19 方法19</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-20-方法20" tabindex="-1"><a class="header-anchor" href="#_3-2-8-20-方法20"><span>3.2.8.20 方法20</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">long</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-21-方法21" tabindex="-1"><a class="header-anchor" href="#_3-2-8-21-方法21"><span>3.2.8.21 方法21</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-22-方法22" tabindex="-1"><a class="header-anchor" href="#_3-2-8-22-方法22"><span>3.2.8.22 方法22</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-8-23-方法23" tabindex="-1"><a class="header-anchor" href="#_3-2-8-23-方法23"><span>3.2.8.23 方法23</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TResult<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Min</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">&gt;</span></span> selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-9-minby" tabindex="-1"><a class="header-anchor" href="#_3-2-9-minby"><span>3.2.9 MinBy</span></a></h4><h5 id="_3-2-9-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-2-9-1-方法1"><span>3.2.9.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">MinBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-2-9-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-2-9-2-方法2"><span>3.2.9.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">TSource<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">MinBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TKey<span class="token punctuation">&gt;</span></span> keySelector<span class="token punctuation">,</span> <span class="token class-name">IComparer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-量词运算符" tabindex="-1"><a class="header-anchor" href="#_3-3-量词运算符"><span>3.3 量词运算符</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>	<span class="token operator">-&gt;</span><span class="token keyword">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一种返回true或者false的聚合方法。</p><blockquote><p>All Any Contains SequenceEqual</p></blockquote><h4 id="_3-3-1-any" tabindex="-1"><a class="header-anchor" href="#_3-3-1-any"><span>3.3.1 Any</span></a></h4><p>Any 用来判断集合中是否存在任一一个元素符合条件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-3-1-1-方法1"><span>3.3.1.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">Any</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-3-1-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-3-1-2-方法2"><span>3.3.1.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">Any</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-2-all" tabindex="-1"><a class="header-anchor" href="#_3-3-2-all"><span>3.3.2 ALL</span></a></h4><p>All 用来判断集合中是否所有元素符合条件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-3-2-1-方法1"><span>3.3.2.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">All</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-3-contains" tabindex="-1"><a class="header-anchor" href="#_3-3-3-contains"><span>3.3.3 Contains</span></a></h4><h5 id="_3-3-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-3-3-1-方法1"><span>3.3.3.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">Contains</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-3-3-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-3-3-2-方法2"><span>3.3.3.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">Contains</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">TSource</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-4-sequenceequal" tabindex="-1"><a class="header-anchor" href="#_3-3-4-sequenceequal"><span>3.3.4 SequenceEqual</span></a></h4><p>SequenceEqual 扩展方法用于比较集合系列各个相同位置的元素是否相等。</p><h5 id="_3-3-4-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-3-4-1-方法1"><span>3.3.4.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">SequenceEqual</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">bool</span></span> result1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">SequenceEqual</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name"><span class="token keyword">bool</span></span> result2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">SequenceEqual</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-4-2-方法2" tabindex="-1"><a class="header-anchor" href="#_3-3-4-2-方法2"><span>3.3.4.2 方法2</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">SequenceEqual</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> second<span class="token punctuation">,</span> <span class="token class-name">IEqualityComparer<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> comparer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-3-5-trygetnonenumeratedcount" tabindex="-1"><a class="header-anchor" href="#_3-3-5-trygetnonenumeratedcount"><span>3.3.5 TryGetNonEnumeratedCount</span></a></h4><p>尝试在不强制枚举的情况下确定序列中的元素数</p><h5 id="_3-3-5-1-方法1" tabindex="-1"><a class="header-anchor" href="#_3-3-5-1-方法1"><span>3.3.5.1 方法1</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token generic-method"><span class="token function">TryGetNonEnumeratedCount</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-void-序列" tabindex="-1"><a class="header-anchor" href="#_4-void-序列"><span>4 void-&gt;序列</span></a></h2><p>从零开始输出一个序列。 生成集合的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">void</span>	<span class="token operator">-&gt;</span>IEnumerable<span class="token operator">&lt;</span>TResult<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成一个简单的集合，方法有：</p><blockquote><p>Empty Range Repeat</p></blockquote><h3 id="_4-1-range" tabindex="-1"><a class="header-anchor" href="#_4-1-range"><span>4.1 Range</span></a></h3><p>用于生成简单的数字系列</p><h4 id="_4-1-1-方法1" tabindex="-1"><a class="header-anchor" href="#_4-1-1-方法1"><span>4.1.1 方法1</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> start<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 从方法原型可以看出，这并不是一个扩展方法，只是一个普通的静态方法，其中第一个参数表示开始的数字，第二个是要生成的数量，返回一个<code>IEnumerable&lt;ine&gt;</code>的集合。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> ints<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出 1 2 3 4 5 6 7 8 9 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-repeat" tabindex="-1"><a class="header-anchor" href="#_4-2-repeat"><span>4.2 Repeat</span></a></h3><p>Repeat操作符用于生成一个包含指定数量重复元素的序列</p><h4 id="_4-2-1-方法1" tabindex="-1"><a class="header-anchor" href="#_4-2-1-方法1"><span>4.2.1 方法1</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Repeat</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TResult</span> element<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例 这是一个泛型的静态方法，你可以生成任何类型重复的元素，第二个参数代表个数，第一个表示要重复生成的元素。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token keyword">in</span> ints<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出 1 1 1 1 1 1 1 1 1 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-empty" tabindex="-1"><a class="header-anchor" href="#_4-3-empty"><span>4.3 Empty</span></a></h3><p>Empty操作符用于生成一个包含指定类型元素的空序列。</p><h4 id="_4-3-1-方法1" tabindex="-1"><a class="header-anchor" href="#_4-3-1-方法1"><span>4.3.1 方法1</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从方法原型可以看出，这只是一个普通的静态方法，但是挺有用，因为<code>IEnumerable&lt;T&gt;</code>是个接口，不能new，但是用这个方法可以生成一个空的<code>IEnumerable&lt;T&gt;</code>对象了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ints<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-defaultempty" tabindex="-1"><a class="header-anchor" href="#_4-4-defaultempty"><span>4.4 DefaultEmpty</span></a></h3><p>DefaultEmpty操作符可以用来为一个空的输入序列生成一个对应的含有默认元素的新序列。引用类型为null，值类型为相应的默认值。有些标准操作符在一个空的序列上调用时会抛出一个异常，而DefaultEmpty恰恰可以解决这个问题。</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">public</span> staticIEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> DefaultIfEmpty<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span>thisIEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> DefaultIfEmpty<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span><span class="token punctuation">(</span>this IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">&gt;</span> source<span class="token punctuation">,</span> TSource defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们对一个空集合使用first，那么会抛出异常，但是我们用了DefaultEmpty就可以解决这个问题</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>var numList <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numList<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numList<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numList<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var bb <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token keyword">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>StartsWith<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">string</span> str <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token keyword">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>StartsWith<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>DefaultIfEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token keyword">null</span>
<span class="token operator">/</span><span class="token operator">/</span>如果去掉DefaultEmpty就会报异常<span class="token punctuation">(</span><span class="token string">&quot;序列中不包含任何元素&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">string</span> str1 <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token keyword">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>StartsWith<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-参考文档" tabindex="-1"><a class="header-anchor" href="#_5-参考文档"><span>5 参考文档</span></a></h2>`,513),d={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/standard-query-operators-overview",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/pFnne9Ge8bicwcQ4DzXwZA",target:"_blank",rel:"noopener noreferrer"};function h(g,v){const a=c("ExternalLinkIcon");return o(),l("div",null,[i,n("blockquote",null,[n("p",null,[s("详细文档："),n("a",r,[s("https://www.jb51.net/article/177756.htm"),e(a)])])]),k,n("blockquote",null,[n("p",null,[s("官方文档："),n("a",d,[s("https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/linq/standard-query-operators-overview"),e(a)]),s(" c#核心技术指南")])]),n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/pFnne9Ge8bicwcQ4DzXwZA"),e(a)]),s(" | C#规范整理·集合和Linq")])])}const _=p(u,[["render",h],["__file","yunsuanfu.html.vue"]]),T=JSON.parse('{"path":"/dotnet/csharp/linq/yunsuanfu.html","title":"运算符","lang":"zh-CN","frontmatter":{"title":"运算符","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"yunsuanfu","slug":"uzccw2","docsId":"61600337","description":"开篇语 本文是对Linq用法的一次复习，里面包含的部分源码涉及删减。 本文示例代码环境：VS2022、.Net6、C#10 Linq库 https://github.com/morelinq/MoreLINQ https://githubub.com/viceroypenguin/SuperLinq 1 概述 标准查询运算符分为三类 输入是序列，输出是...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/linq/yunsuanfu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"运算符"}],["meta",{"property":"og:description","content":"开篇语 本文是对Linq用法的一次复习，里面包含的部分源码涉及删减。 本文示例代码环境：VS2022、.Net6、C#10 Linq库 https://github.com/morelinq/MoreLINQ https://githubub.com/viceroypenguin/SuperLinq 1 概述 标准查询运算符分为三类 输入是序列，输出是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T15:15:54.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-21T15:15:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-21T15:15:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"Linq库","slug":"linq库","link":"#linq库","children":[]},{"level":2,"title":"1 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 序列->序列","slug":"_2-序列-序列","link":"#_2-序列-序列","children":[{"level":3,"title":"2.1 筛选运算符","slug":"_2-1-筛选运算符","link":"#_2-1-筛选运算符","children":[{"level":4,"title":"2.1.1 Where","slug":"_2-1-1-where","link":"#_2-1-1-where","children":[{"level":5,"title":"2.1.1.1 方法1","slug":"_2-1-1-1-方法1","link":"#_2-1-1-1-方法1","children":[]},{"level":5,"title":"2.1.1.2 方法2","slug":"_2-1-1-2-方法2","link":"#_2-1-1-2-方法2","children":[]}]},{"level":4,"title":"2.1.2 Take","slug":"_2-1-2-take","link":"#_2-1-2-take","children":[{"level":5,"title":"2.1.2.1 方法1","slug":"_2-1-2-1-方法1","link":"#_2-1-2-1-方法1","children":[]},{"level":5,"title":"2.1.2.2 方法2","slug":"_2-1-2-2-方法2","link":"#_2-1-2-2-方法2","children":[]}]},{"level":4,"title":"2.1.3 TakeWhile","slug":"_2-1-3-takewhile","link":"#_2-1-3-takewhile","children":[{"level":5,"title":"2.1.3.1 方法1","slug":"_2-1-3-1-方法1","link":"#_2-1-3-1-方法1","children":[]},{"level":5,"title":"2.3.3.2 方法2","slug":"_2-3-3-2-方法2","link":"#_2-3-3-2-方法2","children":[]}]},{"level":4,"title":"2.1.4 TakeLast","slug":"_2-1-4-takelast","link":"#_2-1-4-takelast","children":[{"level":5,"title":"2.1.4.1 方法1","slug":"_2-1-4-1-方法1","link":"#_2-1-4-1-方法1","children":[]}]},{"level":4,"title":"2.1.5 Skip","slug":"_2-1-5-skip","link":"#_2-1-5-skip","children":[{"level":5,"title":"2.1.5.1 方法1","slug":"_2-1-5-1-方法1","link":"#_2-1-5-1-方法1","children":[]}]},{"level":4,"title":"2.1.6 SkipLast","slug":"_2-1-6-skiplast","link":"#_2-1-6-skiplast","children":[{"level":5,"title":"2.1.6.1 方法1","slug":"_2-1-6-1-方法1","link":"#_2-1-6-1-方法1","children":[]}]},{"level":4,"title":"2.1.7 SkipWhile","slug":"_2-1-7-skipwhile","link":"#_2-1-7-skipwhile","children":[{"level":5,"title":"2.1.7.1 方法1","slug":"_2-1-7-1-方法1","link":"#_2-1-7-1-方法1","children":[]},{"level":5,"title":"2.1.7.2 方法2","slug":"_2-1-7-2-方法2","link":"#_2-1-7-2-方法2","children":[]}]},{"level":4,"title":"2.1.8 TakeLast","slug":"_2-1-8-takelast","link":"#_2-1-8-takelast","children":[]},{"level":4,"title":"2.1.9 Distinct","slug":"_2-1-9-distinct","link":"#_2-1-9-distinct","children":[{"level":5,"title":"2.1.9.1 方法1","slug":"_2-1-9-1-方法1","link":"#_2-1-9-1-方法1","children":[]},{"level":5,"title":"2.1.9.2 方法2","slug":"_2-1-9-2-方法2","link":"#_2-1-9-2-方法2","children":[]}]},{"level":4,"title":"2.1.10 DistinctBy","slug":"_2-1-10-distinctby","link":"#_2-1-10-distinctby","children":[{"level":5,"title":"2.1.10.1 方法1","slug":"_2-1-10-1-方法1","link":"#_2-1-10-1-方法1","children":[]},{"level":5,"title":"2.1.10.2 方法2","slug":"_2-1-10-2-方法2","link":"#_2-1-10-2-方法2","children":[]}]}]},{"level":3,"title":"2.2 映射运算符","slug":"_2-2-映射运算符","link":"#_2-2-映射运算符","children":[{"level":4,"title":"2.2.1 Select","slug":"_2-2-1-select","link":"#_2-2-1-select","children":[{"level":5,"title":"2.2.1.1 方法1","slug":"_2-2-1-1-方法1","link":"#_2-2-1-1-方法1","children":[]},{"level":5,"title":"2.2.1.2 方法2","slug":"_2-2-1-2-方法2","link":"#_2-2-1-2-方法2","children":[]}]},{"level":4,"title":"2.2.2 SelectMany","slug":"_2-2-2-selectmany","link":"#_2-2-2-selectmany","children":[{"level":5,"title":"2.2.2.1 方法1","slug":"_2-2-2-1-方法1","link":"#_2-2-2-1-方法1","children":[]},{"level":5,"title":"2.2.2.2 方法2","slug":"_2-2-2-2-方法2","link":"#_2-2-2-2-方法2","children":[]},{"level":5,"title":"2.2.2.3 方法3","slug":"_2-2-2-3-方法3","link":"#_2-2-2-3-方法3","children":[]},{"level":5,"title":"2.2.2.4 方法4","slug":"_2-2-2-4-方法4","link":"#_2-2-2-4-方法4","children":[]}]}]},{"level":3,"title":"2.3 连接运算符","slug":"_2-3-连接运算符","link":"#_2-3-连接运算符","children":[{"level":4,"title":"2.3.1 Join","slug":"_2-3-1-join","link":"#_2-3-1-join","children":[{"level":5,"title":"2.3.1.1 方法1","slug":"_2-3-1-1-方法1","link":"#_2-3-1-1-方法1","children":[]},{"level":5,"title":"2.3.1.2 方法2","slug":"_2-3-1-2-方法2","link":"#_2-3-1-2-方法2","children":[]}]},{"level":4,"title":"2.3.2 GroupJoin","slug":"_2-3-2-groupjoin","link":"#_2-3-2-groupjoin","children":[{"level":5,"title":"2.3.2.1 方法1","slug":"_2-3-2-1-方法1","link":"#_2-3-2-1-方法1","children":[]},{"level":5,"title":"2.3.2.2 方法2","slug":"_2-3-2-2-方法2","link":"#_2-3-2-2-方法2","children":[]}]},{"level":4,"title":"2.3.3 Zip","slug":"_2-3-3-zip","link":"#_2-3-3-zip","children":[{"level":5,"title":"2.3.3.1 方法1","slug":"_2-3-3-1-方法1","link":"#_2-3-3-1-方法1","children":[]},{"level":5,"title":"2.3.3.2 方法2","slug":"_2-3-3-2-方法2-1","link":"#_2-3-3-2-方法2-1","children":[]},{"level":5,"title":"2.3.3.3 方法3","slug":"_2-3-3-3-方法3","link":"#_2-3-3-3-方法3","children":[]}]}]},{"level":3,"title":"2.4 排序运算符","slug":"_2-4-排序运算符","link":"#_2-4-排序运算符","children":[{"level":4,"title":"2.4.1 OrderBy","slug":"_2-4-1-orderby","link":"#_2-4-1-orderby","children":[{"level":5,"title":"2.4.1.1 方法1","slug":"_2-4-1-1-方法1","link":"#_2-4-1-1-方法1","children":[]},{"level":5,"title":"2.4.1.2 方法2","slug":"_2-4-1-2-方法2","link":"#_2-4-1-2-方法2","children":[]}]},{"level":4,"title":"2.4.2 OrderByDescending","slug":"_2-4-2-orderbydescending","link":"#_2-4-2-orderbydescending","children":[{"level":5,"title":"2.4.2.1 方法1","slug":"_2-4-2-1-方法1","link":"#_2-4-2-1-方法1","children":[]},{"level":5,"title":"2.4.2.2 方法2","slug":"_2-4-2-2-方法2","link":"#_2-4-2-2-方法2","children":[]}]},{"level":4,"title":"2.4.3 ThenBy","slug":"_2-4-3-thenby","link":"#_2-4-3-thenby","children":[{"level":5,"title":"2.4.3.1 方法1","slug":"_2-4-3-1-方法1","link":"#_2-4-3-1-方法1","children":[]},{"level":5,"title":"2.4.3.2 方法2","slug":"_2-4-3-2-方法2","link":"#_2-4-3-2-方法2","children":[]}]},{"level":4,"title":"2.4.4 ThenByDescending","slug":"_2-4-4-thenbydescending","link":"#_2-4-4-thenbydescending","children":[{"level":5,"title":"2.4.4.1 方法1","slug":"_2-4-4-1-方法1","link":"#_2-4-4-1-方法1","children":[]},{"level":5,"title":"2.4.4.2 方法2","slug":"_2-4-4-2-方法2","link":"#_2-4-4-2-方法2","children":[]}]},{"level":4,"title":"2.4.5 Reverse","slug":"_2-4-5-reverse","link":"#_2-4-5-reverse","children":[{"level":5,"title":"2.4.5.1 方法1","slug":"_2-4-5-1-方法1","link":"#_2-4-5-1-方法1","children":[]}]}]},{"level":3,"title":"2.5 分组运算符","slug":"_2-5-分组运算符","link":"#_2-5-分组运算符","children":[{"level":4,"title":"2.5.1 GroupBy","slug":"_2-5-1-groupby","link":"#_2-5-1-groupby","children":[{"level":5,"title":"2.5.1.1 方法1","slug":"_2-5-1-1-方法1","link":"#_2-5-1-1-方法1","children":[]},{"level":5,"title":"2.5.1.2 方法2","slug":"_2-5-1-2-方法2","link":"#_2-5-1-2-方法2","children":[]},{"level":5,"title":"2.5.1.3 方法3","slug":"_2-5-1-3-方法3","link":"#_2-5-1-3-方法3","children":[]},{"level":5,"title":"2.5.1.4 方法4","slug":"_2-5-1-4-方法4","link":"#_2-5-1-4-方法4","children":[]},{"level":5,"title":"2.5.1.5 方法5","slug":"_2-5-1-5-方法5","link":"#_2-5-1-5-方法5","children":[]},{"level":5,"title":"2.5.1.6 方法6","slug":"_2-5-1-6-方法6","link":"#_2-5-1-6-方法6","children":[]},{"level":5,"title":"2.5.1.7 方法7","slug":"_2-5-1-7-方法7","link":"#_2-5-1-7-方法7","children":[]},{"level":5,"title":"2.5.1.8 方法8","slug":"_2-5-1-8-方法8","link":"#_2-5-1-8-方法8","children":[]}]}]},{"level":3,"title":"2.6 集合运算符","slug":"_2-6-集合运算符","link":"#_2-6-集合运算符","children":[{"level":4,"title":"2.6.1 Concat","slug":"_2-6-1-concat","link":"#_2-6-1-concat","children":[{"level":5,"title":"2.6.1.1 方法1","slug":"_2-6-1-1-方法1","link":"#_2-6-1-1-方法1","children":[]}]},{"level":4,"title":"2.6.2 Union","slug":"_2-6-2-union","link":"#_2-6-2-union","children":[]},{"level":4,"title":"2.6.2.1 方法1","slug":"_2-6-2-1-方法1","link":"#_2-6-2-1-方法1","children":[{"level":5,"title":"2.6.2.2 方法2","slug":"_2-6-2-2-方法2","link":"#_2-6-2-2-方法2","children":[]}]},{"level":4,"title":"2.6.3 UnionBy","slug":"_2-6-3-unionby","link":"#_2-6-3-unionby","children":[{"level":5,"title":"2.6.3.1 方法1","slug":"_2-6-3-1-方法1","link":"#_2-6-3-1-方法1","children":[]},{"level":5,"title":"2.6.3.2 方法2","slug":"_2-6-3-2-方法2","link":"#_2-6-3-2-方法2","children":[]}]},{"level":4,"title":"2.6.4 Intersect","slug":"_2-6-4-intersect","link":"#_2-6-4-intersect","children":[{"level":5,"title":"2.6.4.1 方法1","slug":"_2-6-4-1-方法1","link":"#_2-6-4-1-方法1","children":[]},{"level":5,"title":"2.6.4.2 方法2","slug":"_2-6-4-2-方法2","link":"#_2-6-4-2-方法2","children":[]}]},{"level":4,"title":"2.6.5 IntersectBy","slug":"_2-6-5-intersectby","link":"#_2-6-5-intersectby","children":[{"level":5,"title":"2.6.5.1 方法1","slug":"_2-6-5-1-方法1","link":"#_2-6-5-1-方法1","children":[]},{"level":5,"title":"2.6.5.2 方法2","slug":"_2-6-5-2-方法2","link":"#_2-6-5-2-方法2","children":[]}]},{"level":4,"title":"2.6.6 Except","slug":"_2-6-6-except","link":"#_2-6-6-except","children":[{"level":5,"title":"2.6.6.1 方法1","slug":"_2-6-6-1-方法1","link":"#_2-6-6-1-方法1","children":[]},{"level":5,"title":"2.6.6.2 方法2","slug":"_2-6-6-2-方法2","link":"#_2-6-6-2-方法2","children":[]}]},{"level":4,"title":"2.6.7 ExceptBy","slug":"_2-6-7-exceptby","link":"#_2-6-7-exceptby","children":[{"level":5,"title":"2.6.7.1 方法1","slug":"_2-6-7-1-方法1","link":"#_2-6-7-1-方法1","children":[]},{"level":5,"title":"2.6.7.2 方法2","slug":"_2-6-7-2-方法2","link":"#_2-6-7-2-方法2","children":[]}]}]},{"level":3,"title":"2.7 转换方法：导入","slug":"_2-7-转换方法-导入","link":"#_2-7-转换方法-导入","children":[{"level":4,"title":"2.7.1 OfType","slug":"_2-7-1-oftype","link":"#_2-7-1-oftype","children":[{"level":5,"title":"2.7.1.1 方法一","slug":"_2-7-1-1-方法一","link":"#_2-7-1-1-方法一","children":[]}]},{"level":4,"title":"2.7.2 Cast","slug":"_2-7-2-cast","link":"#_2-7-2-cast","children":[{"level":5,"title":"2.7.2.1 方法1","slug":"_2-7-2-1-方法1","link":"#_2-7-2-1-方法1","children":[]}]}]},{"level":3,"title":"2.8 转换方法：导出","slug":"_2-8-转换方法-导出","link":"#_2-8-转换方法-导出","children":[{"level":4,"title":"2.8.1 ToArray","slug":"_2-8-1-toarray","link":"#_2-8-1-toarray","children":[{"level":5,"title":"2.8.1.1 方法1","slug":"_2-8-1-1-方法1","link":"#_2-8-1-1-方法1","children":[]}]},{"level":4,"title":"2.8.2 ToDictionary","slug":"_2-8-2-todictionary","link":"#_2-8-2-todictionary","children":[{"level":5,"title":"2.8.2.1 方法1","slug":"_2-8-2-1-方法1","link":"#_2-8-2-1-方法1","children":[]},{"level":5,"title":"2.8.2.2 方法2","slug":"_2-8-2-2-方法2","link":"#_2-8-2-2-方法2","children":[]},{"level":5,"title":"2.8.2.3 方法3","slug":"_2-8-2-3-方法3","link":"#_2-8-2-3-方法3","children":[]},{"level":5,"title":"2.8.2.4 方法4","slug":"_2-8-2-4-方法4","link":"#_2-8-2-4-方法4","children":[]}]},{"level":4,"title":"2.8.3 ToHashSet","slug":"_2-8-3-tohashset","link":"#_2-8-3-tohashset","children":[{"level":5,"title":"2.8.3.1 方法1","slug":"_2-8-3-1-方法1","link":"#_2-8-3-1-方法1","children":[]},{"level":5,"title":"2.8.3.2 方法2","slug":"_2-8-3-2-方法2","link":"#_2-8-3-2-方法2","children":[]}]},{"level":4,"title":"2.8.4 ToList","slug":"_2-8-4-tolist","link":"#_2-8-4-tolist","children":[{"level":5,"title":"2.8.4.1 方法1","slug":"_2-8-4-1-方法1","link":"#_2-8-4-1-方法1","children":[]}]},{"level":4,"title":"2.8.5 ToLookup","slug":"_2-8-5-tolookup","link":"#_2-8-5-tolookup","children":[{"level":5,"title":"2.8.5.1 方法1","slug":"_2-8-5-1-方法1","link":"#_2-8-5-1-方法1","children":[]},{"level":5,"title":"2.8.5.2 方法2","slug":"_2-8-5-2-方法2","link":"#_2-8-5-2-方法2","children":[]},{"level":5,"title":"2.8.5.3 方法3","slug":"_2-8-5-3-方法3","link":"#_2-8-5-3-方法3","children":[]},{"level":5,"title":"2.8.5.4 方法4","slug":"_2-8-5-4-方法4","link":"#_2-8-5-4-方法4","children":[]}]},{"level":4,"title":"2.8.6 AsEnumerable","slug":"_2-8-6-asenumerable","link":"#_2-8-6-asenumerable","children":[{"level":5,"title":"2.8.6.1 方法1","slug":"_2-8-6-1-方法1","link":"#_2-8-6-1-方法1","children":[]}]}]},{"level":3,"title":"2.9 添加运算符","slug":"_2-9-添加运算符","link":"#_2-9-添加运算符","children":[{"level":4,"title":"2.9.1 Append","slug":"_2-9-1-append","link":"#_2-9-1-append","children":[{"level":5,"title":"2.9.1.1 方法1","slug":"_2-9-1-1-方法1","link":"#_2-9-1-1-方法1","children":[]}]},{"level":4,"title":"2.9.2 Prepend","slug":"_2-9-2-prepend","link":"#_2-9-2-prepend","children":[{"level":5,"title":"2.9.2.1 方法1","slug":"_2-9-2-1-方法1","link":"#_2-9-2-1-方法1","children":[]}]},{"level":4,"title":"3.10 分割运算符","slug":"_3-10-分割运算符","link":"#_3-10-分割运算符","children":[]},{"level":4,"title":"3.10.1 Chunk","slug":"_3-10-1-chunk","link":"#_3-10-1-chunk","children":[{"level":5,"title":"3.10.1.1 方法一","slug":"_3-10-1-1-方法一","link":"#_3-10-1-1-方法一","children":[]}]}]}]},{"level":2,"title":"3. 序列->元素或标量值","slug":"_3-序列-元素或标量值","link":"#_3-序列-元素或标量值","children":[{"level":3,"title":"3.1 元素运算符","slug":"_3-1-元素运算符","link":"#_3-1-元素运算符","children":[{"level":4,"title":"3.1.1 First","slug":"_3-1-1-first","link":"#_3-1-1-first","children":[{"level":5,"title":"3.1.1.1 方法1","slug":"_3-1-1-1-方法1","link":"#_3-1-1-1-方法1","children":[]},{"level":5,"title":"3.1.1.2 方法2","slug":"_3-1-1-2-方法2","link":"#_3-1-1-2-方法2","children":[]}]},{"level":4,"title":"3.1.2 FirstOrDefault","slug":"_3-1-2-firstordefault","link":"#_3-1-2-firstordefault","children":[{"level":5,"title":"3.1.2.1 方法1","slug":"_3-1-2-1-方法1","link":"#_3-1-2-1-方法1","children":[]},{"level":5,"title":"3.1.2.2 方法2","slug":"_3-1-2-2-方法2","link":"#_3-1-2-2-方法2","children":[]},{"level":5,"title":"3.1.2.3 方法3","slug":"_3-1-2-3-方法3","link":"#_3-1-2-3-方法3","children":[]},{"level":5,"title":"3.1.2.4 方法4","slug":"_3-1-2-4-方法4","link":"#_3-1-2-4-方法4","children":[]},{"level":5,"title":"速度对比","slug":"速度对比","link":"#速度对比","children":[]}]},{"level":4,"title":"3.1.3 Last","slug":"_3-1-3-last","link":"#_3-1-3-last","children":[{"level":5,"title":"3.1.3.1 方法1","slug":"_3-1-3-1-方法1","link":"#_3-1-3-1-方法1","children":[]},{"level":5,"title":"3.1.3.2 方法2","slug":"_3-1-3-2-方法2","link":"#_3-1-3-2-方法2","children":[]}]},{"level":4,"title":"3.1.4 LastOrDefault","slug":"_3-1-4-lastordefault","link":"#_3-1-4-lastordefault","children":[{"level":5,"title":"3.1.4.1 方法1","slug":"_3-1-4-1-方法1","link":"#_3-1-4-1-方法1","children":[]},{"level":5,"title":"3.1.4.2 方法2","slug":"_3-1-4-2-方法2","link":"#_3-1-4-2-方法2","children":[]},{"level":5,"title":"3.1.4.3 方法3","slug":"_3-1-4-3-方法3","link":"#_3-1-4-3-方法3","children":[]},{"level":5,"title":"3.1.4.4 方法4","slug":"_3-1-4-4-方法4","link":"#_3-1-4-4-方法4","children":[]}]},{"level":4,"title":"3.1.5 Single","slug":"_3-1-5-single","link":"#_3-1-5-single","children":[{"level":5,"title":"3.1.5.1 方法1","slug":"_3-1-5-1-方法1","link":"#_3-1-5-1-方法1","children":[]},{"level":5,"title":"3.1.5.2 方法2","slug":"_3-1-5-2-方法2","link":"#_3-1-5-2-方法2","children":[]}]},{"level":4,"title":"3.1.6 SingleOrDefault","slug":"_3-1-6-singleordefault","link":"#_3-1-6-singleordefault","children":[{"level":5,"title":"3.1.6.1 方法1","slug":"_3-1-6-1-方法1","link":"#_3-1-6-1-方法1","children":[]},{"level":5,"title":"3.1.6.2 方法2","slug":"_3-1-6-2-方法2","link":"#_3-1-6-2-方法2","children":[]},{"level":5,"title":"3.1.6.3 方法3","slug":"_3-1-6-3-方法3","link":"#_3-1-6-3-方法3","children":[]},{"level":5,"title":"3.1.6.4 方法4","slug":"_3-1-6-4-方法4","link":"#_3-1-6-4-方法4","children":[]}]},{"level":4,"title":"3.1.7 ElementAt","slug":"_3-1-7-elementat","link":"#_3-1-7-elementat","children":[{"level":5,"title":"3.1.7.1 方法1","slug":"_3-1-7-1-方法1","link":"#_3-1-7-1-方法1","children":[]},{"level":5,"title":"3.17.2 方法2","slug":"_3-17-2-方法2","link":"#_3-17-2-方法2","children":[]}]},{"level":4,"title":"3.1.8 ElementAtOrDefault","slug":"_3-1-8-elementatordefault","link":"#_3-1-8-elementatordefault","children":[{"level":5,"title":"3.1.8.1 方法1","slug":"_3-1-8-1-方法1","link":"#_3-1-8-1-方法1","children":[]},{"level":5,"title":"3.1.8.2 方法2","slug":"_3-1-8-2-方法2","link":"#_3-1-8-2-方法2","children":[]}]},{"level":4,"title":"3.1.9 DefaultIfEmpty","slug":"_3-1-9-defaultifempty","link":"#_3-1-9-defaultifempty","children":[{"level":5,"title":"3.1.9.1 方法1","slug":"_3-1-9-1-方法1","link":"#_3-1-9-1-方法1","children":[]},{"level":5,"title":"3.1.9.1 方法1","slug":"_3-1-9-1-方法1-1","link":"#_3-1-9-1-方法1-1","children":[]}]}]},{"level":3,"title":"3.2 聚合方法","slug":"_3-2-聚合方法","link":"#_3-2-聚合方法","children":[{"level":4,"title":"3.2.1 Aggregate","slug":"_3-2-1-aggregate","link":"#_3-2-1-aggregate","children":[{"level":5,"title":"3.2.1.1 方法1","slug":"_3-2-1-1-方法1","link":"#_3-2-1-1-方法1","children":[]},{"level":5,"title":"3.2.1.2 方法2","slug":"_3-2-1-2-方法2","link":"#_3-2-1-2-方法2","children":[]},{"level":5,"title":"3.2.1.3 方法3","slug":"_3-2-1-3-方法3","link":"#_3-2-1-3-方法3","children":[]}]},{"level":4,"title":"3.2.2 Average","slug":"_3-2-2-average","link":"#_3-2-2-average","children":[{"level":5,"title":"3.2.2.1 方法1","slug":"_3-2-2-1-方法1","link":"#_3-2-2-1-方法1","children":[]},{"level":5,"title":"3.2.2.2 方法2","slug":"_3-2-2-2-方法2","link":"#_3-2-2-2-方法2","children":[]},{"level":5,"title":"3.2.2.3 方法3","slug":"_3-2-2-3-方法3","link":"#_3-2-2-3-方法3","children":[]},{"level":5,"title":"3.2.2.4 方法4","slug":"_3-2-2-4-方法4","link":"#_3-2-2-4-方法4","children":[]},{"level":5,"title":"3.2.2.5 方法5","slug":"_3-2-2-5-方法5","link":"#_3-2-2-5-方法5","children":[]},{"level":5,"title":"3.2.2.6 方法6","slug":"_3-2-2-6-方法6","link":"#_3-2-2-6-方法6","children":[]},{"level":5,"title":"3.2.2.7 方法7","slug":"_3-2-2-7-方法7","link":"#_3-2-2-7-方法7","children":[]},{"level":5,"title":"3.2.2.8 方法8","slug":"_3-2-2-8-方法8","link":"#_3-2-2-8-方法8","children":[]},{"level":5,"title":"3.2.2.9 方法9","slug":"_3-2-2-9-方法9","link":"#_3-2-2-9-方法9","children":[]},{"level":5,"title":"3.2.2.10 方法10","slug":"_3-2-2-10-方法10","link":"#_3-2-2-10-方法10","children":[]},{"level":5,"title":"3.2.2.11 方法11","slug":"_3-2-2-11-方法11","link":"#_3-2-2-11-方法11","children":[]},{"level":5,"title":"3.2.2.12 方法12","slug":"_3-2-2-12-方法12","link":"#_3-2-2-12-方法12","children":[]},{"level":5,"title":"3.2.2.13 方法13","slug":"_3-2-2-13-方法13","link":"#_3-2-2-13-方法13","children":[]},{"level":5,"title":"3.2.2.14 方法14","slug":"_3-2-2-14-方法14","link":"#_3-2-2-14-方法14","children":[]},{"level":5,"title":"3.2.2.15 方法15","slug":"_3-2-2-15-方法15","link":"#_3-2-2-15-方法15","children":[]},{"level":5,"title":"3.2.2.16 方法16","slug":"_3-2-2-16-方法16","link":"#_3-2-2-16-方法16","children":[]},{"level":5,"title":"3.2.2.17 方法17","slug":"_3-2-2-17-方法17","link":"#_3-2-2-17-方法17","children":[]},{"level":5,"title":"3.2.2.18 方法18","slug":"_3-2-2-18-方法18","link":"#_3-2-2-18-方法18","children":[]},{"level":5,"title":"3.2.2.19 方法19","slug":"_3-2-2-19-方法19","link":"#_3-2-2-19-方法19","children":[]},{"level":5,"title":"3.2.2.20 方法20","slug":"_3-2-2-20-方法20","link":"#_3-2-2-20-方法20","children":[]}]},{"level":4,"title":"3.2.3 Count","slug":"_3-2-3-count","link":"#_3-2-3-count","children":[{"level":5,"title":"3.2.3.1 方法1","slug":"_3-2-3-1-方法1","link":"#_3-2-3-1-方法1","children":[]},{"level":5,"title":"3.2.3.2 方法2","slug":"_3-2-3-2-方法2","link":"#_3-2-3-2-方法2","children":[]}]},{"level":4,"title":"3.2.4 LongCount","slug":"_3-2-4-longcount","link":"#_3-2-4-longcount","children":[{"level":5,"title":"3.2.4.1 方法1","slug":"_3-2-4-1-方法1","link":"#_3-2-4-1-方法1","children":[]},{"level":5,"title":"3.2.4.2 方法2","slug":"_3-2-4-2-方法2","link":"#_3-2-4-2-方法2","children":[]}]},{"level":4,"title":"3.2.5 Sum","slug":"_3-2-5-sum","link":"#_3-2-5-sum","children":[{"level":5,"title":"3.2.5.1 方法1","slug":"_3-2-5-1-方法1","link":"#_3-2-5-1-方法1","children":[]},{"level":5,"title":"3.2.5.2 方法2","slug":"_3-2-5-2-方法2","link":"#_3-2-5-2-方法2","children":[]}]},{"level":4,"title":"3.2.5.3 方法3","slug":"_3-2-5-3-方法3","link":"#_3-2-5-3-方法3","children":[{"level":5,"title":"3.2.5.4 方法4","slug":"_3-2-5-4-方法4","link":"#_3-2-5-4-方法4","children":[]},{"level":5,"title":"3.2.5.5 方法5","slug":"_3-2-5-5-方法5","link":"#_3-2-5-5-方法5","children":[]},{"level":5,"title":"3.2.5.6 方法6","slug":"_3-2-5-6-方法6","link":"#_3-2-5-6-方法6","children":[]},{"level":5,"title":"3.2.5.7 方法7","slug":"_3-2-5-7-方法7","link":"#_3-2-5-7-方法7","children":[]},{"level":5,"title":"3.2.5.8 方法8","slug":"_3-2-5-8-方法8","link":"#_3-2-5-8-方法8","children":[]},{"level":5,"title":"3.2.5.9 方法9","slug":"_3-2-5-9-方法9","link":"#_3-2-5-9-方法9","children":[]},{"level":5,"title":"3.2.5.10 方法10","slug":"_3-2-5-10-方法10","link":"#_3-2-5-10-方法10","children":[]},{"level":5,"title":"3.2.5.11 方法11","slug":"_3-2-5-11-方法11","link":"#_3-2-5-11-方法11","children":[]},{"level":5,"title":"3.2.5.12 方法12","slug":"_3-2-5-12-方法12","link":"#_3-2-5-12-方法12","children":[]},{"level":5,"title":"3.2.5.13 方法13","slug":"_3-2-5-13-方法13","link":"#_3-2-5-13-方法13","children":[]},{"level":5,"title":"3.2.5.14 方法14","slug":"_3-2-5-14-方法14","link":"#_3-2-5-14-方法14","children":[]},{"level":5,"title":"3.2.5.15 方法15","slug":"_3-2-5-15-方法15","link":"#_3-2-5-15-方法15","children":[]},{"level":5,"title":"3.2.5.16 方法16","slug":"_3-2-5-16-方法16","link":"#_3-2-5-16-方法16","children":[]},{"level":5,"title":"3.2.5.17 方法17","slug":"_3-2-5-17-方法17","link":"#_3-2-5-17-方法17","children":[]},{"level":5,"title":"3.2.5.18 方法18","slug":"_3-2-5-18-方法18","link":"#_3-2-5-18-方法18","children":[]},{"level":5,"title":"3.2.5.19 方法19","slug":"_3-2-5-19-方法19","link":"#_3-2-5-19-方法19","children":[]},{"level":5,"title":"3.2.5.20 方法20","slug":"_3-2-5-20-方法20","link":"#_3-2-5-20-方法20","children":[]}]},{"level":4,"title":"3.2.6 Max","slug":"_3-2-6-max","link":"#_3-2-6-max","children":[{"level":5,"title":"3.2.6.1 方法1","slug":"_3-2-6-1-方法1","link":"#_3-2-6-1-方法1","children":[]},{"level":5,"title":"3.2.6.2 方法2","slug":"_3-2-6-2-方法2","link":"#_3-2-6-2-方法2","children":[]},{"level":5,"title":"3.2.6.3 方法3","slug":"_3-2-6-3-方法3","link":"#_3-2-6-3-方法3","children":[]},{"level":5,"title":"3.2.6.4 方法4","slug":"_3-2-6-4-方法4","link":"#_3-2-6-4-方法4","children":[]},{"level":5,"title":"3.2.6.5 方法5","slug":"_3-2-6-5-方法5","link":"#_3-2-6-5-方法5","children":[]},{"level":5,"title":"3.2.6.6 方法6","slug":"_3-2-6-6-方法6","link":"#_3-2-6-6-方法6","children":[]},{"level":5,"title":"3.2.6.7 方法7","slug":"_3-2-6-7-方法7","link":"#_3-2-6-7-方法7","children":[]},{"level":5,"title":"3.2.6.8 方法8","slug":"_3-2-6-8-方法8","link":"#_3-2-6-8-方法8","children":[]},{"level":5,"title":"3.2.6.9 方法9","slug":"_3-2-6-9-方法9","link":"#_3-2-6-9-方法9","children":[]},{"level":5,"title":"3.2.6.10 方法10","slug":"_3-2-6-10-方法10","link":"#_3-2-6-10-方法10","children":[]},{"level":5,"title":"3.2.6.11 方法11","slug":"_3-2-6-11-方法11","link":"#_3-2-6-11-方法11","children":[]},{"level":5,"title":"3.2.6.12 方法12","slug":"_3-2-6-12-方法12","link":"#_3-2-6-12-方法12","children":[]},{"level":5,"title":"3.2.6.13 方法13","slug":"_3-2-6-13-方法13","link":"#_3-2-6-13-方法13","children":[]},{"level":5,"title":"3.2.6.14 方法14","slug":"_3-2-6-14-方法14","link":"#_3-2-6-14-方法14","children":[]},{"level":5,"title":"3.2.6.15 方法15","slug":"_3-2-6-15-方法15","link":"#_3-2-6-15-方法15","children":[]},{"level":5,"title":"3.2.6.16 方法16","slug":"_3-2-6-16-方法16","link":"#_3-2-6-16-方法16","children":[]},{"level":5,"title":"3.2.6.17 方法17","slug":"_3-2-6-17-方法17","link":"#_3-2-6-17-方法17","children":[]},{"level":5,"title":"3.2.6.18 方法18","slug":"_3-2-6-18-方法18","link":"#_3-2-6-18-方法18","children":[]},{"level":5,"title":"3.2.6.19 方法19","slug":"_3-2-6-19-方法19","link":"#_3-2-6-19-方法19","children":[]},{"level":5,"title":"3.2.6.20 方法20","slug":"_3-2-6-20-方法20","link":"#_3-2-6-20-方法20","children":[]},{"level":5,"title":"3.2.6.21 方法21","slug":"_3-2-6-21-方法21","link":"#_3-2-6-21-方法21","children":[]},{"level":5,"title":"3.2.6.22 方法22","slug":"_3-2-6-22-方法22","link":"#_3-2-6-22-方法22","children":[]},{"level":5,"title":"3.2.6.23 方法23","slug":"_3-2-6-23-方法23","link":"#_3-2-6-23-方法23","children":[]}]},{"level":4,"title":"3.2.7 MaxBy","slug":"_3-2-7-maxby","link":"#_3-2-7-maxby","children":[{"level":5,"title":"3.2.7.1 方法1","slug":"_3-2-7-1-方法1","link":"#_3-2-7-1-方法1","children":[]},{"level":5,"title":"3.2.7.2 方法2","slug":"_3-2-7-2-方法2","link":"#_3-2-7-2-方法2","children":[]}]},{"level":4,"title":"3.2.8 Min","slug":"_3-2-8-min","link":"#_3-2-8-min","children":[{"level":5,"title":"3.2.8.1 方法1","slug":"_3-2-8-1-方法1","link":"#_3-2-8-1-方法1","children":[]},{"level":5,"title":"3.2.8.2 方法2","slug":"_3-2-8-2-方法2","link":"#_3-2-8-2-方法2","children":[]},{"level":5,"title":"3.2.8.3 方法3","slug":"_3-2-8-3-方法3","link":"#_3-2-8-3-方法3","children":[]},{"level":5,"title":"3.2.8.4 方法4","slug":"_3-2-8-4-方法4","link":"#_3-2-8-4-方法4","children":[]},{"level":5,"title":"3.2.8.5 方法5","slug":"_3-2-8-5-方法5","link":"#_3-2-8-5-方法5","children":[]},{"level":5,"title":"3.2.8.6 方法6","slug":"_3-2-8-6-方法6","link":"#_3-2-8-6-方法6","children":[]},{"level":5,"title":"3.2.8.7 方法7","slug":"_3-2-8-7-方法7","link":"#_3-2-8-7-方法7","children":[]},{"level":5,"title":"3.2.8.8 方法8","slug":"_3-2-8-8-方法8","link":"#_3-2-8-8-方法8","children":[]},{"level":5,"title":"3.2.8.9 方法9","slug":"_3-2-8-9-方法9","link":"#_3-2-8-9-方法9","children":[]},{"level":5,"title":"3.2.8.10 方法10","slug":"_3-2-8-10-方法10","link":"#_3-2-8-10-方法10","children":[]},{"level":5,"title":"3.2.8.11 方法11","slug":"_3-2-8-11-方法11","link":"#_3-2-8-11-方法11","children":[]},{"level":5,"title":"3.2.8.12 方法12","slug":"_3-2-8-12-方法12","link":"#_3-2-8-12-方法12","children":[]},{"level":5,"title":"3.2.8.13 方法13","slug":"_3-2-8-13-方法13","link":"#_3-2-8-13-方法13","children":[]},{"level":5,"title":"3.2.8.14 方法14","slug":"_3-2-8-14-方法14","link":"#_3-2-8-14-方法14","children":[]},{"level":5,"title":"3.2.8.15 方法15","slug":"_3-2-8-15-方法15","link":"#_3-2-8-15-方法15","children":[]},{"level":5,"title":"3.2.8.16 方法16","slug":"_3-2-8-16-方法16","link":"#_3-2-8-16-方法16","children":[]},{"level":5,"title":"3.2.8.17 方法17","slug":"_3-2-8-17-方法17","link":"#_3-2-8-17-方法17","children":[]},{"level":5,"title":"3.2.8.18 方法18","slug":"_3-2-8-18-方法18","link":"#_3-2-8-18-方法18","children":[]},{"level":5,"title":"3.2.8.19 方法19","slug":"_3-2-8-19-方法19","link":"#_3-2-8-19-方法19","children":[]},{"level":5,"title":"3.2.8.20 方法20","slug":"_3-2-8-20-方法20","link":"#_3-2-8-20-方法20","children":[]},{"level":5,"title":"3.2.8.21 方法21","slug":"_3-2-8-21-方法21","link":"#_3-2-8-21-方法21","children":[]},{"level":5,"title":"3.2.8.22 方法22","slug":"_3-2-8-22-方法22","link":"#_3-2-8-22-方法22","children":[]},{"level":5,"title":"3.2.8.23 方法23","slug":"_3-2-8-23-方法23","link":"#_3-2-8-23-方法23","children":[]}]},{"level":4,"title":"3.2.9 MinBy","slug":"_3-2-9-minby","link":"#_3-2-9-minby","children":[{"level":5,"title":"3.2.9.1 方法1","slug":"_3-2-9-1-方法1","link":"#_3-2-9-1-方法1","children":[]},{"level":5,"title":"3.2.9.2 方法2","slug":"_3-2-9-2-方法2","link":"#_3-2-9-2-方法2","children":[]}]}]},{"level":3,"title":"3.3 量词运算符","slug":"_3-3-量词运算符","link":"#_3-3-量词运算符","children":[{"level":4,"title":"3.3.1 Any","slug":"_3-3-1-any","link":"#_3-3-1-any","children":[{"level":5,"title":"3.3.1.1 方法1","slug":"_3-3-1-1-方法1","link":"#_3-3-1-1-方法1","children":[]},{"level":5,"title":"3.3.1.2 方法2","slug":"_3-3-1-2-方法2","link":"#_3-3-1-2-方法2","children":[]}]},{"level":4,"title":"3.3.2 ALL","slug":"_3-3-2-all","link":"#_3-3-2-all","children":[{"level":5,"title":"3.3.2.1 方法1","slug":"_3-3-2-1-方法1","link":"#_3-3-2-1-方法1","children":[]}]},{"level":4,"title":"3.3.3 Contains","slug":"_3-3-3-contains","link":"#_3-3-3-contains","children":[{"level":5,"title":"3.3.3.1 方法1","slug":"_3-3-3-1-方法1","link":"#_3-3-3-1-方法1","children":[]},{"level":5,"title":"3.3.3.2 方法2","slug":"_3-3-3-2-方法2","link":"#_3-3-3-2-方法2","children":[]}]},{"level":4,"title":"3.3.4 SequenceEqual","slug":"_3-3-4-sequenceequal","link":"#_3-3-4-sequenceequal","children":[{"level":5,"title":"3.3.4.1 方法1","slug":"_3-3-4-1-方法1","link":"#_3-3-4-1-方法1","children":[]},{"level":5,"title":"3.3.4.2 方法2","slug":"_3-3-4-2-方法2","link":"#_3-3-4-2-方法2","children":[]}]},{"level":4,"title":"3.3.5 TryGetNonEnumeratedCount","slug":"_3-3-5-trygetnonenumeratedcount","link":"#_3-3-5-trygetnonenumeratedcount","children":[{"level":5,"title":"3.3.5.1 方法1","slug":"_3-3-5-1-方法1","link":"#_3-3-5-1-方法1","children":[]}]}]}]},{"level":2,"title":"4 void->序列","slug":"_4-void-序列","link":"#_4-void-序列","children":[{"level":3,"title":"4.1 Range","slug":"_4-1-range","link":"#_4-1-range","children":[{"level":4,"title":"4.1.1 方法1","slug":"_4-1-1-方法1","link":"#_4-1-1-方法1","children":[]}]},{"level":3,"title":"4.2 Repeat","slug":"_4-2-repeat","link":"#_4-2-repeat","children":[{"level":4,"title":"4.2.1 方法1","slug":"_4-2-1-方法1","link":"#_4-2-1-方法1","children":[]}]},{"level":3,"title":"4.3 Empty","slug":"_4-3-empty","link":"#_4-3-empty","children":[{"level":4,"title":"4.3.1 方法1","slug":"_4-3-1-方法1","link":"#_4-3-1-方法1","children":[]}]},{"level":3,"title":"4.4 DefaultEmpty","slug":"_4-4-defaultempty","link":"#_4-4-defaultempty","children":[]}]},{"level":2,"title":"5 参考文档","slug":"_5-参考文档","link":"#_5-参考文档","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1708528554000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":27.33,"words":8199},"filePathRelative":"dotnet/csharp/linq/yunsuanfu.md","localizedDate":"2023年10月22日","excerpt":"<h2>开篇语</h2>\\n<p>本文是对Linq用法的一次复习，里面包含的部分源码涉及删减。</p>\\n<blockquote>\\n<p>本文示例代码环境：VS2022、.Net6、C#10</p>\\n</blockquote>\\n<h2>Linq库</h2>\\n<p>https://github.com/morelinq/MoreLINQ\\nhttps://githubub.com/viceroypenguin/SuperLinq</p>\\n<h2>1 概述</h2>\\n<p>标准查询运算符分为三类</p>\\n<ul>\\n<li>输入是序列，输出是序列（序列对序列）</li>\\n<li>输入是集合，输出是单个元素或者标量值</li>\\n<li>没有输入，输出是序列（生成方法）</li>\\n</ul>","autoDesc":true}');export{_ as comp,T as data};
