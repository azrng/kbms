import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-vSdX8vi3.js";const l={},u=t(`<h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>cookie是一个保存在客户机的简单文本文件，这个文件与特定的web文档关联在一起，保存了该客户机访这个web文档时的信息，当客户机再次访问这个web文档时候这些信息可供该文档使用。</p><ul><li>会话Cookie <ul><li>不包含过期时间，会在浏览器窗口关闭时候被永久删除。</li></ul></li><li>持久Cookie <ul><li>关闭浏览器窗口后不会被删除，通常有一个到期时间，会在到期后被删除。</li></ul></li></ul><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h3><h4 id="_1-1-信息保存" tabindex="-1"><a class="header-anchor" href="#_1-1-信息保存"><span>1.1 信息保存</span></a></h4><p>登录后用户的信息存入cookie中</p><blockquote><p>保存验证结果;  用户id可以存入NameIdentifier，账号存入GivenName，姓名存入Name</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;校长&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> cliamsIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> claimsPrincipal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>cliamsIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以理解为证件用户</span>

<span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> claimsPrincipal<span class="token punctuation">,</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span>
	<span class="token punctuation">{</span>
		ExpiresUtc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-configureservices引用中间件" tabindex="-1"><a class="header-anchor" href="#_1-2-configureservices引用中间件"><span>1.2 ConfigureServices引用中间件</span></a></h4><p>引用验证中间件 string CookieScheme = &quot;Cookies&quot;;</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 配置验证</span>
 services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>CookieScheme<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieScheme<span class="token punctuation">,</span> option <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
           <span class="token comment">//登录路径：这是当用户试图访问资源但未经过身份验证时，程序将会将请求重定向到这个相对路径。</span>
           option<span class="token punctuation">.</span>LoginPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathString</span><span class="token punctuation">(</span><span class="token string">&quot;/account/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
           <span class="token comment">//禁止访问路径：当用户试图访问资源时，但未通过该资源的任何授权策略，请求将被重定向到这个相对路径</span>
           option<span class="token punctuation">.</span>AccessDeniedPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathString</span><span class="token punctuation">(</span><span class="token string">&quot;/account/denied&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注入上下文单例模式</span>
 services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpContextAccessor<span class="token punctuation">,</span> HttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-configure里面启用认证" tabindex="-1"><a class="header-anchor" href="#_1-3-configure里面启用认证"><span>1.3 Configure里面启用认证</span></a></h4><p>必须添加下面的两者</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启用身份认证：识别当前请求的用户信息,一般是通过加密的Cookies实现。</span>
app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启用身份授权：识别当前请求是否有访问指定资源的权限，一般是根据当前请求识别的用户信息,结合角色权限相关配置来判断。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-获取信息" tabindex="-1"><a class="header-anchor" href="#_1-4-获取信息"><span>1.4 获取信息</span></a></h4><p>在登录认证通过后访问时候可以通过</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>Name<span class="token punctuation">;</span><span class="token comment">//获取存入的名称信息</span>
HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-注销用户" tabindex="-1"><a class="header-anchor" href="#_1-5-注销用户"><span>1.5 注销用户</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),r={href:"https://www.cnblogs.com/OpenCoder/p/8341843.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="全局获取" tabindex="-1"><a class="header-anchor" href="#全局获取"><span>全局获取</span></a></h3><p>如果想在其他层获取当前用户信息，需要将IHttpContextAccessor注入进去，然后通过这个去获取，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserEntityService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserEntityService</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">IHttpContextAccessor</span> _accessor<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMongoCollection<span class="token punctuation">&lt;</span>UserProfile<span class="token punctuation">&gt;</span></span> _users<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token function">UserEntityService</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> accessor<span class="token punctuation">,</span> <span class="token class-name">IDefaultMongoDatabaseProvider</span> databaseProvider<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       _accessor <span class="token operator">=</span> accessor<span class="token punctuation">;</span>
       _users <span class="token operator">=</span> databaseProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCollection</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserProfile<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>CollectionNames<span class="token punctuation">.</span>UserProfiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>UserProfile<span class="token punctuation">&gt;</span></span> <span class="token function">GetCurrentUserAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token class-name"><span class="token keyword">var</span></span> rawUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_accessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>rawUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> Builders<span class="token operator">&lt;</span>UserProfile<span class="token operator">&gt;</span><span class="token punctuation">.</span>Filter<span class="token punctuation">.</span><span class="token function">Eq</span><span class="token punctuation">(</span><span class="token string">&quot;UserId&quot;</span><span class="token punctuation">,</span> rawUser<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> _users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,4),d={href:"https://mp.weixin.qq.com/s/c6UvdQsV1JiPiUw88qYwhw",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/FNWl-QFM3P_mBKptVoLSiQ",target:"_blank",rel:"noopener noreferrer"};function v(h,g){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("cookie认证 "),n("a",r,[s("https://www.cnblogs.com/OpenCoder/p/8341843.html"),e(a)])])]),k,n("p",null,[n("a",d,[s("https://mp.weixin.qq.com/s/c6UvdQsV1JiPiUw88qYwhw"),e(a)]),s(" | 小cookie，大智慧 本地地址：\\开发\\docs\\小cookie，大智慧.png")]),n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/FNWl-QFM3P_mBKptVoLSiQ"),e(a)]),s(" | 浅议.NET 6 Cookie滑动过期和JWT混合认证、授权")])])}const w=o(l,[["render",v],["__file","cookieshenfenrenzheng.html.vue"]]),y=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/cookieshenfenrenzheng.html","title":"Cookie身份认证","lang":"zh-CN","frontmatter":{"title":"Cookie身份认证","lang":"zh-CN","date":"2022-04-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"cookieshenfenrenzheng","slug":"vwwwrw","docsId":"30606637","description":"介绍 cookie是一个保存在客户机的简单文本文件，这个文件与特定的web文档关联在一起，保存了该客户机访这个web文档时的信息，当客户机再次访问这个web文档时候这些信息可供该文档使用。 会话Cookie 不包含过期时间，会在浏览器窗口关闭时候被永久删除。 持久Cookie 关闭浏览器窗口后不会被删除，通常有一个到期时间，会在到期后被删除。 操作 1...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/cookieshenfenrenzheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Cookie身份认证"}],["meta",{"property":"og:description","content":"介绍 cookie是一个保存在客户机的简单文本文件，这个文件与特定的web文档关联在一起，保存了该客户机访这个web文档时的信息，当客户机再次访问这个web文档时候这些信息可供该文档使用。 会话Cookie 不包含过期时间，会在浏览器窗口关闭时候被永久删除。 持久Cookie 关闭浏览器窗口后不会被删除，通常有一个到期时间，会在到期后被删除。 操作 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cookie身份认证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[{"level":4,"title":"1.1 信息保存","slug":"_1-1-信息保存","link":"#_1-1-信息保存","children":[]},{"level":4,"title":"1.2 ConfigureServices引用中间件","slug":"_1-2-configureservices引用中间件","link":"#_1-2-configureservices引用中间件","children":[]},{"level":4,"title":"1.3 Configure里面启用认证","slug":"_1-3-configure里面启用认证","link":"#_1-3-configure里面启用认证","children":[]},{"level":4,"title":"1.4 获取信息","slug":"_1-4-获取信息","link":"#_1-4-获取信息","children":[]},{"level":4,"title":"1.5 注销用户","slug":"_1-5-注销用户","link":"#_1-5-注销用户","children":[]}]},{"level":3,"title":"全局获取","slug":"全局获取","link":"#全局获取","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.29,"words":688},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/cookieshenfenrenzheng.md","localizedDate":"2022年4月27日","excerpt":"<h3>介绍</h3>\\n<p>cookie是一个保存在客户机的简单文本文件，这个文件与特定的web文档关联在一起，保存了该客户机访这个web文档时的信息，当客户机再次访问这个web文档时候这些信息可供该文档使用。</p>\\n<ul>\\n<li>会话Cookie\\n<ul>\\n<li>不包含过期时间，会在浏览器窗口关闭时候被永久删除。</li>\\n</ul>\\n</li>\\n<li>持久Cookie\\n<ul>\\n<li>关闭浏览器窗口后不会被删除，通常有一个到期时间，会在到期后被删除。</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>操作</h3>\\n<h4>1.1 信息保存</h4>\\n<p>登录后用户的信息存入cookie中</p>","autoDesc":true}');export{w as comp,y as data};
