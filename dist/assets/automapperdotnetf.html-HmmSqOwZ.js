import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-vSdX8vi3.js";const p={},e=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>配置应仅发生一次每个应用程序域。这意味着放置配置代码的最佳位置是在应用程序启动中，例如用于 ASP.NET 应用程序的 Global.asax 文件。通常，配置引导器类位于自己的类中，此引导器类从启动方法中调用。引导器类应构建一个对象来配置类型映射。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="initialize" tabindex="-1"><a class="header-anchor" href="#initialize"><span>Initialize</span></a></h3><p>Initialize方法是Mapper的初始化，里面可以写上CreateMap表达式,具体是谁和谁进行匹配。在之后就可以直接进行一个获取值的过程了，非常的简单。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mapper的初始化，里面写上createmap表达式</span>
    <span class="token class-name">Source</span> source <span class="token operator">=</span> Mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="映射前后的操作" tabindex="-1"><a class="header-anchor" href="#映射前后的操作"><span>映射前后的操作</span></a></h2><p>偶尔有的时候你可能需要在映射的过程中，你需要执行一些逻辑，这是非常常见的事情，所以AutoMapper给我们提供了BeforeMap和AfterMap两个函数。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>            Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">BeforeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>InfoUrl <span class="token operator">=</span> <span class="token string">&quot;https://&quot;</span> <span class="token operator">+</span> src<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">BeforeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span> <span class="token operator">+</span> src<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AfterMap</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;真棒&quot;</span> <span class="token operator">+</span> src<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//测试BeforeMap和AfterMap的效果</span>
            Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">BeforeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>InfoUrl <span class="token operator">=</span> <span class="token string">&quot;https://&quot;</span> <span class="token operator">+</span> src<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">BeforeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>name <span class="token operator">=</span> dest<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span> <span class="token operator">+</span> des<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">AfterMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;年&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件映射" tabindex="-1"><a class="header-anchor" href="#条件映射"><span>条件映射</span></a></h2><p>在条件映射中，通过ForMember函数，参数是一个委托类型Fun&lt;&gt;,其里面呢也是可以进行嵌套的，但一般来说一个就够用了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">,</span>opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>InfoUrl <span class="token operator">==</span> <span class="token string">&quot;www.cnblogs.com/zaranet1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>InfoUrl <span class="token operator">==</span> <span class="token string">&quot;www.cnblogs.com/ZaraNet/p/100003112.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Source</span> source <span class="token operator">=</span> Mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="公共类" tabindex="-1"><a class="header-anchor" href="#公共类"><span>公共类</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  类型映射</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">MapTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
            Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Source</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> a<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>
            <span class="token keyword">return</span> Mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","automapperdotnetf.html.vue"]]),d=JSON.parse('{"path":"/dotnet/commonNuget/duixiangyingshe/automapperdotnetf.html","title":"AutoMapperdotNetF","lang":"zh-CN","frontmatter":{"title":"AutoMapperdotNetF","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"automapperdotnetf","slug":"hmg3uo","docsId":"45650826","description":"介绍 配置应仅发生一次每个应用程序域。这意味着放置配置代码的最佳位置是在应用程序启动中，例如用于 ASP.NET 应用程序的 Global.asax 文件。通常，配置引导器类位于自己的类中，此引导器类从启动方法中调用。引导器类应构建一个对象来配置类型映射。 操作 Initialize Initialize方法是Mapper的初始化，里面可以写上Crea...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/duixiangyingshe/automapperdotnetf.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"AutoMapperdotNetF"}],["meta",{"property":"og:description","content":"介绍 配置应仅发生一次每个应用程序域。这意味着放置配置代码的最佳位置是在应用程序启动中，例如用于 ASP.NET 应用程序的 Global.asax 文件。通常，配置引导器类位于自己的类中，此引导器类从启动方法中调用。引导器类应构建一个对象来配置类型映射。 操作 Initialize Initialize方法是Mapper的初始化，里面可以写上Crea..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AutoMapperdotNetF\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"Initialize","slug":"initialize","link":"#initialize","children":[]}]},{"level":2,"title":"映射前后的操作","slug":"映射前后的操作","link":"#映射前后的操作","children":[]},{"level":2,"title":"条件映射","slug":"条件映射","link":"#条件映射","children":[]},{"level":2,"title":"公共类","slug":"公共类","link":"#公共类","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.56,"words":468},"filePathRelative":"dotnet/commonNuget/duixiangyingshe/automapperdotnetf.md","localizedDate":"2023年10月18日","excerpt":"<h2>介绍</h2>\\n<p>配置应仅发生一次每个应用程序域。这意味着放置配置代码的最佳位置是在应用程序启动中，例如用于 ASP.NET 应用程序的 Global.asax 文件。通常，配置引导器类位于自己的类中，此引导器类从启动方法中调用。引导器类应构建一个对象来配置类型映射。</p>\\n<h2>操作</h2>\\n<h3>Initialize</h3>\\n<p>Initialize方法是Mapper的初始化，里面可以写上CreateMap表达式,具体是谁和谁进行匹配。在之后就可以直接进行一个获取值的过程了，非常的简单。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>    Mapper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Initialize</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> x<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">CreateMap</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>Destination<span class=\\"token punctuation\\">,</span> Source<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//mapper的初始化，里面写上createmap表达式</span>\\n    <span class=\\"token class-name\\">Source</span> source <span class=\\"token operator\\">=</span> Mapper<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">Map</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>Source<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>des<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">.</span>InfoUrl<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
