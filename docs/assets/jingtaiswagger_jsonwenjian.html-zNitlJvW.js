import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as p,a,d as o,e as c,b as i}from"./app-DMmdIwn0.js";const r={},l=i(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>ASP.NET Core Web API默认集成了Swashbuckle，可以在运行时显示Swagger UI： 而Swagger UI实际上是解析的动态生成的swagger.json：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger/v1/swagger.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WebApplication3 v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，部署ASP.NET Core Web API完成后，swagger.json的内容就不会改变了，完全可以用静态文件替代。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>创建ASP.NET Core Web API项目，然后安装Swashbuckle CLI</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet tool install SwashBuckle<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生成静态文件" tabindex="-1"><a class="header-anchor" href="#生成静态文件"><span>生成静态文件</span></a></h3><p>引用Nuget包Swashbuckle.AspNetCore.Annotations，并在项目下创建wwwroot\\swagger\\v1目录，然后编写生成后事件命令行：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet swagger tofile <span class="token operator">--</span>output <span class="token punctuation">.</span><span class="token operator">/</span>wwwroot<span class="token operator">/</span>swagger<span class="token operator">/</span>v1<span class="token operator">/</span>swagger<span class="token punctuation">.</span>json $<span class="token punctuation">(</span>OutputPath<span class="token punctuation">)</span>$<span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">.</span>dll v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，每次编译项目，就会在目录下生成swagger.json静态文件。</p><h3 id="使用静态文件" tabindex="-1"><a class="header-anchor" href="#使用静态文件"><span>使用静态文件</span></a></h3><p>修改Startup.cs：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//app.UseSwagger();</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger/v1/swagger.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WebApplication3 v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们注释掉了app.UseSwagger()，这会移除SwaggerMiddleware，不会再在运行时生成swagger.json。 运行程序，访问Swagger UI，和以前没有任何区别。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>相对于运行时生成swagger.json，静态文件性能更好，而且方便提供给第三方。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,18),u={href:"https://mp.weixin.qq.com/s/Na2W93TcQMyDvHNMLQS8zQ",target:"_blank",rel:"noopener noreferrer"};function g(d,h){const n=e("ExternalLinkIcon");return t(),p("div",null,[l,a("p",null,[a("a",u,[o("https://mp.weixin.qq.com/s/Na2W93TcQMyDvHNMLQS8zQ"),c(n)])])])}const m=s(r,[["render",g],["__file","jingtaiswagger_jsonwenjian.html.vue"]]),v=JSON.parse('{"path":"/dotnet/api/swagger/tazhan/jingtaiswagger_jsonwenjian.html","title":"静态swagger.json文件","lang":"zh-CN","frontmatter":{"title":"静态swagger.json文件","lang":"zh-CN","date":"2023-09-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jingtaiswagger_jsonwenjian","slug":"yv22w1","docsId":"65259175","description":"说明 ASP.NET Core Web API默认集成了Swashbuckle，可以在运行时显示Swagger UI： 而Swagger UI实际上是解析的动态生成的swagger.json： 其实，部署ASP.NET Core Web API完成后，swagger.json的内容就不会改变了，完全可以用静态文件替代。 实现 创建ASP.NET Cor...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/swagger/tazhan/jingtaiswagger_jsonwenjian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"静态swagger.json文件"}],["meta",{"property":"og:description","content":"说明 ASP.NET Core Web API默认集成了Swashbuckle，可以在运行时显示Swagger UI： 而Swagger UI实际上是解析的动态生成的swagger.json： 其实，部署ASP.NET Core Web API完成后，swagger.json的内容就不会改变了，完全可以用静态文件替代。 实现 创建ASP.NET Cor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"静态swagger.json文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"生成静态文件","slug":"生成静态文件","link":"#生成静态文件","children":[]},{"level":3,"title":"使用静态文件","slug":"使用静态文件","link":"#使用静态文件","children":[]}]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"dotnet/api/swagger/tazhan/jingtaiswagger_jsonwenjian.md","localizedDate":"2023年9月17日","excerpt":"<h2>说明</h2>\\n<p>ASP.NET Core Web API默认集成了Swashbuckle，可以在运行时显示Swagger UI：\\n而Swagger UI实际上是解析的动态生成的swagger.json：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseSwagger</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\napp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseSwaggerUI</span><span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">=&gt;</span> c<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SwaggerEndpoint</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/swagger/v1/swagger.json\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"WebApplication3 v1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,v as data};
