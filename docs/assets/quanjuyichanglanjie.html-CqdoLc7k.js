import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,e as a,f as c,d as r}from"./app-CBxp4zeL.js";const i={},l=r(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>不想将那些数据报错的异常直接返回给前端，但是弄全局异常拦截封装处理的话，错误有不具体，所以？</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="sqlserver" tabindex="-1"><a class="header-anchor" href="#sqlserver"><span>sqlserver</span></a></h3><p>检查 SQL Server 返回的错误号。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbUpdateException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sqlException <span class="token operator">=</span> ex<span class="token punctuation">.</span>InnerException <span class="token keyword">as</span> <span class="token class-name">SqlException</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlException <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sqlException<span class="token punctuation">.</span>Number <span class="token operator">==</span> <span class="token number">2627</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//重复值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entityframework-exceptions" tabindex="-1"><a class="header-anchor" href="#entityframework-exceptions"><span>EntityFramework.Exceptions</span></a></h3><p>安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>EntityFrameworkCore<span class="token punctuation">.</span>Exceptions<span class="token punctuation">.</span>SqlServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新编写</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UniqueConstraintException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//重复值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不再需要处理特定于数据库的异常字符串和错误号，代码更简洁，更易于理解。 此外，EntityFramework.Exceptions 还提供了其他异常，例如CannotInsertNullException、MaxLengthExceededException等。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,13),d={href:"https://mp.weixin.qq.com/s/FbLDwvZMm7p6Fbz3HvomBA",target:"_blank",rel:"noopener noreferrer"};function u(m,k){const e=t("ExternalLinkIcon");return p(),o("div",null,[l,n("p",null,[n("a",d,[a("https://mp.weixin.qq.com/s/FbLDwvZMm7p6Fbz3HvomBA"),c(e)]),a(" | 如何优雅地处理 EF Core 异常")])])}const g=s(i,[["render",u],["__file","quanjuyichanglanjie.html.vue"]]),x=JSON.parse('{"path":"/orm/efcore/quanjuyichanglanjie.html","title":"异常拦截","lang":"zh-CN","frontmatter":{"title":"异常拦截","lang":"zh-CN","date":"2022-05-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"quanjuyichanglanjie","slug":"gb3n3t","docsId":"71202734","description":"目的 不想将那些数据报错的异常直接返回给前端，但是弄全局异常拦截封装处理的话，错误有不具体，所以？ 操作 sqlserver 检查 SQL Server 返回的错误号。 EntityFramework.Exceptions 安装nuget包 重新编写 我们不再需要处理特定于数据库的异常字符串和错误号，代码更简洁，更易于理解。 此外，EntityFram...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/quanjuyichanglanjie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"异常拦截"}],["meta",{"property":"og:description","content":"目的 不想将那些数据报错的异常直接返回给前端，但是弄全局异常拦截封装处理的话，错误有不具体，所以？ 操作 sqlserver 检查 SQL Server 返回的错误号。 EntityFramework.Exceptions 安装nuget包 重新编写 我们不再需要处理特定于数据库的异常字符串和错误号，代码更简洁，更易于理解。 此外，EntityFram..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-04T16:22:49.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-04T16:22:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常拦截\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-04T16:22:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"sqlserver","slug":"sqlserver","link":"#sqlserver","children":[]},{"level":3,"title":"EntityFramework.Exceptions","slug":"entityframework-exceptions","link":"#entityframework-exceptions","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1696436569000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":0.63,"words":189},"filePathRelative":"orm/efcore/quanjuyichanglanjie.md","localizedDate":"2022年5月18日","excerpt":"<h2>目的</h2>\\n<p>不想将那些数据报错的异常直接返回给前端，但是弄全局异常拦截封装处理的话，错误有不具体，所以？</p>\\n<h2>操作</h2>\\n<h3>sqlserver</h3>\\n<p>检查 SQL Server 返回的错误号。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DbUpdateException</span> ex<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sqlException <span class=\\"token operator\\">=</span> ex<span class=\\"token punctuation\\">.</span>InnerException <span class=\\"token keyword\\">as</span> <span class=\\"token class-name\\">SqlException</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sqlException <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> sqlException<span class=\\"token punctuation\\">.</span>Number <span class=\\"token operator\\">==</span> <span class=\\"token number\\">2627</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//重复值</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,x as data};
