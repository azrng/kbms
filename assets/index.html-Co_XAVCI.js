import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-SmdjEsew.js";const t={};function l(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。</p><p>举个例：比如开发一个Web项目，需要有数据库、Redis、MongoDB、配置中心等等，如果将其进行容器化，可以有两种选择，第一种就是把所有的服务依赖和应用程序全部构建为一个镜像，然后以一个容器运行，即这个容器里面包含了Web应用程序、数据库、Redis、MongoDB、配置中心等；另一种方式就各自服务单独启动为一个容器服务，比较独立，一般可以一个一个的启动容器，然后通过网络连接起来就行；显然第二种方式是小伙伴们更多的选择，如果能配上一个批量操作那就完美了，而Docker Compose就是来干这个事的。</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Docker-Compose 是用于<strong>定义和运行多容器 Docker</strong> 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。比如我们发布一个系统可能包含多个服务，服务与服务之间网络需要互通，那此时我们需要一个容器一个容器去启动，如果使用Docker-Compose即可定义一个描述文件docker-compose.yaml完成所有服务的发布， 并且实现容器间互通（单台物理机）。类似于批量命令，通过一组命令可以<strong>批量构建容器，批量启动容器，批量删除</strong>。</p><blockquote><p>yaml文件以key： value方式在指定配置信息，多个配置信息以换行+缩进的方式来区分</p></blockquote><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><p>运行命令教程：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/compose/</a></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成镜像不启动容器，已经存在镜像就覆盖</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果镜像不存在，构建镜像并启动容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果添加该--build选项，即时不需要时，也会强制构建镜像。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 跳过镜像构建的过程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --no-build</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #如果镜像不是预先构建的，就会失败</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 提供一个项目名称，以便对容器进行标识和管理，项目名称必须是唯一的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defalut</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose.yaml</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 服务名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看由docker-compose管理的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 开启|关闭|重启已经存在的由docker-compose维护的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">restart</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭并删除容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看日志</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>创建docker-compose.yaml文件，然后添加代码</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3.4&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  frontend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pizzafrontend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">frontend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      dockerfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> backendUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//backend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;5902:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    depends_on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> backend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  backend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pizzabackend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">backend</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      dockerfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;5000:80&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此代码执行几项操作：</p><ul><li>首先，它会创建前端网站，将其命名为 pizzafrontend。 该代码指示 Docker 生成该网站，并指向在“前端”文件夹中找到的 Dockerfile。 然后代码会为网站设置环境变量：backendUrl=<a href="http://backend" target="_blank" rel="noopener noreferrer">http://backend</a>。 最后，此代码会打开一个端口，并声明它依赖于后端服务。</li><li>接下来将创建后端服务。 它被命名为 pizzabackend。 它是通过你在上一个练习中创建的同一 Dockerfile 构建的。 最后一个命令指定要打开的端口。</li></ul><p>若要生成容器映像，请打开命令提示符，并导航至 docker-compose.yml 文件所在的目录，然后运行以下命令：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">compose</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着，若要启动网站和 Web API，请运行以下命令：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">compose</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> up</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>经过一些输出后，就生成了一个容器。</p><h2 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h2><h3 id="dockercomposemaker" tabindex="-1"><a class="header-anchor" href="#dockercomposemaker"><span>DockerComposeMaker</span></a></h3><p><strong>DockerComposeMaker (DCM)</strong> 是一款专为家庭服务器环境设计的自托管解决方案，致力于简化和加速容器化应用的部署流程。通过智能化的配置生成引擎，用户能够快速构建符合生产标准的 <code>docker-compose.yml</code> 文件。系统集成了丰富的自托管应用预配置模板，有效消除传统部署中冗长的文档查阅和配置调试环节。</p><p>在线网址：<a href="https://compose.ajnart.dev/" target="_blank" rel="noopener noreferrer">https://compose.ajnart.dev/</a></p><p>项目仓库：<a href="https://github.com/ajnart/dcm" target="_blank" rel="noopener noreferrer">https://github.com/ajnart/dcm</a></p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>配置文件详细解释：<br><a href="https://www.cnblogs.com/ray-mmss/p/10868754.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ray-mmss/p/10868754.html</a><br><a href="https://www.cnblogs.com/minseo/p/11548177.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/minseo/p/11548177.html</a><br> 常用脚本：<a href="https://github.com/dotnet-easy/docker-compose-hub/tree/main/docker-compose" target="_blank" rel="noopener noreferrer">https://github.com/dotnet-easy/docker-compose-hub/tree/main/docker-compose</a></p>`,27)]))}const r=i(t,[["render",l]]),o=JSON.parse('{"path":"/cloud/container/dockerCompose/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"composebianpai","slug":"owy3it","docsId":"29455025","description":"前言 Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。 举个例：比如开发一个Web项目，需要...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-11T01:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/container/dockerCompose/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"前言 Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。 举个例：比如开发一个Web项目，需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T01:38:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-11T01:38:40.000Z"}]]},"git":{"createdTime":1695541854000,"updatedTime":1744335520000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":6}]},"readingTime":{"minutes":4.09,"words":1227},"filePathRelative":"cloud/container/dockerCompose/readme.md","excerpt":"<h2>前言</h2>\\n<p>Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。</p>\\n<p>举个例：比如开发一个Web项目，需要有数据库、Redis、MongoDB、配置中心等等，如果将其进行容器化，可以有两种选择，第一种就是把所有的服务依赖和应用程序全部构建为一个镜像，然后以一个容器运行，即这个容器里面包含了Web应用程序、数据库、Redis、MongoDB、配置中心等；另一种方式就各自服务单独启动为一个容器服务，比较独立，一般可以一个一个的启动容器，然后通过网络连接起来就行；显然第二种方式是小伙伴们更多的选择，如果能配上一个批量操作那就完美了，而Docker Compose就是来干这个事的。</p>","autoDesc":true}');export{r as comp,o as data};
