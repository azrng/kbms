import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,d as s,e as c,b as l}from"./app-DMmdIwn0.js";const i={},u=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>.NET Core管道是一种服务器端处理程序请求的方法。它以指定的顺序将Kestrel（ASP.NET Core的应用服务器）中的请求发送到服务器的中间件，每个中间件都可以选择性地处理请求或将其传递到下一个中间件。例如，一个中间件可以负责认证用户，另一个中间件可以填充查询字符串，而另一个中间件可以处理所有请求并返回响应。这使得.NET Core应用程序可以对来自用户的每个请求做出不同的反应，而不需要繁琐的代码。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>管道是一种概念，这个概念下面有多种实现方案。</p><p>方案一 ASP.NET Core中间件 方案二 ASP.NET Core过滤器 方案三 借助MediatR提供的Behaviors概念来实现，通过继承自IPipelineBehavior可以实现对请求的处理和响应。Request(请求)在管道中传递，依次经过管道中每个处理，实现管道模式后可以实现对请求和响应的处理。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">,</span> <span class="token class-name">RequestHandlerDelegate<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;FirstPipelineBehavior执行中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;FirstPipelineBehavior执行完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和MiddleWare类似，调用next()可以将请求向下传递。 控制器层</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span> <span class="token class-name">DemoQuery</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequest<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoQueryHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestHandler<span class="token punctuation">&lt;</span>DemoQuery<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">DemoQuery</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;DemoQueryHandler执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> request<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在Startup.cs中注册管道</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Startup</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">FirstPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SecondPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ThirdPipelineBehavior<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问API可以看到，<strong>管道可以在IRequestHandler执行之前和之后执行代码，并且处理顺序和注册顺序相同</strong></p><h2 id="业务层管道" tabindex="-1"><a class="header-anchor" href="#业务层管道"><span>业务层管道</span></a></h2><p>业务层实现管道目的</p><ul><li><strong>与顶级框架解耦</strong>，不能保证应用程序代码始终运行在ASP.NET Core下，如果将业务迁移到WPF，记录访问日志这类放在管道中的功能还是需要实现</li><li><strong>同时支持不同来源请求</strong>，请求可能来自于Web API，也可能来自于Windows Service定时调用，但业务层处理逻辑应保持一样</li></ul><p>因此，ASP.NET Core框架应该只用于接收输入和返回输出，而在业务层实现管道模式。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,16),r={href:"https://mp.weixin.qq.com/s/EMNddSYFRsdgkgU1IWbR8g",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("公众号My IO："),n("a",r,[s("https://mp.weixin.qq.com/s/EMNddSYFRsdgkgU1IWbR8g"),c(a)])])])}const g=e(i,[["render",k],["__file","guandaomoshi.html.vue"]]),y=JSON.parse('{"path":"/dotnet/base/guandaomoshi.html","title":"管道模式","lang":"zh-CN","frontmatter":{"title":"管道模式","lang":"zh-CN","date":"2023-04-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guandaomoshi","slug":"bq68qf","docsId":"56085646","description":"概述 .NET Core管道是一种服务器端处理程序请求的方法。它以指定的顺序将Kestrel（ASP.NET Core的应用服务器）中的请求发送到服务器的中间件，每个中间件都可以选择性地处理请求或将其传递到下一个中间件。例如，一个中间件可以负责认证用户，另一个中间件可以填充查询字符串，而另一个中间件可以处理所有请求并返回响应。这使得.NET Core应...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/guandaomoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"管道模式"}],["meta",{"property":"og:description","content":"概述 .NET Core管道是一种服务器端处理程序请求的方法。它以指定的顺序将Kestrel（ASP.NET Core的应用服务器）中的请求发送到服务器的中间件，每个中间件都可以选择性地处理请求或将其传递到下一个中间件。例如，一个中间件可以负责认证用户，另一个中间件可以填充查询字符串，而另一个中间件可以处理所有请求并返回响应。这使得.NET Core应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"管道模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"业务层管道","slug":"业务层管道","link":"#业务层管道","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"dotnet/base/guandaomoshi.md","localizedDate":"2023年4月2日","excerpt":"<h2>概述</h2>\\n<p>.NET Core管道是一种服务器端处理程序请求的方法。它以指定的顺序将Kestrel（ASP.NET Core的应用服务器）中的请求发送到服务器的中间件，每个中间件都可以选择性地处理请求或将其传递到下一个中间件。例如，一个中间件可以负责认证用户，另一个中间件可以填充查询字符串，而另一个中间件可以处理所有请求并返回响应。这使得.NET Core应用程序可以对来自用户的每个请求做出不同的反应，而不需要繁琐的代码。</p>\\n<h2>实现</h2>\\n<p>管道是一种概念，这个概念下面有多种实现方案。</p>\\n<p>方案一\\nASP.NET Core中间件\\n方案二\\nASP.NET Core过滤器\\n方案三\\n借助MediatR提供的Behaviors概念来实现，通过继承自IPipelineBehavior可以实现对请求的处理和响应。Request(请求)在管道中传递，依次经过管道中每个处理，实现管道模式后可以实现对请求和响应的处理。</p>","autoDesc":true}');export{g as comp,y as data};
