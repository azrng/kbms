import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-CBxp4zeL.js";const t={},p=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在不用修改之前代码的基础上，可以动态在某一动作之前加上一些操作，动态在某一个动作之后做一些操作</p><ul><li>引用包Autofac.Extras.DynamicProxy</li><li>在服务上标记[Intercept(typeof(CustomAutofacAop))]</li><li>注册支持Aop的扩展类 <ul><li>containerBuilder.RegisterType(typeof(CustomAutofacAop));</li></ul></li></ul><h2 id="通过接口实现aop" tabindex="-1"><a class="header-anchor" href="#通过接口实现aop"><span>通过接口实现Aop</span></a></h2><h3 id="创建接口" tabindex="-1"><a class="header-anchor" href="#创建接口"><span>创建接口</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserServiceA</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserServiceA</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="autofac注册" tabindex="-1"><a class="header-anchor" href="#autofac注册"><span>Autofac注册</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//AOP</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册拦截器</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">InterceptedBy</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyInterceptor</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">EnableInterfaceInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启拦截器</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写Aop</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInterceptor</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Intercept</span><span class="token punctuation">(</span><span class="token class-name">IInvocation</span> invocation<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Intercept 开始 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">invocation<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            invocation<span class="token punctuation">.</span><span class="token function">Proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行这句话就是去执行具体的实例的这个方法</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Intercept 结束 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">invocation<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务的接口上标记</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> 	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Intercept</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAutofacAop</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserServiceA</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果就是通过该接口访问都会走aop类</p></blockquote><h2 id="通过类实现aop" tabindex="-1"><a class="header-anchor" href="#通过类实现aop"><span>通过类实现AOP</span></a></h2><h3 id="创建接口-1" tabindex="-1"><a class="header-anchor" href="#创建接口-1"><span>创建接口</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserServiceA</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserServiceA</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="autofac注入" tabindex="-1"><a class="header-anchor" href="#autofac注入"><span>Autofac注入</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span>  containerBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 支持</span><span class="token return-type class-name">AOP</span>
    containerBuilder<span class="token punctuation">.</span><span class="token function">RegisterType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAutofacAop</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    containerBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserServiceB<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserServiceB<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">EnableClassInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写Aop</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAutofacAop</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInterceptor</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Intercept</span><span class="token punctuation">(</span><span class="token class-name">IInvocation</span> invocation<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行前&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            invocation<span class="token punctuation">.</span><span class="token function">Proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行这句话就是去执行具体的实例的这个方法</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;方法执行后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务的接口上标记</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Intercept</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAutofacAop</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserServiceA</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：类上标记Aop，里面的方法需要定义为虚方法</p></blockquote><p>结果就是通过该接口访问都会走aop类</p>`,24),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","zhichiaop.html.vue"]]),k=JSON.parse('{"path":"/dotnet/base/yilaizhuru/autofac/zhichiaop.html","title":"支持AOP","lang":"zh-CN","frontmatter":{"title":"支持AOP","lang":"zh-CN","date":"2021-06-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"zhichiaop","slug":"nu8pi0","docsId":"31436010","description":"介绍 在不用修改之前代码的基础上，可以动态在某一动作之前加上一些操作，动态在某一个动作之后做一些操作 引用包Autofac.Extras.DynamicProxy 在服务上标记[Intercept(typeof(CustomAutofacAop))] 注册支持Aop的扩展类 containerBuilder.RegisterType(typeof(Cu...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/autofac/zhichiaop.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"支持AOP"}],["meta",{"property":"og:description","content":"介绍 在不用修改之前代码的基础上，可以动态在某一动作之前加上一些操作，动态在某一个动作之后做一些操作 引用包Autofac.Extras.DynamicProxy 在服务上标记[Intercept(typeof(CustomAutofacAop))] 注册支持Aop的扩展类 containerBuilder.RegisterType(typeof(Cu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"支持AOP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"通过接口实现Aop","slug":"通过接口实现aop","link":"#通过接口实现aop","children":[{"level":3,"title":"创建接口","slug":"创建接口","link":"#创建接口","children":[]},{"level":3,"title":"Autofac注册","slug":"autofac注册","link":"#autofac注册","children":[]}]},{"level":2,"title":"通过类实现AOP","slug":"通过类实现aop","link":"#通过类实现aop","children":[{"level":3,"title":"创建接口","slug":"创建接口-1","link":"#创建接口-1","children":[]},{"level":3,"title":"Autofac注入","slug":"autofac注入","link":"#autofac注入","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"dotnet/base/yilaizhuru/autofac/zhichiaop.md","localizedDate":"2021年6月19日","excerpt":"<h2>介绍</h2>\\n<p>在不用修改之前代码的基础上，可以动态在某一动作之前加上一些操作，动态在某一个动作之后做一些操作</p>\\n<ul>\\n<li>引用包Autofac.Extras.DynamicProxy</li>\\n<li>在服务上标记[Intercept(typeof(CustomAutofacAop))]</li>\\n<li>注册支持Aop的扩展类\\n<ul>\\n<li>containerBuilder.RegisterType(typeof(CustomAutofacAop));</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>通过接口实现Aop</h2>\\n<h3>创建接口</h3>","autoDesc":true}');export{d as comp,k as data};
