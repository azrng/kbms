import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,b as n,e,f as a,d as l}from"./app-CBxp4zeL.js";const r={},c=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u=n("p",null,"OpenTelemetry 是一个由 CNCF（Cloud Native Computing Foundation）托管的开源项目，旨在为观察性（Observability）提供一套全面的工具，包括度量（Metrics）、日志（Logs）和追踪（Traces）。它的目标是为所有类型的遥测数据提供一种标准化的方法。OpenTelemetry 提供了一套 API 和 SDK，使得开发者可以在他们的应用程序中生成和收集遥测数据。此外，OpenTelemetry 还提供了一套收集器（Collector），可以接收、处理和导出遥测数据，以便于后续的分析和可视化。",-1),d=n("br",null,null,-1),m={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://opentelemetry.opendocs.io/docs/what-is-opentelemetry/",target:"_blank",rel:"noopener noreferrer"},v=l(`<h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h2><p>检测应用程序生成遥测数据，数据包括</p><ul><li>跟踪(Traces)：表示分布式系统的请求流，显示服务之间的时间和关系。</li><li>指标(Metrics)：系统行为随时间变化的数值测量(例如，请求技术、错误率、内存使用情况)</li><li>日志(Logs)：具有丰富的上下文信息事件的文本记录，结构化日志。</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>OpenTelemetry 提供库和 SDK，用于将代码（检测）添加到 .NET 应用程序中。这些检测会自动捕获我们感兴趣的跟踪、指标和日志。</p><h3 id="基础获取统计的数据" tabindex="-1"><a class="header-anchor" href="#基础获取统计的数据"><span>基础获取统计的数据</span></a></h3><p>在.Net8中可以简单配置获取统计的数据，新建一个WebApi的程序，然后引用下面的包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.OpenApi&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;8.0.0-rc.1.23421.29&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.4.0&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;OpenTelemetry.Exporter.Prometheus.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.6.0-rc.1&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;OpenTelemetry.Extensions.Hosting&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.6.0&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以注册服务来配置我们监控的信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">OpenTelemetry<span class="token punctuation">.</span>Metrics</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add services to the container.</span>
<span class="token comment">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置监控</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithMetrics</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span><span class="token function">AddPrometheusExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        x<span class="token punctuation">.</span><span class="token function">AddMeter</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.AspNetCore.Hosting&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Microsoft.AspNetCore.Server.Kestrel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">AddView</span><span class="token punctuation">(</span><span class="token string">&quot;request-duration&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExplicitBucketHistogramConfiguration</span>
        <span class="token punctuation">{</span>
            Boundaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">,</span> <span class="token number">0.05</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就使用我们注入的内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">MapPrometheusScrapingEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候我们启用服务，并访问地址地址：<code>ip+metrics </code>就可以看到我们监控的信息，如：<code>http://localhost:5010/metrics</code></p><p>可以尝试进行展示好看的仪表盘：https://github.com/dotnet/aspire/tree/main/src/Grafana</p><h3 id="汇总介绍" tabindex="-1"><a class="header-anchor" href="#汇总介绍"><span>汇总介绍</span></a></h3><p>我们将安装以下 NuGet 包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Automatic tracing, metrics</span>
Install-Package OpenTelemetry.Extensions.Hosting

<span class="token comment"># Telemetry data exporter</span>
Install-Package OpenTelemetry.Exporter.OpenTelemetryProtocol

<span class="token comment"># Instrumentation packages</span>
Install-Package OpenTelemetry.Instrumentation.Http
Install-Package OpenTelemetry.Instrumentation.AspNetCore
Install-Package OpenTelemetry.Instrumentation.EntityFrameworkCore
Install-Package OpenTelemetry.Instrumentation.StackExchangeRedis
Install-Package Npgsql.OpenTelemetry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装这些 NuGet 包后，就可以配置一些服务了。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>services
    .AddOpenTelemetry()
    .ConfigureResource(resource =&gt; resource.AddService(serviceName))
    .WithTracing(tracing =&gt;
    {
        tracing
            .AddAspNetCoreInstrumentation()
            .AddHttpClientInstrumentation()
            .AddEntityFrameworkCoreInstrumentation()
            .AddRedisInstrumentation()
            .AddNpgsql();

        tracing.AddOtlpExporter();
    });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>AddAspNetCoreInstrumentation</code> - 这将启用 ASP.NET Core 检测。</li><li><code>AddHttpClientInstrumentation</code> - 这样可以检测传出请求。 \`HttpClient\`\`</li><li><code>AddEntityFrameworkCoreInstrumentation</code> - 这将启用 EF Core 检测。</li><li><code>AddRedisInstrumentation</code> - 这将启用 Redis 检测。</li><li><code>AddNpgsql</code> - 这将启用 PostgreSQL 检测。</li></ul><p>配置完所有这些检测后，我们的应用程序将在运行时开始收集大量有价值的跟踪。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>在 .NET 中使用 OpenTelemetry 进行分布式跟踪简介：https://www.milanjovanovic.tech/blog/introduction-to-distributed-tracing-with-opentelemetry-in-dotnet?utm_source=newsletter&amp;utm_medium=email&amp;utm_campaign=tnw86</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,24),g={href:"https://cat.aiursoft.cn/post/2023/3/19/troubleshooting-production-issues-get-to-know-opentelemetry",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/321ZU2OdO2drFFFIN7Oavw",target:"_blank",rel:"noopener noreferrer"},h={href:"https://martinjt.me/2023/07/14/i-finally-found-a-use-for-logging-in-net/",target:"_blank",rel:"noopener noreferrer"};function y(f,T){const s=p("ExternalLinkIcon");return o(),i("div",null,[c,u,n("p",null,[e("OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。 OpenTelemetry 要解决的是对可观测性的大一统，它提供了一组 API 和 SDK 来标准化遥测数据的采集和传输，OpenTelemetry 并不想对所有的组件都进行重写，而是最大程度复用目前业界在各大领域常用工具，通过提供了一个安全，厂商中立的能用协议、组件，这样就可以按照需要形成 pipeline 将数据发往不同的后端。"),d,e(" 官网："),n("a",m,[e("https://opentelemetry.io/"),a(s)])]),n("p",null,[e("中文文档："),n("a",k,[e("https://opentelemetry.opendocs.io/docs/what-is-opentelemetry/"),a(s)])]),v,n("p",null,[e("微服务生产环境故障难调试？OpenTelemetry 了解一下？："),n("a",g,[e("https://cat.aiursoft.cn/post/2023/3/19/troubleshooting-production-issues-get-to-know-opentelemetry"),a(s)]),e(" 在.net8中使用OpenTelemetry来metric："),n("a",b,[e("https://mp.weixin.qq.com/s/321ZU2OdO2drFFFIN7Oavw"),a(s)]),e(" 我终于在 .NET 中找到了登录的用途！"),n("a",h,[e("https://martinjt.me/2023/07/14/i-finally-found-a-use-for-logging-in-net/"),a(s)]),e("在错误配置对 OpenTelemetry 的跟踪时获取错误日志的技术。由于导出器在后台运行，即使发生错误，也不会出现在表中，因此事件由EventListener获取。")])])}const C=t(r,[["render",y],["__file","opentelemetry.html.vue"]]),A=JSON.parse('{"path":"/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html","title":"OpenTelemetry说明","lang":"zh-CN","frontmatter":{"title":"OpenTelemetry说明","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["OpenTelemetry"],"description":"概述 OpenTelemetry 是一个由 CNCF（Cloud Native Computing Foundation）托管的开源项目，旨在为观察性（Observability）提供一套全面的工具，包括度量（Metrics）、日志（Logs）和追踪（Traces）。它的目标是为所有类型的遥测数据提供一种标准化的方法。OpenTelemetry 提供了...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"OpenTelemetry说明"}],["meta",{"property":"og:description","content":"概述 OpenTelemetry 是一个由 CNCF（Cloud Native Computing Foundation）托管的开源项目，旨在为观察性（Observability）提供一套全面的工具，包括度量（Metrics）、日志（Logs）和追踪（Traces）。它的目标是为所有类型的遥测数据提供一种标准化的方法。OpenTelemetry 提供了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T15:11:04.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"OpenTelemetry"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T15:11:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenTelemetry说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-15T15:11:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"功能","slug":"功能","link":"#功能","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础获取统计的数据","slug":"基础获取统计的数据","link":"#基础获取统计的数据","children":[]},{"level":3,"title":"汇总介绍","slug":"汇总介绍","link":"#汇总介绍","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1715785864000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":4}]},"readingTime":{"minutes":3.41,"words":1024},"filePathRelative":"middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.md","localizedDate":"2023年9月29日","excerpt":"<h2>概述</h2>\\n<p>OpenTelemetry 是一个由 CNCF（Cloud Native Computing Foundation）托管的开源项目，旨在为观察性（Observability）提供一套全面的工具，包括度量（Metrics）、日志（Logs）和追踪（Traces）。它的目标是为所有类型的遥测数据提供一种标准化的方法。OpenTelemetry 提供了一套 API 和 SDK，使得开发者可以在他们的应用程序中生成和收集遥测数据。此外，OpenTelemetry 还提供了一套收集器（Collector），可以接收、处理和导出遥测数据，以便于后续的分析和可视化。</p>\\n<p>OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。\\nOpenTelemetry 要解决的是对可观测性的大一统，它提供了一组 API 和 SDK 来标准化遥测数据的采集和传输，OpenTelemetry 并不想对所有的组件都进行重写，而是最大程度复用目前业界在各大领域常用工具，通过提供了一个安全，厂商中立的能用协议、组件，这样就可以按照需要形成 pipeline 将数据发往不同的后端。<br>\\n官网：<a href=\\"https://opentelemetry.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://opentelemetry.io/</a></p>","autoDesc":true}');export{C as comp,A as data};
