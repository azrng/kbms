import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as n,o as a}from"./app-OPlDaE8U.js";const o="/kbms/common/604c66ba07912945c318c2f2.png",i="/kbms/common/image-20240217202727838.png",p="/kbms/common/c595d31883011e90.png",l={};function c(s,e){return a(),r("div",null,e[0]||(e[0]=[n('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>DDD无关系统的大小，而是教我们如何做好软件的。</p></div><p>DDD(Domain-Deiven design)是一种设计思想，是一个应用于微服务架构的方法论，倾向于让所有人站到同一个角度看问题。最接地气的说：<strong>DDD应该是面向对象的进阶</strong></p><p>诞生于2004年，兴起于2014年(微服务元年)，自从微服务兴起之后，DDD的概念才越来越多被提起来。不过DDD之于微服务，无外乎“DDD的界限上下文可以用于指导微服务的划分”，使用单体架构也不影响我们划分界限上下文(模块)</p><p>从业务角度来处理=&gt;业务需求驱动设计。</p><p>学习DDD的正确姿势：从理论到实践，再从实践到理论。</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>接触到需求的第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的分离。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当面对一个新的业务需求时候，首先想到如何去设计数据库的表结构这是不对的，应该关心的事如何进行业务建模(编写更符合需求的模型实体，当然也可能因为数据库的支持问题会进行妥协部分内容)，而不是数据库建模，数据库只是一个实现细节，而不是软件建模的主体</p></div><p>DDD解决了客户端复杂性问题：当你的系统需要web 移动端 小程序使用DDD，通过不同的DTO应用层+业务逻辑实现。<br> DDD核心就是以业务需求作为驱动，通过传统的三层比较，会发现传统的三层，面对客户端需求增多时候，需要不断修改业务逻辑BLL，这样子会造成系统稳定性被破坏，违背系统开发的开闭原则，所以在BLL层之上扩展出来应用层，应对不同的UI客户端，逻辑层并没有发生概念。</p><h2 id="架构风格" tabindex="-1"><a class="header-anchor" href="#架构风格"><span>架构风格</span></a></h2><p>DDD不要求采用特定的架构风格，你可以采用三层架构也可以采用事件驱动架构，在实现领域驱动设计中，作者比较推崇事件驱动和六边形架构。真要说应该采用哪种架构，那么应该是<strong>以领域模型为中心的软件架构</strong></p><ul><li>六边形架构也被称为端口和适配器(Ports and Adapters)，在六边形架构中已经不存在分层的概念，所有的组件都是平等的，这得益于软件抽象的好处，各个组件之间交互完全通过接口的方式完成，而不是具体的实现细节。六边形架构的系统中存在着很多的端口和适配器的组合，端口表示的事一个软件系统的输入和输出，而适配器则是对每个端口的访问方式，比如要对数据持久化，此时的数据库系统就可以看做是一个端口，而访问数据库的驱动就是相应于是数据库的适配器。</li><li>整洁架构</li><li><a href="https://blog.cleancoder.com/uncle-bob/2011/09/30/Screaming-Architecture.html" target="_blank" rel="noopener noreferrer">尖叫架构</a>：同一个业务的模块放在一起，然后里面包含了控制器、应用服务、领域服务、领域模型等</li></ul><p>共同点：架构中心都有一个核心的存在，这个核心就是领域模型，聚合根就是存在于领域模型中</p><p>六边形架构(洋葱架构):<a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/" target="_blank" rel="noopener noreferrer">https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/</a></p><p>整洁架构:<a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener noreferrer">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></p><h2 id="层次划分" tabindex="-1"><a class="header-anchor" href="#层次划分"><span>层次划分</span></a></h2><p>在网络上看到一个优化后的DDD四层架构，可以从这个图中看到，从上到下分别是：用户接口层、应用层、领域层和基础层。</p><figure><img src="'+o+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>与传统的三层架构不同，DDD四层架构的重点在于引入 一个领域层(<a href="https://www.processon.com/view/link/604c66ba07912945c318c2f2" target="_blank" rel="noopener noreferrer">参考图片</a>)</p><ul><li>Presentation Layer：表现层，展示用户界面，负责显示和接受输入；</li><li>Application Layer(Service)：应用层，不包含任何领域逻辑，主要用来对任务进行协调，是构建表现层和领域层的桥梁。</li><li>Domain Layer(Domain)：领域层，简单地说就是业务所涉及的领域对象（包括实体、值对象）、领域服务等。该层就是所谓的领域模型了，领域驱动设计提倡是富(充血)领域模型，富(充血)领域模型指的是：尽量将业务逻辑放在归属于它的领域对象中，当单个实体不能实现某些功能的时候，领域服务才出马，组合聚合内多个实体来实现复杂的业务逻辑。而之前的三层架构中的领域模型都是贫血领域模型，因为在三层中的领域模型只包含业务属性，而不包含任何业务逻辑。</li><li>Infrastructure Layer：基础层，提供整个应用的基础服务，例如配置文件处理、缓存处理、事务处理等；面向业务（包含仓储的实现)</li></ul><p>从[EdisonTalk ]公众号中借鉴一个图来展示传统的三层架构与四层架构的对应关系</p><figure><img src="'+i+'" alt="image-20240217202727838" tabindex="0" loading="lazy"><figcaption>image-20240217202727838</figcaption></figure><ul><li><strong>用户接口层</strong>：调用应用层完成具体用户请求。包含：controller，远程调用服务等</li><li><strong>应用层App</strong>：尽量简单，不包含业务规则，而只为了下一层中的领域对象做协调任务，分配工作，重点对领域层做编排完成复杂业务场景。包含：AppService，消息处理等</li><li><strong>领域层Domain</strong>：负责表达业务概念和业务逻辑，领域层是系统的核心。包含：模型，值对象，域服务，事件</li><li><strong>基础层</strong>：对所有上层提供技术能力，包括：数据操作，发送消息，消费消息，缓存等</li><li><strong>调用关系</strong>：用户接口层-&gt;应用层-&gt;领域层-&gt;基础层</li><li><strong>依赖关系</strong>：用户接口层-&gt;应用层-&gt;领域层-&gt;基础层</li></ul><h3 id="应用服务application" tabindex="-1"><a class="header-anchor" href="#应用服务application"><span>应用服务Application</span></a></h3><p>需要遵循下面的原则</p><ul><li>业务方法和业务用例一一对应，即一个业务用例对应ApplicationService上的一个业务方法</li><li>业务方法与事务一一对应，也就是每个业务方法均构成一个IE独立的事务边界，整个方法处于一个事务中</li><li>本身不应该包含业务逻辑，业务逻辑应该放在领域模型中实现，更准确的说应该放在聚合根中实现，而ApplicationSevice应该只是用来协调调用领域层模型中的方法，因此该层应该是很薄的一层</li><li>与UI或者说和通信协议无关，该层的定位不是软件系统门面，而是领域模型的门面，这也就意味着ApplicationService不应该处理如UI交互或者通信协议之类的技术细节。控制器层用来负责和通讯协议以及客户端的直接交互，这样子的处理让ApplicationService具有普遍性。</li></ul><p>ApplicationService作为领域模型的调用方，所以领域模型的实现细节对其来说应该是一个黑盒子，因此ApplicationService不应该引用领域模型中的对象，另外ApplicationService接受请求的数据仅仅用于本次业务请求本身，所以在能够满足业务需求的条件下应该尽量的简单。因此ApplicationService层通过处理一下比较原始的数据类型，在需要调用领域模型方法的时候，才封装为领域模型的对象。</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>图片来自：<a href="https://www.cnblogs.com/davenkin/p/ddd-coding-practices.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/davenkin/p/ddd-coding-practices.html</a></p></blockquote><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>教程：<a href="https://www.cnblogs.com/laozhang-is-phi/p/9806335.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/laozhang-is-phi/p/9806335.html</a></p><p>DDD领域驱动设计Net：<a href="https://www.cnblogs.com/landeanfen/p/4816706.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/landeanfen/p/4816706.html</a><br> 精华文章：<br><a href="https://blog.csdn.net/GitChat/article/details/81091470" target="_blank" rel="noopener noreferrer">领域驱动设计，为何又死灰复燃了？ </a><br><a href="https://www.cnblogs.com/farb/p/ABPTheory.html" target="_blank" rel="noopener noreferrer">ABP框架理论研究总结(典藏版)</a><br><a href="https://www.cnblogs.com/netfocus/p/5548025.html" target="_blank" rel="noopener noreferrer">浅谈我对DDD领域驱动设计的理解</a><br><a href="https://www.cnblogs.com/xishuai/p/iddd-cqrs-and-eda.html" target="_blank" rel="noopener noreferrer">IDDD 实现领域驱动设计－CQRS（命令查询职责分离）和 EDA（事件驱动架构）</a><br><a href="https://www.jianshu.com/p/9a3f8d514fcd" target="_blank" rel="noopener noreferrer">领域驱动设计的实践 – CQRS &amp; Event Sourcing</a><br><a href="https://docs.microsoft.com/zh-cn/previous-versions/msp-n-p/jj554200(v%3dpandp.10)" target="_blank" rel="noopener noreferrer">CQRS Journey</a><br><a href="https://www.cnblogs.com/xishuai/p/ddd_repository.html" target="_blank" rel="noopener noreferrer">Repository 仓储，你的归宿究竟在哪</a></p><p><a href="https://mp.weixin.qq.com/s/3fZQJwQUAH1gNS-a2iqJxw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3fZQJwQUAH1gNS-a2iqJxw</a> | DDD 中限界上下文与通用语言的作用<br> 本地地址：\\开发\\docs\\DDD 中限界上下文与通用语言的作用.png</p><p><a href="https://zq99299.github.io/note-book2/ddd/00/" target="_blank" rel="noopener noreferrer">https://zq99299.github.io/note-book2/ddd/00/</a> | 开篇 | 学好了 DDD，你能做什么？ | NOTE-BOOK2</p><p><a href="https://mp.weixin.qq.com/s/y6H8UG-g829o0V0EBeEwrw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/y6H8UG-g829o0V0EBeEwrw</a> | 迄今为止最完整的DDD实践</p><p><a href="https://mp.weixin.qq.com/s/TzJy6J51q9C7MX5oie95Bw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/TzJy6J51q9C7MX5oie95Bw</a> | 聊聊 <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 6 整洁架构开发模板</p><p><a href="https://mp.weixin.qq.com/s/ublJ-_Hp0tuCPus0dQ_TBA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ublJ-_Hp0tuCPus0dQ_TBA</a> | <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core 6.0 的整洁架构</p><p>模块化整体式架构中的内部 API 与公共 API：<a href="https://www.milanjovanovic.tech/blog/internal-vs-public-apis-in-modular-monoliths" target="_blank" rel="noopener noreferrer">https://www.milanjovanovic.tech/blog/internal-vs-public-apis-in-modular-monoliths</a></p><h3 id="系列教程" tabindex="-1"><a class="header-anchor" href="#系列教程"><span>系列教程</span></a></h3><p>ddd大白话入门：<a href="https://www.cnblogs.com/davenkin/p/ddd-introduction.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/davenkin/p/ddd-introduction.html</a></p><p><a href="https://www.cnblogs.com/davenkin/p/road-to-ddd.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/davenkin/p/road-to-ddd.html</a> | 领域驱动设计(DDD)实现之路 - 无知者云 - 博客园</p>',42)]))}const g=t(l,[["render",c]]),d=JSON.parse('{"path":"/softwareDesign/domainDrivenDesign/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-08-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["ddd"],"description":"描述 提示 DDD无关系统的大小，而是教我们如何做好软件的。 DDD(Domain-Deiven design)是一种设计思想，是一个应用于微服务架构的方法论，倾向于让所有人站到同一个角度看问题。最接地气的说：DDD应该是面向对象的进阶 诞生于2004年，兴起于2014年(微服务元年)，自从微服务兴起之后，DDD的概念才越来越多被提起来。不过DDD之于...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/604c66ba07912945c318c2f2.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/image-20240217202727838.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/c595d31883011e90.png\\"],\\"datePublished\\":\\"2023-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-23T13:23:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/domainDrivenDesign/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"描述 提示 DDD无关系统的大小，而是教我们如何做好软件的。 DDD(Domain-Deiven design)是一种设计思想，是一个应用于微服务架构的方法论，倾向于让所有人站到同一个角度看问题。最接地气的说：DDD应该是面向对象的进阶 诞生于2004年，兴起于2014年(微服务元年)，自从微服务兴起之后，DDD的概念才越来越多被提起来。不过DDD之于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/604c66ba07912945c318c2f2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T13:23:10.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"ddd"}],["meta",{"property":"article:published_time","content":"2023-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T13:23:10.000Z"}]]},"git":{"createdTime":1693926838000,"updatedTime":1734960190000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":10},{"name":"zhangyunpeng","username":"","email":"zhang.yunpeng@synyi.com","commits":3}]},"readingTime":{"minutes":7.6,"words":2279},"filePathRelative":"softwareDesign/domainDrivenDesign/readme.md","excerpt":"<h2>描述</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>DDD无关系统的大小，而是教我们如何做好软件的。</p>\\n</div>\\n<p>DDD(Domain-Deiven design)是一种设计思想，是一个应用于微服务架构的方法论，倾向于让所有人站到同一个角度看问题。最接地气的说：<strong>DDD应该是面向对象的进阶</strong></p>\\n<p>诞生于2004年，兴起于2014年(微服务元年)，自从微服务兴起之后，DDD的概念才越来越多被提起来。不过DDD之于微服务，无外乎“DDD的界限上下文可以用于指导微服务的划分”，使用单体架构也不影响我们划分界限上下文(模块)</p>","autoDesc":true}');export{g as comp,d as data};
