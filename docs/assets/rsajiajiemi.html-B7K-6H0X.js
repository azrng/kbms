import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as l}from"./app-Bfb6-vFH.js";const i={},u=l(`<h2 id="密钥区别" tabindex="-1"><a class="header-anchor" href="#密钥区别"><span>密钥区别</span></a></h2><p>RSA生成的密钥可以以不同的格式进行表示，常见的包括字符串（PEM/Base64）和XML。</p><ol><li>字符串格式（PEM/Base64）: 这种格式通常用于在文本文件中存储和传输密钥。它将密钥转换为可读的字符串形式，经过Base64编码，并采用一定的标记和格式进行表示，例如以&quot;-----BEGIN RSA PRIVATE KEY-----&quot;开始和&quot;-----END RSA PRIVATE KEY-----&quot;结束。</li><li>XML格式: 这种格式使用XML标记语言表示密钥。公钥和私钥分别包含在<code>&lt;RSAKeyValue&gt;</code>元素中，并使用子元素来表示其中的参数，如模数（Modulus）、指数（Exponent）等。</li></ol><p>两种格式之间的主要区别在于表示方式和可读性。XML格式相对于字符串格式更易于解析和处理，因为它具有结构化的特点，但字符串格式在某些情况下更灵活，可以直接在文本中嵌入或传输。选择使用哪种格式取决于具体的应用需求和所使用的密钥库或工具的支持情况。</p><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><h3 id="创建方法" tabindex="-1"><a class="header-anchor" href="#创建方法"><span>创建方法</span></a></h3><p>表示两种不同的方式来创建 RSA 密钥对的对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> rsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSACryptoServiceProvider</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> rsa <span class="token operator">=</span> RSA<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>new RSACryptoServiceProvider(2048): 这是使用传统的 RSACryptoServiceProvider 类创建 RSA 对象的方式。在指定密钥大小为 2048 位时，它会生成一个具有指定位数的 RSA 密钥对。这是.NET Framework 中的传统方法，在 .NET Core 中也支持。</li><li>RSA.Create(): 这是使用 RSA 抽象类的工厂方法来创建 RSA 对象的方式。这是.NET Core 引入的新方法，它提供了更好的可扩展性和灵活性。使用 RSA.Create() 可以根据当前环境选择最合适的 RSA 实现。这意味着，根据运行时环境和操作系统，可能会使用不同的 RSA 实现，如 Windows CNG (Cryptographic Next Generation) 或 OpenSSL。通过 RSA.Create() 创建的 RSA 对象可以提供更好的跨平台兼容性，并且更易于迁移到其他环境。</li></ol><p>总结来说，new RSACryptoServiceProvider(2048) 是传统的方式，在.NET Framework 和.NET Core 中都可以使用。而 RSA.Create()是.NET Core 推荐的方式，提供更好的可扩展性和跨平台兼容性。</p><h3 id="exportrsaprivatekey" tabindex="-1"><a class="header-anchor" href="#exportrsaprivatekey"><span>ExportRSAPrivateKey</span></a></h3><p>PKCS#1 和 PKCS#8 都是用于描述 RSA 密钥的标准格式，但它们之间存在一些差异：</p><ul><li>PKCS#1 格式是较早的标准，它以 ASN.1 的 DER 编码格式保存密钥，并包含了附加的 RSA 私钥成分。</li><li>PKCS#8 格式是一个通用的私钥信息语法标准，它同样使用 ASN.1 的 DER 编码格式保存密钥，但将 RSA 私钥的成分包装在一个 PrivateKeyInfo 结构中。</li></ul><p>在 .NET Core 中，ExportRSAPrivateKey 方法返回的结果是 PKCS#1 格式的 RSA 私钥，这意味着导出的私钥被包装在 PrivateKeyInfo 结构中。 PCKS8的密钥可以转换为PKCS1的密钥</p><h2 id="rsaforjava" tabindex="-1"><a class="header-anchor" href="#rsaforjava"><span>RSAForJava</span></a></h2><p>使用私钥加密、公钥解密，并且和java加解密互通 需要先安装BouncyCastle包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Asn1</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Asn1<span class="token punctuation">.</span>Pkcs</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Asn1<span class="token punctuation">.</span>X509</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Encodings</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Engines</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Generators</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Crypto<span class="token punctuation">.</span>Parameters</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Pkcs</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Security</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>X509</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp1</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RSAForJava</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// KEY 结构体</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">RSAKEY</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 公钥</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PublicKey
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">;</span>
            <span class="token keyword">set</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 私钥</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PrivateKey
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span><span class="token punctuation">;</span>
            <span class="token keyword">set</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">RSAKEY</span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//RSA密钥对的构造器</span>
        <span class="token class-name"><span class="token keyword">var</span></span> keyGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RsaKeyPairGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//RSA密钥构造器的参数</span>
        <span class="token class-name">RsaKeyGenerationParameters</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RsaKeyGenerationParameters</span><span class="token punctuation">(</span>
            Org<span class="token punctuation">.</span>BouncyCastle<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token number">1024</span><span class="token punctuation">,</span>   <span class="token comment">//密钥长度</span>
            <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//用参数初始化密钥构造器</span>
        keyGenerator<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//产生密钥对</span>
        <span class="token class-name">AsymmetricCipherKeyPair</span> keyPair <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">GenerateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取公钥和密钥</span>
        <span class="token class-name">AsymmetricKeyParameter</span> publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span>Public<span class="token punctuation">;</span>
        <span class="token class-name">AsymmetricKeyParameter</span> privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span>Private<span class="token punctuation">;</span>

        <span class="token class-name">SubjectPublicKeyInfo</span> subjectPublicKeyInfo <span class="token operator">=</span> SubjectPublicKeyInfoFactory<span class="token punctuation">.</span><span class="token function">CreateSubjectPublicKeyInfo</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PrivateKeyInfo</span> privateKeyInfo <span class="token operator">=</span> PrivateKeyInfoFactory<span class="token punctuation">.</span><span class="token function">CreatePrivateKeyInfo</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Asn1Object</span> asn1ObjectPublic <span class="token operator">=</span> subjectPublicKeyInfo<span class="token punctuation">.</span><span class="token function">ToAsn1Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> publicInfoByte <span class="token operator">=</span> asn1ObjectPublic<span class="token punctuation">.</span><span class="token function">GetEncoded</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Asn1Object</span> asn1ObjectPrivate <span class="token operator">=</span> privateKeyInfo<span class="token punctuation">.</span><span class="token function">ToAsn1Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> privateInfoByte <span class="token operator">=</span> asn1ObjectPrivate<span class="token punctuation">.</span><span class="token function">GetEncoded</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RSAKEY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            PublicKey <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>publicInfoByte<span class="token punctuation">)</span><span class="token punctuation">,</span>
            PrivateKey <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>privateInfoByte<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">AsymmetricKeyParameter</span> <span class="token function">GetPublicKeyParameter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> publicInfoByte <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Asn1Object</span> pubKeyObj <span class="token operator">=</span> Asn1Object<span class="token punctuation">.</span><span class="token function">FromByteArray</span><span class="token punctuation">(</span>publicInfoByte<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里也可以从流中读取，从本地导入</span>
        <span class="token class-name">AsymmetricKeyParameter</span> pubKey <span class="token operator">=</span> PublicKeyFactory<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>publicInfoByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pubKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">AsymmetricKeyParameter</span> <span class="token function">GetPrivateKeyParameter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> privateInfoByte <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Asn1Object priKeyObj = Asn1Object.FromByteArray(privateInfoByte);//这里也可以从流中读取，从本地导入</span>
        <span class="token comment">// PrivateKeyInfo privateKeyInfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(privateKey);</span>
        <span class="token class-name">AsymmetricKeyParameter</span> priKey <span class="token operator">=</span> PrivateKeyFactory<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>privateInfoByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> priKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 私钥加密</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">EncryptByPrivateKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//非对称加密算法，加解密用</span>
        <span class="token class-name">IAsymmetricBlockCipher</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pkcs1Encoding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RsaEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//加密</span>

        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            engine<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">GetPrivateKeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> byteData <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ResultData <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">ProcessBlock</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byteData<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>ResultData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//Console.WriteLine(&quot;密文（base64编码）:&quot; + Convert.ToBase64String(testData) + Environment.NewLine);</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 公钥解密</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">DecryptByPublicKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//非对称加密算法，加解密用</span>
        <span class="token class-name">IAsymmetricBlockCipher</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pkcs1Encoding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RsaEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//解密</span>

        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            engine<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">GetPublicKeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> byteData <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ResultData <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">ProcessBlock</span><span class="token punctuation">(</span>byteData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> byteData<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ResultData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ex<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),k={href:"https://www.cnblogs.com/runliuv/p/17531440.html",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("参考资料："),n("a",k,[s("https://www.cnblogs.com/runliuv/p/17531440.html"),c(a)])])])}const b=t(i,[["render",r],["__file","rsajiajiemi.html.vue"]]),g=JSON.parse('{"path":"/dotnet/commonMethod/encrypt/rsajiajiemi.html","title":"RSA加解密","lang":"zh-CN","frontmatter":{"title":"RSA加解密","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"rsajiajiemi","slug":"gnc1oq7s7u80fupg","docsId":"142536573","description":"密钥区别 RSA生成的密钥可以以不同的格式进行表示，常见的包括字符串（PEM/Base64）和XML。 字符串格式（PEM/Base64）: 这种格式通常用于在文本文件中存储和传输密钥。它将密钥转换为可读的字符串形式，经过Base64编码，并采用一定的标记和格式进行表示，例如以\\"-----BEGIN RSA PRIVATE KEY-----\\"开始和\\"-...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonMethod/encrypt/rsajiajiemi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"RSA加解密"}],["meta",{"property":"og:description","content":"密钥区别 RSA生成的密钥可以以不同的格式进行表示，常见的包括字符串（PEM/Base64）和XML。 字符串格式（PEM/Base64）: 这种格式通常用于在文本文件中存储和传输密钥。它将密钥转换为可读的字符串形式，经过Base64编码，并采用一定的标记和格式进行表示，例如以\\"-----BEGIN RSA PRIVATE KEY-----\\"开始和\\"-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T13:49:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-27T13:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RSA加解密\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-27T13:49:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"密钥区别","slug":"密钥区别","link":"#密钥区别","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"创建方法","slug":"创建方法","link":"#创建方法","children":[]},{"level":3,"title":"ExportRSAPrivateKey","slug":"exportrsaprivatekey","link":"#exportrsaprivatekey","children":[]}]},{"level":2,"title":"RSAForJava","slug":"rsaforjava","link":"#rsaforjava","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698414586000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.09,"words":1227},"filePathRelative":"dotnet/commonMethod/encrypt/rsajiajiemi.md","localizedDate":"2023年10月22日","excerpt":"<h2>密钥区别</h2>\\n<p>RSA生成的密钥可以以不同的格式进行表示，常见的包括字符串（PEM/Base64）和XML。</p>\\n<ol>\\n<li>字符串格式（PEM/Base64）: 这种格式通常用于在文本文件中存储和传输密钥。它将密钥转换为可读的字符串形式，经过Base64编码，并采用一定的标记和格式进行表示，例如以\\"-----BEGIN RSA PRIVATE KEY-----\\"开始和\\"-----END RSA PRIVATE KEY-----\\"结束。</li>\\n<li>XML格式: 这种格式使用XML标记语言表示密钥。公钥和私钥分别包含在<code>&lt;RSAKeyValue&gt;</code>元素中，并使用子元素来表示其中的参数，如模数（Modulus）、指数（Exponent）等。</li>\\n</ol>","autoDesc":true}');export{b as comp,g as data};
