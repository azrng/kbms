import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-vSdX8vi3.js";const i={},u=l(`<h2 id="迁移和生成数据库确认" tabindex="-1"><a class="header-anchor" href="#迁移和生成数据库确认"><span>迁移和生成数据库确认</span></a></h2><p>如果你本机代码连接了多个数据库，就增加了一层迁移生成数据库前的确认操作，防止执行到不该执行的数据库</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 迁移前的确认</span>
<span class="token doc-comment comment">/// 该文件逻辑会在命令上生成迁移文件或者更新数据库前的时候被触发</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span>https://dev.to/vanenshi/how-i-saved-my-production-database-with-one-simple-console-message-4fjm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationDbContextFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDesignTimeDbContextFactory<span class="token punctuation">&lt;</span>OpenDbContext<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">OpenDbContext</span> <span class="token function">CreateDbContext</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token string">&quot;Host=localhost;Username=postgres;Password=123456;Database=azrng&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dbBuild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DbContextOptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dbBuild<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ... Some code to generate dbContextBuilder</span>
        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span>dbBuild<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// This is where magic happends</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pendingMigrations <span class="token operator">=</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">GetPendingMigrations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;*********************************************\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;该命令将使用以下详细信息应用迁移&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;连接字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Yellow<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ResetColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;迁移:\\n\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Yellow<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\t&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">:</span> pendingMigrations<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ResetColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;*********************************************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;你确认吗? (Y/N)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> userInput <span class="token operator">=</span> <span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInput <span class="token keyword">is</span> <span class="token string">&quot;Y&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> context<span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;失败!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Environment<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实体类注释生成列备注信息" tabindex="-1"><a class="header-anchor" href="#实体类注释生成列备注信息"><span>实体类注释生成列备注信息</span></a></h2><p>实现效果：将实体类上面的注释映射到数据库的列备注信息上面。 大致思路：将项目生成xml文件，然后在迁移的时候，通过反射来读取到实体类信息，并去xml中解析。 示例获取实体类备注信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Xml</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Repository<span class="token punctuation">.</span>Database</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
    <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetEntityComment</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> typeName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> fieldName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> baseTypeNames <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> <span class="token string">&quot;Repository.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XmlDocument</span> xml <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            xml<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XmlNodeList</span> memebers <span class="token operator">=</span> xml<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">&quot;/doc/members/member&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>

            <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fieldList <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> matchKey <span class="token operator">=</span> <span class="token string">&quot;T:&quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">;</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> m <span class="token keyword">in</span> memebers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token keyword">is</span> <span class="token class-name">XmlNode</span> node<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> node<span class="token punctuation">.</span>Attributes<span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>

                        <span class="token class-name"><span class="token keyword">var</span></span> summary <span class="token operator">=</span> node<span class="token punctuation">.</span>InnerText<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> matchKey<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            fieldList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> summary<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> fieldList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> matchKey<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">??</span> typeName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LastOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> m <span class="token keyword">in</span> memebers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token keyword">is</span> <span class="token class-name">XmlNode</span> node<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> node<span class="token punctuation">.</span>Attributes<span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>

                        <span class="token class-name"><span class="token keyword">var</span></span> summary <span class="token operator">=</span> node<span class="token punctuation">.</span>InnerText<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token class-name"><span class="token keyword">var</span></span> matchKey <span class="token operator">=</span> <span class="token string">&quot;P:&quot;</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span>matchKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>matchKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            fieldList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                            fieldList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> summary<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>baseTypeNames <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> baseTypeName <span class="token keyword">in</span> baseTypeNames<span class="token punctuation">)</span>
                            <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>baseTypeName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                <span class="token punctuation">{</span>
                                    matchKey <span class="token operator">=</span> <span class="token string">&quot;P:&quot;</span> <span class="token operator">+</span> baseTypeName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span>matchKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                    <span class="token punctuation">{</span>
                                        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>matchKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        fieldList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> summary<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> fieldList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> fieldName<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value <span class="token operator">??</span> fieldName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对 DatabaseContext.OnModelCreating 方法稍加改造即可就能实现我们本次的目的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token keyword">in</span> modelBuilder<span class="token punctuation">.</span>Model<span class="token punctuation">.</span><span class="token function">GetEntityTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        modelBuilder<span class="token punctuation">.</span><span class="token function">Entity</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> builder <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>

<span class="token preprocessor property">#<span class="token directive keyword">if</span> DEBUG</span>
            <span class="token comment">//设置表的备注</span>
            builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">HasComment</span><span class="token punctuation">(</span><span class="token function">GetEntityComment</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> baseTypeNames <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> baseType <span class="token operator">=</span> entity<span class="token punctuation">.</span>ClrType<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>baseType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                baseTypeNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>baseType<span class="token punctuation">.</span>FullName<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                baseType <span class="token operator">=</span> baseType<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> property <span class="token keyword">in</span> entity<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>

<span class="token preprocessor property">#<span class="token directive keyword">if</span> DEBUG</span>
                <span class="token comment">//设置字段的备注</span>
                property<span class="token punctuation">.</span><span class="token function">SetComment</span><span class="token punctuation">(</span><span class="token function">GetEntityComment</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> property<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> baseTypeNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>

                <span class="token comment">//设置字段的默认值 </span>
                <span class="token class-name"><span class="token keyword">var</span></span> defaultValueAttribute <span class="token operator">=</span> property<span class="token punctuation">.</span>PropertyInfo<span class="token punctuation">?.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultValueAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultValueAttribute <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    property<span class="token punctuation">.</span><span class="token function">SetDefaultValue</span><span class="token punctuation">(</span>defaultValueAttribute<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k={href:"https://www.cnblogs.com/berkerdong/p/16985681.html",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("然后迁移的时候就会发现已经带有列备注信息了。 参考文档："),n("a",k,[s("https://www.cnblogs.com/berkerdong/p/16985681.html"),c(a)])])])}const y=t(i,[["render",r],["__file","qianyijiyinjiqiao.html.vue"]]),g=JSON.parse('{"path":"/orm/efcore/qianyishuju/qianyijiyinjiqiao.html","title":"迁移奇淫技巧","lang":"zh-CN","frontmatter":{"title":"迁移奇淫技巧","lang":"zh-CN","date":"2023-06-21T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"qianyijiyinjiqiao","slug":"yorp4b8s8vi7mnne","docsId":"110687859","description":"迁移和生成数据库确认 如果你本机代码连接了多个数据库，就增加了一层迁移生成数据库前的确认操作，防止执行到不该执行的数据库 实体类注释生成列备注信息 实现效果：将实体类上面的注释映射到数据库的列备注信息上面。 大致思路：将项目生成xml文件，然后在迁移的时候，通过反射来读取到实体类信息，并去xml中解析。 示例获取实体类备注信息 在对 DatabaseC...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/qianyishuju/qianyijiyinjiqiao.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"迁移奇淫技巧"}],["meta",{"property":"og:description","content":"迁移和生成数据库确认 如果你本机代码连接了多个数据库，就增加了一层迁移生成数据库前的确认操作，防止执行到不该执行的数据库 实体类注释生成列备注信息 实现效果：将实体类上面的注释映射到数据库的列备注信息上面。 大致思路：将项目生成xml文件，然后在迁移的时候，通过反射来读取到实体类信息，并去xml中解析。 示例获取实体类备注信息 在对 DatabaseC..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迁移奇淫技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"迁移和生成数据库确认","slug":"迁移和生成数据库确认","link":"#迁移和生成数据库确认","children":[]},{"level":2,"title":"实体类注释生成列备注信息","slug":"实体类注释生成列备注信息","link":"#实体类注释生成列备注信息","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.13,"words":638},"filePathRelative":"orm/efcore/qianyishuju/qianyijiyinjiqiao.md","localizedDate":"2023年6月21日","excerpt":"<h2>迁移和生成数据库确认</h2>\\n<p>如果你本机代码连接了多个数据库，就增加了一层迁移生成数据库前的确认操作，防止执行到不该执行的数据库</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 迁移前的确认</span>\\n<span class=\\"token doc-comment comment\\">/// 该文件逻辑会在命令上生成迁移文件或者更新数据库前的时候被触发</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>remarks</span><span class=\\"token punctuation\\">&gt;</span></span>https://dev.to/vanenshi/how-i-saved-my-production-database-with-one-simple-console-message-4fjm<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>remarks</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ApplicationDbContextFactory</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">IDesignTimeDbContextFactory<span class=\\"token punctuation\\">&lt;</span>OpenDbContext<span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">OpenDbContext</span> <span class=\\"token function\\">CreateDbContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> conn <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Host=localhost;Username=postgres;Password=123456;Database=azrng\\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> dbBuild <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">DbContextOptionsBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        dbBuild<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseNpgsql</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ... Some code to generate dbContextBuilder</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> context <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">OpenDbContext</span><span class=\\"token punctuation\\">(</span>dbBuild<span class=\\"token punctuation\\">.</span>Options<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// This is where magic happends</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> pendingMigrations <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Database<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetPendingMigrations</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"*********************************************\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"该命令将使用以下详细信息应用迁移\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"连接字符串: \\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span>ForegroundColor <span class=\\"token operator\\">=</span> ConsoleColor<span class=\\"token punctuation\\">.</span>Yellow<span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>conn<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ResetColor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"迁移:\\\\n\\\\t\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span>ForegroundColor <span class=\\"token operator\\">=</span> ConsoleColor<span class=\\"token punctuation\\">.</span>Yellow<span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\\\t\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">value</span><span class=\\"token punctuation\\">:</span> pendingMigrations<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ResetColor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"*********************************************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"你确认吗? (Y/N)\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> userInput <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>userInput <span class=\\"token keyword\\">is</span> <span class=\\"token string\\">\\"Y\\"</span> <span class=\\"token keyword\\">or</span> <span class=\\"token string\\">\\"y\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> context<span class=\\"token punctuation\\">;</span>\\n\\n        Console<span class=\\"token punctuation\\">.</span>ForegroundColor <span class=\\"token operator\\">=</span> ConsoleColor<span class=\\"token punctuation\\">.</span>Red<span class=\\"token punctuation\\">;</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"失败!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        Environment<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,g as data};
