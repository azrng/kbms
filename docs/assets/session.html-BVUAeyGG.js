import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as i,b as s,e}from"./app-Dg7YJ3hy.js";const t={},a=s("p",null,[e('创建session    Session["admin_name"] ="azrng"; 删除session  Session.Abandon(); 注释： Session.Clear()就是把Session对象中的所有项目都删除了， Session对象里面啥都没有。但是Session对象还保留。 Session.Abandon()就是把当前Session对象删除了，下一次就是新的Session了。   一般处理程序中获取session 先引用using System.Web.SessionState; 然后再：public class FIleShow : IHttpHandler, IRequiresSessionState   继承这个 获取 context.Session["name"].ToString();     一个浏览器登录两个不同账号session替换的问题 （可以在登录时候判断下是session是否有值，如果有值直接进去）     登录后会创建一个session，这个东西保存在服务器上，那么服务器如何知道是哪一个电脑登录的呢？ 创建session时候会创建一个cookie，然后生成一个sessionid，这个东西是用来区分是哪一个电脑登录的   session和cache区别   '),s("strong",null,"cookie和session的关系:"),e(" http是无状态的协议  session是以cookie或URL重写为基础的， 他是流程化的 ,默认使用cookie来实现,   session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，用户在连接服务器时，会由服务器生成一个唯一的SessionID,通过 SessionID来区分不同的客户 并且方便下一次的识别  Session是由应用服务器维持的一个服务器端的存储空间，而SessionID这一数据则是用Cookie保存到客户端，用户提交页面时，会将这SessionID提交到服务器端，来存取Session数据。")],-1),r=[a];function c(p,S){return i(),o("div",null,r)}const l=n(t,[["render",c],["__file","session.html.vue"]]),g=JSON.parse('{"path":"/dotnet/webyingyong/webform/cunchushuju/session.html","title":"session","lang":"zh-CN","frontmatter":{"title":"session","lang":"zh-CN","date":"2021-08-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"session","slug":"yhygb9","docsId":"31541512","description":"创建session Session[\\"admin_name\\"] =\\"azrng\\"; 删除session Session.Abandon(); 注释： Session.Clear()就是把Session对象中的所有项目都删除了， Session对象里面啥都没有。但是Session对象还保留。 Session.Abandon()就是把当前Session对象...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/webyingyong/webform/cunchushuju/session.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"session"}],["meta",{"property":"og:description","content":"创建session Session[\\"admin_name\\"] =\\"azrng\\"; 删除session Session.Abandon(); 注释： Session.Clear()就是把Session对象中的所有项目都删除了， Session对象里面啥都没有。但是Session对象还保留。 Session.Abandon()就是把当前Session对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-08-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"session\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.43,"words":428},"filePathRelative":"dotnet/webyingyong/webform/cunchushuju/session.md","localizedDate":"2021年8月27日","excerpt":"<p>创建session\\n&nbsp;&nbsp; Session[\\"admin_name\\"] =\\"azrng\\";\\n删除session\\n&nbsp;Session.Abandon();\\n注释：\\nSession.Clear()就是把Session对象中的所有项目都删除了，\\nSession对象里面啥都没有。但是Session对象还保留。\\nSession.Abandon()就是把当前Session对象删除了，下一次就是新的Session了。\\n&nbsp;\\n一般处理程序中获取session\\n先引用using System.Web.SessionState;\\n然后再：public class FIleShow : IHttpHandler, IRequiresSessionState &nbsp; 继承这个\\n获取 context.Session[\\"name\\"].ToString();\\n&nbsp;\\n&nbsp;\\n一个浏览器登录两个不同账号session替换的问题\\n（可以在登录时候判断下是session是否有值，如果有值直接进去）\\n&nbsp;\\n&nbsp;\\n登录后会创建一个session，这个东西保存在服务器上，那么服务器如何知道是哪一个电脑登录的呢？\\n创建session时候会创建一个cookie，然后生成一个sessionid，这个东西是用来区分是哪一个电脑登录的\\n&nbsp;\\nsession和cache区别\\n&nbsp;\\n<strong>cookie和session的关系:</strong>\\nhttp是无状态的协议&nbsp; session是以cookie或URL重写为基础的， 他是流程化的 ,默认使用cookie来实现,&nbsp;&nbsp; session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，用户在连接服务器时，会由服务器生成一个唯一的SessionID,通过 SessionID来区分不同的客户 并且方便下一次的识别&nbsp; Session是由应用服务器维持的一个服务器端的存储空间，而SessionID这一数据则是用Cookie保存到客户端，用户提交页面时，会将这SessionID提交到服务器端，来存取Session数据。</p>","autoDesc":true}');export{l as comp,g as data};
