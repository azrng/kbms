import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,f as t,d as l}from"./app-CBxp4zeL.js";const i={},u=n("h2",{id:"其他资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他资料"},[n("span",null,"其他资料")])],-1),r={href:"https://www.yuque.com/docs/share/eef00bc7-9cb3-4ba2-9099-d72bfacde44e?view=doc_embed",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="基础操作" tabindex="-1"><a class="header-anchor" href="#基础操作"><span>基础操作</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 字节数据保存文件</span>
System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\999.png&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 是否存在</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><h4 id="转字节数组" tabindex="-1"><a class="header-anchor" href="#转字节数组"><span>转字节数组</span></a></h4><p>示例1</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">ConvertBytesAsync</span><span class="token punctuation">(</span><span class="token class-name">IFormFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bytes <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例二(推荐)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">ConvertBytesAsync</span><span class="token punctuation">(</span><span class="token class-name">IFormFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>file<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">OpenReadStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> stream<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转字节流" tabindex="-1"><a class="header-anchor" href="#转字节流"><span>转字节流</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">OpenReadStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//数组转字节流</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>FileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取文件" tabindex="-1"><a class="header-anchor" href="#获取文件"><span>获取文件</span></a></h3><p>1、获得当前运行程序的路径</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>string rootPath = Directory.GetCurrentDirectory();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、获得该文件夹下的文件，返回类型为FileInfo</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token operator">=</span><span class="token string">@&quot;X:\\XXX\\XX&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">DirectoryInfo</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">FileInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> files<span class="token operator">=</span>root<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、获得该文件夹下的子目录，返回类型为DirectoryInfo</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token operator">=</span><span class="token string">@&quot;X:\\XXX\\XX&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">DirectoryInfo</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">DirctoryInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> dics<span class="token operator">=</span>root<span class="token punctuation">.</span><span class="token function">GetDirectories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取随机文件名</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> trustedFileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetRandomFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、获得文件夹名</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token operator">=</span><span class="token string">@&quot;X:\\XXX\\XX&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">DirectoryInfo</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> dicName<span class="token operator">=</span>root<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、获得文件夹完整的路径名</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token operator">=</span><span class="token string">@&quot;X:\\XXX\\XX&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">DirectoryInfo</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name"><span class="token keyword">string</span></span> dicName<span class="token operator">=</span>root<span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、获取文件的Name和FullName</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token operator">=</span><span class="token string">@&quot;X:\\XXX\\XX&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">DirectoryInfo</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">FileInfo</span> f <span class="token keyword">in</span> root<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>   
    <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token operator">=</span>f<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>    
    <span class="token class-name"><span class="token keyword">string</span></span> fullName<span class="token operator">=</span>f<span class="token punctuation">.</span>FullName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件"><span>读取文件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 读取文件并打印出来</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Byte</span><span class="token punctuation">[</span>bufferlength<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">UTF8Encoding</span> encoding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UTF8Encoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>encoding<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入文件" tabindex="-1"><a class="header-anchor" href="#写入文件"><span>写入文件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 写入文本</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建文件并写入内容</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Byte<span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>filecontent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> fileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="上传与下载" tabindex="-1"><a class="header-anchor" href="#上传与下载"><span>上传与下载</span></a></h2><h3 id="上传" tabindex="-1"><a class="header-anchor" href="#上传"><span>上传</span></a></h3><h4 id="iformfile-上传单个文件" tabindex="-1"><a class="header-anchor" href="#iformfile-上传单个文件"><span>IFormFile：上传单个文件</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddCoursePhone</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CourseId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IFormFile</span> formFile <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

或者
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UploadFile <span class="token punctuation">(</span><span class="token class-name">IFormFile</span> formFile<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口用post方法，参数使用上面的对象，标识为[FromForm]，并且模型绑定的名称一定要和提交的表单值的name保持一致</p><h4 id="iformcollection-上传多个文件" tabindex="-1"><a class="header-anchor" href="#iformcollection-上传多个文件"><span>IFormCollection:上传多个文件</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddCoursePhone</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CourseId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IFormCollection</span> formFile <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口用post方法，参数使用上面的对象，标识为[FromForm]，并且模型绑定的名称一定要和提交的表单值的name保持一致</p><h4 id="操作上传的内容" tabindex="-1"><a class="header-anchor" href="#操作上传的内容"><span>操作上传的内容</span></a></h4><p>如果你想保存上传的文件，或者是直接读取上传的文件信息，IFormFile为我们提供两种可以操作上传文件内容信息的方式</p><ul><li>一种是将上传文件的Stream信息Copy到一个新的Stream中</li><li>另一种是直接通过OpenReadStream的方式直接获取上传文件的Stream信息</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> UploadFile <span class="token punctuation">(</span><span class="token class-name">IFormFile</span> formFile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>formFile<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//1.使用CopyToAsync的方式</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> formFile<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.使用OpenReadStream的方式直接得到上传文件的Stream</span>
        <span class="token class-name">StreamReader</span> streamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>formFile<span class="token punctuation">.</span><span class="token function">OpenReadStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> content <span class="token operator">=</span> streamReader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">formFile<span class="token punctuation">.</span>FileName</span><span class="token punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">formFile<span class="token punctuation">.</span>Length</span><span class="token punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">formFile<span class="token punctuation">.</span>ContentDisposition</span><span class="token punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">formFile<span class="token punctuation">.</span>ContentType</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="上传保存到本地目录" tabindex="-1"><a class="header-anchor" href="#上传保存到本地目录"><span>上传保存到本地目录</span></a></h4><p>将上传的文件保存到服务器指定的目录</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UploadFile</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>IFormFile<span class="token punctuation">&gt;</span></span> files<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> subDirectory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    subDirectory <span class="token operator">??=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> target <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>_webHostEnvironment<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> subDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>

    files<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> file <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>Length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> file<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Upload&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Upload</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>IFormFile<span class="token punctuation">&gt;</span></span> formFiles<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> subDirectory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _fileService<span class="token punctuation">.</span><span class="token function">UploadFile</span><span class="token punctuation">(</span>formFiles<span class="token punctuation">,</span> subDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> formFiles<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> Size <span class="token operator">=</span> _fileService<span class="token punctuation">.</span><span class="token function">SizeConverter</span><span class="token punctuation">(</span>formFiles<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><p>WebClient的写法已经过期，所以本文并不涉及那些写法。</p><h4 id="普通下载" tabindex="-1"><a class="header-anchor" href="#普通下载"><span>普通下载</span></a></h4><p>异步下载</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;https://www.coderbusy.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> save <span class="token operator">=</span> <span class="token string">@&quot;D:\\1.html&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> ms <span class="token operator">=</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> ms<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置自定义请求头</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;https://www.coderbusy.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> save <span class="token operator">=</span> <span class="token string">@&quot;D:\\1.html&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//增加 Auth 请求头</span>
request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Auth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> ms <span class="token operator">=</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> ms<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多线程下载" tabindex="-1"><a class="header-anchor" href="#多线程下载"><span>多线程下载</span></a></h4><p>在网络带宽充足的情况下，单线程下载的效率并不理想。我们需要多线程和断点续传才可以拿到更好的下载速度。 Downloader 是一个现代化的、流畅的、异步的、可测试的和可移植的 .NET 库。这是一个包含异步进度事件的多线程下载程序。Downloader 与 .NET Standard 2.0 及以上版本兼容，可以在 Windows、Linux 和 macOS 上运行。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Downloader&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.3.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>GitHub 开源地址：https://github.com/bezzad/Downloader NuGet 地址：https://www.nuget.org/packages/Downloader</p></blockquote><p>下载配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token class-name"><span class="token keyword">var</span></span> downloadOpt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DownloadConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BufferBlockSize <span class="token operator">=</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">// 通常，主机最大支持8000字节，默认值为8000。</span>
    ChunkCount <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment">// 要下载的文件分片数量，默认值为1</span>
    MaximumBytesPerSecond <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 下载速度限制为1MB/s，默认值为零或无限制</span>
    MaxTryAgainOnFailover <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">,</span> <span class="token comment">// 失败的最大次数</span>
    OnTheFlyDownload <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否在内存中进行缓存？默认值是true</span>
    ParallelDownload <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 下载文件是否为并行的。默认值为false</span>
    TempDirectory <span class="token operator">=</span> <span class="token string">&quot;C:\\\\temp&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 设置用于缓冲大块文件的临时路径，默认路径为Path.GetTempPath()。</span>
    Timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 每个 stream reader  的超时（毫秒），默认值是1000</span>
    RequestConfiguration <span class="token operator">=</span> <span class="token comment">// 定制请求头文件</span>
    <span class="token punctuation">{</span>
        Accept <span class="token operator">=</span> <span class="token string">&quot;*/*&quot;</span><span class="token punctuation">,</span>
        AutomaticDecompression <span class="token operator">=</span> DecompressionMethods<span class="token punctuation">.</span>GZip <span class="token operator">|</span> DecompressionMethods<span class="token punctuation">.</span>Deflate<span class="token punctuation">,</span>
        CookieContainer <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CookieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Add your cookies</span>
        Headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebHeaderCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Add your custom headers</span>
        KeepAlive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        ProtocolVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version11<span class="token punctuation">,</span> <span class="token comment">// Default value is HTTP 1.1</span>
        UseDefaultCredentials <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        UserAgent <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;DownloaderSample/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Version<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个下载服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> downloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DownloadService</span><span class="token punctuation">(</span>downloadOpt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置事件处理器（该步骤可以省略）：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> Provide \`FileName\` <span class="token keyword">and</span> \`TotalBytesToReceive\` at the start of each downloads
<span class="token comment">// 在每次下载开始时提供 &quot;文件名 &quot;和 &quot;要接收的总字节数&quot;。</span>
downloader<span class="token punctuation">.</span>DownloadStarted <span class="token operator">+=</span> OnDownloadStarted<span class="token punctuation">;</span>

<span class="token comment">// Provide any information about chunker downloads, like progress percentage per chunk, speed, total received bytes and received bytes array to live streaming.</span>
<span class="token comment">// 提供有关分块下载的信息，如每个分块的进度百分比、速度、收到的总字节数和收到的字节数组，以实现实时流。</span>
downloader<span class="token punctuation">.</span>ChunkDownloadProgressChanged <span class="token operator">+=</span> OnChunkDownloadProgressChanged<span class="token punctuation">;</span>

<span class="token comment">// Provide any information about download progress, like progress percentage of sum of chunks, total speed, average speed, total received bytes and received bytes array to live streaming.</span>
<span class="token comment">// 提供任何关于下载进度的信息，如进度百分比的块数总和、总速度、平均速度、总接收字节数和接收字节数组的实时流。</span>
downloader<span class="token punctuation">.</span>DownloadProgressChanged <span class="token operator">+=</span> OnDownloadProgressChanged<span class="token punctuation">;</span>

<span class="token comment">// Download completed event that can include occurred errors or cancelled or download completed successfully.</span>
<span class="token comment">// 下载完成的事件，可以包括发生错误或被取消或下载成功。</span>
downloader<span class="token punctuation">.</span>DownloadFileCompleted <span class="token operator">+=</span> OnDownloadFileCompleted<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> file <span class="token operator">=</span> <span class="token string">@&quot;D:\\1.html&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> url <span class="token operator">=</span> <span class="token string">@&quot;https://www.coderbusy.com&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> downloader<span class="token punctuation">.</span><span class="token function">DownloadFileTaskAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="下载非http协议文件" tabindex="-1"><a class="header-anchor" href="#下载非http协议文件"><span>下载非HTTP协议文件</span></a></h4><p>除了 WebClient 可以下载 FTP 协议的文件之外，上文所示的其他方法只能下载 HTTP 协议的文件。 aria2 是一个轻量级的多协议和多源命令行下载工具。它支持 HTTP/HTTPS、FTP、SFTP、BitTorrent 和 Metalink。aria2 可以通过内置的 JSON-RPC 和 XML-RPC 接口进行操作。 我们可以调用 aria2 实现文件下载功能。</p><blockquote><p>GitHub 地址：https://github.com/aria2/aria2 下载地址：https://github.com/aria2/aria2/releases</p></blockquote><p>将下载好的 aria2c.exe 复制到应用程序目录，如果是其他系统则可以下载对应的二进制文件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fn<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exe <span class="token operator">=</span> <span class="token string">&quot;aria2c&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dir <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Output</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">DataReceivedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Aria:{0}&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Data<span class="token punctuation">?.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> args <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;-x 8 -s 8 --dir=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dir</span><span class="token punctuation">}</span></span><span class="token string"> --out=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">url</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProcessStartInfo</span><span class="token punctuation">(</span>exe<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        UseShellExecute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        CreateNoWindow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        RedirectStandardOutput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        RedirectStandardError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;启动 aria2c：{0}&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Process</span> <span class="token punctuation">{</span> StartInfo <span class="token operator">=</span> info<span class="token punctuation">,</span> EnableRaisingEvents <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;aria 启动失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p<span class="token punctuation">.</span>ErrorDataReceived <span class="token operator">+=</span> Output<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>OutputDataReceived <span class="token operator">+=</span> Output<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">BeginOutputReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">BeginErrorReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> p<span class="token punctuation">.</span><span class="token function">WaitForExitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>OutputDataReceived <span class="token operator">-=</span> Output<span class="token punctuation">;</span>
        p<span class="token punctuation">.</span>ErrorDataReceived <span class="token operator">-=</span> Output<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fi<span class="token punctuation">.</span>Exists <span class="token operator">||</span> fi<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;文件下载失败&quot;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码通过命令行参数启动了一个新的 aria2c 下载进程，并对下载进度信息输出在了控制台。调用方式如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;https://www.coderbusy.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> save <span class="token operator">=</span> <span class="token string">@&quot;D:\\1.html&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">Download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> save<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件打包下载" tabindex="-1"><a class="header-anchor" href="#文件打包下载"><span>文件打包下载</span></a></h4><p>将指定目录的文件内容进行打包下载</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> fileType<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> archiveData<span class="token punctuation">,</span> <span class="token keyword">string</span> archiveName<span class="token punctuation">)</span></span> <span class="token function">DownloadFiles</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> subDirectory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> zipName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;archive-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy_MM_dd-HH_mm_ss</span><span class="token punctuation">}</span></span><span class="token string">.zip&quot;</span></span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> files <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>_webHostEnvironment<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> subDirectory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 下载压缩包</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ZipArchive</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">,</span> ZipArchiveMode<span class="token punctuation">.</span>Create<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        files<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>file <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> theFile <span class="token operator">=</span> archive<span class="token punctuation">.</span><span class="token function">CreateEntry</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> binaryWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryWriter</span><span class="token punctuation">(</span>theFile<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            binaryWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;application/zip&quot;</span><span class="token punctuation">,</span> memoryStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zipName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Download&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> subDirectory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>fileType<span class="token punctuation">,</span> archiveData<span class="token punctuation">,</span> archiveName<span class="token punctuation">)</span> <span class="token operator">=</span> _fileService<span class="token punctuation">.</span><span class="token function">DownloadFiles</span><span class="token punctuation">(</span>subDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>archiveData<span class="token punctuation">,</span> fileType<span class="token punctuation">,</span> archiveName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>为了统一处理方便，不管是上传的是单个文件还是多个文件，都会被包装成<code>ICollection&lt;IFormFile&gt;</code>集合类型</li><li><code>ICollection&lt;IFormFile&gt;</code>集合里的值就是来自于Request.Form.Files</li><li>可绑定的类型<code>IFormFile</code>、<code>List&lt;IFormFile&gt;</code>、<code>IFormFileCollection</code>等都是由<code>ICollection&lt;IFormFile&gt;</code>里的数据初始化而来</li><li>如果模型参数类型是IFormFile实例非集合类型，那么会从<code>ICollection&lt;IFormFile&gt;</code>集合中获取第一个</li><li>模型绑定的参数名称要和上传的FileName保持一致，否则无法进行模型绑定</li></ul><h2 id="安全事项" tabindex="-1"><a class="header-anchor" href="#安全事项"><span>安全事项</span></a></h2><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h3><ul><li>文件的大小进行限制</li><li>文件类型进行限制</li><li>文件名称进行替换</li><li>使用专属存储位置</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/files&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Files</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>IFormFile<span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//限制上传内容的大小</span>
	<span class="token class-name"><span class="token keyword">var</span></span> size <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> formFile <span class="token keyword">in</span> files<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//扩展名进行限制</span>
		<span class="token class-name"><span class="token keyword">var</span></span> extension <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>formFile<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//不使用文件原始的名称存储 并且存储到专属的位置</span>
		<span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">/uploadfiles/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyyMMddHHmmss</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">extension</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>formFile<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> extesion <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>formFile<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">path</span><span class="token punctuation">:</span> filePath<span class="token punctuation">,</span> <span class="token named-parameter punctuation">mode</span><span class="token punctuation">:</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">await</span> formFile<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> count <span class="token operator">=</span> files<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> size <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件类型限制" tabindex="-1"><a class="header-anchor" href="#文件类型限制"><span>文件类型限制</span></a></h3><h3 id="通过扩展名限制" tabindex="-1"><a class="header-anchor" href="#通过扩展名限制"><span>通过扩展名限制</span></a></h3><p>这种方法如果被人故意修改了文件的扩展名那么就不起作用了</p><h3 id="通过自身方法判断" tabindex="-1"><a class="header-anchor" href="#通过自身方法判断"><span>通过自身方法判断</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> img <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Image<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\Download\\\\11221.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>RawFormat<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">)</span>
	  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置上传文件的大小" tabindex="-1"><a class="header-anchor" href="#设置上传文件的大小"><span>设置上传文件的大小</span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h3><p>从ASP.NET 2.0开始最大请求正文大小限制为30MB。在正常情况下，无需增加 HTTP 请求 body 的大小。但是，当您尝试上传大型文件 （&gt; 30MB） 时，需要增加默认允许的最大限制。在这篇简短的文章中，我们将了解如何在.netcore 应用程序中增加文件 ASP.NET 大小以及控制此限制的各种选项。 需要修改ASP.NET Core会对上传文件大小的限制，还有修改Kestrel对Request的Body大小的限制</p><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h3><h4 id="在iis上部署" tabindex="-1"><a class="header-anchor" href="#在iis上部署"><span>在IIS上部署</span></a></h4><p>修改webconfig中的maxAllowedContentLength   完整文件：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>system<span class="token punctuation">.</span>webServer<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>handlers<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token keyword">remove</span> name<span class="token operator">=</span><span class="token string">&quot;aspNetCore&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token keyword">add</span> name<span class="token operator">=</span><span class="token string">&quot;aspNetCore&quot;</span> path<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> verb<span class="token operator">=</span><span class="token string">&quot;*&quot;</span> modules<span class="token operator">=</span><span class="token string">&quot;AspNetCoreModule&quot;</span> resourceType<span class="token operator">=</span><span class="token string">&quot;Unspecified&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>handlers<span class="token operator">&gt;</span><span class="token operator">+</span>
    <span class="token operator">&lt;</span><span class="token class-name">aspNetCore</span> processPath<span class="token operator">=</span><span class="token string">&quot;%LAUNCHER_PATH%&quot;</span> arguments<span class="token operator">=</span><span class="token string">&quot;%LAUNCHER_ARGS%&quot;</span> stdoutLogEnabled<span class="token operator">=</span><span class="token string">&quot;false&quot;</span> stdoutLogFile<span class="token operator">=</span><span class="token string">&quot;.\\logs\\stdout&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>security<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>requestFiltering<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> This will handle requests up to 50MB <span class="token operator">--</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token class-name">requestLimits</span> maxAllowedContentLength<span class="token operator">=</span><span class="token string">&quot;52428800&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>requestFiltering<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>security<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>system<span class="token punctuation">.</span>webServer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="托管在kestrel上" tabindex="-1"><a class="header-anchor" href="#托管在kestrel上"><span>托管在Kestrel上</span></a></h4><p>从 ASP.NET Core 2.0 开始, Kestrel 服务器也强加了自己的默认限制。有 3 种不同的方法可以增加Kestrel这个默认限制。</p><h5 id="mvc解决方案" tabindex="-1"><a class="header-anchor" href="#mvc解决方案"><span>Mvc解决方案</span></a></h5><p>如果你想改动一个特定的 MVC 接口或控制器的最大请求体大小限制，你可以使用属性。比如 RequestSizeLimit</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RequestSizeLimit</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">40000000</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> 
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">UploadFiles</span><span class="token punctuation">(</span><span class="token class-name">IFormFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token comment">//TODO: Save file }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 RequestSizeLimit 操作方法设置允许的最大请求长度。您可以在方法级别或控制器级别应用此属性。这是 ASP.netcore 应用中增加请求体最大限制的推荐方法。还有另一个适用于控制器级别或方法级别的属性来禁用 HTTP 请求的大小限制。这将把请求限制设置为无限制。比如, DisableRequestSizeLimit</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DisableRequestSizeLimit</span></span><span class="token punctuation">]</span> <span class="token comment">//DisableRequestSizeLimit 上传文件不限制文件大小</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">UploadFiles</span><span class="token punctuation">(</span><span class="token class-name">IFormFile</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span> <span class="token comment">//TODO: Save file }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="全局方案" tabindex="-1"><a class="header-anchor" href="#全局方案"><span>全局方案</span></a></h5><p>要修改全局最大请求 body 大小，请为 Kestrel 设置选项。比如,MaxRequestBodySize</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureKestrel</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                    <span class="token punctuation">{</span>
                        <span class="token comment">//设置Body大小限制256MB</span>
                        options<span class="token punctuation">.</span>Limits<span class="token punctuation">.</span>MaxRequestBodySize <span class="token operator">=</span> <span class="token number">268435456</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这适用于整个应用程序的任何请求。该值是一个可空的长值。将它设置为 null 会禁用该限制。现在你可能会想，为什么这对 windows 不起作用，因为 IIS 也使用 Kestrel。原因是，这个设置对于运行在 IIS 后面的 Kestrel 来说是无效的，在 IIS 后面应用的是正常的 web.config 限制。虽然这是一个全局设置，但它可以通过中间件.MaxRequestBodySize 来覆盖每个请求。</p><h5 id="中间件方案" tabindex="-1"><a class="header-anchor" href="#中间件方案"><span>中间件方案</span></a></h5><p>如果你想基于请求覆盖全局设置，你可以通过中间件来实现。这样你就可以通过一些灵活的配置来修改单个请求。比如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseWhen</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> 
    context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span><span class="token function">StartsWithSegments</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appBuilder 
    <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> context<span class="token punctuation">.</span>Features<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpMaxRequestBodySizeFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>MaxRequestBodySize <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//TODO: take next steps });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，在读取请求体开始后，不能更改。如果你在应用开始读取请求后试图配置请求的限制，会抛出一个异常。有一个属性可以指示是否处于只读状态，也就是说来不及配置限制了。IsReadOnlyMaxRequestBodySize(只读最大请求体大小)</p><h4 id="startup设置-推荐" tabindex="-1"><a class="header-anchor" href="#startup设置-推荐"><span>Startup设置(推荐)</span></a></h4><p>ConfigureServices修改ASP.NET Core会对上传文件大小的限制</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>传文件不做限制可以上传最大
<span class="token comment">//解决Multipart body length limit 134217728 exceeded</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FormOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>ValueLengthLimit <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>MultipartBodyLengthLimit <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span> <span class="token comment">// 设置文件上传大小限制</span>
    options<span class="token punctuation">.</span>MemoryBufferThreshold <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Program修改Kestrel对Request的Body大小的限制</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureKestrel</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//设置应用服务器Kestrel请求体最大</span>
            options<span class="token punctuation">.</span>Limits<span class="token punctuation">.</span>MaxRequestBodySize <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,116),d={href:"https://mp.weixin.qq.com/s/QoDNCW_73-B0CuR7zxN9aw",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/2x2QhAYX7-jMHBAxkmRirA",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s/bgDd40aG-FWE008a8saNAg",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/6xs0v12BdL2y-j-YWWXQLw",target:"_blank",rel:"noopener noreferrer"};function g(h,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("文件与目录操作"),t(a)])]),k,n("p",null,[n("a",d,[s("https://mp.weixin.qq.com/s/QoDNCW_73-B0CuR7zxN9aw"),t(a)]),s(" | 使用Web API上传和下载多个文件 「附代码」 "),n("a",m,[s("https://mp.weixin.qq.com/s/2x2QhAYX7-jMHBAxkmRirA"),t(a)]),s(" ASP.NET Core文件上传IFormFile于Request.Body的羁绊："),n("a",v,[s("https://mp.weixin.qq.com/s/bgDd40aG-FWE008a8saNAg"),t(a)]),n("a",b,[s("https://mp.weixin.qq.com/s/6xs0v12BdL2y-j-YWWXQLw"),t(a)]),s(" | 使用 C## 下载文件的十八般武艺")])])}const q=e(i,[["render",g],["__file","qingqiuwenjianchuli.html.vue"]]),F=JSON.parse('{"path":"/dotnet/api/controllerApi/qingqiuwenjianchuli.html","title":"请求文件处理","lang":"zh-CN","frontmatter":{"title":"请求文件处理","lang":"zh-CN","date":"2023-10-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"qingqiuwenjianchuli","slug":"gfhf5m4pswzixk19","docsId":"135413355","description":"其他资料 文件与目录操作 基础操作 类型转换 转字节数组 示例1 示例二(推荐) 转字节流 获取文件 1、获得当前运行程序的路径 2、获得该文件夹下的文件，返回类型为FileInfo 3、获得该文件夹下的子目录，返回类型为DirectoryInfo 获取随机文件名 4、获得文件夹名 5、获得文件夹完整的路径名 6、获取文件的Name和FullName ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/qingqiuwenjianchuli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"请求文件处理"}],["meta",{"property":"og:description","content":"其他资料 文件与目录操作 基础操作 类型转换 转字节数组 示例1 示例二(推荐) 转字节流 获取文件 1、获得当前运行程序的路径 2、获得该文件夹下的文件，返回类型为FileInfo 3、获得该文件夹下的子目录，返回类型为DirectoryInfo 获取随机文件名 4、获得文件夹名 5、获得文件夹完整的路径名 6、获取文件的Name和FullName ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求文件处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"其他资料","slug":"其他资料","link":"#其他资料","children":[]},{"level":2,"title":"基础操作","slug":"基础操作","link":"#基础操作","children":[{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[{"level":4,"title":"转字节数组","slug":"转字节数组","link":"#转字节数组","children":[]},{"level":4,"title":"转字节流","slug":"转字节流","link":"#转字节流","children":[]}]},{"level":3,"title":"获取文件","slug":"获取文件","link":"#获取文件","children":[]},{"level":3,"title":"读取文件","slug":"读取文件","link":"#读取文件","children":[]},{"level":3,"title":"写入文件","slug":"写入文件","link":"#写入文件","children":[]}]},{"level":2,"title":"上传与下载","slug":"上传与下载","link":"#上传与下载","children":[{"level":3,"title":"上传","slug":"上传","link":"#上传","children":[{"level":4,"title":"IFormFile：上传单个文件","slug":"iformfile-上传单个文件","link":"#iformfile-上传单个文件","children":[]},{"level":4,"title":"IFormCollection:上传多个文件","slug":"iformcollection-上传多个文件","link":"#iformcollection-上传多个文件","children":[]},{"level":4,"title":"操作上传的内容","slug":"操作上传的内容","link":"#操作上传的内容","children":[]},{"level":4,"title":"上传保存到本地目录","slug":"上传保存到本地目录","link":"#上传保存到本地目录","children":[]}]},{"level":3,"title":"下载","slug":"下载","link":"#下载","children":[{"level":4,"title":"普通下载","slug":"普通下载","link":"#普通下载","children":[]},{"level":4,"title":"多线程下载","slug":"多线程下载","link":"#多线程下载","children":[]},{"level":4,"title":"下载非HTTP协议文件","slug":"下载非http协议文件","link":"#下载非http协议文件","children":[]},{"level":4,"title":"文件打包下载","slug":"文件打包下载","link":"#文件打包下载","children":[]}]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"安全事项","slug":"安全事项","link":"#安全事项","children":[{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":3,"title":"文件类型限制","slug":"文件类型限制","link":"#文件类型限制","children":[]},{"level":3,"title":"通过扩展名限制","slug":"通过扩展名限制","link":"#通过扩展名限制","children":[]},{"level":3,"title":"通过自身方法判断","slug":"通过自身方法判断","link":"#通过自身方法判断","children":[]}]},{"level":2,"title":"设置上传文件的大小","slug":"设置上传文件的大小","link":"#设置上传文件的大小","children":[{"level":3,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[{"level":4,"title":"在IIS上部署","slug":"在iis上部署","link":"#在iis上部署","children":[]},{"level":4,"title":"托管在Kestrel上","slug":"托管在kestrel上","link":"#托管在kestrel上","children":[{"level":5,"title":"Mvc解决方案","slug":"mvc解决方案","link":"#mvc解决方案","children":[]},{"level":5,"title":"全局方案","slug":"全局方案","link":"#全局方案","children":[]},{"level":5,"title":"中间件方案","slug":"中间件方案","link":"#中间件方案","children":[]}]},{"level":4,"title":"Startup设置(推荐)","slug":"startup设置-推荐","link":"#startup设置-推荐","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":11.06,"words":3319},"filePathRelative":"dotnet/api/controllerApi/qingqiuwenjianchuli.md","localizedDate":"2023年10月5日","excerpt":"<h2>其他资料</h2>\\n<p><a href=\\"https://www.yuque.com/docs/share/eef00bc7-9cb3-4ba2-9099-d72bfacde44e?view=doc_embed\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文件与目录操作</a></p>\\n<h2>基础操作</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">// 字节数据保存文件</span>\\nSystem<span class=\\"token punctuation\\">.</span>IO<span class=\\"token punctuation\\">.</span>File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAllBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"d:\\\\\\\\999.png\\"</span><span class=\\"token punctuation\\">,</span> bytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 是否存在</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Exists</span><span class=\\"token punctuation\\">(</span>filename<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Delete</span><span class=\\"token punctuation\\">(</span>filename<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{q as comp,F as data};
