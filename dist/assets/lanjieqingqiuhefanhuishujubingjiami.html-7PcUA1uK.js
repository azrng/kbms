import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-vSdX8vi3.js";const p={},o=t(`<p>使用中间件拦截请求和返回数据，并对数据进行加密解密 自定义中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpContextMiddleware</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger</span> _logger<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 计时器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Stopwatch</span> _stopwatch<span class="token punctuation">;</span>
	<span class="token comment">//加密解密key</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> securitykey <span class="token operator">=</span> <span class="token string">&quot;0123456789abcdef&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 构造 Http 请求中间件</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>next<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loggerFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token function">HttpContextMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_next <span class="token operator">=</span> next<span class="token punctuation">;</span>
		_logger <span class="token operator">=</span> loggerFactory<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateLogger</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpContextMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 1：将Post方法中Body中的数据进行AES解密</span>
	<span class="token doc-comment comment">/// 2：将返回数据进行AES加密</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以实现多次读取Body</span>
		_stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Handling request: &quot;</span></span> <span class="token operator">+</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiRequestInputViewModel</span>
		<span class="token punctuation">{</span>
			HttpType <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">,</span>
			Query <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>QueryString<span class="token punctuation">.</span>Value<span class="token punctuation">,</span>
			RequestUrl <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">,</span>
			RequestName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			RequestIP <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Value
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>

		<span class="token keyword">try</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> newRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">//替换request流</span>
				context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> newRequest<span class="token punctuation">;</span>

				<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> newResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token comment">//替换response流</span>
					context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body <span class="token operator">=</span> newResponse<span class="token punctuation">;</span>

					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token comment">//读取原始请求流的内容</span>
						api<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">)</span>
							<span class="token keyword">await</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//示例加密字符串，使用 AES-ECB-PKCS7 方式加密，密钥为：0123456789abcdef</span>
						<span class="token comment">// 加密参数：{&quot;value&quot;:&quot;哈哈哈&quot;}</span>
						<span class="token comment">// 加密后数据： oedwSKGyfLX8ADtx2Z8k1Q7+pIoAkdqllaOngP4TvQ4=</span>
						api<span class="token punctuation">.</span>Body <span class="token operator">=</span> SecurityHelper<span class="token punctuation">.</span><span class="token function">AESDecrypt</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> securitykey<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>newRequest<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">FlushAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						newRequest<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
						context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> newRequest<span class="token punctuation">;</span>
						<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>

					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>newResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						newResponse<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
						api<span class="token punctuation">.</span>ResponseBody <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
						<span class="token punctuation">{</span>
							api<span class="token punctuation">.</span>ResponseBody <span class="token operator">=</span> SecurityHelper<span class="token punctuation">.</span><span class="token function">AESEncrypt</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">,</span> securitykey<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">FlushAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			_logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot; http中间件发生错误: &quot;</span></span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">finally</span>
		<span class="token punctuation">{</span>
			context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> request<span class="token punctuation">;</span>
			context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body <span class="token operator">=</span> response<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 响应完成时存入缓存</span>
		context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
		<span class="token punctuation">{</span>
			_stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			api<span class="token punctuation">.</span>ElapsedTime <span class="token operator">=</span> _stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>

			_logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;RequestLog:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMddHHmmssfff&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">api<span class="token punctuation">.</span>ElapsedTime</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Finished handling request.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现中间件扩展</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareExtensions</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">UseHttpContextMiddleware</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IApplicationBuilder</span> builder<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpContextMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在startup使用中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IHostingEnvironment</span> env<span class="token punctuation">,</span><span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>
		app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	app<span class="token punctuation">.</span><span class="token function">UseHttpContextMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//引入自定义的HtppContextMiddleware中间件</span>
	loggerFactory<span class="token punctuation">.</span><span class="token function">AddLog4Net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//引入log4net</span>
	app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	app<span class="token punctuation">.</span><span class="token function">UseMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","lanjieqingqiuhefanhuishujubingjiami.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/zhongjianjian/tazhan/lanjieqingqiuhefanhuishujubingjiami.html","title":"拦截请求和返回数据并加密","lang":"zh-CN","frontmatter":{"title":"拦截请求和返回数据并加密","lang":"zh-CN","date":"2022-08-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"lanjieqingqiuhefanhuishujubingjiami","slug":"nas3gw","docsId":"31893287","description":"使用中间件拦截请求和返回数据，并对数据进行加密解密 自定义中间件 实现中间件扩展 在startup使用中间件","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/zhongjianjian/tazhan/lanjieqingqiuhefanhuishujubingjiami.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"拦截请求和返回数据并加密"}],["meta",{"property":"og:description","content":"使用中间件拦截请求和返回数据，并对数据进行加密解密 自定义中间件 实现中间件扩展 在startup使用中间件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拦截请求和返回数据并加密\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.67,"words":501},"filePathRelative":"dotnet/base/zhongjianjian/tazhan/lanjieqingqiuhefanhuishujubingjiami.md","localizedDate":"2022年8月14日","excerpt":"<p>使用中间件拦截请求和返回数据，并对数据进行加密解密\\n自定义中间件</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">HttpContextMiddleware</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">RequestDelegate</span> _next<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">ILogger</span> _logger<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 计时器</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Stopwatch</span> _stopwatch<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//加密解密key</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> securitykey <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"0123456789abcdef\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 构造 Http 请求中间件</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>next<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>loggerFactory<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>cacheService<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token function\\">HttpContextMiddleware</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestDelegate</span> next<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ILoggerFactory</span> loggerFactory<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t_next <span class=\\"token operator\\">=</span> next<span class=\\"token punctuation\\">;</span>\\n\\t\\t_logger <span class=\\"token operator\\">=</span> loggerFactory<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">CreateLogger</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>HttpContextMiddleware<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 1：将Post方法中Body中的数据进行AES解密</span>\\n\\t<span class=\\"token doc-comment comment\\">/// 2：将返回数据进行AES加密</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>context<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> context<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\tcontext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">EnableBuffering</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//可以实现多次读取Body</span>\\n\\t\\t_stopwatch <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Stopwatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t_stopwatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t_logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Handling request: \\"</span></span> <span class=\\"token operator\\">+</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> api <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ApiRequestInputViewModel</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tHttpType <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Method<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tQuery <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>QueryString<span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tRequestUrl <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tRequestName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tRequestIP <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Host<span class=\\"token punctuation\\">.</span>Value\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> request <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> response <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t<span class=\\"token keyword\\">try</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> newRequest <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MemoryStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">//替换request流</span>\\n\\t\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> newRequest<span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> newResponse <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MemoryStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t<span class=\\"token comment\\">//替换response流</span>\\n\\t\\t\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> newResponse<span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> reader <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//读取原始请求流的内容</span>\\n\\t\\t\\t\\t\\t\\tapi<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsNullOrEmpty</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> _next<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//示例加密字符串，使用 AES-ECB-PKCS7 方式加密，密钥为：0123456789abcdef</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 加密参数：{\\"value\\":\\"哈哈哈\\"}</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 加密后数据： oedwSKGyfLX8ADtx2Z8k1Q7+pIoAkdqllaOngP4TvQ4=</span>\\n\\t\\t\\t\\t\\t\\tapi<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> SecurityHelper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AESDecrypt</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">,</span> securitykey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> writer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamWriter</span><span class=\\"token punctuation\\">(</span>newRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FlushAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\tnewRequest<span class=\\"token punctuation\\">.</span>Position <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> newRequest<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> reader <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>newResponse<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\tnewResponse<span class=\\"token punctuation\\">.</span>Position <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\tapi<span class=\\"token punctuation\\">.</span>ResponseBody <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsNullOrWhiteSpace</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>ResponseBody<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t\\tapi<span class=\\"token punctuation\\">.</span>ResponseBody <span class=\\"token operator\\">=</span> SecurityHelper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AESEncrypt</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>ResponseBody<span class=\\"token punctuation\\">,</span> securitykey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> writer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamWriter</span><span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">.</span>ResponseBody<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> writer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">FlushAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t_logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogError</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\" http中间件发生错误: \\"</span></span> <span class=\\"token operator\\">+</span> ex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">finally</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> request<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>Body <span class=\\"token operator\\">=</span> response<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\t<span class=\\"token comment\\">// 响应完成时存入缓存</span>\\n\\t\\tcontext<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">OnCompleted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t_stopwatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Stop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tapi<span class=\\"token punctuation\\">.</span>ElapsedTime <span class=\\"token operator\\">=</span> _stopwatch<span class=\\"token punctuation\\">.</span>ElapsedMilliseconds<span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t_logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogDebug</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"RequestLog:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">DateTime<span class=\\"token punctuation\\">.</span>Now<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"yyyyMMddHHmmssfff\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Next</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10000</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">-</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">api<span class=\\"token punctuation\\">.</span>ElapsedTime</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">ms\\"</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">JsonConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SerializeObject</span><span class=\\"token punctuation\\">(</span>api<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t_logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Finished handling request.</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">_stopwatch<span class=\\"token punctuation\\">.</span>ElapsedMilliseconds</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">ms\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
