import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as p,b as a}from"./app-Bw62I61B.js";const u={},i=a(`<p>数组适用于循环处理 数组拥有随机访问特性 数据适用于按顺序存放数据、查找数据 因为其在内存中是连续存储的，所以他的索引速度是非常快的，而且赋值与修改元素也很简单，   例如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token comment">//赋值</span>
   s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
   <span class="token comment">//修改</span>
   s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;b1&quot;</span><span class="token punctuation">;</span>

如何判断数组中是否包含重复数据
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsRepeat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> yourValue<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Hashtable</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yourValue<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
           ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点就是：在两个数据间插入数据是很麻烦的，还有在声明数组的时候，必须同时执行数组的长度，数组长度过长会造成内存浪费，过短会造成溢出的错误。然后提供了ArrzyList对象来克服这些缺点。</p><h4 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span><strong>ArrayList</strong></span></a></h4><p>大小是按照其中存储的数据来动态扩充与收缩的，所以我们在声明的时候不需要执行他的长度，继承了IList接口，所以可以很方便的进行数据的添加、插入、移除操作。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加一个元素  传递的参数是object类型</span>
   list<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   list<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//list.RemoveAt();//移除指定索引位置的元素</span>
   <span class="token comment">//list.Clear();//移除所有元素</span>
   list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//list.Sort(); //可以对某一个范围内的东西进行排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是因为每个元素都是object类型，所以在取值时候容易出现类型不匹配的错误，也就是说ArrzyList不是类型安全的，还有会导致经常得装箱拆箱，占用性能损耗并且占用很大空间</p><h4 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h4><p>List类是ArrzyList类的泛型等效类，他的大部分用法和ArrayList相似，因为他也继承了IList接口，但是我们在声明List集合的时候我们需要声明其数据的对象类型，但是他是类型安全的，并且不会装箱拆箱导致性能浪费。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加单个元素</span>
            list<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加多个元素</span>
            list<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以添加集合</span>
            <span class="token comment">//输出使用for循环出来 </span>
            <span class="token comment">//list泛型集合转换成数组</span>
            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nums <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组类型取决于泛型类型</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> listtwo <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组转换成泛型</span>
            <span class="token comment">//定义一个泛型 </span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">65</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//所有大于30的集合元素</span>
            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> value1 <span class="token operator">=</span> <span class="token keyword">from</span> u <span class="token keyword">in</span> array
                                      <span class="token keyword">let</span> n <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>
                                      <span class="token keyword">where</span> <span class="token class-name">u</span> <span class="token operator">&gt;</span> <span class="token number">30</span>
                                      <span class="token keyword">select</span> u<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> value1<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//</span>
            <span class="token comment">//所有大于30的集合元素</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">FindAll</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//返回3这个元素所在的位置索引</span>
            <span class="token class-name"><span class="token keyword">int</span></span> a2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> f <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//返回与条件相互匹配的最后一个元素</span>
            <span class="token class-name"><span class="token keyword">int</span></span> a3 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">FindLast</span><span class="token punctuation">(</span>g <span class="token operator">=&gt;</span> g <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//返回最后匹配一个元素的索引</span>
            <span class="token class-name"><span class="token keyword">int</span></span> a4 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">FindLastIndex</span><span class="token punctuation">(</span>y <span class="token operator">=&gt;</span> y <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">//定义一个泛型 </span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">65</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//返回排序后的泛型</span>
            <span class="token class-name"><span class="token keyword">var</span></span> value2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//使用reverse也可以进行倒叙排列</span>
            <span class="token comment">//返回排序后的泛型</span>
            <span class="token class-name"><span class="token keyword">var</span></span> value3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> u <span class="token keyword">in</span> array
                         <span class="token keyword">orderby</span> u <span class="token keyword">descending</span>
                         <span class="token keyword">select</span> u<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Any:如果有数据则返回true ，否则返回false。      Dictionary和HashSet效率相比较list 数组效率高   HashSet对比list，就添加list比HashSet快 效率上，IList没有List效率高。</p><h4 id="字典" tabindex="-1"><a class="header-anchor" href="#字典"><span>字典</span></a></h4><h5 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary"><span>Dictionary</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> dic<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dic<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键必须是唯一的</span>
<span class="token comment">//修改数据</span>
dic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//使用foreach获取  键使用dic.keys  值dic[keys]</span>
<span class="token comment">//另一个获取的方法</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">keyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> kv <span class="token keyword">in</span> dic<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">writeLine</span><span class="token punctuation">(</span><span class="token string">&quot;{0}----{1}&quot;</span><span class="token punctuation">,</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">,</span>kv<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="concurrentdictionary" tabindex="-1"><a class="header-anchor" href="#concurrentdictionary"><span>ConcurrentDictionary</span></a></h5>`,15),r={href:"https://www.cnblogs.com/zhuyapeng/p/12754829.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<h4 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h4><h5 id="parallel-for" tabindex="-1"><a class="header-anchor" href="#parallel-for"><span>Parallel.For</span></a></h5><p>为固定数目的独立For循环迭代提供了负载均衡式的并行执行</p><h5 id="parallel-foreach-并行foreach" tabindex="-1"><a class="header-anchor" href="#parallel-foreach-并行foreach"><span>Parallel Foreach（并行foreach）</span></a></h5><p>为固定数目的独立ForEach循环迭代提供了负载均衡式的并行执行。这个方法支持自定义分区器（Partitioner），以使得我们可以完全掌控数据分发。 使用场景：对于数据量大的使用该方法，数据量小的不建议</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>x<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//逻辑操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
或者
List<span class="token punctuation">.</span><span class="token function">Foreach</span><span class="token punctuation">(</span>ex<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   <span class="token comment">//逻辑操作</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并行是并发的子集，并发和并行都可以多线程执行，就看其处理器是否是多核的，这些线程能不能同时被cpu多个核执行，如果可以就说明是并行，而并发是多个线程被cpu单核轮流切换着执行。<strong>总之，只有在多核处理器上并行才会有意义</strong>。</p><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h3><p>使用system.Index从尾部向前对集合进行索引</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>string<span class="token punctuation">[</span><span class="token punctuation">]</span> cities <span class="token operator">=</span> { <span class="token string">&quot;Kolkata&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hyderabad&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bangalore&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Moscow&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span> }<span class="token punctuation">;</span>
var city <span class="token operator">=</span> cities<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span><span class="token string">&quot;The selected city is: &quot;</span> <span class="token operator">+</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//New York</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片"><span>切片</span></a></h3><p>使用system.Range从array或者span上提取子集合</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//提取string的最后六个字符</span>
string str <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">6.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//World!</span>

<span class="token comment">//提取子集合</span>
 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> { <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> }<span class="token punctuation">;</span>
 var slice <span class="token operator">=</span> integers<span class="token punctuation">[</span><span class="token number">1.</span><span class="token number">.5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 foreach <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">in</span> slice<span class="token punctuation">)</span>
 {
    Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 }
 <span class="token comment">//1 2 3 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="span" tabindex="-1"><a class="header-anchor" href="#span"><span>span</span></a></h4><p>span可用于高性能的字符串分割</p><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h3><p>别名是游标，意图：提供一张方法顺序访问一个聚合对象中各个元素，而又不暴露该对象内部标识。</p>`,17),d={href:"https://www.cnblogs.com/onepiece_wang/p/5361741.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"迭代器模式的一种应用场景以及C#对于迭代器的内置支持",-1),v=a(`<h3 id="扩展方法" tabindex="-1"><a class="header-anchor" href="#扩展方法"><span>扩展方法</span></a></h3><ul><li>扩展方法必须是静态方法</li><li>扩展方法必须在静态类里面，类的名称无所谓</li><li>扩展方法的第一个参数一定是 this，后面跟上你需要扩展的类型</li></ul><blockquote><p>扩展方法的优先级低于同名的非扩展方法</p></blockquote><h3 id="表达式树" tabindex="-1"><a class="header-anchor" href="#表达式树"><span>表达式树</span></a></h3><p>Expression&lt;Func&lt;T, bool&gt;&gt;，是一个表达式参数。 Expression&lt;Func&lt;Product, bool&gt;&gt; 类型，调用其 Compile 方法，可以得到 Func&lt;Product, bool&gt; 类型的委托。 动态构建linq表达式对于不能在编译时候建立查询，只能在运行时创建查询的场景很有用。 缺点是：不易维护、不易阅读、不易调试，如果最终的表达式执行出错，很难通过调试来发现具体是构建中的哪一出问题了。</p><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3><p>链表指的是像链条一样的结构。 遍历链表的时间复杂度是O（n） 链表在处理和插入数据时，非常灵活。</p><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">WeChatAppTypeEnum</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;未知类型&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;公众号&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> Mp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;小程序&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> Mini <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;企业微信&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> QY <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;App&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> App <span class="token operator">=</span> <span class="token number">4</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据定位index" tabindex="-1"><a class="header-anchor" href="#数据定位index"><span>数据定位Index</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>            <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//获取某个位置的数据</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa2 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Index</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第二个参数fromEnd为true从后往前 false从前往后 </span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa4 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Index</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第二个参数默认是false</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa3 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//fromEnd为true时候的简写方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>输出都是2</p></blockquote><h3 id="数据范围range" tabindex="-1"><a class="header-anchor" href="#数据范围range"><span>数据范围Range</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>            <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//获取一个范围的数据</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa2 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> aa3 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token range operator">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>输出 4，5</p></blockquote><p>写法延伸</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> xx <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token range operator">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//从第3个数据到最后</span>
<span class="token class-name"><span class="token keyword">var</span></span> xx <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token range operator">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//从头到第4个数据(注意后面是不包含)</span>
<span class="token class-name"><span class="token keyword">var</span></span> xx <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token range operator">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//全部</span>
<span class="token class-name"><span class="token keyword">var</span></span> xx <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token range operator">..</span><span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//全部</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(h,g){const t=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[s("ConcurrentDictionary和Dictionary对比 "),n("a",r,[s("https://www.cnblogs.com/zhuyapeng/p/12754829.html"),p(t)])]),k,n("blockquote",null,[n("p",null,[s("文档："),n("a",d,[m,p(t)])])]),v])}const f=e(u,[["render",b],["__file","shuzu.html.vue"]]),x=JSON.parse('{"path":"/dotnet/csharp/hexincsharp/shuzu.html","title":"数组","lang":"zh-CN","frontmatter":{"title":"数组","lang":"zh-CN","date":"2023-11-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"shuzu","slug":"rchedhdg9f1ye6v8","docsId":"146446300","description":"数组适用于循环处理 数组拥有随机访问特性 数据适用于按顺序存放数据、查找数据 因为其在内存中是连续存储的，所以他的索引速度是非常快的，而且赋值与修改元素也很简单， 例如 缺点就是：在两个数据间插入数据是很麻烦的，还有在声明数组的时候，必须同时执行数组的长度，数组长度过长会造成内存浪费，过短会造成溢出的错误。然后提供了ArrzyList对象来克服这些缺点...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/hexincsharp/shuzu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数组"}],["meta",{"property":"og:description","content":"数组适用于循环处理 数组拥有随机访问特性 数据适用于按顺序存放数据、查找数据 因为其在内存中是连续存储的，所以他的索引速度是非常快的，而且赋值与修改元素也很简单， 例如 缺点就是：在两个数据间插入数据是很麻烦的，还有在声明数组的时候，必须同时执行数组的长度，数组长度过长会造成内存浪费，过短会造成溢出的错误。然后提供了ArrzyList对象来克服这些缺点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":4,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":4,"title":"List","slug":"list","link":"#list","children":[]},{"level":4,"title":"字典","slug":"字典","link":"#字典","children":[{"level":5,"title":"Dictionary","slug":"dictionary","link":"#dictionary","children":[]},{"level":5,"title":"ConcurrentDictionary","slug":"concurrentdictionary","link":"#concurrentdictionary","children":[]}]},{"level":4,"title":"循环","slug":"循环","link":"#循环","children":[{"level":5,"title":"Parallel.For","slug":"parallel-for","link":"#parallel-for","children":[]},{"level":5,"title":"Parallel Foreach（并行foreach）","slug":"parallel-foreach-并行foreach","link":"#parallel-foreach-并行foreach","children":[]}]},{"level":3,"title":"索引","slug":"索引","link":"#索引","children":[]},{"level":3,"title":"切片","slug":"切片","link":"#切片","children":[{"level":4,"title":"span","slug":"span","link":"#span","children":[]}]},{"level":3,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":3,"title":"扩展方法","slug":"扩展方法","link":"#扩展方法","children":[]},{"level":3,"title":"表达式树","slug":"表达式树","link":"#表达式树","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":3,"title":"数据定位Index","slug":"数据定位index","link":"#数据定位index","children":[]},{"level":3,"title":"数据范围Range","slug":"数据范围range","link":"#数据范围range","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.21,"words":1862},"filePathRelative":"dotnet/csharp/hexincsharp/shuzu.md","localizedDate":"2023年11月9日","excerpt":"<p>数组适用于循环处理\\n数组拥有随机访问特性\\n数据适用于按顺序存放数据、查找数据\\n因为其在内存中是连续存储的，所以他的索引速度是非常快的，而且赋值与修改元素也很简单， &nbsp;\\n例如</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>  <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> s<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">string</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token comment\\">//赋值</span>\\n   s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">;</span> s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">;</span> s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token comment\\">//修改</span>\\n   s<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"b1\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n如何判断数组中是否包含重复数据\\n<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">bool</span></span> <span class=\\"token function\\">IsRepeat</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> yourValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Hashtable</span> ht <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Hashtable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> yourValue<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>ht<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span>yourValue<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span>\\n        <span class=\\"token punctuation\\">{</span>\\n           ht<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>yourValue<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> yourValue<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,x as data};
