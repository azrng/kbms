import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const i="/kbms/common/1623573025670-a091a4da-90ce-4dec-b630-43ccaebabf91.png",u="/kbms/common/1623573080249-e2bc5bfc-bc98-490d-99cc-c5556f26f457.png",r={},k=e(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>模型绑定就是接收将来自HTTP请求的数据映射到模型的过程，这个过程是自动进行的。如果找不到模型属性的值，并不会报错，而是给该属性设置默认值。 示例：比如我们有一个接口为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span>Pet<span class="token punctuation">&gt;</span></span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> dogsOnly<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={href:"http://contoso.com/api/pets/2?DogsOnly=true",target:"_blank",rel:"noopener noreferrer"},v=e(`<ul><li>查找 <code>GetByID</code> 的第一个参数，该参数是一个名为 <code>id</code> 的整数。</li><li>查找 HTTP 请求中的可用源，并在路由数据中查找 <code>id</code> =“2”。</li><li>将字符串“2”转换为整数 2。</li><li>查找 <code>GetByID</code> 的下一个参数，该参数是一个名为 <code>dogsOnly</code> 的布尔值。</li><li>查找源，并在查询字符串中查找“DogsOnly=true”。 名称匹配不区分大小写。</li><li>将字符串“true”转换为布尔值 <code>true</code>。</li></ul><p>最后会调用GetById方法，参数Id为2，参数dogsOnly为true。</p><h2 id="绑定源" tabindex="-1"><a class="header-anchor" href="#绑定源"><span>绑定源</span></a></h2><p>默认情况下，模型绑定以键值对的形式从HTTP请求中的以下源中获取数据，绑定源属性会告诉model的绑定引擎从哪里找到绑定源：</p><ol><li>表单域</li><li>请求正文</li><li>路由数据</li><li>查询字符串参数</li><li>上传的文件</li></ol><p>对于每个参数，按照顺序扫描源。也可以直接指定源</p><ul><li>[FromQuery] - 从查询字符串获取值。</li><li>[FromRoute] - 从路由数据获取值。</li><li>[FromForm] - 从发布表单字段中获取值。</li><li>[FromBody] - 从请求正文获取值。</li><li>[FromHeader] - 从 HTTP 标头获取值。</li></ul><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
    
<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromRoute</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
    
<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
    
<span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name">AddUserVm</span> dto<span class="token punctuation">)</span>
    
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnGet</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromHeader</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;Accept-Language&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> language<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),m={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#additional-sources",target:"_blank",rel:"noopener noreferrer"},b=e('<h2 id="模型绑定" tabindex="-1"><a class="header-anchor" href="#模型绑定"><span>模型绑定</span></a></h2><h3 id="绑定的规则" tabindex="-1"><a class="header-anchor" href="#绑定的规则"><span>绑定的规则</span></a></h3><ul><li>如果没有标记特性，且你的参数为简单类型，如int、string、double等基元类型，那么webapi那么会尝试从url中读取值，即默认为 [FromUri]特性，调试用params传递参数，params是用于查询字符串的，你的参数key和value会拼接在你的url后面</li><li>如果参数贴了特性[FromBody]或者你的参数为复杂类型，如class，那么webapi将会尝试强制从你的body里面读取数据，而你的对应参数值必须是序列化以后的数据，调试在body里面传递json字符串，且content-type格式设置为application/json。</li><li>如果你贴了特性[FromForm]，参数以表单的形式提交。也就是在你的body里面是这样的键值对形式a =1, b =1这样的形式，调试在x-www-form-urlencoded中传递键值对数据，且content-type格式设置为multipart/form-data</li></ul><h3 id="简单模型绑定" tabindex="-1"><a class="header-anchor" href="#简单模型绑定"><span>简单模型绑定</span></a></h3><p>例如：bool、byte、char、DateTime、DateTimeOffset、float、enum、guid、int、TimeSpan、Url、Version等</p><h3 id="复杂类型" tabindex="-1"><a class="header-anchor" href="#复杂类型"><span>复杂类型</span></a></h3>',6),g={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#complex-types",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="内置自定义模型绑定" tabindex="-1"><a class="header-anchor" href="#内置自定义模型绑定"><span>内置自定义模型绑定</span></a></h3><p>通过<code>ByteArrayModelBinder</code> 可以实现将传输的base64编码字符串转换为字节数组。 比如:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> file<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filename<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> trustedFileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetRandomFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token string">&quot;e://&quot;</span><span class="token punctuation">,</span> trustedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求示例 <img src="`+i+'" alt="image.png" loading="lazy"> 接收结果 <img src="'+u+'" alt="image.png" loading="lazy"></p><h3 id="自定义模型绑定" tabindex="-1"><a class="header-anchor" href="#自定义模型绑定"><span>自定义模型绑定</span></a></h3>',5),h={href:"https://learn.microsoft.com/zh-cn/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},w=n("h4",{id:"请求头token绑定",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#请求头token绑定"},[n("span",null,"请求头Token绑定")])],-1),f=n("p",null,"示例场景：通过请求头传递后端自定义的一种token，通过自定义模型绑定将token解析后绑定到请求模型。",-1),q={href:"https://www.cnblogs.com/jyzhu/articles/8670536.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<p>请求接口示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token class-name">TokenModel</span> dto<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义token模型类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenModel</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> UserID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义模型绑定器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenModelBinder</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IModelBinder</span></span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 请求里传递参数token</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bindingContext<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">BindModelAsync</span><span class="token punctuation">(</span><span class="token class-name">ModelBindingContext</span> bindingContext<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//参数必须包含token</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bindingContext<span class="token punctuation">.</span>ActionContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> bindingContext<span class="token punctuation">.</span>ActionContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">//TODO  解析token</span>
		<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			UserID <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">,</span>
			UserName <span class="token operator">=</span> <span class="token string">&quot;azrng&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
		bindingContext<span class="token punctuation">.</span>Result <span class="token operator">=</span> ModelBindingResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义token框架绑定器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenModelBinderProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IModelBinderProvider</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name">IModelBinder</span> <span class="token function">GetBinder</span><span class="token punctuation">(</span><span class="token class-name">ModelBinderProviderContext</span> context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span>ModelType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TokenModel</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenModelBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用绑定器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>ModelBinderProviders<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenModelBinderProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestClient</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/api/ModelVerify/GetToken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestRequest</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IRestResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果就是可以在GetToken方法参数获取到我们token的值。</p><h4 id="数组绑定" tabindex="-1"><a class="header-anchor" href="#数组绑定"><span>数组绑定</span></a></h4><p>目的：实现将url中的?userIds=[1,2,3]绑定到入参的([FromQuery] int[] userIds)数据上面 实现IntArrayModelBinderProvider，然后调用options.ModelBinderProviders.Add(new IntArrayModelBinderProvider());</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 实现IntArrayModelBinderProvider：</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class IntArrayModelBinderProvider : IModelBinderProvider
{
    <span class="token keyword">public</span> IModelBinder? GetBinder<span class="token punctuation">(</span>ModelBinderProviderContext context<span class="token punctuation">)</span>
    {
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">=</span><span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">)</span>
        {
            throw new ArgumentNullException<span class="token punctuation">(</span>nameof<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span>ModelType <span class="token operator">=</span><span class="token operator">=</span> typeof<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        {
            <span class="token keyword">return</span> new IntArrayModelBinder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }

        <span class="token keyword">return</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模仿着ByteArrayModelBinder编写IntArrayModelBinder</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class IntArrayModelBinder : IModelBinder
{
    <span class="token keyword">public</span> Task BindModelAsync<span class="token punctuation">(</span>ModelBindingContext bindingContext<span class="token punctuation">)</span>
    {
        <span class="token comment">//获取传入的值</span>
        var valueProviderResult <span class="token operator">=</span> bindingContext<span class="token punctuation">.</span>ValueProvider<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span>bindingContext<span class="token punctuation">.</span>ModelName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        var <span class="token keyword">value</span> <span class="token operator">=</span> valueProviderResult<span class="token punctuation">.</span>FirstValue<span class="token punctuation">;</span>

        <span class="token comment">//string 转 int[]</span>
        var model <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>Trim<span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">Select</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token punctuation">.</span>Parse<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ToArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//绑定到参数</span>
        bindingContext<span class="token punctuation">.</span>Result <span class="token operator">=</span> ModelBindingResult<span class="token punctuation">.</span>Success<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加到ModelBinderProviders中</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>services<span class="token punctuation">.</span>AddControllers<span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">&gt;</span>
{
    options<span class="token punctuation">.</span>ModelBinderProviders<span class="token punctuation">.</span><span class="token keyword">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> new IntArrayModelBinderProvider<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>资料：<a href="#7dLv2">https://www.yuque.com/azrng/notes/btp3rp#7dLv2</a></p><h4 id="用iparsable进行复杂类型绑定" tabindex="-1"><a class="header-anchor" href="#用iparsable进行复杂类型绑定"><span>用IParsable进行复杂类型绑定</span></a></h4><p>如果想实现 dates=1-1&amp;dates=2-2 字符串绑定下面的接口上</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetResults</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span> <span class="token class-name">MyDate<span class="token punctuation">[</span><span class="token punctuation">]</span></span> dates<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> date <span class="token keyword">in</span> dates<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Month:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">date<span class="token punctuation">.</span>Month</span><span class="token punctuation">}</span></span><span class="token string"> Day:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">date<span class="token punctuation">.</span>Day</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以修改MyDate类继承自<code>IParsable&lt;T&gt;</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IParsable<span class="token punctuation">&lt;</span>MyDate<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Month <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Day <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> parts <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Month <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Day <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">MyDate</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">,</span> <span class="token class-name">IFormatProvider<span class="token punctuation">?</span></span> provider<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        date<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> s<span class="token punctuation">,</span> <span class="token class-name">IFormatProvider<span class="token punctuation">?</span></span> provider<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">MyDate</span> result<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span>
        <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样自己就可以绑定了</p><h2 id="模型校验" tabindex="-1"><a class="header-anchor" href="#模型校验"><span>模型校验</span></a></h2>`,28),M={href:"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-5.0#automatic-http-400-responses",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={href:"https://learn.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},V=e(`<h3 id="验证特性" tabindex="-1"><a class="header-anchor" href="#验证特性"><span>验证特性</span></a></h3><p>通过验证特性可为属性增加验证规则。不仅仅有内置的验证特性，还可以实现自定义验证特性。 定义验证规则：使用内置方法或者使用第三方库</p><ul><li>Data Annotations。例如 [Required]，[MaxLength]等等。</li><li>自定义Atrribute。</li><li>实现IValidatableObject接口。</li></ul><h4 id="内置验证特性" tabindex="-1"><a class="header-anchor" href="#内置验证特性"><span>内置验证特性</span></a></h4><p>常用的有：必填、长度验证、数值范围、手机号码、邮箱，还可以使用正则验证</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddModelVerify</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Display</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;名称&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">// 非空校验 </span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;名称不能小于6位&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 最小长度校验</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MaxLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;长度不超过10个&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 最大长度校验</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 密码</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">[</span><span class="token function">Display</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Required</span><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;密码必须大于6位&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Display</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;工号&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 友好名称错误提示</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> MinimumLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}长度是{1}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> EmployeeNo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Range</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">999.99</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">VerifyPhone</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">RegularExpression</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">@&quot;^\\d{3}-\\d{3}-\\d{4}$&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> phone<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),I={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#built-in-attributes",target:"_blank",rel:"noopener noreferrer"},T=e(`<p>请求地址传入空值，输出结果：HTTP错误400</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;errors&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;密码不能为空&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;密码必须大于6位&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;名称不能为空&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;名称不能小于6位&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;EmployeeNo&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;工号不能为空&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;工号长度是10&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;One or more validation errors occurred.&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
  <span class="token string">&quot;traceId&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;00-d16b945b3e172a42bfe5b53d08f7487b-8d87c2ca238fdc4a-00&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个Remote特性感觉挺有意思，使用场景是比如在ID上标注远程特性，绑定时候自定验证ID是否有效</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AcceptVerbs</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">VerifyID</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_userService<span class="token punctuation">.</span><span class="token function">VerifyID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;对象未找到&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">Json</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模型类使用指向操作方法的[Remote]特性注释属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Remote</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token named-parameter punctuation">action</span><span class="token punctuation">:</span> <span class="token string">&quot;VerifyID&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">controller</span><span class="token punctuation">:</span> <span class="token string">&quot;Users&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),R={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#additional-fields",target:"_blank",rel:"noopener noreferrer"},C=e(`<h4 id="自定义特性" tabindex="-1"><a class="header-anchor" href="#自定义特性"><span>自定义特性</span></a></h4><p>对于内置验证特性无法处理的情况，我们可以创建自定义验证特性。 模拟场景：添加用户时候，设置名字和工号不能一致，出生日期必须小于当前时间 输入模型类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddUserinfoVm</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Display</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;名称&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;名称不能小于6位&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MaxLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;长度不超过10个&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 密码</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">[</span><span class="token function">Display</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;密码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Required</span><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;密码必须大于6位&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Display</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;工号&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span><span class="token attribute-arguments"><span class="token punctuation">(</span>ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}不能为空&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> MinimumLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;{0}长度是{1}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> EmployeeNo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 出生日期</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Birthday <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一"><span>方案一</span></a></h5><p>通过添加AddUserVerifyAttribute来实现 <strong>该方法是类级别验证，不具有全局性</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddUserVerifyAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidationAttribute</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token punctuation">(</span>AddUserinfoVm<span class="token punctuation">)</span>validationContext<span class="token punctuation">.</span>ObjectInstance<span class="token punctuation">;</span><span class="token comment">//user 变量表示 AddUserinfoVm 对象，其中包含表单提交中的数据</span>
		<span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&gt;</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;出生日期不能大于当前时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>UserName <span class="token operator">==</span> user<span class="token punctuation">.</span>EmployeeNo<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;名称和工号不能一样&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> ValidationResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AddUserVerify</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Birthday <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方案二-类级别" tabindex="-1"><a class="header-anchor" href="#方案二-类级别"><span>方案二(类级别)</span></a></h5><p>模型类中继承IValidatableObject，并实现Validate方法。 <strong>该方法是类级别验证，不具有全局性</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 属性级别的自定义验证，该方法在模型类中创建，该模型类需要继承自IValidatableObject</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>validationContext<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span>   </span>
<span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ValidationResult<span class="token punctuation">&gt;</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>Birthday <span class="token operator">&gt;</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;出生日期不能大于当前时间&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>Birthday<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>UserName <span class="token operator">==</span> EmployeeNo<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;名称和工号不能一样&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>UserName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>EmployeeNo<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求参数：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;userName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;passWord&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;employeeNo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;2021-06-15T14:34:52.192Z&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出错误信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;errors&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Birthday&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;出生日期不能大于当前时间&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;名称和工号不能一样&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;EmployeeNo&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;名称和工号不能一样&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;One or more validation errors occurred.&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
  <span class="token string">&quot;traceId&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;00-18854d59f6b6fc48b5c4c6a6dbe3802c-ba23f594f351a64d-00&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方案三※" tabindex="-1"><a class="header-anchor" href="#方案三※"><span>方案三※</span></a></h5><p>模仿现有的节点验证进行扩展 最小值限制</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///验证最小值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidMinValueAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidationAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _minValue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ValidMinValueAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> minValue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _minValue <span class="token operator">=</span> minValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name"><span class="token keyword">int</span></span> valueAsInt<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>valueAsInt <span class="token operator">&lt;=</span> _minValue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标注特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ValidMinValue</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ErrorMessage <span class="token operator">=</span> <span class="token string">&quot;值必须大于等于1&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们传递不合适的值时候</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>{
    <span class="token string">&quot;errors&quot;</span>: {
        <span class="token string">&quot;UserId&quot;</span>: <span class="token punctuation">[</span>
            <span class="token string">&quot;值必须大于等于1&quot;</span>
        <span class="token punctuation">]</span>
    }<span class="token punctuation">,</span>
    <span class="token string">&quot;type&quot;</span>: <span class="token string">&quot;https://tools.ietf.org/html/rfc7231#section-6.5.1&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;title&quot;</span>: <span class="token string">&quot;One or more validation errors occurred.&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;status&quot;</span>: <span class="token number">400</span><span class="token punctuation">,</span>
    <span class="token string">&quot;traceId&quot;</span>: <span class="token string">&quot;00-869a6b371a821f168a11eb06085950b6-9c9e21e35a8614c5-00&quot;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方案四" tabindex="-1"><a class="header-anchor" href="#方案四"><span>方案四</span></a></h5><p>通过自己编写特性，搭配过滤器实现 增加特性标注</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 抽象根特性</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 抽象验证方法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>oValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">IResultModel</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> oValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 最小值校验特性 继承抽象特性，并重写Validate方法</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidMinValue2Attribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _errorMessage<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _minValue<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ValidMinValue2Attribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> minValue<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> errorMessage <span class="token operator">=</span> <span class="token string">&quot;最小值不符合要求&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _errorMessage <span class="token operator">=</span> errorMessage<span class="token punctuation">;</span>
        _minValue <span class="token operator">=</span> minValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IResultModel</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> oValue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
            <span class="token punctuation">{</span>
                Code <span class="token operator">=</span> <span class="token string">&quot;400&quot;</span><span class="token punctuation">,</span>
                IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                Message <span class="token operator">=</span> <span class="token string">&quot;参数无效&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oValue <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name"><span class="token keyword">int</span></span> valueAsInt<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
            <span class="token punctuation">{</span>
                Code <span class="token operator">=</span> <span class="token string">&quot;400&quot;</span><span class="token punctuation">,</span>
                IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                Message <span class="token operator">=</span> <span class="token string">&quot;参数格式不对&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>valueAsInt <span class="token operator">&lt;=</span> _minValue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
            <span class="token punctuation">{</span>
                Code <span class="token operator">=</span> <span class="token string">&quot;400&quot;</span><span class="token punctuation">,</span>
                IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                Message <span class="token operator">=</span> _errorMessage
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
        <span class="token punctuation">{</span>
            Code <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>
            IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            Message <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加过滤器拦截处理</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 模型验证Action过滤器</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class ModelVerifyFilter : ActionFilterAttribute
{
    <span class="token comment">// 当不关闭默认的框架验证的时候，进不来这点都已经校验返回了</span>
    <span class="token comment">//services.Configure&lt;ApiBehaviorOptions&gt;(options =&gt; options.SuppressModelStateInvalidFilter = true);</span>
    <span class="token keyword">public</span> override void OnActionExecuting<span class="token punctuation">(</span>ActionExecutingContext context<span class="token punctuation">)</span>
    {
        <span class="token comment">//因为我们还包含自定义的校验处理，所以这需要注释</span>
        <span class="token comment">//if (context.ModelState.IsValid)</span>
        <span class="token comment">//return;</span>

        var errorResults <span class="token operator">=</span> new List<span class="token operator">&lt;</span>ErrorInfo<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//默认的模型校验</span>
        foreach <span class="token punctuation">(</span>var <span class="token punctuation">(</span><span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">in</span> context<span class="token punctuation">.</span>ModelState<span class="token punctuation">)</span>
        {
            var result <span class="token operator">=</span> new ErrorInfo
            {
                Field <span class="token operator">=</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
            }<span class="token punctuation">;</span>
            foreach <span class="token punctuation">(</span>var error <span class="token operator">in</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token keyword">Errors</span><span class="token punctuation">)</span>
            {
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>string<span class="token punctuation">.</span>IsNullOrEmpty<span class="token punctuation">(</span>result<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">)</span>
                {
                    result<span class="token punctuation">.</span>Message <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">;</span>
                }

                result<span class="token punctuation">.</span>Message <span class="token operator">+</span><span class="token operator">=</span> error<span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">;</span>
            }

            errorResults<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        }

        <span class="token comment">//自定义的模型校验处理</span>
        foreach <span class="token punctuation">(</span>var item <span class="token operator">in</span> context<span class="token punctuation">.</span>ActionArguments<span class="token punctuation">)</span>
        {
            var <span class="token keyword">type</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token keyword">Value</span>?<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span>?<span class="token punctuation">.</span>IsClass <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            {
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            }
            foreach <span class="token punctuation">(</span>var property <span class="token operator">in</span> <span class="token keyword">type</span><span class="token punctuation">.</span>GetProperties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">Where</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>IsDefined<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>AbstractAttribute<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            {
                foreach <span class="token punctuation">(</span>AbstractAttribute attribute <span class="token operator">in</span> property<span class="token punctuation">.</span>GetCustomAttributes<span class="token operator">&lt;</span>AbstractAttribute<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                {
                    var <span class="token keyword">value</span> <span class="token operator">=</span> property<span class="token punctuation">.</span>GetValue<span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token keyword">Value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">)</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>

                    var info <span class="token operator">=</span> attribute<span class="token punctuation">.</span>Validate<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>IsSuccess<span class="token punctuation">)</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    var result <span class="token operator">=</span> new ErrorInfo
                    {
                        Field <span class="token operator">=</span> property<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
                        Message <span class="token operator">=</span> info<span class="token punctuation">.</span>Message
                    }<span class="token punctuation">;</span>
                    errorResults<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                }
            }
        }
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorResults<span class="token punctuation">.</span>Count <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span>Result <span class="token operator">=</span> new BadRequestObjectResult<span class="token punctuation">(</span>new ResultModel
        {
            Code <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">.</span>ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">Errors</span> <span class="token operator">=</span> errorResults<span class="token punctuation">,</span>
            Message <span class="token operator">=</span> <span class="token string">&quot;参数格式不正确&quot;</span>
        }<span class="token punctuation">)</span><span class="token punctuation">;</span>
    }

    <span class="token keyword">public</span> override void OnActionExecuted<span class="token punctuation">(</span>ActionExecutedContext context<span class="token punctuation">)</span>
    {
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法，在需要处理的特性上面标注</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 用户ID</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token punctuation">[</span>ValidMinValue2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;用户ID必须大于等于1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>Required<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> UserId { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modelstate-isvalid" tabindex="-1"><a class="header-anchor" href="#modelstate-isvalid"><span>ModelState.IsValid</span></a></h3><p>通过该方法可以实现对请求类验证是否满足要求并做出相应的响应。</p><blockquote><p>如果已经使用[ApiController]标识，那么该方法就不在需要,因为已经在进入Action之前已经处理了模型校验。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">AddModelVerify</span> dto<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//对请求类进行验证特性</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span><span class="token comment">//指示该模型中是否有无效的值</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//对请求类的值做出修改</span>
		dto<span class="token punctuation">.</span>UserName <span class="token operator">=</span> <span class="token string">&quot;azrng&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">TryValidateModel</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//重新运行验证失败</span>
			<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;修改值后验证失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;验证成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		ModelState<span class="token punctuation">.</span><span class="token function">AddModelError</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> <span class="token string">&quot;输入有误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器中手动再次校验</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token operator">/</span><span class="token operator">/</span> 定义一个类  并标注UserName长度为<span class="token number">5</span>
var aaa <span class="token operator">=</span> <span class="token keyword">new</span> UserInfoRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
aaa<span class="token punctuation">.</span>UserName <span class="token operator">=</span> <span class="token string">&quot;sdafsdfskjfhsjahfj&quot;</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span> 清除特定于模型的验证
ModelState<span class="token punctuation">.</span>ClearValidationState<span class="token punctuation">(</span>nameof<span class="token punctuation">(</span>UserInfoRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>!TryValidateModel<span class="token punctuation">(</span>aaa<span class="token punctuation">,</span> nameof<span class="token punctuation">(</span>UserInfoRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
{
    <span class="token operator">/</span><span class="token operator">/</span> 获取测试信息的示例
   var errorInfo<span class="token operator">=</span>ModelState<span class="token punctuation">.</span><span class="token keyword">Values</span><span class="token punctuation">.</span><span class="token keyword">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="禁用验证" tabindex="-1"><a class="header-anchor" href="#禁用验证"><span>禁用验证</span></a></h3><h4 id="方案一-1" tabindex="-1"><a class="header-anchor" href="#方案一-1"><span>方案一</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 创建不会将任何字段标记为无效的 IObjectModelValidator 实现。</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullObjectModelValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IObjectModelValidator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name">ActionContext</span> actionContext<span class="token punctuation">,</span>
        <span class="token class-name">ValidationStateDictionary</span> validationState<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> prefix<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> model<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 该方法故意为空</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Startup.ConfigureServices中注入，以便替换依赖项注入容器中的默认 IObjectModelValidator 实现。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IObjectModelValidator<span class="token punctuation">,</span> NullObjectModelValidator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="方案二-推荐" tabindex="-1"><a class="header-anchor" href="#方案二-推荐"><span>方案二(推荐)</span></a></h4><p>直接在ConfigServices直接添加(推荐)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApiBehaviorOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span>SuppressModelStateInvalidFilter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="统一模型拦截器" tabindex="-1"><a class="header-anchor" href="#统一模型拦截器"><span>统一模型拦截器</span></a></h2><p>增加ModelActionFiter过滤器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelActionFiter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutedContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> errorResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ErrorResultDTO<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> context<span class="token punctuation">.</span>ModelState<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ErrorResultDTO</span>
                <span class="token punctuation">{</span>
                    Field <span class="token operator">=</span> item<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> error <span class="token keyword">in</span> item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        result<span class="token punctuation">.</span>Message <span class="token operator">+=</span> <span class="token char">&#39;|&#39;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    result<span class="token punctuation">.</span>Message <span class="token operator">+=</span> error<span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                errorResults<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span><span class="token keyword">new</span>
            <span class="token punctuation">{</span>
                Code <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span>
                Errors <span class="token operator">=</span> errorResults
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorResultDTO</span>
        
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 参数领域</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Field <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 错误信息</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),E={href:"https://www.cnblogs.com/minskiter/p/11601873.html",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>ConfigureServices中注册过滤器并禁用默认的自动模型验证</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ModelActionFiter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册过滤器 </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureApiBehaviorOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//[ApiController] 默认自带有400模型验证，且优先级比较高，如果需要自定义模型验证，则需要先关闭默认的模型验证</span>
        options<span class="token punctuation">.</span>SuppressModelStateInvalidFilter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),B={href:"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.infrastructure.modelstateinvalidfilter",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
  <span class="token string">&quot;errors&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;field&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;密码不能为空|密码必须大于6位&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;field&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;名称不能为空|名称不能小于6位&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><h3 id="minivalidation" tabindex="-1"><a class="header-anchor" href="#minivalidation"><span>MiniValidation</span></a></h3>`,4),D={href:"https://github.com/DamianEdwards/MiniValidation",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文档"},[n("span",null,"参考文档")])],-1),O={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-5.0#disable-inference-rules",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#disable-validation",target:"_blank",rel:"noopener noreferrer"},U={href:"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-5.0#disable-automatic-400-response",target:"_blank",rel:"noopener noreferrer"};function G(H,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,n("p",null,[s("这个时候你的请求为："),n("a",d,[s("http://localhost:5000/api/pets/2?DogsOnly=true"),t(a)]),s(" 路由系统选择该Action后，模型绑定会执行以下的步骤：")]),v,n("p",null,[s("也可以编写自定义的值提供程序，比如从cookie中获取会话状态，参考："),n("a",m,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#additional-sources"),t(a)])]),b,n("p",null,[s("使用复杂类型必须具有要绑定的公共默认构造函数和公共可写属性。进行模型绑定时候，将使用公共默认构造函数来实例化类。对于复杂类型的每个属性，模型绑定会查找名称模式 prefix.property_name 的源。 如果未找到，它将仅查找不含前缀的 properties_name。不过一般我们使用都是进行完全匹配，特殊需求才会做此操作。 参考资料："),n("a",g,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#complex-types"),t(a)])]),y,n("p",null,[s("官网文章："),n("a",h,[s("https://learn.microsoft.com/zh-cn/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-7.0"),t(a)])]),w,f,n("blockquote",null,[n("p",null,[s("参考资料："),n("a",q,[s("https://www.cnblogs.com/jyzhu/articles/8670536.html"),t(a)])])]),x,n("p",null,[s("现在dotNetCore如果在控制器标识[ApiController],那么就会在进action前就会自动校验模型类绑定是否符合要求，如果不符合要求自动触发HTTP400错误响应。"),n("a",M,[s("原文"),t(a)])]),A,n("p",null,[s("官网文章："),n("a",_,[s("https://learn.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-7.0"),t(a)])]),V,n("blockquote",null,[n("p",null,[s("除了上面这些还有其他内置特性："),n("a",I,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#built-in-attributes"),t(a)])])]),T,n("blockquote",null,[n("p",null,[s("Remote其他用法："),n("a",R,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#additional-fields"),t(a)])])]),C,n("blockquote",null,[n("p",null,[s("参考文档："),n("a",E,[s("https://www.cnblogs.com/minskiter/p/11601873.html"),t(a)])])]),P,n("blockquote",null,[n("p",null,[s("ASP.NET Core MVC 使用 "),n("a",B,[s("ModelStateInvalidFilter"),t(a)]),s(" 操作筛选器来执行自定义验证。")])]),N,n("p",null,[s("在默认校验的基础上添加对单行验证调用和循环检测递归的支持 仓库地址："),n("a",D,[s("https://github.com/DamianEdwards/MiniValidation"),t(a)])]),S,n("p",null,[s("模型绑定："),n("a",O,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0"),t(a)]),s(" 禁用绑定源推理："),n("a",z,[s("https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-5.0#disable-inference-rules"),t(a)]),s(" 禁用验证："),n("a",F,[s("https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/validation?view=aspnetcore-5.0#disable-validation"),t(a)]),s(" 禁用自动400响应："),n("a",U,[s("https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-5.0#disable-automatic-400-response"),t(a)])])])}const Z=p(r,[["render",G],["__file","moxingbangdingheyanzheng.html.vue"]]),J=JSON.parse('{"path":"/dotnet/api/controllerApi/moxingbangdingheyanzheng.html","title":"模型绑定和验证","lang":"zh-CN","frontmatter":{"title":"模型绑定和验证","lang":"zh-CN","date":"2023-10-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"moxingbangdingheyanzheng","slug":"btp3rp","docsId":"45493047","description":"说明 模型绑定就是接收将来自HTTP请求的数据映射到模型的过程，这个过程是自动进行的。如果找不到模型属性的值，并不会报错，而是给该属性设置默认值。 示例：比如我们有一个接口为 这个时候你的请求为：http://localhost:5000/api/pets/2?DogsOnly=true 路由系统选择该Action后，模型绑定会执行以下的步骤： 查找 ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/moxingbangdingheyanzheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"模型绑定和验证"}],["meta",{"property":"og:description","content":"说明 模型绑定就是接收将来自HTTP请求的数据映射到模型的过程，这个过程是自动进行的。如果找不到模型属性的值，并不会报错，而是给该属性设置默认值。 示例：比如我们有一个接口为 这个时候你的请求为：http://localhost:5000/api/pets/2?DogsOnly=true 路由系统选择该Action后，模型绑定会执行以下的步骤： 查找 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1623573025670-a091a4da-90ce-4dec-b630-43ccaebabf91.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T07:35:49.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T07:35:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模型绑定和验证\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1623573025670-a091a4da-90ce-4dec-b630-43ccaebabf91.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1623573080249-e2bc5bfc-bc98-490d-99cc-c5556f26f457.png\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T07:35:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"绑定源","slug":"绑定源","link":"#绑定源","children":[]},{"level":2,"title":"模型绑定","slug":"模型绑定","link":"#模型绑定","children":[{"level":3,"title":"绑定的规则","slug":"绑定的规则","link":"#绑定的规则","children":[]},{"level":3,"title":"简单模型绑定","slug":"简单模型绑定","link":"#简单模型绑定","children":[]},{"level":3,"title":"复杂类型","slug":"复杂类型","link":"#复杂类型","children":[]},{"level":3,"title":"内置自定义模型绑定","slug":"内置自定义模型绑定","link":"#内置自定义模型绑定","children":[]},{"level":3,"title":"自定义模型绑定","slug":"自定义模型绑定","link":"#自定义模型绑定","children":[{"level":4,"title":"请求头Token绑定","slug":"请求头token绑定","link":"#请求头token绑定","children":[]},{"level":4,"title":"数组绑定","slug":"数组绑定","link":"#数组绑定","children":[]},{"level":4,"title":"用IParsable进行复杂类型绑定","slug":"用iparsable进行复杂类型绑定","link":"#用iparsable进行复杂类型绑定","children":[]}]}]},{"level":2,"title":"模型校验","slug":"模型校验","link":"#模型校验","children":[{"level":3,"title":"验证特性","slug":"验证特性","link":"#验证特性","children":[{"level":4,"title":"内置验证特性","slug":"内置验证特性","link":"#内置验证特性","children":[]},{"level":4,"title":"自定义特性","slug":"自定义特性","link":"#自定义特性","children":[{"level":5,"title":"方案一","slug":"方案一","link":"#方案一","children":[]},{"level":5,"title":"方案二(类级别)","slug":"方案二-类级别","link":"#方案二-类级别","children":[]},{"level":5,"title":"方案三※","slug":"方案三※","link":"#方案三※","children":[]},{"level":5,"title":"方案四","slug":"方案四","link":"#方案四","children":[]}]}]},{"level":3,"title":"ModelState.IsValid","slug":"modelstate-isvalid","link":"#modelstate-isvalid","children":[]},{"level":3,"title":"禁用验证","slug":"禁用验证","link":"#禁用验证","children":[{"level":4,"title":"方案一","slug":"方案一-1","link":"#方案一-1","children":[]},{"level":4,"title":"方案二(推荐)","slug":"方案二-推荐","link":"#方案二-推荐","children":[]}]}]},{"level":2,"title":"统一模型拦截器","slug":"统一模型拦截器","link":"#统一模型拦截器","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[{"level":3,"title":"MiniValidation","slug":"minivalidation","link":"#minivalidation","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712388949000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":13.34,"words":4002},"filePathRelative":"dotnet/api/controllerApi/moxingbangdingheyanzheng.md","localizedDate":"2023年10月17日","excerpt":"<h2>说明</h2>\\n<p>模型绑定就是接收将来自HTTP请求的数据映射到模型的过程，这个过程是自动进行的。如果找不到模型属性的值，并不会报错，而是给该属性设置默认值。\\n示例：比如我们有一个接口为</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">HttpGet</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{id}\\"</span><span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">ActionResult<span class=\\"token punctuation\\">&lt;</span>Pet<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">GetById</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> id<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> dogsOnly<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{Z as comp,J as data};
