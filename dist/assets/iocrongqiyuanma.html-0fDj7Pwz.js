import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-vSdX8vi3.js";const p={},e=t(`<h2 id="创建ioc工厂" tabindex="-1"><a class="header-anchor" href="#创建ioc工厂"><span>创建IOC工厂</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 创建一个ioc工厂</span>
<span class="token doc-comment comment">/// 1.创建对象</span>
<span class="token doc-comment comment">/// 2.存储对象</span>
<span class="token doc-comment comment">/// 3.对象属性赋值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultIOCFactory</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// ioc容器（存储对象）</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> _iocContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不用list的原因是性能不如dictionary</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// ico type容器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> _iocTypeContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 创建ioc容器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token function">DefaultIOCFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//1.加载项目中的所有类型(反射类型的集合)</span>
		<span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;ConsoleApp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//2.通过反射从程序集获取对象类型</span>
		<span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//存储type</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> types<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> iocService <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOCService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>iocService <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				_iocTypeContainer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//3.创建对象  改为需要的时候再创建</span>

		<span class="token preprocessor property">#<span class="token directive keyword">region</span> 老方法</span>

		<span class="token comment">//foreach (var type in types)</span>
		<span class="token comment">//{</span>
		<span class="token comment">//    object _object = Activator.CreateInstance(type);//创建对象</span>

		<span class="token comment">//    //3.1 对象属性赋值</span>
		<span class="token comment">//    var propertyInfos = type.GetProperties();</span>
		<span class="token comment">//    foreach (var propertyInfo in propertyInfos)</span>
		<span class="token comment">//    {</span>
		<span class="token comment">//        foreach (var type1 in types)</span>
		<span class="token comment">//        {</span>
		<span class="token comment">//            if (type1.Name.Equals(propertyInfo.Name))</span>
		<span class="token comment">//            {</span>
		<span class="token comment">//                object _objectValue = Activator.CreateInstance(type1);</span>
		<span class="token comment">//                propertyInfo.SetValue(_object, _objectValue);</span>

		<span class="token comment">//                //到这一步正常的流程已经结束，但是如果属性里面这个类里面还有属性，那么就需要接着查找，所以这个时候应该使用递归方法</span>
		<span class="token comment">//            }</span>
		<span class="token comment">//        }</span>
		<span class="token comment">//    }</span>

		<span class="token comment">//    //3.2 存储对象</span>
		<span class="token comment">//    _iocContainer.Add(type.Name, _object);</span>
		<span class="token comment">//}</span>

		<span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

		<span class="token comment">//因为涉及到类里面用到了其他类，其他类又用到了其他类，所以这个时候需要递归去创建</span>
		<span class="token comment">//foreach (var type in types)</span>
		<span class="token comment">//{</span>
		<span class="token comment">//    //递归创建</span>
		<span class="token comment">//    object _object = CreateObject(type);</span>
		<span class="token comment">//    //存储对象</span>
		<span class="token comment">//    _iocContainer.Add(type.Name, _object);</span>
		<span class="token comment">//}</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 使用对象的时候创建对象</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> serviceName<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> _iocTypeContainer<span class="token punctuation">[</span>serviceName<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">//3.1 递归创建</span>
		<span class="token class-name"><span class="token keyword">object</span></span> _object <span class="token operator">=</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//3.2 存储对象</span>
		_iocContainer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> _object<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> _object<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token preprocessor property">#<span class="token directive keyword">region</span> 私有方法</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 两个工具</span>
	<span class="token doc-comment comment">/// 1.抽取代码里面通用的逻辑</span>
	<span class="token doc-comment comment">/// 2.在通用的代码逻辑里面抽取通用的参数</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>types<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_iocContainer<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> _iocContainer<span class="token punctuation">[</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//创建对象</span>
		<span class="token class-name"><span class="token keyword">object</span></span> _object <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>

		<span class="token comment">//3.1 对象属性赋值</span>
		<span class="token class-name"><span class="token keyword">var</span></span> propertyInfos <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> propertyInfo <span class="token keyword">in</span> propertyInfos<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//foreach (var type1 in types)</span>
			<span class="token comment">//{</span>
			<span class="token comment">//    if (type1.Name.Equals(propertyInfo.Name))</span>
			<span class="token comment">//    {</span>
			<span class="token comment">//        var _objectValue = CreateService(type1, types);</span>
			<span class="token comment">//        propertyInfo.SetValue(_object, _objectValue);</span>
			<span class="token comment">//    }</span>
			<span class="token comment">//}</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>propertyInfo<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>

			<span class="token class-name"><span class="token keyword">var</span></span> type1 <span class="token operator">=</span> _iocTypeContainer<span class="token punctuation">[</span>propertyInfo<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> _objectValue <span class="token operator">=</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>
			propertyInfo<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>_object<span class="token punctuation">,</span> _objectValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> _object<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建自定义标识" tabindex="-1"><a class="header-anchor" href="#创建自定义标识"><span>创建自定义标识</span></a></h2><p>用于标识那些需要存储到ioc容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// ioc类型过滤特性</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOCService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">IOCService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过简单类示例" tabindex="-1"><a class="header-anchor" href="#通过简单类示例"><span>通过简单类示例</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 老师类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>IOCService<span class="token punctuation">]</span><span class="token comment">//标识特性</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;老师开始上课&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 学生类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>IOCService<span class="token punctuation">]</span><span class="token comment">//标识特性</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name">Teacher</span> Teacher <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Teacher<span class="token punctuation">.</span><span class="token function">StartCourse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;学生开始学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过ioc容器创建对象调用方法" tabindex="-1"><a class="header-anchor" href="#通过ioc容器创建对象调用方法"><span>通过IOC容器创建对象调用方法</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//创建ioc容器</span>
<span class="token class-name">DefaultIOCFactory</span> _iOCFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultIOCFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>_iOCFactory<span class="token punctuation">.</span><span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>老师开始上课
学生开始学习
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","iocrongqiyuanma.html.vue"]]),m=JSON.parse('{"path":"/dotnet/base/yilaizhuru/iockongzhifanzhuai/iocrongqiyuanma.html","title":"IOC容器源码","lang":"zh-CN","frontmatter":{"title":"IOC容器源码","lang":"zh-CN","date":"2023-10-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"iocrongqiyuanma","slug":"zhb000","docsId":"32872614","description":"创建IOC工厂 创建自定义标识 用于标识那些需要存储到ioc容器 通过简单类示例 通过IOC容器创建对象调用方法 输出结果","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/iockongzhifanzhuai/iocrongqiyuanma.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"IOC容器源码"}],["meta",{"property":"og:description","content":"创建IOC工厂 创建自定义标识 用于标识那些需要存储到ioc容器 通过简单类示例 通过IOC容器创建对象调用方法 输出结果"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC容器源码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"创建IOC工厂","slug":"创建ioc工厂","link":"#创建ioc工厂","children":[]},{"level":2,"title":"创建自定义标识","slug":"创建自定义标识","link":"#创建自定义标识","children":[]},{"level":2,"title":"通过简单类示例","slug":"通过简单类示例","link":"#通过简单类示例","children":[{"level":3,"title":"通过IOC容器创建对象调用方法","slug":"通过ioc容器创建对象调用方法","link":"#通过ioc容器创建对象调用方法","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"dotnet/base/yilaizhuru/iockongzhifanzhuai/iocrongqiyuanma.md","localizedDate":"2023年10月17日","excerpt":"<h2>创建IOC工厂</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 创建一个ioc工厂</span>\\n<span class=\\"token doc-comment comment\\">/// 1.创建对象</span>\\n<span class=\\"token doc-comment comment\\">/// 2.存储对象</span>\\n<span class=\\"token doc-comment comment\\">/// 3.对象属性赋值</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DefaultIOCFactory</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// ioc容器（存储对象）</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">object</span><span class=\\"token punctuation\\">&gt;</span></span> _iocContainer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">object</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//这里不用list的原因是性能不如dictionary</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// ico type容器</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">,</span> Type<span class=\\"token punctuation\\">&gt;</span></span> _iocTypeContainer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">,</span> Type<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 创建ioc容器</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token function\\">DefaultIOCFactory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">//1.加载项目中的所有类型(反射类型的集合)</span>\\n\\t\\t<span class=\\"token class-name\\">Assembly</span> assembly <span class=\\"token operator\\">=</span> Assembly<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Load</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ConsoleApp4\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token comment\\">//2.通过反射从程序集获取对象类型</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> types <span class=\\"token operator\\">=</span> assembly<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetTypes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t<span class=\\"token comment\\">//存储type</span>\\n\\t\\t<span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> types<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> iocService <span class=\\"token operator\\">=</span> item<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">GetCustomAttribute</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>IOCService<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>iocService <span class=\\"token keyword\\">is</span> <span class=\\"token keyword\\">not</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t_iocTypeContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">,</span> item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\t<span class=\\"token comment\\">//3.创建对象  改为需要的时候再创建</span>\\n\\n\\t\\t<span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 老方法</span>\\n\\n\\t\\t<span class=\\"token comment\\">//foreach (var type in types)</span>\\n\\t\\t<span class=\\"token comment\\">//{</span>\\n\\t\\t<span class=\\"token comment\\">//    object _object = Activator.CreateInstance(type);//创建对象</span>\\n\\n\\t\\t<span class=\\"token comment\\">//    //3.1 对象属性赋值</span>\\n\\t\\t<span class=\\"token comment\\">//    var propertyInfos = type.GetProperties();</span>\\n\\t\\t<span class=\\"token comment\\">//    foreach (var propertyInfo in propertyInfos)</span>\\n\\t\\t<span class=\\"token comment\\">//    {</span>\\n\\t\\t<span class=\\"token comment\\">//        foreach (var type1 in types)</span>\\n\\t\\t<span class=\\"token comment\\">//        {</span>\\n\\t\\t<span class=\\"token comment\\">//            if (type1.Name.Equals(propertyInfo.Name))</span>\\n\\t\\t<span class=\\"token comment\\">//            {</span>\\n\\t\\t<span class=\\"token comment\\">//                object _objectValue = Activator.CreateInstance(type1);</span>\\n\\t\\t<span class=\\"token comment\\">//                propertyInfo.SetValue(_object, _objectValue);</span>\\n\\n\\t\\t<span class=\\"token comment\\">//                //到这一步正常的流程已经结束，但是如果属性里面这个类里面还有属性，那么就需要接着查找，所以这个时候应该使用递归方法</span>\\n\\t\\t<span class=\\"token comment\\">//            }</span>\\n\\t\\t<span class=\\"token comment\\">//        }</span>\\n\\t\\t<span class=\\"token comment\\">//    }</span>\\n\\n\\t\\t<span class=\\"token comment\\">//    //3.2 存储对象</span>\\n\\t\\t<span class=\\"token comment\\">//    _iocContainer.Add(type.Name, _object);</span>\\n\\t\\t<span class=\\"token comment\\">//}</span>\\n\\n\\t\\t<span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span></span>\\n\\n\\t\\t<span class=\\"token comment\\">//因为涉及到类里面用到了其他类，其他类又用到了其他类，所以这个时候需要递归去创建</span>\\n\\t\\t<span class=\\"token comment\\">//foreach (var type in types)</span>\\n\\t\\t<span class=\\"token comment\\">//{</span>\\n\\t\\t<span class=\\"token comment\\">//    //递归创建</span>\\n\\t\\t<span class=\\"token comment\\">//    object _object = CreateObject(type);</span>\\n\\t\\t<span class=\\"token comment\\">//    //存储对象</span>\\n\\t\\t<span class=\\"token comment\\">//    _iocContainer.Add(type.Name, _object);</span>\\n\\t\\t<span class=\\"token comment\\">//}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 使用对象的时候创建对象</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>serviceName<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">object</span></span> <span class=\\"token function\\">GetObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> serviceName<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> type <span class=\\"token operator\\">=</span> _iocTypeContainer<span class=\\"token punctuation\\">[</span>serviceName<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t<span class=\\"token comment\\">//3.1 递归创建</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span> _object <span class=\\"token operator\\">=</span> <span class=\\"token function\\">CreateObject</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t<span class=\\"token comment\\">//3.2 存储对象</span>\\n\\t\\t_iocContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">,</span> _object<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> _object<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 私有方法</span>\\n\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// 两个工具</span>\\n\\t<span class=\\"token doc-comment comment\\">/// 1.抽取代码里面通用的逻辑</span>\\n\\t<span class=\\"token doc-comment comment\\">/// 2.在通用的代码逻辑里面抽取通用的参数</span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>type<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>types<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">object</span></span> <span class=\\"token function\\">CreateObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Type</span> type<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_iocContainer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ContainsKey</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> _iocContainer<span class=\\"token punctuation\\">[</span>type<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\t<span class=\\"token comment\\">//创建对象</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span> _object <span class=\\"token operator\\">=</span> Activator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateInstance</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//创建对象</span>\\n\\n\\t\\t<span class=\\"token comment\\">//3.1 对象属性赋值</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> propertyInfos <span class=\\"token operator\\">=</span> type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetProperties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> propertyInfo <span class=\\"token keyword\\">in</span> propertyInfos<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">//foreach (var type1 in types)</span>\\n\\t\\t\\t<span class=\\"token comment\\">//{</span>\\n\\t\\t\\t<span class=\\"token comment\\">//    if (type1.Name.Equals(propertyInfo.Name))</span>\\n\\t\\t\\t<span class=\\"token comment\\">//    {</span>\\n\\t\\t\\t<span class=\\"token comment\\">//        var _objectValue = CreateService(type1, types);</span>\\n\\t\\t\\t<span class=\\"token comment\\">//        propertyInfo.SetValue(_object, _objectValue);</span>\\n\\t\\t\\t<span class=\\"token comment\\">//    }</span>\\n\\t\\t\\t<span class=\\"token comment\\">//}</span>\\n\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>propertyInfo<span class=\\"token punctuation\\">.</span>PropertyType <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\"><span class=\\"token keyword\\">string</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> type1 <span class=\\"token operator\\">=</span> _iocTypeContainer<span class=\\"token punctuation\\">[</span>propertyInfo<span class=\\"token punctuation\\">.</span>PropertyType<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> _objectValue <span class=\\"token operator\\">=</span> <span class=\\"token function\\">CreateObject</span><span class=\\"token punctuation\\">(</span>type1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tpropertyInfo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetValue</span><span class=\\"token punctuation\\">(</span>_object<span class=\\"token punctuation\\">,</span> _objectValue<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> _object<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span></span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,m as data};
