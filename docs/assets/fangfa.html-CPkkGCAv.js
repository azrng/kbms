import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D8HBJYTp.js";const p={},e=t(`<h2 id="isassignablefrom" tabindex="-1"><a class="header-anchor" href="#isassignablefrom"><span>IsAssignableFrom</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> res <span class="token operator">=</span> <span class="token punctuation">{</span>TypeA<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TypeB<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
如果TypeA和TypeB类型一样则返回<span class="token boolean">true</span>；
如果TypeA是TypeB的父类则返回<span class="token boolean">true</span><span class="token punctuation">;</span>
如果TypeB实现了接口TypeA则返回<span class="token boolean">true</span><span class="token punctuation">;</span>

A<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>
确定一个类<span class="token punctuation">(</span>B<span class="token punctuation">)</span>是不是继承来自于另一个父类<span class="token punctuation">(</span>A<span class="token punctuation">)</span>
一个接口<span class="token punctuation">(</span>A<span class="token punctuation">)</span>是不是实现了另外一个接口<span class="token punctuation">(</span>B<span class="token punctuation">)</span>或两个类相同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过反射将DataTable转List</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 反射将datatable转换为List对象</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>实体类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>this<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>datatable数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>List对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ConvertToListObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">DataTable</span> @<span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> @<span class="token keyword">this</span><span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> @<span class="token keyword">this</span><span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">T</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		obj <span class="token operator">=</span> <span class="token function">ConvertToObjectFromDR</span><span class="token punctuation">(</span>@<span class="token keyword">this</span><span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
		objs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> objs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一个类继承另一个类的扩展" tabindex="-1"><a class="header-anchor" href="#一个类继承另一个类的扩展"><span>一个类继承另一个类的扩展</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 一个类是否继承自另外一个类型</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>givenType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>genericType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsAssignableToOpenGenericType</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Type</span> givenType<span class="token punctuation">,</span> <span class="token class-name">Type</span> genericType<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> it <span class="token keyword">in</span> givenType<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>IsGenericType <span class="token operator">&amp;&amp;</span> it<span class="token punctuation">.</span><span class="token function">GetGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> genericType<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>givenType<span class="token punctuation">.</span>IsGenericType <span class="token operator">&amp;&amp;</span> givenType<span class="token punctuation">.</span><span class="token function">GetGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> genericType<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> baseType <span class="token operator">=</span> givenType<span class="token punctuation">.</span>BaseType<span class="token punctuation">;</span>
    <span class="token keyword">return</span> baseType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsAssignableToOpenGenericType</span><span class="token punctuation">(</span>baseType<span class="token punctuation">,</span> genericType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取程序集中继承某一个泛型" tabindex="-1"><a class="header-anchor" href="#获取程序集中继承某一个泛型"><span>获取程序集中继承某一个泛型</span></a></h2><p>获取继承某一个泛型，且泛型对象是某一个类型</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> handlerType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IIntegrationEventHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IntegrationEvent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                          <span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>IsGenericType <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">GetGenericTypeDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> handlerType <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>GenericTypeArguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","fangfa.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/fanshe/fangfa.html","title":"方法","lang":"zh-CN","frontmatter":{"title":"方法","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"fangfa","slug":"eorcq0","docsId":"44171493","description":"IsAssignableFrom 通过反射将DataTable转List 一个类继承另一个类的扩展 获取程序集中继承某一个泛型 获取继承某一个泛型，且泛型对象是某一个类型","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/fanshe/fangfa.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"方法"}],["meta",{"property":"og:description","content":"IsAssignableFrom 通过反射将DataTable转List 一个类继承另一个类的扩展 获取程序集中继承某一个泛型 获取继承某一个泛型，且泛型对象是某一个类型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"IsAssignableFrom","slug":"isassignablefrom","link":"#isassignablefrom","children":[]},{"level":2,"title":"一个类继承另一个类的扩展","slug":"一个类继承另一个类的扩展","link":"#一个类继承另一个类的扩展","children":[]},{"level":2,"title":"获取程序集中继承某一个泛型","slug":"获取程序集中继承某一个泛型","link":"#获取程序集中继承某一个泛型","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"dotnet/csharp/fanshe/fangfa.md","localizedDate":"2023年10月22日","excerpt":"<h2>IsAssignableFrom</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> res <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>TypeA<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsAssignableFrom</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>TypeB<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">;</span>\\n如果TypeA和TypeB类型一样则返回<span class=\\"token boolean\\">true</span>；\\n如果TypeA是TypeB的父类则返回<span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n如果TypeB实现了接口TypeA则返回<span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\nA<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isAssignableFrom</span><span class=\\"token punctuation\\">(</span>B<span class=\\"token punctuation\\">)</span>\\n确定一个类<span class=\\"token punctuation\\">(</span>B<span class=\\"token punctuation\\">)</span>是不是继承来自于另一个父类<span class=\\"token punctuation\\">(</span>A<span class=\\"token punctuation\\">)</span>\\n一个接口<span class=\\"token punctuation\\">(</span>A<span class=\\"token punctuation\\">)</span>是不是实现了另外一个接口<span class=\\"token punctuation\\">(</span>B<span class=\\"token punctuation\\">)</span>或两个类相同\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
