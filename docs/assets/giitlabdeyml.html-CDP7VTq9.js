import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,b as e}from"./app-Bw62I61B.js";const t={},l=e(`<h2 id="通用配置" tabindex="-1"><a class="header-anchor" href="#通用配置"><span>通用配置</span></a></h2><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>colors
  <span class="token punctuation">-</span> red
  <span class="token punctuation">-</span> blue
  <span class="token punctuation">-</span> yellow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于JSON中的</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span> <span class="token key atrule">&quot;colors&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;yellow&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">people</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于JSON中的</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>
  <span class="token key atrule">&quot;people&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token key atrule">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;zhangsan&quot;</span>
     <span class="token key atrule">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">14</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组和对象嵌套" tabindex="-1"><a class="header-anchor" href="#数组和对象嵌套"><span>数组和对象嵌套</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">a</span><span class="token punctuation">:</span>
  <span class="token key atrule">b</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> d
  <span class="token key atrule">c</span><span class="token punctuation">:</span> e
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于JSON中</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>
  <span class="token key atrule">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token key atrule">&quot;b&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token key atrule">&quot;c&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;e&quot;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特定关键字" tabindex="-1"><a class="header-anchor" href="#特定关键字"><span>特定关键字</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>stages
stage
script
tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>stages定义在YML文件的最外层，它的值是一个数组，用于定义一个pipeline不同的流程节点</p><p>例如我们定义如下:</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">stages</span><span class="token punctuation">:</span> <span class="token comment">## 分段</span>
  <span class="token punctuation">-</span> install
  <span class="token punctuation">-</span> eslint
  <span class="token punctuation">-</span> build
  <span class="token punctuation">-</span> deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Job是pipeline的任务节点，它构成了pipeline的基本单元</strong> 而stage/script/tags这三个关键字，都是作为Job的子属性来使用的,如下所示，install就是我们定义的一个Job</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">install</span><span class="token punctuation">:</span>
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> sss
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> install
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> npm install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>stage</strong> 是一个字符串，且是stages数组的一个子项，表示的是当前的pipeline节点。 当前stage的执行情况能在交互面板上能看的清清楚楚：</p><ul><li>正在执行是蓝色</li><li>尚未执行是灰色</li><li>执行成功是绿色</li><li>执行失败是红色</li></ul><p><strong>script</strong> 它是当前pipeline节点运行的shell脚本（以项目根目录为上下文执行）。 这个script是我们控制CI流程的核心，我们所有的工作：从安装，编译到部署都是通过script中定义的shell脚本来完成的。 如果脚本执行成功，pipeline就会进入下一个Job节点，如果执行失败那么pipeline就会终止 <strong>tags</strong> tags是当前Job的标记，<strong>这个tags关键字是很重要，因为gitlab的runner会通过tags去判断能否执行当前这个Job</strong> 例如我们在gitlab的面板中能看到当前激活的runner的信息</p>`,23),i=[l];function p(c,o){return a(),s("div",null,i)}const r=n(t,[["render",p],["__file","giitlabdeyml.html.vue"]]),m=JSON.parse('{"path":"/cloud/ciAndCd/gitlab/giitlabdeyml.html","title":"Giitlab的yml","lang":"zh-CN","frontmatter":{"title":"Giitlab的yml","lang":"zh-CN","date":"2023-09-08T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"giitlabdeyml","slug":"hzs5bn","docsId":"52072490","description":"通用配置 数组 相当于JSON中的 对象 相当于JSON中的 数组和对象嵌套 相当于JSON中 特定关键字 stages定义在YML文件的最外层，它的值是一个数组，用于定义一个pipeline不同的流程节点 例如我们定义如下: Job是pipeline的任务节点，它构成了pipeline的基本单元 而stage/script/tags这三个关键字，都是...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/gitlab/giitlabdeyml.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Giitlab的yml"}],["meta",{"property":"og:description","content":"通用配置 数组 相当于JSON中的 对象 相当于JSON中的 数组和对象嵌套 相当于JSON中 特定关键字 stages定义在YML文件的最外层，它的值是一个数组，用于定义一个pipeline不同的流程节点 例如我们定义如下: Job是pipeline的任务节点，它构成了pipeline的基本单元 而stage/script/tags这三个关键字，都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T07:50:54.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T07:50:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Giitlab的yml\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T07:50:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"通用配置","slug":"通用配置","link":"#通用配置","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"数组和对象嵌套","slug":"数组和对象嵌套","link":"#数组和对象嵌套","children":[]}]},{"level":2,"title":"特定关键字","slug":"特定关键字","link":"#特定关键字","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1695541854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.52,"words":457},"filePathRelative":"cloud/ciAndCd/gitlab/giitlabdeyml.md","localizedDate":"2023年9月8日","excerpt":"<h2>通用配置</h2>\\n<h3>数组</h3>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code>colors\\n  <span class=\\"token punctuation\\">-</span> red\\n  <span class=\\"token punctuation\\">-</span> blue\\n  <span class=\\"token punctuation\\">-</span> yellow\\n</code></pre></div><p>相当于JSON中的</p>","autoDesc":true}');export{r as comp,m as data};
