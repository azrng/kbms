import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as u}from"./app-CBxp4zeL.js";const l="/kbms/common/1643893176902-9c5e1ef6-42e3-4e64-8dd9-37b6a4156d09.webp",i={},k=u('<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>为了安全性起见，客户要求客户端必须将数据加密后才能传给服务端。 起先，准备使用非对称加密（RSA）方式，但是发现它对原始文本长度有限制。 而对称加密(AES)没有长度限制，但是使用固定密钥存在暴露的风险。</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>密钥肯定每个用户不同，而要验证用户则必须登录。 因此，唯一可以安全获取密钥的时机，只能是在登录时。 而为了保证用户名密码传输安全，可以使用RSA公钥加密后传输，所有客户端使用同一公钥也没问题。 登录成功后，服务端将生成token和AES密钥返回给客户端。但是，返回的AES密钥是经过加密的，而加密密钥则是“用户名+密码”。 <strong>这样保证了，只有刚才成功登录的客户端才能解密出AES密钥。</strong> 以后的传输，全部使用AES加密，服务端可以根据token从缓存获取AES密钥解密。 整体流程如下图： <img src="'+l+`" alt="" loading="lazy"> 缺点：这样子的话，客户端也需要保存住用户的账号密码，因为每次传输的时候要使用到密码进行加密使用的。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="服务端实现" tabindex="-1"><a class="header-anchor" href="#服务端实现"><span>服务端实现</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Login&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">LoginOutput</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name">LoginInput</span> input<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> userName <span class="token operator">=</span> RsaHelper<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> password <span class="token operator">=</span> RsaHelper<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>Password<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tmpKey<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tmpIV<span class="token punctuation">)</span> <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">CreateKeyIV</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> password<span class="token punctuation">,</span> password <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> iv<span class="token punctuation">)</span> <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">CreateKeyIV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _cache<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoginOutput</span>
    <span class="token punctuation">{</span>
        Token <span class="token operator">=</span> token<span class="token punctuation">,</span>
        Key <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> tmpKey<span class="token punctuation">,</span> tmpIV<span class="token punctuation">)</span><span class="token punctuation">,</span>
        IV <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">,</span> tmpKey<span class="token punctuation">,</span> tmpIV<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;TestMethod&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> token<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> cipherText<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> iv<span class="token punctuation">)</span> <span class="token operator">=</span> _cache<span class="token punctuation">[</span>token<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> AesHelper<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Login用于验证用户密码并返回token和AES密钥. TestMethod用于演示接收客户端数据如何解密，为了演示方便，直接在URL传递token。</p><h3 id="客户端实现" tabindex="-1"><a class="header-anchor" href="#客户端实现"><span>客户端实现</span></a></h3><p>使用xunit测试项目演示客户端操作，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//登录获得AES密钥</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span> <span class="token string">&quot;/Demo/Login&quot;</span><span class="token punctuation">,</span>
        JsonContent<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebApplication1<span class="token punctuation">.</span>LoginInput</span><span class="token punctuation">{</span> 
            UserName <span class="token operator">=</span> RsaHelper<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Password <span class="token operator">=</span> RsaHelper<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> loginResult <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WebApplication1<span class="token punctuation">.</span>LoginOutput<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tmpKey<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> tmpIV<span class="token punctuation">)</span> <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">CreateKeyIV</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> password<span class="token punctuation">,</span> password <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> key <span class="token operator">=</span>Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>AesHelper<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>loginResult<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> tmpKey<span class="token punctuation">,</span> tmpIV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> iv <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>AesHelper<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>loginResult<span class="token punctuation">.</span>IV<span class="token punctuation">,</span> tmpKey<span class="token punctuation">,</span> tmpIV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//使用AES密钥加密</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cipherText <span class="token operator">=</span> AesHelper<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>PlainText<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/Demo/TestMethod?token=&quot;</span> <span class="token operator">+</span> loginResult<span class="token punctuation">.</span>Token<span class="token punctuation">,</span>
        JsonContent<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>cipherText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> decryptResult <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    _output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>decryptResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>PlainText<span class="token punctuation">,</span> decryptResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将大量数据（千字文）加密后传给服务。 可以看到，返回了正确的原始数据。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,13),r={href:"https://mp.weixin.qq.com/s/QEw9VxcikT7PVB17PMEt9g",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[k,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/QEw9VxcikT7PVB17PMEt9g"),c(a)]),s(" | 请收藏！这可能是目前最安全的数据加密传输解决方案")])])}const b=t(i,[["render",d],["__file","shujuchuanshujiami.html.vue"]]),g=JSON.parse('{"path":"/dotnet/api/shujuchuanshujiami.html","title":"数据传输加密","lang":"zh-CN","frontmatter":{"title":"数据传输加密","lang":"zh-CN","date":"2023-06-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shujuchuanshujiami","slug":"hgk2uw","docsId":"65982472","description":"需求 为了安全性起见，客户要求客户端必须将数据加密后才能传给服务端。 起先，准备使用非对称加密（RSA）方式，但是发现它对原始文本长度有限制。 而对称加密(AES)没有长度限制，但是使用固定密钥存在暴露的风险。 思路 密钥肯定每个用户不同，而要验证用户则必须登录。 因此，唯一可以安全获取密钥的时机，只能是在登录时。 而为了保证用户名密码传输安全，可以使...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/shujuchuanshujiami.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据传输加密"}],["meta",{"property":"og:description","content":"需求 为了安全性起见，客户要求客户端必须将数据加密后才能传给服务端。 起先，准备使用非对称加密（RSA）方式，但是发现它对原始文本长度有限制。 而对称加密(AES)没有长度限制，但是使用固定密钥存在暴露的风险。 思路 密钥肯定每个用户不同，而要验证用户则必须登录。 因此，唯一可以安全获取密钥的时机，只能是在登录时。 而为了保证用户名密码传输安全，可以使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1643893176902-9c5e1ef6-42e3-4e64-8dd9-37b6a4156d09.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据传输加密\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1643893176902-9c5e1ef6-42e3-4e64-8dd9-37b6a4156d09.webp\\"],\\"datePublished\\":\\"2023-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"服务端实现","slug":"服务端实现","link":"#服务端实现","children":[]},{"level":3,"title":"客户端实现","slug":"客户端实现","link":"#客户端实现","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"dotnet/api/shujuchuanshujiami.md","localizedDate":"2023年6月24日","excerpt":"<h2>需求</h2>\\n<p>为了安全性起见，客户要求客户端必须将数据加密后才能传给服务端。\\n起先，准备使用非对称加密（RSA）方式，但是发现它对原始文本长度有限制。\\n而对称加密(AES)没有长度限制，但是使用固定密钥存在暴露的风险。</p>\\n<h2>思路</h2>\\n<p>密钥肯定每个用户不同，而要验证用户则必须登录。\\n因此，唯一可以安全获取密钥的时机，只能是在登录时。\\n而为了保证用户名密码传输安全，可以使用RSA公钥加密后传输，所有客户端使用同一公钥也没问题。\\n登录成功后，服务端将生成token和AES密钥返回给客户端。但是，返回的AES密钥是经过加密的，而加密密钥则是“用户名+密码”。\\n<strong>这样保证了，只有刚才成功登录的客户端才能解密出AES密钥。</strong>\\n以后的传输，全部使用AES加密，服务端可以根据token从缓存获取AES密钥解密。\\n整体流程如下图：\\n<img src=\\"/common/1643893176902-9c5e1ef6-42e3-4e64-8dd9-37b6a4156d09.webp\\" alt=\\"\\" loading=\\"lazy\\">\\n缺点：这样子的话，客户端也需要保存住用户的账号密码，因为每次传输的时候要使用到密码进行加密使用的。</p>","autoDesc":true}');export{b as comp,g as data};
