import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as s,d as n,e as t,b as e}from"./app-qB9_Bjjp.js";const i="/kbms/common/1647351202528-27db7cf5-7a43-4f9b-a919-1544347ebcf5.png",u="/kbms/common/1647351477831-f9d384d4-39db-49f1-a43f-80b79d241577.png",r={},k=e('<h2 id="autofilterer" tabindex="-1"><a class="header-anchor" href="#autofilterer"><span>AutoFilterer</span></a></h2><p>在业务开发中，一个常用的功能就是“高级查询”，就是客户可以根据自己的需要设置查询条件查找数据，类似下图： <img src="'+i+`" alt="image.png" loading="lazy"> 通常，我们需要为每个“高级查询”定制Dto类，用于传输条件，并要根据条件组合成查询语句执行数据库查询操作，费时费力。 现在，使用AutoFilterer.Generators可以轻松实现上述功能。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoFilterer.Generators&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.12.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在WeatherForecast类上添加GenerateAutoFilterAttribute:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">GenerateAutoFilter</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecast</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Date <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TemperatureC <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TemperatureF <span class="token operator">=&gt;</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>TemperatureC <span class="token operator">/</span> <span class="token number">0.5556</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Summary <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，修改WeatherForecastController.cs的Get方法，增加WeatherForecastFilter参数：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span><span class="token class-name">WeatherForecastFilter</span> filter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Change range to 100 from 5 to get more reasonable results.</span>
    <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeatherForecast</span>
    <span class="token punctuation">{</span>
        Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
        TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token comment">//使用filter</span>
    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AutoFilterer.Generators提供了IQueryable.ApplyFilter(filter)扩展方法，可以根据高级查询条件进行数据筛选。 运行程序，可以在Swagger UI看到多了许多参数，高级查询”服务已经完成了。你可以传入最小最大值范围，排序方式，分页方式。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p>只能提供简单的范围筛选。</p><h2 id="dynamic-core" tabindex="-1"><a class="header-anchor" href="#dynamic-core"><span>Dynamic.Core</span></a></h2>`,13),d={href:"https://dynamic-linq.net/",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;System.Linq.Dynamic.Core&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.2.18&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建DynamicLinqDto，用于传递返回字段、查询条件、排序方式、分页方式等:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicLinqDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Fields <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Filter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderBy <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> PageNo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> PageSize <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改默认的Get方法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ProducesDefaultResponseType</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WeatherForecast</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromQuery</span></span><span class="token punctuation">]</span> <span class="token class-name">DynamicLinqDto</span> dto<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IQueryable</span> query <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeatherForecast</span>
    <span class="token punctuation">{</span>
        Date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
        TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">ToDynamicArray</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于Get方法的返回类型是IEnumerable，因此需要使用ProducesDefaultResponseTypeAttribute指定实际返回的类型，以便Swagger页面能显示正确。</p><p>上面最关键的代码是ToDynamicArray方法。实际上，这是我们封装的扩展方法，对于任意IQueryable对象，实现高级查询：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DynamicLinqExtentions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">dynamic</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">ToDynamicArray</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable</span> query<span class="token punctuation">,</span> <span class="token class-name">DynamicLinqDto</span> dto<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>Fields<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$@&quot;new(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dto<span class="token punctuation">.</span>Fields</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>OrderBy<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>OrderBy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> pageNo <span class="token operator">=</span> dto<span class="token punctuation">.</span>PageNo <span class="token operator">??</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pageSize <span class="token operator">=</span> dto<span class="token punctuation">.</span>PageSize <span class="token operator">??</span> <span class="token number">10</span><span class="token punctuation">;</span>
        query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Page</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">ToDynamicArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行项目，传入指定的参数并执行 <img src="`+u+'" alt="image.png" loading="lazy"> 可以看到，现在，“高级查询”服务已经完成了。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>',12),v={href:"https://mp.weixin.qq.com/s/rHhkbms8P2-ttEKh0c9DNQ",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/61BefU8xxXo79IU7kbjA3A",target:"_blank",rel:"noopener noreferrer"};function y(g,h){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,s("p",null,[n("使用Dynamic LINQ轻松实现更强大的高级查询服务。 官网："),s("a",d,[n("https://dynamic-linq.net/"),t(a)])]),m,s("p",null,[s("a",v,[n("https://mp.weixin.qq.com/s/rHhkbms8P2-ttEKh0c9DNQ"),t(a)]),n(" | 使用Dynamic LINQ创建高级查询服务 "),s("a",b,[n("https://mp.weixin.qq.com/s/61BefU8xxXo79IU7kbjA3A"),t(a)]),n(" | 一秒创建高级查询服务")])])}const x=p(r,[["render",y],["__file","gaojichaxun.html.vue"]]),q=JSON.parse('{"path":"/dotnet/api/controllerApi/extensions/gaojichaxun.html","title":"高级查询","lang":"zh-CN","frontmatter":{"title":"高级查询","lang":"zh-CN","date":"2023-05-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gaojichaxun","slug":"qr1c31","docsId":"69572416","description":"AutoFilterer 在业务开发中，一个常用的功能就是“高级查询”，就是客户可以根据自己的需要设置查询条件查找数据，类似下图： image.png 通常，我们需要为每个“高级查询”定制Dto类，用于传输条件，并要根据条件组合成查询语句执行数据库查询操作，费时费力。 现在，使用AutoFilterer.Generators可以轻松实现上述功能。 示例...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/extensions/gaojichaxun.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"高级查询"}],["meta",{"property":"og:description","content":"AutoFilterer 在业务开发中，一个常用的功能就是“高级查询”，就是客户可以根据自己的需要设置查询条件查找数据，类似下图： image.png 通常，我们需要为每个“高级查询”定制Dto类，用于传输条件，并要根据条件组合成查询语句执行数据库查询操作，费时费力。 现在，使用AutoFilterer.Generators可以轻松实现上述功能。 示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1647351202528-27db7cf5-7a43-4f9b-a919-1544347ebcf5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级查询\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1647351202528-27db7cf5-7a43-4f9b-a919-1544347ebcf5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1647351477831-f9d384d4-39db-49f1-a43f-80b79d241577.png\\"],\\"datePublished\\":\\"2023-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"AutoFilterer","slug":"autofilterer","link":"#autofilterer","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"Dynamic.Core","slug":"dynamic-core","link":"#dynamic-core","children":[{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"dotnet/api/controllerApi/extensions/gaojichaxun.md","localizedDate":"2023年5月29日","excerpt":"<h2>AutoFilterer</h2>\\n<p>在业务开发中，一个常用的功能就是“高级查询”，就是客户可以根据自己的需要设置查询条件查找数据，类似下图：\\n<img src=\\"/common/1647351202528-27db7cf5-7a43-4f9b-a919-1544347ebcf5.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n通常，我们需要为每个“高级查询”定制Dto类，用于传输条件，并要根据条件组合成查询语句执行数据库查询操作，费时费力。\\n现在，使用AutoFilterer.Generators可以轻松实现上述功能。</p>\\n<h3>示例</h3>\\n<p>引用组件</p>","autoDesc":true}');export{x as comp,q as data};
