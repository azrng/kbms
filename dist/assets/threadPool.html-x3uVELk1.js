import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-vSdX8vi3.js";const i="/kbms/common/1677076461482-fc51de8a-7157-42ad-aca4-667b5ebdec8a.png",u="/kbms/common/1677076483564-b644e0fa-256b-4ce3-84ca-dd7fbaffc0b7.png",k={},r=p(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>线程池就是一组预先创建的线程(或者理解为租赁公司，但是并不会在程序启动的时候就创建好所有线程)，可以被重复使用用来执行多个任务，它提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。因为线程的创建和销毁需要很大的性能开销，所以线程池可以避免频繁创建和销毁线程，从而减少线程创建和销毁的开销，提高了系统的性能和效率，在windows nt 内核的操作系统中，每个进程都会包含一个线程池，而在net中，也有自己的线程池，是由clr负责管理的。<strong>异步编程默认使用线程池</strong></p><p>线程池<strong>初始化是没有线程</strong>的，当应用程序需要一个新的线程时候，就可以从线程池中直接获取一个已经存在的线程，若此处线程池中没有空闲的线程，那么就根据内部算法创建新的线程来处理任务，同样当一个线程使用完毕后并不会立即被销毁，而是放入线程池中等待下一次使用，当线程池内的线程数量达到其预设的最大值，而所有线程都在忙碌，新提交的任务就会被放在任务队列中等待执行，直到有线程完成任务并返回到线程池。</p><blockquote><p>保持使用线程池线程的操作都是短暂的。不要使用线程池线程做长时间运行的操作或者阻塞工作线程。</p></blockquote><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>当开始一个线程的时候，将花费几百微秒来组织类似以下的内容： <ul><li>一个新的局部变量栈(Stack)</li></ul></li><li>线程池可以节省这种开销： <ul><li>通过预先创建一个可循环使用的线程池来减少这一开销。</li></ul></li><li>线程池对于高效的并行编程和细粒度并发是必不可少的。</li><li>它允许在不被线程启动的开销淹没的情况下运行短期的操作(任务时间还没线程启动时间长)。</li></ul><p>让thread得到更好的使用，提高利用率，减少不必要的创建和销毁。</p><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h3><ul><li>不可以设置池线程的Name</li><li>线程池的线程都是后台线程。</li><li>阻塞池线程可使性能降级。</li><li>你可以自由的更改线程的优先级 <ul><li>当它释放回池的时候优先级将还原为正常状态。</li></ul></li></ul><p>Thread.CurrentThread.IsThreadPoolThread属性可用于确认当前运行的线程是否是一个线程池线程。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="threadpool" tabindex="-1"><a class="header-anchor" href="#threadpool"><span>ThreadPool</span></a></h3><h4 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h4><ul><li>无参数 <ul><li>ThreadPool.QueueUserWorkItem(_ =&gt; { ........... });</li></ul></li><li>object参数 <ul><li>ThreadPool.QueueUserWorkItem(obj =&gt; { p = obj as Person; ........... }, new Person() { Name = &quot;Edison&quot; });</li><li>由于是object类型，涉及到多余的类型转换</li></ul></li><li>泛型参数 <ul><li>ThreadPool.QueueUserWorkItem(p =&gt; { ........... }, new Person() { Name = &quot;Edison&quot; }, true);</li><li>第三个参数 bool preferLocal，一般建议传true，代表优先使用线程本地队列（Local Queue） 而不是 全局队列（Work Queue），降低锁竞争。</li></ul></li><li>其他方法 <ul><li>GetMinThreads, GetMaxThreads</li><li>ThreadCount、CompletedWorkItemCount</li></ul></li></ul><h4 id="queueuserworkitem" tabindex="-1"><a class="header-anchor" href="#queueuserworkitem"><span>QueueUserWorkItem</span></a></h4><p>在nef4.0之前没有Task，所以需要使用QueueUserWorkItem</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建两个新的 Task默认是在ThreadPool上运行</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>PerformAction2<span class="token punctuation">,</span> <span class="token string">&quot;task&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;for循环结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//task是等待for循环结束后才执行的</span>
<span class="token comment">// 执行并等待两个 Task 执行完成</span>
Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Tasks done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任务添加进线程池" tabindex="-1"><a class="header-anchor" href="#任务添加进线程池"><span>任务添加进线程池</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitCallback</span><span class="token punctuation">(</span>方法名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
或
ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitCallback</span><span class="token punctuation">(</span>方法名<span class="token punctuation">)</span><span class="token punctuation">,</span> 参数<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设计图" tabindex="-1"><a class="header-anchor" href="#设计图"><span>设计图</span></a></h4><p><img src="`+i+'" alt="76cc50fb58ab073010e57d3bd8cfed6a.png" loading="lazy"> 在老版本的.NET Framework时代，只有一个全局队列，存在大量的锁竞争。 .NET Core中加入了本地队列，加入了本地队列，降低了锁竞争，并提高了线程的利用率。 <img src="'+u+`" alt="0c2defacd51932ac7e9e11ad5ce5227d.png" loading="lazy"> 具体实现思路是： （1）每个线程优先从本地队列中取任务干活； （2）如果本地队列中没有任务了，就从全局队列中取任务干活； （3）当全局任务队列里面的任务没有的时候，CLR将会把其他有任务的线程中的未处理任务（比如上图中的WorkItem3），分配给这些空闲的线程（比如上图中的Thread3）去执行。这个机制也被称之为 偷窃机制。</p><p>这样子做的目的就是让每个线程都有事情干，即提高线程池中线程的利用率。</p><h3 id="task" tabindex="-1"><a class="header-anchor" href="#task"><span>Task</span></a></h3><ul><li>Task 可以作为 ThreadPool 队列系统的基本单元被 ThreadPool 调度执行。</li><li>在线程池上运行代码最简单的方式(在netf4.5的时候引入的)，提供等待、终止、返回值等操作功能。</li></ul><h4 id="如何创建task" tabindex="-1"><a class="header-anchor" href="#如何创建task"><span>如何创建Task</span></a></h4><h5 id="new-task" tabindex="-1"><a class="header-anchor" href="#new-task"><span>new Task</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>new Task(_ =&gt;
{
    Console.WriteLine(&quot;Hello World!&quot;);
}, null).Start();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="task-factory-startnew" tabindex="-1"><a class="header-anchor" href="#task-factory-startnew"><span>Task.Factory.StartNew</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 无参数
var task = Task.Factory.StartNew(()=&gt;
{
    Console.WriteLine($&quot;Current ThreadId={Environment.CurrentManagedThreadId}&quot;);
});
// 有参
var task = Task.Factory.StartNew((obj)=&gt;
{
    Console.WriteLine($&quot;Current ThreadId={Environment.CurrentManagedThreadId}, Current Content={obj}&quot;);
}, &quot;Hello World&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="task-run" tabindex="-1"><a class="header-anchor" href="#task-run"><span>Task.Run</span></a></h5><ul><li>传入一个Action委托即可</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Task.Run<span class="token variable"><span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Console.WriteLine<span class="token punctuation">(</span>&quot;task <span class="token number">1</span>&quot;<span class="token punctuation">))</span></span><span class="token punctuation">;</span>
Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//等待线程执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回一个Task对象，可以使用它来监视其过程。 <ul><li>在Task之后，我们没有调用start，因为该方法创建的是“热”任务(创建完就开始运行)</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 无参数</span>
<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Current ThreadId=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 有参</span>
<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Current ThreadId=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">, Current Content=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">obj</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以通过Task的Status属性来跟踪task的执行状态。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task.Run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建两个新的 Task默认是在ThreadPool上运行</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task1 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;task 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;task 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行并等待两个 Task 执行完成</span>
    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> task1<span class="token punctuation">,</span> task2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Tasks done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;===我是分隔线===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;循环Task.Run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建两个新的 Task默认是在ThreadPool上运行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//如果这点i不定义另外一个变量去接受，那么这点i会一直是2，因为这个task会等待for循环结束后才运行</span>
            <span class="token function">PerformAction2</span><span class="token punctuation">(</span><span class="token string">&quot;task&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;for循环结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//task是等待for循环结束后才执行的</span>
    <span class="token comment">// 执行并等待两个 Task 执行完成</span>
    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Tasks done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="task-fromresult" tabindex="-1"><a class="header-anchor" href="#task-fromresult"><span>Task.FromResult</span></a></h5><p>使用Task.FromResult直接创建一个已完成的Task</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>Task.FromResult(&quot;Hello World!&quot;);
var task = Task.CompletedTask;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="某个不知其内部实现的async方法" tabindex="-1"><a class="header-anchor" href="#某个不知其内部实现的async方法"><span>某个不知其内部实现的async方法</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>async Task&lt;Bar&gt; FooAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="获取返回值" tabindex="-1"><a class="header-anchor" href="#获取返回值"><span>获取返回值</span></a></h4><h5 id="continuewith" tabindex="-1"><a class="header-anchor" href="#continuewith"><span>ContinueWith</span></a></h5><p>注册一个回调，等待Task执行完成的时候获取结果并执行回调</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
task<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> primeNumberTask <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;做其他任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

primeNumberTask<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>task <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> task<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ContinueWith本身返回一个task，它可以用它附加更多的Continuation。但是必须直接处理AffregateException <ul><li>如果task发生故障，需要写额外的代码把continuation封装到ui应用上</li><li>如果在非ui上下文中，若想让Continuation和task执行在同一个线程上，必须执行taskContinuationOption.ExecuteSynchronously，否则它将弹回到线程池。</li></ul></li></ul><h5 id="await一个task" tabindex="-1"><a class="header-anchor" href="#await一个task"><span>await一个Task</span></a></h5><p>await 一个 Task 并得到结果</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var task = Task.Run&lt;string&gt;(() =&gt; &quot;Hello World!&quot;);
var result = await task;
Console.WriteLine(result);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="直接getresult" tabindex="-1"><a class="header-anchor" href="#直接getresult"><span>直接GetResult</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var task = Task.Run&lt;string&gt;(() =&gt; &quot;Hello World!&quot;);
// 等效于 task.Result
var result = task.GetAwaiter().GetResult();
Console.WriteLine(result);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="wait等待获取返回值" tabindex="-1"><a class="header-anchor" href="#wait等待获取返回值"><span>Wait等待获取返回值</span></a></h5><ul><li>调用Task的Wait方法会进行阻塞直到操作完成。 <ul><li>相当于调用Thread上面的Join方法</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token class-name">Task</span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span>

    task<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞直到task完成操作</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//True</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Wait也可以让你指定一个超时时间和一取消令牌来提前结束等待。</li></ul><h4 id="task的返回值" tabindex="-1"><a class="header-anchor" href="#task的返回值"><span>Task的返回值</span></a></h4><ul><li>Task有一个泛型子类叫做<code>Task&lt;TResult&gt;</code>，它允许发出一个返回值。</li><li>使用<code>Func&lt;TResult&gt;</code>委托或者兼容的Lambda表达式来调用<code>Task.Run</code>就可以得到<code>Task&lt;TResult&gt;</code></li><li>随后，可以通过Result属性来获得返回的结果 <ul><li>如果这个task还没完成，访问Result属性会<strong>阻塞</strong>该线程直到Task完成操作。</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Task<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> task <span class="token operator">=</span> Task.Run<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    Console.WriteLine<span class="token punctuation">(</span><span class="token string">&quot;FOO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin class-name">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

var result <span class="token operator">=</span> task.Result<span class="token punctuation">;</span>//如果task还没完成，那么就阻塞
Console.WriteLine<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>//3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Task&lt;Result&gt;</code>可以看做是一种所谓的“未来/许诺”，在它里面包裹这一个Result，在稍后得到结果。</li></ul><h4 id="task的异常" tabindex="-1"><a class="header-anchor" href="#task的异常"><span>Task的异常</span></a></h4><ul><li>与Thread不一样，Task可以很方便的传播异常 <ul><li>如果你的task抛出了异常，那么该异常会重新被抛出给 <ul><li>调用wait的地方</li><li>访问了<code>Task&lt;Result&gt;</code>的Result属性的地方。</li></ul></li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>var task <span class="token operator">=</span> Task.Run<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    throw null<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

try
<span class="token punctuation">{</span>
    task.Wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex.InnerException is NullReferenceException<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console.WriteLine<span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        throw ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
//输出null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>无需重新抛出异常，通过Task的IsFaulted和IsCanceled属性也可以检测出Task是否发生了故障： <ul><li>如果两个属性都返回false，那么就没有错误发生</li><li>如果IsCanceled为true，那么就说明OperationCanceledException为该Task抛出了</li><li>如果IsFaulted为True，那么就说明另一个类型的异常被抛出了，而exception属性也将说明错误。</li></ul></li><li>IsCompletedSuccessfully: 只有在任务正常执行完成、无异常、无中途退出指令的情况下才会标识已完成， IsCompleted仅仅表示任务完成。</li></ul><h4 id="continuation" tabindex="-1"><a class="header-anchor" href="#continuation"><span>Continuation</span></a></h4><ul><li>在task上面调用GetAwaiter会返回一个awaiter对象 <ul><li>它是onCompleted方法会告诉之前的task：“当你结束/发生故障的时候要执行委托”</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> primeNumberTask <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;做其他任务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TaskAwaiter<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> awaiter <span class="token operator">=</span> primeNumberTask<span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
awaiter<span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> awaiter<span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//success</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以将Continuation附加到已经结束的task上，此时Continuation将会被安排立即执行。</li></ul><p>Awaiter</p><ul><li>任何可以暴露下列两个方法和一个属性的对象就是awaiter <ul><li>OnCompleted</li><li>GetResult</li><li>一个叫做IsCompleted的bool属性</li></ul></li><li>没有接口或者父类来统一这些成员</li><li>其中OnCompleted是INotifyCompletion的一部分</li></ul><p>如果发生故障</p><ul><li>如果发生故障，那么当Continuation代码调用awaiter.GetResult()的时候，异常就会被重新抛出</li><li>无需调用GetResult，我们可以直接访问task的Result属性。</li><li>但调用GetResult的好处是，如果task发生故障，那么异常就会被直接排除，而不是被包裹在AggregateException里面，这样子的话catch快就简洁很多了。</li></ul><h4 id="非泛型task" tabindex="-1"><a class="header-anchor" href="#非泛型task"><span>非泛型Task</span></a></h4><p>针对非泛型的task，GetResult()方法有一个void的返回值，它就是用来重新抛出异常。</p><h4 id="并行-串行" tabindex="-1"><a class="header-anchor" href="#并行-串行"><span>并行+串行</span></a></h4><p>先并行执行多个任务，然后再串行操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Sheet<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sheets<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        sheets<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="父子关系" tabindex="-1"><a class="header-anchor" href="#父子关系"><span>父子关系</span></a></h4><p>如果父Task中的任意一个子Task未完成，都不能继续。注意点：参数TaskCreationOptions.AttachedToParent</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sheets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Sheet<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//父task</span>
<span class="token class-name"><span class="token keyword">var</span></span> parent_task <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//1. 子task1</span>
    <span class="token class-name"><span class="token keyword">var</span></span> child_1_task <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> TaskCreationOptions<span class="token punctuation">.</span>AttachedToParent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2. 子task2</span>
    <span class="token class-name"><span class="token keyword">var</span></span> child_2_task <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> TaskCreationOptions<span class="token punctuation">.</span>AttachedToParent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> continueTask<span class="token operator">=</span> parent_task<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Sheet0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>continueTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后等待还有这几种写法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>continueTask<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>continueTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">WaitAny</span><span class="token punctuation">(</span>continueTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上三种会阻塞主线程</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>continueTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这种方式不会阻塞主线程。 <strong>解析：WaitAll/WaitAny方法阻塞了当前线程直到全完。WhenAll方法会开启个新监控线程去判读括号里的所有线程执行情况并立即返回，等都完成了就退出监控线程并返回监控数据。</strong></p><h4 id="task组合器" tabindex="-1"><a class="header-anchor" href="#task组合器"><span>Task组合器</span></a></h4><p>异步函数有一个让其保持一致的协议(可以一致的返回Task)，这能让保持良好的结果：可以使用以及编写Task组合器，也就是可以组合Task，但是不关心Task具体做什么的函数</p><h5 id="whenany" tabindex="-1"><a class="header-anchor" href="#whenany"><span>whenAny</span></a></h5><ul><li>当一组Task中任何一个Task完成时候，Task.WhenAny会返回完成的Task。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> winningTask <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WaitAny</span><span class="token punctuation">(</span><span class="token function">Delay1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>winningTask<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为Task.WhenAny本身就是返回一个Task，我们对它进行await时候就会返回最先完成的Task</li><li>上面例子是非阻塞的，包括最后一行(当访问Result属性时候，winningTask已完成)，但是最好还是对winningTask进行await，因为异常无需AggregateException包装就会重新抛出</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> winningTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>很适合为不支持超时或者取消的操作添加这些功能。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token function">SomeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Task</span> winner <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">WhenAny</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">!=</span> task<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> task<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="whenall" tabindex="-1"><a class="header-anchor" href="#whenall"><span>whenALL</span></a></h5><ul><li>不会阻塞当前线程。</li><li>当传给它的所有Task都完成后，Task.WhenAll都返回一个Task</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> winningTask <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span><span class="token function">Delay1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>winningTask<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>await组合的Task，只会抛出第一个异常，想要看到所有的异常，你需要这么做</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span><span class="token function">Delay1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Delay3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> 
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>InnerExceptions<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对一组<code>Task&lt;TResult&gt;</code>调用WhenAll会返回<code>Task&lt;TResult[]&gt;</code>，也就是所有Task的组合结果</li><li>如果进行await，那么就会得到TResult[]</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> task1 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> results <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1,2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：比如你需要同时去查询多个视图，并且需要将查询的结果汇总后进行返回，那么就可以这么操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">TaskTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> moduleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;check&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;emr&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lab&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> colleckModuleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ModelInfo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>ModelInfo<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> moduleList<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">GetModuleDataAsync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">var</span></span> searchResults <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> searchResults<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        colleckModuleList<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> colleckModuleList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="waitall" tabindex="-1"><a class="header-anchor" href="#waitall"><span>waitAll</span></a></h5><ul><li>会阻塞当前线程</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
    <span class="token function">TaskOperationOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TaskOperationTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义的task组合器" tabindex="-1"><a class="header-anchor" href="#自定义的task组合器"><span>自定义的Task组合器</span></a></h4><ul><li>可以编写自定义的Task组合器。最简单的组合器接受一个Task，为task添加超时功能。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">WithTimeOut</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> task<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> timeSpan<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cancel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> delay <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>timeSpan<span class="token punctuation">,</span> cancel<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Task</span> winner <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAny</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>winner <span class="token operator">==</span> task<span class="token punctuation">)</span>
        cancel<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过在Task完成时候取消Task.Delay我们可以避免在计时器上的小开销。</p></blockquote><h3 id="进度报告" tabindex="-1"><a class="header-anchor" href="#进度报告"><span>进度报告</span></a></h3><ul><li>有时候，你希望异步操作在运行的过程中能够时实时的反馈进度。一个简答的解决方案就是向异步方法传入一个action委托，当进度变化的时候触发方法调用</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> progress <span class="token operator">=</span> i <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot; %&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">Foo</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token return-type class-name">Task</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> onRrogressPercentChanged<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">onRrogressPercentChanged</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;当前结果是:&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：富客户端应用中使用不理想，因为它从worker线程报告的进度，可能导致消费者的线程安全，所以应该使用<code>IProgress&lt;T&gt;</code>和<code>Progress&lt;T&gt;</code></p></blockquote><h4 id="taskcompletionsource" tabindex="-1"><a class="header-anchor" href="#taskcompletionsource"><span>TaskCompletionSource</span></a></h4><ul><li>Task.Run创建task</li><li>另一种方式就是用TaskCompletionSource来创建Task</li><li>TaskCompletionSource让你在稍后开始和结束的任意操作中创建Task <ul><li>它会为你提供一个可手动执行的“从属”Task</li><li>指示操作何时结束或者发生故障</li></ul></li><li>对io复杂类的工作比较理想 <ul><li>它可以获得Task的好处（传播值、异常、Continuation等）</li><li>不需要在操作的时候阻塞线程</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskCompletionSource<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tcs<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> tcs<span class="token punctuation">.</span>Task<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//42</span>
Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己封装公共方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 调用此方法相当于调用Task.Factory.StartNew</span>
<span class="token comment">// 并使用TaskCreationOptions.LongRunning选项创建非线程池的线程</span>
<span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> tcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskCompletionSource<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            tcs<span class="token punctuation">.</span><span class="token function">SetResult</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tcs<span class="token punctuation">.</span><span class="token function">SetException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tcs<span class="token punctuation">.</span>Task<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="long-running-task" tabindex="-1"><a class="header-anchor" href="#long-running-task"><span>Long-running Task</span></a></h3><p>长时间运行的任务</p><ul><li>默认情况下，CLR在线程池中运行Task，这非常适合短时间的运行的工作。</li><li>针对长时间运行的任务或者阻塞操作，你可以不采用线程池来实现。(如果你知道该任务是长期运行的，那么就不要去使用线程池(租赁公司)，因为你长期不归还，那么线程池会为了满足需求，会新开一些线程，如果你使用的线程被归还后，那么就会导致线程池的线程过多，销毁和调度都是一个麻烦。)</li><li>在netf4.0中，使用该方法可以实现和Task.Run相同的功能。</li></ul><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>Task task = Task.Factory.StartNew(() =&gt;
{
Thread.Sleep(3000);
Console.WriteLine(&quot;foo&quot;);
}, TaskCreationOptions.LongRunning);

//创建两个线程  这两个线程不在ThreadPool上运行
var list = new List&lt;Task&gt;();
for (int i = 0; i &lt;= 1; i++)
{
    list.Add(Task.Factory.StartNew(PerformAction2, &quot;Task&quot; + i));//, TaskCreationOptions.LongRunning 只能带一个参数
}
Console.WriteLine(&quot;for循环结束&quot;);//task是等待for循环结束后才执行的
Task.WaitAll(list.ToArray());
Console.WriteLine(&quot;Tasks done!&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果同时运行多个long-running tasks(尤其是其中有处于阻塞状态的)，那么性能会受到很大影响，这时候有比TaskCreatingOptions.LongRunning更好的方法： <ul><li>如果任务是IO-Bound(io复杂)，TaskCompletionSource和异步函数可以让你用回调(Coninuations)答题线程来实现并发。</li><li>如果任务是Compute-Bound(计算复杂)，生产者/消费者队列允许你对任务的并发性进行限流，避免把其他线程和进程饿死。</li></ul></li></ul><h4 id="设置优先级" tabindex="-1"><a class="header-anchor" href="#设置优先级"><span>设置优先级</span></a></h4><p>可以在Task运行的方法体中设置当前线程的优先级，然后在方法体执行结束前再重新设置优先级，如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartTaskMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Change the thread priority to the one required.</span>
        Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>Priority <span class="token operator">=</span> ThreadPriority<span class="token punctuation">.</span>AboveNormal<span class="token punctuation">;</span>

        <span class="token comment">// Execute the task logic.</span>
        <span class="token function">DoSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Restore the thread default priority.</span>
        Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>Priority <span class="token operator">=</span> ThreadPriority<span class="token punctuation">.</span>Normal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是将方法丢到startNew中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>StartTaskMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,128),d={href:"https://mp.weixin.qq.com/s/R-CndRq3HfaQYxOnCZp6nA",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel"><span>Parallel</span></a></h3><p>并行，让多个线程池并行工作，由于是并行执行，所以需要注意：工作项彼此之间必须是可以并行执行的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;------------分割线------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> i <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parallel.For效率高于Parallel.Foreach，所以当For与Foreach都可以时，推荐使用For。</p><h3 id="设置线程池最大最小" tabindex="-1"><a class="header-anchor" href="#设置线程池最大最小"><span>设置线程池最大最小</span></a></h3><p>当你开启一个 Task 的时候，实际上，是由 ThreadPool 分配了一个线程，ThreadPool 的上限取决于很多方面的因素，例如虚拟内存的大小，当 Task 开启的数量超过ThreadPool 的上限的时候，Task 将进入排队状态，直到线程池线程变为可用，可以手动设置 ThreadPool 的大小</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//设置当没有请求时线程池维护的空闲线程数</span>
<span class="token comment">//第一个参数为辅助线程数</span>
<span class="token comment">//第二个参数为异步 I/O 线程数</span>
 <span class="token class-name"><span class="token keyword">var</span></span> available <span class="token operator">=</span> ThreadPool<span class="token punctuation">.</span><span class="token function">SetMinThreads</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Result:{0}&quot;</span><span class="token punctuation">,</span> available<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置同时处于活动状态的线程池的线程数，所有大于次数目的请求将保持排队状态，直到线程池变为可用</span>
<span class="token comment">//第一个参数为辅助线程数</span>
<span class="token comment">//第二个参数为异步 I/O 线程数</span>
<span class="token class-name"><span class="token keyword">var</span></span> available2 <span class="token operator">=</span> ThreadPool<span class="token punctuation">.</span><span class="token function">SetMaxThreads</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Result:{0}&quot;</span><span class="token punctuation">,</span> available2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码表示设置当前程序可使用的线程池大小，但是，SetMaxThreads 的值不应该小于托管服务器的 CPU 核心数量，否则，变量 available 的值将显示为 false，表示未成功设置线程池上限</p><blockquote><p>注意：ThreadPool 上的所有线程都是后台线程，也就是说，其IsBackground属性是true，在托管程序退出后，ThreadPool 也将会退出。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限制ThreadPool线程的创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个限制应该是全局起作用的</span>
    ThreadPool<span class="token punctuation">.</span><span class="token function">SetMinThreads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置线程池最小线程数量为2</span>
    ThreadPool<span class="token punctuation">.</span><span class="token function">SetMaxThreads</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置线程池最大线程数量为3</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>PerformAction3<span class="token punctuation">,</span> <span class="token string">&quot;Task&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//, TaskCreationOptions.LongRunning //加上这个代表线程不在线程池上，所以就不受线程池限制</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;for循环结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//task是等待for循环结束后才执行的</span>
    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Tasks done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;===我是分隔线===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task.Run验证线程池限制&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建两个新的 Task默认是在ThreadPool上运行</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//上面线程池限制了创建线程的数目，所以这点最多只能创建3个</span>
        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//如果这点i不定义另外一个变量去接受，那么这点i会一直是2，因为这个task会等待for循环结束后才运行</span>
            <span class="token function">PerformAction2</span><span class="token punctuation">(</span><span class="token string">&quot;task&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;for循环结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//task是等待for循环结束后才执行的</span>
                                    <span class="token comment">// 执行并等待两个 Task 执行完成</span>
    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Tasks done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池中的整洁" tabindex="-1"><a class="header-anchor" href="#线程池中的整洁"><span>线程池中的整洁</span></a></h3><p>CLR策略</p><ul><li>CLR通过对任务排队并对其启动进行节流限制来避免线程池中的超额订阅。</li><li>它首先会运行尽可能多的并发任务(只要还有CPU核)，然后通过爬山算法调整并发级别，并在特定方向上不断调整工作负载。 <ul><li>如果吞吐量提高，它将继续朝着同一个方向(否则将反转)</li></ul></li><li>这确保了它始终追随最佳性能曲线，及时面对计算机上竞争的进程活动时候也是如此</li><li>如果下面两点能够满足，那么CLR的策略将发挥出最佳效果。 <ul><li>工作项大多是短时间运行的(&lt;250毫秒，或者理想情况下&lt;100毫秒)，因为CLR有很多机会进行测量和调整。</li><li>大部分时间都被阻塞的工作项不会主宰线程池。(阻塞的线程会被认为一直在进行CPU密集计算。)</li></ul></li></ul><blockquote><p>cpu超额订阅：活跃的线程超过CPU的核心数，操作系统就需要对线程进行时间切片。超额订阅对性能影响很大，时间切片需要昂贵的上下文切换，并且可能使CPU缓存失效，而CPU缓存对于现代处理器的性能至关重要。</p></blockquote><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>杨旭教程</p>`,16),m={href:"https://mp.weixin.qq.com/s/Th4O7pIfBuzkN3j1OWnCGQ",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("来源自："),n("a",d,[s("https://mp.weixin.qq.com/s/R-CndRq3HfaQYxOnCZp6nA"),t(a)])])]),v,n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/Th4O7pIfBuzkN3j1OWnCGQ"),t(a)]),s(" | 如何让Task在非线程池线程中执行？")])])}const f=e(k,[["render",b],["__file","threadPool.html.vue"]]),y=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/threadPool.html","title":"线程池","lang":"zh-CN","frontmatter":{"title":"线程池","lang":"zh-CN","date":"2023-11-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["thread"],"description":"概述 线程池就是一组预先创建的线程(或者理解为租赁公司，但是并不会在程序启动的时候就创建好所有线程)，可以被重复使用用来执行多个任务，它提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。因为线程的创建和销毁需要很大的性能开销，所以线程池可以避免频繁创建和销毁线程，从而减少线程创建和销毁的开销，提高了系统的性能和效率，...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/threadPool.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"概述 线程池就是一组预先创建的线程(或者理解为租赁公司，但是并不会在程序启动的时候就创建好所有线程)，可以被重复使用用来执行多个任务，它提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。因为线程的创建和销毁需要很大的性能开销，所以线程池可以避免频繁创建和销毁线程，从而减少线程创建和销毁的开销，提高了系统的性能和效率，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1677076461482-fc51de8a-7157-42ad-aca4-667b5ebdec8a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T12:31:54.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:published_time","content":"2023-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T12:31:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1677076461482-fc51de8a-7157-42ad-aca4-667b5ebdec8a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1677076483564-b644e0fa-256b-4ce3-84ca-dd7fbaffc0b7.png\\"],\\"datePublished\\":\\"2023-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-25T12:31:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"ThreadPool","slug":"threadpool","link":"#threadpool","children":[{"level":4,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]},{"level":4,"title":"QueueUserWorkItem","slug":"queueuserworkitem","link":"#queueuserworkitem","children":[]},{"level":4,"title":"任务添加进线程池","slug":"任务添加进线程池","link":"#任务添加进线程池","children":[]},{"level":4,"title":"设计图","slug":"设计图","link":"#设计图","children":[]}]},{"level":3,"title":"Task","slug":"task","link":"#task","children":[{"level":4,"title":"如何创建Task","slug":"如何创建task","link":"#如何创建task","children":[{"level":5,"title":"new Task","slug":"new-task","link":"#new-task","children":[]},{"level":5,"title":"Task.Factory.StartNew","slug":"task-factory-startnew","link":"#task-factory-startnew","children":[]},{"level":5,"title":"Task.Run","slug":"task-run","link":"#task-run","children":[]},{"level":5,"title":"Task.FromResult","slug":"task-fromresult","link":"#task-fromresult","children":[]},{"level":5,"title":"某个不知其内部实现的async方法","slug":"某个不知其内部实现的async方法","link":"#某个不知其内部实现的async方法","children":[]}]},{"level":4,"title":"获取返回值","slug":"获取返回值","link":"#获取返回值","children":[{"level":5,"title":"ContinueWith","slug":"continuewith","link":"#continuewith","children":[]},{"level":5,"title":"await一个Task","slug":"await一个task","link":"#await一个task","children":[]},{"level":5,"title":"直接GetResult","slug":"直接getresult","link":"#直接getresult","children":[]},{"level":5,"title":"Wait等待获取返回值","slug":"wait等待获取返回值","link":"#wait等待获取返回值","children":[]}]},{"level":4,"title":"Task的返回值","slug":"task的返回值","link":"#task的返回值","children":[]},{"level":4,"title":"Task的异常","slug":"task的异常","link":"#task的异常","children":[]},{"level":4,"title":"Continuation","slug":"continuation","link":"#continuation","children":[]},{"level":4,"title":"非泛型Task","slug":"非泛型task","link":"#非泛型task","children":[]},{"level":4,"title":"并行+串行","slug":"并行-串行","link":"#并行-串行","children":[]},{"level":4,"title":"父子关系","slug":"父子关系","link":"#父子关系","children":[]},{"level":4,"title":"Task组合器","slug":"task组合器","link":"#task组合器","children":[{"level":5,"title":"whenAny","slug":"whenany","link":"#whenany","children":[]},{"level":5,"title":"whenALL","slug":"whenall","link":"#whenall","children":[]},{"level":5,"title":"waitAll","slug":"waitall","link":"#waitall","children":[]}]},{"level":4,"title":"自定义的Task组合器","slug":"自定义的task组合器","link":"#自定义的task组合器","children":[]}]},{"level":3,"title":"进度报告","slug":"进度报告","link":"#进度报告","children":[{"level":4,"title":"TaskCompletionSource","slug":"taskcompletionsource","link":"#taskcompletionsource","children":[]}]},{"level":3,"title":"Long-running Task","slug":"long-running-task","link":"#long-running-task","children":[{"level":4,"title":"设置优先级","slug":"设置优先级","link":"#设置优先级","children":[]}]},{"level":3,"title":"Parallel","slug":"parallel","link":"#parallel","children":[]},{"level":3,"title":"设置线程池最大最小","slug":"设置线程池最大最小","link":"#设置线程池最大最小","children":[]},{"level":3,"title":"线程池中的整洁","slug":"线程池中的整洁","link":"#线程池中的整洁","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1711369914000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":17.82,"words":5347},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/threadPool.md","localizedDate":"2023年11月11日","excerpt":"<h2>概述</h2>\\n<p>线程池就是一组预先创建的线程(或者理解为租赁公司，但是并不会在程序启动的时候就创建好所有线程)，可以被重复使用用来执行多个任务，它提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。因为线程的创建和销毁需要很大的性能开销，所以线程池可以避免频繁创建和销毁线程，从而减少线程创建和销毁的开销，提高了系统的性能和效率，在windows nt 内核的操作系统中，每个进程都会包含一个线程池，而在net中，也有自己的线程池，是由clr负责管理的。<strong>异步编程默认使用线程池</strong></p>\\n<p>线程池<strong>初始化是没有线程</strong>的，当应用程序需要一个新的线程时候，就可以从线程池中直接获取一个已经存在的线程，若此处线程池中没有空闲的线程，那么就根据内部算法创建新的线程来处理任务，同样当一个线程使用完毕后并不会立即被销毁，而是放入线程池中等待下一次使用，当线程池内的线程数量达到其预设的最大值，而所有线程都在忙碌，新提交的任务就会被放在任务队列中等待执行，直到有线程完成任务并返回到线程池。</p>","autoDesc":true}');export{f as comp,y as data};
