import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-Bfb6-vFH.js";const e={},p=t(`<blockquote><p>更新时间：2022年8月14日14:17:22</p></blockquote><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>通过异常过滤器实现业务异常捕捉，并且将异常信息进行记录并返回统一的响应报文(比如在开发环境返回具体的异常堆栈，在其他环境返回统一错误信息)。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>引用辅助包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AzrngCommon&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.2.6&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>主要使用该包内的返回类</p></blockquote><h3 id="同步用法" tabindex="-1"><a class="header-anchor" href="#同步用法"><span>同步用法</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义全局异常过滤器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IExceptionFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IWebHostEnvironment</span> _hostEnvironment<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionFilter<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomExceptionFilter</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionFilter<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span>
        <span class="token class-name">IWebHostEnvironment</span> hostEnvironment<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
        _hostEnvironment <span class="token operator">=</span> hostEnvironment<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnException</span><span class="token punctuation">(</span><span class="token class-name">ExceptionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//如果异常没有处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ExceptionHandled<span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
        <span class="token punctuation">{</span>
            Code <span class="token operator">=</span> <span class="token string">&quot;500&quot;</span><span class="token punctuation">,</span>
            IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            Message <span class="token operator">=</span> <span class="token string">&quot;系统异常，请联系管理员&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;异常 path:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string"> message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string"> StackTrace:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>StackTrace</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_hostEnvironment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span>Message <span class="token operator">+=</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//异常已处理</span>
        context<span class="token punctuation">.</span>ExceptionHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//添加全局过滤器</span>
    option<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomExceptionFilter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步用法" tabindex="-1"><a class="header-anchor" href="#异步用法"><span>异步用法</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncExceptionFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnExceptionAsync</span><span class="token punctuation">(</span><span class="token class-name">ExceptionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//判断异常是否已经处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ExceptionHandled<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiResult</span><span class="token punctuation">(</span>StatusCodes<span class="token punctuation">.</span>Status500InternalServerError<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>ExceptionHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>不能拦截处理Action以外的错误。</p>`,15),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","guolvqishixian-yichangchuli.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/pipeline/filter/guolvqishixian-yichangchuli.html","title":"过滤器实现-异常处理","lang":"zh-CN","frontmatter":{"title":"过滤器实现-异常处理","lang":"zh-CN","date":"2023-08-07T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guolvqishixian-yichangchuli","slug":"yky2ka","docsId":"63500277","description":"更新时间：2022年8月14日14:17:22 目的 通过异常过滤器实现业务异常捕捉，并且将异常信息进行记录并返回统一的响应报文(比如在开发环境返回具体的异常堆栈，在其他环境返回统一错误信息)。 操作 引用辅助包 主要使用该包内的返回类 同步用法 全局使用 异步用法 总结 不能拦截处理Action以外的错误。","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/filter/guolvqishixian-yichangchuli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"过滤器实现-异常处理"}],["meta",{"property":"og:description","content":"更新时间：2022年8月14日14:17:22 目的 通过异常过滤器实现业务异常捕捉，并且将异常信息进行记录并返回统一的响应报文(比如在开发环境返回具体的异常堆栈，在其他环境返回统一错误信息)。 操作 引用辅助包 主要使用该包内的返回类 同步用法 全局使用 异步用法 总结 不能拦截处理Action以外的错误。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过滤器实现-异常处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"同步用法","slug":"同步用法","link":"#同步用法","children":[]},{"level":3,"title":"异步用法","slug":"异步用法","link":"#异步用法","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.09,"words":327},"filePathRelative":"dotnet/base/pipeline/filter/guolvqishixian-yichangchuli.md","localizedDate":"2023年8月7日","excerpt":"<blockquote>\\n<p>更新时间：2022年8月14日14:17:22</p>\\n</blockquote>\\n<h2>目的</h2>\\n<p>通过异常过滤器实现业务异常捕捉，并且将异常信息进行记录并返回统一的响应报文(比如在开发环境返回具体的异常堆栈，在其他环境返回统一错误信息)。</p>\\n<h2>操作</h2>\\n<p>引用辅助包</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"AzrngCommon\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"1.2.6\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
