import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,e as s,f as c,d as l}from"./app-Bfb6-vFH.js";const i={},u=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>有些数据库的函数在.Net中有对应的函数映射，但是其中一些是没有的，这样子做是为了保持实体框架API在不同的数据库提供程序之间保持一致。</p><p>但是你可以编写代码来补充，通过注册函数，可以在EFCore中来使用数据库的函数。</p><h2 id="ef-functions" tabindex="-1"><a class="header-anchor" href="#ef-functions"><span>EF.Functions</span></a></h2><h3 id="公共函数" tabindex="-1"><a class="header-anchor" href="#公共函数"><span>公共函数</span></a></h3><h4 id="like" tabindex="-1"><a class="header-anchor" href="#like"><span>Like</span></a></h4><p>EF.Functions.Like ：支持通配符% 、_、[]、[^]</p><blockquote><p>使用 EF.Functions.Like进行模糊查询要比 StartsWith、Contains 和 EndsWith 方法生成的SQL语句性能更优。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result<span class="token operator">=</span> dataContext<span class="token punctuation">.</span>Categories<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> EF<span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">Like</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>CategoryName<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;%</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string">%&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对比：EF.Functions.Like 和Contains(包含)的区别</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// _context.Set&lt;User&gt;().Where(t =&gt; t.Account.Contains(account)).ToListAsync();</span>
SELECT \`u\`<span class="token punctuation">.</span>\`Id\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`Account\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`CreateTime\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`IsValid\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`PassWord\`
FROM \`user\` AS \`u\`
WHERE <span class="token punctuation">(</span>@__account_0 LIKE &#39;&#39;<span class="token punctuation">)</span> OR <span class="token punctuation">(</span><span class="token function">LOCATE</span><span class="token punctuation">(</span>@__account_0<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`Account\`<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">//_context.Set&lt;User&gt;().Where(t =&gt; EF.Functions.Like(t.Account, $&quot;%{account}%&quot;)).ToListAsync();</span>
<span class="token return-type class-name">Executed</span> DbCommand <span class="token punctuation">(</span>2ms<span class="token punctuation">)</span> <span class="token punctuation">[</span>Parameters<span class="token operator">=</span><span class="token punctuation">[</span>@__Format_1<span class="token operator">=</span><span class="token char">&#39;?&#39;</span> <span class="token punctuation">(</span>Size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CommandType<span class="token operator">=</span>&#39;Text&#39;<span class="token punctuation">,</span> CommandTimeout<span class="token operator">=</span>&#39;<span class="token number">30</span>&#39;<span class="token punctuation">]</span>
SELECT \`u\`<span class="token punctuation">.</span>\`Id\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`Account\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`CreateTime\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`IsValid\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`PassWord\`
FROM \`user\` AS \`u\`
WHERE \`u\`<span class="token punctuation">.</span>\`Account\` LIKE @__Format_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StartsWith：以某一个字符串开头 Contains：是否包含在某一个字符串中 EndsWith：以某一个字符串结尾</p><blockquote><p>结论： 在EF Core中提供EF.Functions.Like()方法的根本原因是在 TSQL 语句中 Like 关键字支持通配符，而在.Net中StartsWith、Contains和EndsWith方法是不支持通配符的；在EF Core中StartsWith、Contains和EndsWith模糊查询实际分别被解析成为Left、CharIndex和Right，而不是Like。</p></blockquote><h4 id="datediffday" tabindex="-1"><a class="header-anchor" href="#datediffday"><span>DateDiffDay</span></a></h4><p>EF.Functions.DateDiffDay (DateDiffHour、DateDiffMonth),求天、小时、月之间的数量</p><h3 id="npgsql" tabindex="-1"><a class="header-anchor" href="#npgsql"><span>Npgsql</span></a></h3><p>需要安装nuget包</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Npgsql.EntityFrameworkCore.PostgreSQL<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>6.0.2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="jsoncontains" tabindex="-1"><a class="header-anchor" href="#jsoncontains"><span>JsonContains</span></a></h4><p>json字段是否包含某一个值</p><h5 id="场景-文本是否包含某一个值" tabindex="-1"><a class="header-anchor" href="#场景-文本是否包含某一个值"><span>场景：文本是否包含某一个值</span></a></h5><p>举例：我们要存储一个学生对应的爱好的ID数组，那么我们会创建一个jsonb格式的列hobby，然后里面存储的内容格式如下</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应到代码中，为了方便操作，我们将其实体类型映射为List&gt;int&lt;格式，如下</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public List&lt;int&gt; Hobby { get; set; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>光做这个还不行，还需要在EFCore配置中将其配置自动转换</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>entity.Property(e =&gt; e.Hobby).HasJsonConversion().HasColumnType(&quot;jsonb&quot;).HasComment(&quot;爱好列表&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的HasJsonConversion来自于我们编写的自定义扩展</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public static class PropertyBuilderExtensions
{
    /// &lt;summary&gt;
    /// 对象转json存数据库
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;propertyBuilder&quot;&gt;&lt;/param&gt;
    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static PropertyBuilder&lt;T&gt; HasJsonConversion&lt;T&gt;(this PropertyBuilder&lt;T&gt; propertyBuilder)
    where T : class, new()
    {
        var converter = new ValueConverter&lt;T, string&gt;
        (
            v =&gt; v.ToJson(),
            v =&gt; v.ToObject&lt;T&gt;()
        );

        var comparer = new ValueComparer&lt;T&gt;
        (
            (l, r) =&gt; l.ToJson() == r.ToJson(),
            v =&gt; v == null ? 0 : v.ToJson().GetHashCode(),
            v =&gt; v.ToJson().ToObject&lt;T&gt;()
        );

        propertyBuilder.HasConversion(converter);
        propertyBuilder.Metadata.SetValueConverter(converter);
        propertyBuilder.Metadata.SetValueComparer(comparer);
        return propertyBuilder;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候当我们查询列表的时候，Hobby字段取到的值默认就是一个List集合了。</p><p>但是当我们想查询该列是否存在某一个列的值为11的时候，那么我们就应该使用下面的函数了</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var result = _dbContext.User.Where(x =&gt; EF.Functions.JsonContains(x.Hobby, &#39;11&#39;)).ToList(); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该方法翻译为SQL是使用到了pgsql数据库的@&gt;函数，示例如下</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token string">&#39;[1,8,19]&#39;</span>::jsonb @<span class="token operator">&gt;</span> <span class="token string">&#39;[8]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h2><p>支持通过修改数据库上下文来增加对数据库内置函数的调用， 举例以使用pgsql的内置函数to_char为例，我们有一个数据库上下文OpenDbContext，修改增加如下方法</p><blockquote><p>请注意，我们没有实现方法，我们只是提供了正确的签名</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// pg to_char内置函数</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>要转换的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>format<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>转换的格式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>NotImplementedException<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">DbFunction</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;to_char&quot;</span><span class="token punctuation">,</span> IsBuiltIn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IsNullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToChar</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> input<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> format <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH24:mi:ss&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>IsBuiltIn指是否为内置函数 IsNullable指是否可以为null</p></blockquote><p>然后我一个简单的查询操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;time/tochar&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">TimeToChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _openDbContext<span class="token punctuation">.</span>Users
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> OpenDbContext<span class="token punctuation">.</span><span class="token function">ToChar</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>CreateTime<span class="token punctuation">,</span> <span class="token string">&quot;yyyy-MM-dd HH24:mi:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行查询的时候，会生成以下SQL语句</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">SELECT</span> <span class="token function">to_char</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> &#39;yyyy<span class="token operator">-</span>MM<span class="token operator">-</span><span class="token class-name">dd</span> HH24<span class="token punctuation">:</span>mi<span class="token punctuation">:</span>ss&#39;<span class="token punctuation">)</span>
FROM sample<span class="token punctuation">.</span><span class="token string">&quot;user&quot;</span> AS u
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数"><span>自定义函数</span></a></h2><p>除了可以使用内置函数以外，还可以创建自己的sql函数并且以这种方式进行添加，下面使用pgsql创建一个简单的数据库函数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE OR REPLACE <span class="token return-type class-name">FUNCTION</span> sample<span class="token punctuation">.</span><span class="token function">add_credit</span><span class="token punctuation">(</span>source_credit <span class="token class-name"><span class="token keyword">double</span></span> precision<span class="token punctuation">,</span> <span class="token class-name">addCredit</span> int4<span class="token punctuation">)</span>
    RETURNS <span class="token keyword">double</span> precision AS
$$
SELECT source_credit <span class="token operator">+</span> addCredit<span class="token punctuation">;</span>
$$
<span class="token class-name">LANGUAGE</span> SQL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在还在数据库上下文中注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 添加学分的自定义函数</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sourceCredit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>原始学分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addCredit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>要添加的学分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>NotImplementedException<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">DbFunction</span><span class="token punctuation">(</span>Name <span class="token operator">=</span> <span class="token string">&quot;add_credit&quot;</span><span class="token punctuation">,</span> Schema <span class="token operator">=</span> <span class="token string">&quot;sample&quot;</span><span class="token punctuation">,</span> IsBuiltIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">AddCredit</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> sourceCredit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> addCredit<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我编写一个简单的查询操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 学分相加</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;double/tochar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">DoubleAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _openDbContext<span class="token punctuation">.</span>Users
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> OpenDbContext<span class="token punctuation">.</span><span class="token function">AddCredit</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Credit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行查询的时候，会生成以下SQL语句</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">SELECT</span> sample<span class="token punctuation">.</span><span class="token function">add_credit</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>credit<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
FROM sample<span class="token punctuation">.</span><span class="token string">&quot;user&quot;</span> AS u
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>使用 DbFunctions 是一种在EFCore查询中利用特定数据库功能的有用方法，但是需要注意。因为您正在使用数据库特定的功能，所以如果您想这样做，后期考虑移植到其他数据库就会变得更加困难。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p>docs：https://docs.microsoft.com/zh-cn/ef/core/querying/database-functions</p>`,56),r={href:"https://timdeschryver.dev/blog/consuming-sql-functions-with-entity-framework#conclusion",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"一个函数扩展的示例：https://www.cnblogs.com/GuZhenYin/p/14657024.html",-1);function k(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("数据库函数："),n("a",r,[s("https://timdeschryver.dev/blog/consuming-sql-functions-with-entity-framework"),c(a)])]),d])}const h=t(i,[["render",k],["__file","dbFunction.html.vue"]]),y=JSON.parse('{"path":"/orm/efcore/base/dbFunction.html","title":"数据库函数","lang":"zh-CN","frontmatter":{"title":"数据库函数","lang":"zh-CN","date":"2023-07-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shujukuhanshu","slug":"zogd3yacs5huzxek","docsId":"110610875","description":"前言 有些数据库的函数在.Net中有对应的函数映射，但是其中一些是没有的，这样子做是为了保持实体框架API在不同的数据库提供程序之间保持一致。 但是你可以编写代码来补充，通过注册函数，可以在EFCore中来使用数据库的函数。 EF.Functions 公共函数 Like EF.Functions.Like ：支持通配符% 、_、[]、[^] 使用 EF...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/base/dbFunction.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据库函数"}],["meta",{"property":"og:description","content":"前言 有些数据库的函数在.Net中有对应的函数映射，但是其中一些是没有的，这样子做是为了保持实体框架API在不同的数据库提供程序之间保持一致。 但是你可以编写代码来补充，通过注册函数，可以在EFCore中来使用数据库的函数。 EF.Functions 公共函数 Like EF.Functions.Like ：支持通配符% 、_、[]、[^] 使用 EF..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T07:15:56.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T07:15:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T07:15:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"EF.Functions","slug":"ef-functions","link":"#ef-functions","children":[{"level":3,"title":"公共函数","slug":"公共函数","link":"#公共函数","children":[{"level":4,"title":"Like","slug":"like","link":"#like","children":[]},{"level":4,"title":"DateDiffDay","slug":"datediffday","link":"#datediffday","children":[]}]},{"level":3,"title":"Npgsql","slug":"npgsql","link":"#npgsql","children":[{"level":4,"title":"JsonContains","slug":"jsoncontains","link":"#jsoncontains","children":[{"level":5,"title":"场景：文本是否包含某一个值","slug":"场景-文本是否包含某一个值","link":"#场景-文本是否包含某一个值","children":[]}]}]}]},{"level":2,"title":"内置函数","slug":"内置函数","link":"#内置函数","children":[]},{"level":2,"title":"自定义函数","slug":"自定义函数","link":"#自定义函数","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1716016556000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.47,"words":1340},"filePathRelative":"orm/efcore/base/dbFunction.md","localizedDate":"2023年7月19日","excerpt":"<h2>前言</h2>\\n<p>有些数据库的函数在.Net中有对应的函数映射，但是其中一些是没有的，这样子做是为了保持实体框架API在不同的数据库提供程序之间保持一致。</p>\\n<p>但是你可以编写代码来补充，通过注册函数，可以在EFCore中来使用数据库的函数。</p>\\n<h2>EF.Functions</h2>\\n<h3>公共函数</h3>\\n<h4>Like</h4>\\n<p>EF.Functions.Like ：支持通配符% 、_、[]、[^]</p>\\n<blockquote>\\n<p>使用 EF.Functions.Like进行模糊查询要比 StartsWith、Contains 和 EndsWith 方法生成的SQL语句性能更优。</p>\\n</blockquote>","autoDesc":true}');export{h as comp,y as data};
