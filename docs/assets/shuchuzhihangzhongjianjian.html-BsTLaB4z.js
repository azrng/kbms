import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as i,c as o,b as e,e as n,f as l,d as r}from"./app-D8HBJYTp.js";const c={},d=r(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>输出都执行了哪些中间件</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="安装nuget包" tabindex="-1"><a class="header-anchor" href="#安装nuget包"><span>安装nuget包</span></a></h3><p>需要添加两个Nuget包分别是：Microsoft.AspNetCore.MiddlewareAnalysis和Microsoft.Extensions.DiagnosticAdapter，前者是分析记录中间件核心代码实现后者是用来接收日志输出的，由于是用的DiagnosticSource方式记录日志，所以需要使用DiagnosticListener对象的SubscribeWithAdapter方法来订阅。</p><h3 id="实现分析诊断适配器" tabindex="-1"><a class="header-anchor" href="#实现分析诊断适配器"><span>实现分析诊断适配器</span></a></h3><p>这个适配器是为了方便我们把从DiagnosticSource接收到的日志对象输出到控制台，具体代码实现如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    public class AnalysisDiagnosticAdapter
    {
        private readonly ILogger&lt;AnalysisDiagnosticAdapter&gt; _logger;
        public AnalysisDiagnosticAdapter(ILogger&lt;AnalysisDiagnosticAdapter&gt; logger)
        {
            _logger = logger;
        }

        [DiagnosticName(&quot;Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareStarting&quot;)]
        public void OnMiddlewareStarting(HttpContext httpContext, string name, Guid instance, long timestamp)
        {
            _logger.LogInformation($&quot;中间件-启动: &#39;{name}&#39;; Request Path: &#39;{httpContext.Request.Path}&#39;&quot;);
        }

        [DiagnosticName(&quot;Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareException&quot;)]
        public void OnMiddlewareException(Exception exception, HttpContext httpContext, string name, Guid instance, long timestamp, long duration)
        {
            _logger.LogInformation($&quot;中间件-异常: &#39;{name}&#39;; &#39;{exception.Message}&#39;&quot;);
        }

        [DiagnosticName(&quot;Microsoft.AspNetCore.MiddlewareAnalysis.MiddlewareFinished&quot;)]
        public void OnMiddlewareFinished(HttpContext httpContext, string name, Guid instance, long timestamp, long duration)
        {
            _logger.LogInformation($&quot;中间件-结束: 耗时[{duration/10000}] &#39;{name}&#39;; Status: &#39;{httpContext.Response.StatusCode}&#39;&quot;);
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册服务启用中间件" tabindex="-1"><a class="header-anchor" href="#注册服务启用中间件"><span>注册服务启用中间件</span></a></h3><p>注册中间件分析服务</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var builder = WebApplication.CreateBuilder(args);
builder.Services.AddMiddlewareAnalysis();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅我们的分析诊断适配器</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var listener = app.Services.GetRequiredService&lt;DiagnosticListener&gt;();
var observer = ActivatorUtilities.CreateInstance&lt;AnalysisDiagnosticAdapter&gt;(app.Services);
using var disposable = listener.SubscribeWithAdapter(observer);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样基本就完成了分析记录中间件的功能，启动程序看看效果</p><p>日志已经成功的输出到我们的控制台了，不过才四个中间件，应该不止这么少的，再在注册中间件分析服务哪里添加一句代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 新增的下面这句代码</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Transient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IStartupFilter<span class="token punctuation">,</span> AnalysisStartupFilter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMiddlewareAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在再来看看效果，发现变成8个中间件了多了四个</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,18),p={href:"https://www.cnblogs.com/Ax0ne/p/17300692.html",target:"_blank",rel:"noopener noreferrer"};function u(g,m){const t=s("ExternalLinkIcon");return i(),o("div",null,[d,e("p",null,[n("ASP.NET Core如何知道一个请求执行了哪些中间件："),e("a",p,[n("https://www.cnblogs.com/Ax0ne/p/17300692.html"),l(t)])])])}const b=a(c,[["render",u],["__file","shuchuzhihangzhongjianjian.html.vue"]]),x=JSON.parse('{"path":"/dotnet/base/pipeline/middleware/shuchuzhihangzhongjianjian.html","title":"输出执行中间件","lang":"zh-CN","frontmatter":{"title":"输出执行中间件","lang":"zh-CN","date":"2023-06-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shuchuzhihangzhongjianjian","slug":"li9elf0kgs7qwoyg","docsId":"121335795","description":"概述 输出都执行了哪些中间件 操作 安装nuget包 需要添加两个Nuget包分别是：Microsoft.AspNetCore.MiddlewareAnalysis和Microsoft.Extensions.DiagnosticAdapter，前者是分析记录中间件核心代码实现后者是用来接收日志输出的，由于是用的DiagnosticSource方式记录日...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/middleware/shuchuzhihangzhongjianjian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"输出执行中间件"}],["meta",{"property":"og:description","content":"概述 输出都执行了哪些中间件 操作 安装nuget包 需要添加两个Nuget包分别是：Microsoft.AspNetCore.MiddlewareAnalysis和Microsoft.Extensions.DiagnosticAdapter，前者是分析记录中间件核心代码实现后者是用来接收日志输出的，由于是用的DiagnosticSource方式记录日..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"输出执行中间件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"安装nuget包","slug":"安装nuget包","link":"#安装nuget包","children":[]},{"level":3,"title":"实现分析诊断适配器","slug":"实现分析诊断适配器","link":"#实现分析诊断适配器","children":[]},{"level":3,"title":"注册服务启用中间件","slug":"注册服务启用中间件","link":"#注册服务启用中间件","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.51,"words":452},"filePathRelative":"dotnet/base/pipeline/middleware/shuchuzhihangzhongjianjian.md","localizedDate":"2023年6月27日","excerpt":"<h2>概述</h2>\\n<p>输出都执行了哪些中间件</p>\\n<h2>操作</h2>\\n<h3>安装nuget包</h3>\\n<p>需要添加两个Nuget包分别是：Microsoft.AspNetCore.MiddlewareAnalysis和Microsoft.Extensions.DiagnosticAdapter，前者是分析记录中间件核心代码实现后者是用来接收日志输出的，由于是用的DiagnosticSource方式记录日志，所以需要使用DiagnosticListener对象的SubscribeWithAdapter方法来订阅。</p>\\n<h3>实现分析诊断适配器</h3>\\n<p>这个适配器是为了方便我们把从DiagnosticSource接收到的日志对象输出到控制台，具体代码实现如下</p>","autoDesc":true}');export{b as comp,x as data};
