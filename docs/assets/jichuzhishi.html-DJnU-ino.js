import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as p,b as a}from"./app-Bw62I61B.js";const i="/kbms/common/1614052667071-61ee558e-a821-4b1f-9ac4-5ecc0f5d553b.png",u={},k=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>遇到数据库关键字需要加\`\`\`符号\`，比如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>Index<span class="token punctuation">\`</span></span>  <span class="token keyword">from</span> sample<span class="token punctuation">.</span>menu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h2 id="系统操作" tabindex="-1"><a class="header-anchor" href="#系统操作"><span>系统操作</span></a></h2><h3 id="修改密码" tabindex="-1"><a class="header-anchor" href="#修改密码"><span>修改密码</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> use mysql<span class="token punctuation">;</span> 
mysql<span class="token operator">&gt;</span> update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span>‘123<span class="token string">&#39;) where user=&#39;</span>root<span class="token string">&#39; and host=&#39;</span>localhost<span class="token string">&#39;; 
mysql&gt; flush privileges;



## 首先登录mysql
## 格式：mysql&gt; set password for 用户名@localhost = password(‘新密码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
例子：mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> password <span class="token keyword">for</span> root@localhost <span class="token operator">=</span> password<span class="token punctuation">(</span>‘123&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序连接" tabindex="-1"><a class="header-anchor" href="#程序连接"><span>程序连接</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># .Net连接数据库</span>
<span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.100.104<span class="token punctuation">;</span><span class="token assign-left variable">database</span><span class="token operator">=</span>azrngblog<span class="token punctuation">;</span><span class="token assign-left variable">uid</span><span class="token operator">=</span>root<span class="token punctuation">;</span><span class="token assign-left variable">pwd</span><span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span><span class="token assign-left variable">SslMode</span><span class="token operator">=</span>None<span class="token punctuation">;</span>

<span class="token comment"># jdbc连接数据库 localhost:3306 表示数据库的地址和端口号，mydatabase 是数据库名称，root 是用户名，123456 是密码</span>
jdbc:mysql://localhost:3306/mydatabase?user<span class="token operator">=</span>root<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123456</span>
<span class="token comment"># 如果需要在连接字符串中指定字符集编码，可以添加 characterEncoding 和 useUnicode 参数</span>
jdbc:mysql://localhost:3306/mydatabase?user<span class="token operator">=</span>root<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123456</span><span class="token operator">&amp;</span><span class="token assign-left variable">characterEncoding</span><span class="token operator">=</span>UTF-8<span class="token operator">&amp;</span><span class="token assign-left variable">useUnicode</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="磁盘统计" tabindex="-1"><a class="header-anchor" href="#磁盘统计"><span>磁盘统计</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取指定数据库下所有表以及表的存储量</span>
<span class="token keyword">select</span> TABLE_NAME TableName<span class="token punctuation">,</span> data_length <span class="token keyword">as</span> Size
<span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> TABLE_SCHEMA <span class="token operator">=</span> <span class="token string">&#39;mangesystem&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看指定数据库的存储量</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>DATA_LENGTH<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">data</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span>  <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">&#39;mangesystem&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询指定数据库下所有表的数据量</span>
<span class="token keyword">SELECT</span> table_name tableName<span class="token punctuation">,</span>table_rows size <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span>  <span class="token keyword">WHERE</span> TABLE_SCHEMA<span class="token operator">=</span><span class="token variable">@DbName</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询指定数据库下所有列的大小</span>
<span class="token keyword">select</span> table_schema DbName<span class="token punctuation">,</span> table_name TableName<span class="token punctuation">,</span> column_name ColumnName<span class="token punctuation">,</span> OCTET_LENGTH<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">as</span> Size <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema <span class="token operator">=</span> <span class="token string">&#39;mangesystem&#39;</span> <span class="token operator">and</span> TABLE_NAME <span class="token operator">=</span> <span class="token string">&#39;cupinfo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 登录MySQL</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token string">&quot;密码&quot;</span>
<span class="token comment">## 连接其他服务器</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token string">&quot;密码&quot;</span> <span class="token parameter variable">-h</span> <span class="token function">ip</span>
<span class="token comment">## 重启MySQL服务</span>
systemctl restart mysqld 

<span class="token comment">## 查询所有数据库</span>
show databases<span class="token punctuation">;</span>

<span class="token comment">## 创建数据库</span>
create database 数据库名称；

<span class="token comment">## 查看数据库详情</span>
show create database 数据库名称<span class="token punctuation">;</span>

<span class="token comment">## 创建数据库指定字符集</span>
create database 数据库名称 character <span class="token builtin class-name">set</span> gbk/utf8<span class="token punctuation">;</span>

<span class="token comment">## 删除数据库</span>
drop database 数据库名称<span class="token punctuation">;</span>

<span class="token comment">## 使用数据库</span>
use 数据库名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取指定数据库下所有表以及表备注</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    TABLE_NAME<span class="token punctuation">,</span>
    TABLE_COMMENT
<span class="token keyword">FROM</span>
    information_schema<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>TABLES<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span>
    TABLE_SCHEMA <span class="token operator">=</span> <span class="token string">&#39;数据库名字&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取指定数据库下是否存在某一个表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
    information_schema<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>TABLES<span class="token punctuation">\`</span></span>
<span class="token keyword">WHERE</span>
    TABLE_SCHEMA <span class="token operator">=</span> <span class="token string">&#39;mangesystem&#39;</span>  <span class="token operator">and</span> TABLE_NAME<span class="token operator">=</span><span class="token string">&#39;actor&#39;</span> <span class="token punctuation">;</span>
<span class="token comment">-- mangesystem库名  actor表名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h2><h3 id="表结构" tabindex="-1"><a class="header-anchor" href="#表结构"><span>表结构</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;表名&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;字段名称&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;数据类型&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;字段长度&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;备注&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span>
  TABLE_NAME <span class="token keyword">as</span> 表名<span class="token punctuation">,</span>
        COLUMN_NAME <span class="token keyword">as</span> 字段名称<span class="token punctuation">,</span>
        COLUMN_TYPE <span class="token keyword">as</span> 数据类型<span class="token punctuation">,</span>
        CHARACTER_MAXIMUM_LENGTH <span class="token keyword">as</span> 字段长度<span class="token punctuation">,</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>COLUMN_KEY<span class="token operator">=</span><span class="token string">&#39;PRI&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;N&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 主键<span class="token punctuation">,</span>
        COLUMN_COMMENT <span class="token keyword">as</span> 备注
<span class="token keyword">FROM</span>
        INFORMATION_SCHEMA<span class="token punctuation">.</span> <span class="token keyword">COLUMNS</span>
<span class="token keyword">WHERE</span>
        table_schema <span class="token operator">=</span> <span class="token string">&#39;localguoba_mp_microcourse_db&#39;</span>        
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 表名        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表"><span>创建表</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token number">1</span><span class="token punctuation">.</span>查询所有表
  <span class="token class-name">show</span> tables<span class="token punctuation">;</span>
<span class="token number">2</span><span class="token punctuation">.</span>创建表（引擎和字符集）：create table 表名（<span class="token return-type class-name">name</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>，age <span class="token keyword">int</span>）engine<span class="token operator">=</span>myisam<span class="token operator">/</span><span class="token class-name">innodb</span>   charset<span class="token operator">=</span>gbk<span class="token operator">/</span>utf8<span class="token punctuation">;</span>
<span class="token number">3</span><span class="token punctuation">.</span>查看表详情
  show create table 表名<span class="token punctuation">;</span>
<span class="token number">4</span><span class="token punctuation">.</span>查看表字段：desc 表名；
<span class="token number">5</span><span class="token punctuation">.</span>删除表：drop table 表名；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改表" tabindex="-1"><a class="header-anchor" href="#修改表"><span>修改表</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">--修改表名</span>
<span class="token keyword">rename</span> <span class="token keyword">table</span> 旧表名 <span class="token keyword">to</span> 新表名；

<span class="token comment">-- 修改表的引擎和字符集：alter table 表名 </span>
<span class="token keyword">engine</span><span class="token operator">=</span>myisam<span class="token operator">/</span><span class="token keyword">innodb</span>  <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token operator">/</span>gbk<span class="token punctuation">;</span>

<span class="token comment">-- 添加表字段：</span>
<span class="token comment">-- 最后面</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名 字段类型；
<span class="token comment">-- 最前面</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名 字段类型 <span class="token keyword">first</span><span class="token punctuation">;</span>
<span class="token comment">-- xx的后面</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名 字段类型 <span class="token keyword">after</span> xx；<span class="token number">4.</span>删除表字段：<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 字段名<span class="token punctuation">;</span>

<span class="token comment">-- 修改表字段的名字和类型：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 原字段名 新字段名 新字段类型；
<span class="token comment">-- 修改表字段的类型和位置：</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 类型 位置<span class="token keyword">first</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">after</span> xx<span class="token punctuation">)</span>；
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置列uuid，添加触发器</p><p><img src="`+i+`" alt="image.png" loading="lazy"> 然后再下面定义地方输入;</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>BEGIN
SET <span class="token assign-left variable">new.Id</span><span class="token operator">=</span>UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
END
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><h4 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询"><span>基础查询</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询全部数据的全部字段信息</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 查询所有员工的姓名和年龄</span>
<span class="token keyword">select</span> name，age <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token comment">-- 查询年龄在25岁以下的员工信息：</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> age<span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询工资3000块钱的员工姓名，年龄，工资：</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span>

<span class="token comment">-- 别名</span>
<span class="token comment">-- 将查询到的员工姓名ename改成‘姓名’</span>
<span class="token keyword">select</span> ename <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> ename <span class="token keyword">as</span> ‘姓名’ <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> ename ‘姓名’ <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token keyword">select</span> ename 姓名<span class="token punctuation">,</span>sal 工资 <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回结果组合" tabindex="-1"><a class="header-anchor" href="#返回结果组合"><span>返回结果组合</span></a></h4><p>如果你写了好几个sql语句，分别各返回一个数，想拼接成一句，那么我们就需要</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	<span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> yht_betorder <span class="token keyword">WHERE</span> CustomerId <span class="token operator">=</span> <span class="token string">&#39;22690be4-c2cc-4b6d-bbcd-eda1cdf57a6c&#39;</span> <span class="token punctuation">)</span> takeTopicCount<span class="token punctuation">,</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span>
		<span class="token function">Sum</span><span class="token punctuation">(</span> Price <span class="token punctuation">)</span> 
	<span class="token keyword">FROM</span>
		yht_betorder 
	<span class="token keyword">WHERE</span>
		CustomerId <span class="token operator">=</span> <span class="token string">&#39;22690be4-c2cc-4b6d-bbcd-eda1cdf57a6c&#39;</span> 
	<span class="token operator">AND</span> <span class="token punctuation">(</span> PayType <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">OR</span> PayType <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> betOnCount<span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span> <span class="token function">Sum</span><span class="token punctuation">(</span> Price <span class="token punctuation">)</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Price <span class="token punctuation">)</span> <span class="token keyword">FROM</span> yht_betorder <span class="token keyword">WHERE</span> CustomerId <span class="token operator">=</span> <span class="token string">&#39;22690be4-c2cc-4b6d-bbcd-eda1cdf57a6c&#39;</span> <span class="token operator">AND</span> PayType <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">)</span> peepCount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="递归查询" tabindex="-1"><a class="header-anchor" href="#递归查询"><span>递归查询</span></a></h4>`,31),r={href:"https://mp.weixin.qq.com/s?__biz=MjM5MzI5Mzg1OA==&mid=2247485532&idx=1&sn=bca54f59a998cc822516b21de37122b2&chksm=a6987b1191eff20788008bd120cfb138f473cfaefa626ba5c173217c7efb78ecc262400918f5&mpshare=1&scene=1&srcid=0828fMl6DYz4knL5DsIotBPR&sharer_sharetime=1598590937627&sharer_shareid=b24b68115bb61d7d2faf0d3d81a3e656&key=126745e5a1fffccfa5ecea775bc3d34fffb8e7b7f33d78e89f0604a441e69f9f25250637e5007ef55a45fd1bbe291e41ece286bb64a02f1c4c6ab8aee2616b7b2170438d1cb13d55469355a2c94cc3372fa19083612001c6a72de5137a0da16004ce21a410137602620ae46138f42223e60a668ea53bdc3363dee4f721de080d&ascene=1&uin=MzE1MjEyNzg0OQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A15GGCEJre%2BlyyiHGwypJ%2Bs%3D&pass_ticket=8OaLU9sjFuslrHs5iOA5bz833kVuEa16xp3EQftZjvy%2Fs3fETwhFzKTAWoyvM%2FS0&wx_header=0",target:"_blank",rel:"noopener noreferrer"},d=a('<p>造测试数据</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;总公司&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京分公司&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海分公司&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京财务部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1005&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京市场部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发一部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1003&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1007&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发二部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1003&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1008&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发一部一小组&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1006&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1009&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发一部二小组&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1006&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1010&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发二部一小组&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1007&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1011&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京研发二部二小组&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1007&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1012&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;北京市场一部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1005&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1013&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海研发部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1002&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1014&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海研发一部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1013&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>dept<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;1015&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;上海研发二部&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1013&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="向下递归" tabindex="-1"><a class="header-anchor" href="#向下递归"><span>向下递归</span></a></h5><p>编写自定义函数，根据根节点id找到所有的子节点(向下递归)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> $$ \n<span class="token keyword">drop</span> <span class="token keyword">function</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> get_child_list$$ \n<span class="token keyword">create</span> <span class="token keyword">function</span> get_child_list<span class="token punctuation">(</span>in_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> \n<span class="token keyword">begin</span> \n <span class="token keyword">declare</span> ids <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> \n <span class="token keyword">declare</span> tempids <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n \n <span class="token keyword">set</span> tempids <span class="token operator">=</span> in_id<span class="token punctuation">;</span> \n <span class="token keyword">while</span> tempids <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">do</span> \n  <span class="token keyword">set</span> ids <span class="token operator">=</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>ids<span class="token punctuation">,</span>tempids<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">select</span> GROUP_CONCAT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">into</span> tempids <span class="token keyword">from</span> dept <span class="token keyword">where</span> FIND_IN_SET<span class="token punctuation">(</span>pid<span class="token punctuation">,</span>tempids<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>  \n <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span> \n <span class="token keyword">return</span> ids<span class="token punctuation">;</span> \n<span class="token keyword">end</span>  \n$$ \n<span class="token keyword">delimiter</span> <span class="token punctuation">;</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析 （1） delimiter $$ ，用于定义结束符。我们知道 MySQL 默认的结束符为分号，表明指令结束并执行。但是在函数体中，有时我们希望遇到分号不结束，因此需要暂时把结束符改为一个随意的其他值。我这里设置为 $$，意思是遇到 $$ 才结束，并执行当前语句。 （2）drop function if exists get_child_list$$ 。若函数 get_child_list 已经存在了，则先删除它。注意这里需要用 当前自定义的结束符 $$ 来结束并执行语句。因为，这里需要数和下边的函体单独区分开来执行。 （3）create function get_child_list 创建函数。并且参数传入一个根节点的子节点id，需要注意一定要注明参数的类型和长度，如这里是 varchar(10)。returns varchar(1000) 用来定义返回值参数类型。 （4）begin 和 end 中间包围的就是函数体。用来写具体的逻辑。 （5）declare 用来声明变量，并且可以用 default 设置默认值。 这里定义的 ids 即作为整个函数的返回值，是用来拼接成最终我们需要的以逗号分隔的递归串的。 而 tempids 是为了记录下边 while 循环中临时生成的所有子节点以逗号拼接成的字符串。 （6） set 用来给变量赋值。此处把传进来的根节点赋值给 tempids 。 （7） while do ... end while; 循环语句，循环逻辑包含在内。注意，end while 末尾需要加上分号。 循环体内，先用 CONCAT_WS 函数把最终结果 ids 和 临时生成的 tempids 用逗号拼接起来。 然后以 FIND_IN_SET(pid,tempids)&gt;0 为条件，遍历在 tempids 中的所有 pid ，寻找以此为父节点的所有子节点 id ，并且通过 GROUP_CONCAT(id) into tempids 把这些子节点 id 都用逗号拼接起来，并覆盖更新 tempids 。 等下次循环进来时，就会再次拼接 ids ，并再次查找所有子节点的所有子节点。循环往复，一层一层的向下递归遍历子节点。直到判断 tempids 为空，说明所有子节点都已经遍历完了，就结束整个循环。 （8）return ids; 用于把 ids 作为函数返回值返回。 （9）函数体结束以后，记得用结束符 $$ 来结束整个逻辑，并执行。 （10）最后别忘了，把结束符重新设置为默认的结束符分号 。</p><h5 id="向上递归" tabindex="-1"><a class="header-anchor" href="#向上递归"><span>向上递归</span></a></h5><p>因为向下递归时，每一层递归一个父节点都对应多个子节点。 而向上递归时，每一层递归一个子节点只对应一个父节点，关系比较单一。 同样的，我们可以定义一个函数 get_parent_list 来获取根节点的所有父节点。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> $$ \n<span class="token keyword">drop</span> <span class="token keyword">function</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> get_parent_list$$ \n<span class="token keyword">create</span> <span class="token keyword">function</span> get_parent_list<span class="token punctuation">(</span>in_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> \n<span class="token keyword">begin</span> \n <span class="token keyword">declare</span> ids <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n <span class="token keyword">declare</span> tempid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  \n <span class="token keyword">set</span> tempid <span class="token operator">=</span> in_id<span class="token punctuation">;</span> \n <span class="token keyword">while</span> tempid <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">do</span> \n  <span class="token keyword">set</span> ids <span class="token operator">=</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>ids<span class="token punctuation">,</span>tempid<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">select</span> pid <span class="token keyword">into</span> tempid <span class="token keyword">from</span> dept <span class="token keyword">where</span> id<span class="token operator">=</span>tempid<span class="token punctuation">;</span> \n <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span> \n <span class="token keyword">return</span> ids<span class="token punctuation">;</span> \n<span class="token keyword">end</span> \n$$ \n<span class="token keyword">delimiter</span> <span class="token punctuation">;</span> \n \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据"><span>插入数据</span></a></h3><p>基础添加</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 全表插入数据</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token keyword">values</span><span class="token punctuation">(</span>创建表顺序一一对应<span class="token punctuation">)</span>；\n<span class="token comment">-- 指定字段插入数据：</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>name，age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>‘Jerry’<span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 全表批量插入数据：</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;刘备&#39;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;张飞&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 指定字段批量插入数据：</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> emp <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;悟空&#39;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;八戒&#39;</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;沙僧&#39;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 添加多条</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Authors <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;S.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;K&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1011</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;G.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1012</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1013</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;W&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n       <span class="token punctuation">(</span><span class="token number">1014</span><span class="token punctuation">,</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询一个表的数据插入到另一个表中</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">--  Insert和select混合使用，可以使用mysql的selcet语句返回的列和值来填充insert语句的值</span>\n<span class="token keyword">Insert</span> <span class="token keyword">into</span> table1\n<span class="token keyword">Select</span> c1<span class="token punctuation">,</span>c2 <span class="token keyword">from</span> table2\n<span class="token comment">-- 在默认的事务隔离级别下，加锁规则是table1表锁，table2逐步锁(扫描一个锁一个)</span>\n<span class="token comment">-- 解决方案：确保table2后面的where、order或者其他条件，都需要有对应的索引，来避免出现table2全部记录被锁定的情况。</span>\n\n<span class="token comment">-- 示例</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">into</span> syspost<span class="token punctuation">(</span>PostCode<span class="token punctuation">,</span>PostName<span class="token punctuation">,</span>SortNumber<span class="token punctuation">,</span>Disabled<span class="token punctuation">,</span> Creater<span class="token punctuation">,</span>CreateTime<span class="token punctuation">,</span>LastModifier<span class="token punctuation">,</span>LastModifyTime<span class="token punctuation">,</span>Remark<span class="token punctuation">)</span>\n<span class="token keyword">SELECT</span> post_code<span class="token punctuation">,</span>post_name<span class="token punctuation">,</span>post_sort<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>create_by<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_by<span class="token punctuation">,</span>update_time<span class="token punctuation">,</span>remark <span class="token keyword">from</span> ryauth<span class="token punctuation">.</span>sys_post\n \n \n<span class="token comment">-- 如果2张表的字段一致，并且希望插入全部数据，可以用这种方法：</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 目标表 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 来源表<span class="token punctuation">;</span>\n<span class="token comment">-- 例如：insert into insertTest1 select * from insertTest2;</span>\n \n<span class="token comment">-- 如果只希望导入指定字段，可以用这种方法：</span>\n<span class="token keyword">INSERT</span>  <span class="token keyword">INTO</span> 目标表 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 来源表<span class="token punctuation">;</span><span class="token punctuation">(</span>字段必须保持一致<span class="token punctuation">)</span>\n<span class="token comment">-- 例如：insert into insertTest2(id，name) select id,name from insertTest1;</span>\n \n<span class="token comment">-- 注意：如果目标表与来源表主键值相同则会出现添加错误，主键值不同才能插入</span>\n\n\n<span class="token comment">-- 如果您需要只导入目标表中不存在的记录，可以使用这种方法：</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 目标表 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span>来源表 \n    <span class="token keyword">WHERE</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 目标表 <span class="token keyword">where</span> 目标表<span class="token punctuation">.</span>比较字段 <span class="token operator">=</span> 来源表<span class="token punctuation">.</span>比较字段<span class="token punctuation">)</span><span class="token punctuation">;</span> \n \n<span class="token comment">-- 导数据锁表的情况</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> order_record <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> order_today <span class="token keyword">where</span>\n pay_success_time <span class="token operator">&lt;</span> <span class="token string">&#39;2020-03-08 00:00:00&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">-- 加锁规则是：order_record表锁，order_today逐步锁（扫描一个锁一个）。</span>\n<span class="token comment">--解决方案：</span>\n<span class="token comment">--需要避免全表扫描，给 pay_success_time字段添加一个idx_pay_suc_time索引，由于走索引查询，就不会出现扫描全表的情况而锁表了，只会锁定符合条件的记录</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>INSERT IGNORE语句 如果向表中添加一些行数据并且在处理期间发生错误时，insert语句将被终止，并且返回错误消息，但是使用这个语句后，则会忽略错误的行，并将其余行插入表中</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">IGNORE</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span><span class="token punctuation">(</span> value_list<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span> value_list<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 修改Tom的工资为3333</span>\n<span class="token keyword">update</span> emp <span class="token keyword">set</span> sal<span class="token operator">=</span><span class="token number">3333</span> <span class="token keyword">where</span> name<span class="token operator">=</span>’Tom’<span class="token punctuation">;</span>\n<span class="token comment">-- 修改20岁以下的工资为666</span>\n<span class="token keyword">update</span> emp <span class="token keyword">set</span> sal<span class="token operator">=</span><span class="token number">666</span> <span class="token keyword">where</span> age<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token comment">-- 修改id等于3的名字为吕布 年龄为55 工资为20000</span>\n<span class="token keyword">update</span> emp <span class="token keyword">set</span> name<span class="token operator">=</span>’吕布’，age<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span>sal<span class="token operator">=</span><span class="token number">20000</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token comment">-- 修改工资为null的工资为800</span>\n<span class="token keyword">update</span> emp <span class="token keyword">set</span> sal<span class="token operator">=</span><span class="token number">800</span> <span class="token keyword">where</span> sal <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token punctuation">(</span>新前旧后<span class="token punctuation">)</span>he\n\n<span class="token comment">-- 更新多条数据</span>\n<span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>alias<span class="token operator">&gt;</span>\n<span class="token keyword">SET</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n<span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span>\n<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>alias<span class="token punctuation">.</span>column_name<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>alias<span class="token punctuation">.</span>column_name<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n<span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>column_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">value</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>删除表并且创建一个新表：truncate table 表名; truncate、drop和delete的区别： delete用于删除数据，使用delete清空表时自增数值不清  零执行效率最低。 drop 用于删除表 执行效率最高。 truncate 用于删除表并创建新的空表，执行效率比delete 要高，而且自增数值会清零。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 删除id=1的员工：</span>\n<span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">-- 删除年龄在25岁以下的员工：</span>\ndetele <span class="token keyword">from</span> emp <span class="token keyword">where</span> age<span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">;</span>\n<span class="token comment">-- 删除全部数据</span>\n<span class="token keyword">delete</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="清空表优先使用truncate" tabindex="-1"><a class="header-anchor" href="#清空表优先使用truncate"><span>清空表优先使用truncate</span></a></h4><p>truncate table在功能上与不带 where子句的 delete语句相同：二者均删除表中的全部行。但 truncate table比 delete速度快，且使用的系统和事务日志资源少。 delete语句每次删除一行，并在事务日志中为所删除的每行记录一项。truncate table通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。 truncate table删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 drop table语句。</p><p>对于由 foreign key约束引用的表，不能使用 truncate table，而应使用不带 where子句的 DELETE 语句。由于 truncate table不记录在日志中，所以它不能激活触发器。 truncate table不能用于参与了索引视图的表。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MySQL中的DDL语句(create、alter、drop)不支持回滚，因为DDL语句直接修改数据库的结构，只有DML语句(插入、更新、删除)支持事务，可以被回滚</p></div><p>事务是数据库执行SQL的最小的工作单元，可以保证事务的内的多条SQL语句要么全部成功，要么全部失败。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查看数据库自动提交的状态</span>\n<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%autocommit%&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">-- 关闭自动提交：0 关闭 1开启</span>\n<span class="token keyword">Set</span> autocommit<span class="token operator">=</span><span class="token number">0</span>\n<span class="token keyword">commit</span>；提交（一次性提交）\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',28),m=n("p",{由后往前滚:""},"回滚 1.将内存中的修改回滚到上次提交(commit)的点。   rollback; 回滚 2.保存回滚点：savepoint 标识（s1);    回滚到某个点：rollback to 标识（s1);",-1),v=a(`<h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h2><h3 id="主键约束" tabindex="-1"><a class="header-anchor" href="#主键约束"><span>主键约束</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 唯一且非空：关键词组---&gt;(primary key)</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              
<span class="token comment">-- 自增：关键词组---&gt;（auto_increment）</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t2<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span>  <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      
<span class="token comment">-- 字段值为null时值会自己增长;</span>
<span class="token comment">-- 字段值可以手动赋值;</span>
<span class="token comment">-- 增长规则：从曾经出现的最大值基础上+1;</span>
<span class="token comment">-- 只增不减（delete清空表自增数值不清零）。</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,4),b={href:"https://www.cnblogs.com/loser1949/category/1137810.html",target:"_blank",rel:"noopener noreferrer"};function y(w,g){const e=o("ExternalLinkIcon");return c(),l("div",null,[k,n("p",null,[s("资料： "),n("a",r,[s("同事问我MySQL怎么递归查询，我懵逼了..."),p(e)])]),d,m,v,n("p",null,[s("MySQL基础知识:"),n("a",b,[s("https://www.cnblogs.com/loser1949/category/1137810.html"),p(e)])])])}const E=t(u,[["render",y],["__file","jichuzhishi.html.vue"]]),_=JSON.parse('{"path":"/dataBase/mysql/jichuzhishi/jichuzhishi.html","title":"基础知识","lang":"zh-CN","frontmatter":{"title":"基础知识","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"jichuzhishi","slug":"hz9atq","docsId":"26499004","description":"提示 遇到数据库关键字需要加```符号`，比如 系统操作 修改密码 程序连接 磁盘统计 数据库 获取指定数据库下所有表以及表备注 获取指定数据库下是否存在某一个表 表 表结构 创建表 修改表 设置列uuid，添加触发器 image.png 然后再下面定义地方输入; 查询 基础查询 返回结果组合 如果你写了好几个sql语句，分别各返回一个数，想拼接成一句...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/mysql/jichuzhishi/jichuzhishi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基础知识"}],["meta",{"property":"og:description","content":"提示 遇到数据库关键字需要加```符号`，比如 系统操作 修改密码 程序连接 磁盘统计 数据库 获取指定数据库下所有表以及表备注 获取指定数据库下是否存在某一个表 表 表结构 创建表 修改表 设置列uuid，添加触发器 image.png 然后再下面定义地方输入; 查询 基础查询 返回结果组合 如果你写了好几个sql语句，分别各返回一个数，想拼接成一句..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614052667071-61ee558e-a821-4b1f-9ac4-5ecc0f5d553b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-05T04:19:15.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-05T04:19:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础知识\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614052667071-61ee558e-a821-4b1f-9ac4-5ecc0f5d553b.png\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-05T04:19:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"系统操作","slug":"系统操作","link":"#系统操作","children":[{"level":3,"title":"修改密码","slug":"修改密码","link":"#修改密码","children":[]},{"level":3,"title":"程序连接","slug":"程序连接","link":"#程序连接","children":[]},{"level":3,"title":"磁盘统计","slug":"磁盘统计","link":"#磁盘统计","children":[]}]},{"level":2,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":2,"title":"表","slug":"表","link":"#表","children":[{"level":3,"title":"表结构","slug":"表结构","link":"#表结构","children":[]},{"level":3,"title":"创建表","slug":"创建表","link":"#创建表","children":[]},{"level":3,"title":"修改表","slug":"修改表","link":"#修改表","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[{"level":4,"title":"基础查询","slug":"基础查询","link":"#基础查询","children":[]},{"level":4,"title":"返回结果组合","slug":"返回结果组合","link":"#返回结果组合","children":[]},{"level":4,"title":"递归查询","slug":"递归查询","link":"#递归查询","children":[{"level":5,"title":"向下递归","slug":"向下递归","link":"#向下递归","children":[]},{"level":5,"title":"向上递归","slug":"向上递归","link":"#向上递归","children":[]}]}]},{"level":3,"title":"插入数据","slug":"插入数据","link":"#插入数据","children":[]},{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[{"level":4,"title":"清空表优先使用truncate","slug":"清空表优先使用truncate","link":"#清空表优先使用truncate","children":[]}]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":2,"title":"约束","slug":"约束","link":"#约束","children":[{"level":3,"title":"主键约束","slug":"主键约束","link":"#主键约束","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1695484404000,"updatedTime":1704428355000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":4},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":12.56,"words":3769},"filePathRelative":"dataBase/mysql/jichuzhishi/jichuzhishi.md","localizedDate":"2023年9月3日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>遇到数据库关键字需要加```符号`，比如</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">select</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>Index<span class=\\"token punctuation\\">`</span></span>  <span class=\\"token keyword\\">from</span> sample<span class=\\"token punctuation\\">.</span>menu\\n</code></pre></div></div>","autoDesc":true}');export{E as comp,_ as data};
