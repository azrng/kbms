import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c,a as n,d as s,e as t,b as e}from"./app-qB9_Bjjp.js";const i={},u=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>通过编程发挥多核或者多处理器优势来同时执行多个独立的任务的方式称为并行编程，它是多线程这个更宽泛概念下的一个子集，是一种特殊的多线程编程，</p><p>在单核计算机上，操作系统会为每个线程时间片(windows系统是20毫秒)来模拟并发执行。在多核计算机上，两个线程可以并行执行(会和机器上其他执行的进程进行竞争)。</p><h2 id="并行场景" tabindex="-1"><a class="header-anchor" href="#并行场景"><span>并行场景</span></a></h2><p>.NET引入的Task Parallel Library(任务并行库，TPL)，动态地扩展并发度，以最有效的方式使用所有可用的处理器。 TPL支持分区工作、支持基于ThreadPool调度、支持取消异步操作、支持状态管理，也支持数据并行、任务并行和流水线Dataflow。</p><ul><li>数据并行：有大量数据需要处理，并且必须对每一份数据执行同样的操作</li><li>任务并行：通过任务并发运行不同的操作</li><li>流水线：任务并行和数据并行的结合体(需要引入System.Threading.Tasks.Dataflow组件库)</li></ul><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><h3 id="对比并发" tabindex="-1"><a class="header-anchor" href="#对比并发"><span>对比并发</span></a></h3><p>并行则是指同时执行多个任务或进程，每个任务都可以独立运行，且每个任务可分配到不同的处理器或计算资源上，以实现更高效的处理能力。</p><p>并行是一种特殊的并发，因为它也涉及到多个任务同时执行的情况，但并行的关注点更为强调在于如何并行地执行任务以提高性能，例如通过使用多核处理器、分布式系统等技术来实现。与此相比，单处理器并发执行的任务可能仅仅是为了提高用户体验，或者是防止某些任务长时间占用处理器导致其他任务无法及时响应。</p><h3 id="对比多线程" tabindex="-1"><a class="header-anchor" href="#对比多线程"><span>对比多线程</span></a></h3><p>程序同时执行代码的机制叫做多线程，多线程是并发的基础概念。 &quot;并行编程&quot;强调的是同时执行多个任务，而&quot;多线程编程&quot;强调的是在同一时间内执行多个线程。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="硬件线程和软件线程" tabindex="-1"><a class="header-anchor" href="#硬件线程和软件线程"><span>硬件线程和软件线程</span></a></h3><p>多核处理器带有一个以上的物理内核：物理内核是真正的独立处理单元，多个物理内核使得多条指令能够同时并行运行。 硬件线程也称为逻辑内核，一个物理内核可能会使用超线程技术提供多个硬件线程，所以一个硬件线程并不代表一个物理内核。程序通过Environment.ProcessorCount 得到的就是逻辑内核（本人的机器是i5-5300U 虚拟4核）， Windows中每个运行的程序都是一个进程，每一个进程都会创建并运行一个或多个线程，这些线程称为软件线程，硬件线程就像是一条泳道，而软件线程就是在其中游泳的人。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>并行编程则通常使用Parallel类或PLINQ（Parallel LINQ）来实现。</p><h3 id="差异" tabindex="-1"><a class="header-anchor" href="#差异"><span>差异</span></a></h3><table><thead><tr><th></th><th>PLINQ</th><th>Parallel</th></tr></thead><tbody><tr><td>使用方式</td><td>通过扩展 LINQ 查询语法，并提供了 AsParallel() 扩展方法来将查询转换为并行查询</td><td>提供了更直观的编程模型，通过 Parallel.For 和 Parallel.ForEach 的静态方法来实现并行循环</td></tr><tr><td>数据分区</td><td>默认会自动将数据集分成多个分区，并根据系统资源和负载情况进行动态调整</td><td>允许手动控制任务的分区和调度策略，允许更精细的控制任务的执行方式</td></tr><tr><td>错误处理</td><td>捕获并延迟异常，直到枚举结果时才抛出</td><td>将异常聚合到一个 AggregateException 对象中，并在循环完成后抛出</td></tr><tr><td>使用场景</td><td>数据集查询：对大型数据集进行查询、转换操作</td><td></td></tr><tr><td>数据流管道：构建数据流管道，进行一系列并行操作符(如过滤、映射、排序等)，可以依次作用于数据集</td><td>1.循环和迭代操作：对数组、集合和范围等进行并行遍历和计算操作</td><td></td></tr><tr><td>2.自定义任务管理：允许手动分割任务范围、指定任务调度策略和粒度，并且可以方便进行任务间通信和同步</td><td></td><td></td></tr><tr><td>依赖</td><td>底层实现都依赖于相同的并行任务框架和线程池</td><td></td></tr><tr><td>异步处理</td><td>取值的时候再处理，返回是<code>Task&lt;T&gt;</code></td><td>正常处理，返回是T</td></tr><tr><td>可扩展性和灵活性</td><td>较高的API，封装了更多并行执行细节，提供了更简单的使用方式，但相对于Parallel有更少的灵活性</td><td>先对较低级别的API，提供了更多的灵活性，允许手动控制并行执行的细节</td></tr></tbody></table><h3 id="数据并行plinq" tabindex="-1"><a class="header-anchor" href="#数据并行plinq"><span>数据并行PLINQ</span></a></h3><p>可以将一个集合转为并行操作的集合</p><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>PLINQ仅适用于本地集合(循环的是本地集合)</li><li>查询过程中各个分区产生的异常会封送到AggregateException然后重新抛出</li><li>默认情况下是无序的，但可以使用AsOrdered有序，但是性能也会有所消耗</li><li>执行过程必须是线程安全的，否则结果不可靠</li><li>并行化过程的任务分区，结果整理，以及线程开辟和管理都需要成本</li><li>如果它认为并行化是没有必要的，会使查询更慢的，会转为顺序执行</li><li>默认情况下，PLINQ总会认为你执行的是CPU Bound，然后开启核心数个任务</li></ul><h4 id="asparallel" tabindex="-1"><a class="header-anchor" href="#asparallel"><span>AsParallel</span></a></h4><p>示例</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var module = new List&lt;string&gt; { &quot;check&quot;, &quot;lab&quot;, &quot;order&quot; };
//使用了 AsParallel() 方法将 List&lt;string&gt; 转换为一个 ParallelQuery&lt;string&gt; 对象
module
    .AsParallel()
    .WithDegreeOfParallelism(3)
    .ForAll(item =&gt;
    {
        var result = TestMethod(item);
        Console.Out.WriteLine(result);
    });

// 异步处理
var module = new List&lt;string&gt; { &quot;check&quot;, &quot;lab&quot;, &quot;order&quot; };

//查询中使用 async 和 await 关键字来调用异步方法。在查询中的每个元素上执行的异步操作将在后台线程上并行进行，以提高整体效率
var result = module.AsParallel().Select(async t =&gt; await TestMethodAsync(t)).ToList();
Console.WriteLine($&quot;操作结束,耗时：{watch.ElapsedMilliseconds}&quot;);
foreach (var item in result)
{
    //到这一步才开始真正执行
    await Console.Out.WriteLineAsync(await item);
}

private async Task&lt;string&gt; TestMethodAsync(string i)
{
    await Task.Delay(1000);
    await Console.Out.WriteLineAsync(&quot;当前操作值&quot; + i);
    return &quot;success&quot; + i;
}

private string TestMethod(int i)
{
    Thread.Sleep(1000);
    return &quot;success&quot; + i;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="assequential" tabindex="-1"><a class="header-anchor" href="#assequential"><span>AsSequential</span></a></h4><h4 id="asordered" tabindex="-1"><a class="header-anchor" href="#asordered"><span>AsOrdered</span></a></h4><h3 id="数据并行parallel" tabindex="-1"><a class="header-anchor" href="#数据并行parallel"><span>数据并行Parallel</span></a></h3><h4 id="数据并行for" tabindex="-1"><a class="header-anchor" href="#数据并行for"><span>数据并行For</span></a></h4><p>结构</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> fromInclude<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> toExclude<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Parallel.For 类似for循环，区别是Parallel.For 是异步处理多条数据，意味着它是无序输出。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 从开始到结果</span>
Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 可能为：0 4 1 3 5 2</span>

<span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParallelOptions</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取或设置此ParallelOptions实例启用的最大并行度</span>
    MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Thread={0}, i={1}&quot;</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span>CurrentManagedThreadId<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据并行foreach" tabindex="-1"><a class="header-anchor" href="#数据并行foreach"><span>数据并行ForEach</span></a></h4><blockquote><p>注意：使用的时候要对CPU核数进行限制，否则很有可能会导致CPU占用很高</p></blockquote>`,36),r={href:"https://mp.weixin.qq.com/s/JVqdGeBHBm7ns2huucjMKQ",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>格式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForEach</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> Action<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么Parallel.ForEach就是异步的foreach，仿照上面例子改造一下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> all <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 可能为：0 4 5 3 1 2</span>

<span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParallelOptions</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取或设置此ParallelOptions实例启用的最大并行度</span>
    MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> Parallel<span class="token punctuation">.</span><span class="token function">ForEachAsync</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">TestMethodAsync</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并行去操作并添加值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;check&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> collect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 查询操作</span>
    <span class="token class-name"><span class="token keyword">var</span></span> curr <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">lock</span> <span class="token punctuation">(</span>collect<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        collect<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据并行forall" tabindex="-1"><a class="header-anchor" href="#数据并行forall"><span>数据并行ForAll</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;check&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function">AsParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithDegreeOfParallelism</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForAll</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ForAll操作结束,耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">watch<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><h5 id="查询素数" tabindex="-1"><a class="header-anchor" href="#查询素数"><span>查询素数</span></a></h5><p>需求：找到100000内素数的个数 由每个线程独立计算线程内迭代产生的素数和，最后再对几个和求和。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        sw<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;优化后的共享内存并发模型耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> state<span class="token punctuation">,</span> local<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 被[2,x/2]任一数字整除，就不是质数</span>
                    f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span>
                local<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> local<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> local <span class="token operator">=&gt;</span> Interlocked<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">ref</span> sum<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;1-100000内质数的个数是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务并行invoke" tabindex="-1"><a class="header-anchor" href="#任务并行invoke"><span>任务并行Invoke</span></a></h3><p>让许多方法并行运行的最简单的方法就是使用Parallel类的Invoke方法，Invoke方法接受一个Action的参数组</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span>  System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">.</span>Parallel<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>WatchMovie<span class="token punctuation">,</span> HaveDinner<span class="token punctuation">,</span> ReadBook<span class="token punctuation">,</span> WriteBlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意 <strong>没有特定的执行顺序</strong> Parallel.Invoke方法只有在4个方法全部完成之后才会返回。它至少需要4个硬件线程才足以让这4个方法并发运行。</p><p>但并不保证这4个方法能够同时启动运行，如果一个或者多个内核处于繁忙状态，那么底层的调度逻辑可能会延迟某些方法的初始化执行。</p></blockquote>`,16),k={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.parallel.invoke?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="缓冲行为" tabindex="-1"><a class="header-anchor" href="#缓冲行为"><span>缓冲行为</span></a></h2><p>PLINQ和LINQ一样，也是延迟查询。不同的是，LINQ完全由使用方通过“拉”的方式驱动：每个元素都在使用方需要时从序列中被提取。而PLINQ通常使用独立的线程从序列中提取元素，然后通过查询链并行处理这些元素，将结果保存在一个小缓冲区中，以准备在需要的时候提供给使用方。如果使用方在枚举过程中暂停或中断，查询也会暂停或停止，这样可以不浪费 CPU 时间或内存。 你可以通过在AsParallel之后调用WithMergeOptions来调整 PLINQ 的缓冲行为，ParallelMergeOptions有以下几种模式</p><ul><li>Default，默认使用AutoBuffered通常能产生最佳的整体效果</li><li>NoBuffered，禁用缓冲，一旦计算出结果，该元素即对查询的使用者可用</li><li>AutoBuffered，由系统选择缓冲区大小，结果会在可供使用前输出到缓冲区</li><li>FullyBuffered，完全缓冲，使用时可以得到全部计算结果（OrderBy,Reverse）。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p>Parallel主要还是用到异步，大批量数据处理速度上占有优势，但是不考虑顺序的前提下。 Parallel有啥缺点？“并行”异步会涉及到线程安全问题。还好有解决方案，可以用Interlocked，Interlocked提供了一些简单计算原子操作，可以去查询一下相关资料。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public static int CalcFactorial(int n)
{
	return n &lt;= 2 ? n:n * CalcFactorial(n - 1);
}
public static int SumFactorial()
{
	int[] datas = { 4, 5, 7, 9 };
	int sum = 0;
	Parallel.ForEach(datas, n =&gt; {
		Interlocked.Add(ref sum, CalcFactorial(n));
	});
	return sum;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,7),m={href:"https://mp.weixin.qq.com/s/ytm7urDHRQD5QQLYV_wiMA",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/n2hdMzT5jYXTaVMnF7oFGw",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/JVqdGeBHBm7ns2huucjMKQ"),t(a)]),s(" | C# Parallel")]),d,n("p",null,[s("资料："),n("a",k,[s("https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.parallel.invoke?view=net-7.0"),t(a)])]),v,n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/ytm7urDHRQD5QQLYV_wiMA"),t(a)]),s(" | 三分钟总览微软任务并行库TPL C## 多线程并行编程篇之结构化："),n("a",h,[s("https://mp.weixin.qq.com/s/n2hdMzT5jYXTaVMnF7oFGw"),t(a)])])])}const q=p(i,[["render",b],["__file","parallel.html.vue"]]),P=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/parallel.html","title":"并行操作","lang":"zh-CN","frontmatter":{"title":"并行操作","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["thread","plinq","parallel"],"description":"概述 通过编程发挥多核或者多处理器优势来同时执行多个独立的任务的方式称为并行编程，它是多线程这个更宽泛概念下的一个子集，是一种特殊的多线程编程， 在单核计算机上，操作系统会为每个线程时间片(windows系统是20毫秒)来模拟并发执行。在多核计算机上，两个线程可以并行执行(会和机器上其他执行的进程进行竞争)。 并行场景 .NET引入的Task Para...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/parallel.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"并行操作"}],["meta",{"property":"og:description","content":"概述 通过编程发挥多核或者多处理器优势来同时执行多个独立的任务的方式称为并行编程，它是多线程这个更宽泛概念下的一个子集，是一种特殊的多线程编程， 在单核计算机上，操作系统会为每个线程时间片(windows系统是20毫秒)来模拟并发执行。在多核计算机上，两个线程可以并行执行(会和机器上其他执行的进程进行竞争)。 并行场景 .NET引入的Task Para..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T15:46:57.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"thread"}],["meta",{"property":"article:tag","content":"plinq"}],["meta",{"property":"article:tag","content":"parallel"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并行操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-25T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"并行场景","slug":"并行场景","link":"#并行场景","children":[]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[{"level":3,"title":"对比并发","slug":"对比并发","link":"#对比并发","children":[]},{"level":3,"title":"对比多线程","slug":"对比多线程","link":"#对比多线程","children":[]}]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"硬件线程和软件线程","slug":"硬件线程和软件线程","link":"#硬件线程和软件线程","children":[]}]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"差异","slug":"差异","link":"#差异","children":[]},{"level":3,"title":"数据并行PLINQ","slug":"数据并行plinq","link":"#数据并行plinq","children":[{"level":4,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":4,"title":"AsParallel","slug":"asparallel","link":"#asparallel","children":[]},{"level":4,"title":"AsSequential","slug":"assequential","link":"#assequential","children":[]},{"level":4,"title":"AsOrdered","slug":"asordered","link":"#asordered","children":[]}]},{"level":3,"title":"数据并行Parallel","slug":"数据并行parallel","link":"#数据并行parallel","children":[{"level":4,"title":"数据并行For","slug":"数据并行for","link":"#数据并行for","children":[]},{"level":4,"title":"数据并行ForEach","slug":"数据并行foreach","link":"#数据并行foreach","children":[]},{"level":4,"title":"数据并行ForAll","slug":"数据并行forall","link":"#数据并行forall","children":[]},{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[{"level":5,"title":"查询素数","slug":"查询素数","link":"#查询素数","children":[]}]}]},{"level":3,"title":"任务并行Invoke","slug":"任务并行invoke","link":"#任务并行invoke","children":[]}]},{"level":2,"title":"缓冲行为","slug":"缓冲行为","link":"#缓冲行为","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1711381617000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":9.08,"words":2725},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/parallel.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>通过编程发挥多核或者多处理器优势来同时执行多个独立的任务的方式称为并行编程，它是多线程这个更宽泛概念下的一个子集，是一种特殊的多线程编程，</p>\\n<p>在单核计算机上，操作系统会为每个线程时间片(windows系统是20毫秒)来模拟并发执行。在多核计算机上，两个线程可以并行执行(会和机器上其他执行的进程进行竞争)。</p>\\n<h2>并行场景</h2>\\n<p>.NET引入的Task Parallel Library(任务并行库，TPL)，动态地扩展并发度，以最有效的方式使用所有可用的处理器。\\nTPL支持分区工作、支持基于ThreadPool调度、支持取消异步操作、支持状态管理，也支持数据并行、任务并行和流水线Dataflow。</p>","autoDesc":true}');export{q as comp,P as data};
