import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as e}from"./app-CX6H2AQa.js";const i="/kbms/dotnet/41802683a56a429097fad3bb4faa7d50.png",t={},r=e(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>WebTransport 是一个新的 Web API，使用 HTTP/3 协议来支持双向传输。它用于 Web 客户端和 HTTP/3 服务器之间的双向通信。它支持通过 不可靠的 Datagrams API 发送数据，也支持可靠的 Stream API 发送数据。</p><p>因为 HTTP/3 使用了基于 UDP 的 QUIC 协议，所以 Web Transport 可以在一个连接上创建多个流，而且不会相互阻塞。</p><p>WebTransport 支持三种不同类型的流量：数据报（datagrams） 以及单向流和双向流。</p><p>WebTransport 的设计基于现代 Web 平台基本类型（比如 Streams API）。它在很大程度上依赖于 promise，并且可以很好地与 <code>async</code> 和 <code>await</code> 配合使用。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="在-net-7-中使用-webtransport" tabindex="-1"><a class="header-anchor" href="#在-net-7-中使用-webtransport"><span>在 .NET 7 中使用 WebTransport</span></a></h3><p>WebTransport 在 .NET 7 以及以上版本可用，我们新建一个 .NET Core 的空项目，修改 csproj 文件，设置 EnablePreviewFeatures 和 RuntimeHostConfigurationOption ，如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;Project Sdk=&quot;Microsoft.NET.Sdk.Web&quot;&gt;</span></span>
<span class="line"><span>  &lt;PropertyGroup&gt;</span></span>
<span class="line"><span>    &lt;EnablePreviewFeatures&gt;True&lt;/EnablePreviewFeatures&gt;</span></span>
<span class="line"><span>  &lt;/PropertyGroup&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &lt;ItemGroup&gt;</span></span>
<span class="line"><span>    &lt;RuntimeHostConfigurationOption Include=&quot;Microsoft.AspNetCore.Server.Kestrel.Experimental.WebTransportAndH3Datagrams&quot; Value=&quot;true&quot; /&gt;</span></span>
<span class="line"><span>  &lt;/ItemGroup&gt;</span></span>
<span class="line"><span>&lt;/Project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要设置 WebTransport 连接，首先需要配置 Web 主机并通过 HTTP/3 侦听端口：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var builder = WebApplication.CreateBuilder(args);</span></span>
<span class="line"><span>builder.WebHost.ConfigureKestrel((context, options) =&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    // Port configured for WebTransport</span></span>
<span class="line"><span>    options.ListenAnyIP([SOME PORT], listenOptions =&gt;</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        listenOptions.UseHttps(GenerateManualCertificate());</span></span>
<span class="line"><span>        listenOptions.Protocols = HttpProtocols.Http1AndHttp2AndHttp3;</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>var app = builder.Build();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改下面的代码，接收 WebTransport 请求和会话。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>app.Run(async (context) =&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    var feature = context.Features.GetRequiredFeature&lt;IHttpWebTransportFeature&gt;();</span></span>
<span class="line"><span>    if (!feature.IsWebTransportRequest)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    var session = await feature.AcceptAsync(CancellationToken.None); </span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>await app.RunAsync();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等待 AcceptStreamAsync 方法直到接收到一个 Stream，使用 stream.Transport.Input 写入数据，stream.Transport.Output 读取数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var stream = await session.AcceptStreamAsync(CancellationToken.None);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var inputPipe = stream.Transport.Input;</span></span>
<span class="line"><span>var outputPipe = stream.Transport.Output;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="在-javascript-中使用-webtransport" tabindex="-1"><a class="header-anchor" href="#在-javascript-中使用-webtransport"><span>在 JavaScript 中使用 WebTransport</span></a></h3><p>传入服务地址并创建 WebTransport 实例, transport.ready 完成，此时连接就可以使用了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const url = &#39;https://localhost:5002&#39;;</span></span>
<span class="line"><span>const transport = new WebTransport(url);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>await transport.ready;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接到服务器后，可以使用 Streams API 发送和接收数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// Send two Uint8Arrays to the server.</span></span>
<span class="line"><span>const stream = await transport.createSendStream();</span></span>
<span class="line"><span>const writer = stream.writable.getWriter();</span></span>
<span class="line"><span>const data1 = new Uint8Array([65, 66, 67]);</span></span>
<span class="line"><span>const data2 = new Uint8Array([68, 69, 70]);</span></span>
<span class="line"><span>writer.write(data1);</span></span>
<span class="line"><span>writer.write(data2);</span></span>
<span class="line"><span>try {</span></span>
<span class="line"><span>  await writer.close();</span></span>
<span class="line"><span>  console.log(&#39;All data has been sent.&#39;);</span></span>
<span class="line"><span>} catch (error) {</span></span>
<span class="line"><span>  console.error(\`An error occurred: \${error}\`);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>https://mp.weixin.qq.com/s/m10ProVLVMXfQ1UEJ8mDig</p>`,23),p=[r];function l(d,c){return n(),a("div",null,p)}const u=s(t,[["render",l],["__file","webTransport.html.vue"]]),m=JSON.parse('{"path":"/dotnet/api/webTransport.html","title":"WebTransport","lang":"zh-CN","frontmatter":{"title":"WebTransport","lang":"zh-CN","date":"2024-01-15T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["API"],"description":"简介 WebTransport 是一个新的 Web API，使用 HTTP/3 协议来支持双向传输。它用于 Web 客户端和 HTTP/3 服务器之间的双向通信。它支持通过 不可靠的 Datagrams API 发送数据，也支持可靠的 Stream API 发送数据。 因为 HTTP/3 使用了基于 UDP 的 QUIC 协议，所以 Web Trans...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/webTransport.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"WebTransport"}],["meta",{"property":"og:description","content":"简介 WebTransport 是一个新的 Web API，使用 HTTP/3 协议来支持双向传输。它用于 Web 客户端和 HTTP/3 服务器之间的双向通信。它支持通过 不可靠的 Datagrams API 发送数据，也支持可靠的 Stream API 发送数据。 因为 HTTP/3 使用了基于 UDP 的 QUIC 协议，所以 Web Trans..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/dotnet/41802683a56a429097fad3bb4faa7d50.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T05:51:03.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:published_time","content":"2024-01-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T05:51:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebTransport\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/dotnet/41802683a56a429097fad3bb4faa7d50.png\\"],\\"datePublished\\":\\"2024-01-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-15T05:51:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"在 .NET 7 中使用 WebTransport","slug":"在-net-7-中使用-webtransport","link":"#在-net-7-中使用-webtransport","children":[]},{"level":3,"title":"在 JavaScript 中使用 WebTransport","slug":"在-javascript-中使用-webtransport","link":"#在-javascript-中使用-webtransport","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1705297863000,"updatedTime":1705297863000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"dotnet/api/webTransport.md","localizedDate":"2024年1月15日","excerpt":"<h2>简介</h2>\\n<p>WebTransport 是一个新的 Web API，使用 HTTP/3 协议来支持双向传输。它用于 Web 客户端和 HTTP/3 服务器之间的双向通信。它支持通过 不可靠的 Datagrams API 发送数据，也支持可靠的 Stream API 发送数据。</p>\\n<p>因为 HTTP/3 使用了基于 UDP 的 QUIC 协议，所以 Web Transport 可以在一个连接上创建多个流，而且不会相互阻塞。</p>\\n<p>WebTransport 支持三种不同类型的流量：数据报（datagrams） 以及单向流和双向流。</p>\\n<p>WebTransport 的设计基于现代 Web 平台基本类型（比如 Streams API）。它在很大程度上依赖于 promise，并且可以很好地与 <code>async</code> 和 <code>await</code> 配合使用。</p>","autoDesc":true}');export{u as comp,m as data};
