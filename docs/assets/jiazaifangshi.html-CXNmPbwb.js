import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D8HBJYTp.js";const e={},p=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><ul><li>延迟加载(懒加载)，默认不支持延迟加载</li><li>预先加载(贪婪加载、饥饿加载)</li></ul><h2 id="贪婪加载" tabindex="-1"><a class="header-anchor" href="#贪婪加载"><span>贪婪加载</span></a></h2><p>贪婪加载也叫预先加载。 所谓贪婪加载，就是在查询结果中包含导航关系，而这就需要明确的要求。 比如这个示例中，User拥有Group导航属性</p><blockquote><p>导航关系有一对一和一对多</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DataEntity</span></span>
<span class="token punctuation">{</span>
    xxx

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Group</span> Group <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你查询语句中不使用导航属性的时候，该Group属性的值为null。 在 EF Core 中，只有明确要求的情况下，才会在结果中包含导航关系。</p><p>如果使用贪婪加载，可以让 EF Core 在查询结果中包含导航属性的值。 贪婪加载通过使用 Include() 和 ThenInclude() 方法实现，如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> gradeList <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Users
    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Group<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Include 方法用来加载第一层导航关系，如果想进一步加载导航关系需要使用ThenInclude 方法用来进一步加载导航关系。该方法可以无限递进非关系深度，如果关系不存在，查询也不会失败，只是不会返回任何东西。</p><p>总结： 优点：以一种高效的方式查询关系型数据，使用最少的数据库访问次数。 缺点：一次性加载了所有数据，即使我们不需要使用其中的某些数据。</p><h2 id="显式加载" tabindex="-1"><a class="header-anchor" href="#显式加载"><span>显式加载</span></a></h2><p>就是EFCore显式地将关系加载到已经加载的实体中。用的时候才去加载导航属性的内容。 比如这个示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> account <span class="token operator">=</span> _context<span class="token punctuation">.</span>Accounts<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

_context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span>ss <span class="token operator">=&gt;</span> ss<span class="token punctuation">.</span>AccountSubjects<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> accountSubject <span class="token keyword">in</span> account<span class="token punctuation">.</span>AccountSubjects<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>accountSubject<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Reference</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先加载的是 Acount 实体，然后通过 AccountSubjects 导航属性关联所有相关的子项。 在这种情况下，Acount 实体被称为主实体。 Collection 方法可以把一个集合纳入主实体，Reference 方法可以把单一的实体纳入主实体。 Account 实体通过使用 Collection 方法，包含了 AccountSubjec 集合。 AccountSubject 实体通过使用 Reference 方法，包含了 Subject 实体。 使用显式加载时，除了 Load 加载方法，还可以使用查询方法，它允许将查询应用到关系中：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> _context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>AccountSubjects<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> subjects <span class="token operator">=</span> _context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>AccountSubjects<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结： 优点：只有当真正需要的时候，我们才会在实体类上加载一个导航关系。以及如果我们有复杂的业务逻辑，那就可以分别加载导航关系。并且导航关系可以封装到一个方法、甚至一个类中，从而让代码更容易阅读和维护。 缺点：会产生更多的数据库查询次数来加载所有需要的关系，会降低查询的效率。</p><h2 id="延迟加载-懒惰加载" tabindex="-1"><a class="header-anchor" href="#延迟加载-懒惰加载"><span>延迟加载/懒惰加载</span></a></h2><p>懒加载也叫延迟加载、按需加载，它和贪婪加载相反，顾名思义，暂时不需要的数据就不加载，而是推迟到使用它时再加载。 延迟加载是一个比较重要的数据访问特性，它可以有效地减少与数据源的交互。</p><blockquote><p>注意，这里所指的交互不是指交互次数，而是指交互的数据量。</p></blockquote><p>EF Core 中默认是不开启这个功能的，因为在使用不当的情况下，它会降低应用的性能。 想要使用懒加载，最简单的办法就是安装 Microsoft.EntityFrameworkCore.Proxies 库，使用代理模式实现懒加载。 在上下文类的配置方法中启用懒加载代理：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">UseLazyLoadingProxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，EF Core 会为任何可以被重载的导航属性，启用懒惰加载。 需要注意的是，这是一种全局配置，所有的导航属性都必须使用 virtual 修饰，否则会发生异常错误。 不过，这样一来的话，所有的导航属性都默认启用了懒加载。 除了使用代理模式，还可以使用 EF Core 中的懒加载服务，这种方式不需要用 virtual 修饰导航属性，而且可以只针对特定实体进行懒加载。 具体来看示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILazyLoader</span> _lazyLoader<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Account</span><span class="token punctuation">(</span><span class="token class-name">ILazyLoader</span> lazyLoader<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _lazyLoader <span class="token operator">=</span> lazyLoader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">private</span> <span class="token class-name">ICollection<span class="token punctuation">&lt;</span>AccountSubject<span class="token punctuation">&gt;</span></span> _accountSubjects<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span>AccountSubject<span class="token punctuation">&gt;</span></span> AccountSubjects
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _lazyLoader<span class="token punctuation">?.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> _accountSubjects<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> _accountSubjects <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用构造函数注入的方式，将 ILazyLoader 服务注入到实体类中，然后修改需要开启懒加载的字段。 需要注意的是，滥用懒加载，会造成性能上的问题。 虽然懒加载只在需要读取关联数据的时候才进行加载，但是如果在遍历中使用的话，每次读取一条数据，那么就会查询一次数据库，增加了访问数据库的次数，会导致数据库的压力增大。 贪婪加载也一样会有性能上的问题，因为一次性读取所有相关的数据，有可能会导致部分数据在实际上用不到，从而使查询数据的效率降低。</p><p>总结 优点：只在读取关联数据的时候才会加载。 缺点：在遍历中使用的时候，会增加访问数据库的次数。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>如果在开发时不确定是否会需要相关联的数据，那么可以选择懒加载，待确定需要后再加载它。 如果在开发时就可以预见，需要一次性加载所有的数据，而且需要包含导航关系的所有数据， 那么使用贪婪加载是比较好的选择。</p>`,28),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","jiazaifangshi.html.vue"]]),k=JSON.parse('{"path":"/orm/efcore/jichuzhishi/jiazaifangshi.html","title":"加载方式","lang":"zh-CN","frontmatter":{"title":"加载方式","lang":"zh-CN","date":"2022-11-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"jiazaifangshi","slug":"wxns14","docsId":"77753865","description":"前言 延迟加载(懒加载)，默认不支持延迟加载 预先加载(贪婪加载、饥饿加载) 贪婪加载 贪婪加载也叫预先加载。 所谓贪婪加载，就是在查询结果中包含导航关系，而这就需要明确的要求。 比如这个示例中，User拥有Group导航属性 导航关系有一对一和一对多 当你查询语句中不使用导航属性的时候，该Group属性的值为null。 在 EF Core 中，只有明...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/jiazaifangshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"加载方式"}],["meta",{"property":"og:description","content":"前言 延迟加载(懒加载)，默认不支持延迟加载 预先加载(贪婪加载、饥饿加载) 贪婪加载 贪婪加载也叫预先加载。 所谓贪婪加载，就是在查询结果中包含导航关系，而这就需要明确的要求。 比如这个示例中，User拥有Group导航属性 导航关系有一对一和一对多 当你查询语句中不使用导航属性的时候，该Group属性的值为null。 在 EF Core 中，只有明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-11-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加载方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"贪婪加载","slug":"贪婪加载","link":"#贪婪加载","children":[]},{"level":2,"title":"显式加载","slug":"显式加载","link":"#显式加载","children":[]},{"level":2,"title":"延迟加载/懒惰加载","slug":"延迟加载-懒惰加载","link":"#延迟加载-懒惰加载","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1457},"filePathRelative":"orm/efcore/jichuzhishi/jiazaifangshi.md","localizedDate":"2022年11月20日","excerpt":"<h2>前言</h2>\\n<ul>\\n<li>延迟加载(懒加载)，默认不支持延迟加载</li>\\n<li>预先加载(贪婪加载、饥饿加载)</li>\\n</ul>\\n<h2>贪婪加载</h2>\\n<p>贪婪加载也叫预先加载。\\n所谓贪婪加载，就是在查询结果中包含导航关系，而这就需要明确的要求。\\n比如这个示例中，User拥有Group导航属性</p>\\n<blockquote>\\n<p>导航关系有一对一和一对多</p>\\n</blockquote>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">DataEntity</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    xxx\\n\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// 组</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">Group</span> Group <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
