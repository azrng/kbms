import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-vSdX8vi3.js";const t={},o=e(`<blockquote><p>本文为学习笔记</p></blockquote><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>通过命令行配置应用程序 格式</p><ul><li>无前缀的key=value模式</li><li>双横线模式：--key=value 或 --key vlaue</li><li>正斜线模式 /key=value 或 /key value</li></ul><blockquote><p>注意：等号分隔符和空格分隔符不能混用。</p></blockquote><p>命令替换</p><ul><li>必须以单划线(-)或者双划线(--)开头</li><li>映射的字典不能包含重复的key</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="简单读取" tabindex="-1"><a class="header-anchor" href="#简单读取"><span>简单读取</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Configuration&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Configuration.Abstractions&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Configuration.CommandLine&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单读取控制台launchSettings.json文件的请求配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;profiles&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;ConsoleApp3&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;commandName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Project&quot;</span><span class="token punctuation">,</span>
      <span class="token comment">//入参</span>
      <span class="token string">&quot;commandLineArgs&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;CommandLineKey1=value1 --CommandLineKey2=value2 /CommandLineKey3=value3&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置命令代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey1:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey1&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey2:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey2&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey3:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey3&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接启动程序或者使用命令行启用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet run <span class="token operator">--</span>CommandLineKey1<span class="token operator">=</span>value1 <span class="token operator">--</span>CommandLineKey2<span class="token operator">=</span>value2 <span class="token operator">--</span>CommandLineKey3<span class="token operator">=</span>value3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CommandLineKey1<span class="token punctuation">:</span><span class="token class-name">value1</span>
CommandLineKey2<span class="token punctuation">:</span><span class="token class-name">value2</span>
CommandLineKey3<span class="token punctuation">:</span>value3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令替换" tabindex="-1"><a class="header-anchor" href="#命令替换"><span>命令替换</span></a></h3><p>命令替换方式和上面的代码配置，区别在于AddCommandLine方法，一般使用短的命令去替换长命令</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//builder.AddCommandLine(args);</span>

<span class="token preprocessor property">#<span class="token directive keyword">region</span> 命令替换</span>
<span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;-k1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CommandLineKey1&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

<span class="token class-name"><span class="token keyword">var</span></span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey1:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey1&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey2:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey2&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;CommandLineKey3:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;CommandLineKey3&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里我们将第一次的AddCommandLine注释了，因为只能添加一次</p></blockquote><p>命令行启动</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet run <span class="token operator">-</span>k1<span class="token operator">=</span>value15555
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CommandLineKey1<span class="token punctuation">:</span><span class="token class-name">value15555</span>
CommandLineKey2<span class="token punctuation">:</span>
CommandLineKey3<span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>极客时间教程</p>`,29),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","minglinghangpeizhi.html.vue"]]),k=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/minglinghangpeizhi.html","title":"命令行配置","lang":"zh-CN","frontmatter":{"title":"命令行配置","lang":"zh-CN","date":"2022-01-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"minglinghangpeizhi","slug":"hua2a3","docsId":"49729969","description":"本文为学习笔记 介绍 通过命令行配置应用程序 格式 无前缀的key=value模式 双横线模式：--key=value 或 --key vlaue 正斜线模式 /key=value 或 /key value 注意：等号分隔符和空格分隔符不能混用。 命令替换 必须以单划线(-)或者双划线(--)开头 映射的字典不能包含重复的key 操作 简单读取 引用组...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/minglinghangpeizhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"命令行配置"}],["meta",{"property":"og:description","content":"本文为学习笔记 介绍 通过命令行配置应用程序 格式 无前缀的key=value模式 双横线模式：--key=value 或 --key vlaue 正斜线模式 /key=value 或 /key value 注意：等号分隔符和空格分隔符不能混用。 命令替换 必须以单划线(-)或者双划线(--)开头 映射的字典不能包含重复的key 操作 简单读取 引用组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"命令行配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"简单读取","slug":"简单读取","link":"#简单读取","children":[]},{"level":3,"title":"命令替换","slug":"命令替换","link":"#命令替换","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"dotnet/base/peizhikuangjia/minglinghangpeizhi.md","localizedDate":"2022年1月20日","excerpt":"<blockquote>\\n<p>本文为学习笔记</p>\\n</blockquote>\\n<h2>介绍</h2>\\n<p>通过命令行配置应用程序\\n格式</p>\\n<ul>\\n<li>无前缀的key=value模式</li>\\n<li>双横线模式：--key=value 或 --key vlaue</li>\\n<li>正斜线模式 /key=value  或  /key value</li>\\n</ul>\\n<blockquote>\\n<p>注意：等号分隔符和空格分隔符不能混用。</p>\\n</blockquote>\\n<p>命令替换</p>\\n<ul>\\n<li>必须以单划线(-)或者双划线(--)开头</li>\\n<li>映射的字典不能包含重复的key</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
