import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as t,c as l,b as n,e as s,f as c,d as r}from"./app-Bfb6-vFH.js";const o="/kbms/cloud/image-20231230214707056.png",p="/kbms/cloud/image-20231230214830875.png",d="/kbms/cloud/image-20231230220152384.png",u={},m=r(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Ubuntu服务器部署K3s，集群有问题，要搭建集群不适合看此文章</p></div><h2 id="k3s安装" tabindex="-1"><a class="header-anchor" href="#k3s安装"><span>K3S安装</span></a></h2><p>可以通过下面的命令进行安装k3s（执行官方的安装脚本）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 默认地址</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://get.k3s.io <span class="token operator">|</span> <span class="token function">sh</span> -

<span class="token comment"># 国内镜像加速地址，安装特定版本</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1  <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token function">sh</span> -

<span class="token comment"># 安装并设置默认镜像源地址，安装特定版本</span>
<span class="token function">curl</span> –sfL <span class="token punctuation">\\</span>
     https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token punctuation">\\</span>
     <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1 <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token function">sh</span> <span class="token parameter variable">-s</span> - <span class="token punctuation">\\</span>
     --system-default-registry <span class="token string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="image-20231230214707056" tabindex="0" loading="lazy"><figcaption>image-20231230214707056</figcaption></figure><p>验证是否安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> kubectl get nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20231230214830875" tabindex="0" loading="lazy"><figcaption>image-20231230214830875</figcaption></figure><p>可以看到控制平面和主节点一起运行，查看创建了那些容器(pods)</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> kubectl get pods --all-namespaces
NAMESPACE     NAME                                     READY   STATUS      RESTARTS      AGE
kube-system   helm-install-traefik-cm8dv               <span class="token number">0</span>/1     Completed   <span class="token number">1</span>             59d
kube-system   helm-install-traefik-crd-4zsbk           <span class="token number">0</span>/1     Completed   <span class="token number">0</span>             59d
kube-system   svclb-traefik-dda3bd79-lrdr9             <span class="token number">2</span>/2     Running     <span class="token number">6</span> <span class="token punctuation">(</span>9d ago<span class="token punctuation">)</span>    59d
kube-system   local-path-provisioner-6f65f9b6d-9c68k   <span class="token number">1</span>/1     Running     <span class="token number">5</span> <span class="token punctuation">(</span>10h ago<span class="token punctuation">)</span>   59d
kube-system   coredns-5cf45fb78d-drrdx                 <span class="token number">1</span>/1     Running     <span class="token number">3</span> <span class="token punctuation">(</span>9d ago<span class="token punctuation">)</span>    59d
kube-system   metrics-server-7dbd8c95c-gdn4l           <span class="token number">1</span>/1     Running     <span class="token number">5</span> <span class="token punctuation">(</span>10h ago<span class="token punctuation">)</span>   59d
kube-system   traefik-7f57b8d797-d4wls                 <span class="token number">1</span>/1     Running     <span class="token number">3</span> <span class="token punctuation">(</span>9d ago<span class="token punctuation">)</span>    59d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到可用 pod 的列表，一个基本的 K3s 设置，包括：</p><ul><li><strong>Traefik</strong> 作为 HTTP 反向代理和负载均衡的入口控制器</li><li><strong>CoreDns</strong>管理集群和节点内的 DNS 解析</li><li><strong>Local Path Provisioner</strong>提供了一种在每个节点中利用本地存储的方法</li><li><strong>Helm</strong>我们可以使用它来打包、部署</li></ul><h3 id="添加节点-可选" tabindex="-1"><a class="header-anchor" href="#添加节点-可选"><span>添加节点(可选)</span></a></h3><p>如果我们想将节点添加到集群中，需要执行指向节点主机的相同命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 首先在做Master的节点服务器获取token</span>
<span class="token function">sudo</span> <span class="token function">cat</span> /var/lib/rancher/k3s/server/node-token
K108ac35d092658e48af38b9bb83843db4e42641f8b6914b6ee93e36249447b21d5::server:c7c7acbe927b401103e8950d9ad04dd5


<span class="token comment">## 在agent节点服务器上执行</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1 <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token assign-left variable">K3S_URL</span><span class="token operator">=</span>http://<span class="token operator">&lt;</span>node-host<span class="token operator">&gt;</span>:6443 <span class="token assign-left variable">K3S_TOKEN</span><span class="token operator">=</span>K108ac35d092658e48af38b9bb83843db4e42641f8b6914b6ee93e36249447b21d5::server:c7c7acbe927b401103e8950d9ad04dd5  <span class="token function">sh</span> -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加私有镜像或镜像加速-可选" tabindex="-1"><a class="header-anchor" href="#添加私有镜像或镜像加速-可选"><span>添加私有镜像或镜像加速(可选)</span></a></h3><p>新增下面文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/rancher/k3s/registries.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将以下内容保存到文件中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mirrors:
  mirror.aliyuncs.com:
    endpoint:
      - <span class="token string">&quot;https://xxxxxx.mirror.aliyuncs.com&quot;</span> <span class="token comment"># 这里可选用自己的加速链接</span>

configs:
  <span class="token string">&quot;registry.cn-hangzhou.aliyuncs.com&quot;</span><span class="token builtin class-name">:</span> <span class="token comment"># 如果有私有镜像库填这里，没有删掉即可</span>
    auth:
      username: xxxxxx
      password: xxxxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我的配置如下</p><figure><img src="`+d+`" alt="image-20231230220152384" tabindex="0" loading="lazy"><figcaption>image-20231230220152384</figcaption></figure><p>保存后需要重启k3s才会生效</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo systemctl restart k3s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以再次查看状态</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> kubectl get <span class="token function">node</span>

NAME              STATUS   ROLES                  AGE   VERSION
desktop-bmeog9q   Ready    control-plane,master   59d   v1.27.6+k3s1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过查看pods节点信息去查看节点从哪里下载的</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> kubectl describe pods <span class="token operator">&lt;</span>podsName<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="k3s卸载" tabindex="-1"><a class="header-anchor" href="#k3s卸载"><span>K3s卸载</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在server节点执行如下：</span>
<span class="token punctuation">[</span>root@k3s-server ~<span class="token punctuation">]</span><span class="token comment"># /usr/local/bin/k3s-uninstall.sh</span>

<span class="token comment"># 在agent节点执行如下：</span>
<span class="token punctuation">[</span>root@k3s-agent ~<span class="token punctuation">]</span><span class="token comment"># /usr/local/bin/k3s-agent-uninstall.sh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他内容安装-可选" tabindex="-1"><a class="header-anchor" href="#其他内容安装-可选"><span>其他内容安装(可选)</span></a></h2><h3 id="ingress-nginx安装" tabindex="-1"><a class="header-anchor" href="#ingress-nginx安装"><span>Ingress-Nginx安装</span></a></h3><p>此章节建议全部看完，再安装</p><h4 id="基本安装" tabindex="-1"><a class="header-anchor" href="#基本安装"><span>基本安装</span></a></h4><ol><li>下载ingress-naginx yaml(裸机版)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/baremetal/deploy.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改deploy.yaml中的镜像后缀，(image地址中的&quot;@&quot;及后面的字符全部删掉)</li><li>因为网络问题，需要单独下载yaml中的两个镜像,最简单的方法是本地代理下载下来然后传到国内镜像仓库再拉下来打tag</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 下载</span>
<span class="token function">docker</span> pull registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343
<span class="token function">docker</span> pull registry.k8s.io/ingress-nginx/controller:v1.5.1
<span class="token comment">## 上传，可以通过docker命令上传，我是直接打成压缩包然后通过华为云的压缩包上传的</span>
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> D:/webhook.tar registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343
<span class="token function">docker</span> save <span class="token parameter variable">-o</span> D:/controller.tar registry.k8s.io/ingress-nginx/controller:v1.5.1
<span class="token comment">#然后在页面中处理上传</span>

<span class="token comment">#下载镜像到k3s服务器并打tag,这是我自己打包的镜像,可以直接用</span>
<span class="token function">docker</span> pull swr.cn-north-1.myhuaweicloud.com/rivenpub/kube-webhook-certgen:v20220916-gd32f8c343
<span class="token function">docker</span> pull swr.cn-north-1.myhuaweicloud.com/rivenpub/ingress-nginx-controller:v1.5.1
<span class="token function">docker</span> tag swr.cn-north-1.myhuaweicloud.com/rivenpub/kube-webhook-certgen:v20220916-gd32f8c343 registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343
<span class="token function">docker</span> tag swr.cn-north-1.myhuaweicloud.com/rivenpub/ingress-nginx-controller:v1.5.1 registry.k8s.io/ingress-nginx/controller:v1.5.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>安装<code>kubectl apply -f deploy.yaml</code></li></ol><h4 id="hostnetwork模式" tabindex="-1"><a class="header-anchor" href="#hostnetwork模式"><span>HostNetWork模式</span></a></h4><p><strong>特点：</strong></p><ul><li>该模式会占用主机的80和443端口。每个节点最多存在一个Pod。</li><li>该模式使用主机的DNS配置而非集群的kube-dns等。</li><li>好处是主机网络接口直接进入ingress而无需经过NodePort的网络转换。</li></ul><p><strong>K3S 安装注意事项</strong> 需要禁用k3s自带的负载均衡器，否则端口冲突，k3s安装命令后面加 <code>sh -s - --disable servicelb </code> K3s的完整安装命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1 <span class="token assign-left variable">INSTALL_K3S_EXEC</span><span class="token operator">=</span><span class="token string">&quot;server --docker&quot;</span> <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn  <span class="token function">sh</span> <span class="token parameter variable">-s</span> - <span class="token parameter variable">--disable</span> servicelb  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Yaml修改</strong> 修改 deploy.yaml 文件中 Deployment 部分，改完后大概如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>apiVersion: apps/v1
kind: DaemonSet <span class="token comment">#修改Deployment</span>
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: <span class="token number">1.5</span>.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  minReadySeconds: <span class="token number">0</span>
  revisionHistoryLimit: <span class="token number">10</span>
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    spec:
      hostNetwork: <span class="token boolean">true</span> <span class="token comment">#新增的</span>
      containers:
      - args:
        - /nginx-ingress-controller
        - --election-id<span class="token operator">=</span>ingress-nginx-leader
        - --controller-class<span class="token operator">=</span>k8s.io/ingress-nginx
        - --ingress-class<span class="token operator">=</span>nginx
        - <span class="token parameter variable">--configmap</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>POD_NAMESPACE<span class="token variable">)</span></span>/ingress-nginx-controller
        - --validating-webhook<span class="token operator">=</span>:8443
        - --validating-webhook-certificate<span class="token operator">=</span>/usr/local/certificates/cert
        - --validating-webhook-key<span class="token operator">=</span>/usr/local/certificates/key
        - --report-node-internal-ip-address <span class="token comment">#新增的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="metallb" tabindex="-1"><a class="header-anchor" href="#metallb"><span>MetalLB</span></a></h4><p><strong>特点</strong> 这是个负载均衡器，可以在任何裸机集群中使用负载均衡的功能。但是云服务器基本都不支持(因为虚拟IP的缘故) 这种方式安装同样要禁用k3s的负载均衡器，所以k3s安装命令同HostNetWork模式</p><p><strong>ingress-nginx</strong> ingress-nginx 不使用裸机版的配置，改用负载均衡版：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/cloud/deploy.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样修改里面的镜像后缀</p><p><strong>MetalLB安装：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建config文件 metallb-config.yaml: <code>kubectl apply -f metallb-config.yaml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> metallb.io/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> IPAddressPool
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> default
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> metallb<span class="token punctuation">-</span>system
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">addresses</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 192.168.0.100<span class="token punctuation">-</span>192.168.0.103  <span class="token comment">#此处的ip地址段为虚拟ip段，不与dhcp分发的ip和节点ip等重复</span>
  <span class="token key atrule">autoAssign</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> metallb.io/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> L2Advertisement
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> default
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> metallb<span class="token punctuation">-</span>system
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">ipAddressPools</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@ecs-153442 k3s<span class="token punctuation">]</span><span class="token comment">## kubectl get ingress</span>
NAME            CLASS   HOSTS           ADDRESS         PORTS   AGE
netcoretest     nginx   test.com        <span class="token number">192.168</span>.0.101   <span class="token number">80</span>      38s
<span class="token punctuation">[</span>root@ecs-153442 k3s<span class="token punctuation">]</span>vim /etc/hosts
<span class="token comment">#添加几行：</span>
<span class="token number">192.168</span>.0.100 test.com
<span class="token number">192.168</span>.0.101 test.com
<span class="token number">192.168</span>.0.102 test.com
<span class="token number">192.168</span>.0.103 test.com
<span class="token punctuation">[</span>root@ecs-153442 k3s<span class="token punctuation">]</span>curl test.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ingress-nginx使用" tabindex="-1"><a class="header-anchor" href="#ingress-nginx使用"><span>Ingress-Nginx使用</span></a></h4><p>直接替换调ingress yaml文件中的<strong>ingressClassName</strong>为<strong>nginx</strong>即可，类似于下面</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: netcoretest
spec:
  ingressClassName: nginx  <span class="token comment">#这里写成nginx</span>
  rules:
  - host: netcoretest.com
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: netcoretest
            port:
              number: <span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是HostNetWork模式 可以把ingress的nodeport端口固定，我固定成了30000和30001，主要是因为80端口有时候不可用 现在可以通过 http://netcoretest.com 和 http://netcoretest.com:30000 访问具体的服务了</p><p><strong>ingress-nginx 固定端口配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kubectl edit <span class="token parameter variable">-n</span> ingress-nginx svc/ingress-nginx-controller
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把ports配置改成下面这样就可以了. 也可以在最开始的ingress-nginx的deploy.yaml中直接改</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code> <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">appProtocol</span><span class="token punctuation">:</span> http
    <span class="token key atrule">name</span><span class="token punctuation">:</span> http
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30000</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http
  <span class="token punctuation">-</span> <span class="token key atrule">appProtocol</span><span class="token punctuation">:</span> https
    <span class="token key atrule">name</span><span class="token punctuation">:</span> https
    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30001</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> https
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="k3s使用主机docker" tabindex="-1"><a class="header-anchor" href="#k3s使用主机docker"><span>K3S使用主机Docker</span></a></h3><h4 id="方法一-安装时指定参数" tabindex="-1"><a class="header-anchor" href="#方法一-安装时指定参数"><span>方法一：安装时指定参数</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#1.在安装时通过环境变量INSTALL_K3S_EXEC</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1 <span class="token assign-left variable">INSTALL_K3S_EXEC</span><span class="token operator">=</span><span class="token string">&quot;server --docker&quot;</span> <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token function">sh</span> -
<span class="token comment">#2.或者直接传参</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> - server <span class="token parameter variable">--docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法二-安装后修改配置文件" tabindex="-1"><a class="header-anchor" href="#方法二-安装后修改配置文件"><span>方法二：安装后修改配置文件</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#1.打开文件</span>
<span class="token function">vim</span> /etc/systemd/system/multi-user.target.wants/k3s.service

<span class="token comment">#2.修改ExecStart那几行的值为：</span>
/usr/local/bin/k3s server <span class="token parameter variable">--docker</span> --no-deploy traefik

<span class="token comment">#3.重启服务</span>
systemctl daemon-reload
<span class="token function">service</span> k3s restart

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kubectl-客户端连接k3s" tabindex="-1"><a class="header-anchor" href="#kubectl-客户端连接k3s"><span>kubectl 客户端连接K3S</span></a></h3><p>将k3s主机点上的 /etc/rancher/k3s/k3s.yaml 文件拷贝到 kubectl所在机器的 ~/.kube/config 需要注意修改 yaml文件中的ip地址为 kubectl客户端可以访问到的地址</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,73),v={href:"https://mp.weixin.qq.com/s/opW6n5vpPNZarcnAfMGPHw",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"https://mp.weixin.qq.com/s/4Y3DJs6FqEQZ2WZt0udMvQ | 使用 k3sup 一分钟快速搭建 K3s 集群",-1),b=n("p",null,"https://www.cnblogs.com/hujinzhong/p/15014487.html k3s安装与部署",-1);function g(h,f){const a=i("ExternalLinkIcon");return t(),l("div",null,[m,n("p",null,[n("a",v,[s("https://mp.weixin.qq.com/s/opW6n5vpPNZarcnAfMGPHw"),c(a)]),s(" | 使用autok3s 安装k3s 集群 和 kuboard 管理集群")]),k,b])}const S=e(u,[["render",g],["__file","install.html.vue"]]),_=JSON.parse('{"path":"/cloud/k3s/install.html","title":"安装以及配置","lang":"zh-CN","frontmatter":{"title":"安装以及配置","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"anzhuangyijipeizhi","slug":"vtb64ufleemxdcw6","docsId":"110427807","description":"提示 在Ubuntu服务器部署K3s，集群有问题，要搭建集群不适合看此文章 K3S安装 可以通过下面的命令进行安装k3s（执行官方的安装脚本） image-20231230214707056image-20231230214707056 验证是否安装成功 image-20231230214830875image-20231230214830875 可以...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/k3s/install.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"安装以及配置"}],["meta",{"property":"og:description","content":"提示 在Ubuntu服务器部署K3s，集群有问题，要搭建集群不适合看此文章 K3S安装 可以通过下面的命令进行安装k3s（执行官方的安装脚本） image-20231230214707056image-20231230214707056 验证是否安装成功 image-20231230214830875image-20231230214830875 可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/cloud/image-20231230214707056.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-30T14:42:57.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-30T14:42:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安装以及配置\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20231230214707056.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20231230214830875.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20231230220152384.png\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-30T14:42:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"K3S安装","slug":"k3s安装","link":"#k3s安装","children":[{"level":3,"title":"添加节点(可选)","slug":"添加节点-可选","link":"#添加节点-可选","children":[]},{"level":3,"title":"添加私有镜像或镜像加速(可选)","slug":"添加私有镜像或镜像加速-可选","link":"#添加私有镜像或镜像加速-可选","children":[]}]},{"level":2,"title":"K3s卸载","slug":"k3s卸载","link":"#k3s卸载","children":[]},{"level":2,"title":"其他内容安装(可选)","slug":"其他内容安装-可选","link":"#其他内容安装-可选","children":[{"level":3,"title":"Ingress-Nginx安装","slug":"ingress-nginx安装","link":"#ingress-nginx安装","children":[{"level":4,"title":"基本安装","slug":"基本安装","link":"#基本安装","children":[]},{"level":4,"title":"HostNetWork模式","slug":"hostnetwork模式","link":"#hostnetwork模式","children":[]},{"level":4,"title":"MetalLB","slug":"metallb","link":"#metallb","children":[]},{"level":4,"title":"Ingress-Nginx使用","slug":"ingress-nginx使用","link":"#ingress-nginx使用","children":[]}]},{"level":3,"title":"K3S使用主机Docker","slug":"k3s使用主机docker","link":"#k3s使用主机docker","children":[{"level":4,"title":"方法一：安装时指定参数","slug":"方法一-安装时指定参数","link":"#方法一-安装时指定参数","children":[]},{"level":4,"title":"方法二：安装后修改配置文件","slug":"方法二-安装后修改配置文件","link":"#方法二-安装后修改配置文件","children":[]}]},{"level":3,"title":"kubectl 客户端连接K3S","slug":"kubectl-客户端连接k3s","link":"#kubectl-客户端连接k3s","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1703947377000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.15,"words":1846},"filePathRelative":"cloud/k3s/install.md","localizedDate":"2023年9月24日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>在Ubuntu服务器部署K3s，集群有问题，要搭建集群不适合看此文章</p>\\n</div>\\n<h2>K3S安装</h2>\\n<p>可以通过下面的命令进行安装k3s（执行官方的安装脚本）</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 默认地址</span>\\n<span class=\\"token function\\">curl</span> <span class=\\"token parameter variable\\">-sfL</span> https://get.k3s.io <span class=\\"token operator\\">|</span> <span class=\\"token function\\">sh</span> -\\n\\n<span class=\\"token comment\\"># 国内镜像加速地址，安装特定版本</span>\\n<span class=\\"token function\\">curl</span> <span class=\\"token parameter variable\\">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class=\\"token operator\\">|</span> <span class=\\"token assign-left variable\\">INSTALL_K3S_VERSION</span><span class=\\"token operator\\">=</span>v1.25.3+k3s1  <span class=\\"token assign-left variable\\">INSTALL_K3S_MIRROR</span><span class=\\"token operator\\">=</span>cn <span class=\\"token function\\">sh</span> -\\n\\n<span class=\\"token comment\\"># 安装并设置默认镜像源地址，安装特定版本</span>\\n<span class=\\"token function\\">curl</span> –sfL <span class=\\"token punctuation\\">\\\\</span>\\n     https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class=\\"token operator\\">|</span> <span class=\\"token punctuation\\">\\\\</span>\\n     <span class=\\"token assign-left variable\\">INSTALL_K3S_VERSION</span><span class=\\"token operator\\">=</span>v1.25.3+k3s1 <span class=\\"token assign-left variable\\">INSTALL_K3S_MIRROR</span><span class=\\"token operator\\">=</span>cn <span class=\\"token function\\">sh</span> <span class=\\"token parameter variable\\">-s</span> - <span class=\\"token punctuation\\">\\\\</span>\\n     --system-default-registry <span class=\\"token string\\">\\"registry.cn-hangzhou.aliyuncs.com\\"</span>\\n</code></pre></div>","autoDesc":true}');export{S as comp,_ as data};
