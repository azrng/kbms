import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,d as s,e,b as p}from"./app-Bw62I61B.js";const i={},u=p(`<h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>本文是读书笔记</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>类是最常见的一种引用类型，最简单的声明如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以包含方法、属性、索引器、事件、构造函数、方法实现、可以定义partial</p><h2 id="类中常用的概念" tabindex="-1"><a class="header-anchor" href="#类中常用的概念"><span>类中常用的概念</span></a></h2><p>通过下面该代码来讲解类中常用的概念</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 账号</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 密码</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex<span class="token punctuation">;</span>
         
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><p>常用的类修饰符有public、protected、internal、private、abstract、sealed、static、partial。</p><h3 id="类成员" tabindex="-1"><a class="header-anchor" href="#类成员"><span>类成员</span></a></h3><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><p>方法是一组实现某个行为的语句，通过调用者的参数获取输入的数据，并通过指定的输出类型将输出数据返回给调用者。可以返回void类型，表名没有返回值，也可以通过ref/out参数返回输出数据。 方法可以用以下修饰符修饰：</p><ul><li>静态修饰符：static</li><li>访问修饰符：public internal private protected</li><li>继承修饰符：new virtual abstract override</li><li>部分方法修饰符：partial</li><li>异步方法修饰符：async</li></ul><h4 id="虚方法" tabindex="-1"><a class="header-anchor" href="#虚方法"><span>虚方法</span></a></h4><p>父类定义虚方法，子类重写父类的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBase</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserBase</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表达式体方法" tabindex="-1"><a class="header-anchor" href="#表达式体方法"><span>表达式体方法</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="重载方法" tabindex="-1"><a class="header-anchor" href="#重载方法"><span>重载方法</span></a></h4><p>方法名字相同，参数类型不同或者参数个数不同。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方法的返回值类型和params修饰符不属于判断是否重载的条件</p></blockquote><h4 id="按值传递和按引用传递" tabindex="-1"><a class="header-anchor" href="#按值传递和按引用传递"><span>按值传递和按引用传递</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
		<span class="token comment">// 或</span>
        <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述的ref和out代码不能同时出现一个类中</p></blockquote><h3 id="字段" tabindex="-1"><a class="header-anchor" href="#字段"><span>字段</span></a></h3><p>字段属于类的成员，在该示例类中Sex叫做字段。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 性别</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段可用以下修饰符进行修饰：</p><ul><li>静态修饰符：static</li><li>访问修饰符：public internal private protected</li><li>继承修饰符：new</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBase</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 性别/级别</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserBase</span></span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 性别</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    

     <span class="token class-name"><span class="token keyword">var</span></span> us <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name"><span class="token keyword">var</span></span> sex <span class="token operator">=</span> us<span class="token punctuation">.</span>Sex<span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只读修饰符：readonly</li></ul><p>可以设置只读(只能在声明时候或者在类的构造函数中赋值)。</p><ul><li>线程访问修饰符：volatile</li></ul><h4 id="字段初始化" tabindex="-1"><a class="header-anchor" href="#字段初始化"><span>字段初始化</span></a></h4><p>字段不一定要初始化，没有初始化的字段会设置默认值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 性别</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> us <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sex <span class="token operator">=</span> us<span class="token punctuation">.</span>Sex<span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),r={href:"https://mp.weixin.qq.com/s/lVRuhJgA_2zV2hmDqchebA",target:"_blank",rel:"noopener noreferrer"},k=p(`<h4 id="声明多个字段" tabindex="-1"><a class="header-anchor" href="#声明多个字段"><span>声明多个字段</span></a></h4><p>可以同时声明多个字段,但是这些字段类型必须一致</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 性别/级别</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> level <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><p>一眼看过去，属性和字段很相似，但是属性内部可以像方法一样包含逻辑，在下面示例中Account和PassWord就是属性，比字段(sex)多了get/set访问器，属性get出来的值不一定是set进去的值，因为可能在set时候被修改。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PassWord <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get和Set是属性的访问器，可以用来控制属性的访问级别。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>尽管访问属性和字段的方式是相同的，但不同之处在于，属性在获取和设置值的时候给实现者提供了完全的控制能力。</p></blockquote><p>属性支持以下的修饰符：</p><ul><li>静态修饰符：static</li><li>访问权限修饰符：public internal privateprotected</li><li>继承修饰符：new virtual abstract overridesealed</li></ul><h4 id="只读属性" tabindex="-1"><a class="header-anchor" href="#只读属性"><span>只读属性</span></a></h4><p>如果只定义了get访问器，属性就是只读的。如果只定义了set访问器，那么就是只写的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表达式属性" tabindex="-1"><a class="header-anchor" href="#表达式属性"><span>表达式属性</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">decimal</span></span> _price<span class="token punctuation">,</span> _num<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> TotalPrice <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _price <span class="token operator">*</span> _num<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> TotalPrice2 <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _price <span class="token operator">*</span> _num<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> TotalPrice3 <span class="token operator">=&gt;</span> _price <span class="token operator">*</span> _num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动属性" tabindex="-1"><a class="header-anchor" href="#自动属性"><span>自动属性</span></a></h4><p>属性最常见的实现方式是使用get和set访问器读写私有字段(字段和属性类型相同)。因此编译器会将自动属性声明自动转换为在这种实现方式。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会自动生成一个后台私有字段，该字段的名称由编译器生成且无法引用。</p><h4 id="属性初始化器" tabindex="-1"><a class="header-anchor" href="#属性初始化器"><span>属性初始化器</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">;</span>
        
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性自定义值" tabindex="-1"><a class="header-anchor" href="#属性自定义值"><span>属性自定义值</span></a></h4><p>获取指定类型的属性值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetPropertyName</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> property<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> displayName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisplayNameAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>displayName<span class="token punctuation">?.</span>DisplayName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> displayName<span class="token punctuation">.</span>DisplayName<span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> display <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DisplayAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>display<span class="token punctuation">?.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">?</span> display<span class="token punctuation">.</span>Name <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var bb = GetPropertyName(typeof(Userinfo), &quot;Name&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h4><p>volatile关键字用于确保多个线程对该字段的访问是可见和有序的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name"><span class="token keyword">int</span></span> _next <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="索引器" tabindex="-1"><a class="header-anchor" href="#索引器"><span>索引器</span></a></h3><p>索引器为要访问的类或者结构体中封住的列表或者字典类型的数据提供访问接口。索引器通过索引值访问数据。例如string类具有索引器，可以通过int索引访问每一个char值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="索引器的实现" tabindex="-1"><a class="header-anchor" href="#索引器的实现"><span>索引器的实现</span></a></h4><p>编写索引器需要定义一个名为this的属性，并将参数定义放在一对方括号中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> words <span class="token operator">=</span> <span class="token string">&quot;the quick brown fox&quot;</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> wordNum<span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> words<span class="token punctuation">[</span>wordNum<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span> <span class="token punctuation">{</span> words<span class="token punctuation">[</span>wordNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token class-name"><span class="token keyword">var</span></span> us <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>us<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fox</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个类可以定义多个参数类型不同的索引器，一个索引器也可以包含多个参数。</p><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h3><p>是一种永远不会改变的静态字段。常量会在编译时候静态赋值，编译器会在常量使用的地方上直接替换值。常量用关键字const生命，并且必须用值初始化。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未来可能发生变化的任何值都不应当表示为常量。</p><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h3><p>事件(event)基于委托，是类或者对象向其他类或对象通知发生的事情的一种委托，是一种特殊的受限制的委托(只能施加+=，-=操作符)。 事件的定义</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">event</span> 委托类型 事件名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//声明委托</span>
        <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//声明事件，作为类的成员</span>
        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">MyDelegate</span> mydelgate<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span>mydelgate <span class="token operator">=</span> Test<span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">mydelgate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),d={href:"https://www.cnblogs.com/ezhar/p/12864342.html",target:"_blank",rel:"noopener noreferrer"},m=p(`<h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器"><span>构造器</span></a></h3><p>构造器执行类或者结构体的初始化代码，构造器的定义和方法很相似，不过构造器的名字和返回值只能和封装它的类型相同</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBase</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">UserBase</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例构造器支持以下修饰符：</p><ul><li>静态修饰符：static</li><li>访问修饰符：public internal private protected</li></ul><h4 id="构造器重载" tabindex="-1"><a class="header-anchor" href="#构造器重载"><span>构造器重载</span></a></h4><p>为了避免重复代码，构造器可以使用this来调用另一个构造器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBase</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">UserBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token function">UserBase</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="隐式无参数构造器" tabindex="-1"><a class="header-anchor" href="#隐式无参数构造器"><span>隐式无参数构造器</span></a></h4><p>默认编译器会为我们的类生成一个无参数公有的构造器，不过如果你显式定义了构造器，编译器就不再自动生成无参数构造器</p><h4 id="对象初始化器" tabindex="-1"><a class="header-anchor" href="#对象初始化器"><span>对象初始化器</span></a></h4><p>为了简化对象的初始化，可以在调用构造器后直接通过对象初始化器设置对象的可访问字段或属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Sex<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Address <span class="token operator">=</span> <span class="token string">&quot;中国台湾省&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Address <span class="token operator">=</span> <span class="token string">&quot;中国台湾省&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>类可以通过继承一个类来对自身进行扩展或者定制，继承了一个了类，那么就拥有父类所有的功能而无需重新构建。类只支持单继承，但是可以被多个类继承。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string"> 在叫&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>    <span class="token punctuation">}</span>
    

<span class="token comment">// dog继承了Animal，那么就拥有animal里面的属性和方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;二哈&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">Cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二哈 在叫</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="空引用问题" tabindex="-1"><a class="header-anchor" href="#空引用问题"><span>空引用问题</span></a></h2><p>通过编辑器的null检查来处理空引用问题，或者通过Optional模式来处理空引用问题。</p>`,18),v={href:"https://cat.aiursoft.cn/post/2023/7/22/solving-null-reference-problem-with-optional-pattern-in-csharp",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="对象比较" tabindex="-1"><a class="header-anchor" href="#对象比较"><span>对象比较</span></a></h2><h3 id="重写equals" tabindex="-1"><a class="header-anchor" href="#重写equals"><span>重写Equals</span></a></h3><p>默认情况下如果两个对象引用了同一个对象才说这两个对象相等，那么如果想比较两个对象的值是否相等，就需要重写比较的方法了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> target <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token class-name">userinfo</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> target<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objectscomparer" tabindex="-1"><a class="header-anchor" href="#objectscomparer"><span>ObjectsComparer</span></a></h3>`,5),h={href:"https://github.com/ValeraT1982/ObjectsComparer",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">userinfo</span><span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">userinfo</span><span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> comparer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectsComparer<span class="token punctuation">.</span>Comparer<span class="token punctuation">&lt;</span>userinfo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 比较对象</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Difference<span class="token punctuation">&gt;</span></span> differences<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> isEquals <span class="token operator">=</span> comparer<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> <span class="token keyword">out</span> differences<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出结果</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>isEquals <span class="token punctuation">?</span> <span class="token string">&quot;对象相等&quot;</span> <span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span> differences<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去重" tabindex="-1"><a class="header-anchor" href="#去重"><span>去重</span></a></h3><p>当使用结构体的话直接可以使用Distinct进行去重，但是在类中需要使用DistinctBy或者使用Distinct+重写GetHashCode+重写Equals来实现去重。</p><p>新建一个Person类，并重写GetHashCode和重写Equals方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Name <span class="token operator">+</span> Age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token class-name">Person</span> other <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> other<span class="token punctuation">.</span>Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Age <span class="token operator">==</span> other<span class="token punctuation">.</span>Age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token string">&quot;22&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persons<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token string">&quot;22&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 最后的结果只有两条数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> person2 <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="树形结构" tabindex="-1"><a class="header-anchor" href="#树形结构"><span>树形结构</span></a></h2>`,8),g={href:"https://mp.weixin.qq.com/s/tDl3oYLRg56SvaDxKvmwjA",target:"_blank",rel:"noopener noreferrer"},w=p(`<h2 id="对象的释放" tabindex="-1"><a class="header-anchor" href="#对象的释放"><span>对象的释放</span></a></h2><p>当将一个对象设置为null的时候，这可以帮助让对象变为不可达的状态，最终会被垃圾回收，但是并不会自动调用其Dispose方法，Dispose() 方法一般是用来释放非托管资源的，比如文件、网络连接、数据库连接等。由于垃圾回收器只负责释放托管资源（即由 .NET 框架管理的内存），可以不会自动调用Dispose方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 该写法在调用GC.Collect();的时候会很快输出被释放了</span>
<span class="token comment">//using (UserInfo userInfo = new UserInfo())</span>
<span class="token comment">//{</span>
<span class="token comment">//    Console.WriteLine(&quot;Hello World&quot;);</span>
<span class="token comment">//}</span>

<span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

GC<span class="token punctuation">.</span><span class="token function">Collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认的GC垃圾回收器</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;被释放了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖关系图" tabindex="-1"><a class="header-anchor" href="#依赖关系图"><span>依赖关系图</span></a></h2>`,4),f={href:"https://mp.weixin.qq.com/s/ig0BIzX0ZH09zc9PmLKx8g",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/pierre3/PlantUmlClassDiagramGenerator",target:"_blank",rel:"noopener noreferrer"};function q(_,N){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/lVRuhJgA_2zV2hmDqchebA"),e(a)]),s(" | 为什么应该尽可能避免在静态构造函数中初始化静态字段？")]),k,n("blockquote",null,[n("p",null,[s("参考资料："),n("a",d,[s("https://www.cnblogs.com/ezhar/p/12864342.html"),e(a)])])]),m,n("p",null,[n("a",v,[s("https://cat.aiursoft.cn/post/2023/7/22/solving-null-reference-problem-with-optional-pattern-in-csharp"),e(a)]),s(" | 如何使用 Optional 模式解决 C## 中的烦人的空引用问题 - kitlau's blog")]),b,n("p",null,[s("借助nuget包来实现对象的比较。 仓库地址："),n("a",h,[s("https://github.com/ValeraT1982/ObjectsComparer"),e(a)]),s(" 简单示例")]),y,n("p",null,[n("a",g,[s("https://mp.weixin.qq.com/s/tDl3oYLRg56SvaDxKvmwjA"),e(a)]),s(" | C#性能优化-树形结构递归优化")]),w,n("p",null,[s("通过工具来制作类关系图："),n("a",f,[s("https://mp.weixin.qq.com/s/ig0BIzX0ZH09zc9PmLKx8g"),e(a)])]),n("p",null,[s("仓库地址："),n("a",x,[s("https://github.com/pierre3/PlantUmlClassDiagramGenerator"),e(a)])])])}const A=t(i,[["render",q],["__file","lei.html.vue"]]),S=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/lei.html","title":"类","lang":"zh-CN","frontmatter":{"title":"类","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"lei","slug":"lu5xyr","docsId":"47109127","description":"开篇语 本文是读书笔记 概述 类是最常见的一种引用类型，最简单的声明如下 可以包含方法、属性、索引器、事件、构造函数、方法实现、可以定义partial 类中常用的概念 通过下面该代码来讲解类中常用的概念 访问修饰符 常用的类修饰符有public、protected、internal、private、abstract、sealed、static、part...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/lei.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"类"}],["meta",{"property":"og:description","content":"开篇语 本文是读书笔记 概述 类是最常见的一种引用类型，最简单的声明如下 可以包含方法、属性、索引器、事件、构造函数、方法实现、可以定义partial 类中常用的概念 通过下面该代码来讲解类中常用的概念 访问修饰符 常用的类修饰符有public、protected、internal、private、abstract、sealed、static、part..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"类中常用的概念","slug":"类中常用的概念","link":"#类中常用的概念","children":[{"level":3,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[]},{"level":3,"title":"类成员","slug":"类成员","link":"#类成员","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[{"level":4,"title":"虚方法","slug":"虚方法","link":"#虚方法","children":[]},{"level":4,"title":"表达式体方法","slug":"表达式体方法","link":"#表达式体方法","children":[]},{"level":4,"title":"重载方法","slug":"重载方法","link":"#重载方法","children":[]},{"level":4,"title":"按值传递和按引用传递","slug":"按值传递和按引用传递","link":"#按值传递和按引用传递","children":[]}]},{"level":3,"title":"字段","slug":"字段","link":"#字段","children":[{"level":4,"title":"字段初始化","slug":"字段初始化","link":"#字段初始化","children":[]},{"level":4,"title":"声明多个字段","slug":"声明多个字段","link":"#声明多个字段","children":[]}]},{"level":3,"title":"属性","slug":"属性","link":"#属性","children":[{"level":4,"title":"只读属性","slug":"只读属性","link":"#只读属性","children":[]},{"level":4,"title":"表达式属性","slug":"表达式属性","link":"#表达式属性","children":[]},{"level":4,"title":"自动属性","slug":"自动属性","link":"#自动属性","children":[]},{"level":4,"title":"属性初始化器","slug":"属性初始化器","link":"#属性初始化器","children":[]},{"level":4,"title":"属性自定义值","slug":"属性自定义值","link":"#属性自定义值","children":[]},{"level":4,"title":"volatile","slug":"volatile","link":"#volatile","children":[]}]},{"level":3,"title":"索引器","slug":"索引器","link":"#索引器","children":[{"level":4,"title":"索引器的实现","slug":"索引器的实现","link":"#索引器的实现","children":[]}]},{"level":3,"title":"常量","slug":"常量","link":"#常量","children":[]},{"level":3,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":3,"title":"构造器","slug":"构造器","link":"#构造器","children":[{"level":4,"title":"构造器重载","slug":"构造器重载","link":"#构造器重载","children":[]},{"level":4,"title":"隐式无参数构造器","slug":"隐式无参数构造器","link":"#隐式无参数构造器","children":[]},{"level":4,"title":"对象初始化器","slug":"对象初始化器","link":"#对象初始化器","children":[]}]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]}]},{"level":2,"title":"空引用问题","slug":"空引用问题","link":"#空引用问题","children":[]},{"level":2,"title":"对象比较","slug":"对象比较","link":"#对象比较","children":[{"level":3,"title":"重写Equals","slug":"重写equals","link":"#重写equals","children":[]},{"level":3,"title":"ObjectsComparer","slug":"objectscomparer","link":"#objectscomparer","children":[]},{"level":3,"title":"去重","slug":"去重","link":"#去重","children":[]}]},{"level":2,"title":"树形结构","slug":"树形结构","link":"#树形结构","children":[]},{"level":2,"title":"对象的释放","slug":"对象的释放","link":"#对象的释放","children":[]},{"level":2,"title":"依赖关系图","slug":"依赖关系图","link":"#依赖关系图","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":9.18,"words":2755},"filePathRelative":"dotnet/csharp/duixiangheleixing/lei.md","localizedDate":"2023年10月22日","excerpt":"<h2>开篇语</h2>\\n<p>本文是读书笔记</p>\\n<h2>概述</h2>\\n<p>类是最常见的一种引用类型，最简单的声明如下</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">}</span>       \\n</code></pre></div>","autoDesc":true}');export{A as comp,S as data};
