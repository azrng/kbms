import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-BIR_P--4.js";const n={};function l(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>NBomber是一个开源的 .NET 框架，开源协议是Apache 2.0， NBomber 用于对多种服务进行负载测试，包括 Web、消息队列、数据库等。 今年5月份发布了 NBomber 2.0版本。NBomber 类似于JMeter，但是和JMeter 不一样的地方是， NBomber 是通过F#/C#/JSON 代码来表达测试场景。</p><ol><li>NBomber 背后的主要原因是为编写负载测试提供了一个<strong>轻量级</strong>框架，您可以使用它来测试<strong>任何</strong>系统并模拟<strong>任何</strong>生产工作负载。我们只想提供一些抽象，以便我们可以描述任何类型的负载，并且仍然有一个简单、直观的 API。</li><li>另一个目标是提供构建块，通过应用任何复杂的负载分布来验证您的 POC（概念验证）项目。</li><li>使用 NBomber，您可以测试任何 PULL 或 PUSH 系统（HTTP、WebSockets、GraphQl、gRPC、SQL Databse、MongoDb、Redis 等）。</li><li>使用 NBomber，<strong>您可以轻松地将一些集成测试转换为负载测试</strong>。</li></ol><p>仓库地址：<a href="https://github.com/PragmaticFlow/NBomber" target="_blank" rel="noopener noreferrer">https://github.com/PragmaticFlow/NBomber</a></p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>NBomber 作为一个现代框架提供：</p><ul><li>零依赖协议（HTTP/WebSockets/AMQP/SQL）</li><li>对语义模型的零依赖（Pull/Push）</li><li>非常灵活的配置和非常简单的 API (F#/C#/JSON)</li><li>集群支持</li><li>实时报告</li><li>CI/CD 集成</li><li>数据馈送支持</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><p>创建一个控制台，引用组件包</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PackageReference</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Include</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NBomber&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.1.5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> step</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;step&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // you can define and execute any logic here,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // for example: send http request, SQL query etc</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // NBomber will measure how much time it takes to execute your logic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">TimeSpan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FromSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Ok</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// second, we add our step to the scenario</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scenario</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ScenarioBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateScenario</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello_world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">NBomberRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterScenarios</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scenario</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>行测试后，您将获得一份报告，文件夹下有有4种格式（txt、csv、html、md）的报告，其中Html 页面的报告比较直观.</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/n3uWijjb7KwVHcxFIW1ZTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/n3uWijjb7KwVHcxFIW1ZTw</a> | 开源的负载测试/压力测试工具 NBomber</p>`,16)]))}const k=i(n,[["render",l]]),o=JSON.parse('{"path":"/middleware/testMange/pressureTest/nbomberyace.html","title":"NBomber压测","lang":"zh-CN","frontmatter":{"title":"NBomber压测","lang":"zh-CN","date":"2023-03-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"nbomberyace","slug":"yrxlhn","docsId":"70054450","description":"概述 NBomber是一个开源的 .NET 框架，开源协议是Apache 2.0， NBomber 用于对多种服务进行负载测试，包括 Web、消息队列、数据库等。 今年5月份发布了 NBomber 2.0版本。NBomber 类似于JMeter，但是和JMeter 不一样的地方是， NBomber 是通过F#/C#/JSON 代码来表达测试场景。 NB...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NBomber压测\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T02:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/pressureTest/nbomberyace.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"NBomber压测"}],["meta",{"property":"og:description","content":"概述 NBomber是一个开源的 .NET 框架，开源协议是Apache 2.0， NBomber 用于对多种服务进行负载测试，包括 Web、消息队列、数据库等。 今年5月份发布了 NBomber 2.0版本。NBomber 类似于JMeter，但是和JMeter 不一样的地方是， NBomber 是通过F#/C#/JSON 代码来表达测试场景。 NB..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T02:43:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T02:43:38.000Z"}]]},"git":{"createdTime":1697724028000,"updatedTime":1700361818000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"middleware/testMange/pressureTest/nbomberyace.md","excerpt":"<h2>概述</h2>\\n<p>NBomber是一个开源的 .NET 框架，开源协议是Apache 2.0， NBomber 用于对多种服务进行负载测试，包括 Web、消息队列、数据库等。  今年5月份发布了 NBomber 2.0版本。NBomber 类似于JMeter，但是和JMeter 不一样的地方是， NBomber 是通过F#/C#/JSON 代码来表达测试场景。</p>\\n<ol>\\n<li>NBomber 背后的主要原因是为编写负载测试提供了一个<strong>轻量级</strong>框架，您可以使用它来测试<strong>任何</strong>系统并模拟<strong>任何</strong>生产工作负载。我们只想提供一些抽象，以便我们可以描述任何类型的负载，并且仍然有一个简单、直观的 API。</li>\\n<li>另一个目标是提供构建块，通过应用任何复杂的负载分布来验证您的 POC（概念验证）项目。</li>\\n<li>使用 NBomber，您可以测试任何 PULL 或 PUSH 系统（HTTP、WebSockets、GraphQl、gRPC、SQL Databse、MongoDb、Redis 等）。</li>\\n<li>使用 NBomber，<strong>您可以轻松地将一些集成测试转换为负载测试</strong>。</li>\\n</ol>","autoDesc":true}');export{k as comp,o as data};
