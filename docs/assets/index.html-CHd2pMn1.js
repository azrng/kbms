import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as i}from"./app-2OrQE2Jp.js";const s="/kbms/common/1645843560955-1db6a34e-2b9b-4953-8164-8ec0b955121b.png",r={},n=i('<h2 id="blazor是什么" tabindex="-1"><a class="header-anchor" href="#blazor是什么"><span>Blazor是什么？</span></a></h2><p>Blazor 是在.Net和Razor上构建的用户UI框架，用于使用 HTML、CSS 和 C# 构建网页。 可以使用标准 HTML 和 CSS 定义网站的布局和设计。</p><h3 id="两个模式" tabindex="-1"><a class="header-anchor" href="#两个模式"><span>两个模式</span></a></h3><p>Blazor WebAssembly：部署在用户计算机的浏览器上运行(类似于单页面应用程序)(需要浏览器支持HTML5标准的WebAssembly运行时)(通过 WebAssembly 直接在浏览器中运行的客户端 Web 应用)。 Blazor Server：在服务器上作为Asp.Net应用程序的一部分运行，系统将使用 ASP.NET Core SignalR 和首选 Web 套接字连接来维护双向通信管道(通过 WebSocket 连接处理 UI 交互的服务器端代码)。</p><p>官网：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/?view=aspnetcore-7.0" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/aspnet/core/blazor/?view=aspnetcore-7.0</a> 学习教程：<a href="https://learn.microsoft.com/zh-cn/training/browse/?expanded=dotnet&amp;products=blazor" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/training/browse/?expanded=dotnet&amp;products=blazor</a><img src="'+s+`" alt="image.png" loading="lazy"> 两种模式如何选择</p><table><thead><tr><th>条件</th><th>你可以选择 Blazor Server，因为...</th><th>你可以选择 Blazor WebAssembly，因为...</th></tr></thead><tbody><tr><td>开发人员熟悉 .NET</td><td>构建后的应用程序就像是熟悉的 ASP.NET Core 应用程序一样</td><td>构建后的应用程序将使用你现有的技能在浏览器中以本机方式运行</td></tr><tr><td>需要与现有 .NET 投资资产集成</td><td>存在用于与 ASP.NET Core 应用程序集成的现有模型</td><td>与连接到 Web 服务器相比，允许在浏览器中以本机方式运行这些资源可以提供更好的交互和感知性能</td></tr><tr><td>现有 Web 服务器</td><td>现有 Web 服务器正在运行 ASP.NET Core</td><td>需要将应用程序部署到任何服务器，而无需服务器端呈现</td></tr><tr><td>应用程序的复杂性</td><td>应用程序具有大量处理要求，这些要求可从数据中心内运行的分布式应用程序中获益</td><td>应用程序可以通过在客户端上以本机处理器速度运行而获益</td></tr><tr><td>网络要求</td><td>应用程序将始终连接到服务器</td><td>应用程序可以在“偶尔连接”模式下运行，而无需与服务器进行持续交互</td></tr><tr><td>代码安全要求</td><td>应用程序需要进行验证或要求在特定的地理位置运行，指定位置可以通过服务器来强制执行</td><td>你的应用程序代码可以在没有此要求的任何设备上的任何位置运行</td></tr></tbody></table><h2 id="什么是-webassembly" tabindex="-1"><a class="header-anchor" href="#什么是-webassembly"><span>什么是 WebAssembly？</span></a></h2><p>WebAssembly 是一项在所有新式浏览器中可用的标准技术，允许代码在浏览器中运行（类似于 JavaScript）。 我们可以使用工具准备 C# 代码，以便在浏览器中用作 Web 程序集应用程序，且这些工具已捆绑到 .NET 命令行应用程序中。</p><h2 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h2><p>Awesome Blazor：https://github.com/AdrienTorris/awesome-blazor</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><p>一般可以通过热更新来实现不重启程序实现页面，更新，但是有些操作必须重启，这个时候可以使用，命令行来实现自动重启服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> watch</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">   //</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y代表有更新自动重启</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作"><span>常用操作</span></a></h2><ul><li>数据绑定</li><li>组件</li><li>依赖注入</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">AddSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">PizzaService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">@inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> PizzaService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> PizzaSvc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>Blazor University中文文档：<a href="https://feiyun0112.github.io/blazor-university.zh-cn/" target="_blank" rel="noopener noreferrer">https://feiyun0112.github.io/blazor-university.zh-cn/</a> Blazor Wasm开发谷歌插件：<a href="https://blog.csdn.net/sD7O95O/article/details/121368472" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sD7O95O/article/details/121368472</a><a href="https://mp.weixin.qq.com/s/yowTbFV35Unbgrdn8UJTPg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/yowTbFV35Unbgrdn8UJTPg</a> | 全面的ASP.NET Core Blazor简介和快速入门</p>`,18),l=[n];function o(h,d){return a(),t("div",null,l)}const b=e(r,[["render",o],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/web/blazor/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-10-15T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["blazor"],"filename":"readme","slug":"ebz0h3","docsId":"67625478","description":"Blazor是什么？ Blazor 是在.Net和Razor上构建的用户UI框架，用于使用 HTML、CSS 和 C# 构建网页。 可以使用标准 HTML 和 CSS 定义网站的布局和设计。 两个模式 Blazor WebAssembly：部署在用户计算机的浏览器上运行(类似于单页面应用程序)(需要浏览器支持HTML5标准的WebAssembly运行时...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/web/blazor/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"Blazor是什么？ Blazor 是在.Net和Razor上构建的用户UI框架，用于使用 HTML、CSS 和 C# 构建网页。 可以使用标准 HTML 和 CSS 定义网站的布局和设计。 两个模式 Blazor WebAssembly：部署在用户计算机的浏览器上运行(类似于单页面应用程序)(需要浏览器支持HTML5标准的WebAssembly运行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1645843560955-1db6a34e-2b9b-4953-8164-8ec0b955121b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T08:40:25.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"blazor"}],["meta",{"property":"article:published_time","content":"2023-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-02T08:40:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1645843560955-1db6a34e-2b9b-4953-8164-8ec0b955121b.png\\"],\\"datePublished\\":\\"2023-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-02T08:40:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"Blazor是什么？","slug":"blazor是什么","link":"#blazor是什么","children":[{"level":3,"title":"两个模式","slug":"两个模式","link":"#两个模式","children":[]}]},{"level":2,"title":"什么是 WebAssembly？","slug":"什么是-webassembly","link":"#什么是-webassembly","children":[]},{"level":2,"title":"开源项目","slug":"开源项目","link":"#开源项目","children":[]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1717317625000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":2.9,"words":869},"filePathRelative":"web/blazor/readme.md","localizedDate":"2023年10月15日","excerpt":"<h2>Blazor是什么？</h2>\\n<p>Blazor 是在.Net和Razor上构建的用户UI框架，用于使用 HTML、CSS 和 C# 构建网页。 可以使用标准 HTML 和 CSS 定义网站的布局和设计。</p>\\n<h3>两个模式</h3>\\n<p>Blazor WebAssembly：部署在用户计算机的浏览器上运行(类似于单页面应用程序)(需要浏览器支持HTML5标准的WebAssembly运行时)(通过 WebAssembly 直接在浏览器中运行的客户端 Web 应用)。\\nBlazor Server：在服务器上作为Asp.Net应用程序的一部分运行，系统将使用 ASP.NET Core SignalR 和首选 Web 套接字连接来维护双向通信管道(通过 WebSocket 连接处理 UI 交互的服务器端代码)。</p>","autoDesc":true}');export{b as comp,m as data};
