import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as p}from"./app-2OrQE2Jp.js";const o="/kbms/common/1609838483458-c36196d0-07d2-488a-a39c-c854f43b76fd.jpeg",n="/kbms/common/1609838483468-fcb04b06-21c8-45e1-9aa3-61698701e93e.jpeg",i="/kbms/common/1609838483469-b217c25a-f5c5-4e28-adae-b769d5efc375.jpeg",c="/kbms/common/1609838483472-1ccfaa5c-931b-4577-ab75-d444a5e0ea99.jpeg",m="/kbms/common/1609838483479-2b599610-c552-4fdf-bad9-01634af059a0.jpeg",s="/kbms/common/1609838483520-54f3fc10-8d4f-411b-b50b-99bbdb34e249.jpeg",r="/kbms/common/1609838483476-89587389-d1ef-4df6-b1f0-b14835de1f09.jpeg",g={},d=p('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>数据结构是指相互之间存在着一种或者多种关系的数据元素的集合和该集合的数据元素之间的关系组成。常用的有：数组 栈  链表  队列  树  图  堆  散列表等</p><p>常用数据类型的底层结构 二叉树等</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>数组 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p><p>int[] data = new int[100]；data[0]  = 1;</p><p>优点： 1、按照索引查询元素速度快 2、按照索引遍历数组方便</p><p>缺点： 1、数组的大小固定后就无法扩容了 2、数组只能存储一种类型的数据 3、添加，删除的操作慢，因为要移动其他的元素。</p><p>适用场景： 频繁查询，对存储空间要求不大，很少增加和删除的情况。</p><p>栈</p><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。特点是：先进后出，或者说是后进的先出，从栈顶放入的元素的操作叫做入栈，取出元素叫做出栈。 <img src="'+o+'" alt="image.jpeg" loading="lazy"> 栈的结构就像一个集装箱，越先放进的东西越晚才能拿出来。所以栈常应用于实现递归功能方法的场景，例如斐波那切数列</p><p>队列</p><p>队列和栈一样，也是一种线性表，不同的是，队列可以在一端添加元素然后在另一端取出，也就是说先进先出，从一端放入元素的操作称为入队，取出元素为出队 <img src="'+n+'" alt="image.jpeg" loading="lazy"> 使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常使用。</p><p>链表</p><p>链表是物理存储单元上非连续的、非顺序的存储结果，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域（内存空间），另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。 <img src="'+i+'" alt="image.jpeg" loading="lazy"> 链表的优点： 链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素； 添加或者删除元素只需要改变前后两个元素结点的指针域指向的地址即可，所以添加、删除很快； 缺点： 因为含有大量指针域，占用空间比较大； 查找元素需要遍历链表来查找，非常耗时。 使用场景： 数据量较小，需要频繁增加，删除操作的场景</p><p>树</p><p>树是一种数据结构，它是由n(n&gt;=1)个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一颗倒挂的树，也就是说它是跟朝上，而叶朝下的，它具有以下的特点： 每个节点有零个或者多个子节点； 没有父节点的节点称为根节点； 每个非根节点有且只有一个父节点； 除了根节点外，每个子节点可以分为多个不相交的子树； 在日常的应用中，我们讨论和用的最多的树的其中一种结构，就是二叉树 <img src="'+c+'" alt="image.jpeg" loading="lazy"> 二叉树是树的特殊一种，具有如下特点：</p><p>1、每个结点最多有两颗子树，结点的度最大为2。 2、左子树和右子树是有顺序的，次序不能颠倒。 3、即使某结点只有一个子树，也要区分左右子树。</p><p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化，所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p><p>扩展： 二叉树有很多扩展的数据结构，包括平衡二叉树、红黑树、B+树等，这些数据结构二叉树的基础上衍生了很多的功能，在实际应用中广泛用到，例如mysql的数据库索引结构用的就是B+树，还有HashMap的底层源码中用到了红黑树。这些二叉树的功能强大，但算法上比较复杂，想学习的话还是需要花时间去深入的。</p><p>散列表</p><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。</p><p>记录的存储位置=f(key)</p><p>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。</p><p>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构，其示例图如下： <img src="'+m+'" alt="image.jpeg" loading="lazy"> 从图中可以看出，左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。</p><p>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p><p>堆</p><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：</p><p>堆中某个节点的值总是不大于或不小于其父节点的值；</p><p>堆总是一棵完全二叉树。</p><p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p><p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。 (ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下： <img src="'+s+'" alt="image.jpeg" loading="lazy"> 因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p><p>图 图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。 按照顶点指向的方向可分为无向图和有向图 <img src="'+r+'" alt="image.jpeg" loading="lazy"></p><p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p>',34),l=[d];function b(h,f){return a(),t("div",null,l)}const _=e(g,[["render",b],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/computerBasics/dataStructure/","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","lang":"zh-CN","date":"2023-05-28T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["计算机基础"],"tag":["无"],"filename":"shujujiegou","slug":"yw63e9","docsId":"29634337","description":"概述 数据结构是指相互之间存在着一种或者多种关系的数据元素的集合和该集合的数据元素之间的关系组成。常用的有：数组 栈 链表 队列 树 图 堆 散列表等 常用数据类型的底层结构 二叉树等 数据类型 数组 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/computerBasics/dataStructure/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"概述 数据结构是指相互之间存在着一种或者多种关系的数据元素的集合和该集合的数据元素之间的关系组成。常用的有：数组 栈 链表 队列 树 图 堆 散列表等 常用数据类型的底层结构 二叉树等 数据类型 数组 数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1609838483458-c36196d0-07d2-488a-a39c-c854f43b76fd.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T07:39:42.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-05-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T07:39:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1609838483458-c36196d0-07d2-488a-a39c-c854f43b76fd.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483468-fcb04b06-21c8-45e1-9aa3-61698701e93e.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483469-b217c25a-f5c5-4e28-adae-b769d5efc375.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483472-1ccfaa5c-931b-4577-ab75-d444a5e0ea99.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483479-2b599610-c552-4fdf-bad9-01634af059a0.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483520-54f3fc10-8d4f-411b-b50b-99bbdb34e249.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609838483476-89587389-d1ef-4df6-b1f0-b14835de1f09.jpeg\\"],\\"datePublished\\":\\"2023-05-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-23T07:39:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]}],"git":{"createdTime":1693755609000,"updatedTime":1711179582000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":7.47,"words":2241},"filePathRelative":"computerBasics/dataStructure/readme.md","localizedDate":"2023年5月28日","excerpt":"<h2>概述</h2>\\n<p>数据结构是指相互之间存在着一种或者多种关系的数据元素的集合和该集合的数据元素之间的关系组成。常用的有：数组 栈&nbsp; 链表&nbsp; 队列&nbsp; 树&nbsp; 图&nbsp; 堆&nbsp; 散列表等</p>\\n<p>常用数据类型的底层结构  二叉树等</p>\\n<h2>数据类型</h2>\\n<p>数组\\n数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>\\n<p>int[] data = new int[100]；data[0]&nbsp; = 1;</p>","autoDesc":true}');export{_ as comp,y as data};
