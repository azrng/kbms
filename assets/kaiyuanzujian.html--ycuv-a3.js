import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,e as n,o as t}from"./app-BIR_P--4.js";const o={};function i(p,e){return t(),r("div",null,e[0]||(e[0]=[n('<h2 id="模块化框架" tabindex="-1"><a class="header-anchor" href="#模块化框架"><span>模块化框架</span></a></h2><ol><li><p>Prism：Prism 是一个用于构建模块化、可扩展和可测试的WPF应用程序的开源框架。它提供了一组用于实现MVVM（Model-View-ViewModel）模式的工具和模块化开发的支持。你可以在 Prism 的官方网站上找到更多信息和示例。</p></li><li><p>Caliburn.Micro：Caliburn.Micro 是一个轻量级的WPF开源框架，用于实现MVVM模式。它提供了通过约定自动绑定视图和视图模型的功能，并且容易上手和使用。你可以在 Caliburn.Micro 的 GitHub 仓库上找到更多信息和示例。</p></li><li><p>PropertyChanged.Fody：PropertyChanged.Fody 是一个用于自动实现INotifyPropertyChanged接口的开源库。通过简单的配置，它可以自动为你的属性生成属性更改通知代码，减少了样板代码的编写。你可以在 PropertyChanged.Fody 的 GitHub 仓库上找到更多信息和示例。</p></li></ol><h2 id="ui库" tabindex="-1"><a class="header-anchor" href="#ui库"><span>UI库</span></a></h2><h3 id="layui-wpf" tabindex="-1"><a class="header-anchor" href="#layui-wpf"><span>Layui-WPF</span></a></h3><p>这是一个WPF版的Layui前端UI样式库</p><h3 id="arthas-wpfui" tabindex="-1"><a class="header-anchor" href="#arthas-wpfui"><span>Arthas-WPFUI</span></a></h3><p>仓库地址：<a href="https://github.com/oneo-me/Arthas-WPFUI" target="_blank" rel="noopener noreferrer">https://github.com/oneo-me/Arthas-WPFUI</a></p><h3 id="handycontrol" tabindex="-1"><a class="header-anchor" href="#handycontrol"><span>HandyControl</span></a></h3><h3 id="materialdesign" tabindex="-1"><a class="header-anchor" href="#materialdesign"><span>MaterialDesign</span></a></h3><p>MaterialDesignThemes 是一个实现 Material Design 风格的开源库，提供了许多用于创建漂亮和现代化用户界面的控件和样式。它与WPF和其他XAML框架兼容，并且非常易于使用。你可以在 MaterialDesignThemes 的 GitHub 仓库上找到更多信息和示例。</p><h3 id="rubyer" tabindex="-1"><a class="header-anchor" href="#rubyer"><span>Rubyer</span></a></h3><h2 id="组件库" tabindex="-1"><a class="header-anchor" href="#组件库"><span>组件库</span></a></h2><h3 id="登录" tabindex="-1"><a class="header-anchor" href="#登录"><span>登录</span></a></h3><h4 id="modernlogin" tabindex="-1"><a class="header-anchor" href="#modernlogin"><span>ModernLogin</span></a></h4><p><a href="https://mp.weixin.qq.com/s/-_RhodsHEIVLnl7gSpiHtQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/-_RhodsHEIVLnl7gSpiHtQ</a> | WPF|分享一个登录界面设计<br> ModernLogin: <a href="https://github.com/dotnet9/TerminalMACS.ManagerForWPF/tree/master/src/TerminalMACS.TestDemo/Views/ModernLogin" target="_blank" rel="noopener noreferrer">https://github.com/dotnet9/TerminalMACS.ManagerForWPF/tree/master/src/TerminalMACS.TestDemo/Views/ModernLogin</a></p><h3 id="主页" tabindex="-1"><a class="header-anchor" href="#主页"><span>主页</span></a></h3><h4 id="walletpayment钱包支付仪表盘" tabindex="-1"><a class="header-anchor" href="#walletpayment钱包支付仪表盘"><span>WalletPayment钱包支付仪表盘</span></a></h4><ul><li>油管视频作者：C## WPF UI Academy</li><li>油管视频：C## WPF UI | How to Design Dark Mode Wallet Payment Dashboard in WPF</li><li>参考代码：WPF-Dark-Wallet-Payment</li><li>本文代码：WalletPayment</li></ul><p><a href="https://mp.weixin.qq.com/s/BH9Ba7CgFwVsnfb4C9rdNw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/BH9Ba7CgFwVsnfb4C9rdNw</a> | WPF|黑暗模式的钱包支付仪表盘界面设计</p><h3 id="导航" tabindex="-1"><a class="header-anchor" href="#导航"><span>导航</span></a></h3><h4 id="dropdownmenu" tabindex="-1"><a class="header-anchor" href="#dropdownmenu"><span>DropdownMenu</span></a></h4><p>YouTube Design com WPF 大神处习得，菜单导航功能实现，常规的管理系统应该常用，左侧显示菜单条目，点击菜单，右侧切换不同的业务用户控件。<br> 常用菜单可以采用TreeView树形控件+特定样式实现 ，本文介绍的是使用Expander+ListView的组合形式实现的导航菜单，两种各有各的好处，本文不做优劣评价。<br><a href="https://mp.weixin.qq.com/s/Q9RVNIJzsHVBPNP3YveOJA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Q9RVNIJzsHVBPNP3YveOJA</a> | C## WPF侧边栏导航菜单（Dropdown Menu）<br> 参考视频：Design com WPF：<a href="https://www.youtube.com/watch?v=-JZJh7D0E5E" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=-JZJh7D0E5E</a><br> 源码Github地址：<a href="https://github.com/Abel13/DropdownMenu" target="_blank" rel="noopener noreferrer">https://github.com/Abel13/DropdownMenu</a></p><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><h4 id="gong-wpf-dragdrop" tabindex="-1"><a class="header-anchor" href="#gong-wpf-dragdrop"><span>gong-wpf-dragdrop</span></a></h4><p>仓库地址：<a href="https://github.com/punker76/gong-wpf-dragdrop" target="_blank" rel="noopener noreferrer">https://github.com/punker76/gong-wpf-dragdrop</a><br><a href="https://mp.weixin.qq.com/s/u388RR7GFL3d1qtqMUKsoA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/u388RR7GFL3d1qtqMUKsoA</a> | 一个可拖拉实现列表排序的WPF开源控件</p><h2 id="思维图" tabindex="-1"><a class="header-anchor" href="#思维图"><span>思维图</span></a></h2><h3 id="aistudio-wpf-diagram" tabindex="-1"><a class="header-anchor" href="#aistudio-wpf-diagram"><span>aistudio.-wpf.-diagram</span></a></h3><p>仓库地址：<a href="https://gitee.com/akwkevin/aistudio.-wpf.-diagram" target="_blank" rel="noopener noreferrer">https://gitee.com/akwkevin/aistudio.-wpf.-diagram</a><br><a href="https://mp.weixin.qq.com/s/0inVDcEYjy0HDXe7aoXS8Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/0inVDcEYjy0HDXe7aoXS8Q</a> | 用WPF做一个思维导图</p><h2 id="webbrower" tabindex="-1"><a class="header-anchor" href="#webbrower"><span>WebBrower</span></a></h2><p>将浏览器嵌入 .NET 应用程序中：DotNetBrowser 还是 CefSharp？：<a href="https://mp.weixin.qq.com/s/wpReb7QyInywyUfVMn9TKA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/wpReb7QyInywyUfVMn9TKA</a></p><h3 id="cefsharp" tabindex="-1"><a class="header-anchor" href="#cefsharp"><span>CefSharp</span></a></h3><p>CefSharp 实际上是 Chromium Embedded Framework(CEF) 的 .NET 包装器。包装通过 C++/CLI 完成。</p><h3 id="dotnetbrowser" tabindex="-1"><a class="header-anchor" href="#dotnetbrowser"><span>DotNetBrowser</span></a></h3><p>DotNetBrowser 在底层不使用 CEF 或 C++/CLI。相反，它采用了自己的方法直接与 Chromium 集成。它启动一个功能齐全的 Chromium 引擎，并通过进程间通信 (IPC) 与其进行通信。</p><h2 id="图表" tabindex="-1"><a class="header-anchor" href="#图表"><span>图表</span></a></h2><h3 id="livecharts" tabindex="-1"><a class="header-anchor" href="#livecharts"><span>LiveCharts</span></a></h3><p>LiveCharts 是一个灵活和高性能的图表库，用于在WPF应用程序中创建各种类型的图表，如折线图、柱状图、饼图等。它支持实时数据更新和动画效果，并且提供了丰富的配置选项。你可以在 LiveCharts 的 GitHub 仓库上找到更多信息和示例。</p><h2 id="模板打印" tabindex="-1"><a class="header-anchor" href="#模板打印"><span>模板打印</span></a></h2><h3 id="fastreport" tabindex="-1"><a class="header-anchor" href="#fastreport"><span>FastReport</span></a></h3><h2 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理"><span>权限管理</span></a></h2><h3 id="ztappframework" tabindex="-1"><a class="header-anchor" href="#ztappframework"><span>ZTAppFramework</span></a></h3><p>WPF版本的权限管理<br><a href="https://www.cnblogs.com/zt199510/p/15151835.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zt199510/p/15151835.html</a> | ZTAppFramework框架说明 - 可乐_加冰 - 博客园<br> 仓库地址：<a href="https://github.com/zt199510/ZTAppFramework" target="_blank" rel="noopener noreferrer">https://github.com/zt199510/ZTAppFramework</a></p><h2 id="串口调试" tabindex="-1"><a class="header-anchor" href="#串口调试"><span>串口调试</span></a></h2><h3 id="serialport" tabindex="-1"><a class="header-anchor" href="#serialport"><span>SerialPort</span></a></h3><p><a href="https://github.com/239573049/SerialPort" target="_blank" rel="noopener noreferrer">https://github.com/239573049/SerialPort</a><br><a href="https://gitee.com/hejiale010426/serial-port" target="_blank" rel="noopener noreferrer">https://gitee.com/hejiale010426/serial-port</a><br> 串口工具，用于调试串口，支撑自定义串口参数，支撑定时发送。</p><h2 id="视频" tabindex="-1"><a class="header-anchor" href="#视频"><span>视频</span></a></h2><h3 id="ffplay" tabindex="-1"><a class="header-anchor" href="#ffplay"><span>FFplay</span></a></h3><p>C## 实现调用FFplay播放视频：<a href="https://mp.weixin.qq.com/s/P42dLcKUZJxfVVsyB0jybQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/P42dLcKUZJxfVVsyB0jybQ</a></p>',48)]))}const d=a(o,[["render",i]]),l=JSON.parse('{"path":"/dotnet/desktop/wpf/kaiyuanzujian.html","title":"开源组件","lang":"zh-CN","frontmatter":{"title":"开源组件","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"kaiyuanzujian","slug":"qgqnfyfwqednlulc","docsId":"125997879","description":"模块化框架 Prism：Prism 是一个用于构建模块化、可扩展和可测试的WPF应用程序的开源框架。它提供了一组用于实现MVVM（Model-View-ViewModel）模式的工具和模块化开发的支持。你可以在 Prism 的官方网站上找到更多信息和示例。 Caliburn.Micro：Caliburn.Micro 是一个轻量级的WPF开源框架，用于实...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开源组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T10:04:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/desktop/wpf/kaiyuanzujian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"开源组件"}],["meta",{"property":"og:description","content":"模块化框架 Prism：Prism 是一个用于构建模块化、可扩展和可测试的WPF应用程序的开源框架。它提供了一组用于实现MVVM（Model-View-ViewModel）模式的工具和模块化开发的支持。你可以在 Prism 的官方网站上找到更多信息和示例。 Caliburn.Micro：Caliburn.Micro 是一个轻量级的WPF开源框架，用于实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T10:04:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T10:04:35.000Z"}]]},"git":{"createdTime":1697962303000,"updatedTime":1716026675000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":3},{"name":"zhangyunpeng","username":"","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.23,"words":970},"filePathRelative":"dotnet/desktop/wpf/kaiyuanzujian.md","excerpt":"<h2>模块化框架</h2>\\n<ol>\\n<li>\\n<p>Prism：Prism 是一个用于构建模块化、可扩展和可测试的WPF应用程序的开源框架。它提供了一组用于实现MVVM（Model-View-ViewModel）模式的工具和模块化开发的支持。你可以在 Prism 的官方网站上找到更多信息和示例。</p>\\n</li>\\n<li>\\n<p>Caliburn.Micro：Caliburn.Micro 是一个轻量级的WPF开源框架，用于实现MVVM模式。它提供了通过约定自动绑定视图和视图模型的功能，并且容易上手和使用。你可以在 Caliburn.Micro 的 GitHub 仓库上找到更多信息和示例。</p>\\n</li>\\n<li>\\n<p>PropertyChanged.Fody：PropertyChanged.Fody 是一个用于自动实现INotifyPropertyChanged接口的开源库。通过简单的配置，它可以自动为你的属性生成属性更改通知代码，减少了样板代码的编写。你可以在 PropertyChanged.Fody 的 GitHub 仓库上找到更多信息和示例。</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,l as data};
