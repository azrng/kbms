import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const e={},p=t(`<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>原型模式也属于建造型模式。如果一个对象创建成本比较大，而同一个类的不同对象之间差别不大(大部分字段都相同或者完全相同)，在这种情况下，我们可以利用已有对象(原型)进行复制(或者拷贝)的方式，来创建新对象，以达到节省创建时间的目的，这种基于原型来创建对象的方式就叫做原型设计模式，简称原型模式。</p><h3 id="什么叫做创建成本大" tabindex="-1"><a class="header-anchor" href="#什么叫做创建成本大"><span>什么叫做创建成本大</span></a></h3><p>比如一个对象的创建包含申请内存、给成员复制这一个过程，本身并不会花费太多时间，或者说对大部分业务系统来说影响不大，但是如果一个对象的创建过程包含复杂的计算或者需要从网络、数据库、文件系统等比较耗时的步骤创建的，那么就可以利用原型模式，直接从现有对象拷贝得到，而不是创建新对象。</p><p>举例说明：比如我们有一个系统中有一个静态字典集合存储的是某一些关键字搜索的次数，key是关键字，value是搜索次数，每个一段时间获取一下，在项目启动的时候初始化之前的数据，如果在后续想获取的时候，我们再一次从数据库读取计算，那么这个过程就会比较耗时，我们可以在下一次读取的时候，只计算日志表中搜索记录超过上一次更新时间的数据，然后在原有的集合中增加这些新的搜索记录，但是我们有一个特殊需要是要保存上一次的集合内容，所以我们不能直接在上一次集合上进行修改，我们要基于上次的集合拷贝一份数据出来进行修改，这个过程就是原型模式。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchCollectService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> SearchCollectDto<span class="token punctuation">&gt;</span></span> currKeywordSearch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> SearchCollectDto<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">long</span></span> lastUpdateTime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newKeywordSearch <span class="token operator">=</span> currKeywordSearch<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Clone</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> SearchCollectDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//从数据库查询更新的搜索数据  查询大于某一个时间点的数据集合</span>
        <span class="token class-name">List<span class="token punctuation">&lt;</span>SearchCollectDto<span class="token punctuation">&gt;</span></span> updateSearchKeyword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SearchCollectDto<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">long</span></span> maxNewUpdateTime <span class="token operator">=</span> lastUpdateTime<span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> updateSearchKeyword<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxNewUpdateTime<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>LastSearchTime<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                maxNewUpdateTime <span class="token operator">=</span> item<span class="token punctuation">.</span>LastSearchTime<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newKeywordSearch<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Keyword<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                newKeywordSearch<span class="token punctuation">[</span>item<span class="token punctuation">.</span>Keyword<span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token function">SetCount</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Count<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">SetLastTime</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>LastSearchTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                newKeywordSearch<span class="token punctuation">[</span>item<span class="token punctuation">.</span>Keyword<span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//从数据库读取所有数据放到</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 搜索类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchCollectDto</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 关键字</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Keyword <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 搜索次数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 最后一次搜索时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> LastSearchTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">SearchCollectDto</span> <span class="token function">SetCount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Count<span class="token operator">+=</span>count<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">SearchCollectDto</span> <span class="token function">SetLastTime</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> lastTime<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        LastSearchTime<span class="token operator">=</span>lastTime<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><p>将原有对象的完完全全拷贝一次。方案：序列化和反序列化、递归创建对象赋值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Clone</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">object</span></span> ob<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ob <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> jsonStr <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h3><p>将原有对象的数据引用地址拷贝，共享数据，方案：等号赋值操作</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>当创建一个对象比较复杂的时候，但是需要的新对象的内容和已有对象的内容比较相似时候，可以利用已有对象去拷贝的方式去创建新对象。</p>`,14),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","yuanxingmoshi.html.vue"]]),d=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/chuangjianxing/yuanxingmoshi.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","lang":"zh-CN","date":"2022-07-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"yuanxingmoshi","slug":"db9mob","docsId":"83607252","description":"简述 原型模式也属于建造型模式。如果一个对象创建成本比较大，而同一个类的不同对象之间差别不大(大部分字段都相同或者完全相同)，在这种情况下，我们可以利用已有对象(原型)进行复制(或者拷贝)的方式，来创建新对象，以达到节省创建时间的目的，这种基于原型来创建对象的方式就叫做原型设计模式，简称原型模式。 什么叫做创建成本大 比如一个对象的创建包含申请内存、给...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/chuangjianxing/yuanxingmoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"简述 原型模式也属于建造型模式。如果一个对象创建成本比较大，而同一个类的不同对象之间差别不大(大部分字段都相同或者完全相同)，在这种情况下，我们可以利用已有对象(原型)进行复制(或者拷贝)的方式，来创建新对象，以达到节省创建时间的目的，这种基于原型来创建对象的方式就叫做原型设计模式，简称原型模式。 什么叫做创建成本大 比如一个对象的创建包含申请内存、给..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[{"level":3,"title":"什么叫做创建成本大","slug":"什么叫做创建成本大","link":"#什么叫做创建成本大","children":[]}]},{"level":2,"title":"实现方式","slug":"实现方式","link":"#实现方式","children":[{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":2.9,"words":871},"filePathRelative":"softwareDesign/highQualityCode/designMode/chuangjianxing/yuanxingmoshi.md","localizedDate":"2022年7月17日","excerpt":"<h2>简述</h2>\\n<p>原型模式也属于建造型模式。如果一个对象创建成本比较大，而同一个类的不同对象之间差别不大(大部分字段都相同或者完全相同)，在这种情况下，我们可以利用已有对象(原型)进行复制(或者拷贝)的方式，来创建新对象，以达到节省创建时间的目的，这种基于原型来创建对象的方式就叫做原型设计模式，简称原型模式。</p>\\n<h3>什么叫做创建成本大</h3>\\n<p>比如一个对象的创建包含申请内存、给成员复制这一个过程，本身并不会花费太多时间，或者说对大部分业务系统来说影响不大，但是如果一个对象的创建过程包含复杂的计算或者需要从网络、数据库、文件系统等比较耗时的步骤创建的，那么就可以利用原型模式，直接从现有对象拷贝得到，而不是创建新对象。</p>","autoDesc":true}');export{k as comp,d as data};
