import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as i,d as n}from"./app-2OrQE2Jp.js";const t={},a=n('<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>将一个长的不方便记录的域名变相缩短为一个短一点甚至可以方便记录的短域名地址。</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><p>输入一个长域名一个过期时间和一个自定义的别名，服务会输出一个包含自定义别名的短域名，并且在过期时间到来之前都可以正常访问并重定向到原始的域名地址上去。</p><h3 id="要求" tabindex="-1"><a class="header-anchor" href="#要求"><span>要求</span></a></h3><ul><li>过期后失效</li><li>短域名是唯一的</li><li>支持自定义短域名，长度在7个字符之内，不包含特殊字符</li><li>要保证安全，不允许被爬起从而盗取数据</li></ul><h3 id="逻辑" tabindex="-1"><a class="header-anchor" href="#逻辑"><span>逻辑</span></a></h3><h4 id="生成短域名" tabindex="-1"><a class="header-anchor" href="#生成短域名"><span>生成短域名</span></a></h4><ul><li>输入长域名，判断是否保存过，保存过就不再次保存</li><li>生成一个从未使用过的短域名</li><li>将长域名和短域名的关系存储到数据库中</li></ul><h4 id="读取接口" tabindex="-1"><a class="header-anchor" href="#读取接口"><span>读取接口</span></a></h4><ul><li>读取短域名，判断是否有效，如果诶呦被存储过直接返回</li><li>根据短域名查询长域名</li><li>使用长域名进行客户端重定向</li></ul><h4 id="短域名唯一性" tabindex="-1"><a class="header-anchor" href="#短域名唯一性"><span>短域名唯一性</span></a></h4><ul><li>写的时候判断新生成的是否重复，禁止重复写入</li></ul><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h2><h3 id="吞吐量优化" tabindex="-1"><a class="header-anchor" href="#吞吐量优化"><span>吞吐量优化</span></a></h3><ol><li>单机服务端扛不住这么大的QPS 所以需要水平扩展,因此需要NGINX做<strong>负载均衡。</strong></li><li>优化吞吐量的方法无外乎,分片,副本</li></ol><h3 id="延迟优化" tabindex="-1"><a class="header-anchor" href="#延迟优化"><span>延迟优化</span></a></h3><p>Server 需要写redis 与 mysql 需要三次网络调用其延迟 至少100ms以上,同时考虑短域名系统的全球化,跨越过远的广域网络请求,延迟再增加80ms以上,因此预估一次请求延迟在200ms。 <strong>存储层</strong></p><ol><li><strong>存储介质</strong> 数据表的业务逻辑非常简单,没必要使用关系型数据库,可以更换为持久化kv引擎 比如rocksDB,如果考虑数据分析的需求,则可以将数据构建离线的ELK导入数仓。</li><li><strong>构建索引</strong> 写入时要判断长域名是否存在,因此要对长域名建立索引,读取时要根据短域名查询长域名因此也要在redis中维护短域名到长域名的倒排索引。</li><li>为了应对极高的写入QPS,必须使用<strong>分片技术</strong>, 使用短域名7位62进制的特性,进行一致性哈希,来计算写入分片位置,读取时也用相同的哈希算法。</li></ol><p><strong>缓存层</strong></p><ol><li>**读多写少 **的系统中,可以使用缓存技术来降低延迟, 尽量保证所有请求在缓存中完成</li><li>对于判断长域名是否存储过,以及短域名是否被分配过可以构建<strong>布隆过滤器</strong>。</li><li>如果对延迟非常苛刻,完全可以使用**本地缓存, **在本地维护一个LRU缓存来存储长短域名映射</li><li>短域名数据的变化非常缓慢,可以考虑<strong>静态化</strong>技术,把数据发送给服务节点以文件的方式同步</li></ol><p><strong>业务层</strong></p><ol><li>通过<strong>尾号分片</strong>将ID生成器分布式化,基于<strong>预处理</strong>的思路可以分段缓存一部分未分配的短域名</li><li>分布式ID生成需要使用zk等组件处理<strong>数据一致性</strong>的问题</li><li>使用lua脚本降低对redis的<strong>减少网络调用次数</strong></li></ol><p><strong>拓扑层</strong></p><ol><li>利用地理位置的局部性,将同一地区的请求都路由到最近的机房访问,<strong>降低广域延迟</strong></li><li>可以支持跨机房全球化的<strong>多重分片</strong>,来应对同一地区QPS过高问题,使用7位数字中的首位进行一致性哈希(其哈希空间为62),后6位进行本机房内的rocksDB 节点的分片。</li></ol><h3 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h3><ol><li>如果使用自增ID作为短域名,那么就有可能被人逐个遍历而被爬取</li><li>使用MurmurHash 算法转义为7位字符串(存在冲突,但可解决安全性问题)</li><li>防止DOS攻击等,要对IP限流和IP黑名单等机制</li></ol>',27),r=[a];function s(o,h){return i(),l("div",null,r)}const p=e(t,[["render",s],["__file","duanlianjie.html.vue"]]),g=JSON.parse('{"path":"/middleware/duanlianjie/duanlianjie.html","title":"短连接","lang":"zh-CN","frontmatter":{"title":"短连接","lang":"zh-CN","date":"2022-01-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"duanlianjie","slug":"oxaxgu","docsId":"54510843","description":"目的 将一个长的不方便记录的域名变相缩短为一个短一点甚至可以方便记录的短域名地址。 步骤 输入一个长域名一个过期时间和一个自定义的别名，服务会输出一个包含自定义别名的短域名，并且在过期时间到来之前都可以正常访问并重定向到原始的域名地址上去。 要求 过期后失效 短域名是唯一的 支持自定义短域名，长度在7个字符之内，不包含特殊字符 要保证安全，不允许被爬起...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/duanlianjie/duanlianjie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"短连接"}],["meta",{"property":"og:description","content":"目的 将一个长的不方便记录的域名变相缩短为一个短一点甚至可以方便记录的短域名地址。 步骤 输入一个长域名一个过期时间和一个自定义的别名，服务会输出一个包含自定义别名的短域名，并且在过期时间到来之前都可以正常访问并重定向到原始的域名地址上去。 要求 过期后失效 短域名是唯一的 支持自定义短域名，长度在7个字符之内，不包含特殊字符 要保证安全，不允许被爬起..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"短连接\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[{"level":3,"title":"要求","slug":"要求","link":"#要求","children":[]},{"level":3,"title":"逻辑","slug":"逻辑","link":"#逻辑","children":[{"level":4,"title":"生成短域名","slug":"生成短域名","link":"#生成短域名","children":[]},{"level":4,"title":"读取接口","slug":"读取接口","link":"#读取接口","children":[]},{"level":4,"title":"短域名唯一性","slug":"短域名唯一性","link":"#短域名唯一性","children":[]}]}]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[{"level":3,"title":"吞吐量优化","slug":"吞吐量优化","link":"#吞吐量优化","children":[]},{"level":3,"title":"延迟优化","slug":"延迟优化","link":"#延迟优化","children":[]},{"level":3,"title":"安全性","slug":"安全性","link":"#安全性","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.59,"words":1076},"filePathRelative":"middleware/duanlianjie/duanlianjie.md","localizedDate":"2022年1月12日","excerpt":"<h2>目的</h2>\\n<p>将一个长的不方便记录的域名变相缩短为一个短一点甚至可以方便记录的短域名地址。</p>\\n<h2>步骤</h2>\\n<p>输入一个长域名一个过期时间和一个自定义的别名，服务会输出一个包含自定义别名的短域名，并且在过期时间到来之前都可以正常访问并重定向到原始的域名地址上去。</p>\\n<h3>要求</h3>\\n<ul>\\n<li>过期后失效</li>\\n<li>短域名是唯一的</li>\\n<li>支持自定义短域名，长度在7个字符之内，不包含特殊字符</li>\\n<li>要保证安全，不允许被爬起从而盗取数据</li>\\n</ul>\\n<h3>逻辑</h3>\\n<h4>生成短域名</h4>\\n<ul>\\n<li>输入长域名，判断是否保存过，保存过就不再次保存</li>\\n<li>生成一个从未使用过的短域名</li>\\n<li>将长域名和短域名的关系存储到数据库中</li>\\n</ul>","autoDesc":true}');export{p as comp,g as data};
