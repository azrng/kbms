import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as s,e as n,f as e,d as l}from"./app-Bfb6-vFH.js";const i={},r=l(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>反射是一项很基础的技术，它将编译期间的静态绑定转换为延迟到运行期间的动态绑定。程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集、模块、类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。它是在运行时创建和使用类型实例。</p><h2 id="反射分类" tabindex="-1"><a class="header-anchor" href="#反射分类"><span>反射分类</span></a></h2><h3 id="type-comparison" tabindex="-1"><a class="header-anchor" href="#type-comparison"><span>type comparison</span></a></h3><p>类型判断，主要包括 is 和 typeof 两个操作符及对象实例上的 GetType 调用。这是最轻型的消耗，可以无需考虑优化问题。注意 typeof 运算符比对象实例上的 GetType 方法要快，只要可能则优先使用 typeof 运算符。</p><h3 id="member-enumeration" tabindex="-1"><a class="header-anchor" href="#member-enumeration"><span>member enumeration</span></a></h3><p>成员枚举，用于访问反射相关的元数据信息，例如Assembly.GetModule、Module.GetType、Type对象上的 IsInterface、IsPublic、GetMethod、GetMethods、GetProperty、GetProperties、 GetConstructor调用等。尽管元数据都会被CLR缓存，但部分方法的调用消耗仍非常大，不过这类方法调用频度不会很高，所以总体看性能损失程 度中等。</p><h3 id="member-invocation" tabindex="-1"><a class="header-anchor" href="#member-invocation"><span>member invocation</span></a></h3><p>成员调用，包括动态创建对象及动态调用对象方法，主要有Activator.CreateInstance、Type.InvokeMember等。</p><h2 id="动态创建对象" tabindex="-1"><a class="header-anchor" href="#动态创建对象"><span>动态创建对象</span></a></h2><p>C#主要支持 5 种动态创建对象的方式：</p><ol><li><p>Type.InvokeMember</p></li><li><p>ContructorInfo.Invoke</p></li><li><p>Activator.CreateInstance(Type)</p></li><li><p>Activator.CreateInstance(assemblyName, typeName)</p></li><li><p>Assembly.CreateInstance(typeName)</p></li></ol><p>最快的是方式 3 ，与 Direct Create 的差异在一个数量级之内，约慢 7 倍的水平。其他方式，至少在 40 倍以上，最慢的是方式 4 ，要慢三个数量级。</p><h2 id="推荐的使用原则" tabindex="-1"><a class="header-anchor" href="#推荐的使用原则"><span>推荐的使用原则</span></a></h2><p>模式</p><p>1． 如果可能，则避免使用反射和动态绑定</p><p>2． 使用接口调用方式将动态绑定改造为早期绑定</p><p>3． 使用Activator.CreateInstance(Type)方式动态创建对象</p><p>4． 使用typeof操作符代替GetType调用</p><p>反模式</p><p>1． 在已获得Type的情况下，却使用Assembly.CreateInstance(type.FullName)</p><h2 id="常用类库" tabindex="-1"><a class="header-anchor" href="#常用类库"><span>常用类库</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>NuGet\\Install<span class="token operator">-</span>Package FastMember <span class="token operator">-</span>Version <span class="token number">1.5</span><span class="token number">.0</span>
NuGet\\Install<span class="token operator">-</span>Package FastReflection <span class="token operator">-</span>Version <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="获取指定程序集" tabindex="-1"><a class="header-anchor" href="#获取指定程序集"><span>获取指定程序集</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">;</span><span class="token comment">//获取指定的程序集名称</span>
<span class="token class-name"><span class="token keyword">var</span></span> assembly1 <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">;</span><span class="token comment">//获取当前运行的程序集名称</span>

<span class="token class-name"><span class="token keyword">var</span></span> inter2 <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前程序集里面包含的所有类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取类型的成员" tabindex="-1"><a class="header-anchor" href="#获取类型的成员"><span>获取类型的成员</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> members <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMembers</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span>
	BindingFlags<span class="token punctuation">.</span>Static <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> member <span class="token keyword">in</span> members<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">member<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">member<span class="token punctuation">.</span>MemberType</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取并调用对象的方法" tabindex="-1"><a class="header-anchor" href="#获取并调用对象的方法"><span>获取并调用对象的方法</span></a></h3><p>示例：调用service下的jiafa方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> bbb <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;jiafa&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> bbb<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="给指定类属性赋值" tabindex="-1"><a class="header-anchor" href="#给指定类属性赋值"><span>给指定类属性赋值</span></a></h3><p>通过反射获取到类对象然后获取到属性进行赋值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> createname <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
createname<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span><span class="token string">&quot;ceshi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//循环拼接字段名赋值</span>
<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ChatSatisfactionTemplateOption</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> pro <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
pro<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反射执行泛型方法" tabindex="-1"><a class="header-anchor" href="#反射执行泛型方法"><span>反射执行泛型方法</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;TestMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">MethodInfo</span> genericMethod <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	genericMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">TestMethod</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2>`,37),u={href:"http://www.cnblogs.com/JimmyZhang/archive/2008/03/18/1110711.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.cnblogs.com/g1mist/p/3227290.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://reflect.whuanle.cn",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/8V1u996ZDPhsBs3YXgb6FQ",target:"_blank",rel:"noopener noreferrer"};function h(v,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[s("a",u,[n(".Net中的反射(动态创建类型实例) - Part.4"),e(a)]),n("  "),s("a",k,[n("反射生成SQL语句入门"),e(a)]),n(" C## 反射与特性系列教程："),s("a",d,[n("https://reflect.whuanle.cn"),e(a)]),s("a",m,[n("https://mp.weixin.qq.com/s/8V1u996ZDPhsBs3YXgb6FQ"),e(a)]),n(" | C#反射机制")])])}const f=t(i,[["render",h],["__file","fanshe.html.vue"]]),w=JSON.parse('{"path":"/dotnet/csharp/fanshe/fanshe.html","title":"反射","lang":"zh-CN","frontmatter":{"title":"反射","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"fanshe","slug":"ohfft3","docsId":"31014038","description":"描述 反射是一项很基础的技术，它将编译期间的静态绑定转换为延迟到运行期间的动态绑定。程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集、模块、类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。它是在运行时创建和使用类型实例。 反射分类 type comparison ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/fanshe/fanshe.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"反射"}],["meta",{"property":"og:description","content":"描述 反射是一项很基础的技术，它将编译期间的静态绑定转换为延迟到运行期间的动态绑定。程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集、模块、类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。它是在运行时创建和使用类型实例。 反射分类 type comparison ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T10:59:52.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-10T10:59:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-10T10:59:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"反射分类","slug":"反射分类","link":"#反射分类","children":[{"level":3,"title":"type comparison","slug":"type-comparison","link":"#type-comparison","children":[]},{"level":3,"title":"member enumeration","slug":"member-enumeration","link":"#member-enumeration","children":[]},{"level":3,"title":"member invocation","slug":"member-invocation","link":"#member-invocation","children":[]}]},{"level":2,"title":"动态创建对象","slug":"动态创建对象","link":"#动态创建对象","children":[]},{"level":2,"title":"推荐的使用原则","slug":"推荐的使用原则","link":"#推荐的使用原则","children":[]},{"level":2,"title":"常用类库","slug":"常用类库","link":"#常用类库","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"获取指定程序集","slug":"获取指定程序集","link":"#获取指定程序集","children":[]},{"level":3,"title":"获取类型的成员","slug":"获取类型的成员","link":"#获取类型的成员","children":[]},{"level":3,"title":"获取并调用对象的方法","slug":"获取并调用对象的方法","link":"#获取并调用对象的方法","children":[]},{"level":3,"title":"给指定类属性赋值","slug":"给指定类属性赋值","link":"#给指定类属性赋值","children":[]},{"level":3,"title":"反射执行泛型方法","slug":"反射执行泛型方法","link":"#反射执行泛型方法","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1710068392000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"dotnet/csharp/fanshe/fanshe.md","localizedDate":"2023年10月22日","excerpt":"<h2>描述</h2>\\n<p>反射是一项很基础的技术，它将编译期间的静态绑定转换为延迟到运行期间的动态绑定。程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集、模块、类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。它是在运行时创建和使用类型实例。</p>\\n<h2>反射分类</h2>\\n<h3>type comparison</h3>\\n<p>类型判断，主要包括 is 和 typeof 两个操作符及对象实例上的 GetType 调用。这是最轻型的消耗，可以无需考虑优化问题。注意 typeof 运算符比对象实例上的 GetType 方法要快，只要可能则优先使用 typeof 运算符。</p>","autoDesc":true}');export{f as comp,w as data};
