import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const i="/kbms/common/1691289353140-7fc5da1d-304e-4ebe-81a2-1b8a77aca99f.png",r="/kbms/common/1691289353203-ba094c04-d18a-4510-8ccc-b522b1dbc9f9.png",u={},d=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),k=n("p",null,"HttpContext 封装了有关个别 HTTP 请求和响应的所有信息。 收到 HTTP 请求时，HttpContext 实例会进行初始化。",-1),v=n("h2",{id:"注意事项",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注意事项"},[n("span",null,"注意事项")])],-1),m=n("p",null,"HttpContext 不是线程安全型。 在处理请求之外读取或写入 HttpContext 的属性可能会导致 NullReferenceException",-1),b={href:"https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作"><span>常用操作</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//获取请求ip</span>
_contextAccessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取请求头部</span>
<span class="token class-name"><span class="token keyword">var</span></span> header <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;testHeader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取请求ip</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> clientIpAddress <span class="token operator">=</span> _httpContextAccessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;X-Real-IP&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>clientIpAddress<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        clientIpAddress <span class="token operator">=</span> _httpContextAccessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> clientIpAddress<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="获取httpcontext的方法" tabindex="-1"><a class="header-anchor" href="#获取httpcontext的方法"><span>获取HttpContext的方法</span></a></h3><h4 id="controllerbase派生类" tabindex="-1"><a class="header-anchor" href="#controllerbase派生类"><span>ControllerBase派生类</span></a></h4><p>在 ControllerBase 派生类中，我们可以直接通过 HttpContext 属性获取 HttpContext 对象。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 在这里HttpContext 是 Controller/ControllerBase 对象的属性</span>
        <span class="token class-name"><span class="token keyword">var</span></span> httpContext <span class="token operator">=</span> HttpContext<span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h4><p>在低版本中在Startup的ConfigureServices方法直接注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在.Net6以及高版本中在Program中注入配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就可以通过构造函数注入的方式获取该配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _httpContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> httpContext<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	_httpContext <span class="token operator">=</span> httpContext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> requestIp<span class="token operator">=</span> _httpContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以将<code>IHttpContextAccessor</code> 注入到静态类中，后续就可以直接通过静态类去访问</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpHelper</span>
<span class="token punctuation">{</span>
     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">IHttpContextAccessor</span> _accessor<span class="token punctuation">;</span>
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> httpContextAccessor<span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
          _accessor <span class="token operator">=</span> httpContextAccessor<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">HttpContext</span> HttpContext <span class="token operator">=&gt;</span> _accessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如在ConfigureServices注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> services<span class="token punctuation">.</span><span class="token function">AddHttpContextAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再Configure中赋值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HttpHelper<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在需要的地方使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> requestIp<span class="token operator">=</span> HttpHelper<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取客户端ip" tabindex="-1"><a class="header-anchor" href="#获取客户端ip"><span>获取客户端IP</span></a></h3><h4 id="客户端直接访问服务器" tabindex="-1"><a class="header-anchor" href="#客户端直接访问服务器"><span>客户端直接访问服务器</span></a></h4><p>直接通过HttpContext.Connection.RemoteIpAddress获取客户端Ip <img src="`+i+`" alt="image.png" loading="lazy"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;GetClientIP&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">GetClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> ipv4 <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">MapToIPv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ipv6</span>
    <span class="token comment">// var ipv6 = HttpContext.Connection.RemoteIpAddress?.MapToIPv6()?.ToString();</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>ipv4<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端通过nginx访问服务器" tabindex="-1"><a class="header-anchor" href="#客户端通过nginx访问服务器"><span>客户端通过nginx访问服务器</span></a></h4><p><img src="`+r+`" alt="image.png" loading="lazy"> 直接通过HttpContext.Connection.RemoteIpAddress获取客户端Ip,就会是nginx的ip,需要通过Headers[&quot;X-Forwarded-For&quot;]判断</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;GetClientIP&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">GetClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ip4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;X-Forwarded-For&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>ip4<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;X-Forwarded-Proto&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>ip4<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ip4 <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">MapToIPv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>ip4<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nginx的配置 /etc/nginx/conf.d/xx.conf</p><div class="language-perl line-numbers-mode" data-ext="perl" data-title="perl"><pre class="language-perl"><code>server <span class="token punctuation">{</span>
    listen        <span class="token number">80</span><span class="token punctuation">;</span>
    server_name   example<span class="token operator">.</span>com <span class="token operator">*</span><span class="token operator">.</span>example<span class="token operator">.</span>com<span class="token punctuation">;</span>
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_pass         http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">;</span>
        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
        proxy_set_header   Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>
        proxy_set_header   Connection keep<span class="token operator">-</span>alive<span class="token punctuation">;</span>
        proxy_set_header   Host <span class="token variable">$http_host</span><span class="token punctuation">;</span> <span class="token comment">#此处官方文档使用的$host缺少端口号</span>
        proxy_cache_bypass <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>
        proxy_set_header   X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
        proxy_set_header   X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="microsoft-aspnetcore-httpoverrides-中间件" tabindex="-1"><a class="header-anchor" href="#microsoft-aspnetcore-httpoverrides-中间件"><span>Microsoft.AspNetCore.HttpOverrides 中间件</span></a></h4><p>Microsoft.AspNetCore.HttpOverrides 中间件主要用于处理反向代理服务器和负载均衡器等情况下的 HTTP 请求。以下是一些使用场景：</p><ol><li>反向代理服务器：当你的应用程序位于反向代理服务器（如 Nginx、Apache 或 IIS）之后时，反向代理服务器会接收客户端请求，并将请求转发给应用程序。在这种情况下，反向代理服务器可能会修改请求头部，包括客户端 IP 地址和协议信息。通过启用 HttpOverrides 中间件并配置适当的选项，你可以获得客户端的真实 IP 地址和协议信息。</li><li>负载均衡器：如果你的应用程序在负载均衡器的后面运行，负载均衡器可能会传递客户端请求给多个实例。为了获取准确的客户端 IP 地址，你可以使用 HttpOverrides 中间件来识别 X-Forwarded-For 头部字段，并更新 HttpContext.Connection.RemoteIpAddress 属性。</li><li>SSL/TLS 终止器：当 SSL/TLS 终止器（如负载均衡器或反向代理服务器）接收到加密的 HTTPS 请求并解密后，它会将请求转发给应用程序时，应用程序可能无法正确获取请求的协议信息。通过配置 HttpOverrides 中间件，你可以更新 HttpContext.Request.Protocol 属性，以便应用程序知道请求是通过 HTTPS 还是 HTTP 发送的。</li></ol><p>以下是使用 Microsoft.AspNetCore.HttpOverrides 中间件的示例代码： 首先，确保在启动类的 ConfigureServices 方法中添加以下代码以启用 HttpOverrides 服务：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>HttpOverrides<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 其他配置项...</span>

    services<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Configure</span><span class="token generic class-name"><span class="token operator">&lt;</span>ForwardedHeadersOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 配置要处理的转发头部</span>
        options<span class="token punctuation">.</span>ForwardedHeaders <span class="token operator">=</span> ForwardedHeaders<span class="token punctuation">.</span>XForwardedFor <span class="token operator">|</span> ForwardedHeaders<span class="token punctuation">.</span>XForwardedProto<span class="token punctuation">;</span>
        <span class="token comment">// 配置受信任的代理服务器 IP 地址或 IP 范围</span>
        options<span class="token punctuation">.</span>KnownProxies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置是否要使用逗号分隔的多个 IP 地址作为客户端 IP 地址</span>
        options<span class="token punctuation">.</span>ForwardedForHeaderName <span class="token operator">=</span> <span class="token string">&quot;X-Forwarded-For&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置代理服务器发送的原始协议头部字段</span>
        options<span class="token punctuation">.</span>ForwardedProtoHeaderName <span class="token operator">=</span> <span class="token string">&quot;X-Forwarded-Proto&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 其他服务配置...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在 Configure 方法中将 HttpOverrides 中间件添加到请求处理管道中：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configure</span><span class="token punctuation">(</span>IApplicationBuilder app<span class="token punctuation">,</span> IWebHostEnvironment env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 其他中间件配置...</span>
    app<span class="token punctuation">.</span><span class="token function">UseForwardedHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 其他中间件配置...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，HttpOverrides 中间件将根据设置处理传入的转发头部，并更新 HttpContext.Connection.RemoteIpAddress 和 HttpContext.Request.Protocol 属性。这样，你就可以通过 HttpContext 获取客户端的真实 IP 地址和使用的协议信息。</p><h3 id="获取浏览器信息" tabindex="-1"><a class="header-anchor" href="#获取浏览器信息"><span>获取浏览器信息</span></a></h3>`,40),g={href:"https://github.com/kshyju/BrowserDetector",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBrowserDetector</span> browserDetector<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span><span class="token class-name">IBrowserDetector</span> browserDetector<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>browserDetector <span class="token operator">=</span> browserDetector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> browser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>browserDetector<span class="token punctuation">.</span>Browser<span class="token punctuation">;</span>
        <span class="token comment">// Use browser object as needed.</span>

        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取请求头" tabindex="-1"><a class="header-anchor" href="#获取请求头"><span>获取请求头</span></a></h3><p>StringValues 简介https://andrewlock.net/a-brief-look-at-stringvalues/</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,4),f={href:"https://mp.weixin.qq.com/s/Yn3QE2Y8gZPCaFf40KSXDg",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"ASP.NET Core",-1),C={href:"https://www.cnblogs.com/lgxlsm/p/17523778.html",target:"_blank",rel:"noopener noreferrer"};function w(H,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,k,v,m,n("p",null,[s("文档："),n("a",b,[s("https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread"),t(a)])]),h,n("p",null,[s("可以使用该仓库（"),n("a",g,[s("https://github.com/kshyju/BrowserDetector"),t(a)]),s("）的包Shyjus.BrowserDetector")]),x,n("p",null,[n("a",f,[s("https://mp.weixin.qq.com/s/Yn3QE2Y8gZPCaFf40KSXDg"),t(a)]),s("：NET问答: 如何在 "),y,s("中访问 HttpContext ? "),n("a",C,[s("https://www.cnblogs.com/lgxlsm/p/17523778.html"),t(a)]),s(" | asp.net core如何获取客户端IP地址 - 广州大雄 - 博客园")])])}const A=p(u,[["render",w],["__file","httpcontext.html.vue"]]),P=JSON.parse('{"path":"/dotnet/api/controllerApi/httpcontext.html","title":"HttpContext","lang":"zh-CN","frontmatter":{"title":"HttpContext","lang":"zh-CN","date":"2023-10-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"httpcontext","slug":"iiazx2","docsId":"29808586","description":"概述 HttpContext 封装了有关个别 HTTP 请求和响应的所有信息。 收到 HTTP 请求时，HttpContext 实例会进行初始化。 注意事项 HttpContext 不是线程安全型。 在处理请求之外读取或写入 HttpContext 的属性可能会导致 NullReferenceException 文档：https://learn.mic...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/httpcontext.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"HttpContext"}],["meta",{"property":"og:description","content":"概述 HttpContext 封装了有关个别 HTTP 请求和响应的所有信息。 收到 HTTP 请求时，HttpContext 实例会进行初始化。 注意事项 HttpContext 不是线程安全型。 在处理请求之外读取或写入 HttpContext 的属性可能会导致 NullReferenceException 文档：https://learn.mic..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1691289353140-7fc5da1d-304e-4ebe-81a2-1b8a77aca99f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HttpContext\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1691289353140-7fc5da1d-304e-4ebe-81a2-1b8a77aca99f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1691289353203-ba094c04-d18a-4510-8ccc-b522b1dbc9f9.png\\"],\\"datePublished\\":\\"2023-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"常用操作","slug":"常用操作","link":"#常用操作","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"获取HttpContext的方法","slug":"获取httpcontext的方法","link":"#获取httpcontext的方法","children":[{"level":4,"title":"ControllerBase派生类","slug":"controllerbase派生类","link":"#controllerbase派生类","children":[]},{"level":4,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]}]},{"level":3,"title":"获取客户端IP","slug":"获取客户端ip","link":"#获取客户端ip","children":[{"level":4,"title":"客户端直接访问服务器","slug":"客户端直接访问服务器","link":"#客户端直接访问服务器","children":[]},{"level":4,"title":"客户端通过nginx访问服务器","slug":"客户端通过nginx访问服务器","link":"#客户端通过nginx访问服务器","children":[]},{"level":4,"title":"Microsoft.AspNetCore.HttpOverrides 中间件","slug":"microsoft-aspnetcore-httpoverrides-中间件","link":"#microsoft-aspnetcore-httpoverrides-中间件","children":[]}]},{"level":3,"title":"获取浏览器信息","slug":"获取浏览器信息","link":"#获取浏览器信息","children":[]},{"level":3,"title":"获取请求头","slug":"获取请求头","link":"#获取请求头","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.42,"words":1326},"filePathRelative":"dotnet/api/controllerApi/httpcontext.md","localizedDate":"2023年10月6日","excerpt":"<h2>概述</h2>\\n<p>HttpContext 封装了有关个别 HTTP 请求和响应的所有信息。 收到 HTTP 请求时，HttpContext 实例会进行初始化。</p>\\n<h2>注意事项</h2>\\n<p>HttpContext 不是线程安全型。 在处理请求之外读取或写入 HttpContext 的属性可能会导致 NullReferenceException</p>\\n<p>文档：<a href=\\"https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread</a></p>","autoDesc":true}');export{A as comp,P as data};
