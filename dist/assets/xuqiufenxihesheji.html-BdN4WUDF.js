import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as i,o as n}from"./app-B3EhLA94.js";const o={};function p(a,e){return n(),r("div",null,e[0]||(e[0]=[i('<h2 id="需求设计" tabindex="-1"><a class="header-anchor" href="#需求设计"><span>需求设计</span></a></h2><p>用户用例：模拟用户如何使用我们的产品，描述用户在一个特定的应用场景里面的一个完整的业务操作流程。</p><p>1.合理地将功能划分到不同的模块。<br> 合理划分代码可以实现代码的高内聚、低耦合，把类与类之间的交互简单清洗，代表整体结构一目了然，那么代码的质量就不会差到哪里去。</p><p>2.设计模块与模块之间的交互关系。<br> 通过同步接口调用或者通过消息中间件异步调用。</p><p>3.设计模块的接口、数据库、业务模型</p><p>为什么系统开发一般分为三层：Controller层、Service层、Repository层<br> 1.分层可以起到代码复用的作用，可能同一个Repository会被多个Service来调用。</p><p>2.分层能起到隔离变化的作用。<br> 分层体现了一种抽象与封装的设计思想。每个层之间基于接口进行依赖，然后高层不关心底层的使用方式，替换底层也好替换。</p><p>3.分层能起到隔离关注点的作用<br> Repository只关注数据的读写。Service只关注业务逻辑，不关注数据来源。Controller层只关注与外界打交道，数据校验、封装、格式转换等操作，并不关心业务逻辑。</p><p>4.分层能提高代码可测试性<br> 单元测试更方便了。</p><p>5.分层能应对系统的复杂性<br> 当所有代码都放到一个类中，那么这个类的代码就会因为需求迭代而无限膨胀。所以就需要进行拆分。水平方向基于业务来做拆分就是模块化。垂直方向基于流程来做拆分就是这里说的分层。</p><p>Bo：ViewObject<br> Vo：Business Object<br> Entity：Entity实体</p><p>如果觉得重复编写了，可以考虑通过继承的方式来减少重复代码。</p><h2 id="框架设计" tabindex="-1"><a class="header-anchor" href="#框架设计"><span>框架设计</span></a></h2><p>框架的易用性、性能、扩展性、容错性、通用性等</p><p>对于复杂框架的设计，很多人往往觉得无从下手。今天我们分享了几个小技巧，其中包括： 画产品线框图、聚焦简单应用场景、设计实现最小原型、画系统设计图等。这些方法的目的 都是为了让问题简化、具体、明确，提供一个迭代设计开发的基础，逐步推进。</p>',15)]))}const l=t(o,[["render",p],["__file","xuqiufenxihesheji.html.vue"]]),h=JSON.parse('{"path":"/softwareDesign/xuqiufenxihesheji.html","title":"需求分析和设计","lang":"zh-CN","frontmatter":{"title":"需求分析和设计","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"xuqiufenxihesheji","slug":"xg70gm","docsId":"73889021","description":"需求设计 用户用例：模拟用户如何使用我们的产品，描述用户在一个特定的应用场景里面的一个完整的业务操作流程。 1.合理地将功能划分到不同的模块。 合理划分代码可以实现代码的高内聚、低耦合，把类与类之间的交互简单清洗，代表整体结构一目了然，那么代码的质量就不会差到哪里去。 2.设计模块与模块之间的交互关系。 通过同步接口调用或者通过消息中间件异步调用。 3...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/xuqiufenxihesheji.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"需求分析和设计"}],["meta",{"property":"og:description","content":"需求设计 用户用例：模拟用户如何使用我们的产品，描述用户在一个特定的应用场景里面的一个完整的业务操作流程。 1.合理地将功能划分到不同的模块。 合理划分代码可以实现代码的高内聚、低耦合，把类与类之间的交互简单清洗，代表整体结构一目了然，那么代码的质量就不会差到哪里去。 2.设计模块与模块之间的交互关系。 通过同步接口调用或者通过消息中间件异步调用。 3..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-01T14:38:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T14:38:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"需求分析和设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-01T14:38:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求设计","slug":"需求设计","link":"#需求设计","children":[]},{"level":2,"title":"框架设计","slug":"框架设计","link":"#框架设计","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1704119909000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"softwareDesign/xuqiufenxihesheji.md","localizedDate":"2023年9月5日","excerpt":"<h2>需求设计</h2>\\n<p>用户用例：模拟用户如何使用我们的产品，描述用户在一个特定的应用场景里面的一个完整的业务操作流程。</p>\\n<p>1.合理地将功能划分到不同的模块。<br>\\n合理划分代码可以实现代码的高内聚、低耦合，把类与类之间的交互简单清洗，代表整体结构一目了然，那么代码的质量就不会差到哪里去。</p>\\n<p>2.设计模块与模块之间的交互关系。<br>\\n通过同步接口调用或者通过消息中间件异步调用。</p>\\n<p>3.设计模块的接口、数据库、业务模型</p>\\n<p>为什么系统开发一般分为三层：Controller层、Service层、Repository层<br>\\n1.分层可以起到代码复用的作用，可能同一个Repository会被多个Service来调用。</p>","autoDesc":true}');export{l as comp,h as data};
