import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as l,c as p,a as t,b as e,d as s,e as n}from"./app-vSdX8vi3.js";const i={},c=n('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Entity Framework Core 可通过名为数据库提供程序的插件库访问许多不同的数据库。</p><p>网址：https://learn.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli</p><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h2><p>引用组件：Pomelo.EntityFrameworkCore.MySql 使用方法：.UseInMemoryDatabase(databaseName) 连接字符串：Server=192.168.100.104;database=azrngblog;uid=root;pwd=123456;SslMode=None; Server=localhost;Database=test;Port=3306;charset=utf8;uid=root;pwd=123456;</p><h2 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql"><span>PostgreSQL</span></a></h2><h3 id="npgsql" tabindex="-1"><a class="header-anchor" href="#npgsql"><span>Npgsql</span></a></h3><h4 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h4>',8),d={href:"https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/",target:"_blank",rel:"noopener noreferrer"},u=t("h4",{id:"连接字符串",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#连接字符串"},[t("span",null,"连接字符串")])],-1),h={href:"https://www.npgsql.org/doc/connection-string-parameters.html",target:"_blank",rel:"noopener noreferrer"},m=n(`<p>连接字符串的形式为keyword1=value;keyword2 =价值;和是不区分大小写的。包含特殊字符(例如分号)的值可以用双引号括起来。</p><h5 id="标准" tabindex="-1"><a class="header-anchor" href="#标准"><span>标准</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Host<span class="token operator">=</span>localhost<span class="token punctuation">;</span>port<span class="token operator">=</span><span class="token number">5432</span><span class="token punctuation">;</span>Username<span class="token operator">=</span>postgres<span class="token punctuation">;</span>Password<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span>Database<span class="token operator">=</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Host</td><td>指定运行PostgreSQL的主机名(可选端口)。可以指定多个主机，</td><td>必填</td></tr><tr><td>Port</td><td>PostgreSQL服务器的TCP端口。</td><td>5432</td></tr><tr><td>Database</td><td>要连接的数据库</td><td></td></tr><tr><td>Username</td><td>连接的用户名，如果是IntegratedSecurity则不需要</td><td></td></tr><tr><td>Password</td><td>连接的密码，如果是IntegratedSecurity则不需要</td><td></td></tr><tr><td>Passfile</td><td>PostgreSQL密码文件(PGPASSFILE)的路径。</td><td></td></tr></tbody></table><h5 id="连接池" tabindex="-1"><a class="header-anchor" href="#连接池"><span>连接池</span></a></h5><table><thead><tr><th style="text-align:left;">Parameter</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td style="text-align:left;">Pooling</td><td>是否应使用连接池</td><td>true</td></tr><tr><td style="text-align:left;">Minimum Pool Size</td><td>最小连接池大小</td><td>0</td></tr><tr><td style="text-align:left;">Maximum Pool Size</td><td>最大连接池大小</td><td>自 3.1 以来为 100 个，以前为 20 个</td></tr><tr><td style="text-align:left;">Connection Idle Lifetime(连接空闲生存期)</td><td>如果所有连接计数超过 <code>Minimum Pool Size</code> ，则在关闭池中的空闲连接之前等待的时间（以秒为单位）。在 3.1 中引入。</td><td>300</td></tr><tr><td style="text-align:left;">Connection Pruning Interval(连接修剪间隔)</td><td>池在尝试修剪超出空闲生存期的空闲连接之前等待了多少秒（请参见 <code>Connection Idle Lifetime</code> ）。在 3.1 中引入。</td><td>10</td></tr><tr><td style="text-align:left;">ConnectionLifetime(连接生存期)</td><td>连接的总最大生存期（以秒为单位）。超过此值的连接将被销毁，而不是从池中返回。这在群集配置中非常有用，可以在正在运行的服务器和刚刚联机的服务器之间强制进行负载平衡。</td><td>0 (disabled)</td></tr></tbody></table><h5 id="超时" tabindex="-1"><a class="header-anchor" href="#超时"><span>超时</span></a></h5><table><thead><tr><th style="text-align:left;">Parameter</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td style="text-align:left;">Timeout(连接超时时间)</td><td>在终止尝试并生成错误之前尝试建立连接时等待的时间（以秒为单位）。</td><td>15</td></tr><tr><td style="text-align:left;">Command Timeout(命令执行超市时间)</td><td>在尝试执行命令并终止尝试并生成错误之前等待的时间（以秒为单位）。设置为零表示无穷大</td><td>30</td></tr><tr><td style="text-align:left;">Cancellation Timeout(取消超时)</td><td>在尝试读取超时或已取消查询的取消请求的响应时等待的时间（以毫秒为单位），然后终止尝试并生成错误。-1 跳过等待，0 表示无限等待。在 5.0 中引入。</td><td>2000</td></tr><tr><td style="text-align:left;">Keepalive</td><td>Npgsql 发送 keepalive 查询之前连接处于非活动状态的秒数。</td><td>0 (disabled)</td></tr><tr><td style="text-align:left;">Tcp Keepalive(保持活动状态)</td><td>如果未指定覆盖，是否将 TCP keepalive 与系统默认值一起使用</td><td>false</td></tr><tr><td style="text-align:left;">Tcp Keepalive Time(保持活动时间)</td><td>发送 TCP keepalive 查询之前连接处于非活动状态的秒数。不建议使用此选项，如果可能，请改用 KeepAlive。</td><td>0 (disabled)</td></tr><tr><td style="text-align:left;">Tcp Keepalive Interval(Tcp Keepalive 间隔)</td><td>如果未收到确认，则发送连续保持活动数据包之间的间隔（以秒为单位）。 <code>Tcp KeepAlive Time</code> 也必须为非零。</td><td>value of Tcp Keepalive Time</td></tr></tbody></table><h5 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性"><span>兼容性</span></a></h5><table><thead><tr><th style="text-align:left;">参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:left;">Server Compatibility Mode(服务器兼容模式)</td><td>特殊pgsql服务器类型的兼容模式，目前支持“Redshift”和“NoTypeLoading”，它将绕过 PostgreSQL 目录表中的正常类型加载机制，并支持基本类型的硬编码列表。</td><td>None</td></tr></tbody></table><p>当你遇到连接一个数据库，<code>open</code>的时候超时，且将<code>Timeout</code>时间设置久一点的时候，又可以正常连接，那么这个时候就可以考虑将该配置设置为<code>Server Compatibility Mode=NoTypeLoading</code>试试。</p><h2 id="sql-server" tabindex="-1"><a class="header-anchor" href="#sql-server"><span>SQL Server</span></a></h2>`,12),k={href:"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer/",target:"_blank",rel:"noopener noreferrer"},g=n(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 默认</span>
<span class="token assign-left variable">server</span><span class="token operator">=</span>localhost<span class="token punctuation">;</span><span class="token assign-left variable">uid</span><span class="token operator">=</span>sa<span class="token punctuation">;</span><span class="token assign-left variable">pwd</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token assign-left variable">database</span><span class="token operator">=</span>Christ

<span class="token comment"># 指定实例名</span>
<span class="token assign-left variable">Server</span><span class="token operator">=</span>ip<span class="token punctuation">\\</span>instanceName,portNumber<span class="token punctuation">;</span><span class="token assign-left variable">Database</span><span class="token operator">=</span>myDataBase<span class="token punctuation">;</span>User <span class="token assign-left variable">Id</span><span class="token operator">=</span>myUsername<span class="token punctuation">;</span><span class="token assign-left variable">Password</span><span class="token operator">=</span>myPassword<span class="token punctuation">;</span>

<span class="token comment"># 自动信任服务证书 否则提示错误：provider: SSL Provider, error: 0 - 证书链是由不受信任的颁发机构颁发的</span>
<span class="token assign-left variable">Server</span><span class="token operator">=</span>ip<span class="token punctuation">\\</span>instanceName,portNumber<span class="token punctuation">;</span><span class="token assign-left variable">Database</span><span class="token operator">=</span>myDataBase<span class="token punctuation">;</span>User <span class="token assign-left variable">Id</span><span class="token operator">=</span>myUsername<span class="token punctuation">;</span><span class="token assign-left variable">Password</span><span class="token operator">=</span>myPassword<span class="token punctuation">;</span><span class="token assign-left variable">trustServerCertificate</span><span class="token operator">=</span>true<span class="token punctuation">;</span>

<span class="token comment"># windows身份</span>
<span class="token assign-left variable">Server</span><span class="token operator">=</span>localhost<span class="token punctuation">;</span><span class="token assign-left variable">Database</span><span class="token operator">=</span>EFDB01<span class="token punctuation">;</span><span class="token assign-left variable">Trusted_Connection</span><span class="token operator">=</span>True<span class="token punctuation">;</span>
<span class="token comment"># 手动设置连接池的最大(小)数量：Max Pool Size=100;Min Pool Size=5;  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的连接问题</p><p>https://www.cnblogs.com/printertool/p/14084385.html</p><p>https://blog.csdn.net/u010476739/article/details/116740485</p><h2 id="oracle" tabindex="-1"><a class="header-anchor" href="#oracle"><span>Oracle</span></a></h2>`,5),b={href:"https://www.nuget.org/packages/Npgsql.EntityFrameworkCore.PostgreSQL/",target:"_blank",rel:"noopener noreferrer"},v=n(`<div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- service name</span>
<span class="token keyword">Data</span> Source<span class="token operator">=</span><span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>TCP<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span>{<span class="token number">0</span>}<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT<span class="token operator">=</span>{<span class="token number">1</span>}<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CONNECT_DATA<span class="token operator">=</span><span class="token punctuation">(</span>SERVICE_NAME <span class="token operator">=</span> dbNameValue <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Persist Security Info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">;</span><span class="token keyword">User</span> ID<span class="token operator">=</span>{<span class="token number">3</span>}<span class="token punctuation">;</span>Password<span class="token operator">=</span>{<span class="token number">4</span>}<span class="token punctuation">;</span>

<span class="token comment">-- sid</span>
<span class="token keyword">Data</span> Source<span class="token operator">=</span><span class="token punctuation">(</span>DESCRIPTION<span class="token operator">=</span><span class="token punctuation">(</span>ADDRESS<span class="token operator">=</span><span class="token punctuation">(</span>PROTOCOL<span class="token operator">=</span>TCP<span class="token punctuation">)</span><span class="token punctuation">(</span>HOST<span class="token operator">=</span>{<span class="token number">0</span>}<span class="token punctuation">)</span><span class="token punctuation">(</span>PORT<span class="token operator">=</span>{<span class="token number">1</span>}<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>CONNECT_DATA<span class="token operator">=</span><span class="token punctuation">(</span>SID <span class="token operator">=</span> sidValue <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Persist Security Info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">;</span><span class="token keyword">User</span> ID<span class="token operator">=</span>{<span class="token number">3</span>}<span class="token punctuation">;</span>Password<span class="token operator">=</span>{<span class="token number">4</span>}<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sqlite" tabindex="-1"><a class="header-anchor" href="#sqlite"><span>SQLite</span></a></h2>`,2),y={href:"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite/",target:"_blank",rel:"noopener noreferrer"},f=t("h2",{id:"inmemory",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#inmemory"},[t("span",null,"InMemory")])],-1),S={href:"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.InMemory/",target:"_blank",rel:"noopener noreferrer"};function w(P,_){const a=r("ExternalLinkIcon");return l(),p("div",null,[c,t("p",null,[e("引用组件："),t("a",d,[e("Npgsql.EntityFrameworkCore.PostgreSQL"),s(a)]),e(" 使用方法：.UseNpgsql(connectionString) 连接字符串：Host=localhost;port=5432;Username=postgres;Password=123456;Database=test")]),u,t("blockquote",null,[t("p",null,[e("资料来源："),t("a",h,[e("https://www.npgsql.org/doc/connection-string-parameters.html"),s(a)])])]),m,t("p",null,[e("引用组件："),t("a",k,[e("Microsoft.EntityFrameworkCore.SqlServer"),s(a)]),e(" 使用方法：.UseSqlServer(connectionString)")]),g,t("p",null,[e("引用组件："),t("a",b,[e("Npgsql.EntityFrameworkCore.PostgreSQL"),s(a)]),e(" 使用方法：.UseOracle(connectionString)")]),v,t("p",null,[e("引用组件："),t("a",y,[e("Microsoft.EntityFrameworkCore.Sqlite"),s(a)]),e(" 使用方法：.UseInMemoryDatabase(databaseName) 连接字符串：Data Source=Db/Test.db")]),f,t("p",null,[e("引用组件："),t("a",S,[e("Microsoft.EntityFrameworkCore.InMemory"),s(a)]),e(" 使用方法：.UseInMemoryDatabase(databaseName)")])])}const T=o(i,[["render",w],["__file","shujukuqudong.html.vue"]]),x=JSON.parse('{"path":"/orm/efcore/jichuzhishi/shujukuqudong.html","title":"数据库驱动","lang":"zh-CN","frontmatter":{"title":"数据库驱动","lang":"zh-CN","date":"2022-11-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shujukuqudong","slug":"nexwzo","docsId":"89768178","description":"概述 Entity Framework Core 可通过名为数据库提供程序的插件库访问许多不同的数据库。 网址：https://learn.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli MySQL 引用组件：Pomelo.EntityFrameworkCore.MySql 使用方...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/shujukuqudong.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据库驱动"}],["meta",{"property":"og:description","content":"概述 Entity Framework Core 可通过名为数据库提供程序的插件库访问许多不同的数据库。 网址：https://learn.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli MySQL 引用组件：Pomelo.EntityFrameworkCore.MySql 使用方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-23T13:39:58.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-23T13:39:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库驱动\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-23T13:39:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"MySQL","slug":"mysql","link":"#mysql","children":[]},{"level":2,"title":"PostgreSQL","slug":"postgresql","link":"#postgresql","children":[{"level":3,"title":"Npgsql","slug":"npgsql","link":"#npgsql","children":[{"level":4,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":4,"title":"连接字符串","slug":"连接字符串","link":"#连接字符串","children":[{"level":5,"title":"标准","slug":"标准","link":"#标准","children":[]},{"level":5,"title":"连接池","slug":"连接池","link":"#连接池","children":[]},{"level":5,"title":"超时","slug":"超时","link":"#超时","children":[]},{"level":5,"title":"兼容性","slug":"兼容性","link":"#兼容性","children":[]}]}]}]},{"level":2,"title":"SQL Server","slug":"sql-server","link":"#sql-server","children":[]},{"level":2,"title":"Oracle","slug":"oracle","link":"#oracle","children":[]},{"level":2,"title":"SQLite","slug":"sqlite","link":"#sqlite","children":[]},{"level":2,"title":"InMemory","slug":"inmemory","link":"#inmemory","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1713879598000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":4},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":4.02,"words":1207},"filePathRelative":"orm/efcore/jichuzhishi/shujukuqudong.md","localizedDate":"2022年11月11日","excerpt":"<h2>概述</h2>\\n<p>Entity Framework Core 可通过名为数据库提供程序的插件库访问许多不同的数据库。</p>\\n<p>网址：https://learn.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli</p>\\n<h2>MySQL</h2>\\n<p>引用组件：Pomelo.EntityFrameworkCore.MySql\\n使用方法：.UseInMemoryDatabase(databaseName)\\n连接字符串：Server=192.168.100.104;database=azrngblog;uid=root;pwd=123456;SslMode=None;\\nServer=localhost;Database=test;Port=3306;charset=utf8;uid=root;pwd=123456;</p>","autoDesc":true}');export{T as comp,x as data};
