import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-Bfb6-vFH.js";const e={},p=t(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>因为我们操作数据都是要开启事务的，那么我们每次都写有点麻烦，不如直接使用一个Action过滤器来实现AOP自动开启事务。</p><p>关于TransactionScope的简单说明： 当一段代码使用EFCore进行数据操作的代码放到TransactionScope声明的范围中的时候，这段代码会自动被标记为“支持事务”。 TransactionScope实现了一个IDisposable接口，如果一个TransactionScope的对象没有调用Complete()就执行了Dispose()方法，则事务会被回滚，否则事务会就被提交。并且TransactionScope还支持嵌套式事务。</p><blockquote><p>在. NetCore中的TransactionScope不像.NetFramework一样有MSDTC(只有在windows环境才有这个东西)分布式事务提升的问题，所以需要使用到分布式事务的场景需要自行处理。</p></blockquote><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 不启用自动事务的特性</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisabledTranAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自动事务处理</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TranAttributeFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncActionFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnActionExecutionAsync</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ActionExecutionDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ActionDescriptor <span class="token keyword">is</span> <span class="token class-name">ControllerActionDescriptor</span> desc<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">bool</span></span> hasDisabledTranAttribute <span class="token operator">=</span> desc<span class="token punctuation">.</span>MethodInfo<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DisabledTranAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDisabledTranAttribute<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> tran <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TransactionScope</span><span class="token punctuation">(</span>TransactionScopeAsyncFlowOption<span class="token punctuation">.</span>Enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Exception<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tran<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当某些接口不需要开启事务，那么就标注特性就好了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 患者吃饭请求类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>request<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DisabledTran</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">AddPatientEat</span><span class="token punctuation">(</span><span class="token class-name">AddPatientEatRequest</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// xxx</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>利用该过滤器实现自动开启并且处理事务。</p>`,10),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","guolvqishixian-zidongshiwuchuli.html.vue"]]),k=JSON.parse('{"path":"/dotnet/base/pipeline/filter/guolvqishixian-zidongshiwuchuli.html","title":"过滤器实现-自动事务处理","lang":"zh-CN","frontmatter":{"title":"过滤器实现-自动事务处理","lang":"zh-CN","date":"2022-08-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guolvqishixian-zidongshiwuchuli","slug":"fl6hp3","docsId":"89466329","description":"目的 因为我们操作数据都是要开启事务的，那么我们每次都写有点麻烦，不如直接使用一个Action过滤器来实现AOP自动开启事务。 关于TransactionScope的简单说明： 当一段代码使用EFCore进行数据操作的代码放到TransactionScope声明的范围中的时候，这段代码会自动被标记为“支持事务”。 TransactionScope实现了...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/filter/guolvqishixian-zidongshiwuchuli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"过滤器实现-自动事务处理"}],["meta",{"property":"og:description","content":"目的 因为我们操作数据都是要开启事务的，那么我们每次都写有点麻烦，不如直接使用一个Action过滤器来实现AOP自动开启事务。 关于TransactionScope的简单说明： 当一段代码使用EFCore进行数据操作的代码放到TransactionScope声明的范围中的时候，这段代码会自动被标记为“支持事务”。 TransactionScope实现了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过滤器实现-自动事务处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.34,"words":401},"filePathRelative":"dotnet/base/pipeline/filter/guolvqishixian-zidongshiwuchuli.md","localizedDate":"2022年8月14日","excerpt":"<h2>目的</h2>\\n<p>因为我们操作数据都是要开启事务的，那么我们每次都写有点麻烦，不如直接使用一个Action过滤器来实现AOP自动开启事务。</p>\\n<p>关于TransactionScope的简单说明：\\n当一段代码使用EFCore进行数据操作的代码放到TransactionScope声明的范围中的时候，这段代码会自动被标记为“支持事务”。\\nTransactionScope实现了一个IDisposable接口，如果一个TransactionScope的对象没有调用Complete()就执行了Dispose()方法，则事务会被回滚，否则事务会就被提交。并且TransactionScope还支持嵌套式事务。</p>","autoDesc":true}');export{d as comp,k as data};
