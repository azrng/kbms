import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as p,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const r={},c=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u=n("p",null,"一种数据格式",-1),d={href:"https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft?pivots=dotnet-7-0",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"在线工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在线工具"},[n("span",null,"在线工具")])],-1),v={href:"http://jsonpath.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.jsonschemavalidator.net/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://jsonformatter.org/json-to-jsonschema",target:"_blank",rel:"noopener noreferrer"},h={href:"https://tooltt.com/json2schema/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://jsoncrack.com/editor",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="linq-to-json" tabindex="-1"><a class="header-anchor" href="#linq-to-json"><span>Linq to JSON</span></a></h2><p>Linq to JSON是用来操作JSON对象的.可以用于快速查询,修改和创建JSON对象.当JSON对象内容比较复杂,而我们仅仅需要其中的一小部分数据时,可以考虑使用Linq to JSON来读取和修改部分的数据而非反序列化全部.</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>JObject</td><td>用于操作JSON对象</td></tr><tr><td>JArray</td><td>用语操作JSON数组</td></tr><tr><td>JValue</td><td>表示数组中的值</td></tr><tr><td>JProperty</td><td>表示对象中的属性,以&quot;key/value&quot;形式</td></tr><tr><td>JToken</td><td>用于存放Linq to JSON查询后的结果</td></tr></tbody></table><h2 id="_1-json表现形式" tabindex="-1"><a class="header-anchor" href="#_1-json表现形式"><span>1. JSON表现形式</span></a></h2><h3 id="_1-1-对象" tabindex="-1"><a class="header-anchor" href="#_1-1-对象"><span>1.1 对象</span></a></h3><p>例子：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var user = <span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Manas&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;1987-8-8&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-数组" tabindex="-1"><a class="header-anchor" href="#_1-2-数组"><span>1.2 数组</span></a></h3><p>例子：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var userlist = <span class="token punctuation">[</span>
       <span class="token punctuation">{</span><span class="token property">&quot;user&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Manas&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;1987-8-8&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span><span class="token property">&quot;user&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Mohapatra&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;Male&quot;</span><span class="token operator">:</span><span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;1987-7-7&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-字符串" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串"><span>1.3 字符串</span></a></h3><p>例子：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var userlist = <span class="token string">&quot;{\\&quot;ID\\&quot;:1,\\&quot;Name\\&quot;:\\&quot;Manas\\&quot;,\\&quot;Address\\&quot;:\\&quot;India\\&quot;}&quot;</span>
            JObject jo = JObject.Parse(userlist);
var joHasValues = jo.HasValues;<span class="token comment">//true   当该下面存在子项，则为true  否则为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-操作" tabindex="-1"><a class="header-anchor" href="#_2-操作"><span>2. 操作</span></a></h2><h3 id="_2-1-序列化为json" tabindex="-1"><a class="header-anchor" href="#_2-1-序列化为json"><span>2.1 序列化为json</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var userlist = <span class="token string">&quot;{\\&quot;ID\\&quot;:1,\\&quot;Name\\&quot;:\\&quot;Manas\\&quot;,\\&quot;Address\\&quot;:\\&quot;India\\&quot;}&quot;</span>;
JObject jo= JObject.Parse(userlist);<span class="token comment">//转换成jobject格式</span>
JObject jo = (JObject)JsonConvert.DeserializeObject(userlist);<span class="token comment">//转换成jobject格式</span>

dynamic f = new <span class="token punctuation">{</span> id =<span class="token number">1</span><span class="token punctuation">,</span> b = <span class="token number">2</span> <span class="token punctuation">}</span>;<span class="token comment">//{ id = 1, b = 2 }</span>
string asa = JsonConvert.SerializeObject(f);<span class="token comment">//&quot;{\\&quot;id\\&quot;:1,\\&quot;b\\&quot;:2}&quot;</span>
JObject v = JsonConvert.DeserializeObject(asa) as JObject;<span class="token comment">//{ &quot;id&quot;: 1, &quot;b&quot;: 2}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-json读取" tabindex="-1"><a class="header-anchor" href="#_2-2-json读取"><span>2.2 Json读取</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">//简单读取</span>
var userlist = <span class="token string">&quot;{\\&quot;ID\\&quot;:1,\\&quot;Name\\&quot;:\\&quot;Manas\\&quot;,\\&quot;Address\\&quot;:\\&quot;India\\&quot;}&quot;</span>
						<span class="token comment">//转json</span>
            JObject jo = JObject.Parse(userlist);
var joHasValues = jo.HasValues;<span class="token comment">//true   当该下面存在子项，则为true  否则为false</span>
var id = jo<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span>.ToString();
var idHasValues = jo<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span>.HasValues;<span class="token comment">//false</span>

<span class="token comment">//SelectToken读取</span>
var userlist = <span class="token string">&quot;{\\&quot;ID\\&quot;:1,\\&quot;Name\\&quot;:\\&quot;Manas\\&quot;,\\&quot;Address\\&quot;:\\&quot;India\\&quot;}&quot;</span>;
JObject jObj = JObject.Parse(userlist);
JToken name = jObj.SelectToken(<span class="token string">&quot;Name&quot;</span>);
Console.WriteLine(name.ToString());<span class="token comment">//Manas</span>


string strJson = <span class="token string">&quot;{\\&quot;code\\&quot;:\\&quot;\\&quot;,\\&quot;msg\\&quot;:\\&quot;成功\\&quot;,\\&quot;data\\&quot;:[{\\&quot;houses\\&quot;:[{\\&quot;bsm\\&quot;:\\&quot;2\\&quot;,\\&quot;ywh\\&quot;:\\&quot;14\\&quot;,\\&quot;slbsm\\&quot;:\\&quot;11\\&quot;},{\\&quot;bsm\\&quot;:\\&quot;2\\&quot;,\\&quot;ywh\\&quot;:\\&quot;14\\&quot;,\\&quot;slbsm\\&quot;:\\&quot;11\\&quot;}],\\&quot;housers\\&quot;:{\\&quot;xmndzs\\&quot;:\\&quot;权利表1房地产权_项目内多幢房屋信息\\&quot;,\\&quot;dzs\\&quot;:\\&quot;权利表3房地产权_独幢、层、套、间房屋信息\\&quot;},\\&quot;otheright\\&quot;:{\\&quot;easements\\&quot;:\\&quot;他项权表1地役权信息\\&quot;,\\&quot;foreNotices\\&quot;:\\&quot;他项权表2预告基信息\\&quot;,\\&quot;objections\\&quot;:\\&quot;他项权表3异议基本信息\\&quot;,\\&quot;pledges\\&quot;:\\&quot;他项权表4抵押信息\\&quot;,\\&quot;sealups\\&quot;:\\&quot;他项权表5查封信息\\&quot;},\\&quot;buscom\\&quot;:{\\&quot;acceptances\\&quot;:\\&quot;公共表1受理申请信息\\&quot;,\\&quot;archives\\&quot;:\\&quot;公共表2归档信息\\&quot;,\\&quot;certiFicates\\&quot;:\\&quot;公共表3发证信息\\&quot;,\\&quot;charges\\&quot;:\\&quot;公共表4收费信息\\&quot;,\\&quot;obligees\\&quot;:\\&quot;公共表5权利人信息\\&quot;}}]}&quot;</span>;
JObject result = (JObject)JsonConvert.DeserializeObject(strJson);
object houses1 = result<span class="token punctuation">[</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;houses&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.ToString();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-json删除" tabindex="-1"><a class="header-anchor" href="#_2-3-json删除"><span>2.3 Json删除</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var userlist = <span class="token string">&quot;{\\&quot;ID\\&quot;:1,\\&quot;Name\\&quot;:\\&quot;Manas\\&quot;,\\&quot;Address\\&quot;:\\&quot;India\\&quot;}&quot;</span>;
JObject jo= JObject.Parse(userlist);先转换成jobject格式
jo.Remove(<span class="token string">&quot;Name&quot;</span>);移除指定的内容
string json1 = JsonConvert.SerializeObject(jo);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-创建json" tabindex="-1"><a class="header-anchor" href="#_2-4-创建json"><span>2.4 创建Json</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>JArray array = new JArray();
array.Add(<span class="token string">&quot;北京&quot;</span>);
array.Add(<span class="token string">&quot;河南&quot;</span>);
<span class="token comment">//创建json对象</span>
JObject o = new JObject();
o<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> = <span class="token string">&quot;111&quot;</span>;
o<span class="token punctuation">[</span><span class="token string">&quot;数组&quot;</span><span class="token punctuation">]</span> = array;
o.Add(new JProperty(<span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span>));
o.Add(new JProperty(<span class="token string">&quot;Leader&quot;</span><span class="token punctuation">,</span> new JObject(new JProperty(<span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tom&quot;</span>)<span class="token punctuation">,</span> new JProperty(<span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span> <span class="token number">44</span>))));
string json = o.ToString();<span class="token comment">//{\\r\\n  \\&quot;ID\\&quot;: \\&quot;111\\&quot;,\\r\\n  \\&quot;数组\\&quot;: [\\r\\n    \\&quot;北京\\&quot;,\\r\\n    \\&quot;河南\\&quot;\\r\\n  ],\\r\\n  \\&quot;sex\\&quot;: \\&quot;男\\&quot;,\\r\\n  \\&quot;Leader\\&quot;: {\\r\\n    \\&quot;Name\\&quot;: \\&quot;Tom\\&quot;,\\r\\n    \\&quot;Age\\&quot;: 44\\r\\n  }\\r\\n}</span>


<span class="token comment">//创建json数组</span>
JArray arr = new JArray();
arr.Add(new JValue(<span class="token number">1</span>));
arr.Add(new JValue(<span class="token number">2</span>));
arr.Add(new JValue(<span class="token number">3</span>));
var arrJson = arr;<span class="token comment">//[1,2,3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonschema" tabindex="-1"><a class="header-anchor" href="#jsonschema"><span>JsonSchema</span></a></h2><p>想学习 JSON Schema 编写可以查看以下文档：</p>`,24),j={href:"https://json-schema.apifox.cn/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/355175938",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cnblogs.com/dotnet-diagnostic/p/17963484",target:"_blank",rel:"noopener noreferrer"},J=n("h3",{id:"验证与生成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#验证与生成"},[n("span",null,"验证与生成")])],-1),y={href:"https://www.jsonschemavalidator.net/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://jsonformatter.org/json-to-jsonschema",target:"_blank",rel:"noopener noreferrer"},S={href:"https://tooltt.com/json2schema/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://hellosean1025.github.io/json-schema-visual-editor/",target:"_blank",rel:"noopener noreferrer"},N=e(`<h3 id="非必填" tabindex="-1"><a class="header-anchor" href="#非必填"><span>非必填</span></a></h3><p>可以使用关键字 &quot;type&quot;: &quot;null&quot; 来表示一个属性为非必填属性。这意味着该属性可以被省略或设为 null 值。例如如果我们要描述一个人的信息，其中 middleName 为非必填属性，可以像下面这样编写 JSON Schema：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;$schema&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http://json-schema.org/draft-07/schema#&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Person&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;properties&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;middleName&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;required&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;firstName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，属性 middleName 定义了类型为字符串或 null 值。由于其类型不是必需的，因此它没有包含在 required 关键字数组中。这意味着，即使 middleName 属性被省略，JSON 数据也将符合上述 schema。</p><h2 id="json转其他格式" tabindex="-1"><a class="header-anchor" href="#json转其他格式"><span>Json转其他格式</span></a></h2><h3 id="json转xml" tabindex="-1"><a class="header-anchor" href="#json转xml"><span>Json转xml</span></a></h3><p>将json转xml和将xml转为json</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>string json <span class="token operator">=</span> <span class="token variable">@&quot;{
  &#39;@Id&#39;: 1,
  &#39;Email&#39;: &#39;james@example.com&#39;,
  &#39;Active&#39;: true,
  &#39;CreatedDate&#39;: &#39;2013-01-20T00:00:00Z&#39;,
  &#39;Roles&#39;: [
    &#39;User&#39;,
    &#39;Admin&#39;
  ],
  &#39;Team&#39;: {
    &#39;@Id&#39;: 2,
    &#39;Name&#39;: &#39;Software Developers&#39;,
    &#39;Description&#39;: &#39;Creators of fine software products and services.&#39;
  }
}&quot;</span><span class="token punctuation">;</span>
XNode node <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span>DeserializeXNode<span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token string">&quot;Root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>node<span class="token punctuation">.</span>ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;Root Id=&quot;1&quot;&gt;</span>
<span class="token comment">//   &lt;Email&gt;james@example.com&lt;/Email&gt;</span>
<span class="token comment">//   &lt;Active&gt;true&lt;/Active&gt;</span>
<span class="token comment">//  &lt;CreatedDate&gt;2013-01-20T00:00:00Z&lt;/CreatedDate&gt;</span>
<span class="token comment">//   &lt;Roles&gt;User&lt;/Roles&gt;</span>
<span class="token comment">//   &lt;Roles&gt;Admin&lt;/Roles&gt;</span>
<span class="token comment">//   &lt;Team Id=&quot;2&quot;&gt;</span>
<span class="token comment">//     &lt;Name&gt;Software Developers&lt;/Name&gt;</span>
<span class="token comment">//     &lt;Description&gt;Creators of fine software products and services.&lt;/Description&gt;</span>
<span class="token comment">//   &lt;/Team&gt;</span>
<span class="token comment">// &lt;/Root&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bson-序列化和反序列化bson" tabindex="-1"><a class="header-anchor" href="#bson-序列化和反序列化bson"><span>BSON-序列化和反序列化BSON</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class Event
{
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> <span class="token keyword">DateTime</span> StartDate { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
}
Event e <span class="token operator">=</span> new Event
{
    Name <span class="token operator">=</span> <span class="token string">&quot;Movie Premiere&quot;</span><span class="token punctuation">,</span>
    StartDate <span class="token operator">=</span> new <span class="token keyword">DateTime</span><span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DateTimeKind<span class="token punctuation">.</span>Utc<span class="token punctuation">)</span>
}<span class="token punctuation">;</span>
MemoryStream ms <span class="token operator">=</span> new MemoryStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span>BsonWriter writer <span class="token operator">=</span> new BsonWriter<span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span>
{
    JsonSerializer serializer <span class="token operator">=</span> new JsonSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    serializer<span class="token punctuation">.</span>Serialize<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
}
string <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token keyword">Convert</span><span class="token punctuation">.</span>ToBase64String<span class="token punctuation">(</span>ms<span class="token punctuation">.</span>ToArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MQAAAAJOYW1lAA8AAABNb3ZpZSBQcmVtaWVyZQAJU3RhcnREYXRlAED982M8AQAAAA==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,11),O={href:"https://mp.weixin.qq.com/s/1QZnP_z3HI8EL_ENsM19Bw",target:"_blank",rel:"noopener noreferrer"};function A(T,z){const a=l("ExternalLinkIcon");return i(),p("div",null,[c,u,n("p",null,[s("将 Newtonsoft.Json 与 System.Text.Json 比较，并迁移到 System.Text.Json："),n("a",d,[s("文章"),t(a)])]),m,n("p",null,[s("jsonPath在线测试网站："),n("a",v,[s("http://jsonpath.com/"),t(a)]),s(" jsonSchema在线验证网站："),n("a",q,[s("https://www.jsonschemavalidator.net/"),t(a)]),s(" jsonSchema在线生成网站："),n("a",k,[s("https://jsonformatter.org/json-to-jsonschema"),t(a)]),s(" 国内版本："),n("a",h,[s("https://tooltt.com/json2schema/"),t(a)])]),n("p",null,[s("json在线编辑美化展示网站："),n("a",b,[s("https://jsoncrack.com/editor"),t(a)])]),g,n("ul",null,[n("li",null,[n("a",j,[s("https://json-schema.apifox.cn/"),t(a)])]),n("li",null,[n("a",_,[s("https://zhuanlan.zhihu.com/p/355175938"),t(a)])])]),n("p",null,[s("Json Schema介绍 和 .net 下的实践 - 基于Lateapexearlyspeed.Json.Schema："),n("a",f,[s("此处"),t(a)])]),J,n("p",null,[s("jsonSchema在线验证网站："),n("a",y,[s("https://www.jsonschemavalidator.net/"),t(a)])]),n("p",null,[s("jsonSchema在线生成网站："),n("a",w,[s("https://jsonformatter.org/json-to-jsonschema"),t(a)]),s(" 国内版本："),n("a",S,[s("https://tooltt.com/json2schema/"),t(a)]),s(" jsonSchema生成："),n("a",x,[s("https://hellosean1025.github.io/json-schema-visual-editor/"),t(a)])]),N,n("p",null,[n("a",O,[s("https://mp.weixin.qq.com/s/1QZnP_z3HI8EL_ENsM19Bw"),t(a)]),s(" | 分享一些在 dotnet 中处理 JSON 的常规及非主流操作")])])}const P=o(r,[["render",A],["__file","json.html.vue"]]),M=JSON.parse('{"path":"/dotnet/base/serialize/json/json.html","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-10-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"json","slug":"pmpzbr","docsId":"30019719","description":"概述 一种数据格式 将 Newtonsoft.Json 与 System.Text.Json 比较，并迁移到 System.Text.Json：文章 在线工具 jsonPath在线测试网站：http://jsonpath.com/ jsonSchema在线验证网站：https://www.jsonschemavalidator.net/ jsonSch...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/json/json.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 一种数据格式 将 Newtonsoft.Json 与 System.Text.Json 比较，并迁移到 System.Text.Json：文章 在线工具 jsonPath在线测试网站：http://jsonpath.com/ jsonSchema在线验证网站：https://www.jsonschemavalidator.net/ jsonSch..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"在线工具","slug":"在线工具","link":"#在线工具","children":[]},{"level":2,"title":"Linq to JSON","slug":"linq-to-json","link":"#linq-to-json","children":[]},{"level":2,"title":"1. JSON表现形式","slug":"_1-json表现形式","link":"#_1-json表现形式","children":[{"level":3,"title":"1.1 对象","slug":"_1-1-对象","link":"#_1-1-对象","children":[]},{"level":3,"title":"1.2 数组","slug":"_1-2-数组","link":"#_1-2-数组","children":[]},{"level":3,"title":"1.3 字符串","slug":"_1-3-字符串","link":"#_1-3-字符串","children":[]}]},{"level":2,"title":"2. 操作","slug":"_2-操作","link":"#_2-操作","children":[{"level":3,"title":"2.1 序列化为json","slug":"_2-1-序列化为json","link":"#_2-1-序列化为json","children":[]},{"level":3,"title":"2.2 Json读取","slug":"_2-2-json读取","link":"#_2-2-json读取","children":[]},{"level":3,"title":"2.3 Json删除","slug":"_2-3-json删除","link":"#_2-3-json删除","children":[]},{"level":3,"title":"2.4 创建Json","slug":"_2-4-创建json","link":"#_2-4-创建json","children":[]}]},{"level":2,"title":"JsonSchema","slug":"jsonschema","link":"#jsonschema","children":[{"level":3,"title":"验证与生成","slug":"验证与生成","link":"#验证与生成","children":[]},{"level":3,"title":"非必填","slug":"非必填","link":"#非必填","children":[]}]},{"level":2,"title":"Json转其他格式","slug":"json转其他格式","link":"#json转其他格式","children":[{"level":3,"title":"Json转xml","slug":"json转xml","link":"#json转xml","children":[]},{"level":3,"title":"BSON-序列化和反序列化BSON","slug":"bson-序列化和反序列化bson","link":"#bson-序列化和反序列化bson","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":4.34,"words":1303},"filePathRelative":"dotnet/base/serialize/json/json.md","localizedDate":"2023年10月6日","excerpt":"<h2>概述</h2>\\n<p>一种数据格式</p>\\n<p>将 Newtonsoft.Json 与 System.Text.Json 比较，并迁移到 System.Text.Json：<a href=\\"https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft?pivots=dotnet-7-0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文章</a></p>\\n<h2>在线工具</h2>\\n<p>jsonPath在线测试网站：<a href=\\"http://jsonpath.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://jsonpath.com/</a>\\njsonSchema在线验证网站：<a href=\\"https://www.jsonschemavalidator.net/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.jsonschemavalidator.net/</a>\\njsonSchema在线生成网站：<a href=\\"https://jsonformatter.org/json-to-jsonschema\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://jsonformatter.org/json-to-jsonschema</a> 国内版本：<a href=\\"https://tooltt.com/json2schema/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://tooltt.com/json2schema/</a></p>","autoDesc":true}');export{P as comp,M as data};
