import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as t}from"./app-BIR_P--4.js";const n={};function r(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p>该方案仅支持SqlServer</p></blockquote><p>SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版本也会插入到历史表中。</p><p>通过这种方式跟踪更改，您可以捕获特定表的整个历史记录。这对于保留更改的审核日志很有用。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>要将实体标记为时态表，请IsTemporal在配置模型时使用。当您生成新的数据库模式时，您会注意到历史表包含在新脚本中。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">internal</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomerEntityConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEntityTypeConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">EntityTypeBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToTable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Customers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IsTemporal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建表后，您可以使用各种内置方法查询和检索表的历史数据。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> customerHistory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TemporalAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToListAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上面的示例中，检索了所有历史数据，但也可以检索特定时间范围内的历史数据。我发现这对于查询基于年份的数据很有用。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> customerHistory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dbContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TemporalFromTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">startOfYear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">endOfYear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToListAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>请记住，自动包含的所有实体也包含在时间查询中，这通常会引发异常。<br> 为了避免这种情况，您可以使用IgnoreAutoIncludes和IgnoreQueryFilters方法来禁用此功能。</p></blockquote><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>临时表：<a href="https://learn.microsoft.com/zh-cn/sql/relational-databases/tables/temporal-tables?view=sql-server-ver16" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/sql/relational-databases/tables/temporal-tables?view=sql-server-ver16</a><br> 时态历史记录表：<a href="https://timdeschryver.dev/blog/entity-framework-features-i-wish-i-knew-earlier#temporal-history-table" target="_blank" rel="noopener noreferrer">https://timdeschryver.dev/blog/entity-framework-features-i-wish-i-knew-earlier#temporal-history-table</a></p>`,14)]))}const k=i(n,[["render",r]]),o=JSON.parse('{"path":"/orm/efcore/temporalTable.html","title":"时间(历史)表","lang":"zh-CN","frontmatter":{"title":"时间(历史)表","lang":"zh-CN","date":"2023-07-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"description":"概述 该方案仅支持SqlServer SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"时间(历史)表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-30T14:08:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/temporalTable.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"时间(历史)表"}],["meta",{"property":"og:description","content":"概述 该方案仅支持SqlServer SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-30T14:08:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-30T14:08:37.000Z"}]]},"git":{"createdTime":1690042937000,"updatedTime":1722348517000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.56,"words":468},"filePathRelative":"orm/efcore/temporalTable.md","excerpt":"<h2>概述</h2>\\n<blockquote>\\n<p>该方案仅支持SqlServer</p>\\n</blockquote>\\n<p>SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版本也会插入到历史表中。</p>\\n<p>通过这种方式跟踪更改，您可以捕获特定表的整个历史记录。这对于保留更改的审核日志很有用。</p>\\n<h2>操作</h2>","autoDesc":true}');export{k as comp,o as data};
