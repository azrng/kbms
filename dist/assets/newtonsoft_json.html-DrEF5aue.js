import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as u,a as n,b as s,d as a,w as c,e as t}from"./app-vSdX8vi3.js";const r={},d=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Json.NET是目前最流行的.Net中的Json支持包。 官网文档：</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>灵活的 JSON 序列化器，用于在 .NET 对象和 JSON 之间进行转换</li><li>LINQ to JSON 用于手动读写 JSON</li><li>高性能：比 .NET 的内置 JSON 序列化器更快(.NetF)</li><li>编写缩进的、易于阅读的 JSON</li><li>将 JSON 与 XML 相互转换</li><li>支持.NET Standard 2.0、.NET 2、.NET 3.5、.NET 4、.NET 4.5、Silverlight、Windows Phone 和 Windows 8 Store</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><blockquote><p>本文示例环境：vs2022、.Net6</p></blockquote><p>需要用到的配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ExpiryDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;Small&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Medium&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Large&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化json对象" tabindex="-1"><a class="header-anchor" href="#初始化json对象"><span>初始化Json对象</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">JToken</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">[</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Ron&quot;</span><span class="token punctuation">;</span>
root<span class="token punctuation">[</span><span class="token string">&quot;ExpiryDate&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
root<span class="token punctuation">[</span><span class="token string">&quot;Price&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonText <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接收动态json" tabindex="-1"><a class="header-anchor" href="#接收动态json"><span>接收动态Json</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Code\\&quot;:101,\\&quot;Items\\&quot;:[{\\&quot;OrderTitle\\&quot;:\\&quot;订单1\\&quot;},{\\&quot;OrderTitle\\&quot;:\\&quot;订单2\\&quot;}]}&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> rsp <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>Code <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> <span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>Items <span class="token keyword">as</span> <span class="token class-name">JArray</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">[</span><span class="token string">&quot;OrderTitle&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Value</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//订单1,订单2</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理弱类型json" tabindex="-1"><a class="header-anchor" href="#处理弱类型json"><span>处理弱类型json</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;store\\&quot;:{\\&quot;book\\&quot;:[{\\&quot;category\\&quot;:\\&quot;reference\\&quot;,\\&quot;author\\&quot;:\\&quot;Nigel Rees\\&quot;,\\&quot;title\\&quot;:\\&quot;Sayings of the Century\\&quot;,\\&quot;price\\&quot;:8.95},&quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;{\\&quot;category\\&quot;:\\&quot;fiction\\&quot;,\\&quot;author\\&quot;:\\&quot;Evelyn Waugh\\&quot;,\\&quot;title\\&quot;:\\&quot;Sword of Honour\\&quot;,\\&quot;price\\&quot;:12.99},&quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;{\\&quot;category\\&quot;:\\&quot;fiction\\&quot;,\\&quot;author\\&quot;:\\&quot;Herman Melville\\&quot;,\\&quot;title\\&quot;:\\&quot;Moby Dick\\&quot;,\\&quot;isbn\\&quot;:\\&quot;0-553-21311-3\\&quot;,\\&quot;price\\&quot;:8.99},&quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;{\\&quot;category\\&quot;:\\&quot;fiction\\&quot;,\\&quot;author\\&quot;:\\&quot;J. R. R. Tolkien\\&quot;,\\&quot;title\\&quot;:\\&quot;The Lord of the Rings\\&quot;,\\&quot;isbn\\&quot;:\\&quot;0-395-19395-8\\&quot;,\\&quot;price\\&quot;:22.99}],&quot;</span> <span class="token operator">+</span>
	<span class="token string">&quot;\\&quot;bicycle\\&quot;:{\\&quot;color\\&quot;:\\&quot;red\\&quot;,\\&quot;price\\&quot;:19.95}}}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">JObject</span> obj <span class="token operator">=</span> JObject<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> dict <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">[</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>k <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Value</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token keyword">in</span> dict<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">,value=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#序列化和反序列化"><span>序列化和反序列化</span></a></h3><p>在json文本和.Net对象之间进行转换，JsonSerializer 将.Net中的.Net对象属性名称映射到JSON属性名称并且赋值返回JSON字符串，DeserializeObject将JSON字符串转换为.Net对象返回</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> output <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{</span>
<span class="token comment">//  &quot;Name&quot;: &quot;华为&quot;,</span>
<span class="token comment">//  &quot;ExpiryDate&quot;: &quot;1987-10-01T00:00:00&quot;,</span>
<span class="token comment">//  &quot;Price&quot;: 3.99,</span>
<span class="token comment">//  &quot;Sizes&quot;: [</span>
<span class="token comment">//    &quot;Small&quot;,</span>
<span class="token comment">//    &quot;Medium&quot;,</span>
<span class="token comment">//    &quot;Large&quot;</span>
<span class="token comment">//  ]</span>
<span class="token comment">//}</span>

<span class="token class-name"><span class="token keyword">var</span></span> deserializedProduct <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//反序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化设置" tabindex="-1"><a class="header-anchor" href="#序列化设置"><span>序列化设置</span></a></h4><h5 id="dateformathandling" tabindex="-1"><a class="header-anchor" href="#dateformathandling"><span>DateFormatHandling</span></a></h5><p>获取或设置日期写入JSON文本的方式。</p><h6 id="isodateformat" tabindex="-1"><a class="header-anchor" href="#isodateformat"><span>IsoDateFormat</span></a></h6>`,21),k=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    DateFormatHandling <span class="token operator">=</span> DateFormatHandling<span class="token punctuation">.</span>IsoDateFormat<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;,&quot;Sizes&quot;:[&quot;Small&quot;,&quot;Medium&quot;,&quot;Large&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="microsoftdateformat" tabindex="-1"><a class="header-anchor" href="#microsoftdateformat"><span>MicrosoftDateFormat</span></a></h6>`,2),v=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    DateFormatHandling <span class="token operator">=</span> DateFormatHandling<span class="token punctuation">.</span>MicrosoftDateFormat<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;\\/Date(1230393600000+0800)\\/&quot;,&quot;Sizes&quot;:[&quot;Small&quot;,&quot;Medium&quot;,&quot;Large&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="dateformatstring" tabindex="-1"><a class="header-anchor" href="#dateformatstring"><span>DateFormatString</span></a></h5><p>获取或者设置DateTime和DateTimeOffset的值在写入json文本时候的格式以及读取json文本时候想要得到的日期格式。 默认格式：&quot;yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss.FFFFFFFK&quot; 示例：2012-04-11T09:57:25Z 常用格式：yyyy-MM-dd HH:mm:ss 示例：2012-04-11 09:57:25</p><blockquote><p>注意：该格式在safari使用到时候，前端不支持该格式进行日期转换，支持默认格式或者“yyyy/MM/dd HH:mm:ss”格式</p></blockquote><h5 id="datetimezonehandling" tabindex="-1"><a class="header-anchor" href="#datetimezonehandling"><span>DateTimeZoneHandling</span></a></h5><p>获取或设置在序列化和反序列化期间DateTime时区的处理方式 默认值：Json.DateTimeZoneHandling.RoundtripKind</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DateTimeZoneHandling</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 当作当地时间。 如果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DateTime<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>对象表示协调世界时(UTC)，则将其转换为本地时间。 </span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	Local <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 当做UTC时间。 如果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DateTime<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>对象表示本地时间，则将其转换为UTC时间。  </span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	Utc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 如果DateTime被转换为字符串，则视为本地时间。如果一个字符串被转换为DateTime，如果指定了时区，则转换为本地时间。   </span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	Unspecified <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 转换时应保留时区信息</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	RoundtripKind <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见配置：SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Utc;</p><h5 id="missingmemberhandling" tabindex="-1"><a class="header-anchor" href="#missingmemberhandling"><span>MissingMemberHandling</span></a></h5><p>控制在反序列化期间如何处理丢失的成员，在原来的product的序列化json文件基础上增加了一个性别属性进行反序列化 Ignore：忽略增加或者缺少的属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    MissingMemberHandling <span class="token operator">=</span> MissingMemberHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//string jsonOutput = JsonConvert.SerializeObject(product, jsonSetting); // 序列化</span>
<span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;],\\&quot;Sex\\&quot;:\\&quot;25\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> netObject <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Error：如果增加有多余的属性会报错，而缺少属性会给默认值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    MissingMemberHandling <span class="token operator">=</span> MissingMemberHandling<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//string jsonOutput = JsonConvert.SerializeObject(product, jsonSetting); // 序列化</span>
<span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;],\\&quot;Sex\\&quot;:\\&quot;25\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> netObject <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="referenceloophandling" tabindex="-1"><a class="header-anchor" href="#referenceloophandling"><span>ReferenceLoopHandling</span></a></h5><p>控制循环引用是如何序列化的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ExpiryDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Product</span> Children <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;Small&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Medium&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Large&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>Children <span class="token operator">=</span> product<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Error：如果遇到循环引用，序列化将报错</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ReferenceLoopHandling <span class="token operator">=</span> ReferenceLoopHandling<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ignore：忽略循环引用并且不会序列化它们。在第一次遇到该对象时候，它会像往常一样被序列化，但是如果该对象作为其自身的子对象遇到了，那么序列化程序将跳过它进行序列化。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ReferenceLoopHandling <span class="token operator">=</span> ReferenceLoopHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>

<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;,&quot;Sizes&quot;:[&quot;Small&quot;,&quot;Medium&quot;,&quot;Large&quot;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Serialize：强制序列化引用循环中的对象。如果对象是嵌套的但不是无限期的时候使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ReferenceLoopHandling <span class="token operator">=</span> ReferenceLoopHandling<span class="token punctuation">.</span>Serialize<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="nullvaluehandling" tabindex="-1"><a class="header-anchor" href="#nullvaluehandling"><span>NullValueHandling</span></a></h5><p>设置在序列化和反序列化期间如何处理null值。 Include：默认属性，将null值正常进行序列化和反序列化</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    NullValueHandling<span class="token operator">=</span> NullValueHandling<span class="token punctuation">.</span>Include<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;,&quot;Sizes&quot;:null}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ignore：如果属性里面包含null值，那么就跳过该属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    NullValueHandling<span class="token operator">=</span> NullValueHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="defaultvaluehandling" tabindex="-1"><a class="header-anchor" href="#defaultvaluehandling"><span>DefaultValueHandling</span></a></h5><p>控制在序列化和反序列化如何设置默认值 Include：如果该值与字段/属性的默认值相同，则在序列化的时候将字段/属性写入json，反系列化的时候也设置字段/属性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    DefaultValueHandling <span class="token operator">=</span> DefaultValueHandling<span class="token punctuation">.</span>Include<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;,&quot;Sizes&quot;:null}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ignore：如何该值和字段/属性的默认值或者指定的默认值相同，则跳过该字段/属性写入json，反序列化的时候也会跳过。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Product</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span>
    ExpiryDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Price <span class="token operator">=</span> <span class="token number">3.99M</span><span class="token punctuation">,</span>
    Sizes <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> jsonSetting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    DefaultValueHandling <span class="token operator">=</span> DefaultValueHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> jsonOutput <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> jsonSetting<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 序列化</span>
<span class="token comment">//{&quot;Name&quot;:&quot;华为&quot;,&quot;Price&quot;:3.99,&quot;ExpiryDate&quot;:&quot;1987-10-01T00:00:00&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="objectcreationhandling" tabindex="-1"><a class="header-anchor" href="#objectcreationhandling"><span>ObjectCreationHandling</span></a></h5><p>在对象创建的时候决定是否替换。默认是Auto. 实体类</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>public class Product
<span class="token punctuation">{</span>
    public Product()
    <span class="token punctuation">{</span>
        Sizes = new List&lt;string&gt; <span class="token punctuation">{</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;33&quot;</span> <span class="token punctuation">}</span>;
    <span class="token punctuation">}</span>
    public string Name <span class="token punctuation">{</span> get; set; <span class="token punctuation">}</span>
    public decimal Price <span class="token punctuation">{</span> get; set; <span class="token punctuation">}</span>
    public DateTime ExpiryDate <span class="token punctuation">{</span> get; set; <span class="token punctuation">}</span>
    public List&lt;string&gt; Sizes <span class="token punctuation">{</span> get; set; <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Auto、Reuse：尝试将 JSON 值设置到现有对象上，并在反序列化期间将 JSON 值添加到现有集合。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var jsonSetting = new JsonSerializerSettings
<span class="token punctuation">{</span>
    ObjectCreationHandling = ObjectCreationHandling.Auto<span class="token punctuation">,</span>
<span class="token punctuation">}</span>;
var json = <span class="token string">&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>;

var obj = JsonConvert.DeserializeObject&lt;Product&gt;(json<span class="token punctuation">,</span>  jsonSetting);
var str = JsonConvert.SerializeObject(obj);
<span class="token comment">//&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;11\\&quot;,\\&quot;22\\&quot;,\\&quot;33\\&quot;,\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace：将始终重新创建对象和集合，然后在反序列化期间为它们设置值。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var jsonSetting = new JsonSerializerSettings
<span class="token punctuation">{</span>
    ObjectCreationHandling = ObjectCreationHandling.Replace<span class="token punctuation">,</span>
<span class="token punctuation">}</span>;
var json = <span class="token string">&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>;

var obj = JsonConvert.DeserializeObject&lt;Product&gt;(json<span class="token punctuation">,</span> jsonSetting);
var str = JsonConvert.SerializeObject(obj);
<span class="token comment">//&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="contractresolver" tabindex="-1"><a class="header-anchor" href="#contractresolver"><span>ContractResolver</span></a></h5><p>设置序列化序列化属性格式</p><blockquote><p>注意：如果对JToken或者JObject序列化，是达不到更新命名方式的效果。</p></blockquote><h6 id="camelcasepropertynamescontractresolver-驼峰命名" tabindex="-1"><a class="header-anchor" href="#camelcasepropertynamescontractresolver-驼峰命名"><span>CamelCasePropertyNamesContractResolver(驼峰命名)</span></a></h6><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CamelCasePropertyNamesContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//&quot;{\\&quot;price\\&quot;:3.99,\\&quot;expiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="snakecasenamingstrategy-蛇形命名" tabindex="-1"><a class="header-anchor" href="#snakecasenamingstrategy-蛇形命名"><span>SnakeCaseNamingStrategy(蛇形命名)</span></a></h6><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NamingStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SnakeCaseNamingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//&quot;{\\&quot;price\\&quot;:3.99,\\&quot;expiry_date\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="formatting-indented" tabindex="-1"><a class="header-anchor" href="#formatting-indented"><span>Formatting.Indented</span></a></h5><p>默认情况下所有的json是挤压在一块的，特别不方便阅读，如图</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span><span class="token string">&quot;Price&quot;</span><span class="token punctuation">:</span><span class="token number">3.99</span><span class="token punctuation">,</span><span class="token string">&quot;ExpiryDate&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1987-10-01T00:00:00&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Sizes&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Small&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Medium&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Large&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过配置代码序列化后格式化</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> Formatting<span class="token punctuation">.</span>Indented<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当配置后结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;Price&quot;</span><span class="token punctuation">:</span> <span class="token number">3.99</span><span class="token punctuation">,</span>
  <span class="token string">&quot;ExpiryDate&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1987-10-01T00:00:00&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Sizes&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;Small&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Medium&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Large&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列化特性" tabindex="-1"><a class="header-anchor" href="#序列化特性"><span>序列化特性</span></a></h4><h5 id="jsonproperty" tabindex="-1"><a class="header-anchor" href="#jsonproperty"><span>JsonProperty</span></a></h5><h6 id="重命名" tabindex="-1"><a class="header-anchor" href="#重命名"><span>重命名</span></a></h6><p>修改属性序列化后的名字。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonProperty</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;ProductName&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>操作示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//&quot;{\\&quot;ProductName\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="私有属性赋值" tabindex="-1"><a class="header-anchor" href="#私有属性赋值"><span>私有属性赋值</span></a></h6><p>当一个属性被设置私有字段的时候，默认是无法赋值的，然后可以通过给私有属性上标注该特性达到可以反序列化赋值的效果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> classInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Class1</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> jsonText <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// {&quot;Name&quot;:&quot;aa&quot;,&quot;Description&quot;:&quot;bb&quot;}</span>
	jsonText<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Class1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>jsonText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里Description已经被赋值</span>
	info<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Class1</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token function">Class1</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> descript<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		Description <span class="token operator">=</span> descript<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonProperty</span></span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Description <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="jsonignore" tabindex="-1"><a class="header-anchor" href="#jsonignore"><span>JsonIgnore</span></a></h5><p>可以在属性上标注JsonIgnore特性来实现序列化的时候忽略该属性。</p><p>也可以通过自定义序列化设置来动态配置是否显示该属性，现在有一个UserInfo类，我需要动态的设置Password序列化的时候是否显示</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种方法是直接在上面的类中创建下面的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token comment">// 返回true则序列化该属性，返回false则忽略该属性</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShouldSerializeUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是该方法必须是ShouldSerialize+属性名，返回值等和上面保持一致，我们进行测试一下上面的方法是否起作用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span>
<span class="token punctuation">{</span>
    UserName <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 进行序列化操作</span>
<span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;Password&quot;:&quot;123456&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种方法是在上面的类中创建下面的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShouldSerializeSomeProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 返回true则序列化该属性，返回false则忽略该属性</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建CustomContractResolver，并调用ShouldSerializeSomeProperty方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 实现IContractResolver接口：通过实现IContractResolver接口，可以自定义属性的序列化行为</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomContractResolver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DefaultContractResolver</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonProperty</span> <span class="token function">CreateProperty</span><span class="token punctuation">(</span><span class="token class-name">MemberInfo</span> member<span class="token punctuation">,</span> <span class="token class-name">MemberSerialization</span> memberSerialization<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">JsonProperty</span> property <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">CreateProperty</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> memberSerialization<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 自定义属性的序列化行为</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>property<span class="token punctuation">.</span>PropertyName <span class="token operator">==</span> <span class="token string">&quot;Password&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 忽略该属性</span>
            property<span class="token punctuation">.</span>ShouldSerialize <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 根据方法判断是否忽略该属性</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name">UserInfo</span> u<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">ShouldSerializeSomeProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> property<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义序列化设置，并序列化</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerSettings</span>
<span class="token punctuation">{</span>
    ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span>
<span class="token punctuation">{</span>
    UserName <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 进行序列化操作</span>
<span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// {&quot;UserName&quot;:&quot;admin&quot;,&quot;Password&quot;:&quot;123456&quot;}</span>

<span class="token class-name"><span class="token keyword">var</span></span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span>
<span class="token punctuation">{</span>
    UserName <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    Password <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 进行序列化操作</span>
json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>user2<span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;UserName&quot;:&quot;admin&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="memberserialization" tabindex="-1"><a class="header-anchor" href="#memberserialization"><span>MemberSerialization</span></a></h5><p>实体类上面使用[JsonObject(MemberSerialization.OptIn)]，所有的成员并不会被序列化，类中的成员只有使用标注特性JsonProperty的才会被实例化</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonObject</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MemberSerialization<span class="token punctuation">.</span>OptIn<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
   <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonProperty</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ExpiryDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类上面使用[JsonObject(MemberSerialization.OptOut)]，默认情况下，所有的成员都会被实例化，只有标注JsonIgnore的不会被实例化</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonObject</span><span class="token attribute-arguments"><span class="token punctuation">(</span>MemberSerialization<span class="token punctuation">.</span>OptOut<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonIgnore</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ExpiryDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//&quot;{\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01T00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="chinadatetimeconverter" tabindex="-1"><a class="header-anchor" href="#chinadatetimeconverter"><span>ChinaDateTimeConverter</span></a></h5><p>ChinaDateTimeConverter是自己定义的一个重写类。 时间转换格式的方法 因为默认格式化后格式是1987-10-01T00:00:00，不符合我们使用要求，这时候我们可以使用IsoDateTimeConverter或者在编写自定义的转换方法。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>public class ChinaDateTimeConverter <span class="token operator">:</span> DateTimeConverterBase
<span class="token punctuation">{</span>
    private static readonly IsoDateTimeConverter _dtConverter = new() <span class="token punctuation">{</span> DateTimeFormat = <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> <span class="token punctuation">}</span>;

    public override object ReadJson(JsonReader reader<span class="token punctuation">,</span> Type objectType<span class="token punctuation">,</span> object existingValue<span class="token punctuation">,</span> JsonSerializer serializer)
    <span class="token punctuation">{</span>
        return _dtConverter.ReadJson(reader<span class="token punctuation">,</span> objectType<span class="token punctuation">,</span> existingValue<span class="token punctuation">,</span> serializer);
    <span class="token punctuation">}</span>

    public override void WriteJson(JsonWriter writer<span class="token punctuation">,</span> object value<span class="token punctuation">,</span> JsonSerializer serializer)
    <span class="token punctuation">{</span>
        _dtConverter.WriteJson(writer<span class="token punctuation">,</span> value<span class="token punctuation">,</span> serializer);
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标注特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Sizes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;33&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonConverter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ChinaDateTimeConverter</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ExpiryDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Sizes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>var json = JsonConvert.SerializeObject(product);
<span class="token comment">//&quot;{\\&quot;Name\\&quot;:\\&quot;华为\\&quot;,\\&quot;Price\\&quot;:3.99,\\&quot;ExpiryDate\\&quot;:\\&quot;1987-10-01 00:00:00\\&quot;,\\&quot;Sizes\\&quot;:[\\&quot;Small\\&quot;,\\&quot;Medium\\&quot;,\\&quot;Large\\&quot;]}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,93),m={href:"https://www.newtonsoft.com/json/help/html/SerializationAttributes.htm",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="linq-to-json" tabindex="-1"><a class="header-anchor" href="#linq-to-json"><span>LINQ to JSON</span></a></h3><h4 id="转json" tabindex="-1"><a class="header-anchor" href="#转json"><span>转JSON</span></a></h4><p>将json字符串转json对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> <span class="token string">@&quot;{
  CPU: &#39;Intel&#39;,
  Drives: [
    &#39;DVD read/writer&#39;,
    &#39;500 gigabyte hard drive&#39;
  ]
}&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">JObject</span> o <span class="token operator">=</span> JObject<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={href:"https://www.newtonsoft.com/json/help/html/ParsingLINQtoJSON.htm",target:"_blank",rel:"noopener noreferrer"},q=t(`<h3 id="验证json-schema" tabindex="-1"><a class="header-anchor" href="#验证json-schema"><span>验证JSON Schema</span></a></h3><p>xxx</p><h3 id="jsonpath" tabindex="-1"><a class="header-anchor" href="#jsonpath"><span>JsonPath</span></a></h3><p>是xpath在json中的应用，是参照xpath表达式来解析xml文档的方式，用一个抽象的名字$来表示最外层的对象。常见的写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">.</span>store<span class="token punctuation">.</span>book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title
$<span class="token punctuation">[</span>&#39;store&#39;<span class="token punctuation">]</span><span class="token punctuation">[</span>&#39;book&#39;<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>&#39;title&#39;<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h=n("strong",null,"在线测试网站：",-1),y={href:"http://jsonpath.com/",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"http://jsonpath.com/",-1),j=t(`<p>JSONPath 允许使用通配符 * 表示所以的子元素名和数组索引。还允许使用 &#39;..&#39; (从E4X参照过来的和数组切分语法)，示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">.</span>store<span class="token punctuation">.</span>book<span class="token punctuation">[</span><span class="token punctuation">(</span>@<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title

<span class="token operator">--</span> 使用<span class="token char">&#39;@&#39;</span>符号表示当前的对象，<span class="token punctuation">?</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>判断表达式<span class="token operator">&gt;</span><span class="token punctuation">)</span> 使用逻辑表达式来过滤。
$<span class="token punctuation">.</span>store<span class="token punctuation">.</span>book<span class="token punctuation">[</span><span class="token punctuation">?</span><span class="token punctuation">(</span>@<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSONPath语法元素和对应XPath元素的对比。</p><table><thead><tr><th>XPath</th><th>JSONPath</th><th>Description</th></tr></thead><tbody><tr><td>/</td><td>$</td><td>表示根元素</td></tr><tr><td>.</td><td>@</td><td>当前元素</td></tr><tr><td>/</td><td>. or []</td><td>子元素</td></tr><tr><td>..</td><td>n/a</td><td>父元素</td></tr><tr><td>//</td><td>..</td><td>递归下降，JSONPath是从E4X借鉴的。</td></tr><tr><td>*</td><td>*</td><td>通配符，表示所有的元素</td></tr><tr><td>@</td><td>n/a</td><td>属性访问字符</td></tr><tr><td>[]</td><td>[]</td><td>子元素操作符</td></tr><tr><td>|</td><td>[,]</td><td>连接操作符在XPath 结果合并其它结点集合。JSONP允许name或者数组索引。</td></tr><tr><td>n/a</td><td>[start🔚step]</td><td>数组分割操作从ES4借鉴。</td></tr><tr><td>[]</td><td>?()</td><td>应用过滤表示式</td></tr><tr><td>n/a</td><td>()</td><td>脚本表达式，使用在脚本引擎下面。</td></tr><tr><td>()</td><td>n/a</td><td>Xpath分组</td></tr></tbody></table><p>示例 下面是一个简单的json数据结构代表一个书店</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;store&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;book&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;category&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;reference&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;author&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Nigel Rees&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Sayings of the Century&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">8.95</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;category&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;author&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Evelyn Waugh&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Sword of Honour&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">12.99</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;category&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;author&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Herman Melville&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Moby Dick&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;isbn&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;0-553-21311-3&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">8.99</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;category&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;fiction&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;author&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;J. R. R. Tolkien&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;The Lord of the Rings&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;isbn&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;0-395-19395-8&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">22.99</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;bicycle&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;color&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span> <span class="token number">19.95</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;aa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">JObject</span> jobj <span class="token operator">=</span> JObject<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectToken</span><span class="token punctuation">(</span><span class="token string">&quot;$.data.emrMenuDisplayModels[2][&#39;identify&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//书点所有书的作者</span>
<span class="token class-name"><span class="token keyword">var</span></span> autherList <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$.store.book[*].author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询书Moby Dick的价格</span>
<span class="token class-name"><span class="token keyword">var</span></span> autherList <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectToken</span><span class="token punctuation">(</span><span class="token string">&quot;$.store.book[?(@.title==&#39;Moby Dick&#39;)].price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//所有的作者</span>
<span class="token class-name"><span class="token keyword">var</span></span> autherList2 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$...author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//store的所有元素。所有的bookst和bicycle</span>
<span class="token class-name"><span class="token keyword">var</span></span> store1 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$.store.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//store里面所有东西的price</span>
<span class="token class-name"><span class="token keyword">var</span></span> store2 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$.store..[&#39;price&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> store3 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$.store..price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第三个书</span>
<span class="token class-name"><span class="token keyword">var</span></span> book1 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$.store.book[2]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> book2 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..book[2]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 最后一本书</span>
<span class="token class-name"><span class="token keyword">var</span></span> book3 <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..book[-1:]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//var book3 = jobj.SelectTokens(&quot;$..book[(@.len-1)]&quot;);//不支持@.length</span>
<span class="token comment">//var book4 = jobj.SelectTokens(&quot;$.store.book[(@.length-1)]&quot;);</span>

<span class="token comment">//前面的两本书</span>
<span class="token class-name"><span class="token keyword">var</span></span> laing <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..book[0,1]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//过滤出所有的包含isbn的书</span>
<span class="token class-name"><span class="token keyword">var</span></span> contain <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..book[?(@.isbn)]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//过滤出价格低于10的书。</span>
<span class="token class-name"><span class="token keyword">var</span></span> price <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..book[?(@.price&lt;10)]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//所有元素</span>
<span class="token class-name"><span class="token keyword">var</span></span> all <span class="token operator">=</span> jobj<span class="token punctuation">.</span><span class="token function">SelectTokens</span><span class="token punctuation">(</span><span class="token string">&quot;$..*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),S={href:"https://blog.csdn.net/myself8202/article/details/80724968",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="公共类" tabindex="-1"><a class="header-anchor" href="#公共类"><span>公共类</span></a></h2><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public static class Json
{
    public static object ToJson(this string Json)
    {
        return Json == null ? null : JsonConvert.DeserializeObject(Json);
    }
    public static string ToJson(this object obj)
    {
        var timeConverter = new IsoDateTimeConverter { DateTimeFormat = &quot;yyyy-MM-dd HH:mm:ss&quot; };
        return JsonConvert.SerializeObject(obj, timeConverter);
    }
    public static string ToJson(this object obj, string datetimeformats)
    {
        var timeConverter = new IsoDateTimeConverter { DateTimeFormat = datetimeformats };
        return JsonConvert.SerializeObject(obj, timeConverter);
    }
    public static T ToObject&lt;T&gt;(this string Json)
    {
        return Json == null ? default(T) : JsonConvert.DeserializeObject&lt;T&gt;(Json);
    }
    public static List&lt;T&gt; ToList&lt;T&gt;(this string Json)
    {
        return Json == null ? null : JsonConvert.DeserializeObject&lt;List&lt;T&gt;&gt;(Json);
    }
    public static DataTable ToTable(this string Json)
    {
        return Json == null ? null : JsonConvert.DeserializeObject&lt;DataTable&gt;(Json);
    }
    public static JObject ToJObject(this string Json)
    {
        return Json == null ? JObject.Parse(&quot;{}&quot;) : JObject.Parse(Json.Replace(&quot;&amp;nbsp;&quot;, &quot;&quot;));
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,3),J={href:"https://www.newtonsoft.com/json/help/html/Introduction.htm",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.cnblogs.com/foxhappy/p/14760775.html",target:"_blank",rel:"noopener noreferrer"};function T(x,z){const o=p("c"),e=p("ExternalLinkIcon");return i(),u("div",null,[d,n("p",null,[s("日期采用ISO 8601格式，如"),a(o,null,{default:c(()=>[s('"2012-03-21T05:40Z"')]),_:1}),s("。")]),k,n("p",null,[s("日期以Microsoft JSON格式书写，例如:"),a(o,null,{default:c(()=>[s('"/Date(1198908717056)/"')]),_:1}),s("。")]),v,n("p",null,[s("开始："),n("a",m,[s("htthttps://www.newtonsoft.com/json/help/html/SerializationAttributes.htm"),a(e)])]),b,n("p",null,[s("官网："),n("a",g,[s("https://www.newtonsoft.com/json/help/html/ParsingLINQtoJSON.htm"),a(e)])]),q,n("blockquote",null,[n("p",null,[h,n("a",y,[w,a(e)])])]),j,n("p",null,[s("参考资料："),n("a",S,[s("https://blog.csdn.net/myself8202/article/details/80724968"),a(e)])]),f,n("p",null,[s("官方文档："),n("a",J,[s("https://www.newtonsoft.com/json/help/html/Introduction.htm"),a(e)]),n("a",N,[s("https://www.cnblogs.com/foxhappy/p/14760775.html"),a(e)])])])}const C=l(r,[["render",T],["__file","newtonsoft_json.html.vue"]]),P=JSON.parse('{"path":"/dotnet/base/serialize/json/newtonsoft_json.html","title":"Newtonsoft.Json","lang":"zh-CN","frontmatter":{"title":"Newtonsoft.Json","lang":"zh-CN","date":"2023-09-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"newtonsoft_json","slug":"svin0m","docsId":"46045728","description":"概述 Json.NET是目前最流行的.Net中的Json支持包。 官网文档： 优点 灵活的 JSON 序列化器，用于在 .NET 对象和 JSON 之间进行转换 LINQ to JSON 用于手动读写 JSON 高性能：比 .NET 的内置 JSON 序列化器更快(.NetF) 编写缩进的、易于阅读的 JSON 将 JSON 与 XML 相互转换 支持...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/json/newtonsoft_json.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Newtonsoft.Json"}],["meta",{"property":"og:description","content":"概述 Json.NET是目前最流行的.Net中的Json支持包。 官网文档： 优点 灵活的 JSON 序列化器，用于在 .NET 对象和 JSON 之间进行转换 LINQ to JSON 用于手动读写 JSON 高性能：比 .NET 的内置 JSON 序列化器更快(.NetF) 编写缩进的、易于阅读的 JSON 将 JSON 与 XML 相互转换 支持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Newtonsoft.Json\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"初始化Json对象","slug":"初始化json对象","link":"#初始化json对象","children":[]},{"level":3,"title":"接收动态Json","slug":"接收动态json","link":"#接收动态json","children":[]},{"level":3,"title":"处理弱类型json","slug":"处理弱类型json","link":"#处理弱类型json","children":[]},{"level":3,"title":"序列化和反序列化","slug":"序列化和反序列化","link":"#序列化和反序列化","children":[{"level":4,"title":"序列化设置","slug":"序列化设置","link":"#序列化设置","children":[{"level":5,"title":"DateFormatHandling","slug":"dateformathandling","link":"#dateformathandling","children":[]},{"level":5,"title":"DateFormatString","slug":"dateformatstring","link":"#dateformatstring","children":[]},{"level":5,"title":"DateTimeZoneHandling","slug":"datetimezonehandling","link":"#datetimezonehandling","children":[]},{"level":5,"title":"MissingMemberHandling","slug":"missingmemberhandling","link":"#missingmemberhandling","children":[]},{"level":5,"title":"ReferenceLoopHandling","slug":"referenceloophandling","link":"#referenceloophandling","children":[]},{"level":5,"title":"NullValueHandling","slug":"nullvaluehandling","link":"#nullvaluehandling","children":[]},{"level":5,"title":"DefaultValueHandling","slug":"defaultvaluehandling","link":"#defaultvaluehandling","children":[]},{"level":5,"title":"ObjectCreationHandling","slug":"objectcreationhandling","link":"#objectcreationhandling","children":[]},{"level":5,"title":"ContractResolver","slug":"contractresolver","link":"#contractresolver","children":[]},{"level":5,"title":"Formatting.Indented","slug":"formatting-indented","link":"#formatting-indented","children":[]}]},{"level":4,"title":"序列化特性","slug":"序列化特性","link":"#序列化特性","children":[{"level":5,"title":"JsonProperty","slug":"jsonproperty","link":"#jsonproperty","children":[]},{"level":5,"title":"JsonIgnore","slug":"jsonignore","link":"#jsonignore","children":[]},{"level":5,"title":"MemberSerialization","slug":"memberserialization","link":"#memberserialization","children":[]},{"level":5,"title":"ChinaDateTimeConverter","slug":"chinadatetimeconverter","link":"#chinadatetimeconverter","children":[]}]}]},{"level":3,"title":"LINQ to JSON","slug":"linq-to-json","link":"#linq-to-json","children":[{"level":4,"title":"转JSON","slug":"转json","link":"#转json","children":[]}]},{"level":3,"title":"验证JSON Schema","slug":"验证json-schema","link":"#验证json-schema","children":[]},{"level":3,"title":"JsonPath","slug":"jsonpath","link":"#jsonpath","children":[]}]},{"level":2,"title":"公共类","slug":"公共类","link":"#公共类","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":12.76,"words":3828},"filePathRelative":"dotnet/base/serialize/json/newtonsoft_json.md","localizedDate":"2023年9月12日","excerpt":"<h2>概述</h2>\\n<p>Json.NET是目前最流行的.Net中的Json支持包。\\n官网文档：</p>\\n<h3>优点</h3>\\n<ul>\\n<li>灵活的 JSON 序列化器，用于在 .NET 对象和 JSON 之间进行转换</li>\\n<li>LINQ to JSON 用于手动读写 JSON</li>\\n<li>高性能：比 .NET 的内置 JSON 序列化器更快(.NetF)</li>\\n<li>编写缩进的、易于阅读的 JSON</li>\\n<li>将 JSON 与 XML 相互转换</li>\\n<li>支持.NET Standard 2.0、.NET 2、.NET 3.5、.NET 4、.NET 4.5、Silverlight、Windows Phone 和 Windows 8 Store</li>\\n</ul>","autoDesc":true}');export{C as comp,P as data};
