import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as i,b as e,e as n,f as t,d as a}from"./app-CBxp4zeL.js";const c={},p=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言")])],-1),d=e("p",null,"默认情况下，EFCore中批量添加、更新和删除数据都是先查询实体，然后对数据操作，最后SaveChanges保存到数据库，生成的SQL都是一条一条的SQL执行的。",-1),u=e("p",null,"如果批量操作的数据量比较大，那么会很影响性能的。",-1),m=e("blockquote",null,[e("p",null,"起初EF Core 的开发团队认为，这样做会导致 EF Core 的对象状态跟踪混乱，但是在.Net7以及之后，已经可以实现批量更新、批量删除等的操作了")],-1),h=e("h2",{id:"原生的实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原生的实现"},[e("span",null,"原生的实现")])],-1),v=e("p",null,"每个关系型数据库的最佳实现利用以下不同的数据库特定实现：",-1),k=e("strong",null,"PostgreSQL",-1),g={href:"https://www.npgsql.org/doc/copy.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.postgresql.org/docs/current/sql-copy.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT",target:"_blank",rel:"noopener noreferrer"},_=e("strong",null,"MySql",-1),q={href:"https://dev.mysql.com/doc/connector-net/en/connector-net-programming-bulk-loader.html",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"MySqlBulkLoader",-1),S={href:"https://mysqlconnector.net/api/mysqlconnector/mysqlbulkloadertype/",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"SourceStream",-1),C=e("li",null,[n("SQL Server - 使用 "),e("strong",null,"SQL Server"),n(" 的功能，该功能导入写入内存中的数据"),e("code",null,"SqlBulkCopy "),n(),e("code",null,"DataTable")],-1),L=e("strong",null,"SQLite - SQLite",-1),E={href:"https://www.tutorialscampus.com/sql/insert-multiple-rows.htm",target:"_blank",rel:"noopener noreferrer"},N=a(`<p>批量插入实现方案：https://servicestack.net/posts/bulk-insert-performance#bulk-insert-implementations</p><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql"><span>PostgreSql</span></a></h3><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h4><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>await using var dbConnect = (NpgsqlConnection)_dbContext.Database.GetDbConnection();
if (dbConnect.State == ConnectionState.Closed)
    await dbConnect.OpenAsync();
await using var copyImport = await dbConnect.BeginBinaryImportAsync(
    &quot;COPY meta_data.struct_disk_occupancy(struct_id,struct_type,struct_type,disk_occupancy,create_time,update_time,status) FROM STDIN (FORMAT BINARY)&quot;);
foreach (var item in structDiskOccupancies)
{
    await copyImport.StartRowAsync();
    await copyImport.WriteAsync(item.StructId);
    await copyImport.WriteAsync(item.StructType);
    await copyImport.WriteAsync(item.DiskOccupancy);
    await copyImport.WriteAsync(item.CreateTime, NpgsqlTypes.NpgsqlDbType.Timestamp);
    if (item.UpdateTime.HasValue)
    {
        await copyImport.WriteAsync(item.UpdateTime, NpgsqlTypes.NpgsqlDbType.Timestamp);
    }
    else
    {
        await copyImport.WriteNullAsync();
    }

    copyImport.WriteAsync(item.Status);
}

var num = await copyImport.CompleteAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),T={href:"https://www.npgsql.org/doc/copy.html",target:"_blank",rel:"noopener noreferrer"},O=a(`<h4 id="插入冲突就更新" tabindex="-1"><a class="header-anchor" href="#插入冲突就更新"><span>插入冲突就更新</span></a></h4><p><code>ON CONFLICT</code>：一次性插入多个数据，并在冲突时进行更新。</p><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/*
 * 限制：
 * 1、ON CONFLICT的列必须有唯一约束等
 * 2.在一个执行语句中，不能出现ON CONFLICT冲突的列值，否则会提示：确保在具有重复受约束值的同一个命令中不会插入行
 */</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> 
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> CONFLICT <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">DO</span> <span class="token keyword">UPDATE</span> 
<span class="token keyword">SET</span> name <span class="token operator">=</span> EXCLUDED<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var sb = new StringBuilder(
    &quot;INSERT INTO sample.\\&quot;user\\&quot; (account, pass_word, name, sex, credit, group_id, deleted, create_time, modify_time)&quot;);
sb.Append(&quot;values&quot;);
sb.Append(&quot;(&#39;admin&#39;,&#39;123456&#39;,&#39;cc&#39;,1,10,10,false,&#39;2024-03-12&#39;,&#39;2024-03-12&#39;),&quot;);
sb.Append(&quot;(&#39;admin2&#39;,&#39;123456&#39;,&#39;bbbba&#39;,1,10,10,false,&#39;2024-03-12&#39;,&#39;2024-03-12&#39;)&quot;);
sb.Append(&quot;ON CONFLICT (account) DO UPDATE SET name = EXCLUDED.name;&quot;);
await using var db = new OpenDbContext();
var result = await db.Database.ExecuteSqlRawAsync(sb.ToString());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不查询更新" tabindex="-1"><a class="header-anchor" href="#不查询更新"><span>不查询更新</span></a></h4><p>使用values list实现批量更新</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name <span class="token keyword">AS</span> t
<span class="token keyword">SET</span> column1 <span class="token operator">=</span> v<span class="token punctuation">.</span>column1<span class="token punctuation">,</span>
    column2 <span class="token operator">=</span> v<span class="token punctuation">.</span>column2
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">VALUES</span>
          <span class="token punctuation">(</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token string">&#39;value3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token string">&#39;value5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value6&#39;</span><span class="token punctuation">)</span>
     <span class="token punctuation">)</span> <span class="token keyword">AS</span> v<span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> v<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var sb = new StringBuilder(&quot;update sample.\\&quot;user\\&quot; t set name=v.name from&quot;);
sb.Append(&quot;(values &quot;);
sb.Append(&quot;(&#39;admin&#39;,&#39;aa&#39;),&quot;);
sb.Append(&quot;(&#39;admin2&#39;,&#39;bb&#39;)&quot;);
sb.Append(&quot;) as v(account,name) where t.account=v.account&quot;);
await using var db = new OpenDbContext();
var result = await db.Database.ExecuteSqlRawAsync(sb.ToString());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他开源方案" tabindex="-1"><a class="header-anchor" href="#其他开源方案"><span>其他开源方案</span></a></h2><h3 id="efcore-bulkextensions" tabindex="-1"><a class="header-anchor" href="#efcore-bulkextensions"><span>EFCore.BulkExtensions</span></a></h3>`,13),x=e("strong",null,"SQLServer",-1),I={href:"https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopy.aspx",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql",target:"_blank",rel:"noopener noreferrer"},A=e("strong",null,"PostgreSQL",-1),B={href:"https://www.postgresql.org/docs/9.2/sql-copy.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT",target:"_blank",rel:"noopener noreferrer"},z=e("strong",null,"MySQL",-1),D={href:"https://mysqlconnector.net/api/mysqlconnector/mysqlbulkcopytype/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html",target:"_blank",rel:"noopener noreferrer"},M=e("strong",null,"SQLite",-1),R={href:"https://learn.microsoft.com/en-us/dotnet/standard/data/sqlite/bulk-insert",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.sqlite.org/lang_UPSERT.html",target:"_blank",rel:"noopener noreferrer"},Z=a('<p>仓库地址：https://github.com/borisdj/EFCore.BulkExtensions</p><p>Nuget包地址：https://www.nuget.org/packages/EFCore.BulkExtensions</p><h3 id="entity-framework-plus" tabindex="-1"><a class="header-anchor" href="#entity-framework-plus"><span>Entity Framework Plus</span></a></h3><p>功能更加强大，扩展了更多的查询功能，它分为免费版和收费版，基础的批量操作免费版就可以支持，高级批量操作以及 SqlBulkCopy 则只有收费版支持。如果使用的是 MySQL，或者不需要 SqlBulkCopy，那么 「EF Plus 免费版」是首选，因为它支持更多的数据库，扩展了更丰富的查询功能</p><h3 id="zack-efcore-batch" tabindex="-1"><a class="header-anchor" href="#zack-efcore-batch"><span>Zack.EFCore.Batch</span></a></h3><p>杨老师封装的一个批量操作的包。</p><p>nuget地址：https://www.nuget.org/packages/Zack.EFCore.Batch</p><h3 id="servicestack-ormlite" tabindex="-1"><a class="header-anchor" href="#servicestack-ormlite"><span>ServiceStack.OrmLite</span></a></h3><p>资料：https://servicestack.net/posts/bulk-insert-performance</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>https://mp.weixin.qq.com/s/a6ro5J4gQOK5Sac9MycfVg | .NET 数据库大数据方案（插入、更新、删除、查询 、插入或更新）</p>',11);function V(W,Y){const s=l("ExternalLinkIcon");return r(),i("div",null,[p,d,u,m,h,v,e("ul",null,[e("li",null,[k,n(" - 通过 Npgsql 的"),e("a",g,[n("二进制复制"),t(s)]),n("导入使用 PostgreSQL 的 "),e("a",b,[n("COPY"),t(s)]),n(" 命令，使用"),e("a",y,[n("ON CONFLICT"),t(s)]),n(" 进行更新")]),e("li",null,[_,n(" - 使用 "),e("a",q,[n("MySqlBulkLoader"),t(s)]),n(" 功能，将数据写入由"),f]),e("li",null,[n("MySqlConnector - 使用 "),e("a",S,[n("MySqlConnector 的 MySqlBulkLoader"),t(s)]),n(" 实现，该实现利用其功能避免写入临时文件"),w]),C,e("li",null,[L,n(" 没有特定的导入功能，而是使用"),e("a",E,[n("批量多行"),t(s)]),n("插入执行批量插入，以将 I/O 调用减少到可配置的批大小")])]),N,e("p",null,[n("资料："),e("a",T,[n("https://www.npgsql.org/doc/copy.html"),t(s)])]),O,e("p",null,[n("支持的数据库： -"),x,n("（或 SqlAzure）在后台使用 "),e("a",I,[n("SqlBulkCopy"),t(s)]),n(" 进行插入，Update/Delete = BulkInsert + 原始 Sql "),e("a",F,[n("MERGE"),t(s)]),n("。 -"),A,n(" （9.5+） 使用 "),e("a",B,[n("COPY BINARY"),t(s)]),n(" 和 "),e("a",Q,[n("ON CONFLICT"),t(s)]),n(" 进行更新。 -"),z,n(" （8+） 使用 "),e("a",D,[n("MySqlBulkCopy"),t(s)]),n(" 与 "),e("a",P,[n("ON DUPLICATE"),t(s)]),n(" 结合使用进行更新。 -"),M,n(" 没有复制工具，而是库使用"),e("a",R,[n("纯 SQL"),t(s)]),n(" 和 "),e("a",U,[n("UPSERT"),t(s)]),n(" 组合。")]),Z])}const H=o(c,[["render",V],["__file","piliangcaozuo.html.vue"]]),J=JSON.parse('{"path":"/orm/efcore/jichuzhishi/piliangcaozuo.html","title":"批量操作","lang":"zh-CN","frontmatter":{"title":"批量操作","lang":"zh-CN","date":"2022-05-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"piliangcaozuo","slug":"ufbx5i","docsId":"78196600","description":"前言 默认情况下，EFCore中批量添加、更新和删除数据都是先查询实体，然后对数据操作，最后SaveChanges保存到数据库，生成的SQL都是一条一条的SQL执行的。 如果批量操作的数据量比较大，那么会很影响性能的。 起初EF Core 的开发团队认为，这样做会导致 EF Core 的对象状态跟踪混乱，但是在.Net7以及之后，已经可以实现批量更新、...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/piliangcaozuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"批量操作"}],["meta",{"property":"og:description","content":"前言 默认情况下，EFCore中批量添加、更新和删除数据都是先查询实体，然后对数据操作，最后SaveChanges保存到数据库，生成的SQL都是一条一条的SQL执行的。 如果批量操作的数据量比较大，那么会很影响性能的。 起初EF Core 的开发团队认为，这样做会导致 EF Core 的对象状态跟踪混乱，但是在.Net7以及之后，已经可以实现批量更新、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T14:34:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-12T14:34:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"批量操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-12T14:34:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"原生的实现","slug":"原生的实现","link":"#原生的实现","children":[{"level":3,"title":"PostgreSql","slug":"postgresql","link":"#postgresql","children":[{"level":4,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":4,"title":"插入冲突就更新","slug":"插入冲突就更新","link":"#插入冲突就更新","children":[]},{"level":4,"title":"不查询更新","slug":"不查询更新","link":"#不查询更新","children":[]}]}]},{"level":2,"title":"其他开源方案","slug":"其他开源方案","link":"#其他开源方案","children":[{"level":3,"title":"EFCore.BulkExtensions","slug":"efcore-bulkextensions","link":"#efcore-bulkextensions","children":[]},{"level":3,"title":"Entity Framework Plus","slug":"entity-framework-plus","link":"#entity-framework-plus","children":[]},{"level":3,"title":"Zack.EFCore.Batch","slug":"zack-efcore-batch","link":"#zack-efcore-batch","children":[]},{"level":3,"title":"ServiceStack.OrmLite","slug":"servicestack-ormlite","link":"#servicestack-ormlite","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1710254086000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":6},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":4}]},"readingTime":{"minutes":3.29,"words":987},"filePathRelative":"orm/efcore/jichuzhishi/piliangcaozuo.md","localizedDate":"2022年5月22日","excerpt":"<h2>前言</h2>\\n<p>默认情况下，EFCore中批量添加、更新和删除数据都是先查询实体，然后对数据操作，最后SaveChanges保存到数据库，生成的SQL都是一条一条的SQL执行的。</p>\\n<p>如果批量操作的数据量比较大，那么会很影响性能的。</p>\\n<blockquote>\\n<p>起初EF Core 的开发团队认为，这样做会导致 EF Core 的对象状态跟踪混乱，但是在.Net7以及之后，已经可以实现批量更新、批量删除等的操作了</p>\\n</blockquote>\\n<h2>原生的实现</h2>\\n<p>每个关系型数据库的最佳实现利用以下不同的数据库特定实现：</p>\\n<ul>\\n<li><strong>PostgreSQL</strong> - 通过 Npgsql 的<a href=\\"https://www.npgsql.org/doc/copy.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二进制复制</a>导入使用 PostgreSQL 的 <a href=\\"https://www.postgresql.org/docs/current/sql-copy.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">COPY</a> 命令，使用<a href=\\"https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ON CONFLICT</a> 进行更新</li>\\n<li><strong>MySql</strong> - 使用 <a href=\\"https://dev.mysql.com/doc/connector-net/en/connector-net-programming-bulk-loader.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MySqlBulkLoader</a> 功能，将数据写入由<code>MySqlBulkLoader</code></li>\\n<li>MySqlConnector - 使用 <a href=\\"https://mysqlconnector.net/api/mysqlconnector/mysqlbulkloadertype/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MySqlConnector 的 MySqlBulkLoader</a> 实现，该实现利用其功能避免写入临时文件<code>SourceStream</code></li>\\n<li>SQL Server - 使用 <strong>SQL Server</strong> 的功能，该功能导入写入内存中的数据<code>SqlBulkCopy </code>  <code>DataTable</code></li>\\n<li><strong>SQLite - SQLite</strong> 没有特定的导入功能，而是使用<a href=\\"https://www.tutorialscampus.com/sql/insert-multiple-rows.htm\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">批量多行</a>插入执行批量插入，以将 I/O 调用减少到可配置的批大小</li>\\n</ul>","autoDesc":true}');export{H as comp,J as data};
