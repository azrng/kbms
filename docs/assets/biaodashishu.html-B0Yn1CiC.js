import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,b as s,e as n,f as t,d as l}from"./app-D8HBJYTp.js";const u="/kbms/common/1671202693169-f39655ca-641f-40fe-bd95-be921d3b41aa.png",i="/kbms/common/1671202706366-58d80567-a4e2-406f-bfe1-546cc31eda2f.png",k={},r=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>表达式树是用树形数据结构来表示代码逻辑运算的技术，它让我们可以在运行时访问逻辑运算的结构。</p><h2 id="和委托关系" tabindex="-1"><a class="header-anchor" href="#和委托关系"><span>和委托关系</span></a></h2><p>表达式树其实与委托已经没什么关系了，非要扯上关系，那就这么说吧，表达式树是存放委托的容器。 要用Lambda表达式的时候，直接从表达式中获取出来，Compile()就可以直接用了。如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> fun <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Expression对象存储了运算逻辑，它把运算逻辑保存为AST(抽象语法树)，我们可以在运行时候动态分析运算逻辑。(摘抄自杨老师的书籍)</p><p>我们编写同样的分别输出表达同样逻辑的Expression对象和Func对象来对比区别：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 表达式树</span>
<span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Book<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Price <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">||</span> b<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 委托</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Book<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> z <span class="token operator">=</span> b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Price <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">||</span> b<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><blockquote><p>b =&gt; ((b.Price &gt; 5) OrElse (b.Name == &quot;张三&quot;)) System.Func\`2[UserQuery+Book,System.Boolean]</p></blockquote><p>Func输出结果中，只有参数、返回值，没有内部运算逻辑，而表达式树的输出结果中，有内部的运算逻辑，这证明了表达式树对象存储了运算逻辑。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="常见工厂方法说明" tabindex="-1"><a class="header-anchor" href="#常见工厂方法说明"><span>常见工厂方法说明</span></a></h3><blockquote><p>来自杨老师书籍</p></blockquote><p><img src="`+u+'" alt="image.png" loading="lazy"><img src="'+i+`" alt="image.png" loading="lazy"></p><h3 id="生成表达式树" tabindex="-1"><a class="header-anchor" href="#生成表达式树"><span>生成表达式树</span></a></h3><p>可以让c#编辑器帮我们从Lambda表达式生成表达式树，如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Book<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Price <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编辑器会把b =&gt; b.Price &gt; 5这个表达式构建成Expression对象，然后我们就可以使用该表达式对象进行数据的查询了，也可以在运行时候用API动态创建表达式树，例如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>db<span class="token punctuation">.</span>Book<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Price <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="简单筛选" tabindex="-1"><a class="header-anchor" href="#简单筛选"><span>简单筛选</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SampleWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//泛型写法</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> predicate <span class="token operator">=</span> s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Deleted<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//表达式树写法</span>
    <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lambdaExp <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>s<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list2 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>lambdaExp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过简单的筛选去学习如何创建表达式树</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 通过简单的筛选去学习</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SampleWhereToStudy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 实现效果   t =&gt; t.Name == &quot;张三&quot;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ParameterExpression</span> demo <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserDto</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MemberExpression</span> demo_name <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>demo<span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>demo_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// t.Name</span>

    <span class="token class-name">ConstantExpression</span> <span class="token keyword">value</span> <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三</span>

    <span class="token class-name">BinaryExpression</span> greaterThen <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>demo_name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>greaterThen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t.Name==&quot;张三&quot;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>greaterThen<span class="token punctuation">,</span> demo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// t=&gt;t.Name==&quot;张三&quot;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> lamdbaFunc <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译表达式</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>lamdbaFunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// System.Func\`2[CSharpBasic.Model.UserDto,System.Boolean]</span>

    <span class="token class-name"><span class="token keyword">var</span></span> resultTrue <span class="token operator">=</span> <span class="token function">lamdbaFunc</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>resultTrue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//True</span>

    <span class="token comment">// 筛选张三</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>lamdbaFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>资料来自：超超老师教程</p></blockquote><h3 id="动态筛选" tabindex="-1"><a class="header-anchor" href="#动态筛选"><span>动态筛选</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DynamicWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//实现效果：已知一个表UserDto  包含属性Name、Address、Id等，需要实现通过属性进行动态过滤</span>
    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list2 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">EqualWhere</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 扩展方法</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpressExtensons</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 等于筛选</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>whereField<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">EqualWhere</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> whereField<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>whereField<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 小于筛选</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>whereField<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">LessWhere</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> whereField<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>whereField<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 大于筛选</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>whereField<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GreaterWhere</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> whereField<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>whereField<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Where</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> whereField<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> paramExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为这个Property里面已经包含属性校验的功能，所以不用再另外写了</span>
        <span class="token class-name"><span class="token keyword">var</span></span> memberExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>paramExp<span class="token punctuation">,</span> whereField<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//值表达式</span>
        <span class="token class-name"><span class="token keyword">var</span></span> valueExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> exp <span class="token operator">=</span> type <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//小于</span>
            <span class="token number">1</span> <span class="token operator">=&gt;</span> Expression<span class="token punctuation">.</span><span class="token function">LessThan</span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> valueExp<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">//小于等于</span>
            <span class="token number">2</span> <span class="token operator">=&gt;</span> Expression<span class="token punctuation">.</span><span class="token function">LessThanOrEqual</span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> valueExp<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">//大于</span>
            <span class="token number">3</span> <span class="token operator">=&gt;</span> Expression<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> valueExp<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">//大于等于</span>
            <span class="token number">4</span> <span class="token operator">=&gt;</span> Expression<span class="token punctuation">.</span><span class="token function">GreaterThanOrEqual</span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> valueExp<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">//等于</span>
            _ <span class="token operator">=&gt;</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> valueExp<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> paramExp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配查询" tabindex="-1"><a class="header-anchor" href="#匹配查询"><span>匹配查询</span></a></h3><p>当我们用户表中查询一批数据，他们的账号姓名以及性别都需要匹配的时候，我们可以这么操作</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>var userList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>GetUserInfoResponse<span class="token operator">&gt;</span>
{
    new GetUserInfoResponse{  Account<span class="token operator">=</span><span class="token string">&quot;admin1&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man}<span class="token punctuation">,</span>
    new GetUserInfoResponse{  Account<span class="token operator">=</span><span class="token string">&quot;admin3&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man}<span class="token punctuation">,</span>
    new GetUserInfoResponse{  Account<span class="token operator">=</span><span class="token string">&quot;admin2&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man}
}<span class="token punctuation">;</span>

var p <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span><span class="token keyword">User</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

var parts <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Expression<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
foreach <span class="token punctuation">(</span>var item <span class="token operator">in</span> userList<span class="token punctuation">)</span>
{
    var accountProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>p<span class="token punctuation">,</span> nameof<span class="token punctuation">(</span><span class="token keyword">User</span><span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var accountValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Constant<span class="token punctuation">(</span>item<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">;</span>
    var accountExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Equal<span class="token punctuation">(</span>accountProperty<span class="token punctuation">,</span> accountValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    var nameProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>p<span class="token punctuation">,</span> nameof<span class="token punctuation">(</span><span class="token keyword">User</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var nameValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Constant<span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    var nameExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Equal<span class="token punctuation">(</span>nameProperty<span class="token punctuation">,</span> nameValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    var sexProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>p<span class="token punctuation">,</span> nameof<span class="token punctuation">(</span><span class="token keyword">User</span><span class="token punctuation">.</span>Sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var sexValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Constant<span class="token punctuation">(</span>item<span class="token punctuation">.</span>Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    var sexExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Equal<span class="token punctuation">(</span>sexProperty<span class="token punctuation">,</span> sexValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    var part <span class="token operator">=</span> Expression<span class="token punctuation">.</span>AndAlso<span class="token punctuation">(</span>accountExpression<span class="token punctuation">,</span> nameExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    var express <span class="token operator">=</span> Expression<span class="token punctuation">.</span>AndAlso<span class="token punctuation">(</span>part<span class="token punctuation">,</span> sexExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>

    parts<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span>AndAlso<span class="token punctuation">(</span>part<span class="token punctuation">,</span> sexExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
var body <span class="token operator">=</span> parts<span class="token punctuation">.</span>Aggregate<span class="token punctuation">(</span>Expression<span class="token punctuation">.</span>OrElse<span class="token punctuation">)</span><span class="token punctuation">;</span>
var filter <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">User</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

var queryString <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token keyword">Where</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">.</span>ToQueryString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成SQL如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SELECT u.id,
       u.account,
       u.create_time,
       u.credit,
       u.deleted,
       u.group_id,
       u.modify_time,
       u.name,
       u.pass_word,
       u.sex
FROM sample.&quot;user&quot; AS u
WHERE NOT (u.deleted)
  AND (((((u.account = &#39;admin1&#39;) AND (u.name = &#39;张三&#39;)) AND (u.sex = 1)) OR
        (((u.account = &#39;admin3&#39;) AND (u.name = &#39;王五&#39;)) AND (u.sex = 1))) OR
       (((u.account = &#39;admin2&#39;) AND (u.name = &#39;李四&#39;)) AND (u.sex = 1)))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态排序" tabindex="-1"><a class="header-anchor" href="#动态排序"><span>动态排序</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DynamicOrderby</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 实现效果</span>
    <span class="token class-name"><span class="token keyword">var</span></span> userQueryable <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sortList <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>CreatedDate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> sortList<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>CreatedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通过表达式树去实现效果</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;CreatedDate&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>CreatedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpressExtensons</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 根据字段排序处理</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>泛型列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>查询queryable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sortField<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>排序列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isAsc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>true正序 false倒序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">OrderBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortField<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> property <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>sortField<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;无效的属性 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sortField</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> memberExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> orderbeExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Lambda</span><span class="token punctuation">(</span>memberExpression<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> orderMethod <span class="token operator">=</span> isAsc <span class="token punctuation">?</span> <span class="token string">&quot;OrderBy&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;OrderByDescending&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resultExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Queryable</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderMethod<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> queryable<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span> property<span class="token punctuation">.</span>PropertyType <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                               <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Expression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> queryable<span class="token punctuation">.</span>Expression<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Quote</span><span class="token punctuation">(</span>orderbeExpression<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>resultExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="筛选加排序" tabindex="-1"><a class="header-anchor" href="#筛选加排序"><span>筛选加排序</span></a></h3><p>其中的排序代码使用上面排序的扩展方法来完成。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SampleDynamicWhere2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> userQueryable <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//实现效果</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&quot;张三&quot;</span> <span class="token operator">||</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Length<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1. 表达式树写法</span>
    <span class="token class-name">ParameterExpression</span> paramExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserDto</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ParameterExpression</span> paramExpName <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserDto</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1.1 开始构造 Where(t =&gt; t.Name.ToUpper()==&quot;张三&quot; || t.Name.Length&gt;1)</span>

    <span class="token comment">//1.1.1 构造表达式 t.Name.ToUpper()==&quot;张三&quot;</span>
    <span class="token comment">//方案一：这段话还有问题 所以用下面的写法来实现</span>
    <span class="token comment">// Expression left = Expression.Call(paramExpName, typeof(string).GetMethod(&quot;ToUpper&quot;, Type.EmptyTypes));</span>

    <span class="token comment">//方案二 可行</span>
    <span class="token class-name"><span class="token keyword">var</span></span> leftMemberExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>paramExp<span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Expression</span> left <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>leftMemberExp<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;ToUpper&quot;</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Expression</span> right <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Expression</span> equalExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1.1.2 构建表达式t.Name.Length&gt;1</span>
    left<span class="token operator">=</span>Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>leftMemberExp<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    right<span class="token operator">=</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Expression</span> greaterThenExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">GreaterThanOrEqual</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//var resultSample = userQueryable.Where(Expression.Lambda&lt;Func&lt;UserDto, bool&gt;&gt;(greaterThenExp, paramExp)).ToList();</span>

    <span class="token comment">//1.2 构造上面两个表达式或</span>
    <span class="token class-name">Expression</span> predictBody <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">OrElse</span><span class="token punctuation">(</span>equalExp<span class="token punctuation">,</span> greaterThenExp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1.3 构建where表达式</span>
    <span class="token comment">//Expression&lt;Func&lt;UserDto, bool&gt;&gt; lambda = Expression.Lambda&lt;Func&lt;UserDto, bool&gt;&gt;(predictBody, paramExpName);</span>
    <span class="token class-name">MethodCallExpression</span> whereCallExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Queryable</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Where&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> userQueryable<span class="token punctuation">.</span>ElementType <span class="token punctuation">}</span><span class="token punctuation">,</span> userQueryable<span class="token punctuation">.</span>Expression<span class="token punctuation">,</span>
        Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>predictBody<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> paramExp <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1.4 构造OrderBy(t =&gt; t.Id)</span>
    <span class="token comment">// 使用扩展方法来操作实现动态排序操作：扩展方法看动态排序</span>

    <span class="token comment">//1.5 创建查询</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result2 <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> result2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询"><span>模糊查询</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> props <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span>
                                    System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>BindingFlags<span class="token punctuation">.</span>Instance <span class="token operator">|</span>
                                    System<span class="token punctuation">.</span>Reflection<span class="token punctuation">.</span>BindingFlags<span class="token punctuation">.</span>DeclaredOnly<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">QueryFilterFieldAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> query<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Expression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token class-name">ParameterExpression</span> param <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ConstantExpression</span> constant <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>requestDto<span class="token punctuation">.</span>Filter<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> props<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">MemberExpression</span> body <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodCallExpression</span> methodCall <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Contains&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AbpException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        constant<span class="token punctuation">)</span><span class="token punctuation">;</span>

    filterExpression <span class="token operator">=</span> filterExpression <span class="token operator">==</span> <span class="token keyword">null</span>
        <span class="token punctuation">?</span> <span class="token punctuation">(</span>Expression<span class="token punctuation">)</span>methodCall
        <span class="token punctuation">:</span> Expression<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>filterExpression<span class="token punctuation">,</span> methodCall<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>filterExpression <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> query<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>filterExpression<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态查询指定属性" tabindex="-1"><a class="header-anchor" href="#动态查询指定属性"><span>动态查询指定属性</span></a></h3><p>通过传递一个字符串，然后查询指定的列返回</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userQueryable <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ParameterExpression</span> parameter1 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UserDto</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MemberExpression</span> men <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> selectFieldExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>men<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> parameter1 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>selectFieldExpression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过编写一个映射后的类实现简单的对应映射转换</p><blockquote><p>注意：如果映射后的类包含多余的列会出错，示例为demo。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DynamicSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> userQueryable <span class="token operator">=</span> UserDto<span class="token punctuation">.</span><span class="token function">GetUserDtos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 简单映射转换</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result2 <span class="token operator">=</span> userQueryable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SelectMapper</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">,</span> UserTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpressExtensons</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 查询映射</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>M<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryable<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>M<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">SelectMapper</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> M<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> queryable<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> mapperType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> listBinding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>MemberBinding<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mapperType<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name"><span class="token keyword">var</span></span> mem <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// t.name</span>
            <span class="token class-name"><span class="token keyword">var</span></span> member <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMember</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">MemberBinding</span> memBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> mem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里传mem是用t.name给他赋值</span>
            listBinding<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> memberExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>newExpression<span class="token punctuation">,</span> listBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> selectExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> M<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>memberExp<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> parameter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> queryable<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>selectExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h3><p>如果我们使用表达式树进行实现深拷贝，那么我们需要用下面的方式实现</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Student<span class="token punctuation">,</span> StudentSecond<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ss <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StudentSecond</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Name <span class="token operator">=</span> x<span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> f <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">StudentSecond</span> studentSecond <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
	studentSecond<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentSecond</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面内容反编译后为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ParameterExpression</span> parameterExpression<span class="token punctuation">;</span>
<span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Student<span class="token punctuation">,</span> StudentSecond<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ss <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Student<span class="token punctuation">,</span> StudentSecond<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">StudentSecond</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemberBinding<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
	Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token function">methodof</span><span class="token punctuation">(</span>StudentSecond<span class="token punctuation">.</span><span class="token function">set_Age</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token function">methodof</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token function">get_Age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token function">methodof</span><span class="token punctuation">(</span>StudentSecond<span class="token punctuation">.</span><span class="token function">set_Id</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token function">methodof</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token function">get_Id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token function">methodof</span><span class="token punctuation">(</span>StudentSecond<span class="token punctuation">.</span><span class="token function">set_Name</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token function">methodof</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token function">get_Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
	parameterExpression
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span>Student<span class="token punctuation">,</span> StudentSecond<span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">StudentSecond</span> studentSecond <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么也就是说我们只要用反射循环所有的属性然后Expression.Bind所有的属性。最后调用Compile()(s)就可以获取正确的StudentSecond。那么可以写出来下面的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> ss <span class="token operator">=</span> TransExpV2<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> StudentSecond<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">Trans</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ss<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentSecond</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TransExpV2<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span></span> <span class="token function">GetFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">ParameterExpression</span> parameterExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TIn</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List<span class="token punctuation">&lt;</span>MemberBinding<span class="token punctuation">&gt;</span></span> memberBindingList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>MemberBinding<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TOut</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>CanWrite<span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>

			<span class="token class-name">MemberExpression</span> property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TIn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">MemberBinding</span> memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
			memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token class-name">MemberInitExpression</span> memberInitExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TOut</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberBindingList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>memberInitExpression<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterExpression<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> parameterExpression <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">TOut</span> <span class="token function">Trans</span><span class="token punctuation">(</span><span class="token class-name">TIn</span> tIn<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">cache</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可视化查看" tabindex="-1"><a class="header-anchor" href="#可视化查看"><span>可视化查看</span></a></h2><p>既然表达式树是一颗表示运算逻辑的抽象语法树，那么我们就找更方便的方案查看表达式树</p><ul><li>LinqPad的输出</li><li>Visual Studio调试程序，在快速监视窗口中查看变量的值，展开Raw View查看</li><li>使用Expression Tree Visualizer查看(插件安装麻烦) <ul><li>可以使用nuget包ExpressionTreeToString来查看</li></ul></li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>表达式树是给框架的作者用的</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><p>表达式树的代码是非常复杂的，代码易读性查、可维护性查，所以在开发中还是尽量避免动态去构建表达式树。</p><h2 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h2>`,60),d={href:"https://github.com/xljiulang/PredicateLib",target:"_blank",rel:"noopener noreferrer"},m=s("h2",{id:"资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#资料"},[s("span",null,"资料")])],-1),v={href:"https://www.cnblogs.com/li-peng/p/3154381.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://masuit.org/1795?t=v5wlwn042vi8",target:"_blank",rel:"noopener noreferrer"},g={href:"https://mp.weixin.qq.com/s/iCJMk2dJuEKaRu6V71m1CA",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/ls0001/p/17395510.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://ex.whuanle.cn",target:"_blank",rel:"noopener noreferrer"};function h(x,f){const a=e("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("System.Linq.Dynamic.Core这个开源项目，它允许开发人员使用字符串格式的语法来进行数据操作。 谓词筛选表达式Expression<Func<T, bool>>的扩展库："),s("a",d,[n("https://github.com/xljiulang/PredicateLib"),t(a)])]),m,s("p",null,[n("表达式树资料："),s("a",v,[n("https://www.cnblogs.com/li-peng/p/3154381.html"),t(a)]),n(" 表达式树保姆级教程："),s("a",b,[n("https://masuit.org/1795?t=v5wlwn042vi8"),t(a)]),s("a",g,[n("https://mp.weixin.qq.com/s/iCJMk2dJuEKaRu6V71m1CA"),t(a)]),n(" | C## 最完善的表达式树 Expression.Dynamic的玩法 基于Expression Lambda表达式树的通用复杂动态查询构建器："),s("a",y,[n("https://www.cnblogs.com/ls0001/p/17395510.html"),t(a)]),n(" C## 表达式树："),s("a",w,[n("https://ex.whuanle.cn"),t(a)])])])}const T=p(k,[["render",h],["__file","biaodashishu.html.vue"]]),S=JSON.parse('{"path":"/dotnet/csharp/gaojizhuti/biaodashishu.html","title":"表达式树","lang":"zh-CN","frontmatter":{"title":"表达式树","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"biaodashishu","slug":"au4h3x","docsId":"64460622","description":"概述 表达式树是用树形数据结构来表示代码逻辑运算的技术，它让我们可以在运行时访问逻辑运算的结构。 和委托关系 表达式树其实与委托已经没什么关系了，非要扯上关系，那就这么说吧，表达式树是存放委托的容器。 要用Lambda表达式的时候，直接从表达式中获取出来，Compile()就可以直接用了。如下代码： Expression对象存储了运算逻辑，它把运算逻辑...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/gaojizhuti/biaodashishu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"表达式树"}],["meta",{"property":"og:description","content":"概述 表达式树是用树形数据结构来表示代码逻辑运算的技术，它让我们可以在运行时访问逻辑运算的结构。 和委托关系 表达式树其实与委托已经没什么关系了，非要扯上关系，那就这么说吧，表达式树是存放委托的容器。 要用Lambda表达式的时候，直接从表达式中获取出来，Compile()就可以直接用了。如下代码： Expression对象存储了运算逻辑，它把运算逻辑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1671202693169-f39655ca-641f-40fe-bd95-be921d3b41aa.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"表达式树\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1671202693169-f39655ca-641f-40fe-bd95-be921d3b41aa.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1671202706366-58d80567-a4e2-406f-bfe1-546cc31eda2f.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"和委托关系","slug":"和委托关系","link":"#和委托关系","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"常见工厂方法说明","slug":"常见工厂方法说明","link":"#常见工厂方法说明","children":[]},{"level":3,"title":"生成表达式树","slug":"生成表达式树","link":"#生成表达式树","children":[]},{"level":3,"title":"简单筛选","slug":"简单筛选","link":"#简单筛选","children":[]},{"level":3,"title":"动态筛选","slug":"动态筛选","link":"#动态筛选","children":[]},{"level":3,"title":"匹配查询","slug":"匹配查询","link":"#匹配查询","children":[]},{"level":3,"title":"动态排序","slug":"动态排序","link":"#动态排序","children":[]},{"level":3,"title":"筛选加排序","slug":"筛选加排序","link":"#筛选加排序","children":[]},{"level":3,"title":"模糊查询","slug":"模糊查询","link":"#模糊查询","children":[]},{"level":3,"title":"动态查询指定属性","slug":"动态查询指定属性","link":"#动态查询指定属性","children":[]},{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}]},{"level":2,"title":"可视化查看","slug":"可视化查看","link":"#可视化查看","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"开源项目","slug":"开源项目","link":"#开源项目","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":9.1,"words":2729},"filePathRelative":"dotnet/csharp/gaojizhuti/biaodashishu.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>表达式树是用树形数据结构来表示代码逻辑运算的技术，它让我们可以在运行时访问逻辑运算的结构。</p>\\n<h2>和委托关系</h2>\\n<p>表达式树其实与委托已经没什么关系了，非要扯上关系，那就这么说吧，表达式树是存放委托的容器。\\n要用Lambda表达式的时候，直接从表达式中获取出来，Compile()就可以直接用了。如下代码：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Expression<span class=\\"token punctuation\\">&lt;</span>Func<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> exp <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> x <span class=\\"token operator\\">+</span> y<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Func<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span> fun <span class=\\"token operator\\">=</span> exp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Compile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">fun</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{T as comp,S as data};
