const __vite__fileDeps=["assets/intro.html-CVffinkg.js","assets/plugin-vue_export-helper-DlAUqK2U.js","assets/index.html-E_KBQXFJ.js","assets/index.html-i47klO7S.js","assets/collect.html-Dh7Y5ObF.js","assets/developmentProductManager.html-CCTchhqY.js","assets/goodHabit.html-xdBsq7Mp.js","assets/jingdianyulu.html-DFt1OAl0.js","assets/nenglishuipinghegongzuolouxi.html-YJopYvdj.js","assets/resourceManage.html-GJBGjseg.js","assets/workStepByStep.html-BU8UMHFp.js","assets/dapr.html-Cn4WSEpY.js","assets/dockerswarm.html-Dk1wUWOd.js","assets/index.html-pisnkAmV.js","assets/anti-fraud.html-BunCfbMK.js","assets/csharp.html-DI1Gk9b-.js","assets/dataBase.html-vOpEDt8p.js","assets/design_mode.html-BqDcxAjP.js","assets/dotnet.html-Ch8AhwZt.js","assets/elasticsearch.html-FIR06XZ9.js","assets/interviewHandbook.html-2VL8c5d1.js","assets/interviewHandbook2.html-B4HfPmno.js","assets/jianli.html-D2D-3bpO.js","assets/mongodb.html-BeXFfiZN.js","assets/mysql.html-CftAfKul.js","assets/nginx.html-BDcrSY4z.js","assets/personnelProblem.html-_XAH9fKA.js","assets/rabbitmq.html-JEdkmHGg.js","assets/redis.html-CfPXPD6c.js","assets/reserverOperator.html-D0EQLP3v.js","assets/small_service.html-mhDu1qHq.js","assets/wpfInterview.html-DnntTpxJ.js","assets/cli.html-BaDiXED_.js","assets/dotNetAspire.html-9_5ypAbp.js","assets/duoyuyanpeizhi.html-LL7LdVCK.js","assets/kiota.html-CL8-Co7x.js","assets/index.html-sxhFilOp.js","assets/semantickernel.html-CWfzsyj5.js","assets/solutionItems.html-CbywSSer.js","assets/baoxian.html-M60f3Cl8.js","assets/domesticBrand.html-CEBZ65ip.js","assets/food.html-0kXYz9FF.js","assets/found.html-Sz-jO-Kw.js","assets/gaishu.html-D7ZkTYAb.js","assets/housing.html-CiHBUHxT.js","assets/music.html-DQdblng8.js","assets/richangtousu.html-DspvS1B8.js","assets/socialInsurance.html-n69XDedf.js","assets/trip.html-CpzWclqI.js","assets/wanggougonglve.html-6qPPOVEh.js","assets/index.html-LlWH64G2.js","assets/graphql.html-B8AVvZSB.js","assets/index.html-BXSrRVCu.js","assets/shujuqianyi.html-BU1P6JFP.js","assets/sonar.html-DkIJvNPT.js","assets/zhifuzujian.html--GYpmP05.js","assets/browserPlug.html-vq6Nc0C5.js","assets/game.html-BvIKyBnt.js","assets/photoshop.html-CFI_jusz.js","assets/softCollection.html-CA1v2Ycs.js","assets/uos.html-DQkORCUP.js","assets/webAddress.html-CjMJTdhw.js","assets/baseTheory.html-B1ySdIpp.js","assets/bianchengsaixiang.html-C5JzNv8D.js","assets/changjianderuanjianjiagougaishu.html-J2aJ5WED.js","assets/openSourceProject.html-BZHEXFIG.js","assets/index.html-Ded0z2Fa.js","assets/systemLogOperation.html-Bt7BbzlZ.js","assets/understandingComplexBusiness.html-CmNWml72.js","assets/xuqiufenxihesheji.html-B_cBFJ6f.js","assets/generateCSharpClass.html-uZGssZCw.js","assets/imageOperator.html-Y_38xtF7.js","assets/movie.html-CNHD8c8c.js","assets/pipelineMethodCompletesComplexProcess.html-C1Q2fMBO.js","assets/index.html-eMy37dkA.js","assets/script.html-UG1t5cO0.js","assets/upperComputer.html-BzmstZN1.js","assets/javascript.html-s3Ue4-Px.js","assets/jiaoYuPlatform.html-UTsGaytd.js","assets/notSuchABadProgrammer.html-CLUabFvL.js","assets/studyMethod.html-CEYcwSUY.js","assets/zhishixuexifangfalun.html-D_r8o8G1.js","assets/jibencaozuo.html-DmVfuHQJ.js","assets/jieshao.html-Da3AVLTk.js","assets/changyongcaozuo.html-Beg6Xdn_.js","assets/shuiming.html-Cv4jZ8ct.js","assets/datagriplianjie.html-BI_q8LMM.js","assets/gaishu.html-sSehgLl6.js","assets/jieshao.html-D3FN7J6B.js","assets/cacheDbConsistency.html-rZSmjwAn.js","assets/dashujuchaxunkuaisuyouhua.html-x0WDtiaQ.js","assets/executeOrder.html-D0ixG4vT.js","assets/fenkufenbiao.html-CH4NWC72.js","assets/jiejuefangan.html-D1duSFhm.js","assets/nosqlReadme.html-gUU5xmA2.js","assets/index.html-xKU6y5oe.js","assets/shiwu.html-BvSsN5MY.js","assets/shujukulianjiechi.html-VoC5RQ8r.js","assets/shujukuqianyi.html-CdNecWEa.js","assets/shujukusheji.html-D5rdE7xM.js","assets/suoyin.html-CIooLaq8.js","assets/liulanqishujuku.html-Bt2RuMBD.js","assets/gaishu.html-BrwNoIy5.js","assets/daimacaozuo.html-C4G3mQMX.js","assets/gainianjiexi.html-C7Ea2fzP.js","assets/jibencaozuo.html-D2XDJsLZ.js","assets/jieshao.html-dXJGPGjP.js","assets/shiyongchangjing.html-Ch3vWvki.js","assets/zhihangjihua.html--i4uTUQw.js","assets/codeOperator.html-BPiwRw36.js","assets/dbHelperMySQL.html-Cn4jjGpo.js","assets/shuiming.html-BwBu3DP8.js","assets/index.html-Vl98wCV0.js","assets/changyongshujuleixing.html-By7M1Ue8.js","assets/dblink.html-d46WiouQ.js","assets/hanshu.html-F8aY0Q3l.js","assets/jichucaozuo.html-Br14HTz7.js","assets/shuiming.html-DTJ42-Tl.js","assets/anzhuang.html-BmYJJcVW.js","assets/hanshu.html-Ci03W63T.js","assets/jichuzhishi.html-CWn_SfzT.js","assets/shouquan.html-EX5e3ncR.js","assets/shuiming.html-C2GlJRM9.js","assets/shujukushiwu.html-BtwI0Siy.js","assets/zhihangjihua.html-B_qSZhRt.js","assets/zhuaiyizifu.html-C9B_zXNN.js","assets/duolufuyong.html-CAo0wGIw.js","assets/jichumingling.html-DTxnz2Wz.js","assets/quanwenjiansuo.html-VFYYwd7t.js","assets/index.html-CXQjdP7L.js","assets/redisfabudingyue.html-CgJGzUym.js","assets/redisxiaoxiduilie.html-CpJImVR1.js","assets/jichuzhishi.html-C--l2yN3.js","assets/jieshao.html-BYUx9Wbl.js","assets/sqlitefts5.html-Do71UBXk.js","assets/dbhelper.html-gpmiXVaK.js","assets/dingshibeifenjihua.html-CKShcw_C.js","assets/issue.html-DdAA3XA5.js","assets/index.html-BiTx7zLY.js","assets/tazhan.html-Dewji2sc.js","assets/sqlshenhechaxunpingtai.html-BGKH2ycS.js","assets/flubucore.html-BR0GU4Lp.js","assets/gitliuchenghedevopsliucheng.html-BaPl0aIQ.js","assets/index.html-ep5ldXKW.js","assets/teamcity.html-JA4rU1AB.js","assets/index.html-KO_tud1w.js","assets/index.html-DEOegyXQ.js","assets/install.html-9r45GPsd.js","assets/k3sDeployKuboard.html-BEH_DDUO.js","assets/index.html-CPNMSjja.js","assets/bushuwenjian.html-C0hIlENX.js","assets/changyonggainian.html-hkU8wmEI.js","assets/fuwufaxian.html-DXSPWTkB.js","assets/gitlabhek8szidonghuafabu.html-VAb903BR.js","assets/k9s.html-DYmO_ix5.js","assets/index.html-9IRt5Xi5.js","assets/wanglaotongxin.html-CGVXAEcP.js","assets/common.html-C2XWFtTV.js","assets/diguiyouhua.html-BV15KWZe.js","assets/fuzadu.html-5RkTM_Tj.js","assets/index.html-BfwzG3hX.js","assets/sortAlgorithm.html-Bp43pYD8.js","assets/taskOperator.html-DuXhHYdL.js","assets/weiyuyunsuan.html-CbNjnHK2.js","assets/youxiangmohuantutu.html-BCEL_3JF.js","assets/index.html-oqHr3zqU.js","assets/singleLinkedList.html-sZCA3Q44.js","assets/index.html-BBTOauCT.js","assets/tcp.html-D8Y72NoA.js","assets/cpu.html-DWnccf-A.js","assets/memory.html-RaoO49v2.js","assets/taskRunStatus.html-B1NpqKPq.js","assets/shujubaohudataprotection.html-DX_mlyGE.js","assets/aspectcore_core.html-DTrG_nlZ.js","assets/castle_dynamicproxy.html-DgPquXh_.js","assets/dispatchproxy.html-DXqMV5qk.js","assets/dora_interception.html-CYD9g5sC.js","assets/fody.html-jUDJdQ56.js","assets/mradvice.html-B8nHc52L.js","assets/postsharp.html-tQs_AOws.js","assets/index.html-Djkox3Hj.js","assets/rougamo.html-CzVH0Spt.js","assets/apilanjie.html-DkpobNd5.js","assets/connectedservices.html-IZKmO3Cb.js","assets/curldehttpqingqiu.html-Bshmx8Q5.js","assets/miniapi.html-lnpmwKt3.js","assets/qingqiubiaoshichuandi.html-Crnp6YTi.js","assets/shiyonghttprepljinhangceshi.html-fqHTE9Hu.js","assets/shujuchuanshujiami.html-DZmbOTPX.js","assets/sse.html-CUGhqDkA.js","assets/webTransport.html-CPVe65w7.js","assets/issue.html-CKjLcYSN.js","assets/openSourceComponent.html-D_NmgzTk.js","assets/operator.html-CST1_059.js","assets/index.html-B49Olhqx.js","assets/chengxuji.html-CL5U37za.js","assets/diaoyongzhexinxi.html-CVF4sL6P.js","assets/ihostedservicerenwu.html-Dnuhucl3.js","assets/aot.html-DyweOzy_.js","assets/obfuscator.html-BFRCa_X_.js","assets/index.html-BV8_QfD-.js","assets/caozuo.html-Ptg6wEJM.js","assets/huoqukuangjiadebanbenhao.html-DDEIno5v.js","assets/interceptDLL.html-DOumjahD.js","assets/jiangdllneiqiandll.html-BsDRN283.js","assets/nixiangfanbianyigongju.html-PvjokSfL.js","assets/pInvokeDLL.html-wZ3axVaP.js","assets/downloader.html-zTC7YbT4.js","assets/iniwenjiandouxie.html-C6UosCdD.js","assets/ipchuli.html-DCaFjmaS.js","assets/leizhuaiurl.html-ChMyS3vt.js","assets/qianggongbaosuanfa.html-BW0XL3WZ.js","assets/index.html-vFJXTLzO.js","assets/communitytoolkit.html-DiZO0pf9.js","assets/diaoduqi.html-sSJPQPHP.js","assets/file.html-CkxMIMZ4.js","assets/fluentftp.html-_g63GX7K.js","assets/hanshushibiancheng.html-Df1B8uY9.js","assets/ikvmOperation.html-D6cE5PS3.js","assets/jiaobenjieshiqi.html-DiI2ShmB.js","assets/kongzhitaishuchu.html-WmrXpGLi.js","assets/minglinghang.html-Ce_fvfr6.js","assets/shijianchuli.html-gT__x83f.js","assets/textOperation.html-D0L3CM3p.js","assets/tongyong.html-CwEjqogz.js","assets/changyongcaozuo.html-Dl0WAjti.js","assets/bulongguolvqi.html-BExQ6wm5.js","assets/changedaimajiexi.html-B4sVfTcA.js","assets/clr.html-BXVvPIbM.js","assets/cSharpStandard.html-Biht69ni.js","assets/cunchujiegou.html-C1kEHX40.js","assets/digui.html-B-0WT-vt.js","assets/dingshiqi.html-C8uAAk9d.js","assets/dongtaishengchengdaima.html-CO3WFiJM.js","assets/dtohepoco.html-64_Nu1IT.js","assets/emit.html-BKsW4tZz.js","assets/jiaoyanfangfa.html-26NvbwHM.js","assets/kaobeifangfa.html-pK4V_U_6.js","assets/leixingzhuaihuan.html-DTMFXRVV.js","assets/mingmingmoshi.html-Do1mdr6T.js","assets/pooling.html-CoZmqJQG.js","assets/index.html-DJE0ZVBG.js","assets/wanglao.html-DP7qfwDO.js","assets/yasuhejieyasu.html-CuCd0ge1.js","assets/yichang.html-BD5LTGNa.js","assets/yuyanbanbenjilu.html-z7h4D9rX.js","assets/zhengzebiaodashijiaoyan.html-DdW1vCSV.js","assets/shibairenwuchongshi.html-ECaKwbef.js","assets/daimazhiliang.html-BZx-8oB7.js","assets/fenxigongju.html-Dijp0XHS.js","assets/index.html-C4OmwCmy.js","assets/yuandaimafenxi.html-MqJnVTha.js","assets/daimayouhua.html-BW2_2Meg.js","assets/quanjuxingnengzhenduangongju.html-Chonoaww.js","assets/dumpAnalyses.html-CJUx2dLJ.js","assets/index.html-DdsYjZw9.js","assets/vs2022yuanchengdiaoshiiisfuwu.html-DL1f5O_-.js","assets/xianchengdiaoshi.html-BFVg3NOZ.js","assets/xingnengdiaoshi.html-kUsI11--.js","assets/appjiekoukaifa.html-9obkt4Rv.js","assets/shiyonggongneng.html-DNVm295e.js","assets/books.html-CjT6_wto.js","assets/jiaocheng.html-DJgIBAf3.js","assets/optimize.html-BpI12X5c.js","assets/ziliaojingshuajiagoupian.html-B4JZo-yk.js","assets/ziliaojingshuajinjiepian.html-B6BPQMtB.js","assets/ziliaojingshuarumenpian.html-CW1BBcIO.js","assets/changyonggongneng.html-BYI9PTST.js","assets/yingjianxinxihuoqu.html-BopKbZmV.js","assets/changyongprogrampeizhi.html-B7cPMoiy.js","assets/launchsettings_json.html-Bh0xbVuS.js","assets/mono.html-DKl3PJGh.js","assets/sdkgongzuofuzai.html-DKduGOiR.js","assets/shengmingzhoujicaozuo.html-DhKDdIu6.js","assets/startup.html-DjRfQPHf.js","assets/yuanmaxuexi.html-DojHFNM8.js","assets/kaiyuanxiangmu.html-aViv6xZG.js","assets/pingtaiapi.html-Cp4Ojrg1.js","assets/index.html-3zSBsc0E.js","assets/wenti.html-3XZp4Jyk.js","assets/xaml.html-DGBHBJRb.js","assets/index.html-DBnCxJO9.js","assets/jntemplate.html-QgfmF5ux.js","assets/index.html-BISeD-Wg.js","assets/dotNet6.html-ZovWDWSS.js","assets/dotNet8.html-CvDWgW82.js","assets/index.html-VCJLohvo.js","assets/baobanbenzidongshengji.html-D8BQRith.js","assets/jiaobenfabubao.html-Yzm_5wFQ.js","assets/index.html-Ch55XxWC.js","assets/genApiDoc.html-0SJF0uMY.js","assets/kaifasuidaoshiyong.html-B_NsQOO0.js","assets/vschajian.html-CEbFbs_O.js","assets/dotnetshengchengshujuku.html-DcG4Owp0.js","assets/messagepack.html-CHHWP1tt.js","assets/nginxshiyongwesocketwenti.html-B8cEkQu6.js","assets/qianhouduanfenli.html-CNomW2Rh.js","assets/signalr.html-Dbcy6D7G.js","assets/signalrfuzaijunheng.html--eDyqpx9.js","assets/signalrkuozhan.html-Ce-IEZtA.js","assets/signalrshiyongjwt.html-CBw6SmPq.js","assets/t4moban.html-CjK9lO39.js","assets/t4yufa.html-BPCQ0fFW.js","assets/index.html-BxdhcgmA.js","assets/index.html-CDKqwMzf.js","assets/serviceself.html-C5YOaUZW.js","assets/gaishu.html-BfbH_LXQ.js","assets/vue_jsdapeiwebapimoban.html-Bae_JvDL.js","assets/xiangmumobansheji.html-2BOITpFP.js","assets/index.html-BVarY4Mv.js","assets/shengjizhushou.html-CVBz73iw.js","assets/index.html-DVT-BRMi.js","assets/peizhicunchu.html-Di8WvUN_.js","assets/shangweijikaifa.html-CvzegmzV.js","assets/aifuzhu.html-Dc3tV6kh.js","assets/banZi.html-CzUqNkwb.js","assets/chatgptgeji.html-CVLrDx-I.js","assets/joke.html-DmyUigew.js","assets/dbhelper.html-CA49btGm.js","assets/dongruandaimashengchengqi.html-CTuYNwja.js","assets/issue.html-CEEubyM7.js","assets/operation.html-inkD0M91.js","assets/index.html-nJP9b9zo.js","assets/component.html-CAMNPE-f.js","assets/dapperCqrs.html-Bzn-Og5z.js","assets/dapperLite.html-ClPTwlZJ.js","assets/parameter.html-DRQSdKeu.js","assets/index.html-Hz1XxtPl.js","assets/ef.html-BFIWtLhB.js","assets/efcaozuo.html-CwGNxQH2.js","assets/linq_lambda.html-BiZ_keZH.js","assets/youhua.html-o1kt4FgF.js","assets/fengzhuanggonggonglei.html-BIfE5cGJ.js","assets/issue.html-B_yhQGf3.js","assets/jiamicunchushuju.html-4r-Kkofk.js","assets/quanjuyichanglanjie.html-ChL1te7K.js","assets/index.html-oFnwiWsF.js","assets/shijian(lishi)biao.html-P7PS-1rH.js","assets/youhua.html-DeHaGvnZ.js","assets/shuiming.html-CNdiq_oL.js","assets/jieshao.html-BgEK5Biy.js","assets/shuiming.html--TXkYbGo.js","assets/shuiming.html-CQ2MZ6QL.js","assets/odbcSqlServer.html-BvLUUnLs.js","assets/image-20231124182003534-NSgzGDMT.js","assets/index.html-BZ9hn28b.js","assets/jianjie.html-7JlgxCaE.js","assets/operation.html-DAbd3w66.js","assets/anzhuang.html-31A-GV46.js","assets/jichuzhishi.html-DAwWFgdp.js","assets/shuoming.html-DKaL2mwO.js","assets/bashjichuzhishi.html-z72him9y.js","assets/shelljichu.html-BA6A-bfI.js","assets/changjiancuowu.html-D3dODVDY.js","assets/changyongjiaoben.html-DsTdI_X4.js","assets/changyongjichugongneng.html-D7f5B-e-.js","assets/idechajian.html-Cm7Lzbls.js","assets/shuoming.html-CYuTjzgM.js","assets/xiaoshili.html-BabNrk2C.js","assets/xuexiziliao.html-DFLZzs2g.js","assets/youqukaiyuanxiangmu.html-CUx8jNym.js","assets/shuoming.html-CbgNGK0l.js","assets/keycloak.html-Cx4jAxwr.js","assets/openidconnect.html-DSohUw3M.js","assets/octokit.html-ku21FSUO.js","assets/duanlianjie.html-PDfnPtz7.js","assets/hashidsshixianduanlianjie.html-kMDRH8Rk.js","assets/aliyunduanxin.html-hw3ntUKf.js","assets/index.html-CbnsBHNV.js","assets/yunlianrongtongxunduanxin.html-Cw-P4cIX.js","assets/jieba_net.html-CJjOUT-n.js","assets/mingancizujian.html-BJagNW_U.js","assets/zhizuociyuntu.html-DA_h_m1q.js","assets/gaishu.html-DCwv62In.js","assets/redisearch.html-Q3U52akH.js","assets/ccflow.html-Cs1e9NWQ.js","assets/elsa.html-DjbZFmDb.js","assets/mxgraph.html-noGcdEV6.js","assets/index.html-DgaDT1XX.js","assets/visor_js.html-DeTZ9CbQ.js","assets/workflow-core.html-CWnYPFpn.js","assets/dotnetdaimayouxiangrpcfuwu.html-DY985wHR.js","assets/grpc-web.html-BkN4-RzR.js","assets/grpc.html-DEKuJa7E.js","assets/grpcdiaoshigongju.html-DaXaj0DK.js","assets/grpchttpapi.html-CMbt-V5b.js","assets/grpcliu.html-DdJB7AVS.js","assets/grpcsichongmoshi.html-DQeVtpHs.js","assets/jianquan.html-BYj1xde5.js","assets/protowenjian.html-C1e6gYqQ.js","assets/yichanglanjieqi.html-DM1-U4yr.js","assets/rulesengine.html-BZ7P_Lff.js","assets/fenbushiweiyibiaoshi.html-YThHEEmk.js","assets/hashidsjianduanzifuchuanid.html-CBMy3JcZ.js","assets/idhelperxuehuaid.html-BwW9ndfV.js","assets/jiyushujukufenbushiid.html-Bb71CxCY.js","assets/newidshunxuguid.html-B5LUhTD5.js","assets/ulid.html-Bzv7bXhW.js","assets/xuehuaidgonggonglei.html-VuVaWIDR.js","assets/yitterxuehuaid.html-Di8_nAvA.js","assets/stnodeeditor.html-DHCPMEb6.js","assets/notificationCollect.html-fCLZ6PjI.js","assets/notificationService.html-G6EemvQU.js","assets/anglesharp.html-lfq8wgbJ.js","assets/aspose.html-a-N10NdK.js","assets/closedxml.html-DAONKY_s.js","assets/epplus.html-D0a05QsV.js","assets/epubHandle.html-lCpZn5Me.js","assets/exceltohtml.html-_56dvdnf.js","assets/htmlagilitypack.html-PK7a2KaK.js","assets/miniexcel.html-CdriH8Wg.js","assets/miniword.html-BzEFfk7M.js","assets/nsoup.html-DsJzCGqK.js","assets/onlyoffice.html-DBReTt3g.js","assets/openxml.html-B7fhCQkB.js","assets/puppeteersharp.html-CVF_8r-5.js","assets/index.html-CKYB3vkj.js","assets/spire.html-MCZNNyoS.js","assets/towersoft_htmltoexcel.html-Bw7IwWAJ.js","assets/aliyunoss.html-DVA-9Zg2.js","assets/fastdfs.html-hH5BN1nm.js","assets/filebrowser.html-BWdaOGee.js","assets/fluentftp.html-FN9SXAGA.js","assets/httpfileserver.html-C116299i.js","assets/minio.html-5OuoNrNV.js","assets/qiniuyuncunchu.html-CvqRhXJB.js","assets/index.html-Cipka9R-.js","assets/tfs.html-NehlJr7w.js","assets/anglesharp.html-B5UuYP0e.js","assets/changyongzujian.html-DYfPdpcB.js","assets/fuzhugongju.html-Bw7vRhXe.js","assets/gaishu.html-Cj75cyeP.js","assets/htmlagilitypack.html-BgC8MxC7.js","assets/puppeteersharp.html-_uLeVIsk.js","assets/shili.html-C3VkgPLM.js","assets/fastreport.html-DElkRtnH.js","assets/index.html-BGNfRmnF.js","assets/antjob.html-Dl50NmN9.js","assets/coravel.html-98_GCOtE.js","assets/easyquartz.html-BIq9kdPE.js","assets/fluentscheduler.html-Dvn8L5SU.js","assets/hangfire.html-CP9NbckU.js","assets/index.html-Ys7OGx-K.js","assets/schedulemaster.html-Dlhe_t0S.js","assets/timerlei.html-BvvZ8ZWK.js","assets/xxl-job.html-NAEqFp-m.js","assets/traefik.html-CeXxzt-q.js","assets/jaina.html-BWX1ujAh.js","assets/masaframework.html-CLGgkZKc.js","assets/masstransit.html-CaGtLN5L.js","assets/mediatr.html-DTJS9Y-z.js","assets/index.html-CZOMPfA8.js","assets/shijianzongxianneicunmoshi.html-yxfKgrIa.js","assets/slimmessagebus.html-BrYgJB5f.js","assets/zack_eventbusrabbitmq.html-D9I1dKN2.js","assets/jiagoutu.html-BMPk7z4F.js","assets/polly.html-BQe2U6C3.js","assets/index.html-CTGhVUHp.js","assets/rongduanjiangji.html-DXZbRj2A.js","assets/xianliu.html-VFMwOluE.js","assets/duochongmaskiasharp_qrcode.html-RuyNQbjO.js","assets/duochongmazxing_net.html-Dm68P2Qp.js","assets/huoqushexiangtoupaizhao.html-CeLyQloo.js","assets/imagesharp.html-DeBo3QAa.js","assets/magick_net.html-DKkwJtqd.js","assets/qrcodegenerator.html-D1Be-4B2.js","assets/index.html-BqtiD-qJ.js","assets/systemDrawingCommon.html-KHbsTop3.js","assets/tiaoxingmabarcodelib.html-D0DNGqR1.js","assets/changyongleiku.html-BVNSuHop.js","assets/jianshu.html-BF-i2gN3.js","assets/monihttpxiangying.html-DvSyigT_.js","assets/qiyaoceshi.html-C9ghrzxy.js","assets/specflowhangweiceshi.html-BW4E0EJi.js","assets/changjianwenti.html-l6CZnD_4.js","assets/gaishu.html-C5x_hYaE.js","assets/kafka.html-DDkZOxT-.js","assets/mqtt.html-CJX6aRvK.js","assets/pulsar.html-DwLQ4eDB.js","assets/xiaoxiduilieredis.html-DMsJFDNR.js","assets/hangfireyanchiduilie.html-orUqAQS9.js","assets/jianjie.html-SgsJtf1c.js","assets/jishiguanliqi.html-CZduo1X0.js","assets/redishuancunguojishijian.html-Dy2WN1u0.js","assets/zidingyiyanchiduilie.html-Bk9ZvcQT.js","assets/speechsynthesizeryuyin.html-5TbC8Zky.js","assets/whisper_net.html-KWgJYby0.js","assets/yuyinliaotian.html-Df_pRFqB.js","assets/irony.html-CTodIRIT.js","assets/sqljiexi.html-B_DwkSum.js","assets/cliwrap.html-aHzhMeea.js","assets/flaUIAutomation.html-3-J7Lo_Q.js","assets/netautogui.html-DxvLjzpg.js","assets/index.html-Be1L9poZ.js","assets/uiautomation.html-C7bR2e1M.js","assets/codeConfig.html-CkYiKKbV.js","assets/codeStatistics.html-ZyN0zm7o.js","assets/communicationTest.html-zd9w8Eja.js","assets/linqpad.html-1ezVV8cY.js","assets/neiwangchuantou.html-Byo8GM5J.js","assets/nssm.html-Boa-P9I5.js","assets/openSourceProtocol.html-BoGzY3vG.js","assets/vscode.html-B881qX2H.js","assets/baocunfanghuoqiangguize.html-BPNoUH9E.js","assets/linux.html-Dw_D0OAm.js","assets/selinux.html-u-X3RnjN.js","assets/shCommand.html-C_JWYgZB.js","assets/tools.html-CmQswxIK.js","assets/ddns.html-B7QF8YN0.js","assets/dns.html-DGHhJ7Cd.js","assets/fangwenneiwangfuwu.html-BWu1kgwL.js","assets/index.html-Di4UtrpD.js","assets/zhengshu.html-BI8jkg3I.js","assets/batmingling.html-DjS244X1.js","assets/cipanqingli.html-CfuqOQPv.js","assets/docsWeb.html-AwBE6mUY.js","assets/hyperv.html-B_AMPp9S.js","assets/mdTools.html-DOllmYVl.js","assets/picGoImageStorage.html-iZce0w0W.js","assets/sortRecommend.html-BuBs4Nl_.js","assets/windows.html-tlr8o5K7.js","assets/windowsSeverInstall.html-CAdUaBm4.js","assets/windowsStore.html-CRZFrRVF.js","assets/wslLinux.html-kmG37ePw.js","assets/clearArchitecture.html-JZQesQAa.js","assets/codingPractice.html-D-iBMh9v.js","assets/index.html-lXwDpYgy.js","assets/designPrinciples.html-D6polXbW.js","assets/ruhepingjiadaimahaohuai.html-Cbjed5rx.js","assets/shuiming.html-vbtglMpp.js","assets/manyTenant.html-BEKI9Nxj.js","assets/wtm.html-CE5fxtnD.js","assets/erpSystem.html--AiiRkr9.js","assets/quanxianjitong.html-l9mtXqwv.js","assets/wmsSystem.html-D2H9u2uX.js","assets/clientTryOut.html-D5X_slWA.js","assets/loginSecurity.html-zerrOVBS.js","assets/oneTimePassword.html-DfPVfDDS.js","assets/softLicence.html-3L9V3fTT.js","assets/blazorise.html-DiWpXWlo.js","assets/blazorspark.html-Cr9UYtGy.js","assets/openSourceSample.html-W6RqihbH.js","assets/index.html-Cho_iRRO.js","assets/ajaxyibutongbu.html-Df6ZpBrw.js","assets/shuiming.html-YTjfg04a.js","assets/pnpm.html-C5M4dUPY.js","assets/shuiming.html-DhQ95vxp.js","assets/changyongcaozuo.html-ZOZiE7vf.js","assets/shuiming.html-C8iEGgTQ.js","assets/borwserduixiang.html-BoVXxtJA.js","assets/freeApi.html-BfDAHVjE.js","assets/htmlgeshi.html-nlury7Jk.js","assets/http.html-CLzDguGU.js","assets/spa.html-BmSGpP5a.js","assets/sucaishouji.html-BRsZqNe0.js","assets/webscoket.html--fhhuf9B.js","assets/dbtool.html-BqVzAD45.js","assets/docker-composebushumongodb.html-B_wuelDl.js","assets/linuxanzhuang.html-DiXEzF_z.js","assets/windowsanzhuang.html-bFsXQ3t3.js","assets/dockerInstall.html-DYk33n_Z.js","assets/linuxInstall.html-UPg34Pvs.js","assets/index.html-DDSxfdZe.js","assets/windowInstall.html-GxbAxR9j.js","assets/mysqlbeifenjiaoben.html-D8v0mB6H.js","assets/mysqldumpOperator.html-BM9cfhq0.js","assets/chaxunshuju.html-Dpv0U-EN.js","assets/cunchuguocheng.html-DELbdf6H.js","assets/fenoubiao.html-BtZBC-OB.js","assets/hanshu.html-CohS2966.js","assets/jichuzhishi.html-BFQ6WrgT.js","assets/liecaozuo.html-B3GwBe5u.js","assets/mysqlshujuleixing.html-Drqxv36Y.js","assets/shiwu.html-CGVkwl9D.js","assets/shujubiao.html-BQQnnpjo.js","assets/suo.html-Z-a2Do8I.js","assets/suoyin.html-COVbNBzi.js","assets/utf8heutf8mb4deoubie.html-C5MphQ-b.js","assets/yaoshutiaojian.html-CDzRzWsO.js","assets/zhihangshunxu.html-Ctriucuv.js","assets/zhihangyugou.html-CeCkS1Xo.js","assets/federated.html-7qFYuILc.js","assets/zhucongfuzhi.html-Dff7o3NB.js","assets/duibi.html-BWTGIsk7.js","assets/mysqlhanshu.html-9h_U-VjR.js","assets/shujuleixing.html-vMIywKZp.js","assets/chaxunsql.html-Bh2JOYxP.js","assets/douxiefenli.html-CC-HThZR.js","assets/jianbiaoyugouyouhua.html-CLcUUqnW.js","assets/jinshencaozuo.html-DLi-qwUq.js","assets/shujukuyouhuajilu.html-ClHRL_c3.js","assets/diguichubulaishangji.html-Bal8we8i.js","assets/issue.html-NSttXyZk.js","assets/netFrameworkUse.html-i3OZjzva.js","assets/jiancesuoyinshifoushengxiao.html-DD_K30X3.js","assets/dotnetcaozuo.html-B6gPShZZ.js","assets/oraclehelper.html-B5aE5cat.js","assets/11gchuangjianshujuku.html-Cbeid7MT.js","assets/oracleshiyongwenti.html-CNL6U0Nx.js","assets/fuwuqidingshijihua.html-Cfbt9uHx.js","assets/shujukubeifenhehaiyuan.html-DIvbci6J.js","assets/oracleinstallclient12_2anzhuangjiaocheng.html-BvLFNdmW.js","assets/winx64_12201_clientanzhuang.html-B3GLMzcL.js","assets/biaoziduanleixing.html-DcYUw-J-.js","assets/shijianchuli.html--stlkk2t.js","assets/bushufangan.html-DbogAIg9.js","assets/docker-composebushuredis.html-uSj78jG1.js","assets/linuxanzhuangredis.html-DOXiG-Iv.js","assets/windowskehuduan.html-VHOlIhG1.js","assets/chijiuhua.html-BHBCY1F7.js","assets/neicunyouhua.html-DVf-4AkM.js","assets/hashleixing.html-BdOSHiFF.js","assets/hyperloglog.html-n804fCHA.js","assets/jigeset.html-DfwKRmVv.js","assets/jigesortedset.html-3UQemr9_.js","assets/liebiaolist.html-C9_87o-j.js","assets/redisshujuleixing.html-C3iO1eLu.js","assets/zifuchuan.html-CEPooeNw.js","assets/queshaomsvcp140_dll.html-CJiK_Je5.js","assets/yiwenhebug.html-Bd-8jtIi.js","assets/csredis.html-D-0RNimy.js","assets/freeredis.html-D8t2XbkA.js","assets/jianchanshiyong.html-j34KJzFG.js","assets/nrejson.html-DEpc44sB.js","assets/redisom.html-DjW4Ni7E.js","assets/dataType.html-DkCVCgEb.js","assets/functions.html-CojI4o4Y.js","assets/hierarchyid.html-lVYlNCUo.js","assets/operation.html-B8_ekOVJ.js","assets/dockerInstall.html-BBLAugFV.js","assets/linuxInstall.html-SBlNEa4-.js","assets/windowsInstall.html-DAFsjVQZ.js","assets/index.html-BayLzvS8.js","assets/bushu_netfuwu.html-D03gnxk6.js","assets/githubactionshengchengjingxiangbingbushu.html-jE24tlJf.js","assets/1662964862458-55292112-dc41-4232-96cb-361d761de2f1-_T0vxZKs.js","assets/index.html-DeVYkFMD.js","assets/anzhuang.html-CLcBWW-f.js","assets/daiwancheng.html-B81vsvv4.js","assets/giitlabdeyml.html-fgcnVP-B.js","assets/gitlabrunner.html-nhXNT7-6.js","assets/jianchanbushu.html-BstQvzLf.js","assets/liushuixianjiaoben.html-Dc1E06_L.js","assets/sshmianmidenglu.html-2PzuTi6c.js","assets/variables.html-CeO_3HzW.js","assets/changyongchajian.html-B6xOKMP4.js","assets/1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8-DzC_meP0.js","assets/jenkinspeizhi.html-BOZ5gtjA.js","assets/index.html-D9oOg_5Z.js","assets/yuanchengbushu.html-BEuWts3f.js","assets/commonCommand.html-N0mzKfr4.js","assets/concept.html-D8y5D1bV.js","assets/dockerbushunetcore.html-CAra1mCr.js","assets/dockerfilecaozuo.html-Bv6UeVcM.js","assets/dockerfileGenerator.html-FiTmACOe.js","assets/images.html-Ois-wouK.js","assets/markSmallImage.html-BYJDnVRV.js","assets/index.html-aQ0d4GvQ.js","assets/wentichuli.html-DMuBiwEK.js","assets/changyongjiaoben.html-CJSSzsaU.js","assets/composeIssue.html-BdYDT-sy.js","assets/linuxInstall.html-C1NwJaL4.js","assets/peizhiwenjian.html-BjZHOgK6.js","assets/index.html-BVLzSHIi.js","assets/portainer.html-CafIVC6q.js","assets/index.html-CkgdXexG.js","assets/install.html-D5mZKrTn.js","assets/index.html-wahozqwP.js","assets/netCoreInstall.html-DDdYYN-e.js","assets/redisInstall.html-DAnqQQ4y.js","assets/minikube.html-CZh5JgzY.js","assets/rainbond.html-CpW_ktuS.js","assets/rancher.html-JKttcR-z.js","assets/casbinfangwenkongzhi.html-BvBk84pS.js","assets/changyongzujian.html-D3mR_ySm.js","assets/claimsxiangguangainian.html-C_ochJPu.js","assets/gaishu.html-BvDj1KsG.js","assets/httpcontext.html-BvQnc1gY.js","assets/huoquyonghuxinxi.html-BxW_hyk6.js","assets/shujubaohushixianxianshitoken.html-BXZmJtqV.js","assets/action.html-Boz8Wfew.js","assets/banbenkongzhi.html-B0vX1ban.js","assets/douquqingqiuti.html-Brq9R0ky.js","assets/gechongbutongjieshougeshi.html-CBmTQ7Zt.js","assets/geshihuaxiangyingshuju.html-DQ4WxddX.js","assets/httpcontext.html-BvPnNdKX.js","assets/jiekoufanhuilei.html-BSETAfg9.js","assets/kuayuqingqiu.html-DlSiyErL.js","assets/moxingbangdingheyanzheng.html-C4uWbK63.js","assets/moxingyanzhengfluentvalidation.html-D-lFjeN_.js","assets/qingqiucanshubangding.html-NkeU-oe9.js","assets/qingqiuwenjianchuli.html-BYtuLyZV.js","assets/index.html-BS3jB-25.js","assets/webapijiekouqingqiuwanshan.html-BRyNUnQV.js","assets/xiangyingyasu.html-DNBVhpkU.js","assets/flurl_httpgonggonglei.html-Ct5fTGP3.js","assets/httpclient.html-C6bg0F8_.js","assets/httpclientchulixiangyingyasu.html-BPbPMPeG.js","assets/httpRequest.html-DSEri6bC.js","assets/kestrel.html-CessfHxy.js","assets/restfulfengge.html-Bohf-TuQ.js","assets/restkaiyuanku.html-MSXQs9Tc.js","assets/index.html-DLVJ83o9.js","assets/supersocket.html-7aYr-Aii.js","assets/touchsocket.html-BPNC4Lv_.js","assets/banbenkongzhi.html-BIaEhG0z.js","assets/chuli.html-BmPJU0nO.js","assets/jibenshiyong.html-DbjRCqqm.js","assets/nswag.html-CrW5mjS8.js","assets/renzhengfanganbiaoshi.html-B8pDi3S9.js","assets/wentichuli.html-BbncwaO6.js","assets/zhushishuiming.html-CiGobRog.js","assets/dotnetzhisoapcorejianchanshiyong.html-BpSNhK1-.js","assets/qingqiushili.html-CrUpsUXv.js","assets/index.html-BGl_sjHn.js","assets/mqttTool.html-DjPgCIFy.js","assets/socketTool.html-CcNC1NsY.js","assets/cache.html-BzZKTx4D.js","assets/changjiangainian.html-M9HbL2vb.js","assets/commonNuget.html-SyxmSycl.js","assets/fenbushihuancun.html-D8OA1qKC.js","assets/fuwuqihuancunoutputcache.html-56qpuE9R.js","assets/fuwuqihuancunresponsecaching.html-DKpU_-RM.js","assets/kehuduanhuancun.html-C_wUzW3Z.js","assets/neicunhuancunmemorycahe.html-VkAwx_nr.js","assets/index.html-BiIt3zXB.js","assets/statichuancun.html-29QcDbVd.js","assets/jiankangjiancha.html-CaTIUew-.js","assets/yingyongzhuangtai.html-CJJvhYBr.js","assets/jiangjingtaiwenjiandabao.html-Cvso-xVu.js","assets/jingtaiwangzhanneironggengxin.html-BpZ8uD92.js","assets/index.html-3Qk3rlKM.js","assets/ilogger.html-dmWpWtct.js","assets/nlog.html-x8N2zmum.js","assets/index.html-tlckXJDC.js","assets/serilog.html-sApmxPVO.js","assets/structLog.html-bpyxUom_.js","assets/duandianluyou.html-D9SBOzG8.js","assets/luyou.html-DGkt7MOh.js","assets/gaishu.html-CuNMndjA.js","assets/huanjingbianliangpeizhi.html-CqWlhiw4.js","assets/jimiguanliqi.html-Cx4qNW8a.js","assets/minglinghangpeizhi.html-s_qIhpBT.js","assets/peizhidouqu.html-BzzoSYa3.js","assets/peizhijianchanjiami.html-DyAuPssb.js","assets/shuaxiangoption.html-5x67CIAz.js","assets/wenjianpeizhi.html-BV4ZphE3.js","assets/index.html-D_IulKHr.js","assets/xmlxuliehua.html-BMg5-LQm.js","assets/index.html-DUCJ4gVD.js","assets/gaishu.html-Bvte5voO.js","assets/huoqusuoyouzhurudefuwu.html-d-3h4SoS.js","assets/xunhuanyilai.html-pwbvXDY8.js","assets/dockerReleaseNetCore.html-C-HBgo41.js","assets/optimizeFolder.html-DhlvCgT9.js","assets/index.html-D-9yyUUA.js","assets/dotnetcoreplugins.html-DIn2GGPF.js","assets/jianchandedongtaijiazaishili.html-DmlknIWt.js","assets/plugincore.html-DnMkB5wa.js","assets/index.html-IJ5JPF4R.js","assets/rebachadll.html-DKppZ5Ok.js","assets/sourcegenerator.html-BuBWHkUe.js","assets/zidongshengchengjiekoushixianlei.html-WBsHZIz6.js","assets/aes.html--nlMW-Jm.js","assets/chinaEncrypt.html-CFYP2hns.js","assets/index.html-eZWedOIf.js","assets/rsajiajiemi.html-BetidndZ.js","assets/sha.html-DQVVhOzm.js","assets/automapper.html-C6cWbu5V.js","assets/automapperdotnetf.html-DV7znSQO.js","assets/emitmapper.html-BpzmVdTi.js","assets/mapster.html-CeFols6S.js","assets/tinymapper.html-BxJB7NFx.js","assets/dotnetratelimiter.html-Dxshrp2E.js","assets/index.html-DvKvBMZJ.js","assets/jiemiangui_cs.html-CAbws_8l.js","assets/terminal_gui.html-CIY5TDiF.js","assets/xiazaituchuangtupian.html-Dt_pIl3_.js","assets/biaogeconsoletables.html-DIS8RpYm.js","assets/jindutiaoshellprogressbar.html-Be9GP2XM.js","assets/spectreconsole.html-BLjLHxgF.js","assets/xiazaiqi.html-Df-8eFow.js","assets/yansecolorful_console.html-Yleecw1M.js","assets/zhizuojiaohuchengxusharprompt.html-CD2iTIxd.js","assets/xingnengheshishixingchuli.html-CwC4aqZI.js","assets/attribute.html-BBfQNSnh.js","assets/changyongdeshujujiegou.html-CTAZttOk.js","assets/chouxianglei.html-o6XIRZGq.js","assets/closure.html-CYKr3RYx.js","assets/fangwenxiushifu.html-ZnNoldzE.js","assets/fanxing.html-0Be87s7M.js","assets/haxi.html-DO6eZ1CU.js","assets/jiegouti.html-bLsob8hN.js","assets/jiekou.html-DCTO8Bz6.js","assets/kuozhanfangfa.html-C6dyQWSz.js","assets/lei.html-DjJnCzw7.js","assets/meiju.html-DDfI5qKV.js","assets/nibianxiebian.html-DG-zg0Ik.js","assets/nimingleixing.html-DnPZaCKJ.js","assets/shujuleixing.html-Bk54ITA3.js","assets/dynamic.html-BJJsVzWv.js","assets/fangfa.html-CPkkGCAv.js","assets/fanshe.html-BaCaK3N2.js","assets/fanshejiazaidll.html-B_AI3Xcj.js","assets/fanshexiangjie.html-DbJzPdsv.js","assets/newbe_objectvisitor.html-C3drXoMS.js","assets/biaodashishu.html-B0Yn1CiC.js","assets/shijian.html-BRCg6eJV.js","assets/weituo.html-DjqKDsG2.js","assets/index.html-B1HFs75_.js","assets/workingMethod.html-Cukg4aUA.js","assets/byte.html-m_-DeedO.js","assets/dynamic.html-D8hrWy1k.js","assets/paixu.html-4uN1raGm.js","assets/qiyuan.html-DyfJMXgl.js","assets/rijiheshijian.html-C_l7IjVJ.js","assets/shuzhi.html-r9izNw_8.js","assets/shuzu.html-U1DHeuIq.js","assets/string.html-CRIlvEDF.js","assets/yuanzu.html-63pOHByQ.js","assets/yuchulizhiling.html-DjcsB-7x.js","assets/yudingyileixing.html-B3D6eQLR.js","assets/diedaiqi.html-BQOkoeG9.js","assets/ienumerable.html-6o8b3wg5.js","assets/jigecaozuo.html-BJeInFrM.js","assets/index.html-ST42to-w.js","assets/shuzu.html-Dr3Bqsa7.js","assets/stack.html-6cBCLBLt.js","assets/suoyinqi.html-CUObJ2d5.js","assets/jiaojiebingji.html-RZ2SfwB8.js","assets/lambda.html-37g2xHzj.js","assets/linqExtension.html-0wpH2WEk.js","assets/linqhelambdaduibi.html-DDItH0FT.js","assets/selectmany.html-DvcJSCN_.js","assets/yunsuanfu.html-C4I1V16q.js","assets/index.html-B4iKy2fM.js","assets/channel.html-CCPJbv2s.js","assets/priorityqueue.html-CeWuIP0d.js","assets/queue.html-liMVKH7z.js","assets/codeanalysis.html-v4i3ND_D.js","assets/natasha.html-aLrDq_6J.js","assets/index.html-5GZKMJ4P.js","assets/scripting.html-DCMz8vFr.js","assets/index.html-CJl_ymL-.js","assets/bendecunchu.html-DTs4seJO.js","assets/concurrency.html-B-gpbyxg.js","assets/limitingConcurrency.html-Dj_lvK1S.js","assets/parallel.html-CMgxlJCL.js","assets/index.html-CnORlaO8.js","assets/sharedMemory.html-M9UA6Hn4.js","assets/sisuo.html-Dq2lDy9D.js","assets/threadPool.html-CVpAntXl.js","assets/threadSync.html-DB82YesK.js","assets/dotnetliu.html-Dr6zXL3u.js","assets/iomoxing.html-CIzYjx2O.js","assets/lujingwenti.html-VLBQ1X1g.js","assets/streamkuozhanlei.html-C6MIa9Ph.js","assets/wenjianyumulucaozuo.html-DHI2YiUr.js","assets/netchuangjianwindowsfuwu.html-Ccm47rYG.js","assets/netcorechuangjianwindowsfuwu.html-QKHu8m6m.js","assets/windowfuwu.html-BhVhgi9V.js","assets/diedaiyugou.html-CXUxI290.js","assets/switch.html-RGB5V9Ef.js","assets/stopwatchlei.html-BjgxP1VK.js","assets/tiaojianbianyi.html-rEt2jx0p.js","assets/index.html-OIQbldzG.js","assets/diyicizhihangmanxingnengfenxi.html-CydsJkVc.js","assets/jibendiaoshigongju.html-DuiHcQoe.js","assets/neicunfenxi.html-DtqdJDNT.js","assets/diaoshi.html-B6c2W_Rw.js","assets/jieshao.html-Ci53ZdaU.js","assets/quanjuyichangchuli.html-BYbEFw5u.js","assets/shiyongautofac.html-I5r95LIs.js","assets/anzhuofabu.html-DIhfpjs4.js","assets/pingguobushu.html-CVv_vOKD.js","assets/windowsfabu.html-Di3uWuNy.js","assets/windowsfabuexe.html-BSXltLwS.js","assets/huanjingzhunbei.html--EiaHp10.js","assets/jichuzhishi.html-C1_Xv4Ah.js","assets/qiantaichuangjianuihedaimachuangjianui.html-78ZlfQ9D.js","assets/shujubangding.html-MwWQPAZY.js","assets/xiangmukuangjiajieshao.html-D8N_qBHf.js","assets/microsoft_aspnetcore_mvc_razor.html-CL-nBgq4.js","assets/razorengine.html-DbEOmo5I.js","assets/razorlight.html-CghhONge.js","assets/index.html-jClqvvOR.js","assets/baoguanlifuwubaget.html-wx8V1MvP.js","assets/index.html-CvOy_SXD.js","assets/caozuo.html-DfljOfSN.js","assets/gaishu.html-AT3GAGqz.js","assets/cuowuchuli.html-Ca-sA8aM.js","assets/kestrel.html-BtDXXpcc.js","assets/changyongpeizhi.html-CIsBT8LG.js","assets/jichuzhishi.html-BlovTF0E.js","assets/razorshitu.html-DDoawd7x.js","assets/shitubianyi.html-BLSQE1BD.js","assets/taghelpers.html-Dp9D3Gv8.js","assets/aspxjieshoupostmanchuandejsonduixiang.html-U4_n6QfG.js","assets/webformhuancunchuli.html-DCna-dkU.js","assets/websocketyuxiaoxituisong.html-DlIFC61a.js","assets/clickoncebushu.html-ekeiwse8.js","assets/costura_fody.html-C1l30Jpn.js","assets/gengxin.html-Bd6guGFe.js","assets/InnoSetupBuild.html-vFxJBWuP.js","assets/index.html-Bj3aurm_.js","assets/fangzhichongfuqidong.html--GrJ9UrS.js","assets/jitongcaozuo.html-DLXmR9oI.js","assets/qidongcaozuo.html-DHfXKmkD.js","assets/rejian.html-C9qr9r6d.js","assets/windowsapi.html-Dldpo18T.js","assets/qidongexemojiemianfangan.html-Cv5W9myA.js","assets/dotnetty.html-BGSOPa5f.js","assets/ui.html-By_WbzyU.js","assets/netnanoframework.html-GB7JQ7TT.js","assets/changyongkongjian.html-CK8wyN9O.js","assets/changyongzujian.html-ekIoZ5Oa.js","assets/index.html-BArsSoWE.js","assets/scoket.html-DqTjj4CG.js","assets/tupiangeshizhuaihuan.html-BaZKBRCF.js","assets/winformscominterop.html-BnPFh9gW.js","assets/changwenwenti.html-CrZU2bKX.js","assets/kaiyuanzujian.html-Vde-WnNP.js","assets/index.html-BPw-654w.js","assets/coreData.html-BmzMIU8S.js","assets/lnskyDB.html-C-A5G_mG.js","assets/autohistory.html-DfkIYTOi.js","assets/efcore_namingconventions.html-D8TlmNWv.js","assets/shuiming.html-B4JUwz8W.js","assets/unitofwork.html-CcItQ-ht.js","assets/zack_efcore_batch.html-90Ozu6yG.js","assets/jieshao.html-BNRP2pKW.js","assets/entityFrameworkEarlier.html-CBFZS2Vr.js","assets/baseOperation.html-Dt8vwJro.js","assets/iqueryable.html-BhW2M1ZG.js","assets/jiazaifangshi.html-CXNmPbwb.js","assets/piliangcaozuo.html-BZjwZnjj.js","assets/savechanges.html-BQYbZb9r.js","assets/shengchengsqlyugou.html-ZAqt8rzd.js","assets/shitijianguanji.html-DWVQ60Bm.js","assets/shitileipeizhi.html-Cw4eEprR.js","assets/shiwu.html-COPkBEuA.js","assets/shujukuhanshu.html-Ba1kieuh.js","assets/shujukuqudong.html-BqsGlP6B.js","assets/douxiefenli.html-CsEDNnBN.js","assets/efcoreConcurrency.html-CTHucqZJ.js","assets/expressionTree.html-DMokXLhQ.js","assets/fenkufenbiao.html-DMM6TN4p.js","assets/xianshibianyichaxun.html-DKBN3jLQ.js","assets/daimayouxian.html-1op4IbH3.js","assets/efcorezhiminglinghanggongju.html-PU2QdDVS.js","assets/migratorPackage.html-DRmj1-Ax.js","assets/qianyijiyinjiqiao.html-CsSZDC4c.js","assets/shujukuyouxian.html-gIzQU75J.js","assets/parametercountmismatch.html-Bu1TabIr.js","assets/wentihuizong.html-c-WLXMu9.js","assets/changyongbao.html-NI7xVedv.js","assets/disanfangku.html-CDveNZ9p.js","assets/dabaoexe.html-DkXRQ0tg.js","assets/jibenshiyong.html-BpOTd6yL.js","assets/kuaijiejian.html-nlQxt1cP.js","assets/qiehuanyuan.html-B-jcDI3G.js","assets/dailiip.html-DU1td1PI.js","assets/jibenshujuleixing.html-kBNblYeA.js","assets/jichuyufa.html-DQT_SMBB.js","assets/neizhihanshu.html-CphVVrjx.js","assets/qingqiutou.html-Cky90z61.js","assets/wenjiancaozuo.html-DebwbZzo.js","assets/xiazai.html-AVzXwFSR.js","assets/xpath.html-CcFcvx-x.js","assets/caozuoxml.html-Cufo5vpY.js","assets/douquxml.html-BZJf_dcs.js","assets/xmlkuzhongchazhaoshuju.html-Sl1Llku9.js","assets/chijiuhuabiaoshuiming.html-Dj6cjrd8.js","assets/issue.html-D8wC-Ht1.js","assets/kuaisudajianxiangmu.html-DoV_LLr_.js","assets/index.html-BXRujQ8P.js","assets/shujuchijiuhua.html-BRD9aQfi.js","assets/ui.html-NW9kBQcg.js","assets/ziyuanfuwurenzheng.html-BiWs0Xej.js","assets/index.html-DNSK7QI8.js","assets/sample.html-CwvrpCAi.js","assets/sichongshouquanmoshi.html-DxjLpELw.js","assets/index.html-DfG-4RXA.js","assets/install.html-DEg61pcp.js","assets/operator.html-CZV3oM89.js","assets/index.html-nq3VpyKV.js","assets/struct.html-DELNR6MS.js","assets/lucene-searchextensions.html-DS2CbDSO.js","assets/lucene_net.html-DfgKDoPI.js","assets/jieshao.html-BGAb0qqc.js","assets/index.html-p-4Kt1mg.js","assets/kaifabushu.html-DEVQCaef.js","assets/dotnetcorerpc.html-BfJ5X6zM.js","assets/csvfile.html-BaqEvJJj.js","assets/csvhelper.html-BdLWtKX9.js","assets/gaishu.html-D94MDCYm.js","assets/ip2region.html-Nz4LP72t.js","assets/maxmind.html-B45_LDPs.js","assets/markdig.html-BPvJfU9E.js","assets/markdownsharp.html-BY2PjJKq.js","assets/npoi.html-Kf-1qCuX.js","assets/npoicaozuoexcel.html-DF-RpJtp.js","assets/npoipeizhi.html-m5IKM-I0.js","assets/npoiyiwen.html-CQdsDGA3.js","assets/aspose_pdf.html-Dekhgjw8.js","assets/dinkToPdf.html-DJJ9fI_s.js","assets/haukcode_wkhtmltopdfdotnet.html-BSb8QpDf.js","assets/ironpdf.html-CGHDHxIf.js","assets/itext7.html-OqtRgjTy.js","assets/itextsharp.html-CHzFo4pW.js","assets/magick_net.html-CxGGF16A.js","assets/pdfSample.html-CwP5sxrE.js","assets/pdfsharp.html-Kg54qRsi.js","assets/questpdf.html-UjocpXoj.js","assets/spire_pdf.html-B1kNSDTs.js","assets/shapeCrawler.html-jFgO9wnM.js","assets/diffplex.html-D80iyY8_.js","assets/htmldiff_net.html-BNwzAyt6.js","assets/neiwangbushu.html-CJ7mLsdp.js","assets/index.html-DiU8zMmP.js","assets/fluentemail.html-rGnE98bU.js","assets/mailkit.html-C1oWdy_K.js","assets/default.html-DI04ZBZg.js","assets/httpprinter.html--GoH7AYf.js","assets/jcp.html-C6nSBJQr.js","assets/lodop.html-DSKfZ9Fb.js","assets/gzy_quartz_mui.html-Cl9Aozmh.js","assets/netfshiyong.html-CKkB7pXN.js","assets/quartz.html-BkWL0q74.js","assets/dongjingfenli.html-ktfYeQCj.js","assets/gaokeyong.html-BJoRSHwQ.js","assets/issue.html-D4eb1OKr.js","assets/localhostyingshelujing.html-DlOmD8qA.js","assets/nginx.html-BF0tabM6.js","assets/nginxpeizhinetcore.html-DbJWwiOk.js","assets/peizhiwenjian.html-CY5MmoNh.js","assets/shiyonggongneng.html-CGMRoYtX.js","assets/sentry.html-BtbhvTPV.js","assets/fenbushishiwu-zuizhongyizhixingcap.html-CgeQ28Jv.js","assets/fenbushishiwu.html-BBGaSsyX.js","assets/fenbushisuo.html-C5WTzgwj.js","assets/redisfenbushisuo.html-DbbCBTkn.js","assets/shujukufenbushisuo.html-BKiJi9gl.js","assets/consul.html-CTAc8JA7.js","assets/eureka.html-CzMq29Rm.js","assets/fuwuzhuceyufaxian.html-CEqVaQpJ.js","assets/agileconfig.html-EvS2udYv.js","assets/apollo.html-BxicH_VB.js","assets/nacos.html-AUxe9T0K.js","assets/zookeeper.html-B-CjRAfA.js","assets/wangguan-kong.html-aKmOh56G.js","assets/wangguan-ocelot.html-CMycWdN_.js","assets/wangguan-yarp.html-vh-pBWCz.js","assets/wangguan.html-Yc3fRVBG.js","assets/paddleocrsharp.html-BXorecs-.js","assets/rapidocr.html-hucOP2Yj.js","assets/emgu_cv.html-D4jUfvCF.js","assets/opencvsharp.html-DT9rXOTg.js","assets/opencvsharp4.html-Dn5bjFSC.js","assets/openVino.html-CYLqUHIG.js","assets/arcsoft.html-CYr8hjki.js","assets/facerecognitiondotnet.html-YvrT8rdV.js","assets/luxandfacesdk.html-Ct8XpSPE.js","assets/viewfacecore.html-DMhFvPsO.js","assets/mediapipe_net.html-Cz22iDvG.js","assets/chumoyanzhengmasimcaptcha.html-Bq1iZJRN.js","assets/huakuaiyanzhengmalazyslidecaptcha.html-cSKDOBDc.js","assets/huakuaiyanzhengmaverificationcode.html-CI9VyQLU.js","assets/index.html-BlNtIP-y.js","assets/tuxingyanzhengmaimagesharp.html-CBGhFIWK.js","assets/tuxingyanzhengmalazycaptcha.html-BH7wv1Fi.js","assets/index.html-CkEWfnH1.js","assets/k6.html-DG1ryhmY.js","assets/index.html-B-7EUDYf.js","assets/gaishu.html-CP15HvRE.js","assets/testserver.html-BJxf0FCL.js","assets/benchmarkdotnet.html-Cf47UHpV.js","assets/sharpfuzz.html-bT1TIViX.js","assets/jmeter.html-BNXoxroI.js","assets/nbomberyace.html-CznD6GN4.js","assets/index.html-BqGIICzd.js","assets/webapibenchmark.html-BfdgsyB_.js","assets/cliTest.html-BJZtNX6G.js","assets/msTest.html-DUHIMNM8.js","assets/index.html-0z3Q4M5T.js","assets/testSpecification.html--WJeGdWH.js","assets/xunitDependencyInjection.html-BQcAgj_s.js","assets/xunitTest.html-BlGpf-Ad.js","assets/aspnetcore_rabbitmq.html-Dw8303rJ.js","assets/easynetq.html-r-0jScLV.js","assets/kongzhiqishiyongrabbitmq.html-Cr0zcQLD.js","assets/rabbitmq.html-BE4gmBEU.js","assets/rabbitmqmoshi.html-B5ILpg0W.js","assets/rabbitmqtuli.html-BsfRIbmQ.js","assets/shiyongzongjie.html-DBbII-FS.js","assets/xianzhixunhuanxiaofei.html-CuJFouKn.js","assets/xiaoxiquerenmoshi.html-D5FBEax5.js","assets/gaishu.html-gRlBxITQ.js","assets/ffmpeg_autogen.html-CVcWJJsa.js","assets/jichujieshao.html-De_qZqtB.js","assets/sdcb_ffmpeg.html-BDwKJQWN.js","assets/shipinjietu.html-CjgKJX_n.js","assets/index.html-DLOF4me6.js","assets/zlmediakit.html-DWprHYN-.js","assets/dbchm.html-Dc6PVamV.js","assets/navicat.html-yqQszUc0.js","assets/index.html-B9_bavW7.js","assets/datagrip.html-1GLG2GJl.js","assets/dotmemery.html-DhhfMbhD.js","assets/dotpeek.html-CAHKERtD.js","assets/dottrace.html-CupHWyIM.js","assets/gaishu.html-CQXQRPvB.js","assets/rider.html-Bq6dz4us.js","assets/chandao.html-gqTRUPUv.js","assets/communityserver.html-BO9HBl7H.js","assets/jieshao.html-D7r8T407.js","assets/postman.html-BPDRFje1.js","assets/xiangshideruanjian.html-BBlJv6r2.js","assets/codeRepository.html-B6D9-m_G.js","assets/commonOperator.html-BDhYUfAD.js","assets/gitea.html-D2cdCdEM.js","assets/gitFile.html-BazcZt2S.js","assets/gitjichucaozuo.html-71Ipko0B.js","assets/gogs.html-XAVCZst4.js","assets/pagesHost.html-CymwaNFD.js","assets/index.html-D9TkNEIn.js","assets/chajianjieshao.html-DcZ_vgww.js","assets/editorconfig.html-DsnZPSnT.js","assets/environmentConfig.html-C7RTaAMy.js","assets/geshihuashezhi.html-DNAo5-Jx.js","assets/offLineInstall.html-BCi-UAxE.js","assets/index.html-BjhF80eA.js","assets/shengchanlidisheng.html-DbbBGOrS.js","assets/shezhimingmingguifan.html-B-WNjeP3.js","assets/slngenLoading.html-F8VOvvCe.js","assets/useSkill.html-JUonRqOf.js","assets/vs2019Install.html-BNy3lgQ3.js","assets/zhongwentishi.html-DaygubZ3.js","assets/centos.html-jS948ZOI.js","assets/mingling.html-CIKmtgAI.js","assets/gaishu.html-yU0FyZBS.js","assets/centos7anzhuangjavahuanjing.html-CbuqFKRz.js","assets/hypervanzhuangcentos7.html-SzzVWd_3.js","assets/hypervInstallUbuntu.html-zamchEaV.js","assets/multipass.html-SKQAZ4ER.js","assets/dddzhishiti.html-Bzb59L2T.js","assets/dddzhizhiduixiang.html-Bjm1pxLl.js","assets/modelDesignMode.html-47iwjkbJ.js","assets/index.html-BScZufwx.js","assets/overview.html-CroPupmM.js","assets/bianmaguifan.html-xhCRSPA0.js","assets/chonggougaishu.html-BD04Cmfi.js","assets/chucuodefanhuizhi.html-BFx_2tc_.js","assets/jieou.html-D6Cchex6.js","assets/mingmingfangfa.html-CA9aQMsq.js","assets/leizhijiandeguanji.html-TUgK0Q0y.js","assets/mianxiangduixiang.html-CuDU8Uwx.js","assets/mianxiangduixiangfenxi.html-Bb-hnXw6.js","assets/mianxiangduixianghemianxiangguocheng.html-BniLyJHP.js","assets/changyongmingling.html-DOad7cgz.js","assets/mokuaiheyilai.html-DrLa4hTZ.js","assets/shuiming.html-lZUswsPi.js","assets/index.html-BN-3W_yj.js","assets/index.html-CbYWyJSO.js","assets/chuancan.html-BSOavAPa.js","assets/component.html-CHDgKn1v.js","assets/configuration.html-D6dUeFx7.js","assets/dataBind.html-B4tP7sHZ.js","assets/event.html-QZ5NkPe3.js","assets/form.html-DgJylhM5.js","assets/getStarted.html-BSz77Zix.js","assets/jsOperator.html-af0um2GS.js","assets/layout.html-oLGjXj2Y.js","assets/lifeCycle.html-CP3mmhxx.js","assets/loginSample.html-B5ilQP3Y.js","assets/navigaton.html-CS5OEPhA.js","assets/yuchengxian.html-Bksbky81.js","assets/commonOperator.html-el5qEzhY.js","assets/index.html-ZFJ78LE4.js","assets/issue.html-D7LcXKiW.js","assets/index.html-6qiRFqc_.js","assets/blazormarkdown.html-DfPM7a4P.js","assets/markdig.html-B8DJCl3J.js","assets/openSourceComponent.html-Bp3iDgtE.js","assets/jiaobenwenjian.html-BbHNbAAy.js","assets/liulanqiqingqiutou.html-C1z2dBxt.js","assets/sousuoyinqingjiqiao.html-B3WAdS_B.js","assets/url.html-C49hj_02.js","assets/redishelper.html-BjWbl1oJ.js","assets/shuiming.html-CBhAnhtm.js","assets/stackexchange_redis.html-BwC-s7I2.js","assets/dockerInstall.html-Bh0MMnQW.js","assets/1611106025062-d5831aff-0228-44e2-9aed-c3b235645694-Cy4xoVtT.js","assets/dockerInstallContainsDotNet.html-Buf83oao.js","assets/installIssue.html-B_3u-VY5.js","assets/linuxInstall.html-NkjRnOMi.js","assets/windowsInstall.html-pbeU8biO.js","assets/freeStyle.html-DBD6yG4C.js","assets/1624778192446-1a2fafd9-1de3-401b-afde-cccf8036dbd5-BqlgeqWK.js","assets/goujianliushuixianxiangmu.html-JbMQkRc8.js","assets/tongguogouzizidongfabu.html-l1OGC3cu.js","assets/linuxInstall.html-BI57qGuI.js","assets/windowsInstall.html-DGwwd5PH.js","assets/daorudaochujiaoben.html-vG5IuQsO.js","assets/cookieshenfenrenzheng.html-D_vjfGAc.js","assets/netfcookie.html-BmfBnor0.js","assets/jieshao.html-BkgX1qS-.js","assets/shenru.html-ePkbnKVh.js","assets/gaishu.html-DRxnvqhP.js","assets/jianchancaozuojwttoken.html-AndWNMMm.js","assets/jiangzhixiaxian.html-KfI9c92x.js","assets/kuozhanzidingyishouquan.html-D6DdUuKO.js","assets/peizhijwtrenzhengpeizhi.html-Lz-E81A0.js","assets/jiyuyonghujiaosedefangwenquanxiankongzhi.html-BdGinNf4.js","assets/zidingyiapikeyrenzheng.html-KyxmWn5R.js","assets/zidingyibasicrenzhengyushouquan.html-B1gzhJCt.js","assets/session.html-BK9ZKl1-.js","assets/sessiongongxiang.html-CXN4oYUk.js","assets/sessionyuanma.html-OyZheK3r.js","assets/dongtaiapizhipanda_dynamicwebapi.html-D_hSXGml.js","assets/dongtaiapizhiplus_autoapi.html-zq6_yl28.js","assets/gaojichaxun.html-RGzfkksM.js","assets/leikuyunhangwebapi.html-Bqy6IhBx.js","assets/poolAPI.html-By8Z89ER.js","assets/fangzhichongfudijiao.html-BNvmmxjS.js","assets/midengxing.html-Bl3Nj5J0.js","assets/monitorTryEnter.html-CRcFtciy.js","assets/aspNetCoreRateLimit.html-DyvU7c92.js","assets/ddosAttack.html-DW9RoNd0.js","assets/refenceCheck.html-CTo6SCOk.js","assets/tokenSecret.html-CGTAXarL.js","assets/dajianswaggerhub.html-BtyfWBHy.js","assets/daochuwenjian.html-OcJoxoM8.js","assets/fanhuileimingchenyingshe.html-CTd8-viU.js","assets/jingtaiswagger_jsonwenjian.html-DYNOSral.js","assets/miniapishangchuanwenjianxianshiyichang.html-D-UiEnPm.js","assets/zhuti.html-DeU9hZA5.js","assets/jackremotelog.html-BKSW_jjp.js","assets/keshihualogdashboard.html-B6stQW1s.js","assets/loki.html-CPiL8zRL.js","assets/sejil.html-C8O3qA3g.js","assets/watchdog.html-uthgC2m6.js","assets/netFrameworkUse.html-CSvb66ds.js","assets/index.html-D4ehP6UU.js","assets/dipeibanfeatureflag.html-Bwv80OhJ.js","assets/featuremanagement.html-Cza1PJpf.js","assets/ifeaturefilter.html-BUEJbCwb.js","assets/jsonwenjianpeizhiyuan.html-CBmg1FjW.js","assets/neicunshujuyuanpeizhi.html-B9uLk_eN.js","assets/index.html-BvmbQ0RV.js","assets/zidingyipeizhishujuyuan.html-BNphgW9Z.js","assets/zidingyishujukupeizhiyuan.html-QQ1yFZfQ.js","assets/binaryformatter.html-B1MbaPZ9.js","assets/binarywriter.html-BtkPUuD4.js","assets/memorypack.html-qvxK8lVD.js","assets/messagepack.html-D8l-Z7gO.js","assets/datacontractjsonserializer.html-C5VsJroK.js","assets/dynamic_json.html-DkTE-5BK.js","assets/javascriptserializer.html-BHaMWB7n.js","assets/json.html-BTLepkYi.js","assets/jsoncons_jsonpath.html-BE3iGlXY.js","assets/newtonsoft_json.html-Bt5o4Ipl.js","assets/system_text_json.html-CjYYYtsT.js","assets/filterfangchong.html-D3EOeXm4.js","assets/filterfanhuileichuli.html-DxXlh7gp.js","assets/filterzhucefangshi.html-BXUERKvu.js","assets/guolvqishixian-jiyuipqingqiuxianzhi.html-25qqEsDt.js","assets/guolvqishixian-niminghuachuli.html-D22L8Jl0.js","assets/guolvqishixian-rizhijilu.html-BZruv2n5.js","assets/guolvqishixian-rucanjiaoyan.html-CzzYLHrY.js","assets/guolvqishixian-yichangchuli.html-0E57_613.js","assets/guolvqishixian-zidongshiwuchuli.html-DMl2llvY.js","assets/netfguolvqishili.html-Dax0mzj4.js","assets/index.html-BS71p_6B.js","assets/autofac.html-C2QAp7ni.js","assets/shengmingzhouji.html-BFzOcA31.js","assets/zhichiaop.html-BinxghbT.js","assets/index.html-D6Qi2GQF.js","assets/shuchuzhihangzhongjianjian.html-BsTLaB4z.js","assets/zhongjianjiandiaoyongshunxuhepiliangzhuce.html-BcMbhzYH.js","assets/iockongzhifanzhuai.html-DOF2kK-E.js","assets/iocrongqiyuanma.html-BNaDu-jp.js","assets/morenyilaizhuru.html-D-qppOyM.js","assets/shengmingzhoujiceshi.html-B5GTMG1z.js","assets/zhuceduogeshixian.html-DuHoOh8o.js","assets/errorCode.html-B6qJ5otS.js","assets/iisReleaseNet5.html-Bp5zAGk2.js","assets/issue.html-tSF0x3kc.js","assets/serverRelease.html-B24NRLxh.js","assets/anzhuanghuanjing.html-D9H0uDVt.js","assets/bushujiaoben.html-DXpYjfOj.js","assets/bushuliuchengheshouhujincheng.html-BGSfYBRu.js","assets/centosbushuwebxiangmu.html-DUu3xwMx.js","assets/linuxbushu.html-D9kgpnW1.js","assets/shouhujincheng.html-CvKLyHuM.js","assets/supervisor.html-BwipmA99.js","assets/ubuntuReleaseNet.html-BnOD_jXL.js","assets/nssm.html-B4xAcvu9.js","assets/guanfangqingqiuxianzhizhongjianjian.html-DcEFlhdX.js","assets/qingqiuxianzhichuangkousuanfa.html-BF9_Mszs.js","assets/fenxiechuli.html-_I68xZ0f.js","assets/piliangchulijige.html-Dq4Q-MoG.js","assets/arraypoolMemorypool.html-DR5CHoeB.js","assets/dictionaryshixianyuanli.html-CUcG-1cY.js","assets/shuazepaixusuanfa.html-BG1pUVjQ.js","assets/zhibiangengtongzhidictionary.html-DVJPN-sB.js","assets/zidingyipaixu.html-cZUBLa-v.js","assets/changetoken.html-Dmnv35Go.js","assets/index.html-CNoX_sPk.js","assets/tapmoshi.html-D78V0gMq.js","assets/tapmoshiyanhua.html-BXx7OOG6.js","assets/yibushili1.html-BL8mI_3F.js","assets/yibushili2.html-Bz2N_oCE.js","assets/changedaimajiexi.html-CuSnjbbX.js","assets/checkboxlist.html-M7nbPGaF.js","assets/guanyulanya.html-DM7n4mzG.js","assets/huoqufuwuqixinxifangfa.html-BShuufrr.js","assets/huoqujitongxinxi.html-BeKGLlOx.js","assets/jubushuaxin.html-Er57qCrH.js","assets/shangchuanxianzhi.html-CuKcotHU.js","assets/suijiyanzhengma.html-j7yoOW4D.js","assets/tiaozhuaixiemian.html-DLU760Qy.js","assets/webconfig.html-B0lqu57G.js","assets/cookie.html-jcZBgge8.js","assets/cunchushuju.html-DKCWLqHT.js","assets/session.html-6TkhggCB.js","assets/bianligeleishujujige.html-2lAOthMK.js","assets/qiantaibangdinghoutaipinjiedehtml.html-BtW5NFHy.js","assets/repeater.html-D7kPmVFC.js","assets/xiugaishujudeupdatefangfa.html-CPN7zcmX.js","assets/excel.html-BBk5QfEe.js","assets/tupiangeshizhuaihuan.html-CrlxUryD.js","assets/tupianshangchuan.html-xA1R7J0H.js","assets/tupianzhuaibase64.html-D54MrAh7.js","assets/wenjianshangchuan.html-D1WCQMcP.js","assets/dingshiqi.html-D1MeTpXm.js","assets/jianchandexiancheng.html-rlhyogLi.js","assets/xiancheng.html-BxiWBrVQ.js","assets/xianchengthreadhetask.html-DKEivHXF.js","assets/index.html-BQqOZG43.js","assets/winformzhucerejianshixianjietuxiaoguo.html-DLcvTI-r.js","assets/wpfzhucerejianshixianjietuxiaoguo.html-D0GdFn4e.js","assets/dengluxiaoguo.html-DJEoRnlr.js","assets/guanliyuanfangshiqidongbingjudaiquanjulanjie.html-BhDm8oSr.js","assets/jichucaozuo.html-DOb4z0aE.js","assets/programwenjian.html-9y9EUkGQ.js","assets/shiyongyilaizhuru.html-B77EZj_4.js","assets/jichubujushili.html-zMvs0xYq.js","assets/jichucaozuo.html-DZTKy2OF.js","assets/jichukongjian.html-3p9ttTzg.js","assets/congshipinzhongdiqutupian.html-DLqcBRZK.js","assets/propertychanged_fody.html-B3-rGKWc.js","assets/index.html-9HxTpHJb.js","assets/handycontrol.html-4xIR-51G.js","assets/materialdesign.html-B0ywDYV3.js","assets/rubyer.html-BFYKRyyu.js","assets/wpfui.html-d7SNkd4I.js","assets/clientCredentialsMode.html-D3Ney8Rk.js","assets/codeMode.html-B8NxjZut.js","assets/hybridMode.html-Cl-z_ewW.js","assets/implicitMode.html-B5Yi0eVg.js","assets/resourceOwnerPasswordMode.html-lXHko9Qm.js","assets/dockeranzhuangnginx.html-BaAiMwPi.js","assets/linuxanzhuangnginx.html-MD2qHKYS.js","assets/windowsanzhuangnginx.html-BVWtMJxM.js","assets/nginxconfig.html-BAobeoCV.js","assets/nginxwebui.html-BSHZMRLC.js","assets/efk.html-BSZpnfFs.js","assets/elk.html-DhZ_4xnJ.js","assets/exceptionless.html-C2ciC-Tk.js","assets/loki.html-CihwLMYJ.js","assets/index.html-Chr81ma_.js","assets/seq.html-DSWHgsim.js","assets/splunk.html-BlZAXWiS.js","assets/czgl_processmetrics.html-BjjA4Xlc.js","assets/grafana.html-D0zTMX0K.js","assets/jitongjiankonghttpreportsapm.html-4iY0ZgBx.js","assets/opentelemetry.html-BgpHupTJ.js","assets/openTelemetryStartedCombat.html-BwjwtBUB.js","assets/prometheus.html-B2ytroaY.js","assets/index.html-DozYCS8p.js","assets/butterfly.html-C9WLvVth.js","assets/jaeger.html-CyyGCC8m.js","assets/index.html-Cs9WlRcy.js","assets/skywalking.html-B1daKuTj.js","assets/zipkin.html-D6BgzYx_.js","assets/bushu.html-CbvVMOZ4.js","assets/caozuo.html-cyS5LM9I.js","assets/index.html-CAeutHQN.js","assets/dockeranzhuangrabbitmq.html-Cj7RJB5K.js","assets/linuxanzhuangrabbitmq.html-DHL2Lh4-.js","assets/windowsanzhuangrabbitmq.html-DBgLhVNR.js","assets/rabbitmqsixin.html-W5tjO2T4.js","assets/rabbitmqxiaoxikekaoxingfenxiheyingyong.html-CDMK56_U.js","assets/rabbitmqyanchiduilie.html-Ot7a-t82.js","assets/linuxanzhuanggit.html-BeKSzBaP.js","assets/windowsanzhuanggit.html-BvDzwIzL.js","assets/factoryMode.html-DJNGR8Zi.js","assets/jianzaozhemoshi.html-CizT8Frx.js","assets/singletonMode.html-DBv03fSH.js","assets/yuanxingmoshi.html-BtNBfSWM.js","assets/beiwanglumoshi.html-Is2awdnE.js","assets/celvemoshi.html-B4sWZysn.js","assets/diedaiqimoshi.html-B8DhCJM3.js","assets/fangwenzhemoshi.html-hg5WeRb-.js","assets/guanchazhemoshi.html-DalDDPiJ.js","assets/jieshiqimoshi.html-Dz8rOMEb.js","assets/minglingmoshi.html-Cbjuryjf.js","assets/mobanmoshi.html-OU3ZX_Wr.js","assets/zhizelianmoshi.html-gSekmQcH.js","assets/zhongjiezhemoshi.html-CHdWosE2.js","assets/zhuangtaimoshi.html-c5yE1OfZ.js","assets/layout.html-DBPMVEz9.js","assets/dailimoshi.html-Bs7Od4Qg.js","assets/kuopeiqimoshi.html-cZNXOTus.js","assets/menmianmoshi.html-DMZ3kOs1.js","assets/qiaojiemoshi.html-C1MunNKR.js","assets/xiangyuanmoshi.html-_1Ar0Vzx.js","assets/zhuangshiqimoshi.html-BUOTY1RA.js","assets/zugemoshi.html-CV_jhb_e.js","assets/jingtaiziyuanzhongjianjian.html-8sSFxMez.js","assets/morentupianzhongjianjian.html-DMXqYBmu.js","assets/qishixie.html-BIfTCL2T.js","assets/fangdaolianzhongjianjian.html-DMqDdnkz.js","assets/httprizhizhongjianjian.html-0qOvXC1W.js","assets/jiluqingqiushuju.html-mfdu2Wtf.js","assets/jingtaimdwenjianzhuaihuanshuchu.html-13bq5Xc1.js","assets/lanjieqingqiuhefanhuishujubingjiami.html-GucKjZR_.js","assets/qingqiuchaoshizhongjianjian.html-MXSYxRlg.js","assets/qingqiutouyuanyangfanhui.html-ByUehtKk.js","assets/rizhizhongjianjian.html-D282_xFJ.js","assets/yichangzhongjianjian.html-BQsrgQya.js","assets/guanfangpiliangzhuru.html-DRmOzlU5.js","assets/scrutorpiliangzhuce.html-_xBTUSn_.js","assets/tongguotexingshixianpiliangzhuce.html-D0VK7mYz.js","assets/index.html-B5jXcZ2K.js","assets/index.html-CFcjkwML.js","assets/404.html-DQGgIcwb.js","assets/index.html-Be6HoVvr.js","assets/index.html-CEIHAvPY.js","assets/index.html-CzNSVdqy.js","assets/index.html-f2WJOKkt.js","assets/index.html-DCClm_ZR.js","assets/index.html-BwXD3gsS.js","assets/index.html-BI3Vr3H_.js","assets/index.html-3ItzMuSs.js","assets/index.html-DN-nfIlL.js","assets/index.html-BtlVrP_A.js","assets/index.html-h5sYh4JO.js","assets/index.html-BIyoKu8B.js","assets/index.html-64-jSL4g.js","assets/index.html-DTlnVI82.js","assets/index.html-Bf1648yE.js","assets/index.html-BV5ZoqiO.js","assets/index.html-BxN2kEje.js","assets/index.html-7hjK9XPg.js","assets/index.html-CrQRRxX0.js","assets/index.html-bQzLj4l_.js","assets/index.html-B97mJQ3L.js","assets/index.html-B5bo0KUT.js","assets/index.html-CJbbq0yR.js","assets/index.html-CPzq3jIZ.js","assets/index.html-CdN1m5lY.js","assets/index.html-i0t4b4Gh.js","assets/index.html-3KyCK8jQ.js","assets/index.html-CVHjR6K2.js","assets/index.html-7GUcNUMS.js","assets/index.html-BcwU6BQn.js","assets/index.html-DL_oWszz.js","assets/index.html-CsNRIOS_.js","assets/index.html-DSXzN1bL.js","assets/index.html-DLpQqUDb.js","assets/index.html-B9MpaOLA.js","assets/index.html-BHQHXYFD.js","assets/index.html-UYo4Z69Y.js","assets/index.html-CPLtKClS.js","assets/index.html-Bbdhvyq4.js","assets/index.html-CEv2vuX2.js","assets/index.html-E6EGRRz1.js","assets/index.html-JoqNgA0r.js","assets/index.html-CKnxzb2R.js","assets/index.html-BAjfDcqw.js","assets/index.html-DLTBNLNR.js","assets/index.html-Cf0YbYwo.js","assets/index.html-B82VISjO.js","assets/index.html-ugJYCrtI.js","assets/index.html-D4ioTPEl.js","assets/index.html-D7jehpSm.js","assets/index.html-DCCkARPZ.js","assets/index.html-DUuiovyR.js","assets/index.html-aXETxx3n.js","assets/index.html-W5vhboEf.js","assets/index.html-WoyNWNBe.js","assets/index.html-k8moSiAH.js","assets/index.html-BGjZme-7.js","assets/index.html-DVWiugnW.js","assets/index.html-By4CyC5O.js","assets/index.html-Bl4yMHr2.js","assets/index.html-BbnDqxkY.js","assets/index.html-B4NAfQI9.js","assets/index.html-CKjTqT5p.js","assets/index.html-DLOuFCMc.js","assets/index.html-CPuLDI9D.js","assets/index.html-DTIWvety.js","assets/index.html-KQbpJ5Ui.js","assets/index.html-CcFx9bjK.js","assets/index.html-DlksdBiU.js","assets/index.html-TWKd3ewL.js","assets/index.html-CobLkL9i.js","assets/index.html-DdlUci_R.js","assets/index.html-Bmo56koN.js","assets/index.html-DNJBn6fh.js","assets/index.html-BqPDoNlu.js","assets/index.html-BDP857kT.js","assets/index.html-WqTe0vqG.js","assets/index.html-C4Fa_Zvh.js","assets/index.html-Y8HSIsXX.js","assets/index.html-BDhVxYGi.js","assets/index.html-AWF6LyvY.js","assets/index.html-HPgEIScp.js","assets/index.html-DlsNs-oD.js","assets/index.html-BZgl9Lk_.js","assets/index.html-CS7EfvsJ.js","assets/index.html-D4dlkox1.js","assets/index.html-BBtXinjs.js","assets/index.html-BbCb2HpP.js","assets/index.html-D4O70pIG.js","assets/index.html-Wgjq8pRm.js","assets/index.html-0JO49y7-.js","assets/index.html-C8QgopAK.js","assets/index.html-rHZaYB2E.js","assets/index.html-CF38qcIP.js","assets/index.html-Djk_Jd1k.js","assets/index.html-BQNsktFs.js","assets/index.html-CDsplrGY.js","assets/index.html-DN0RRbGu.js","assets/index.html-C_3dEg-I.js","assets/index.html-BUf_Ec0V.js","assets/index.html-DLqFT0r5.js","assets/index.html-DfNpphR3.js","assets/index.html-CEJ2UG_s.js","assets/index.html-BbTmOY4J.js","assets/index.html-BXt43Hky.js","assets/index.html-Df9xMLL5.js","assets/index.html-wBt2fxkz.js","assets/index.html-CNS1Ac9p.js","assets/index.html-f8_fMOHO.js","assets/index.html-Dr0t_FkD.js","assets/index.html-BbLRpnwB.js","assets/index.html-DDUScDhk.js","assets/index.html-ilO1rv8A.js","assets/index.html-yOM_1j_n.js","assets/index.html-BxZPDllh.js","assets/index.html-D88H_8VZ.js","assets/index.html-DAXnAp-b.js","assets/index.html-CKepcB9Y.js","assets/index.html-DvUvjFeg.js","assets/index.html-CozMGX7d.js","assets/index.html-pi0a8EWl.js","assets/index.html-DrQHsgp2.js","assets/index.html-Ddsogdiz.js","assets/index.html-CHK2KIAY.js","assets/index.html-DT1Kjbds.js","assets/index.html-C-_LTVUa.js","assets/index.html-BoYxobqM.js","assets/index.html-B8GavPdr.js","assets/index.html-D2MhBUsv.js","assets/index.html-DBeuFuoQ.js","assets/index.html-DixE0UG_.js","assets/index.html-C563IIzj.js","assets/index.html-SYwurSJq.js","assets/index.html-C6vSkbfx.js","assets/index.html-BI0Ftvbu.js","assets/index.html-BaRyyCfn.js","assets/index.html-COwa0DHR.js","assets/index.html-aNa4n6DN.js","assets/index.html-De3Ns9-w.js","assets/index.html-D_DsSQ_y.js","assets/index.html-CfnFfqOx.js","assets/index.html-C_1rh7w-.js","assets/index.html-B2vjFheu.js","assets/index.html-GNy1atVI.js","assets/index.html-CwiGnBul.js","assets/index.html-BJxLwN9k.js","assets/index.html-BwO179Qu.js","assets/index.html-B05WR7cq.js","assets/index.html-DXkeqtYZ.js","assets/index.html-CyVEALbZ.js","assets/index.html-4KxCDip2.js","assets/index.html-BxGsSefQ.js","assets/index.html-heIhS9US.js","assets/index.html-B_0MaDdV.js","assets/index.html-2m-Ud7Ry.js","assets/index.html-Xm9a5gc0.js","assets/index.html-DIuA3EcN.js","assets/index.html-BPiV-mb3.js","assets/index.html-CinOIjmT.js","assets/index.html-2F5Li5na.js","assets/index.html-DDHMlsKk.js","assets/index.html-DJ6LKuw4.js","assets/index.html-BrIWMh0r.js","assets/index.html-BPf9FLhL.js","assets/index.html-UipI9ISd.js","assets/index.html-CyfPSrOo.js","assets/index.html-B8lhXCWg.js","assets/index.html-DzeU25qn.js","assets/index.html-86wUULBE.js","assets/index.html-BvfFqbfm.js","assets/index.html-CfNcRG-e.js","assets/index.html-DwyGK9l5.js","assets/index.html-CODwi63r.js","assets/index.html-UyIJjKBA.js","assets/index.html-CDTvh5Jf.js","assets/index.html-JO6Z4fm-.js","assets/index.html-DBOpOGA7.js","assets/index.html-DoO0AOGZ.js","assets/index.html-6VizYv7C.js","assets/index.html-Cmq9IzEZ.js","assets/index.html-qZIxEG2D.js","assets/index.html-B5CFx1qj.js","assets/index.html-CAt2Iplf.js","assets/index.html-vZCL95Sj.js","assets/index.html-BmbBpevk.js","assets/index.html-BcrSslus.js","assets/index.html-9JCJgVDE.js","assets/index.html-BK_z97bv.js","assets/index.html-Csxxk76I.js","assets/index.html-B2Wb1fYf.js","assets/index.html-B_aognUV.js","assets/index.html-tYxK9vVc.js","assets/index.html-C2FWTqmJ.js","assets/index.html-BR4zDqP0.js","assets/index.html-C4MQOyMu.js","assets/index.html-DxZbSIUe.js","assets/index.html-BujZ0kda.js","assets/index.html-DW8wOq4h.js","assets/index.html-Cm7fYMLz.js","assets/index.html-dz1MEckb.js","assets/index.html-QSK28tas.js","assets/index.html-yIoqtIhb.js","assets/index.html-CrBGID97.js","assets/index.html-DRzjiC2E.js","assets/index.html-DQnQsEAf.js","assets/index.html-5chixTYC.js","assets/index.html-BHThMs19.js","assets/index.html-CZVTk8XV.js","assets/index.html-a0Isuawb.js","assets/index.html-PHIqv0tl.js","assets/index.html-CqVyai7w.js","assets/index.html-Dg5rc0lU.js","assets/index.html-C9T6O88J.js","assets/index.html-qGtAleIW.js","assets/index.html-IJKDLYOC.js","assets/index.html-Dltw6pR2.js","assets/index.html-lKee_MTf.js","assets/index.html-CO3UCF8J.js","assets/index.html-D3GKYTxL.js","assets/index.html-CzwQfCUG.js","assets/index.html-BNzxZJby.js","assets/index.html-DSacS6a-.js","assets/index.html-F6HS8X_I.js","assets/index.html-BWqjMQSO.js","assets/index.html-gwueG5_J.js","assets/index.html-D_kOEq5T.js","assets/index.html-DlUL-xiF.js","assets/index.html-Ck_XVujL.js","assets/index.html-DC0ESU_F.js","assets/index.html-CoFy5dxN.js","assets/index.html-CKza-ah-.js","assets/index.html-BNq-qnS5.js","assets/index.html-7m4_482k.js","assets/index.html-CmFmzo0z.js","assets/index.html-CO3pTmHz.js","assets/index.html-D7dub1AA.js","assets/index.html-D3jL--Vg.js","assets/index.html-DN9zP2Fy.js","assets/index.html-DUetoDB4.js","assets/index.html-BXs7xhVC.js","assets/index.html-eX0034it.js","assets/index.html-D8gEBVou.js","assets/index.html-3gG_DSbT.js","assets/index.html-CpHBud0h.js","assets/index.html-BcPNzOgM.js","assets/index.html-Cb1JJNnb.js","assets/index.html-C7rL1ZzN.js","assets/index.html-CdrTUKIX.js","assets/index.html-JehXsWVZ.js","assets/index.html-CAG3bptB.js","assets/index.html-CiXntyW_.js","assets/index.html-DmHdWTS5.js","assets/index.html-C-1lhz3n.js","assets/index.html-DG1v8p2t.js","assets/index.html-D49cfDsj.js","assets/index.html-B1LXxcJu.js","assets/index.html-D3AyrdHZ.js","assets/index.html-BL7mLiVF.js","assets/index.html-BdYMEbbQ.js","assets/index.html-Dl372-Bi.js","assets/index.html-Bl_a3JJM.js","assets/index.html-9svgUDWH.js","assets/index.html-BmlVAYL8.js","assets/index.html-Beu46yIo.js","assets/index.html-BdbygEep.js","assets/index.html-BWkw7cYy.js","assets/index.html-Gxd08n8F.js","assets/index.html-aZGrl2Gx.js","assets/index.html-xyAzZaxY.js","assets/index.html-jWcQ3qYo.js","assets/index.html-B2lvCH3_.js","assets/index.html-C32emsM2.js","assets/index.html-Byd89d0h.js","assets/index.html-h6y6CN8I.js","assets/index.html-07tNmSvx.js","assets/index.html-CWNb5H9J.js","assets/index.html-DfsuxfRo.js","assets/index.html-GvA9EblR.js","assets/index.html-BZWi218a.js","assets/index.html-CbcGm074.js","assets/index.html-BWcJcPzg.js","assets/index.html-D_JJD1OG.js","assets/index.html-CwYlJaXf.js","assets/index.html-ClOlZ0B3.js","assets/index.html-CIWCgqYL.js","assets/index.html-JRXdUVU0.js","assets/index.html-17LyyIci.js","assets/index.html-BoJcZYE5.js","assets/index.html-DfVcVZ19.js","assets/index.html-BGDcOFjM.js","assets/index.html-DSLkixDk.js","assets/index.html-33FP9Npz.js","assets/index.html-BtGcyHLV.js","assets/index.html-BlLFKu9J.js","assets/index.html-Cq_zERWQ.js","assets/index.html-BEr81Ho5.js","assets/index.html-ClDspl68.js","assets/index.html-BOyHTR51.js","assets/index.html-CwVIF2EF.js","assets/index.html-BxqjQDLN.js","assets/index.html-BoiRm3fn.js","assets/index.html-BYTe2hNA.js","assets/index.html-DBDa3Cm-.js","assets/index.html-CKtYwakB.js","assets/index.html-BwoWcIfW.js","assets/index.html-CdhJgnvi.js","assets/index.html-BPnref-1.js","assets/index.html-XXoT2Ec1.js","assets/index.html-DJ8ZmCd5.js","assets/index.html-9YpDLQIv.js","assets/index.html-MUgqcgbZ.js","assets/index.html-CHO-zARf.js","assets/index.html-C5zowemg.js","assets/index.html-BVkwYE8e.js","assets/index.html-gWRof47C.js","assets/index.html-DBvBfkJ3.js","assets/index.html-Cm6YjK9I.js","assets/index.html-DuP5cNy5.js","assets/index.html-B_4oaWvb.js","assets/index.html-DEY5oDYB.js","assets/index.html-DqVV4K-u.js","assets/index.html-CHi4d-jf.js","assets/index.html-CaI6SNGH.js","assets/index.html-BDWITVJu.js","assets/index.html-DT0sDJ68.js","assets/index.html-BDLkmg_K.js","assets/index.html-CWtfADmU.js","assets/index.html-B70CIc1w.js","assets/index.html-Dasa-hld.js","assets/index.html-C3A9FBzS.js","assets/index.html-CCKwtFsJ.js","assets/index.html-BLQOUV6Y.js","assets/index.html-45zprUwv.js","assets/index.html-e6xAicL_.js","assets/index.html-BxJ-D85B.js","assets/index.html-9thgIDsJ.js","assets/index.html-Dt3I7NTR.js","assets/index.html-DXL_5glT.js","assets/index.html-MQQD3f42.js","assets/index.html-TxFTlpnx.js","assets/index.html-DiWxnLbq.js","assets/index.html-DXEcbtpt.js","assets/index.html-DmEK8SA8.js","assets/index.html-BGW-Gjpc.js","assets/index.html-BHr-yZOl.js","assets/index.html-B92oNyAR.js","assets/index.html-7NwsG6-Z.js","assets/index.html-DZjDD3QO.js","assets/index.html-DMS1RSIR.js","assets/index.html-DkKZbK_2.js","assets/index.html-BQXbQZ4M.js","assets/index.html-C37PG0oe.js","assets/index.html-BgTro5ov.js","assets/index.html-CIAr2Mzx.js","assets/index.html-DQpk5vpG.js","assets/index.html-CUJVI8sr.js","assets/index.html-SG7Ja_VM.js","assets/index.html-CQUJjSKg.js","assets/index.html-DsmAahCB.js","assets/index.html-8571bmId.js","assets/index.html-BdbTvq61.js","assets/index.html-C7_50hWY.js","assets/index.html-wXLdfW3q.js","assets/index.html-QaislJSq.js","assets/index.html-DvN15Ew3.js","assets/index.html-3Yj2Hq6i.js","assets/index.html-CYjfqyAl.js","assets/index.html-CcRgYLdT.js","assets/index.html-CrXEMNyZ.js","assets/index.html-BAwUCl7G.js","assets/index.html-Bfuo-M6_.js","assets/index.html-iirfiOQ7.js","assets/index.html-ilce9mwf.js","assets/index.html-CFyYJ2tR.js","assets/index.html-B1-Za6Qk.js","assets/index.html-Dswrr7F0.js","assets/index.html-ClXxEk-4.js","assets/index.html-BtFxboJv.js","assets/index.html-CVhWLx11.js","assets/index.html-n1qi7lQ0.js","assets/index.html-DcQk_tpC.js","assets/index.html-DYRJ6b0j.js","assets/index.html-0CAiEfKJ.js","assets/index.html-BcEjP867.js","assets/index.html-rC0hluCP.js","assets/index.html-uuPfyfvY.js","assets/index.html-DHONm0Kv.js","assets/index.html-DFpGHruF.js","assets/index.html-BKI7zDyn.js","assets/index.html-jo6X6-xy.js","assets/index.html-DDT5xQEo.js","assets/index.html-BTePITQ3.js","assets/index.html-Bke1Awz1.js","assets/index.html-Bkxq0Me8.js","assets/index.html-CJ00bh0F.js","assets/index.html-DwECOQmP.js","assets/index.html-6N3jcn_6.js","assets/index.html-CqmVZT6Q.js","assets/index.html-CSRm5NZp.js","assets/index.html-CsnylhSt.js","assets/index.html-BQO-7q-2.js","assets/index.html-COaM4kAr.js","assets/index.html-C2i9Us1Y.js","assets/index.html-DzKnSnRA.js","assets/index.html-De513piL.js","assets/index.html-hPu_Buu8.js","assets/index.html-DiGFWWod.js","assets/index.html-ngsEu44F.js","assets/index.html-BWqhkIJ0.js","assets/index.html-gSvD1CV2.js","assets/index.html-Dn0jQM5k.js","assets/index.html-D6lDry3I.js","assets/index.html-CVnjffu_.js"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
/**
* @vue/shared v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Re(n,s){const t=new Set(n.split(","));return p=>t.has(p)}const xn={},Aa=[],cs=()=>{},vr=()=>!1,_t=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&(n.charCodeAt(2)>122||n.charCodeAt(2)<97),Oe=n=>n.startsWith("onUpdate:"),Dn=Object.assign,qe=(n,s)=>{const t=n.indexOf(s);t>-1&&n.splice(t,1)},Er=Object.prototype.hasOwnProperty,un=(n,s)=>Er.call(n,s),Z=Array.isArray,Sa=n=>yp(n)==="[object Map]",nl=n=>yp(n)==="[object Set]",tn=n=>typeof n=="function",On=n=>typeof n=="string",ha=n=>typeof n=="symbol",vn=n=>n!==null&&typeof n=="object",sl=n=>(vn(n)||tn(n))&&tn(n.then)&&tn(n.catch),al=Object.prototype.toString,yp=n=>al.call(n),Tr=n=>yp(n).slice(8,-1),tl=n=>yp(n)==="[object Object]",je=n=>On(n)&&n!=="NaN"&&n[0]!=="-"&&""+parseInt(n,10)===n,Pa=Re(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),bp=n=>{const s=Object.create(null);return t=>s[t]||(s[t]=n(t))},xr=/-(\w)/g,rs=bp(n=>n.replace(xr,(s,t)=>t?t.toUpperCase():"")),Ar=/\B([A-Z])/g,Na=bp(n=>n.replace(Ar,"-$1").toLowerCase()),vt=bp(n=>n.charAt(0).toUpperCase()+n.slice(1)),Cp=bp(n=>n?`on${vt(n)}`:""),Zs=(n,s)=>!Object.is(n,s),Lp=(n,s)=>{for(let t=0;t<n.length;t++)n[t](s)},pl=(n,s,t,p=!1)=>{Object.defineProperty(n,s,{configurable:!0,enumerable:!1,writable:p,value:t})},Sr=n=>{const s=parseFloat(n);return isNaN(s)?n:s},Pr=n=>{const s=On(n)?Number(n):NaN;return isNaN(s)?n:s};let zo;const el=()=>zo||(zo=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Ne(n){if(Z(n)){const s={};for(let t=0;t<n.length;t++){const p=n[t],e=On(p)?Cr(p):Ne(p);if(e)for(const o in e)s[o]=e[o]}return s}else if(On(n)||vn(n))return n}const Ir=/;(?![^(]*\))/g,zr=/:([^]+)/,Dr=/\/\*[^]*?\*\//g;function Cr(n){const s={};return n.replace(Dr,"").split(Ir).forEach(t=>{if(t){const p=t.split(zr);p.length>1&&(s[p[0].trim()]=p[1].trim())}}),s}function Ve(n){let s="";if(On(n))s=n;else if(Z(n))for(let t=0;t<n.length;t++){const p=Ve(n[t]);p&&(s+=p+" ")}else if(vn(n))for(const t in n)n[t]&&(s+=t+" ");return s.trim()}const Lr="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Rr=Re(Lr);function ol(n){return!!n||n===""}const ay=n=>On(n)?n:n==null?"":Z(n)||vn(n)&&(n.toString===al||!tn(n.toString))?JSON.stringify(n,cl,2):String(n),cl=(n,s)=>s&&s.__v_isRef?cl(n,s.value):Sa(s)?{[`Map(${s.size})`]:[...s.entries()].reduce((t,[p,e],o)=>(t[Rp(p,o)+" =>"]=e,t),{})}:nl(s)?{[`Set(${s.size})`]:[...s.values()].map(t=>Rp(t))}:ha(s)?Rp(s):vn(s)&&!Z(s)&&!tl(s)?String(s):s,Rp=(n,s="")=>{var t;return ha(n)?`Symbol(${(t=n.description)!=null?t:s})`:n};/**
* @vue/reactivity v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Yn;class Or{constructor(s=!1){this.detached=s,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Yn,!s&&Yn&&(this.index=(Yn.scopes||(Yn.scopes=[])).push(this)-1)}get active(){return this._active}run(s){if(this._active){const t=Yn;try{return Yn=this,s()}finally{Yn=t}}}on(){Yn=this}off(){Yn=this.parent}stop(s){if(this._active){let t,p;for(t=0,p=this.effects.length;t<p;t++)this.effects[t].stop();for(t=0,p=this.cleanups.length;t<p;t++)this.cleanups[t]();if(this.scopes)for(t=0,p=this.scopes.length;t<p;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!s){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function qr(n,s=Yn){s&&s.active&&s.effects.push(n)}function ll(){return Yn}function jr(n){Yn&&Yn.cleanups.push(n)}let ka;class Me{constructor(s,t,p,e){this.fn=s,this.trigger=t,this.scheduler=p,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,qr(this,e)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,aa();for(let s=0;s<this._depsLength;s++){const t=this.deps[s];if(t.computed&&(Nr(t.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),ta()}return this._dirtyLevel>=4}set dirty(s){this._dirtyLevel=s?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let s=Xs,t=ka;try{return Xs=!0,ka=this,this._runnings++,Do(this),this.fn()}finally{Co(this),this._runnings--,ka=t,Xs=s}}stop(){this.active&&(Do(this),Co(this),this.onStop&&this.onStop(),this.active=!1)}}function Nr(n){return n.value}function Do(n){n._trackId++,n._depsLength=0}function Co(n){if(n.deps.length>n._depsLength){for(let s=n._depsLength;s<n.deps.length;s++)ul(n.deps[s],n);n.deps.length=n._depsLength}}function ul(n,s){const t=n.get(s);t!==void 0&&s._trackId!==t&&(n.delete(s),n.size===0&&n.cleanup())}let Xs=!0,ee=0;const il=[];function aa(){il.push(Xs),Xs=!1}function ta(){const n=il.pop();Xs=n===void 0?!0:n}function Be(){ee++}function Fe(){for(ee--;!ee&&oe.length;)oe.shift()()}function rl(n,s,t){if(s.get(n)!==n._trackId){s.set(n,n._trackId);const p=n.deps[n._depsLength];p!==s?(p&&ul(p,n),n.deps[n._depsLength++]=s):n._depsLength++}}const oe=[];function kl(n,s,t){Be();for(const p of n.keys()){let e;p._dirtyLevel<s&&(e??(e=n.get(p)===p._trackId))&&(p._shouldSchedule||(p._shouldSchedule=p._dirtyLevel===0),p._dirtyLevel=s),p._shouldSchedule&&(e??(e=n.get(p)===p._trackId))&&(p.trigger(),(!p._runnings||p.allowRecurse)&&p._dirtyLevel!==2&&(p._shouldSchedule=!1,p.scheduler&&oe.push(p.scheduler)))}Fe()}const dl=(n,s)=>{const t=new Map;return t.cleanup=n,t.computed=s,t},up=new WeakMap,da=Symbol(""),ce=Symbol("");function Kn(n,s,t){if(Xs&&ka){let p=up.get(n);p||up.set(n,p=new Map);let e=p.get(t);e||p.set(t,e=dl(()=>p.delete(t))),rl(ka,e)}}function Ls(n,s,t,p,e,o){const c=up.get(n);if(!c)return;let u=[];if(s==="clear")u=[...c.values()];else if(t==="length"&&Z(n)){const i=Number(p);c.forEach((r,k)=>{(k==="length"||!ha(k)&&k>=i)&&u.push(r)})}else switch(t!==void 0&&u.push(c.get(t)),s){case"add":Z(n)?je(t)&&u.push(c.get("length")):(u.push(c.get(da)),Sa(n)&&u.push(c.get(ce)));break;case"delete":Z(n)||(u.push(c.get(da)),Sa(n)&&u.push(c.get(ce)));break;case"set":Sa(n)&&u.push(c.get(da));break}Be();for(const i of u)i&&kl(i,4);Fe()}function Vr(n,s){const t=up.get(n);return t&&t.get(s)}const Mr=Re("__proto__,__v_isRef,__isVue"),ml=new Set(Object.getOwnPropertyNames(Symbol).filter(n=>n!=="arguments"&&n!=="caller").map(n=>Symbol[n]).filter(ha)),Lo=Br();function Br(){const n={};return["includes","indexOf","lastIndexOf"].forEach(s=>{n[s]=function(...t){const p=rn(this);for(let o=0,c=this.length;o<c;o++)Kn(p,"get",o+"");const e=p[s](...t);return e===-1||e===!1?p[s](...t.map(rn)):e}}),["push","pop","shift","unshift","splice"].forEach(s=>{n[s]=function(...t){aa(),Be();const p=rn(this)[s].apply(this,t);return Fe(),ta(),p}}),n}function Fr(n){ha(n)||(n=String(n));const s=rn(this);return Kn(s,"has",n),s.hasOwnProperty(n)}class gl{constructor(s=!1,t=!1){this._isReadonly=s,this._isShallow=t}get(s,t,p){const e=this._isReadonly,o=this._isShallow;if(t==="__v_isReactive")return!e;if(t==="__v_isReadonly")return e;if(t==="__v_isShallow")return o;if(t==="__v_raw")return p===(e?o?sk:fl:o?bl:yl).get(s)||Object.getPrototypeOf(s)===Object.getPrototypeOf(p)?s:void 0;const c=Z(s);if(!e){if(c&&un(Lo,t))return Reflect.get(Lo,t,p);if(t==="hasOwnProperty")return Fr}const u=Reflect.get(s,t,p);return(ha(t)?ml.has(t):Mr(t))||(e||Kn(s,"get",t),o)?u:Mn(u)?c&&je(t)?u:u.value:vn(u)?e?ya(u):Et(u):u}}class hl extends gl{constructor(s=!1){super(!1,s)}set(s,t,p,e){let o=s[t];if(!this._isShallow){const i=ot(o);if(!ip(p)&&!ot(p)&&(o=rn(o),p=rn(p)),!Z(s)&&Mn(o)&&!Mn(p))return i?!1:(o.value=p,!0)}const c=Z(s)&&je(t)?Number(t)<s.length:un(s,t),u=Reflect.set(s,t,p,e);return s===rn(e)&&(c?Zs(p,o)&&Ls(s,"set",t,p):Ls(s,"add",t,p)),u}deleteProperty(s,t){const p=un(s,t);s[t];const e=Reflect.deleteProperty(s,t);return e&&p&&Ls(s,"delete",t,void 0),e}has(s,t){const p=Reflect.has(s,t);return(!ha(t)||!ml.has(t))&&Kn(s,"has",t),p}ownKeys(s){return Kn(s,"iterate",Z(s)?"length":da),Reflect.ownKeys(s)}}class Hr extends gl{constructor(s=!1){super(!0,s)}set(s,t){return!0}deleteProperty(s,t){return!0}}const Wr=new hl,Gr=new Hr,Ur=new hl(!0);const He=n=>n,fp=n=>Reflect.getPrototypeOf(n);function Wt(n,s,t=!1,p=!1){n=n.__v_raw;const e=rn(n),o=rn(s);t||(Zs(s,o)&&Kn(e,"get",s),Kn(e,"get",o));const{has:c}=fp(e),u=p?He:t?Ue:ct;if(c.call(e,s))return u(n.get(s));if(c.call(e,o))return u(n.get(o));n!==e&&n.get(s)}function Gt(n,s=!1){const t=this.__v_raw,p=rn(t),e=rn(n);return s||(Zs(n,e)&&Kn(p,"has",n),Kn(p,"has",e)),n===e?t.has(n):t.has(n)||t.has(e)}function Ut(n,s=!1){return n=n.__v_raw,!s&&Kn(rn(n),"iterate",da),Reflect.get(n,"size",n)}function Ro(n){n=rn(n);const s=rn(this);return fp(s).has.call(s,n)||(s.add(n),Ls(s,"add",n,n)),this}function Oo(n,s){s=rn(s);const t=rn(this),{has:p,get:e}=fp(t);let o=p.call(t,n);o||(n=rn(n),o=p.call(t,n));const c=e.call(t,n);return t.set(n,s),o?Zs(s,c)&&Ls(t,"set",n,s):Ls(t,"add",n,s),this}function qo(n){const s=rn(this),{has:t,get:p}=fp(s);let e=t.call(s,n);e||(n=rn(n),e=t.call(s,n)),p&&p.call(s,n);const o=s.delete(n);return e&&Ls(s,"delete",n,void 0),o}function jo(){const n=rn(this),s=n.size!==0,t=n.clear();return s&&Ls(n,"clear",void 0,void 0),t}function Qt(n,s){return function(p,e){const o=this,c=o.__v_raw,u=rn(c),i=s?He:n?Ue:ct;return!n&&Kn(u,"iterate",da),c.forEach((r,k)=>p.call(e,i(r),i(k),o))}}function $t(n,s,t){return function(...p){const e=this.__v_raw,o=rn(e),c=Sa(o),u=n==="entries"||n===Symbol.iterator&&c,i=n==="keys"&&c,r=e[n](...p),k=t?He:s?Ue:ct;return!s&&Kn(o,"iterate",i?ce:da),{next(){const{value:d,done:m}=r.next();return m?{value:d,done:m}:{value:u?[k(d[0]),k(d[1])]:k(d),done:m}},[Symbol.iterator](){return this}}}}function Ms(n){return function(...s){return n==="delete"?!1:n==="clear"?void 0:this}}function Qr(){const n={get(o){return Wt(this,o)},get size(){return Ut(this)},has:Gt,add:Ro,set:Oo,delete:qo,clear:jo,forEach:Qt(!1,!1)},s={get(o){return Wt(this,o,!1,!0)},get size(){return Ut(this)},has:Gt,add:Ro,set:Oo,delete:qo,clear:jo,forEach:Qt(!1,!0)},t={get(o){return Wt(this,o,!0)},get size(){return Ut(this,!0)},has(o){return Gt.call(this,o,!0)},add:Ms("add"),set:Ms("set"),delete:Ms("delete"),clear:Ms("clear"),forEach:Qt(!0,!1)},p={get(o){return Wt(this,o,!0,!0)},get size(){return Ut(this,!0)},has(o){return Gt.call(this,o,!0)},add:Ms("add"),set:Ms("set"),delete:Ms("delete"),clear:Ms("clear"),forEach:Qt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{n[o]=$t(o,!1,!1),t[o]=$t(o,!0,!1),s[o]=$t(o,!1,!0),p[o]=$t(o,!0,!0)}),[n,t,s,p]}const[$r,Kr,Jr,Xr]=Qr();function We(n,s){const t=s?n?Xr:Jr:n?Kr:$r;return(p,e,o)=>e==="__v_isReactive"?!n:e==="__v_isReadonly"?n:e==="__v_raw"?p:Reflect.get(un(t,e)&&e in p?t:p,e,o)}const Yr={get:We(!1,!1)},Zr={get:We(!1,!0)},nk={get:We(!0,!1)};const yl=new WeakMap,bl=new WeakMap,fl=new WeakMap,sk=new WeakMap;function ak(n){switch(n){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function tk(n){return n.__v_skip||!Object.isExtensible(n)?0:ak(Tr(n))}function Et(n){return ot(n)?n:Ge(n,!1,Wr,Yr,yl)}function wl(n){return Ge(n,!1,Ur,Zr,bl)}function ya(n){return Ge(n,!0,Gr,nk,fl)}function Ge(n,s,t,p,e){if(!vn(n)||n.__v_raw&&!(s&&n.__v_isReactive))return n;const o=e.get(n);if(o)return o;const c=tk(n);if(c===0)return n;const u=new Proxy(n,c===2?p:t);return e.set(n,u),u}function Ja(n){return ot(n)?Ja(n.__v_raw):!!(n&&n.__v_isReactive)}function ot(n){return!!(n&&n.__v_isReadonly)}function ip(n){return!!(n&&n.__v_isShallow)}function _l(n){return n?!!n.__v_raw:!1}function rn(n){const s=n&&n.__v_raw;return s?rn(s):n}function pk(n){return Object.isExtensible(n)&&pl(n,"__v_skip",!0),n}const ct=n=>vn(n)?Et(n):n,Ue=n=>vn(n)?ya(n):n;class vl{constructor(s,t,p,e){this.getter=s,this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Me(()=>s(this._value),()=>Xa(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!e,this.__v_isReadonly=p}get value(){const s=rn(this);return(!s._cacheable||s.effect.dirty)&&Zs(s._value,s._value=s.effect.run())&&Xa(s,4),Qe(s),s.effect._dirtyLevel>=2&&Xa(s,2),s._value}set value(s){this._setter(s)}get _dirty(){return this.effect.dirty}set _dirty(s){this.effect.dirty=s}}function ek(n,s,t=!1){let p,e;const o=tn(n);return o?(p=n,e=cs):(p=n.get,e=n.set),new vl(p,e,o||!e,t)}function Qe(n){var s;Xs&&ka&&(n=rn(n),rl(ka,(s=n.dep)!=null?s:n.dep=dl(()=>n.dep=void 0,n instanceof vl?n:void 0)))}function Xa(n,s=4,t){n=rn(n);const p=n.dep;p&&kl(p,s)}function Mn(n){return!!(n&&n.__v_isRef===!0)}function J(n){return El(n,!1)}function Cn(n){return El(n,!0)}function El(n,s){return Mn(n)?n:new ok(n,s)}class ok{constructor(s,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?s:rn(s),this._value=t?s:ct(s)}get value(){return Qe(this),this._value}set value(s){const t=this.__v_isShallow||ip(s)||ot(s);s=t?s:rn(s),Zs(s,this._rawValue)&&(this._rawValue=s,this._value=t?s:ct(s),Xa(this,4))}}function ma(n){return Mn(n)?n.value:n}const ck={get:(n,s,t)=>ma(Reflect.get(n,s,t)),set:(n,s,t,p)=>{const e=n[s];return Mn(e)&&!Mn(t)?(e.value=t,!0):Reflect.set(n,s,t,p)}};function Tl(n){return Ja(n)?n:new Proxy(n,ck)}class lk{constructor(s){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:p}=s(()=>Qe(this),()=>Xa(this));this._get=t,this._set=p}get value(){return this._get()}set value(s){this._set(s)}}function $e(n){return new lk(n)}class uk{constructor(s,t,p){this._object=s,this._key=t,this._defaultValue=p,this.__v_isRef=!0}get value(){const s=this._object[this._key];return s===void 0?this._defaultValue:s}set value(s){this._object[this._key]=s}get dep(){return Vr(rn(this._object),this._key)}}class ik{constructor(s){this._getter=s,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function Va(n,s,t){return Mn(n)?n:tn(n)?new ik(n):vn(n)&&arguments.length>1?rk(n,s,t):J(n)}function rk(n,s,t){const p=n[s];return Mn(p)?p:new uk(n,s,t)}/**
* @vue/runtime-core v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Ys(n,s,t,p){try{return p?n(...p):n()}catch(e){Tt(e,s,t)}}function us(n,s,t,p){if(tn(n)){const e=Ys(n,s,t,p);return e&&sl(e)&&e.catch(o=>{Tt(o,s,t)}),e}if(Z(n)){const e=[];for(let o=0;o<n.length;o++)e.push(us(n[o],s,t,p));return e}}function Tt(n,s,t,p=!0){const e=s?s.vnode:null;if(s){let o=s.parent;const c=s.proxy,u=`https://vuejs.org/error-reference/#runtime-${t}`;for(;o;){const r=o.ec;if(r){for(let k=0;k<r.length;k++)if(r[k](n,c,u)===!1)return}o=o.parent}const i=s.appContext.config.errorHandler;if(i){aa(),Ys(i,null,10,[n,c,u]),ta();return}}kk(n,t,e,p)}function kk(n,s,t,p=!0){console.error(n)}let lt=!1,le=!1;const Hn=[];let xs=0;const Ia=[];let Us=null,ua=0;const xl=Promise.resolve();let Ke=null;function Os(n){const s=Ke||xl;return n?s.then(this?n.bind(this):n):s}function dk(n){let s=xs+1,t=Hn.length;for(;s<t;){const p=s+t>>>1,e=Hn[p],o=ut(e);o<n||o===n&&e.pre?s=p+1:t=p}return s}function wp(n){(!Hn.length||!Hn.includes(n,lt&&n.allowRecurse?xs+1:xs))&&(n.id==null?Hn.push(n):Hn.splice(dk(n.id),0,n),Al())}function Al(){!lt&&!le&&(le=!0,Ke=xl.then(Sl))}function mk(n){const s=Hn.indexOf(n);s>xs&&Hn.splice(s,1)}function gk(n){Z(n)?Ia.push(...n):(!Us||!Us.includes(n,n.allowRecurse?ua+1:ua))&&Ia.push(n),Al()}function No(n,s,t=lt?xs+1:0){for(;t<Hn.length;t++){const p=Hn[t];if(p&&p.pre){if(n&&p.id!==n.uid)continue;Hn.splice(t,1),t--,p()}}}function rp(n){if(Ia.length){const s=[...new Set(Ia)].sort((t,p)=>ut(t)-ut(p));if(Ia.length=0,Us){Us.push(...s);return}for(Us=s,ua=0;ua<Us.length;ua++)Us[ua]();Us=null,ua=0}}const ut=n=>n.id==null?1/0:n.id,hk=(n,s)=>{const t=ut(n)-ut(s);if(t===0){if(n.pre&&!s.pre)return-1;if(s.pre&&!n.pre)return 1}return t};function Sl(n){le=!1,lt=!0,Hn.sort(hk);try{for(xs=0;xs<Hn.length;xs++){const s=Hn[xs];s&&s.active!==!1&&Ys(s,null,14)}}finally{xs=0,Hn.length=0,rp(),lt=!1,Ke=null,(Hn.length||Ia.length)&&Sl()}}function yk(n,s,...t){if(n.isUnmounted)return;const p=n.vnode.props||xn;let e=t;const o=s.startsWith("update:"),c=o&&s.slice(7);if(c&&c in p){const k=`${c==="modelValue"?"model":c}Modifiers`,{number:d,trim:m}=p[k]||xn;m&&(e=t.map(g=>On(g)?g.trim():g)),d&&(e=t.map(Sr))}let u,i=p[u=Cp(s)]||p[u=Cp(rs(s))];!i&&o&&(i=p[u=Cp(Na(s))]),i&&us(i,n,6,e);const r=p[u+"Once"];if(r){if(!n.emitted)n.emitted={};else if(n.emitted[u])return;n.emitted[u]=!0,us(r,n,6,e)}}function Pl(n,s,t=!1){const p=s.emitsCache,e=p.get(n);if(e!==void 0)return e;const o=n.emits;let c={},u=!1;if(!tn(n)){const i=r=>{const k=Pl(r,s,!0);k&&(u=!0,Dn(c,k))};!t&&s.mixins.length&&s.mixins.forEach(i),n.extends&&i(n.extends),n.mixins&&n.mixins.forEach(i)}return!o&&!u?(vn(n)&&p.set(n,null),null):(Z(o)?o.forEach(i=>c[i]=null):Dn(c,o),vn(n)&&p.set(n,c),c)}function _p(n,s){return!n||!_t(s)?!1:(s=s.slice(2).replace(/Once$/,""),un(n,s[0].toLowerCase()+s.slice(1))||un(n,Na(s))||un(n,s))}let ls=null,Il=null;function kp(n){const s=ls;return ls=n,Il=n&&n.type.__scopeId||null,s}function bk(n,s=ls,t){if(!s||n._n)return n;const p=(...e)=>{p._d&&Jo(-1);const o=kp(s);let c;try{c=n(...e)}finally{kp(o),p._d&&Jo(1)}return c};return p._n=!0,p._c=!0,p._d=!0,p}function Op(n){const{type:s,vnode:t,proxy:p,withProxy:e,propsOptions:[o],slots:c,attrs:u,emit:i,render:r,renderCache:k,props:d,data:m,setupState:g,ctx:y,inheritAttrs:w}=n,T=kp(n);let _,x;try{if(t.shapeFlag&4){const v=e||p,q=v;_=gs(r.call(q,v,k,d,g,m,y)),x=u}else{const v=s;_=gs(v.length>1?v(d,{attrs:u,slots:c,emit:i}):v(d,null)),x=s.props?u:fk(u)}}catch(v){at.length=0,Tt(v,n,1),_=zn(ss)}let f=_;if(x&&w!==!1){const v=Object.keys(x),{shapeFlag:q}=f;v.length&&q&7&&(o&&v.some(Oe)&&(x=wk(x,o)),f=na(f,x,!1,!0))}return t.dirs&&(f=na(f,null,!1,!0),f.dirs=f.dirs?f.dirs.concat(t.dirs):t.dirs),t.transition&&(f.transition=t.transition),_=f,kp(T),_}const fk=n=>{let s;for(const t in n)(t==="class"||t==="style"||_t(t))&&((s||(s={}))[t]=n[t]);return s},wk=(n,s)=>{const t={};for(const p in n)(!Oe(p)||!(p.slice(9)in s))&&(t[p]=n[p]);return t};function _k(n,s,t){const{props:p,children:e,component:o}=n,{props:c,children:u,patchFlag:i}=s,r=o.emitsOptions;if(s.dirs||s.transition)return!0;if(t&&i>=0){if(i&1024)return!0;if(i&16)return p?Vo(p,c,r):!!c;if(i&8){const k=s.dynamicProps;for(let d=0;d<k.length;d++){const m=k[d];if(c[m]!==p[m]&&!_p(r,m))return!0}}}else return(e||u)&&(!u||!u.$stable)?!0:p===c?!1:p?c?Vo(p,c,r):!0:!!c;return!1}function Vo(n,s,t){const p=Object.keys(s);if(p.length!==Object.keys(n).length)return!0;for(let e=0;e<p.length;e++){const o=p[e];if(s[o]!==n[o]&&!_p(t,o))return!0}return!1}function vk({vnode:n,parent:s},t){for(;s;){const p=s.subTree;if(p.suspense&&p.suspense.activeBranch===n&&(p.el=n.el),p===n)(n=s.vnode).el=t,s=s.parent;else break}}const zl="components";function ys(n,s){return Tk(zl,n,!0,s)||n}const Ek=Symbol.for("v-ndc");function Tk(n,s,t=!0,p=!1){const e=ls||Vn;if(e){const o=e.type;if(n===zl){const u=wd(o,!1);if(u&&(u===s||u===rs(s)||u===vt(rs(s))))return o}const c=Mo(e[n]||o[n],s)||Mo(e.appContext[n],s);return!c&&p?o:c}}function Mo(n,s){return n&&(n[s]||n[rs(s)]||n[vt(rs(s))])}const xk=n=>n.__isSuspense;function Dl(n,s){s&&s.pendingBranch?Z(n)?s.effects.push(...n):s.effects.push(n):gk(n)}const Ak=Symbol.for("v-scx"),Sk=()=>An(Ak);function Cl(n,s){return Je(n,null,s)}const Kt={};function kn(n,s,t){return Je(n,s,t)}function Je(n,s,{immediate:t,deep:p,flush:e,once:o,onTrack:c,onTrigger:u}=xn){if(s&&o){const C=s;s=(...N)=>{C(...N),q()}}const i=Vn,r=C=>p===!0?C:Ta(C,p===!1?1:void 0);let k,d=!1,m=!1;if(Mn(n)?(k=()=>n.value,d=ip(n)):Ja(n)?(k=()=>r(n),d=!0):Z(n)?(m=!0,d=n.some(C=>Ja(C)||ip(C)),k=()=>n.map(C=>{if(Mn(C))return C.value;if(Ja(C))return r(C);if(tn(C))return Ys(C,i,2)})):tn(n)?s?k=()=>Ys(n,i,2):k=()=>(g&&g(),us(n,i,3,[y])):k=cs,s&&p){const C=k;k=()=>Ta(C())}let g,y=C=>{g=f.onStop=()=>{Ys(C,i,4),g=f.onStop=void 0}},w;if(Pt)if(y=cs,s?t&&us(s,i,3,[k(),m?[]:void 0,y]):k(),e==="sync"){const C=Sk();w=C.__watcherHandles||(C.__watcherHandles=[])}else return cs;let T=m?new Array(n.length).fill(Kt):Kt;const _=()=>{if(!(!f.active||!f.dirty))if(s){const C=f.run();(p||d||(m?C.some((N,L)=>Zs(N,T[L])):Zs(C,T)))&&(g&&g(),us(s,i,3,[C,T===Kt?void 0:m&&T[0]===Kt?[]:T,y]),T=C)}else f.run()};_.allowRecurse=!!s;let x;e==="sync"?x=_:e==="post"?x=()=>Un(_,i&&i.suspense):(_.pre=!0,i&&(_.id=i.uid),x=()=>wp(_));const f=new Me(k,cs,x),v=ll(),q=()=>{f.stop(),v&&qe(v.effects,f)};return s?t?_():T=f.run():e==="post"?Un(f.run.bind(f),i&&i.suspense):f.run(),w&&w.push(q),q}function Pk(n,s,t){const p=this.proxy,e=On(n)?n.includes(".")?Ll(p,n):()=>p[n]:n.bind(p,p);let o;tn(s)?o=s:(o=s.handler,t=s);const c=St(this),u=Je(e,o.bind(p),t);return c(),u}function Ll(n,s){const t=s.split(".");return()=>{let p=n;for(let e=0;e<t.length&&p;e++)p=p[t[e]];return p}}function Ta(n,s=1/0,t){if(s<=0||!vn(n)||n.__v_skip||(t=t||new Set,t.has(n)))return n;if(t.add(n),s--,Mn(n))Ta(n.value,s,t);else if(Z(n))for(let p=0;p<n.length;p++)Ta(n[p],s,t);else if(nl(n)||Sa(n))n.forEach(p=>{Ta(p,s,t)});else if(tl(n))for(const p in n)Ta(n[p],s,t);return n}function Ts(n,s,t,p){const e=n.dirs,o=s&&s.dirs;for(let c=0;c<e.length;c++){const u=e[c];o&&(u.oldValue=o[c].value);let i=u.dir[p];i&&(aa(),us(i,t,8,[n.el,u,n,s]),ta())}}const Qs=Symbol("_leaveCb"),Jt=Symbol("_enterCb");function Rl(){const n={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return fn(()=>{n.isMounted=!0}),Vl(()=>{n.isUnmounting=!0}),n}const ps=[Function,Array],Ol={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ps,onEnter:ps,onAfterEnter:ps,onEnterCancelled:ps,onBeforeLeave:ps,onLeave:ps,onAfterLeave:ps,onLeaveCancelled:ps,onBeforeAppear:ps,onAppear:ps,onAfterAppear:ps,onAppearCancelled:ps},Ik={name:"BaseTransition",props:Ol,setup(n,{slots:s}){const t=At(),p=Rl();return()=>{const e=s.default&&Xe(s.default(),!0);if(!e||!e.length)return;let o=e[0];if(e.length>1){for(const m of e)if(m.type!==ss){o=m;break}}const c=rn(n),{mode:u}=c;if(p.isLeaving)return qp(o);const i=Bo(o);if(!i)return qp(o);const r=it(i,c,p,t);rt(i,r);const k=t.subTree,d=k&&Bo(k);if(d&&d.type!==ss&&!ia(i,d)){const m=it(d,c,p,t);if(rt(d,m),u==="out-in"&&i.type!==ss)return p.isLeaving=!0,m.afterLeave=()=>{p.isLeaving=!1,t.update.active!==!1&&(t.effect.dirty=!0,t.update())},qp(o);u==="in-out"&&i.type!==ss&&(m.delayLeave=(g,y,w)=>{const T=ql(p,d);T[String(d.key)]=d,g[Qs]=()=>{y(),g[Qs]=void 0,delete r.delayedLeave},r.delayedLeave=w})}return o}}},zk=Ik;function ql(n,s){const{leavingVNodes:t}=n;let p=t.get(s.type);return p||(p=Object.create(null),t.set(s.type,p)),p}function it(n,s,t,p){const{appear:e,mode:o,persisted:c=!1,onBeforeEnter:u,onEnter:i,onAfterEnter:r,onEnterCancelled:k,onBeforeLeave:d,onLeave:m,onAfterLeave:g,onLeaveCancelled:y,onBeforeAppear:w,onAppear:T,onAfterAppear:_,onAppearCancelled:x}=s,f=String(n.key),v=ql(t,n),q=(L,K)=>{L&&us(L,p,9,K)},C=(L,K)=>{const D=K[1];q(L,K),Z(L)?L.every(G=>G.length<=1)&&D():L.length<=1&&D()},N={mode:o,persisted:c,beforeEnter(L){let K=u;if(!t.isMounted)if(e)K=w||u;else return;L[Qs]&&L[Qs](!0);const D=v[f];D&&ia(n,D)&&D.el[Qs]&&D.el[Qs](),q(K,[L])},enter(L){let K=i,D=r,G=k;if(!t.isMounted)if(e)K=T||i,D=_||r,G=x||k;else return;let R=!1;const nn=L[Jt]=Sn=>{R||(R=!0,Sn?q(G,[L]):q(D,[L]),N.delayedLeave&&N.delayedLeave(),L[Jt]=void 0)};K?C(K,[L,nn]):nn()},leave(L,K){const D=String(n.key);if(L[Jt]&&L[Jt](!0),t.isUnmounting)return K();q(d,[L]);let G=!1;const R=L[Qs]=nn=>{G||(G=!0,K(),nn?q(y,[L]):q(g,[L]),L[Qs]=void 0,v[D]===n&&delete v[D])};v[D]=n,m?C(m,[L,R]):R()},clone(L){return it(L,s,t,p)}};return N}function qp(n){if(xt(n))return n=na(n),n.children=null,n}function Bo(n){if(!xt(n))return n;const{shapeFlag:s,children:t}=n;if(t){if(s&16)return t[0];if(s&32&&tn(t.default))return t.default()}}function rt(n,s){n.shapeFlag&6&&n.component?rt(n.component.subTree,s):n.shapeFlag&128?(n.ssContent.transition=s.clone(n.ssContent),n.ssFallback.transition=s.clone(n.ssFallback)):n.transition=s}function Xe(n,s=!1,t){let p=[],e=0;for(let o=0;o<n.length;o++){let c=n[o];const u=t==null?c.key:String(t)+String(c.key!=null?c.key:o);c.type===Zn?(c.patchFlag&128&&e++,p=p.concat(Xe(c.children,s,u))):(s||c.type!==ss)&&p.push(u!=null?na(c,{key:u}):c)}if(e>1)for(let o=0;o<p.length;o++)p[o].patchFlag=-2;return p}/*! #__NO_SIDE_EFFECTS__ */function M(n,s){return tn(n)?Dn({name:n.name},s,{setup:n}):n}const Ya=n=>!!n.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function Dk(n){tn(n)&&(n={loader:n});const{loader:s,loadingComponent:t,errorComponent:p,delay:e=200,timeout:o,suspensible:c=!0,onError:u}=n;let i=null,r,k=0;const d=()=>(k++,i=null,m()),m=()=>{let g;return i||(g=i=s().catch(y=>{if(y=y instanceof Error?y:new Error(String(y)),u)return new Promise((w,T)=>{u(y,()=>w(d()),()=>T(y),k+1)});throw y}).then(y=>g!==i&&i?i:(y&&(y.__esModule||y[Symbol.toStringTag]==="Module")&&(y=y.default),r=y,y)))};return M({name:"AsyncComponentWrapper",__asyncLoader:m,get __asyncResolved(){return r},setup(){const g=Vn;if(r)return()=>jp(r,g);const y=x=>{i=null,Tt(x,g,13,!p)};if(c&&g.suspense||Pt)return m().then(x=>()=>jp(x,g)).catch(x=>(y(x),()=>p?zn(p,{error:x}):null));const w=J(!1),T=J(),_=J(!!e);return e&&setTimeout(()=>{_.value=!1},e),o!=null&&setTimeout(()=>{if(!w.value&&!T.value){const x=new Error(`Async component timed out after ${o}ms.`);y(x),T.value=x}},o),m().then(()=>{w.value=!0,g.parent&&xt(g.parent.vnode)&&(g.parent.effect.dirty=!0,wp(g.parent.update))}).catch(x=>{y(x),T.value=x}),()=>{if(w.value&&r)return jp(r,g);if(T.value&&p)return zn(p,{error:T.value});if(t&&!_.value)return zn(t)}}})}function jp(n,s){const{ref:t,props:p,children:e,ce:o}=s.vnode,c=zn(n,p,e);return c.ref=t,c.ce=o,delete s.vnode.ce,c}const xt=n=>n.type.__isKeepAlive;function Ck(n,s){jl(n,"a",s)}function Lk(n,s){jl(n,"da",s)}function jl(n,s,t=Vn){const p=n.__wdc||(n.__wdc=()=>{let e=t;for(;e;){if(e.isDeactivated)return;e=e.parent}return n()});if(vp(s,p,t),t){let e=t.parent;for(;e&&e.parent;)xt(e.parent.vnode)&&Rk(p,s,t,e),e=e.parent}}function Rk(n,s,t,p){const e=vp(s,n,p,!0);Ma(()=>{qe(p[s],e)},t)}function vp(n,s,t=Vn,p=!1){if(t){const e=t[n]||(t[n]=[]),o=s.__weh||(s.__weh=(...c)=>{if(t.isUnmounted)return;aa();const u=St(t),i=us(s,t,n,c);return u(),ta(),i});return p?e.unshift(o):e.push(o),o}}const qs=n=>(s,t=Vn)=>(!Pt||n==="sp")&&vp(n,(...p)=>s(...p),t),Ok=qs("bm"),fn=qs("m"),qk=qs("bu"),Nl=qs("u"),Vl=qs("bum"),Ma=qs("um"),jk=qs("sp"),Nk=qs("rtg"),Vk=qs("rtc");function Mk(n,s=Vn){vp("ec",n,s)}const ue=n=>n?tu(n)?so(n)||n.proxy:ue(n.parent):null,Za=Dn(Object.create(null),{$:n=>n,$el:n=>n.vnode.el,$data:n=>n.data,$props:n=>n.props,$attrs:n=>n.attrs,$slots:n=>n.slots,$refs:n=>n.refs,$parent:n=>ue(n.parent),$root:n=>ue(n.root),$emit:n=>n.emit,$options:n=>Ye(n),$forceUpdate:n=>n.f||(n.f=()=>{n.effect.dirty=!0,wp(n.update)}),$nextTick:n=>n.n||(n.n=Os.bind(n.proxy)),$watch:n=>Pk.bind(n)}),Np=(n,s)=>n!==xn&&!n.__isScriptSetup&&un(n,s),Bk={get({_:n},s){if(s==="__v_skip")return!0;const{ctx:t,setupState:p,data:e,props:o,accessCache:c,type:u,appContext:i}=n;let r;if(s[0]!=="$"){const g=c[s];if(g!==void 0)switch(g){case 1:return p[s];case 2:return e[s];case 4:return t[s];case 3:return o[s]}else{if(Np(p,s))return c[s]=1,p[s];if(e!==xn&&un(e,s))return c[s]=2,e[s];if((r=n.propsOptions[0])&&un(r,s))return c[s]=3,o[s];if(t!==xn&&un(t,s))return c[s]=4,t[s];ie&&(c[s]=0)}}const k=Za[s];let d,m;if(k)return s==="$attrs"&&Kn(n.attrs,"get",""),k(n);if((d=u.__cssModules)&&(d=d[s]))return d;if(t!==xn&&un(t,s))return c[s]=4,t[s];if(m=i.config.globalProperties,un(m,s))return m[s]},set({_:n},s,t){const{data:p,setupState:e,ctx:o}=n;return Np(e,s)?(e[s]=t,!0):p!==xn&&un(p,s)?(p[s]=t,!0):un(n.props,s)||s[0]==="$"&&s.slice(1)in n?!1:(o[s]=t,!0)},has({_:{data:n,setupState:s,accessCache:t,ctx:p,appContext:e,propsOptions:o}},c){let u;return!!t[c]||n!==xn&&un(n,c)||Np(s,c)||(u=o[0])&&un(u,c)||un(p,c)||un(Za,c)||un(e.config.globalProperties,c)},defineProperty(n,s,t){return t.get!=null?n._.accessCache[s]=0:un(t,"value")&&this.set(n,s,t.value,null),Reflect.defineProperty(n,s,t)}};function Fo(n){return Z(n)?n.reduce((s,t)=>(s[t]=null,s),{}):n}let ie=!0;function Fk(n){const s=Ye(n),t=n.proxy,p=n.ctx;ie=!1,s.beforeCreate&&Ho(s.beforeCreate,n,"bc");const{data:e,computed:o,methods:c,watch:u,provide:i,inject:r,created:k,beforeMount:d,mounted:m,beforeUpdate:g,updated:y,activated:w,deactivated:T,beforeDestroy:_,beforeUnmount:x,destroyed:f,unmounted:v,render:q,renderTracked:C,renderTriggered:N,errorCaptured:L,serverPrefetch:K,expose:D,inheritAttrs:G,components:R,directives:nn,filters:Sn}=s;if(r&&Hk(r,p,null),c)for(const sn in c){const Q=c[sn];tn(Q)&&(p[sn]=Q.bind(t))}if(e){const sn=e.call(t,t);vn(sn)&&(n.data=Et(sn))}if(ie=!0,o)for(const sn in o){const Q=o[sn],Ln=tn(Q)?Q.bind(t,t):tn(Q.get)?Q.get.bind(t,t):cs,_s=!tn(Q)&&tn(Q.set)?Q.set.bind(t):cs,ts=E({get:Ln,set:_s});Object.defineProperty(p,sn,{enumerable:!0,configurable:!0,get:()=>ts.value,set:jn=>ts.value=jn})}if(u)for(const sn in u)Ml(u[sn],p,t,sn);if(i){const sn=tn(i)?i.call(t):i;Reflect.ownKeys(sn).forEach(Q=>{bs(Q,sn[Q])})}k&&Ho(k,n,"c");function U(sn,Q){Z(Q)?Q.forEach(Ln=>sn(Ln.bind(t))):Q&&sn(Q.bind(t))}if(U(Ok,d),U(fn,m),U(qk,g),U(Nl,y),U(Ck,w),U(Lk,T),U(Mk,L),U(Vk,C),U(Nk,N),U(Vl,x),U(Ma,v),U(jk,K),Z(D))if(D.length){const sn=n.exposed||(n.exposed={});D.forEach(Q=>{Object.defineProperty(sn,Q,{get:()=>t[Q],set:Ln=>t[Q]=Ln})})}else n.exposed||(n.exposed={});q&&n.render===cs&&(n.render=q),G!=null&&(n.inheritAttrs=G),R&&(n.components=R),nn&&(n.directives=nn)}function Hk(n,s,t=cs){Z(n)&&(n=re(n));for(const p in n){const e=n[p];let o;vn(e)?"default"in e?o=An(e.from||p,e.default,!0):o=An(e.from||p):o=An(e),Mn(o)?Object.defineProperty(s,p,{enumerable:!0,configurable:!0,get:()=>o.value,set:c=>o.value=c}):s[p]=o}}function Ho(n,s,t){us(Z(n)?n.map(p=>p.bind(s.proxy)):n.bind(s.proxy),s,t)}function Ml(n,s,t,p){const e=p.includes(".")?Ll(t,p):()=>t[p];if(On(n)){const o=s[n];tn(o)&&kn(e,o)}else if(tn(n))kn(e,n.bind(t));else if(vn(n))if(Z(n))n.forEach(o=>Ml(o,s,t,p));else{const o=tn(n.handler)?n.handler.bind(t):s[n.handler];tn(o)&&kn(e,o,n)}}function Ye(n){const s=n.type,{mixins:t,extends:p}=s,{mixins:e,optionsCache:o,config:{optionMergeStrategies:c}}=n.appContext,u=o.get(s);let i;return u?i=u:!e.length&&!t&&!p?i=s:(i={},e.length&&e.forEach(r=>dp(i,r,c,!0)),dp(i,s,c)),vn(s)&&o.set(s,i),i}function dp(n,s,t,p=!1){const{mixins:e,extends:o}=s;o&&dp(n,o,t,!0),e&&e.forEach(c=>dp(n,c,t,!0));for(const c in s)if(!(p&&c==="expose")){const u=Wk[c]||t&&t[c];n[c]=u?u(n[c],s[c]):s[c]}return n}const Wk={data:Wo,props:Go,emits:Go,methods:$a,computed:$a,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:$a,directives:$a,watch:Uk,provide:Wo,inject:Gk};function Wo(n,s){return s?n?function(){return Dn(tn(n)?n.call(this,this):n,tn(s)?s.call(this,this):s)}:s:n}function Gk(n,s){return $a(re(n),re(s))}function re(n){if(Z(n)){const s={};for(let t=0;t<n.length;t++)s[n[t]]=n[t];return s}return n}function Gn(n,s){return n?[...new Set([].concat(n,s))]:s}function $a(n,s){return n?Dn(Object.create(null),n,s):s}function Go(n,s){return n?Z(n)&&Z(s)?[...new Set([...n,...s])]:Dn(Object.create(null),Fo(n),Fo(s??{})):s}function Uk(n,s){if(!n)return s;if(!s)return n;const t=Dn(Object.create(null),n);for(const p in s)t[p]=Gn(n[p],s[p]);return t}function Bl(){return{app:null,config:{isNativeTag:vr,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Qk=0;function $k(n,s){return function(p,e=null){tn(p)||(p=Dn({},p)),e!=null&&!vn(e)&&(e=null);const o=Bl(),c=new WeakSet;let u=!1;const i=o.app={_uid:Qk++,_component:p,_props:e,_container:null,_context:o,_instance:null,version:vd,get config(){return o.config},set config(r){},use(r,...k){return c.has(r)||(r&&tn(r.install)?(c.add(r),r.install(i,...k)):tn(r)&&(c.add(r),r(i,...k))),i},mixin(r){return o.mixins.includes(r)||o.mixins.push(r),i},component(r,k){return k?(o.components[r]=k,i):o.components[r]},directive(r,k){return k?(o.directives[r]=k,i):o.directives[r]},mount(r,k,d){if(!u){const m=zn(p,e);return m.appContext=o,d===!0?d="svg":d===!1&&(d=void 0),k&&s?s(m,r):n(m,r,d),u=!0,i._container=r,r.__vue_app__=i,so(m.component)||m.component.proxy}},unmount(){u&&(n(null,i._container),delete i._container.__vue_app__)},provide(r,k){return o.provides[r]=k,i},runWithContext(r){const k=nt;nt=i;try{return r()}finally{nt=k}}};return i}}let nt=null;function bs(n,s){if(Vn){let t=Vn.provides;const p=Vn.parent&&Vn.parent.provides;p===t&&(t=Vn.provides=Object.create(p)),t[n]=s}}function An(n,s,t=!1){const p=Vn||ls;if(p||nt){const e=p?p.parent==null?p.vnode.appContext&&p.vnode.appContext.provides:p.parent.provides:nt._context.provides;if(e&&n in e)return e[n];if(arguments.length>1)return t&&tn(s)?s.call(p&&p.proxy):s}}const Fl={},Hl=()=>Object.create(Fl),Wl=n=>Object.getPrototypeOf(n)===Fl;function Kk(n,s,t,p=!1){const e={},o=Hl();n.propsDefaults=Object.create(null),Gl(n,s,e,o);for(const c in n.propsOptions[0])c in e||(e[c]=void 0);t?n.props=p?e:wl(e):n.type.props?n.props=e:n.props=o,n.attrs=o}function Jk(n,s,t,p){const{props:e,attrs:o,vnode:{patchFlag:c}}=n,u=rn(e),[i]=n.propsOptions;let r=!1;if((p||c>0)&&!(c&16)){if(c&8){const k=n.vnode.dynamicProps;for(let d=0;d<k.length;d++){let m=k[d];if(_p(n.emitsOptions,m))continue;const g=s[m];if(i)if(un(o,m))g!==o[m]&&(o[m]=g,r=!0);else{const y=rs(m);e[y]=ke(i,u,y,g,n,!1)}else g!==o[m]&&(o[m]=g,r=!0)}}}else{Gl(n,s,e,o)&&(r=!0);let k;for(const d in u)(!s||!un(s,d)&&((k=Na(d))===d||!un(s,k)))&&(i?t&&(t[d]!==void 0||t[k]!==void 0)&&(e[d]=ke(i,u,d,void 0,n,!0)):delete e[d]);if(o!==u)for(const d in o)(!s||!un(s,d))&&(delete o[d],r=!0)}r&&Ls(n.attrs,"set","")}function Gl(n,s,t,p){const[e,o]=n.propsOptions;let c=!1,u;if(s)for(let i in s){if(Pa(i))continue;const r=s[i];let k;e&&un(e,k=rs(i))?!o||!o.includes(k)?t[k]=r:(u||(u={}))[k]=r:_p(n.emitsOptions,i)||(!(i in p)||r!==p[i])&&(p[i]=r,c=!0)}if(o){const i=rn(t),r=u||xn;for(let k=0;k<o.length;k++){const d=o[k];t[d]=ke(e,i,d,r[d],n,!un(r,d))}}return c}function ke(n,s,t,p,e,o){const c=n[t];if(c!=null){const u=un(c,"default");if(u&&p===void 0){const i=c.default;if(c.type!==Function&&!c.skipFactory&&tn(i)){const{propsDefaults:r}=e;if(t in r)p=r[t];else{const k=St(e);p=r[t]=i.call(null,s),k()}}else p=i}c[0]&&(o&&!u?p=!1:c[1]&&(p===""||p===Na(t))&&(p=!0))}return p}function Ul(n,s,t=!1){const p=s.propsCache,e=p.get(n);if(e)return e;const o=n.props,c={},u=[];let i=!1;if(!tn(n)){const k=d=>{i=!0;const[m,g]=Ul(d,s,!0);Dn(c,m),g&&u.push(...g)};!t&&s.mixins.length&&s.mixins.forEach(k),n.extends&&k(n.extends),n.mixins&&n.mixins.forEach(k)}if(!o&&!i)return vn(n)&&p.set(n,Aa),Aa;if(Z(o))for(let k=0;k<o.length;k++){const d=rs(o[k]);Uo(d)&&(c[d]=xn)}else if(o)for(const k in o){const d=rs(k);if(Uo(d)){const m=o[k],g=c[d]=Z(m)||tn(m)?{type:m}:Dn({},m);if(g){const y=Ko(Boolean,g.type),w=Ko(String,g.type);g[0]=y>-1,g[1]=w<0||y<w,(y>-1||un(g,"default"))&&u.push(d)}}}const r=[c,u];return vn(n)&&p.set(n,r),r}function Uo(n){return n[0]!=="$"&&!Pa(n)}function Qo(n){return n===null?"null":typeof n=="function"?n.name||"":typeof n=="object"&&n.constructor&&n.constructor.name||""}function $o(n,s){return Qo(n)===Qo(s)}function Ko(n,s){return Z(s)?s.findIndex(t=>$o(t,n)):tn(s)&&$o(s,n)?0:-1}const Ql=n=>n[0]==="_"||n==="$stable",Ze=n=>Z(n)?n.map(gs):[gs(n)],Xk=(n,s,t)=>{if(s._n)return s;const p=bk((...e)=>Ze(s(...e)),t);return p._c=!1,p},$l=(n,s,t)=>{const p=n._ctx;for(const e in n){if(Ql(e))continue;const o=n[e];if(tn(o))s[e]=Xk(e,o,p);else if(o!=null){const c=Ze(o);s[e]=()=>c}}},Kl=(n,s)=>{const t=Ze(s);n.slots.default=()=>t},Yk=(n,s)=>{const t=n.slots=Hl();if(n.vnode.shapeFlag&32){const p=s._;p?(Dn(t,s),pl(t,"_",p,!0)):$l(s,t)}else s&&Kl(n,s)},Zk=(n,s,t)=>{const{vnode:p,slots:e}=n;let o=!0,c=xn;if(p.shapeFlag&32){const u=s._;u?t&&u===1?o=!1:(Dn(e,s),!t&&u===1&&delete e._):(o=!s.$stable,$l(s,e)),c=s}else s&&(Kl(n,s),c={default:1});if(o)for(const u in e)!Ql(u)&&c[u]==null&&delete e[u]};function mp(n,s,t,p,e=!1){if(Z(n)){n.forEach((m,g)=>mp(m,s&&(Z(s)?s[g]:s),t,p,e));return}if(Ya(p)&&!e)return;const o=p.shapeFlag&4?so(p.component)||p.component.proxy:p.el,c=e?null:o,{i:u,r:i}=n,r=s&&s.r,k=u.refs===xn?u.refs={}:u.refs,d=u.setupState;if(r!=null&&r!==i&&(On(r)?(k[r]=null,un(d,r)&&(d[r]=null)):Mn(r)&&(r.value=null)),tn(i))Ys(i,u,12,[c,k]);else{const m=On(i),g=Mn(i);if(m||g){const y=()=>{if(n.f){const w=m?un(d,i)?d[i]:k[i]:i.value;e?Z(w)&&qe(w,o):Z(w)?w.includes(o)||w.push(o):m?(k[i]=[o],un(d,i)&&(d[i]=k[i])):(i.value=[o],n.k&&(k[n.k]=i.value))}else m?(k[i]=c,un(d,i)&&(d[i]=c)):g&&(i.value=c,n.k&&(k[n.k]=c))};c?(y.id=-1,Un(y,t)):y()}}}let Bs=!1;const nd=n=>n.namespaceURI.includes("svg")&&n.tagName!=="foreignObject",sd=n=>n.namespaceURI.includes("MathML"),Xt=n=>{if(nd(n))return"svg";if(sd(n))return"mathml"},Yt=n=>n.nodeType===8;function ad(n){const{mt:s,p:t,o:{patchProp:p,createText:e,nextSibling:o,parentNode:c,remove:u,insert:i,createComment:r}}=n,k=(f,v)=>{if(!v.hasChildNodes()){t(null,f,v),rp(),v._vnode=f;return}Bs=!1,d(v.firstChild,f,null,null,null),rp(),v._vnode=f,Bs&&console.error("Hydration completed but contains mismatches.")},d=(f,v,q,C,N,L=!1)=>{L=L||!!v.dynamicChildren;const K=Yt(f)&&f.data==="[",D=()=>w(f,v,q,C,N,K),{type:G,ref:R,shapeFlag:nn,patchFlag:Sn}=v;let En=f.nodeType;v.el=f,Sn===-2&&(L=!1,v.dynamicChildren=null);let U=null;switch(G){case Ca:En!==3?v.children===""?(i(v.el=e(""),c(f),f),U=f):U=D():(f.data!==v.children&&(Bs=!0,f.data=v.children),U=o(f));break;case ss:x(f)?(U=o(f),_(v.el=f.content.firstChild,f,q)):En!==8||K?U=D():U=o(f);break;case st:if(K&&(f=o(f),En=f.nodeType),En===1||En===3){U=f;const sn=!v.children.length;for(let Q=0;Q<v.staticCount;Q++)sn&&(v.children+=U.nodeType===1?U.outerHTML:U.data),Q===v.staticCount-1&&(v.anchor=U),U=o(U);return K?o(U):U}else D();break;case Zn:K?U=y(f,v,q,C,N,L):U=D();break;default:if(nn&1)(En!==1||v.type.toLowerCase()!==f.tagName.toLowerCase())&&!x(f)?U=D():U=m(f,v,q,C,N,L);else if(nn&6){v.slotScopeIds=N;const sn=c(f);if(K?U=T(f):Yt(f)&&f.data==="teleport start"?U=T(f,f.data,"teleport end"):U=o(f),s(v,sn,null,q,C,Xt(sn),L),Ya(v)){let Q;K?(Q=zn(Zn),Q.anchor=U?U.previousSibling:sn.lastChild):Q=f.nodeType===3?au(""):zn("div"),Q.el=f,v.component.subTree=Q}}else nn&64?En!==8?U=D():U=v.type.hydrate(f,v,q,C,N,L,n,g):nn&128&&(U=v.type.hydrate(f,v,q,C,Xt(c(f)),N,L,n,d))}return R!=null&&mp(R,null,C,v),U},m=(f,v,q,C,N,L)=>{L=L||!!v.dynamicChildren;const{type:K,props:D,patchFlag:G,shapeFlag:R,dirs:nn,transition:Sn}=v,En=K==="input"||K==="option";if(En||G!==-1){nn&&Ts(v,null,q,"created");let U=!1;if(x(f)){U=Jl(C,Sn)&&q&&q.vnode.props&&q.vnode.props.appear;const Q=f.content.firstChild;U&&Sn.beforeEnter(Q),_(Q,f,q),v.el=f=Q}if(R&16&&!(D&&(D.innerHTML||D.textContent))){let Q=g(f.firstChild,v,f,q,C,N,L);for(;Q;){Bs=!0;const Ln=Q;Q=Q.nextSibling,u(Ln)}}else R&8&&f.textContent!==v.children&&(Bs=!0,f.textContent=v.children);if(D)if(En||!L||G&48)for(const Q in D)(En&&(Q.endsWith("value")||Q==="indeterminate")||_t(Q)&&!Pa(Q)||Q[0]===".")&&p(f,Q,null,D[Q],void 0,void 0,q);else D.onClick&&p(f,"onClick",null,D.onClick,void 0,void 0,q);let sn;(sn=D&&D.onVnodeBeforeMount)&&es(sn,q,v),nn&&Ts(v,null,q,"beforeMount"),((sn=D&&D.onVnodeMounted)||nn||U)&&Dl(()=>{sn&&es(sn,q,v),U&&Sn.enter(f),nn&&Ts(v,null,q,"mounted")},C)}return f.nextSibling},g=(f,v,q,C,N,L,K)=>{K=K||!!v.dynamicChildren;const D=v.children,G=D.length;for(let R=0;R<G;R++){const nn=K?D[R]:D[R]=gs(D[R]);if(f)f=d(f,nn,C,N,L,K);else{if(nn.type===Ca&&!nn.children)continue;Bs=!0,t(null,nn,q,null,C,N,Xt(q),L)}}return f},y=(f,v,q,C,N,L)=>{const{slotScopeIds:K}=v;K&&(N=N?N.concat(K):K);const D=c(f),G=g(o(f),v,D,q,C,N,L);return G&&Yt(G)&&G.data==="]"?o(v.anchor=G):(Bs=!0,i(v.anchor=r("]"),D,G),G)},w=(f,v,q,C,N,L)=>{if(Bs=!0,v.el=null,L){const G=T(f);for(;;){const R=o(f);if(R&&R!==G)u(R);else break}}const K=o(f),D=c(f);return u(f),t(null,v,D,K,q,C,Xt(D),N),K},T=(f,v="[",q="]")=>{let C=0;for(;f;)if(f=o(f),f&&Yt(f)&&(f.data===v&&C++,f.data===q)){if(C===0)return o(f);C--}return f},_=(f,v,q)=>{const C=v.parentNode;C&&C.replaceChild(f,v);let N=q;for(;N;)N.vnode.el===v&&(N.vnode.el=N.subTree.el=f),N=N.parent},x=f=>f.nodeType===1&&f.tagName.toLowerCase()==="template";return[k,d]}const Un=Dl;function td(n){return pd(n,ad)}function pd(n,s){const t=el();t.__VUE__=!0;const{insert:p,remove:e,patchProp:o,createElement:c,createText:u,createComment:i,setText:r,setElementText:k,parentNode:d,nextSibling:m,setScopeId:g=cs,insertStaticContent:y}=n,w=(h,b,A,I=null,P=null,j=null,F=void 0,O=null,V=!!b.dynamicChildren)=>{if(h===b)return;h&&!ia(h,b)&&(I=S(h),jn(h,P,j,!0),h=null),b.patchFlag===-2&&(V=!1,b.dynamicChildren=null);const{type:z,ref:W,shapeFlag:Y}=b;switch(z){case Ca:T(h,b,A,I);break;case ss:_(h,b,A,I);break;case st:h==null&&x(b,A,I,F);break;case Zn:R(h,b,A,I,P,j,F,O,V);break;default:Y&1?q(h,b,A,I,P,j,F,O,V):Y&6?nn(h,b,A,I,P,j,F,O,V):(Y&64||Y&128)&&z.process(h,b,A,I,P,j,F,O,V,$)}W!=null&&P&&mp(W,h&&h.ref,j,b||h,!b)},T=(h,b,A,I)=>{if(h==null)p(b.el=u(b.children),A,I);else{const P=b.el=h.el;b.children!==h.children&&r(P,b.children)}},_=(h,b,A,I)=>{h==null?p(b.el=i(b.children||""),A,I):b.el=h.el},x=(h,b,A,I)=>{[h.el,h.anchor]=y(h.children,b,A,I,h.el,h.anchor)},f=({el:h,anchor:b},A,I)=>{let P;for(;h&&h!==b;)P=m(h),p(h,A,I),h=P;p(b,A,I)},v=({el:h,anchor:b})=>{let A;for(;h&&h!==b;)A=m(h),e(h),h=A;e(b)},q=(h,b,A,I,P,j,F,O,V)=>{b.type==="svg"?F="svg":b.type==="math"&&(F="mathml"),h==null?C(b,A,I,P,j,F,O,V):K(h,b,P,j,F,O,V)},C=(h,b,A,I,P,j,F,O)=>{let V,z;const{props:W,shapeFlag:Y,transition:X,dirs:an}=h;if(V=h.el=c(h.type,j,W&&W.is,W),Y&8?k(V,h.children):Y&16&&L(h.children,V,null,I,P,Vp(h,j),F,O),an&&Ts(h,null,I,"created"),N(V,h,h.scopeId,F,I),W){for(const hn in W)hn!=="value"&&!Pa(hn)&&o(V,hn,null,W[hn],j,h.children,I,P,Rn);"value"in W&&o(V,"value",null,W.value,j),(z=W.onVnodeBeforeMount)&&es(z,I,h)}an&&Ts(h,null,I,"beforeMount");const en=Jl(P,X);en&&X.beforeEnter(V),p(V,b,A),((z=W&&W.onVnodeMounted)||en||an)&&Un(()=>{z&&es(z,I,h),en&&X.enter(V),an&&Ts(h,null,I,"mounted")},P)},N=(h,b,A,I,P)=>{if(A&&g(h,A),I)for(let j=0;j<I.length;j++)g(h,I[j]);if(P){let j=P.subTree;if(b===j){const F=P.vnode;N(h,F,F.scopeId,F.slotScopeIds,P.parent)}}},L=(h,b,A,I,P,j,F,O,V=0)=>{for(let z=V;z<h.length;z++){const W=h[z]=O?$s(h[z]):gs(h[z]);w(null,W,b,A,I,P,j,F,O)}},K=(h,b,A,I,P,j,F)=>{const O=b.el=h.el;let{patchFlag:V,dynamicChildren:z,dirs:W}=b;V|=h.patchFlag&16;const Y=h.props||xn,X=b.props||xn;let an;if(A&&oa(A,!1),(an=X.onVnodeBeforeUpdate)&&es(an,A,b,h),W&&Ts(b,h,A,"beforeUpdate"),A&&oa(A,!0),z?D(h.dynamicChildren,z,O,A,I,Vp(b,P),j):F||Q(h,b,O,null,A,I,Vp(b,P),j,!1),V>0){if(V&16)G(O,b,Y,X,A,I,P);else if(V&2&&Y.class!==X.class&&o(O,"class",null,X.class,P),V&4&&o(O,"style",Y.style,X.style,P),V&8){const en=b.dynamicProps;for(let hn=0;hn<en.length;hn++){const Tn=en[hn],Nn=Y[Tn],ds=X[Tn];(ds!==Nn||Tn==="value")&&o(O,Tn,Nn,ds,P,h.children,A,I,Rn)}}V&1&&h.children!==b.children&&k(O,b.children)}else!F&&z==null&&G(O,b,Y,X,A,I,P);((an=X.onVnodeUpdated)||W)&&Un(()=>{an&&es(an,A,b,h),W&&Ts(b,h,A,"updated")},I)},D=(h,b,A,I,P,j,F)=>{for(let O=0;O<b.length;O++){const V=h[O],z=b[O],W=V.el&&(V.type===Zn||!ia(V,z)||V.shapeFlag&70)?d(V.el):A;w(V,z,W,null,I,P,j,F,!0)}},G=(h,b,A,I,P,j,F)=>{if(A!==I){if(A!==xn)for(const O in A)!Pa(O)&&!(O in I)&&o(h,O,A[O],null,F,b.children,P,j,Rn);for(const O in I){if(Pa(O))continue;const V=I[O],z=A[O];V!==z&&O!=="value"&&o(h,O,z,V,F,b.children,P,j,Rn)}"value"in I&&o(h,"value",A.value,I.value,F)}},R=(h,b,A,I,P,j,F,O,V)=>{const z=b.el=h?h.el:u(""),W=b.anchor=h?h.anchor:u("");let{patchFlag:Y,dynamicChildren:X,slotScopeIds:an}=b;an&&(O=O?O.concat(an):an),h==null?(p(z,A,I),p(W,A,I),L(b.children||[],A,W,P,j,F,O,V)):Y>0&&Y&64&&X&&h.dynamicChildren?(D(h.dynamicChildren,X,A,P,j,F,O),(b.key!=null||P&&b===P.subTree)&&Xl(h,b,!0)):Q(h,b,A,W,P,j,F,O,V)},nn=(h,b,A,I,P,j,F,O,V)=>{b.slotScopeIds=O,h==null?b.shapeFlag&512?P.ctx.activate(b,A,I,F,V):Sn(b,A,I,P,j,F,V):En(h,b,V)},Sn=(h,b,A,I,P,j,F)=>{const O=h.component=gd(h,I,P);if(xt(h)&&(O.ctx.renderer=$),hd(O),O.asyncDep){if(P&&P.registerDep(O,U),!h.el){const V=O.subTree=zn(ss);_(null,V,b,A)}}else U(O,h,b,A,P,j,F)},En=(h,b,A)=>{const I=b.component=h.component;if(_k(h,b,A))if(I.asyncDep&&!I.asyncResolved){sn(I,b,A);return}else I.next=b,mk(I.update),I.effect.dirty=!0,I.update();else b.el=h.el,I.vnode=b},U=(h,b,A,I,P,j,F)=>{const O=()=>{if(h.isMounted){let{next:W,bu:Y,u:X,parent:an,vnode:en}=h;{const wa=Yl(h);if(wa){W&&(W.el=en.el,sn(h,W,F)),wa.asyncDep.then(()=>{h.isUnmounted||O()});return}}let hn=W,Tn;oa(h,!1),W?(W.el=en.el,sn(h,W,F)):W=en,Y&&Lp(Y),(Tn=W.props&&W.props.onVnodeBeforeUpdate)&&es(Tn,an,W,en),oa(h,!0);const Nn=Op(h),ds=h.subTree;h.subTree=Nn,w(ds,Nn,d(ds.el),S(ds),h,P,j),W.el=Nn.el,hn===null&&vk(h,Nn.el),X&&Un(X,P),(Tn=W.props&&W.props.onVnodeUpdated)&&Un(()=>es(Tn,an,W,en),P)}else{let W;const{el:Y,props:X}=b,{bm:an,m:en,parent:hn}=h,Tn=Ya(b);if(oa(h,!1),an&&Lp(an),!Tn&&(W=X&&X.onVnodeBeforeMount)&&es(W,hn,b),oa(h,!0),Y&&bn){const Nn=()=>{h.subTree=Op(h),bn(Y,h.subTree,h,P,null)};Tn?b.type.__asyncLoader().then(()=>!h.isUnmounted&&Nn()):Nn()}else{const Nn=h.subTree=Op(h);w(null,Nn,A,I,h,P,j),b.el=Nn.el}if(en&&Un(en,P),!Tn&&(W=X&&X.onVnodeMounted)){const Nn=b;Un(()=>es(W,hn,Nn),P)}(b.shapeFlag&256||hn&&Ya(hn.vnode)&&hn.vnode.shapeFlag&256)&&h.a&&Un(h.a,P),h.isMounted=!0,b=A=I=null}},V=h.effect=new Me(O,cs,()=>wp(z),h.scope),z=h.update=()=>{V.dirty&&V.run()};z.id=h.uid,oa(h,!0),z()},sn=(h,b,A)=>{b.component=h;const I=h.vnode.props;h.vnode=b,h.next=null,Jk(h,b.props,I,A),Zk(h,b.children,A),aa(),No(h),ta()},Q=(h,b,A,I,P,j,F,O,V=!1)=>{const z=h&&h.children,W=h?h.shapeFlag:0,Y=b.children,{patchFlag:X,shapeFlag:an}=b;if(X>0){if(X&128){_s(z,Y,A,I,P,j,F,O,V);return}else if(X&256){Ln(z,Y,A,I,P,j,F,O,V);return}}an&8?(W&16&&Rn(z,P,j),Y!==z&&k(A,Y)):W&16?an&16?_s(z,Y,A,I,P,j,F,O,V):Rn(z,P,j,!0):(W&8&&k(A,""),an&16&&L(Y,A,I,P,j,F,O,V))},Ln=(h,b,A,I,P,j,F,O,V)=>{h=h||Aa,b=b||Aa;const z=h.length,W=b.length,Y=Math.min(z,W);let X;for(X=0;X<Y;X++){const an=b[X]=V?$s(b[X]):gs(b[X]);w(h[X],an,A,null,P,j,F,O,V)}z>W?Rn(h,P,j,!0,!1,Y):L(b,A,I,P,j,F,O,V,Y)},_s=(h,b,A,I,P,j,F,O,V)=>{let z=0;const W=b.length;let Y=h.length-1,X=W-1;for(;z<=Y&&z<=X;){const an=h[z],en=b[z]=V?$s(b[z]):gs(b[z]);if(ia(an,en))w(an,en,A,null,P,j,F,O,V);else break;z++}for(;z<=Y&&z<=X;){const an=h[Y],en=b[X]=V?$s(b[X]):gs(b[X]);if(ia(an,en))w(an,en,A,null,P,j,F,O,V);else break;Y--,X--}if(z>Y){if(z<=X){const an=X+1,en=an<W?b[an].el:I;for(;z<=X;)w(null,b[z]=V?$s(b[z]):gs(b[z]),A,en,P,j,F,O,V),z++}}else if(z>X)for(;z<=Y;)jn(h[z],P,j,!0),z++;else{const an=z,en=z,hn=new Map;for(z=en;z<=X;z++){const Xn=b[z]=V?$s(b[z]):gs(b[z]);Xn.key!=null&&hn.set(Xn.key,z)}let Tn,Nn=0;const ds=X-en+1;let wa=!1,So=0;const Wa=new Array(ds);for(z=0;z<ds;z++)Wa[z]=0;for(z=an;z<=Y;z++){const Xn=h[z];if(Nn>=ds){jn(Xn,P,j,!0);continue}let Es;if(Xn.key!=null)Es=hn.get(Xn.key);else for(Tn=en;Tn<=X;Tn++)if(Wa[Tn-en]===0&&ia(Xn,b[Tn])){Es=Tn;break}Es===void 0?jn(Xn,P,j,!0):(Wa[Es-en]=z+1,Es>=So?So=Es:wa=!0,w(Xn,b[Es],A,null,P,j,F,O,V),Nn++)}const Po=wa?ed(Wa):Aa;for(Tn=Po.length-1,z=ds-1;z>=0;z--){const Xn=en+z,Es=b[Xn],Io=Xn+1<W?b[Xn+1].el:I;Wa[z]===0?w(null,Es,A,Io,P,j,F,O,V):wa&&(Tn<0||z!==Po[Tn]?ts(Es,A,Io,2):Tn--)}}},ts=(h,b,A,I,P=null)=>{const{el:j,type:F,transition:O,children:V,shapeFlag:z}=h;if(z&6){ts(h.component.subTree,b,A,I);return}if(z&128){h.suspense.move(b,A,I);return}if(z&64){F.move(h,b,A,$);return}if(F===Zn){p(j,b,A);for(let Y=0;Y<V.length;Y++)ts(V[Y],b,A,I);p(h.anchor,b,A);return}if(F===st){f(h,b,A);return}if(I!==2&&z&1&&O)if(I===0)O.beforeEnter(j),p(j,b,A),Un(()=>O.enter(j),P);else{const{leave:Y,delayLeave:X,afterLeave:an}=O,en=()=>p(j,b,A),hn=()=>{Y(j,()=>{en(),an&&an()})};X?X(j,en,hn):hn()}else p(j,b,A)},jn=(h,b,A,I=!1,P=!1)=>{const{type:j,props:F,ref:O,children:V,dynamicChildren:z,shapeFlag:W,patchFlag:Y,dirs:X}=h;if(O!=null&&mp(O,null,A,h,!0),W&256){b.ctx.deactivate(h);return}const an=W&1&&X,en=!Ya(h);let hn;if(en&&(hn=F&&F.onVnodeBeforeUnmount)&&es(hn,b,h),W&6)vs(h.component,A,I);else{if(W&128){h.suspense.unmount(A,I);return}an&&Ts(h,null,b,"beforeUnmount"),W&64?h.type.remove(h,b,A,P,$,I):z&&(j!==Zn||Y>0&&Y&64)?Rn(z,b,A,!1,!0):(j===Zn&&Y&384||!P&&W&16)&&Rn(V,b,A),I&&Jn(h)}(en&&(hn=F&&F.onVnodeUnmounted)||an)&&Un(()=>{hn&&es(hn,b,h),an&&Ts(h,null,b,"unmounted")},A)},Jn=h=>{const{type:b,el:A,anchor:I,transition:P}=h;if(b===Zn){Ps(A,I);return}if(b===st){v(h);return}const j=()=>{e(A),P&&!P.persisted&&P.afterLeave&&P.afterLeave()};if(h.shapeFlag&1&&P&&!P.persisted){const{leave:F,delayLeave:O}=P,V=()=>F(A,j);O?O(h.el,j,V):V()}else j()},Ps=(h,b)=>{let A;for(;h!==b;)A=m(h),e(h),h=A;e(b)},vs=(h,b,A)=>{const{bum:I,scope:P,update:j,subTree:F,um:O}=h;I&&Lp(I),P.stop(),j&&(j.active=!1,jn(F,h,b,A)),O&&Un(O,b),Un(()=>{h.isUnmounted=!0},b),b&&b.pendingBranch&&!b.isUnmounted&&h.asyncDep&&!h.asyncResolved&&h.suspenseId===b.pendingId&&(b.deps--,b.deps===0&&b.resolve())},Rn=(h,b,A,I=!1,P=!1,j=0)=>{for(let F=j;F<h.length;F++)jn(h[F],b,A,I,P)},S=h=>h.shapeFlag&6?S(h.component.subTree):h.shapeFlag&128?h.suspense.next():m(h.anchor||h.el);let H=!1;const B=(h,b,A)=>{h==null?b._vnode&&jn(b._vnode,null,null,!0):w(b._vnode||null,h,b,null,null,null,A),H||(H=!0,No(),rp(),H=!1),b._vnode=h},$={p:w,um:jn,m:ts,r:Jn,mt:Sn,mc:L,pc:Q,pbc:D,n:S,o:n};let cn,bn;return s&&([cn,bn]=s($)),{render:B,hydrate:cn,createApp:$k(B,cn)}}function Vp({type:n,props:s},t){return t==="svg"&&n==="foreignObject"||t==="mathml"&&n==="annotation-xml"&&s&&s.encoding&&s.encoding.includes("html")?void 0:t}function oa({effect:n,update:s},t){n.allowRecurse=s.allowRecurse=t}function Jl(n,s){return(!n||n&&!n.pendingBranch)&&s&&!s.persisted}function Xl(n,s,t=!1){const p=n.children,e=s.children;if(Z(p)&&Z(e))for(let o=0;o<p.length;o++){const c=p[o];let u=e[o];u.shapeFlag&1&&!u.dynamicChildren&&((u.patchFlag<=0||u.patchFlag===32)&&(u=e[o]=$s(e[o]),u.el=c.el),t||Xl(c,u)),u.type===Ca&&(u.el=c.el)}}function ed(n){const s=n.slice(),t=[0];let p,e,o,c,u;const i=n.length;for(p=0;p<i;p++){const r=n[p];if(r!==0){if(e=t[t.length-1],n[e]<r){s[p]=e,t.push(p);continue}for(o=0,c=t.length-1;o<c;)u=o+c>>1,n[t[u]]<r?o=u+1:c=u;r<n[t[o]]&&(o>0&&(s[p]=t[o-1]),t[o]=p)}}for(o=t.length,c=t[o-1];o-- >0;)t[o]=c,c=s[c];return t}function Yl(n){const s=n.subTree.component;if(s)return s.asyncDep&&!s.asyncResolved?s:Yl(s)}const od=n=>n.__isTeleport,Zn=Symbol.for("v-fgt"),Ca=Symbol.for("v-txt"),ss=Symbol.for("v-cmt"),st=Symbol.for("v-stc"),at=[];let hs=null;function cd(n=!1){at.push(hs=n?null:[])}function ld(){at.pop(),hs=at[at.length-1]||null}let kt=1;function Jo(n){kt+=n}function Zl(n){return n.dynamicChildren=kt>0?hs||Aa:null,ld(),kt>0&&hs&&hs.push(n),n}function ty(n,s,t,p,e,o){return Zl(su(n,s,t,p,e,o,!0))}function ud(n,s,t,p,e){return Zl(zn(n,s,t,p,e,!0))}function de(n){return n?n.__v_isVNode===!0:!1}function ia(n,s){return n.type===s.type&&n.key===s.key}const nu=({key:n})=>n??null,op=({ref:n,ref_key:s,ref_for:t})=>(typeof n=="number"&&(n=""+n),n!=null?On(n)||Mn(n)||tn(n)?{i:ls,r:n,k:s,f:!!t}:n:null);function su(n,s=null,t=null,p=0,e=null,o=n===Zn?0:1,c=!1,u=!1){const i={__v_isVNode:!0,__v_skip:!0,type:n,props:s,key:s&&nu(s),ref:s&&op(s),scopeId:Il,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:p,dynamicProps:e,dynamicChildren:null,appContext:null,ctx:ls};return u?(no(i,t),o&128&&n.normalize(i)):t&&(i.shapeFlag|=On(t)?8:16),kt>0&&!c&&hs&&(i.patchFlag>0||o&6)&&i.patchFlag!==32&&hs.push(i),i}const zn=id;function id(n,s=null,t=null,p=0,e=null,o=!1){if((!n||n===Ek)&&(n=ss),de(n)){const u=na(n,s,!0);return t&&no(u,t),kt>0&&!o&&hs&&(u.shapeFlag&6?hs[hs.indexOf(n)]=u:hs.push(u)),u.patchFlag|=-2,u}if(_d(n)&&(n=n.__vccOpts),s){s=rd(s);let{class:u,style:i}=s;u&&!On(u)&&(s.class=Ve(u)),vn(i)&&(_l(i)&&!Z(i)&&(i=Dn({},i)),s.style=Ne(i))}const c=On(n)?1:xk(n)?128:od(n)?64:vn(n)?4:tn(n)?2:0;return su(n,s,t,p,e,c,o,!0)}function rd(n){return n?_l(n)||Wl(n)?Dn({},n):n:null}function na(n,s,t=!1,p=!1){const{props:e,ref:o,patchFlag:c,children:u,transition:i}=n,r=s?kd(e||{},s):e,k={__v_isVNode:!0,__v_skip:!0,type:n.type,props:r,key:r&&nu(r),ref:s&&s.ref?t&&o?Z(o)?o.concat(op(s)):[o,op(s)]:op(s):o,scopeId:n.scopeId,slotScopeIds:n.slotScopeIds,children:u,target:n.target,targetAnchor:n.targetAnchor,staticCount:n.staticCount,shapeFlag:n.shapeFlag,patchFlag:s&&n.type!==Zn?c===-1?16:c|16:c,dynamicProps:n.dynamicProps,dynamicChildren:n.dynamicChildren,appContext:n.appContext,dirs:n.dirs,transition:i,component:n.component,suspense:n.suspense,ssContent:n.ssContent&&na(n.ssContent),ssFallback:n.ssFallback&&na(n.ssFallback),el:n.el,anchor:n.anchor,ctx:n.ctx,ce:n.ce};return i&&p&&(k.transition=i.clone(k)),k}function au(n=" ",s=0){return zn(Ca,null,n,s)}function py(n,s){const t=zn(st,null,n);return t.staticCount=s,t}function ey(n="",s=!1){return s?(cd(),ud(ss,null,n)):zn(ss,null,n)}function gs(n){return n==null||typeof n=="boolean"?zn(ss):Z(n)?zn(Zn,null,n.slice()):typeof n=="object"?$s(n):zn(Ca,null,String(n))}function $s(n){return n.el===null&&n.patchFlag!==-1||n.memo?n:na(n)}function no(n,s){let t=0;const{shapeFlag:p}=n;if(s==null)s=null;else if(Z(s))t=16;else if(typeof s=="object")if(p&65){const e=s.default;e&&(e._c&&(e._d=!1),no(n,e()),e._c&&(e._d=!0));return}else{t=32;const e=s._;!e&&!Wl(s)?s._ctx=ls:e===3&&ls&&(ls.slots._===1?s._=1:(s._=2,n.patchFlag|=1024))}else tn(s)?(s={default:s,_ctx:ls},t=32):(s=String(s),p&64?(t=16,s=[au(s)]):t=8);n.children=s,n.shapeFlag|=t}function kd(...n){const s={};for(let t=0;t<n.length;t++){const p=n[t];for(const e in p)if(e==="class")s.class!==p.class&&(s.class=Ve([s.class,p.class]));else if(e==="style")s.style=Ne([s.style,p.style]);else if(_t(e)){const o=s[e],c=p[e];c&&o!==c&&!(Z(o)&&o.includes(c))&&(s[e]=o?[].concat(o,c):c)}else e!==""&&(s[e]=p[e])}return s}function es(n,s,t,p=null){us(n,s,7,[t,p])}const dd=Bl();let md=0;function gd(n,s,t){const p=n.type,e=(s?s.appContext:n.appContext)||dd,o={uid:md++,vnode:n,type:p,parent:s,appContext:e,root:null,next:null,subTree:null,effect:null,update:null,scope:new Or(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:s?s.provides:Object.create(e.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ul(p,e),emitsOptions:Pl(p,e),emit:null,emitted:null,propsDefaults:xn,inheritAttrs:p.inheritAttrs,ctx:xn,data:xn,props:xn,attrs:xn,slots:xn,refs:xn,setupState:xn,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=s?s.root:o,o.emit=yk.bind(null,o),n.ce&&n.ce(o),o}let Vn=null;const At=()=>Vn||ls;let gp,me;{const n=el(),s=(t,p)=>{let e;return(e=n[t])||(e=n[t]=[]),e.push(p),o=>{e.length>1?e.forEach(c=>c(o)):e[0](o)}};gp=s("__VUE_INSTANCE_SETTERS__",t=>Vn=t),me=s("__VUE_SSR_SETTERS__",t=>Pt=t)}const St=n=>{const s=Vn;return gp(n),n.scope.on(),()=>{n.scope.off(),gp(s)}},Xo=()=>{Vn&&Vn.scope.off(),gp(null)};function tu(n){return n.vnode.shapeFlag&4}let Pt=!1;function hd(n,s=!1){s&&me(s);const{props:t,children:p}=n.vnode,e=tu(n);Kk(n,t,e,s),Yk(n,p);const o=e?yd(n,s):void 0;return s&&me(!1),o}function yd(n,s){const t=n.type;n.accessCache=Object.create(null),n.proxy=new Proxy(n.ctx,Bk);const{setup:p}=t;if(p){const e=n.setupContext=p.length>1?fd(n):null,o=St(n);aa();const c=Ys(p,n,0,[n.props,e]);if(ta(),o(),sl(c)){if(c.then(Xo,Xo),s)return c.then(u=>{Yo(n,u,s)}).catch(u=>{Tt(u,n,0)});n.asyncDep=c}else Yo(n,c,s)}else pu(n,s)}function Yo(n,s,t){tn(s)?n.type.__ssrInlineRender?n.ssrRender=s:n.render=s:vn(s)&&(n.setupState=Tl(s)),pu(n,t)}let Zo;function pu(n,s,t){const p=n.type;if(!n.render){if(!s&&Zo&&!p.render){const e=p.template||Ye(n).template;if(e){const{isCustomElement:o,compilerOptions:c}=n.appContext.config,{delimiters:u,compilerOptions:i}=p,r=Dn(Dn({isCustomElement:o,delimiters:u},c),i);p.render=Zo(e,r)}}n.render=p.render||cs}{const e=St(n);aa();try{Fk(n)}finally{ta(),e()}}}const bd={get(n,s){return Kn(n,"get",""),n[s]}};function fd(n){const s=t=>{n.exposed=t||{}};return{attrs:new Proxy(n.attrs,bd),slots:n.slots,emit:n.emit,expose:s}}function so(n){if(n.exposed)return n.exposeProxy||(n.exposeProxy=new Proxy(Tl(pk(n.exposed)),{get(s,t){if(t in s)return s[t];if(t in Za)return Za[t](n)},has(s,t){return t in s||t in Za}}))}function wd(n,s=!0){return tn(n)?n.displayName||n.name:n.name||s&&n.__name}function _d(n){return tn(n)&&"__vccOpts"in n}const E=(n,s)=>ek(n,s,Pt);function l(n,s,t){const p=arguments.length;return p===2?vn(s)&&!Z(s)?de(s)?zn(n,null,[s]):zn(n,s):zn(n,null,s):(p>3?t=Array.prototype.slice.call(arguments,2):p===3&&de(t)&&(t=[t]),zn(n,s,t))}const vd="3.4.27";/**
* @vue/runtime-dom v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Ed="http://www.w3.org/2000/svg",Td="http://www.w3.org/1998/Math/MathML",Ks=typeof document<"u"?document:null,nc=Ks&&Ks.createElement("template"),xd={insert:(n,s,t)=>{s.insertBefore(n,t||null)},remove:n=>{const s=n.parentNode;s&&s.removeChild(n)},createElement:(n,s,t,p)=>{const e=s==="svg"?Ks.createElementNS(Ed,n):s==="mathml"?Ks.createElementNS(Td,n):Ks.createElement(n,t?{is:t}:void 0);return n==="select"&&p&&p.multiple!=null&&e.setAttribute("multiple",p.multiple),e},createText:n=>Ks.createTextNode(n),createComment:n=>Ks.createComment(n),setText:(n,s)=>{n.nodeValue=s},setElementText:(n,s)=>{n.textContent=s},parentNode:n=>n.parentNode,nextSibling:n=>n.nextSibling,querySelector:n=>Ks.querySelector(n),setScopeId(n,s){n.setAttribute(s,"")},insertStaticContent(n,s,t,p,e,o){const c=t?t.previousSibling:s.lastChild;if(e&&(e===o||e.nextSibling))for(;s.insertBefore(e.cloneNode(!0),t),!(e===o||!(e=e.nextSibling)););else{nc.innerHTML=p==="svg"?`<svg>${n}</svg>`:p==="mathml"?`<math>${n}</math>`:n;const u=nc.content;if(p==="svg"||p==="mathml"){const i=u.firstChild;for(;i.firstChild;)u.appendChild(i.firstChild);u.removeChild(i)}s.insertBefore(u,t)}return[c?c.nextSibling:s.firstChild,t?t.previousSibling:s.lastChild]}},Fs="transition",Ga="animation",La=Symbol("_vtc"),sa=(n,{slots:s})=>l(zk,ou(n),s);sa.displayName="Transition";const eu={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ad=sa.props=Dn({},Ol,eu),ca=(n,s=[])=>{Z(n)?n.forEach(t=>t(...s)):n&&n(...s)},sc=n=>n?Z(n)?n.some(s=>s.length>1):n.length>1:!1;function ou(n){const s={};for(const R in n)R in eu||(s[R]=n[R]);if(n.css===!1)return s;const{name:t="v",type:p,duration:e,enterFromClass:o=`${t}-enter-from`,enterActiveClass:c=`${t}-enter-active`,enterToClass:u=`${t}-enter-to`,appearFromClass:i=o,appearActiveClass:r=c,appearToClass:k=u,leaveFromClass:d=`${t}-leave-from`,leaveActiveClass:m=`${t}-leave-active`,leaveToClass:g=`${t}-leave-to`}=n,y=Sd(e),w=y&&y[0],T=y&&y[1],{onBeforeEnter:_,onEnter:x,onEnterCancelled:f,onLeave:v,onLeaveCancelled:q,onBeforeAppear:C=_,onAppear:N=x,onAppearCancelled:L=f}=s,K=(R,nn,Sn)=>{Gs(R,nn?k:u),Gs(R,nn?r:c),Sn&&Sn()},D=(R,nn)=>{R._isLeaving=!1,Gs(R,d),Gs(R,g),Gs(R,m),nn&&nn()},G=R=>(nn,Sn)=>{const En=R?N:x,U=()=>K(nn,R,Sn);ca(En,[nn,U]),ac(()=>{Gs(nn,R?i:o),zs(nn,R?k:u),sc(En)||tc(nn,p,w,U)})};return Dn(s,{onBeforeEnter(R){ca(_,[R]),zs(R,o),zs(R,c)},onBeforeAppear(R){ca(C,[R]),zs(R,i),zs(R,r)},onEnter:G(!1),onAppear:G(!0),onLeave(R,nn){R._isLeaving=!0;const Sn=()=>D(R,nn);zs(R,d),zs(R,m),lu(),ac(()=>{R._isLeaving&&(Gs(R,d),zs(R,g),sc(v)||tc(R,p,T,Sn))}),ca(v,[R,Sn])},onEnterCancelled(R){K(R,!1),ca(f,[R])},onAppearCancelled(R){K(R,!0),ca(L,[R])},onLeaveCancelled(R){D(R),ca(q,[R])}})}function Sd(n){if(n==null)return null;if(vn(n))return[Mp(n.enter),Mp(n.leave)];{const s=Mp(n);return[s,s]}}function Mp(n){return Pr(n)}function zs(n,s){s.split(/\s+/).forEach(t=>t&&n.classList.add(t)),(n[La]||(n[La]=new Set)).add(s)}function Gs(n,s){s.split(/\s+/).forEach(p=>p&&n.classList.remove(p));const t=n[La];t&&(t.delete(s),t.size||(n[La]=void 0))}function ac(n){requestAnimationFrame(()=>{requestAnimationFrame(n)})}let Pd=0;function tc(n,s,t,p){const e=n._endId=++Pd,o=()=>{e===n._endId&&p()};if(t)return setTimeout(o,t);const{type:c,timeout:u,propCount:i}=cu(n,s);if(!c)return p();const r=c+"end";let k=0;const d=()=>{n.removeEventListener(r,m),o()},m=g=>{g.target===n&&++k>=i&&d()};setTimeout(()=>{k<i&&d()},u+1),n.addEventListener(r,m)}function cu(n,s){const t=window.getComputedStyle(n),p=y=>(t[y]||"").split(", "),e=p(`${Fs}Delay`),o=p(`${Fs}Duration`),c=pc(e,o),u=p(`${Ga}Delay`),i=p(`${Ga}Duration`),r=pc(u,i);let k=null,d=0,m=0;s===Fs?c>0&&(k=Fs,d=c,m=o.length):s===Ga?r>0&&(k=Ga,d=r,m=i.length):(d=Math.max(c,r),k=d>0?c>r?Fs:Ga:null,m=k?k===Fs?o.length:i.length:0);const g=k===Fs&&/\b(transform|all)(,|$)/.test(p(`${Fs}Property`).toString());return{type:k,timeout:d,propCount:m,hasTransform:g}}function pc(n,s){for(;n.length<s.length;)n=n.concat(n);return Math.max(...s.map((t,p)=>ec(t)+ec(n[p])))}function ec(n){return n==="auto"?0:Number(n.slice(0,-1).replace(",","."))*1e3}function lu(){return document.body.offsetHeight}function Id(n,s,t){const p=n[La];p&&(s=(s?[s,...p]:[...p]).join(" ")),s==null?n.removeAttribute("class"):t?n.setAttribute("class",s):n.className=s}const oc=Symbol("_vod"),zd=Symbol("_vsh"),Dd=Symbol(""),Cd=/(^|;)\s*display\s*:/;function Ld(n,s,t){const p=n.style,e=On(t);let o=!1;if(t&&!e){if(s)if(On(s))for(const c of s.split(";")){const u=c.slice(0,c.indexOf(":")).trim();t[u]==null&&cp(p,u,"")}else for(const c in s)t[c]==null&&cp(p,c,"");for(const c in t)c==="display"&&(o=!0),cp(p,c,t[c])}else if(e){if(s!==t){const c=p[Dd];c&&(t+=";"+c),p.cssText=t,o=Cd.test(t)}}else s&&n.removeAttribute("style");oc in n&&(n[oc]=o?p.display:"",n[zd]&&(p.display="none"))}const cc=/\s*!important$/;function cp(n,s,t){if(Z(t))t.forEach(p=>cp(n,s,p));else if(t==null&&(t=""),s.startsWith("--"))n.setProperty(s,t);else{const p=Rd(n,s);cc.test(t)?n.setProperty(Na(p),t.replace(cc,""),"important"):n[p]=t}}const lc=["Webkit","Moz","ms"],Bp={};function Rd(n,s){const t=Bp[s];if(t)return t;let p=rs(s);if(p!=="filter"&&p in n)return Bp[s]=p;p=vt(p);for(let e=0;e<lc.length;e++){const o=lc[e]+p;if(o in n)return Bp[s]=o}return s}const uc="http://www.w3.org/1999/xlink";function Od(n,s,t,p,e){if(p&&s.startsWith("xlink:"))t==null?n.removeAttributeNS(uc,s.slice(6,s.length)):n.setAttributeNS(uc,s,t);else{const o=Rr(s);t==null||o&&!ol(t)?n.removeAttribute(s):n.setAttribute(s,o?"":t)}}function qd(n,s,t,p,e,o,c){if(s==="innerHTML"||s==="textContent"){p&&c(p,e,o),n[s]=t??"";return}const u=n.tagName;if(s==="value"&&u!=="PROGRESS"&&!u.includes("-")){const r=u==="OPTION"?n.getAttribute("value")||"":n.value,k=t??"";(r!==k||!("_value"in n))&&(n.value=k),t==null&&n.removeAttribute(s),n._value=t;return}let i=!1;if(t===""||t==null){const r=typeof n[s];r==="boolean"?t=ol(t):t==null&&r==="string"?(t="",i=!0):r==="number"&&(t=0,i=!0)}try{n[s]=t}catch{}i&&n.removeAttribute(s)}function jd(n,s,t,p){n.addEventListener(s,t,p)}function Nd(n,s,t,p){n.removeEventListener(s,t,p)}const ic=Symbol("_vei");function Vd(n,s,t,p,e=null){const o=n[ic]||(n[ic]={}),c=o[s];if(p&&c)c.value=p;else{const[u,i]=Md(s);if(p){const r=o[s]=Hd(p,e);jd(n,u,r,i)}else c&&(Nd(n,u,c,i),o[s]=void 0)}}const rc=/(?:Once|Passive|Capture)$/;function Md(n){let s;if(rc.test(n)){s={};let p;for(;p=n.match(rc);)n=n.slice(0,n.length-p[0].length),s[p[0].toLowerCase()]=!0}return[n[2]===":"?n.slice(3):Na(n.slice(2)),s]}let Fp=0;const Bd=Promise.resolve(),Fd=()=>Fp||(Bd.then(()=>Fp=0),Fp=Date.now());function Hd(n,s){const t=p=>{if(!p._vts)p._vts=Date.now();else if(p._vts<=t.attached)return;us(Wd(p,t.value),s,5,[p])};return t.value=n,t.attached=Fd(),t}function Wd(n,s){if(Z(s)){const t=n.stopImmediatePropagation;return n.stopImmediatePropagation=()=>{t.call(n),n._stopped=!0},s.map(p=>e=>!e._stopped&&p&&p(e))}else return s}const kc=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&n.charCodeAt(2)>96&&n.charCodeAt(2)<123,Gd=(n,s,t,p,e,o,c,u,i)=>{const r=e==="svg";s==="class"?Id(n,p,r):s==="style"?Ld(n,t,p):_t(s)?Oe(s)||Vd(n,s,t,p,c):(s[0]==="."?(s=s.slice(1),!0):s[0]==="^"?(s=s.slice(1),!1):Ud(n,s,p,r))?qd(n,s,p,o,c,u,i):(s==="true-value"?n._trueValue=p:s==="false-value"&&(n._falseValue=p),Od(n,s,p,r))};function Ud(n,s,t,p){if(p)return!!(s==="innerHTML"||s==="textContent"||s in n&&kc(s)&&tn(t));if(s==="spellcheck"||s==="draggable"||s==="translate"||s==="form"||s==="list"&&n.tagName==="INPUT"||s==="type"&&n.tagName==="TEXTAREA")return!1;if(s==="width"||s==="height"){const e=n.tagName;if(e==="IMG"||e==="VIDEO"||e==="CANVAS"||e==="SOURCE")return!1}return kc(s)&&On(t)?!1:s in n}const uu=new WeakMap,iu=new WeakMap,hp=Symbol("_moveCb"),dc=Symbol("_enterCb"),ru={name:"TransitionGroup",props:Dn({},Ad,{tag:String,moveClass:String}),setup(n,{slots:s}){const t=At(),p=Rl();let e,o;return Nl(()=>{if(!e.length)return;const c=n.moveClass||`${n.name||"v"}-move`;if(!Yd(e[0].el,t.vnode.el,c))return;e.forEach(Kd),e.forEach(Jd);const u=e.filter(Xd);lu(),u.forEach(i=>{const r=i.el,k=r.style;zs(r,c),k.transform=k.webkitTransform=k.transitionDuration="";const d=r[hp]=m=>{m&&m.target!==r||(!m||/transform$/.test(m.propertyName))&&(r.removeEventListener("transitionend",d),r[hp]=null,Gs(r,c))};r.addEventListener("transitionend",d)})}),()=>{const c=rn(n),u=ou(c);let i=c.tag||Zn;if(e=[],o)for(let r=0;r<o.length;r++){const k=o[r];k.el&&k.el instanceof Element&&(e.push(k),rt(k,it(k,u,p,t)),uu.set(k,k.el.getBoundingClientRect()))}o=s.default?Xe(s.default()):[];for(let r=0;r<o.length;r++){const k=o[r];k.key!=null&&rt(k,it(k,u,p,t))}return zn(i,null,o)}}},Qd=n=>delete n.mode;ru.props;const $d=ru;function Kd(n){const s=n.el;s[hp]&&s[hp](),s[dc]&&s[dc]()}function Jd(n){iu.set(n,n.el.getBoundingClientRect())}function Xd(n){const s=uu.get(n),t=iu.get(n),p=s.left-t.left,e=s.top-t.top;if(p||e){const o=n.el.style;return o.transform=o.webkitTransform=`translate(${p}px,${e}px)`,o.transitionDuration="0s",n}}function Yd(n,s,t){const p=n.cloneNode(),e=n[La];e&&e.forEach(u=>{u.split(/\s+/).forEach(i=>i&&p.classList.remove(i))}),t.split(/\s+/).forEach(u=>u&&p.classList.add(u)),p.style.display="none";const o=s.nodeType===1?s:s.parentNode;o.appendChild(p);const{hasTransform:c}=cu(p);return o.removeChild(p),c}const Zd=Dn({patchProp:Gd},xd);let Hp,mc=!1;function nm(){return Hp=mc?Hp:td(Zd),mc=!0,Hp}const sm=(...n)=>{const s=nm().createApp(...n),{mount:t}=s;return s.mount=p=>{const e=tm(p);if(e)return t(e,!0,am(e))},s};function am(n){if(n instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&n instanceof MathMLElement)return"mathml"}function tm(n){return On(n)?document.querySelector(n):n}var pm=["link","meta","script","style","noscript","template"],em=["title","base"],om=([n,s,t])=>em.includes(n)?n:pm.includes(n)?n==="meta"&&s.name?`${n}.${s.name}`:n==="template"&&s.id?`${n}.${s.id}`:JSON.stringify([n,Object.entries(s).map(([p,e])=>typeof e=="boolean"?e?[p,""]:null:[p,e]).filter(p=>p!=null).sort(([p],[e])=>p.localeCompare(e)),t]):null,cm=n=>{const s=new Set,t=[];return n.forEach(p=>{const e=om(p);e&&!s.has(e)&&(s.add(e),t.push(p))}),t},lm=n=>n[0]==="/"?n:`/${n}`,ku=n=>n[n.length-1]==="/"||n.endsWith(".html")?n:`${n}/`,pa=n=>/^(https?:)?\/\//.test(n),um=/.md((\?|#).*)?$/,Ep=(n,s="/")=>!!(pa(n)||n.startsWith("/")&&!n.startsWith(s)&&!um.test(n)),Tp=n=>/^[a-z][a-z0-9+.-]*:/.test(n),Ba=n=>Object.prototype.toString.call(n)==="[object Object]",im=n=>{const[s,...t]=n.split(/(\?|#)/);if(!s||s.endsWith("/"))return n;let p=s.replace(/(^|\/)README.md$/i,"$1index.html");return p.endsWith(".md")?p=p.substring(0,p.length-3)+".html":p.endsWith(".html")||(p=p+".html"),p.endsWith("/index.html")&&(p=p.substring(0,p.length-10)),p+t.join("")},ao=n=>n[n.length-1]==="/"?n.slice(0,-1):n,du=n=>n[0]==="/"?n.slice(1):n,rm=(n,s)=>{const t=Object.keys(n).sort((p,e)=>{const o=e.split("/").length-p.split("/").length;return o!==0?o:e.length-p.length});for(const p of t)if(s.startsWith(p))return p;return"/"},Pn=n=>typeof n=="string";const km="modulepreload",dm=function(n){return"/kbms/"+n},gc={},a=function(s,t,p){let e=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),c=(o==null?void 0:o.nonce)||(o==null?void 0:o.getAttribute("nonce"));e=Promise.all(t.map(u=>{if(u=dm(u),u in gc)return;gc[u]=!0;const i=u.endsWith(".css"),r=i?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${u}"]${r}`))return;const k=document.createElement("link");if(k.rel=i?"stylesheet":km,i||(k.as="script",k.crossOrigin=""),k.href=u,c&&k.setAttribute("nonce",c),document.head.appendChild(k),i)return new Promise((d,m)=>{k.addEventListener("load",d),k.addEventListener("error",()=>m(new Error(`Unable to preload CSS for ${u}`)))})}))}return e.then(()=>s()).catch(o=>{const c=new Event("vite:preloadError",{cancelable:!0});if(c.payload=o,window.dispatchEvent(c),!c.defaultPrevented)throw o})},mm=JSON.parse('{"/orm/ef/linq+lambda.html":"/orm/ef/linq_lambda.html","/dotnet/zhuomianchengxu/kaiyuanzujian/_netnanoframework.html":"/dotnet/zhuomianchengxu/kaiyuanzujian/netnanoframework.html"}'),gm=Object.fromEntries([["/intro.html",{loader:()=>a(()=>import("./intro.html-CVffinkg.js"),__vite__mapDeps([0,1])),meta:{d:1711123133e3,v:"/cover3.jpg",e:`
<p>我就是我，一个菜鸡程序员！</p>
<!--
2024年5月8日：不知是缘还是情关，若是情关，经历了就会变得更强大，加油！

-->`,r:{minutes:.16,words:49},t:"介绍页",i:"circle-info",y:"a"}}],["/",{loader:()=>a(()=>import("./index.html-E_KBQXFJ.js"),__vite__mapDeps([2,1])),meta:{t:"首页",i:"home"}}],["/aboutme/",{loader:()=>a(()=>import("./index.html-i47klO7S.js"),__vite__mapDeps([3,1])),meta:{t:"关于",i:"home"}}],["/classicArticle/collect.html",{loader:()=>a(()=>import("./collect.html-Dh7Y5ObF.js"),__vite__mapDeps([4,1])),meta:{a:"azrng",d:16953408e5,l:"2023年9月22日",c:["article"],g:["汇总"],o:!0,e:`<h2>特长</h2>
<ul>
<li>脾气急
<ul>
<li>责任心强、是个天生的行动派，能有效推进工作</li>
</ul>
</li>
<li>拖延症
<ul>
<li>抗压能力强，泰山崩于前而面不改色，并且能保证完成任务</li>
</ul>
</li>
<li>三分钟热度
<ul>
<li>创新性人才，思维敏捷、保持对任何事物的新鲜感于好奇心</li>
</ul>
</li>
<li>优柔寡断
<ul>
<li>做事稳重，思考周密，能多方面去考虑问题该如何解决</li>
</ul>
</li>
<li>社恐
<ul>
<li>专业领域的小能手，注重自我提升，不易被外界环境影响</li>
</ul>
</li>
<li>缺乏主见
<ul>
<li>善于梳理总结，资源整合，同时考虑多方面关键因素，制定计划</li>
</ul>
</li>
<li>胆小
<ul>
<li>慎重，考虑问题更加稳妥</li>
</ul>
</li>
<li>没有计划性
<ul>
<li>随机应变能力强</li>
</ul>
</li>
<li>做事慢
<ul>
<li>细致、耐心，认真负责</li>
</ul>
</li>
<li>任性
<ul>
<li>有信念，有自己的想法，坚定不移</li>
</ul>
</li>
<li>顽固
<ul>
<li>讲规矩，有组织原则，值得信赖</li>
</ul>
</li>
<li>沉默寡言
<ul>
<li>乐于奉献，衬托他人，集体中不可或缺的一部分</li>
</ul>
</li>
<li>爱管闲事
<ul>
<li>乐于助人，活脱脱一个热心肠</li>
</ul>
</li>
<li>不幽默
<ul>
<li>办事认真，思想深邃</li>
</ul>
</li>
<li>容易失落
<ul>
<li>内心细腻，共情能力强</li>
</ul>
</li>
<li>爱偷懒
<ul>
<li>善于寻找机会抓住要领，举一反三</li>
</ul>
</li>
</ul>`,r:{minutes:2.58,words:773},t:"汇总",y:"a"}}],["/classicArticle/developmentProductManager.html",{loader:()=>a(()=>import("./developmentProductManager.html-CCTchhqY.js"),__vite__mapDeps([5,1])),meta:{a:"oec2003",d:16959456e5,l:"2023年9月29日",c:["article"],g:["转岗"],o:!1,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>本文就聊聊从开发工程师转变为产品经理可能会遇到的问题。</p>
</div>
<h2>思维转变</h2>
<p>开发工程师大多是工程思维。</p>
<p>产品经理需要的是产品思维。</p>
<p>前些天，在团队内部的一个需求讨论会上，产品经理和开发工程师都有参与，我提出一个需求的 UI  交互思路，开发工程师马上指出：“如果这样做的话，实现上某某地方会调整比较大；某某地方新增的部分实现比较复杂。”</p>
<p>这就是典型的思考方式没有在一个维度上，从产品的角度，需要考虑的是功能交互的合理性、怎样才能真正解决用户的痛点。在这个前提之下，再考虑应该怎么实现，该怎样去做取舍。</p>`,r:{minutes:4.93,words:1479},t:"开发转产品经理可能遇到的坑",y:"a"}}],["/classicArticle/goodHabit.html",{loader:()=>a(()=>import("./goodHabit.html-xdBsq7Mp.js"),__vite__mapDeps([6,1])),meta:{a:"wacky",d:16902432e5,l:"2023年7月25日",c:["article"],g:["语录","好习惯"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>五个好习惯，祝你顺利成长</p>
<p>本文摘抄自wacky的碎碎念</p>
</div>
<h2>问</h2>
<p>顾名思义，这里就是指要多问，多向别人请教。古人云：敏而好学，不耻下问。是指好学的人，不会以向不如自己的人请教为耻。职场也是如此，不论能力高低，只要对方有值得我们学习的地方，一定要多问，虚心请教。尤其是对于初入职场的同学，不要觉得拉不开面子，实际上你去请教别人，别人可能会因为得到了你的肯定，在教导你的过程中还会获得一些成就感。多问，可以避免自己陷入思维怪圈，用更高效的方式来思考和解决问题。</p>`,r:{minutes:5.04,words:1513},t:"五个好习惯",y:"a"}}],["/classicArticle/jingdianyulu.html",{loader:()=>a(()=>import("./jingdianyulu.html-DFt1OAl0.js"),__vite__mapDeps([7,1])),meta:{a:"azrng",d:16902432e5,l:"2023年7月25日",c:["article"],g:["语录"],o:!0,e:`<h2>普通</h2>
<ul>
<li>人总是在正确的事情和容易做的事情之间做选择。</li>
<li>美丽总是隐藏在朦胧之中，隔纱看美人，越看越迷人。</li>
<li>若是美好，叫做精彩；若是糟糕，叫做经历。</li>
<li>勿以浮沙筑高台</li>
<li>山水一程，风雨一更，三生有幸，共度余生</li>
<li>愿你这一生，不必经历丰富，而人生幸福</li>
<li>任何事情，只要心甘情愿，都会变得简单</li>
<li>再黑暗的隧道也有出口，光明一定就在前方</li>
<li>人生中出现很多机会，都不会恰好落在你的手里，你都必须主动踮起脚够一够</li>
<li>只有一样东西令梦想无法成真，那就是担心失败</li>
<li>如果生活踹了你好多脚，别忘了给它两个耳光，反抗总比流泪强</li>
<li>总有一天，你会渐渐活出写满答案的人生</li>
<li>希望能成为有趣的人</li>
<li>活着不是靠泪水博得同情，而是靠汗水赢得掌声</li>
<li>如果热爱与众望所归背道而驰，那我选择我所热爱的一切</li>
<li>当你觉得晚了的时候，恰恰是最早的时候</li>
<li>你要想得到你从未拥有过的东西，就要去做你从未做过的事情</li>
<li>你不勇敢，没人替你坚强</li>
<li>别否定自己，你特别好，特别温柔，特别值得</li>
<li>改造自己，总比禁止别人来得难</li>
<li>我在人间贩卖黄昏，只为收集世间的温柔去见你</li>
<li>最怕你一生碌碌无为，还安慰自己平凡可贵</li>
<li>乾坤未定，你我皆是黑马</li>
<li>不是因为某件事很难，你才不想做而是因为你不想做，让这件事变得很难</li>
<li>努力赚钱不是因为钱重要，而是为了让钱变得不重要</li>
<li>我恨自己安于现状，又将自己偷偷原谅</li>
<li>人生，总会有不期而遇的温暖和生生不息的希望</li>
<li>人心换人心，你真我更真，你假我转身</li>
<li>所求皆如愿，所行化坦途，多喜乐，长安宁</li>
<li>放荡不羁的生活很简单，不忘初衷的坚持却很难</li>
<li>愿自己坚定而柔软，自信且谦逊，阳光而皎洁</li>
<li>人生一场虚空大梦，韶华白首，不过转瞬。唯有天道恒在，循环往复，不曾更改。</li>
<li>人生中出现很多机会，都不会恰好落在你的手里，你必须主动踮起脚够一够</li>
</ul>`,r:{minutes:2.43,words:730},t:"经典语录",y:"a"}}],["/classicArticle/nenglishuipinghegongzuolouxi.html",{loader:()=>a(()=>import("./nenglishuipinghegongzuolouxi.html-YJopYvdj.js"),__vite__mapDeps([8,1])),meta:{a:"azrng",d:16903296e5,l:"2023年7月26日",c:["article"],g:["无"],o:!1,e:`<blockquote>
<p>摘录网站：<a href="https://www.cnblogs.com/liangchen001/p/14729537.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/liangchen001/p/14729537.html</a></p>
</blockquote>
<h2>4个能力水平</h2>
<h3>1. 线性级</h3>
<p>线性级程序员的思维很简单，写程序的时候就像盖房子似的，一块砖一块砖往上垒的，但是他不知道后面会垒成什么样，可能越垒越庞大，后面的代码组织、管理等会越来越混乱，最后导致后面的很多程序修改和维护很麻烦。</p>`,r:{minutes:4.74,words:1421},t:"能力水平和工作陋习",y:"a"}}],["/classicArticle/resourceManage.html",{loader:()=>a(()=>import("./resourceManage.html-GJBGjseg.js"),__vite__mapDeps([9,1])),meta:{a:"azrng",d:17053632e5,l:"2024年1月16日",c:["article"],g:["文章"],o:!1,e:`<h2>一、管理基础</h2>
<h3>1.1.项目资源管理概述</h3>
<p>项目资源管理：是为了降低项目成本而对项目所需的人力，材料，机械，技术，资金等资源所进行的计划，组织，指挥，协调和控制等活动。资源包括实物资源和团队资源，实物资源管理着眼于以有效和高效的方式，分配和使用完成项目所需的实物资源，包括设备，材料，设施和基础设施；团队资源指的是人力资源，相对于实物资源，包含了技能和能力的要求；人力资源管理其目的在于:根据项目需要规划并组建项目团队，对团队进行有效的指导和管理，以保证它们可以完成项目任务，实现项目目标。</p>
<p>(tip:此段概述很适合2023.11月资源管理论文过渡段)</p>`,r:{minutes:9.96,words:2989},t:"项目资源管理",y:"a"}}],["/classicArticle/workStepByStep.html",{loader:()=>a(()=>import("./workStepByStep.html-BU8UMHFp.js"),__vite__mapDeps([10,1])),meta:{a:"azrng",d:17127936e5,l:"2024年4月11日",c:["article"],g:["文章"],o:!1,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>内容来自互联网</p>
</div>
<h2>前言</h2>
<p>35岁你会发现，工作是没有意义的</p>
<p>以前的我，永远把工作排在第一位，可以主动加班主动熬夜。渴望树立一个靠谱、专业、有担当的人社;渴望被认可，拼命地证明自己。现在的我，职场摸打滚爬10年，才明白按部就班的工作是没有意义的。</p>
<h2>1、老板的评价别太认真</h2>
<p>领导的工作就是把活安排下去，保持部门正常运转，达成目标。
所以，无论他夸你还是骂你，本质上是为了你能继续干活，能承担更多的任务，能为他带来更多的效益。
所以，领导批评了听听就好，不要因为这些质疑自己，不断内耗自己。但，也不要因为夸你两句画个饼你就忘了自己是谁。</p>`,r:{minutes:2.62,words:786},t:"按部就班工作是没有意义的",y:"a"}}],["/cloud/dapr.html",{loader:()=>a(()=>import("./dapr.html-Cn4WSEpY.js"),__vite__mapDeps([11,1])),meta:{a:"azrng",d:1629504e6,l:"2021年8月21日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>参考文档：
<strong>Dapr for .NET开发人员电子书：</strong><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/dapr-for-net-developers/?WT.mc_id=DT-MVP-33797" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/architecture/dapr-for-net-developers/?WT.mc_id=DT-MVP-33797</a>
Blazor+Dapr+K8s微服务之服务调用：<a href="https://mp.weixin.qq.com/s/2wnqJV3KqwVzTotRkBbnOQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2wnqJV3KqwVzTotRkBbnOQ</a></p>
</blockquote>`,r:{minutes:.25,words:74},t:"Dapr",y:"a"}}],["/cloud/dockerswarm.html",{loader:()=>a(()=>import("./dockerswarm.html-Dk1wUWOd.js"),__vite__mapDeps([12,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>管理所有的容器之间的路由、负载均衡、服务发现，以及容器的伸缩、日志、配置中间的编排工具。</p>
`,r:{minutes:.22,words:65},t:"DockerSwarm",y:"a"}}],["/cloud/",{loader:()=>a(()=>import("./index.html-pisnkAmV.js"),__vite__mapDeps([13,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>云原生从字面上的理解是跑在云服务器上，并且程序设计的时候就考虑到将来是运行在云环境中，要充分利用云资源的优点，比如云服务的弹性和分布式优势。</p>
<figure><img src="/common/1615424719425-bc1eda14-e3f2-42b2-a8c6-193ebcfab4c3.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>云计算</h2>
<p>云计算是指通过互联网提供的计算服务。计算服务包括常见的 IT 基础结构，例如虚拟机、存储、数据库和网络。 云服务还扩充了传统的 IT 产品/服务，包括物联网 (IoT)、机器学习 (ML) 以及人工智能 (AI) 等</p>`,r:{minutes:4.09,words:1227},t:"说明",y:"a"}}],["/interview/anti-fraud.html",{loader:()=>a(()=>import("./anti-fraud.html-BunCfbMK.js"),__vite__mapDeps([14,1])),meta:{t:"防坑指南",O:3}}],["/interview/csharp.html",{loader:()=>a(()=>import("./csharp.html-DI1Gk9b-.js"),__vite__mapDeps([15,1])),meta:{t:"CSharp面试题",O:201}}],["/interview/dataBase.html",{loader:()=>a(()=>import("./dataBase.html-vOpEDt8p.js"),__vite__mapDeps([16,1])),meta:{t:"数据库面试题",O:200}}],["/interview/design_mode.html",{loader:()=>a(()=>import("./design_mode.html-BqDcxAjP.js"),__vite__mapDeps([17,1])),meta:{t:"设计模式面试题",O:200}}],["/interview/dotnet.html",{loader:()=>a(()=>import("./dotnet.html-Ch8AhwZt.js"),__vite__mapDeps([18,1])),meta:{t:"dotNet面试题",O:200}}],["/interview/elasticsearch.html",{loader:()=>a(()=>import("./elasticsearch.html-FIR06XZ9.js"),__vite__mapDeps([19,1])),meta:{t:"Elasticsearch面试题",O:200}}],["/interview/interviewHandbook.html",{loader:()=>a(()=>import("./interviewHandbook.html-2VL8c5d1.js"),__vite__mapDeps([20,1])),meta:{t:"面试宝典",O:199}}],["/interview/interviewHandbook2.html",{loader:()=>a(()=>import("./interviewHandbook2.html-B4HfPmno.js"),__vite__mapDeps([21,1])),meta:{t:"面试宝典2",O:199}}],["/interview/jianli.html",{loader:()=>a(()=>import("./jianli.html-D2D-3bpO.js"),__vite__mapDeps([22,1])),meta:{t:"说明",O:1}}],["/interview/mongodb.html",{loader:()=>a(()=>import("./mongodb.html-BeXFfiZN.js"),__vite__mapDeps([23,1])),meta:{t:"MongoDB面试题",O:200}}],["/interview/mysql.html",{loader:()=>a(()=>import("./mysql.html-CftAfKul.js"),__vite__mapDeps([24,1])),meta:{t:"MySql面试题",O:200}}],["/interview/nginx.html",{loader:()=>a(()=>import("./nginx.html-BDcrSY4z.js"),__vite__mapDeps([25,1])),meta:{t:"Nginx面试题",O:200}}],["/interview/personnelProblem.html",{loader:()=>a(()=>import("./personnelProblem.html-_XAH9fKA.js"),__vite__mapDeps([26,1])),meta:{t:"人事问题",O:2}}],["/interview/rabbitmq.html",{loader:()=>a(()=>import("./rabbitmq.html-JEdkmHGg.js"),__vite__mapDeps([27,1])),meta:{t:"RabbitMQ面试题",O:200}}],["/interview/redis.html",{loader:()=>a(()=>import("./redis.html-CfPXPD6c.js"),__vite__mapDeps([28,1])),meta:{t:"Redis面试题",O:200}}],["/interview/reserverOperator.html",{loader:()=>a(()=>import("./reserverOperator.html-D0EQLP3v.js"),__vite__mapDeps([29,1])),meta:{t:"备用操作",O:9999}}],["/interview/small_service.html",{loader:()=>a(()=>import("./small_service.html-mhDu1qHq.js"),__vite__mapDeps([30,1])),meta:{t:"微服务面试题",O:200}}],["/interview/wpfInterview.html",{loader:()=>a(()=>import("./wpfInterview.html-DnntTpxJ.js"),__vite__mapDeps([31,1])),meta:{t:"WPF面试题",O:300}}],["/dotnet/cli.html",{loader:()=>a(()=>import("./cli.html-BaDiXED_.js"),__vite__mapDeps([32,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>关于dotNet的一些命令使用</p>
<h2>SDK信息</h2>
<p>sdk下载地址：<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet" target="_blank" rel="noopener noreferrer">https://dotnet.microsoft.com/zh-cn/download/dotnet</a></p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property">## 查看已经安装的sdk</span>
dotnet <span class="token operator">--</span>list<span class="token operator">-</span>sdks
</code></pre></div>`,r:{minutes:2.64,words:791},t:"CLI",y:"a"}}],["/dotnet/dotNetAspire.html",{loader:()=>a(()=>import("./dotNetAspire.html-9_5ypAbp.js"),__vite__mapDeps([33,1])),meta:{a:"azrng",d:17008704e5,l:"2023年11月25日",c:["dotNET"],g:["aspire"],o:!0,e:`<h2>资料</h2>
<p>快速入门：构建您的第一个 .NET Aspire 应用程序https://www.cnblogs.com/powertoolsteam/p/17835864.html</p>
<p><a href="https://www.bilibili.com/video/BV19a4y167Fr?spm_id_from=333.1245.0.0" target="_blank" rel="noopener noreferrer">在 .NET 中正确测量和可视化度量指标</a></p>
<p>aspire 示例：https://github.com/dotnet/aspire-samples/tree/main/samples/Metrics</p>`,r:{minutes:.64,words:191},t:".NET Aspire",y:"a"}}],["/dotnet/duoyuyanpeizhi.html",{loader:()=>a(()=>import("./duoyuyanpeizhi.html-LL7LdVCK.js"),__vite__mapDeps([34,1])),meta:{a:"azrng",d:16892928e5,l:"2023年7月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>支持多语言使网站可以覆盖更广泛的受众。&nbsp;ASP.NET Core 提供的服务和中间件可将网站本地化为不同的语言。</p>
<blockquote>
<p>本次示例环境：vs2019、net5</p>
</blockquote>
<h2>方案</h2>
<ul>
<li>ResourcesPath文件实现</li>
<li>PO文件</li>
</ul>
<p>https://mp.weixin.qq.com/s/5pmT2aE9-Bxvy5m1ZBOKVw | 在ASP.NET Core 使用PO文件指定本地化</p>
<h2>配置</h2>
<blockquote>
<p>无需引用Nuget包即可实现以下功能。</p>
</blockquote>`,r:{minutes:1.82,words:546},t:"多语言配置",y:"a"}}],["/dotnet/kiota.html",{loader:()=>a(()=>import("./kiota.html-CL8-Co7x.js"),__vite__mapDeps([35,1])),meta:{a:"azrng",d:17052768e5,l:"2024年1月15日",c:["dotNET"],g:["kiota"],o:!0,e:`<h2>概述</h2>
<p>Kiota 是一个命令行工具，用于生成 API 客户端以调用您感兴趣的任何 OpenAPI 描述的 API。目标是消除对需要调用的每个 API 依赖不同 API SDK 的需要。Kiota API 客户端提供强类型体验，具有您期望从高质量 API SDK 获得的所有功能，但无需为每个 HTTP API 学习新库。</p>
<p>文档：https://learn.microsoft.com/zh-cn/openapi/kiota/overview</p>
<h2>资料</h2>
<p>https://mp.weixin.qq.com/s/1OimxlNQWzWo_5BIz6KynQ</p>`,r:{minutes:.42,words:127},t:"Kiota",y:"a"}}],["/dotnet/",{loader:()=>a(()=>import("./index.html-sxhFilOp.js"),__vite__mapDeps([36,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:[".net"],o:!0,e:`<h2>概述</h2>
<p>.NET是一个可用于构建各种应用的跨平台的开源的开发平台。</p>
<p>术语表：<a href="https://docs.microsoft.com/zh-cn/dotnet/standard/glossary" target="_blank" rel="noopener noreferrer">此处</a></p>
<p>官网文档：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/getting-started" target="_blank" rel="noopener noreferrer">此处</a></p>`,r:{minutes:3.47,words:1042},t:"说明",i:"home",y:"a"}}],["/dotnet/semantickernel.html",{loader:()=>a(()=>import("./semantickernel.html-CWfzsyj5.js"),__vite__mapDeps([37,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["dotNET"],g:["sk"],o:!0,e:`<h2>概述</h2>
<p>入门手册：https://github.com/kinfey/SemanticKernelCookBook</p>
<h2>开始示例</h2>
<h3>Avalonia-Assistant</h3>
<p>Avalonia-Assistant 是一个开源的桌面智能助理，旨在提供一个基于 Avalonia UI 框架和 Semantic Kernel 与 OpenAI 集成的友好交互体验。通过使用 Avalonia-Assistant，您可以通过文本或语音命令来执行各种桌面操作，从而增强您的工作效率和日常办公体验。</p>
<p>仓库地址：https://github.com/xuzeyu91/Avalonia-Assistant</p>`,r:{minutes:1.38,words:413},t:"SemanticKernel",y:"a"}}],["/dotnet/solutionItems.html",{loader:()=>a(()=>import("./solutionItems.html-CbywSSer.js"),__vite__mapDeps([38,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>讲述仓库下每个文件的含义和用法</p>
<h2>项目文件</h2>
<h3>汇总</h3>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--sdk类型，还有其他类型，比如API是Microsoft.NET.Sdk.Web--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--指定构建可运行的应用程序（而不是库）--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OutputType</span><span class="token punctuation">&gt;</span></span>Exe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OutputType</span><span class="token punctuation">&gt;</span></span>

		<span class="token comment">&lt;!--指定默认框架版本--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--指定框架引用.NET 8和.NET 7，如果是库，那么代表可以被.NET 8或者.NET 7程序引用--&gt;</span>
		<span class="token comment">&lt;!--&lt;TargetFrameworks&gt;net8.0;net7.0&lt;/TargetFrameworks&gt;--&gt;</span>

		<span class="token comment">&lt;!--隐式using，一些系统引用自动帮你引用了--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--可为空的引用类型--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--语言版本，当前是使用Preview(使用所有最新功能，即时有些版本还未发布)，也可以指定具体版本--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LangVersion</span><span class="token punctuation">&gt;</span></span>Preview<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LangVersion</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--为了能够在代码中使用 unsafe 关键字--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AllowUnsafeBlocks</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AllowUnsafeBlocks</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--将垃圾回收器 （GC） 配置为其“服务器”配置，这会影响它在内存消耗和吞吐量之间做出的权衡（它是 ASP.NET 应用程序的默认设置）--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ServerGarbageCollection</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ServerGarbageCollection</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--是否生成文档文件--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GenerateDocumentationFile</span><span class="token punctuation">&gt;</span></span>True<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GenerateDocumentationFile</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--文档名称--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DocumentationFile</span><span class="token punctuation">&gt;</span></span>ClassLibrary1.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DocumentationFile</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--要忽略警告--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NoWarn</span><span class="token punctuation">&gt;</span></span>1701;1702;1591<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NoWarn</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该程序集的作者--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Authors</span><span class="token punctuation">&gt;</span></span>Azrng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Authors</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该程序集的版本--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Copyright</span><span class="token punctuation">&gt;</span></span>版权归Azrng所有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Copyright</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--该程序集的描述信息--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span><span class="token punctuation">&gt;</span></span>基本的公共核心类库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--程序集的版本信息--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Version</span><span class="token punctuation">&gt;</span></span>1.0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Version</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--程序集的包id，发布nuget包的时候要求唯一--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageId</span><span class="token punctuation">&gt;</span></span>Common.Core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PackageId</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--项目url--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageProjectUrl</span><span class="token punctuation">&gt;</span></span>https://azrng.gitee.io/nuget-docs/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PackageProjectUrl</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--构建的时候是否生成包--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GeneratePackageOnBuild</span><span class="token punctuation">&gt;</span></span>True<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GeneratePackageOnBuild</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--程序集标题--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AssemblyTitle</span><span class="token punctuation">&gt;</span></span>Common.Core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AssemblyTitle</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--是否将警告转为错误--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--包license--&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageLicenseExpression</span><span class="token punctuation">&gt;</span></span>MIT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PackageLicenseExpression</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--解决方案路径--&gt;</span>
		<span class="token comment">&lt;!--&lt;SolutionDir Condition="'$(SolutionDir)' == ''"&gt;$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildThisFileDirectory)', '.gitignore'))&lt;/SolutionDir&gt;--&gt;</span>
        
        <span class="token comment">&lt;!--不关心在发生异常时拥有良好的堆栈跟踪--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackTraceSupport</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackTraceSupport</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--引入的大小与速度选项--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OptimizationPreference</span><span class="token punctuation">&gt;</span></span>Size<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OptimizationPreference</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PublishTrimmed</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PublishTrimmed</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlazorEnableTimeZoneSupport</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BlazorEnableTimeZoneSupport</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventSourceSupport</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventSourceSupport</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HttpActivityPropagationSupport</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HttpActivityPropagationSupport</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EnableUnsafeBinaryFormatterSerialization</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EnableUnsafeBinaryFormatterSerialization</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MetadataUpdaterSupport</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MetadataUpdaterSupport</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseNativeHttpHandler</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UseNativeHttpHandler</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TrimMode</span><span class="token punctuation">&gt;</span></span>link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TrimMode</span><span class="token punctuation">&gt;</span></span>
        
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>

	<span class="token comment">&lt;!--引用的nuget包--&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BenchmarkDotNet<span class="token punctuation">"</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.13.8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,r:{minutes:9.62,words:2886},t:"解决方案文件",y:"a"}}],["/live/baoxian.html",{loader:()=>a(()=>import("./baoxian.html-M60f3Cl8.js"),__vite__mapDeps([39,1])),meta:{a:"azrng",d:16760736e5,l:"2023年2月11日",c:["生活"],g:["无"],o:!0,e:`<h2>介绍</h2>
<ul>
<li>人寿：人死了赔前的</li>
<li>医疗险：住院看病报销的(用国家的保险报销后，剩下的去报销的，自费药、进口药不报销)
<ul>
<li>好医保-长期医疗</li>
</ul>
</li>
<li>重疾险：生病了，一次性赔钱的。</li>
<li>意外险：意外受伤，一般一月十几块钱。
<ul>
<li>无忧保综合意外险</li>
</ul>
</li>
</ul>
`,r:{minutes:.38,words:114},t:"保险",y:"a"}}],["/live/domesticBrand.html",{loader:()=>a(()=>import("./domesticBrand.html-CEBZ65ip.js"),__vite__mapDeps([40,1])),meta:{t:"国货品牌推荐"}}],["/live/food.html",{loader:()=>a(()=>import("./food.html-0kXYz9FF.js"),__vite__mapDeps([41,1])),meta:{a:"azrng",d:16905024e5,l:"2023年7月28日",c:["生活"],g:["无"],e:`<h2>火锅食材</h2>
<p>底料：海底捞火锅底料(番茄和麻辣)</p>
<p>蘸料：原味、麻辣(各两包)</p>
<p>土豆，香菇，生菜，金针菇，豆腐皮，千张，面筋，冬瓜，鸭血，川粉，豆腐，豆泡，海带，鸭肠，木耳，火锅丸子，牛羊肉卷，鱼豆腐，茼蒿，虾滑，牛肉丸</p>
<p>配料：香菜，葱花</p>
<p>主食：烩面</p>
<h2>买菜</h2>
<ul>
<li>土豆
<ul>
<li>形状越圆、越流畅，表皮光滑，这种最好削皮。</li>
<li>发芽发绿的含毒素不能买，家里屯的土豆发芽了也要扔掉不要吃</li>
</ul>
</li>
<li>茄子
<ul>
<li>嫩茄子比老茄子好吃，弯茄子比直茄子好吃</li>
<li>挑茄子看茄子眼，看茄子叶子和果实连接处，有一圈白色环装的就是茄子眼。眼越大茄子越嫩。</li>
<li>最佳赏味时间：5月和6月</li>
</ul>
</li>
<li>辣椒
<ul>
<li>辣椒尖而皮薄的偏辣(比如螺丝椒、小米椒)，青椒不辣但脆脆的(适合做青椒肉丝)，甜椒圆圆的偏甜适合做沙拉。弯的辣，直的不辣</li>
<li>辣椒要选择颜色鲜绿，按下去脆脆的声音，不要选择软趴趴的不新鲜的</li>
</ul>
</li>
<li>黄瓜
<ul>
<li>不管什么品种的黄瓜都要选择嫩的，手感紧实的，带刺的，最好还是带花的(比较新鲜)</li>
</ul>
</li>
<li>番茄
<ul>
<li>选择皮薄的、颜色深的</li>
<li>划重点：表皮上有很多白色点点的，是自然成熟的，这种番茄出沙更多，番茄更甜，口感好，不管是做菜还是生吃都好吃</li>
</ul>
</li>
<li>冬瓜
<ul>
<li>分青皮、黑皮、白皮三种，黑皮肉厚最好吃</li>
<li>黑皮冬瓜肉厚，可食用率高</li>
<li>白皮冬瓜肉薄，质松，易入味</li>
<li>冬瓜选择椭圆形，肉厚、瓤少，表皮光滑的</li>
</ul>
</li>
<li>菠菜
<ul>
<li>选择小叶子的，颜色深绿的，根部偏红</li>
<li>大叶子那种普遍是大棚种出来的，口感一般</li>
<li>叶子表面不能有黄斑</li>
</ul>
</li>
<li>香菜
<ul>
<li>要选择那种根茎短，叶子小，很密集的，这种比较香，而那种大叶子，根茎长，是大棚种出来的，不香不好吃</li>
</ul>
</li>
<li>韭菜
<ul>
<li>叶片细而短的韭菜更香，叶片宽而长的，香味很淡不好吃</li>
</ul>
</li>
<li>白菜
<ul>
<li>包心紧实，表皮洁白没有黑点的最新鲜</li>
</ul>
</li>
<li>莲藕
<ul>
<li>有七个孔的是面藕，9个孔的叫做脆藕，喜欢哪种买哪种，那种颜色太白的可能被漂过不要买</li>
</ul>
</li>
<li>竹笋
<ul>
<li>挑又矮又壮的，或者扁扁的不要挑根部太硬的，这种笋偏老，纤维太多，口感不脆</li>
</ul>
</li>
<li>扁豆
<ul>
<li>挑扁的，里面果实不饱满的，就是那种里面没有什么豆子的最嫩，炒出来很脆。反而里卖果实饱满了表皮就老了</li>
</ul>
</li>
<li>香菇
<ul>
<li>鲜香菇适合炒菜，干香菇适合煲汤。鲜香菇要挑选表面黄褐色、按压有弹性。</li>
</ul>
</li>
<li>芋头
<ul>
<li>表面凹坑的小洞比较多，口感越粉糯</li>
</ul>
</li>
<li>山药
<ul>
<li>铁棍芍药更适合煲汤，那种很细很长的就是铁棍山药，口感粉糯。</li>
<li>比较粗短的山药适合切片炒菜，须毛越多的口感越好</li>
</ul>
</li>
<li>卷心菜
<ul>
<li>颜色偏绿，叶子松一点的，口感更脆</li>
</ul>
</li>
<li>蒜
<ul>
<li>挑紫皮的、捏起来饱满紧实的，蒜发芽了也可以吃的</li>
</ul>
</li>
<li>胡萝卜
<ul>
<li>带点泥的，上下一样粗的，甜度更均匀。带泥的好像比不带泥的更贵</li>
</ul>
</li>
<li>苦瓜
<ul>
<li>挑上面凸起部分要大，颜色嫩绿好看的，果形直的</li>
</ul>
</li>
<li>丝瓜
<ul>
<li>粗细适中，表皮光滑紧实。不要挑选那种软趴趴的那种</li>
</ul>
</li>
<li>萝卜
<ul>
<li>拿起来重的水分多，要表皮光滑干燥的，中等大小即可</li>
</ul>
</li>
<li>秋葵
<ul>
<li>选择短而粗的，越长的越苦，要捏一下声音比较脆的是嫩的，捏不动的是老的，不好吃</li>
</ul>
</li>
</ul>`,r:{minutes:3.3,words:991},t:"食物",y:"a"}}],["/live/found.html",{loader:()=>a(()=>import("./found.html-Sz-jO-Kw.js"),__vite__mapDeps([42,1])),meta:{a:"azrng",d:16900704e5,l:"2023年7月23日",c:["生活"],g:["无"],o:!0,e:`<h2>债券型基金</h2>
<h3>如何选择债基</h3>
<p>1.选择发行时间久的。
2.看债基规模不是很小时，看债基是否限购。如果限购，正常来说基金公司是比较看重这个产品的，是想把其做好来吸引客户的
3.看债基各个时间段的同类排名。排名有靠后、一般、普通、优秀之分，选择收益率同类排名优秀的时间段多的。
4.看债基最近的收益率：尽量选择近1周或近1月收益率同类排名是优秀的
5.选择规模适中的债基：规模太大，会摊薄超额收益。规模太小，可能会被清盘</p>
<h3>长中短债区别</h3>
<p>债券型基金有长期纯债和短期纯债之分，短期纯债还细分为中短债、短债和超短债。</p>
<p>长债基金的产品名字通常叫做某某纯债或者某某信用债；中短债、短债和超短债的产品名称通常直接叫做某某中短债、某某短债和某某超短债。</p>`,r:{minutes:4.5,words:1350},t:"基金",y:"a"}}],["/live/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-D7ZkTYAb.js"),__vite__mapDeps([43,1])),meta:{a:"azrng",d:16760736e5,l:"2023年2月11日",c:["生活"],g:["无"],o:!0,e:`<p>记录日常生活</p>
<h2>参考资料</h2>
<p>newzone网站：<a href="https://newzone.top/family/Diet.html" target="_blank" rel="noopener noreferrer">https://newzone.top/family/Diet.html</a></p>
`,r:{minutes:.15,words:44},t:"概述",y:"a"}}],["/live/housing.html",{loader:()=>a(()=>import("./housing.html-CiHBUHxT.js"),__vite__mapDeps([44,1])),meta:{a:"azrng",d:16900704e5,l:"2023年7月23日",c:["生活"],g:["无"],o:!0,e:`<h2>买房</h2>
<p>买房一定要知道的事情：https://weibo.com/7152678733/N236Jtz5D</p>
<p>你必须要知道的买房知识：https://weibo.com/3303632327/N22JFkXAW</p>
<h2>租房</h2>
<h3>押金不退</h3>
<p>1、找税务局或者拨打12366（纳税服务）举报</p>
<p>很多房东出租房子都不开发票，但实际上，出租房子属于盈利行为，需要缴纳税款，因此如果你的房东没有开发票，可以拨打12366进行举报</p>
<p>2、拨打9619举报</p>
<p>出租房屋需要配备消防器材，但是房东的房子，一般是没有房间会配备的，这是存在安全隐患的，因此可以进行投诉举报。</p>`,r:{minutes:1.23,words:370},t:"住房",y:"a"}}],["/live/music.html",{loader:()=>a(()=>import("./music.html-DQdblng8.js"),__vite__mapDeps([45,1])),meta:{a:"azrng",d:16948224e5,l:"2023年9月16日",c:["生活"],g:["无"],o:!0,e:`<h2>养护音乐</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>音乐是最好的疗养师</p>
<p>在中国医学巨作《黄帝内经》中记载：</p>
<blockquote>
<p><strong>肝属木，在音为角，在志为怒；心属火，在音为徴，在志为喜；</strong></p>
<p><strong>脾属土，在音为宫，在志为思；肺属金，在音为商，在志为忧；肾属水，在音为羽，在志为恐。</strong></p>
<p><strong>角、徴、宫、商、羽五音，称之为“天五行”。</strong></p>
</blockquote>
</div>`,r:{minutes:.82,words:245},t:"音乐",y:"a"}}],["/live/richangtousu.html",{loader:()=>a(()=>import("./richangtousu.html-DspvS1B8.js"),__vite__mapDeps([46,1])),meta:{a:"azrng",d:16760736e5,l:"2023年2月11日",c:["生活"],g:["无"],o:!0,e:`<h2>欠钱</h2>
<p>微信搜索移动微法院=&gt;我要立案=&gt;不愿调解=&gt;选择法院选择区县级别=&gt;案件类型选择民事一审，起诉状按照模板写(需要被告人姓名、性别、身份证号码、被告人现居住地、联系方式、工作单位)越详细越好，然后打印出来按手印上传=&gt;然后提供所有的资料上传=&gt;立案后调解员会找到=&gt;等待开庭。</p>
<h2>生活</h2>
<p>黑猫投诉
消费者维权：12315</p>
`,r:{minutes:.52,words:157},t:"日常投诉",y:"a"}}],["/live/socialInsurance.html",{loader:()=>a(()=>import("./socialInsurance.html-n69XDedf.js"),__vite__mapDeps([47,1])),meta:{a:"azrng",d:16900704e5,l:"2023年7月23日",c:["生活"],g:["社会"],o:!0,e:`<h2>求助电话</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>有没有用，试试才知道，咨询外地的需要加区号，本地投诉直接拨打即可</p>
<p>摘抄自：https://weibo.com/1690367810/N89knr1B4</p>
</div>
<ul>
<li>12345：市民热线，生活中不管你遇到任何困难的时候，都可以拨打电话号码。</li>
<li>12348：法律援助电话，如果遇到什么法律上的问题，手里有不宽裕，就可以直接拨打这电话，可以免费给你提供各方面的法律知识。符合条件的还可以免费申请律师，给你免费打官司。</li>
<li>12333：全国人力资源社会保障热线，它提供就业、社会保险、人事、人才、工资收入分配和劳动关系等领域的政策咨询、信息查询、办事指南和投诉举报等公共服务。比如拖欠公司，不买社保都可以打这个电话</li>
<li>12393：全国医疗保障服务热线，由相应统筹地区医保经办机构提供服务。</li>
<li>12368：全国法律系统公益服务电话，所有的案件信息或者要核实自己是否被起诉，都可以用这个电话来查询核实。</li>
<li>12338：女性权益保护热线电话。</li>
<li>12389：全国公安机关举报电话和互联网举报平台</li>
<li>12377：中央网信办违法和不良信息举报中心</li>
<li>12309：全国检察机关统一举报电话，举报职务范围专用电话</li>
<li>12388：全国记检察机关受理群众对党员及领导干部和国家公务员违反党纪政纪行为的检举控告、纪检监察、党风廉政、反复投诉等</li>
<li>12358：物价局统一举报关于产品价格哄抬、操纵市场价格，损害消费者、经营者。</li>
<li>12365：国家质量总局，负责受理关于产品质量、计标准化等方面的申诉、投诉、举报、产品质量咨询、防伪查询等。</li>
<li>12336：国土资源局设立的针对土地和矿产违法行为举报投诉电话，违法占地、批地、转让、破坏、开采、勘察等违法行为</li>
<li>12319：城建部、信息产业部设立的城市建设服务热线，涉及公共交通、供水、燃气、供暖、违章建筑等方面</li>
<li>12315：市场监督管理局解决消费者因生活消费、使用商品、接受服务、经营者违法社会监督管理法律、法规的举报</li>
<li>12366：国家税务总局纳税服务热线，纳税人偷、逃、骗税等，发票违章、纳税申报和查询等
<ul>
<li>037169091829 河南省郑州市郑东新区税务投诉举报电话</li>
</ul>
</li>
<li>95598：24小时电力服务客服电话</li>
</ul>`,r:{minutes:5.09,words:1527},t:"社会保障",y:"a"}}],["/live/trip.html",{loader:()=>a(()=>import("./trip.html-CpzWclqI.js"),__vite__mapDeps([48,1])),meta:{a:"azrng",d:16760736e5,l:"2023年2月11日",c:["生活"],g:["无"],o:!0,e:`<h2>郑州</h2>
<h3>车站</h3>
<p>郑州汽车客运站：0371 96269</p>
<h2>地图</h2>
<h3>国家标准地图服务</h3>
<p>支持下载全国、省的高清地图</p>
<p>官网：http://bzdt.ch.mnr.gov.cn/index.html</p>
<h2>旅游</h2>
<h3>上海市</h3>
<p>外滩、滨江森林公园</p>
<h3>江苏省</h3>
<h4>苏州市</h4>
<p>逛园林</p>
<h4>无锡市</h4>
<p>说是里面的店铺卖的东西特别不错</p>
`,r:{minutes:.35,words:106},t:"出行",y:"a"}}],["/live/wanggougonglve.html",{loader:()=>a(()=>import("./wanggougonglve.html-6qPPOVEh.js"),__vite__mapDeps([49,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["生活"],g:["无"],o:!1,e:`<h2>网购网站</h2>
<h3>淘宝</h3>
<ul>
<li>当没有省钱卡和商品优惠券时，使用「一淘 app」下单，拿购物返利。</li>
<li>购物节（618、双 11）的大额券，一定要凑满使用，凑单部分凑好后立即退掉。
<ul>
<li>大额券一般有 92 折，可以用于预购，但不能与省钱卡叠加。</li>
</ul>
</li>
<li>购物节日前一天的预购和节日当天，是最优惠时候。
<ul>
<li>商家在活动前说的保价，并不包含大额券，不用提前下单</li>
</ul>
</li>
</ul>
<h3>闲鱼</h3>
<ul>
<li>下单电子类产品前，在闲鱼找找是否有全新转卖，一般比旗舰店便宜 20%</li>
</ul>`,r:{minutes:2.34,words:703},t:"网购攻略",y:"a"}}],["/orm/",{loader:()=>a(()=>import("./index.html-LlWH64G2.js"),__vite__mapDeps([50,1])),meta:{a:"azrng",d:16864416e5,l:"2023年6月11日",c:["orm"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>ORM(对象关系映射)：就是一种为了解决面向对象与关系数据库互不匹配现象的技术。通过描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。思想就是<strong>表实体和数据库表之间的相互转换</strong>。</p>
<ul>
<li>Orm的思想就是把表实体和数据库表直接相互转换。</li>
<li>O代表的就是实体  m就是映射关系 r代表的是关系</li>
</ul>
<p>adonet ef是以adonet为基础所发展出来的对象关系</p>
<p>实体框架ef是ado.net中的一组支持开发面向数据的软件应用程序的技术，是微软的一个orm框架。</p>`,r:{minutes:1.16,words:347},t:"说明",y:"a"}}],["/middleware/graphql.html",{loader:()=>a(()=>import("./graphql.html-B8AVvZSB.js"),__vite__mapDeps([51,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h3>介绍</h3>
<ul>
<li>
<p>GraphQL是一种新的API标准，它提供了一种比REST更有效、更强大和更灵活的替代方案。</p>
</li>
<li>
<p>它是由Facebook开发并开源的，现在由来自世界各地的公司和个人组成的大型社区维护。</p>
</li>
<li>
<p>GraphQL本质上是一种基于api的查询语言，现在大多数应用程序都需要从服务器中获取数据，这些数据存储可能存储在数据库中，API的职责是提供与应用程序需求相匹配的存储数据的接口。</p>
</li>
<li>
<p>它是数据库无关的，而且可以在使用API的任何环境中有效使用，我们可以理解为GraphQL是基于API之上的一层封装，目的是为了更好，更灵活的适用于业务的需求变化。</p>
</li>
</ul>`,r:{minutes:.78,words:235},t:"GraphQL",y:"a"}}],["/middleware/",{loader:()=>a(()=>import("./index.html-BXSrRVCu.js"),__vite__mapDeps([52,1])),meta:{a:"azrng",d:1675296e6,l:"2023年2月2日",c:["middleware"],g:["无"],o:!0,e:`<p>中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。</p>
<p>从这个意义上可以用一个等式来表示中间件：中间件=平台+通信，这也就限定了只有用于分布式系统中才能叫中间件，同时也把它与支撑软件和实用软件区分开来。</p>
`,r:{minutes:.86,words:258},t:"概述",y:"a"}}],["/middleware/shujuqianyi.html",{loader:()=>a(()=>import("./shujuqianyi.html-BU1P6JFP.js"),__vite__mapDeps([53,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ETL(是Extract-Transform-Load的缩写，即数据抽取、转换、装载的过程)，对于企业应用来说，我们经常会遇到各种数据的处理、转换、迁移的场景。</p>
<h2>数据迁移工具</h2>
<h3>Kettle</h3>
<p>Kettle是一款国外开源的ETL工具，纯Java编写，绿色无需安装，数据抽取高效稳定 (数据迁移工具)。
Kettle 中有两种脚本文件，transformation 和 job，transformation 完成针对数据的基础转换，job 则完成整个工作流的控制。
Kettle 中文名称叫水壶，该项目的主程序员 MATT 希望把各种数据放到一个壶里，然后以一种指定的格式流出。</p>`,r:{minutes:3.61,words:1084},t:"数据迁移",y:"a"}}],["/middleware/sonar.html",{loader:()=>a(()=>import("./sonar.html-DkIJvNPT.js"),__vite__mapDeps([54,1])),meta:{a:"azrng",d:1623456e6,l:"2021年6月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>是一个开源平台，用于管理源代码的质量。不仅仅是一个质量数据报告工具，更是代码质量管理平台。</p>
<blockquote>
<p>Github：<a href="https://github.com/SonarSource" target="_blank" rel="noopener noreferrer">https://github.com/SonarSource</a></p>
</blockquote>
`,r:{minutes:.24,words:73},t:"Sonar",y:"a"}}],["/middleware/zhifuzujian.html",{loader:()=>a(()=>import("./zhifuzujian.html--GYpmP05.js"),__vite__mapDeps([55,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>paylink</h2>
<p>支持渠道：支付宝支付、微信支付
仓库地址：<a href="https://github.com/essensoft/paylink" target="_blank" rel="noopener noreferrer">https://github.com/essensoft/paylink</a></p>
`,r:{minutes:.17,words:50},t:"支付组件",y:"a"}}],["/soft/browserPlug.html",{loader:()=>a(()=>import("./browserPlug.html-vq6Nc0C5.js"),__vite__mapDeps([56,1])),meta:{a:"azrng",d:16708032e5,l:"2022年12月12日",c:["soft"],o:!1,e:`<h2>广告拦截</h2>
<h3>uBblock Orgin</h3>
<p>一款高效的网络请求过滤工具，占用极低的内存和 CPU。可以有效拦截99%以上的网页广告，获得更加快速、整洁的浏览体验。</p>
<p><a href="https://microsoftedge.microsoft.com/addons/detail/ublock-origin/odfafepnkmbhccpbejgmiehpchacaeak?hl=zh-CN" target="_blank" rel="noopener noreferrer">安装地址</a></p>
<h3>Adblock Plus</h3>
`,r:{minutes:3.39,words:1018},t:"浏览器插件",y:"a"}}],["/soft/game.html",{loader:()=>a(()=>import("./game.html-BvIKyBnt.js"),__vite__mapDeps([57,1])),meta:{a:"azrng",d:16708032e5,l:"2022年12月12日",c:["soft"],o:!0,e:`<h2>javascript-tetris</h2>
<p>一个简单的 JavaScript 俄罗斯方块游戏，这个开源项目是通过 HTML5 实现的，功能简陋齐全。</p>
<p>地址：</p>
<p>https://codeincomplete.com/articles/javascript-tetris/</p>
<p>GitHub 地址：</p>
<p>https://github.com/jakesgordon/javascript-tetris</p>
<p>游戏在线地址：</p>
<p>https://codeincomplete.com/games/tetris/</p>
<h2>react-tetris</h2>`,r:{minutes:3.68,words:1105},t:"开源游戏",y:"a"}}],["/soft/photoshop.html",{loader:()=>a(()=>import("./photoshop.html-CFI_jusz.js"),__vite__mapDeps([58,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Photoshop"],g:["ps"],e:`<h2>常用分辨率设置</h2>
<p>洗印照片，300或者以上
杂志、名片等印刷物 300
海报高清写真96-200
网络图片、网页界面 72
大型喷绘 25-50</p>
<h2>快捷键</h2>
<h3>界面操作</h3>
<p>放大缩小
命令：alt+滚轮
快速恢复界面原状
命令：ctrl+0</p>
<p>切换剪裁
编辑=》首选项=》单位与标尺=》改为像素</p>
<p>工作区附件加颜色
命令：shift+喷漆桶</p>
<h2>操作</h2>
<h3>新建文档</h3>
<h4>分辨率</h4>
<p>单位一般是：像素/英寸</p>
<h4>颜色模式常用</h4>
<p>RGB颜色的8位
CMYK颜色的8位</p>`,r:{minutes:1.12,words:335},t:"Photoshop",O:1,y:"a"}}],["/soft/softCollection.html",{loader:()=>a(()=>import("./softCollection.html-CA1v2Ycs.js"),__vite__mapDeps([59,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["soft"],e:`<h2>系统工具</h2>
<h3>系统激活</h3>
<h4>神龙激活器</h4>
<p>地址：<a href="https://azrng.lanzoui.com/ian4Uqyzjkj" target="_blank" rel="noopener noreferrer">https://azrng.lanzoui.com/ian4Uqyzjkj</a></p>
<h4>其他</h4>
<p>激活工具开源地址：https://github.com/massgravel/Microsoft-Activation-Scripts</p>
<h3>火绒弹框拦截</h3>
<p>下载地址：待上传蓝奏云</p>`,r:{minutes:19.93,words:5978},t:"软件合集",O:2,y:"a"}}],["/soft/uos.html",{loader:()=>a(()=>import("./uos.html-DQkORCUP.js"),__vite__mapDeps([60,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["uos"],o:!0,e:`<h2>安装</h2>
<p>使用Hyper-v创建虚拟机安装uos系统，关于Hyper-V的基本用法可以看另一个文章</p>
<figure><img src="/common/202212101425096.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>选择语言然后同意协议点击下一步进入硬盘分区，这里需要满足一定的磁盘大小才能下一步</p>
<figure><img src="/common/202212101425850.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:1.56,words:469},t:"虚拟机玩UOS",y:"a"}}],["/soft/webAddress.html",{loader:()=>a(()=>import("./webAddress.html-CjMJTdhw.js"),__vite__mapDeps([61,1])),meta:{a:"azrng",d:16906752e5,l:"2023年7月30日",c:["soft"],g:["网站"],o:!1,e:`<h2>综合网站</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>随意排序的</p>
</div>
<p><a href="https://adzhp.xyz/" target="_blank" rel="noopener noreferrer">爱达杂货铺</a> <a href="http://guozhivip.com/" target="_blank" rel="noopener noreferrer">果汁导航</a> <a href="https://www.appinn.com/" target="_blank" rel="noopener noreferrer">小众软件</a> <a href="https://youquhome.com/" target="_blank" rel="noopener noreferrer">有趣网址之家</a> <a href="https://blog.idejihuo.com/" target="_blank" rel="noopener noreferrer">IDE激活</a></p>`,r:{minutes:19.47,words:5841},t:"网站推荐",y:"a"}}],["/softwareDesign/baseTheory.html",{loader:()=>a(()=>import("./baseTheory.html-B1ySdIpp.js"),__vite__mapDeps([62,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["软件设计"],g:["base"],o:!0,e:`<h2>概述</h2>
<p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结， 是基于CAP定理逐步演化而来的。BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>
<p><code>为了解决关系型数据库强一致性引起的问题而引起可用性降低而提出来的解决方案。</code></p>
<h2>参考资料</h2>
<p>分布式CAP理论和BASE理论：https://zhuanlan.zhihu.com/p/141376066</p>`,r:{minutes:.71,words:214},t:"Base理论",y:"a"}}],["/softwareDesign/bianchengsaixiang.html",{loader:()=>a(()=>import("./bianchengsaixiang.html-C5JzNv8D.js"),__vite__mapDeps([63,1])),meta:{a:"azrng",d:16485984e5,l:"2022年3月30日",c:["软件设计"],g:["无"],o:!0,e:`<h2>发展路线</h2>
<p>POP(procedure oriented programming)面向过程编程：以过程为中心的编程思想，思考方式从实际出发
OOP(Object Oriented Programming)面向对象编程：相比较上面的流程比较清楚
不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。
AOP面向切面编程：在不修改原始类的情况下给程序动态增加统一功能的一种技术，是对OOP的一种补充，解决共性问题(同一个功能多次使用)和扩展问题(后台项目改造，扩展需求)
优势：1.将通用功能从业务逻辑中抽离出来，提供代码重用性，有利于后期的维护和扩展。
2.软件设计时候，抽离出通用的功能(切面)，有利于软件设计的模块化，降低软件架构的复杂度。
缺点：是对OOP思想的补充，无法单独存在，首先POP来梳理整个业务流程，根据流程OOP去整理类和模块。</p>`,r:{minutes:1.44,words:431},t:"编程思想",y:"a"}}],["/softwareDesign/changjianderuanjianjiagougaishu.html",{loader:()=>a(()=>import("./changjianderuanjianjiagougaishu.html-J2aJ5WED.js"),__vite__mapDeps([64,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<p>如果一个软件开发人员，不了解软件架构的演进，会制约技术的选型和开发人员的生存、晋升空间。这里我列举了目前主要的四种软件架构以及他们的优缺点，希望能够帮助软件开发人员拓展知识面。</p>
<h2>一、单体架构</h2>
<p>单体架构比较初级，典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层。这是一种典型的.Net Mvc、Java Spring mvc或者Python Drango框架的应用。其架构图如下所示：
<img src="/common/1618967062082-4e854ce7-8ef3-40f0-b44a-9a743e06f488.webp" alt="" loading="lazy">
单体架构的应用比较容易部署、测试， 在项目的初期，单体应用可以很好地运行。然而，随着需求的不断增加， 越来越多的人加入开发团队，代码库也在飞速地膨胀。慢慢地，单体应用变得越来越臃肿，可维护性、灵活性逐渐降低，维护成本越来越高。下面是单体架构应用的一些缺点：
复杂性高： 以一个百万行级别的单体应用为例，整个项目包含的模块非常多、模块的边界模糊、 依赖关系不清晰、 代码质量参差不齐、 混乱地堆砌在一起。可想而知整个项目非常复杂。 每次修改代码都心惊胆战， 甚至添加一个简单的功能， 或者修改一个Bug都会带来隐含的缺陷。
技术债务： 随着时间推移、需求变更和人员更迭，会逐渐形成应用程序的技术债务， 并且越积 越多。“ 不坏不修”， 这在软件开发中非常常见， 在单体应用中这种思想更甚。 已使用的系统设计或代码难以被修改，因为应用程序中的其他模块可能会以意料之外的方式使用它。
部署频率低： 随着代码的增多，构建和部署的时间也会增加。而在单体应用中， 每次功能的变更或缺陷的修复都会导致需要重新部署整个应用。全量部署的方式耗时长、 影响范围大、 风险高， 这使得单体应用项目上线部署的频率较低。 而部署频率低又导致两次发布之间会有大量的功能变更和缺陷修复，出错率比较高。
可靠性差： 某个应用Bug，例如死循环、内存溢出等， 可能会导致整个应用的崩溃。
扩展能力受限： 单体应用只能作为一个整体进行扩展，无法根据业务模块的需要进行伸缩。例如，应用中有的模块是计算密集型的，它需要强劲的CPU； 有的模块则是IO密集型的，需要更大的内存。 由于这些模块部署在一起，不得不在硬件的选择上做出妥协。
阻碍技术创新： 单体应用往往使用统一的技术平台或方案解决所有的问题， 团队中的每个成员 都必须使用相同的开发语言和框架，要想引入新框架或新技术平台会非常困难。</p>`,r:{minutes:11.88,words:3565},t:"常见的软件架构概述",y:"a"}}],["/softwareDesign/openSourceProject.html",{loader:()=>a(()=>import("./openSourceProject.html-BZHEXFIG.js"),__vite__mapDeps([65,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["软件设计"],g:["无"],o:!0,e:`<h2>合集</h2>
<p>开源项目大全：<a href="https://mp.weixin.qq.com/s/_9WIQSj15_kcMdcOZEehvA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_9WIQSj15_kcMdcOZEehvA</a></p>
<h3>awesome-selfhosted</h3>
<p>内容自行部署自托管：<a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener noreferrer">https://github.com/awesome-selfhosted/awesome-selfhosted</a></p>`,r:{minutes:38.4,words:11521},t:"开源项目",y:"a"}}],["/softwareDesign/",{loader:()=>a(()=>import("./index.html-Ded0z2Fa.js"),__vite__mapDeps([66,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>软件设计=模型+规范
模块的粒度可大可小，小到可以是一个类，大到可以是一个系统。
规范的作用主要是在于维系软件长期的演化。</p>
<p>分离关注点：发现的关注点越多越好，粒度越小越好
关注非功能性需求：执行质量与演化质量
可测试性：提高可测试性有利于尽早暴露问题。</p>
<p>高级软件开发主题指导：https://deviq.com/</p>
<p>框架设计准则：https://learn.microsoft.com/zh-cn/dotnet/standard/design-guidelines/</p>
<h2>一个项目从启动到验收要经过哪些阶段</h2>
`,r:{minutes:7.17,words:2150},t:"说明",y:"a"}}],["/softwareDesign/systemLogOperation.html",{loader:()=>a(()=>import("./systemLogOperation.html-Bt7BbzlZ.js"),__vite__mapDeps([67,1])),meta:{a:"蓝旺(导弹)",d:16955136e5,l:"2023年9月24日",c:["article"],g:["log"],o:!1,e:`<h2><strong>概要</strong></h2>
<h3>1.1 什么是日志？</h3>
<p>日志，维基百科中对其的定义是<strong>一个或多个由服务器自动创建和维护的日志文件，其中包含其所执行活动的列表。</strong></p>
<p>一个打印良好的日志文件可为开发人员提供精确的系统记录，可辅助开发人员定位到系统错误发生的详情及根源。在应用程序中，通常使用日志文件来记录应用程序运行过程中的重要逻辑参数及异常错误，辅之日志采集系统(ELK、DTM)构建系统监控体系。</p>
<h3>1.2 为什么要记录日志？</h3>
<p>上文中提到日志可以提供精准的系统记录方便根因分析，那为什么要记录日志，记录日志有哪些作用呢？</p>`,r:{minutes:16.77,words:5030},t:"系统日志规范及最佳实践",y:"a"}}],["/softwareDesign/understandingComplexBusiness.html",{loader:()=>a(()=>import("./understandingComplexBusiness.html-CmNWml72.js"),__vite__mapDeps([68,1])),meta:{a:"鹿迦",d:16955136e5,l:"2023年9月24日",c:["article"],g:["log"],o:!1,e:`<blockquote>
<p>对于复杂问题的思考其实是有层次的，从最表面的事件，到事件背后的规律，再到这个问题的结构模式，再到价值观，层层递进。在画完自己的业务系统因果回路图之后，再结合这个心智模型，思考自己的思考在哪个层次，是否可以有机会再下钻到更深的层次。</p>
</blockquote>
<p>我们必须承认这个世界原本就非常复杂，就像以我们现在的科技仍然不能攻克新冠病毒、不能精确预测天气、不能有效控制经济形势异常波动一样，任何试图浮于表面、疏于投入就想了解并解决一个复杂问题的傲慢做法，最终都只能接受无情的打脸。</p>
<p>回到我们阿里当前的业务，随着市场规模的扩大、用户群体的多样性、公司组织的持续膨胀和细分、产品历史包袱的累积，我们的业务不可避免的越来越复杂和难以理解。就像著名的热力学第二定律（熵增定律）所解释的那样，只要没有外界系统的做功（我理解是一个颠覆性的业务模式），我们当前的系统就无可避免的持续熵增。</p>`,r:{minutes:11.78,words:3535},t:"如何快速理解复杂业务，系统思考问题？",y:"a"}}],["/softwareDesign/xuqiufenxihesheji.html",{loader:()=>a(()=>import("./xuqiufenxihesheji.html-B_cBFJ6f.js"),__vite__mapDeps([69,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>需求设计</h2>
<p>用户用例：模拟用户如何使用我们的产品，描述用户在一个特定的应用场景里面的一个完整的业务操作流程。</p>
<p>1.合理地将功能划分到不同的模块。
合理划分代码可以实现代码的高内聚、低耦合，把类与类之间的交互简单清洗，代表整体结构一目了然，那么代码的质量就不会差到哪里去。</p>
<p>2.设计模块与模块之间的交互关系。
通过同步接口调用或者通过消息中间件异步调用。</p>
<p>3.设计模块的接口、数据库、业务模型</p>
<p>为什么系统开发一般分为三层：Controller层、Service层、Repository层
1.分层可以起到代码复用的作用，可能同一个Repository会被多个Service来调用。</p>`,r:{minutes:2.2,words:659},t:"需求分析和设计",y:"a"}}],["/temp/generateCSharpClass.html",{loader:()=>a(()=>import("./generateCSharpClass.html-uZGssZCw.js"),__vite__mapDeps([70,1])),meta:{t:"生成CSharp类"}}],["/temp/imageOperator.html",{loader:()=>a(()=>import("./imageOperator.html-Y_38xtF7.js"),__vite__mapDeps([71,1])),meta:{t:"镜像操作"}}],["/temp/movie.html",{loader:()=>a(()=>import("./movie.html-CNHD8c8c.js"),__vite__mapDeps([72,1])),meta:{t:"电影"}}],["/temp/pipelineMethodCompletesComplexProcess.html",{loader:()=>a(()=>import("./pipelineMethodCompletesComplexProcess.html-C1Q2fMBO.js"),__vite__mapDeps([73,1])),meta:{t:"以管道的方式来完成复杂的流程处理"}}],["/temp/",{loader:()=>a(()=>import("./index.html-eMy37dkA.js"),__vite__mapDeps([74,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",g:["temp"],o:!0,e:`<h2>概述</h2>
<p>临时方法</p>
<h2>表情区域</h2>
<p>地址：https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/</p>
<p>👈    👍    👉</p>
<p>😄 😊</p>
<h2>临时代码</h2>
<p>有花堪折直须折，莫待无花空折枝</p>
<h2>通用</h2>
<p>使用 dotnet-monitor + prometheus + grafana 进行诊断：https://dev.to/rafaelpadovezi/diagnosticos-usando-dotnet-monitor-prometheus-grafana-3n7o</p>`,r:{minutes:5.99,words:1796},t:"说明",y:"a"}}],["/temp/script.html",{loader:()=>a(()=>import("./script.html-UG1t5cO0.js"),__vite__mapDeps([75,1])),meta:{t:"脚本"}}],["/temp/upperComputer.html",{loader:()=>a(()=>import("./upperComputer.html-BzmstZN1.js"),__vite__mapDeps([76,1])),meta:{t:"上位机"}}],["/web/javascript.html",{loader:()=>a(()=>import("./javascript.html-s3Ue4-Px.js"),__vite__mapDeps([77,1])),meta:{a:"azrng",d:17019936e5,l:"2023年12月8日",c:["web"],g:["javascript"],o:!0,e:`<h2>教程</h2>
<p>现代JavaScript教程：https://zh.javascript.info/</p>
`,r:{minutes:.09,words:28},t:"JavaScript",y:"a"}}],["/classicArticle/xuexiResource/jiaoYuPlatform.html",{loader:()=>a(()=>import("./jiaoYuPlatform.html-UTsGaytd.js"),__vite__mapDeps([78,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["article"],g:["学习","官方"],o:!0,e:`<h2>国家数字图书馆</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>主要内容还是传统文化</p>
</div>
<p>国家数字图书馆是一款以服务和资源为主的阅读软件，引入新技术为不同类型的读者提供到馆服务、在线业务办理及在线阅读资源功能。</p>
<figure><img src="/common/95a04297-6eb8-4459-aa78-9f135889cb94.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>`,r:{minutes:2.27,words:682},t:"教育平台",y:"a"}}],["/classicArticle/xuexiResource/notSuchABadProgrammer.html",{loader:()=>a(()=>import("./notSuchABadProgrammer.html-CLUabFvL.js"),__vite__mapDeps([79,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["article"],g:["学习"],e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>读“如何成为以为不那么差的程序员”有感</p>
</div>
<h2>技能树</h2>
<h3>计算机基础</h3>
<p>1、网络相关的知识</p>
<p>比如TCP协议，和UDP的差异。需要理解TCP三次握手的含义，<a href="https://crossoverjie.top/2018/08/03/netty/Netty(3)TCP-Sticky/" target="_blank" rel="noopener noreferrer">拆、粘包</a>等问题，以及最上层的HTTP也需要了解，甚至熟悉</p>`,r:{minutes:3.65,words:1094},t:"如何成为一个不那么差的程序员",y:"a"}}],["/classicArticle/xuexiResource/studyMethod.html",{loader:()=>a(()=>import("./studyMethod.html-CEYcwSUY.js"),__vite__mapDeps([80,1])),meta:{a:"azrng",d:16911072e5,l:"2023年8月4日",c:["article"],g:["学习","方法"],e:`<h2>极客时间学习方法</h2>
<h3>总原则</h3>
<p>1000小时定律</p>
<h3>找时间</h3>
<p>如果没有足够的时间投入，再好的理论也只是纸上谈兵。</p>
<p>解决方案：海绵学习法</p>
<h3>学什么</h3>
<p>找到正确的学习方向，明确学习的目标，才能做到有的放矢。</p>
<p>解决方法：确定学习目标=&gt;三段分解法</p>
<h3>怎么学</h3>
<p>不同的学习目的应该有不同的学习方法，保证学习的投入产出比</p>
<p>解决方案：</p>
<ul>
<li>提升技术深度
<ul>
<li>链式学习法</li>
</ul>
</li>
<li>提升技术宽度
<ul>
<li>比较学习法</li>
</ul>
</li>
<li>提升技术广度
<ul>
<li>环式学习法</li>
</ul>
</li>
</ul>`,r:{minutes:.7,words:210},t:"学习方法",y:"a"}}],["/classicArticle/xuexiResource/zhishixuexifangfalun.html",{loader:()=>a(()=>import("./zhishixuexifangfalun.html-D_r8o8G1.js"),__vite__mapDeps([81,1])),meta:{a:"吴大山",d:1689984e6,l:"2023年7月22日",c:["article"],g:["学习"],o:!0,e:`<blockquote>
<p>本文转载地址：<a href="http://wudashan.com/2020/03/29/Learning-Method/" target="_blank" rel="noopener noreferrer">http://wudashan.com/2020/03/29/Learning-Method/</a></p>
</blockquote>
<h2>方法论导图</h2>
<p><img src="/common/1626660231348-d241e4ae-7520-417c-b736-7de0259330bf.png" alt="" loading="lazy">
<a href="https://github.com/wudashan/blog-picture/blob/master/learning-method/%E4%B8%BB%E9%A2%98%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA.xmind?raw=true" target="_blank" rel="noopener noreferrer">方法论导图.xmind（点此下载）</a></p>`,r:{minutes:6.03,words:1808},t:"知识学习方法论",y:"a"}}],["/dataBase/cassandra/jibencaozuo.html",{loader:()=>a(()=>import("./jibencaozuo.html-DmVfuHQJ.js"),__vite__mapDeps([82,1])),meta:{a:"azrng",d:16262208e5,l:"2021年7月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>这里用的是 DataStax 提供的&nbsp;<strong>CassandraCSharpDriver</strong>&nbsp;客户端。</p>
<h2>操作</h2>
<h3>写入</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> cluster <span class="token operator">=</span> Cassandra<span class="token punctuation">.</span>Cluster<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">AddContactPoints</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">WithDefaultKeyspace</span><span class="token punctuation">(</span><span class="token string">"messaging"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> inqId <span class="token operator">=</span> <span class="token string">"xxxxxx"</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> sendTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> senderId <span class="token operator">=</span> <span class="token string">"xxxx"</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> senderRole <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> msgType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> msgBody <span class="token operator">=</span> <span class="token string">"zzzz"</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> INSERT_SQL <span class="token operator">=</span> <span class="token string">@" INSERT INTO messages(inq_id, send_time, sender_id, sender_role, msg_type, msg_body)
VALUES (?, ?, ?, ?, ?, ?) "</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> stmt <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>INSERT_SQL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>inqId<span class="token punctuation">,</span> sendTime<span class="token punctuation">,</span> senderId<span class="token punctuation">,</span> senderRole<span class="token punctuation">,</span> msgType<span class="token punctuation">,</span> msgBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

session<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.7,words:209},t:"基本操作",y:"a"}}],["/dataBase/cassandra/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-Da3AVLTk.js"),__vite__mapDeps([83,1])),meta:{a:"azrng",d:16262208e5,l:"2021年7月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Cassandra 是一个分布式、无中心、弹性可扩展的 NoSQL 数据库，基于 Amazon Dynamo 的分布式设计和 Google Bigtable 的数据模型。</p>
<h2>使用场景</h2>
<p>Cassandra 对聊天记录这个场景的存储还是有一定优势的，可以应对高速的数据增长，而不用在业务代码层做过多的适配；部署相对简单，无特殊依赖，运维成本相对较低。</p>
<h2>参考文档</h2>
<blockquote>
<p>官网：<a href="https://cassandra.apache.org/" target="_blank" rel="noopener noreferrer">https://cassandra.apache.org/</a></p>
</blockquote>`,r:{minutes:.49,words:146},t:"介绍",y:"a"}}],["/dataBase/clickhouse/changyongcaozuo.html",{loader:()=>a(()=>import("./changyongcaozuo.html-Beg6Xdn_.js"),__vite__mapDeps([84,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dataBase"],g:["无"],o:!0,e:`<h2>系统操作</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询连接数</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> system<span class="token punctuation">.</span>metrics <span class="token keyword">WHERE</span> metric <span class="token operator">LIKE</span> <span class="token string">'%Connection'</span><span class="token punctuation">;</span>

<span class="token comment">-- 当前正在执行的查询</span>
<span class="token keyword">SELECT</span> query_id<span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> query  <span class="token keyword">FROM</span> system<span class="token punctuation">.</span>processes <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> query_id<span class="token punctuation">;</span>

<span class="token comment">-- 存储空间统计</span>
<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>path<span class="token punctuation">,</span>formatReadableSize<span class="token punctuation">(</span>free_space<span class="token punctuation">)</span> <span class="token keyword">AS</span> free<span class="token punctuation">,</span>formatReadableSize<span class="token punctuation">(</span>total_space<span class="token punctuation">)</span> <span class="token keyword">AS</span> total<span class="token punctuation">,</span>formatReadableSize<span class="token punctuation">(</span>keep_free_space<span class="token punctuation">)</span> <span class="token keyword">AS</span> reserved <span class="token keyword">FROM</span> system<span class="token punctuation">.</span>disks<span class="token punctuation">;</span>

<span class="token comment">-- 慢查询</span>
<span class="token keyword">SELECT</span>
    <span class="token keyword">user</span><span class="token punctuation">,</span>
    client_hostname <span class="token keyword">AS</span> host<span class="token punctuation">,</span>
    client_name <span class="token keyword">AS</span> client<span class="token punctuation">,</span>
    formatDateTime<span class="token punctuation">(</span>query_start_time<span class="token punctuation">,</span> <span class="token string">'%T'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> started<span class="token punctuation">,</span>
    query_duration_ms <span class="token operator">/</span> <span class="token number">1000</span> <span class="token keyword">AS</span> sec<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span>memory_usage <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> MEM_MB<span class="token punctuation">,</span>
    result_rows <span class="token keyword">AS</span> RES_CNT<span class="token punctuation">,</span>
    result_bytes <span class="token operator">/</span> <span class="token number">1048576</span> <span class="token keyword">AS</span> RES_MB<span class="token punctuation">,</span>
    read_rows <span class="token keyword">AS</span> R_CNT<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span>read_bytes <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> R_MB<span class="token punctuation">,</span>
    written_rows <span class="token keyword">AS</span> W_CNT<span class="token punctuation">,</span>
    <span class="token function">round</span><span class="token punctuation">(</span>written_bytes <span class="token operator">/</span> <span class="token number">1048576</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> W_MB<span class="token punctuation">,</span>
    query
<span class="token keyword">FROM</span> system<span class="token punctuation">.</span>query_log
<span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> query_duration_ms <span class="token keyword">DESC</span>
    <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看库表资源占用情况</span>
<span class="token keyword">select</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">rows</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">row</span><span class="token punctuation">,</span><span class="token comment">--总行数</span>
    formatReadableSize<span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>data_uncompressed_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ysq<span class="token punctuation">,</span><span class="token comment">--原始大小</span>
    formatReadableSize<span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>data_compressed_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ysh<span class="token punctuation">,</span><span class="token comment">--压缩大小</span>
    <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>data_compressed_bytes<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">sum</span><span class="token punctuation">(</span>data_uncompressed_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> ys_rate<span class="token comment">--压缩率</span>
<span class="token keyword">from</span> system<span class="token punctuation">.</span>parts
<span class="token keyword">where</span> <span class="token keyword">database</span><span class="token operator">=</span><span class="token string">'datacenter'</span><span class="token punctuation">;</span>

<span class="token comment">-- 查看库中表行数统计</span>
<span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">,</span><span class="token keyword">table</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">rows</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">rows</span>
<span class="token keyword">from</span> system<span class="token punctuation">.</span>parts
<span class="token keyword">where</span> <span class="token keyword">database</span><span class="token operator">=</span><span class="token string">'datacenter'</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">database</span><span class="token punctuation">,</span> <span class="token keyword">table</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">rows</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>


<span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token keyword">table</span> <span class="token keyword">from</span> system<span class="token punctuation">.</span>parts <span class="token keyword">where</span> <span class="token keyword">database</span><span class="token operator">=</span><span class="token string">'datacenter'</span><span class="token punctuation">;</span>


<span class="token comment">-- drop  database datacenter;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> datacenter<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>3cdb162688e14cc6a1bc65befca5347c_YC150<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.05,words:316},t:"常用操作",y:"a"}}],["/dataBase/clickhouse/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-Cv4jZ8ct.js"),__vite__mapDeps([85,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ClickHouse 是俄罗斯第一大搜索引擎 Yandex 开发的列式储存数据库。令人惊喜的是，这个列式储存数据库的性能大幅超越了很多商业 MPP 数据库软件，比如 Vertica,InfiniDB.</p>
<p>官网：<a href="https://clickhouse.com/" target="_blank" rel="noopener noreferrer">https://clickhouse.com/</a>
github：<a href="https://github.com/ClickHouse/ClickHouse" target="_blank" rel="noopener noreferrer">https://github.com/ClickHouse/ClickHouse</a></p>`,r:{minutes:1.58,words:475},t:"说明",y:"a"}}],["/dataBase/damengshujuku/datagriplianjie.html",{loader:()=>a(()=>import("./datagriplianjie.html-BI_q8LMM.js"),__vite__mapDeps([86,1])),meta:{a:"azrng",d:16819488e5,l:"2023年4月20日",c:["dataBase"],g:["无"],o:!0,e:`<h2>准备工作</h2>
<ul>
<li>部署好的DM数据库</li>
<li>DmJdbcDriver18</li>
</ul>
<p>DmJdbcDriver18,下载地址：<a href="https://eco.dameng.com/docs/zh-cn/app-dev/java-MyBatis-frame.html" target="_blank" rel="noopener noreferrer">https://eco.dameng.com/docs/zh-cn/app-dev/java-MyBatis-frame.html</a>  进入页面搜索jar
<img src="/common/1646040509821-40dfa3d4-3b59-4219-8f76-f88dbc092523.png" alt="image.png" loading="lazy">
需要的文件在这个里面zip包里面</p>`,r:{minutes:.63,words:189},t:"DataGrip连接",y:"a"}}],["/dataBase/damengshujuku/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-sSehgLl6.js"),__vite__mapDeps([87,1])),meta:{a:"azrng",d:16504128e5,l:"2022年4月20日",c:["dataBase"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>.Net驱动资料：<a href="https://eco.dameng.com/docs/zh-cn/app-dev/dot-Net-Data-Provider.html" target="_blank" rel="noopener noreferrer">https://eco.dameng.com/docs/zh-cn/app-dev/dot-Net-Data-Provider.html</a>
产品手册：<a href="https://eco.dameng.com/docs/zh-cn/pm/index.html" target="_blank" rel="noopener noreferrer">https://eco.dameng.com/docs/zh-cn/pm/index.html</a></p>`,r:{minutes:.19,words:57},t:"概述",y:"a"}}],["/dataBase/elasticsearch/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-D3FN7J6B.js"),__vite__mapDeps([88,1])),meta:{a:"azrng",d:165456e7,l:"2022年6月7日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>资料看中间件=&gt;全文检索=&gt;ES文章</p>
`,r:{minutes:.14,words:41},t:"说明",y:"a"}}],["/dataBase/gongyoubufen/cacheDbConsistency.html",{loader:()=>a(()=>import("./cacheDbConsistency.html-rZSmjwAn.js"),__vite__mapDeps([89,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["数据库"],g:["一致性"],o:!1,e:`<h2>缓存和数据库一致性</h2>
<blockquote>
<p>转载地址：https://mp.weixin.qq.com/s/ACGEr8GPs9DYdsblPspAYA</p>
</blockquote>
<p>如何保证缓存和数据库一致性，这是一个老生常谈的话题了。</p>
<p>但很多人对这个问题，依旧有很多疑惑：</p>
<ul>
<li>到底是更新缓存还是删缓存？</li>
<li>到底选择先更新数据库，再删除缓存，还是先删除缓存，再更新数据库？</li>
<li>为什么要引入消息队列保证一致性？</li>
<li>延迟双删会有什么问题？到底要不要用？</li>
<li>...</li>
</ul>`,r:{minutes:19.03,words:5709},t:"缓存和数据库一致性",y:"a"}}],["/dataBase/gongyoubufen/dashujuchaxunkuaisuyouhua.html",{loader:()=>a(()=>import("./dashujuchaxunkuaisuyouhua.html-x0WDtiaQ.js"),__vite__mapDeps([90,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>汇总</h2>
<ul>
<li>增加索引</li>
<li>修改SQL语句</li>
<li>换用不同的函数让走索引</li>
<li>修改表结构</li>
</ul>
<h2>操作</h2>
<p>1.应尽量避免在where子句中使用！=或&lt;&gt;操作符，避免在where后面进行表达式操作会导致索引失效
2.应尽量避免在where子句中使用or来连接条件
如：select&nbsp;Id&nbsp;from&nbsp;t&nbsp;where&nbsp;num=10&nbsp;or&nbsp;num=20
可以这样查询
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num=10
Union&nbsp;all
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num=20
3.&nbsp;in&nbsp;和not&nbsp;in&nbsp;也要慎用，否则会导致全表扫描
如：select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num&nbsp;in(1,2,3)
对于连续的数值，能用between就不要用in了
如：select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num&nbsp;between&nbsp;1&nbsp;and&nbsp;3
4.下面的查询也将导致全表扫描
如：select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;name&nbsp;like&nbsp;‘%abc%’
若提高效率，可以考虑全文检索
5.&nbsp;如果在where子句中使用参数，也会导致全表扫描。因为sql只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时，它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num=@num
可以改为强制查询使用索引：
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;with(index(索引名))&nbsp;where&nbsp;num=@num
6.应尽量避免在where子句中对字段进行表达式操作，这将导致引擎放弃使用而进行全表扫描。
如：select&nbsp;if&nbsp;from&nbsp;t&nbsp;where&nbsp;num/2=100
应改为：select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;num=100<em>2
7.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。
如：select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;substring(name,1,3)=’abc’&nbsp;----name以abc开头的id
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;datadiff(day,createdate.’2005-11-30’)=0&nbsp;----‘2005-11-30’生成的id
应改为:
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;name&nbsp;like&nbsp;‘abc%’
Select&nbsp;id&nbsp;from&nbsp;t&nbsp;where&nbsp;createdate&gt;=’2005-11-30’&nbsp;and&nbsp;createdate&lt;’2005-12-1’
8.不要在where子句中的”=”左边进行函数，算术运算或其他表达式运算，否则系统将可能无法正确使用索引
9.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引不会被使用，并且应尽可能的让字段顺序与索引顺序相一致
10.&nbsp;不要写一些没有意义的查询，如需要生成一个空表结构：
Create&nbsp;table&nbsp;#t(…)
11.很多时候用exist代替in是一个好的选择
如:select&nbsp;num&nbsp;from&nbsp;a&nbsp;where&nbsp;num&nbsp;in&nbsp;(select&nbsp;num&nbsp;from&nbsp;b)
用下面的语句替换：
Select&nbsp;num&nbsp;from&nbsp;a&nbsp;where&nbsp;exists(select&nbsp;1&nbsp;from&nbsp;b&nbsp;where&nbsp;num=a.num&nbsp;)
12.并不是所有索引对查询都有效，sql是根据表中数据来进行优化查询的，当索引列有大量数据重复时，sql查询可能不会利用索引，如一表中有字段sex,male,female几乎各一半，那么即使在Sex上建了索引也对查询效率起不了作用
13.索引并不是越多越好，索引固然可以提高相应的select&nbsp;的效率，但同时也降低了insert及uodate的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常用到的列上建的索引是否愚必要
14.尽量使用数字型字段，若只含数值信息的字段尽量不要涉及为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了
15.尽可以的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显高些
16.任何地方都不要使用select&nbsp;*&nbsp;from&nbsp;t,用具体的字段列表代替“</em>”，不要返回用不到的任何字段
17.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）
18.避免频繁创建和删除临时表，以减少系统表资源的消耗
19.在新建临时表时，如果一次性插入数据量很大，那么可以使用select&nbsp;into代替create&nbsp;table,避免造成大量log,以提高速度，如果数据量不大，为了缓和系统表的资源，应先create&nbsp;table，然后insert
20.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先truncate&nbsp;table,然后drop&nbsp;table,这样可以避免系统表的较长时间锁定
21.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写
22.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效
23.与临时表一样，游标并不是不可使用。对小型数据集使用FAST_FORWARD游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好
24.在所有的存储过程和触发器的开始处设置SET&nbsp;NOCOUNT&nbsp;ON&nbsp;,在结束时设置SET&nbsp;NOCOUNT&nbsp;OFF。无需在执行存储过程和触发器的每个语句后在客户端发送DONE_IN_PROC消息
25.尽量避免大事务操作，提高系统并发能力
26.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理
27.效率Union all》or=in
Like '%123'&nbsp; 不走索引
&nbsp;
Like '123%'&nbsp; 走索引</p>`,r:{minutes:6,words:1800},t:"大数据查询快速优化",y:"a"}}],["/dataBase/gongyoubufen/executeOrder.html",{loader:()=>a(()=>import("./executeOrder.html-D0ixG4vT.js"),__vite__mapDeps([91,1])),meta:{a:"小松聊PHP进阶",d:17088192e5,l:"2024年2月25日",c:["dataBase"],g:["执行"],o:!1,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>注意本文是SQL执行顺序，不是MySQL内部执行流程。
MySQL并非像PostgreSQL（被认为是最接近 SQL 标准的数据库之一）一样严格按照SQL标准，MySQL执行引擎会根据查询的具体情况和优化策略来决定具体的执行顺序，所以SQL执行顺序是理论顺序。</p>
</div>
<h2>书写顺序</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div>`,r:{minutes:4.46,words:1338},t:"执行顺序",y:"a"}}],["/dataBase/gongyoubufen/fenkufenbiao.html",{loader:()=>a(()=>import("./fenkufenbiao.html-CH4NWC72.js"),__vite__mapDeps([92,1])),meta:{a:"azrng",d:16905888e5,l:"2023年7月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>需要分库分表的场景</h2>
<h3>IO瓶颈</h3>
<p>第一种：磁盘读IO瓶颈，热点数据太多，数据库缓存放不下，每次查询时会产生大量的IO，降低查询速度 -&gt; 分库和垂直分表。
第二种：网络IO瓶颈，请求的数据太多，网络带宽不够 -&gt; 分库。</p>
<h3>CPU瓶颈</h3>
<p>第一种：SQL问题，如SQL中包含join，group by，order by，非索引字段条件查询等，增加CPU运算的操作 -&gt; SQL优化，建立合适的索引，在业务Service层进行业务计算。
第二种：单表数据量太大，查询时扫描的行太多，SQL效率低，CPU率先出现瓶颈 -&gt; 水平分表。</p>`,r:{minutes:4.03,words:1210},t:"分库分表",y:"a"}}],["/dataBase/gongyoubufen/jiejuefangan.html",{loader:()=>a(()=>import("./jiejuefangan.html-D1duSFhm.js"),__vite__mapDeps([93,1])),meta:{a:"azrng",d:16920576e5,l:"2023年8月15日",c:["dataBase"],g:["solution"],o:!0,e:`<h2>密文查询</h2>
<p>数据库数据字段加解密检索和前端返回脱敏：<a href="https://www.cnblogs.com/xuejiaming/p/17619102.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xuejiaming/p/17619102.html</a></p>
<p>阿里巴巴密文检索方案：<a href="https://jaq-doc.alibaba.com/docs/doc.htm?treeId=1&amp;articleId=106213&amp;docType=1" target="_blank" rel="noopener noreferrer">https://jaq-doc.alibaba.com/docs/doc.htm?treeId=1&amp;articleId=106213&amp;docType=1</a></p>`,r:{minutes:1.19,words:357},t:"解决方案",y:"a"}}],["/dataBase/gongyoubufen/nosqlReadme.html",{loader:()=>a(()=>import("./nosqlReadme.html-gUU5xmA2.js"),__vite__mapDeps([94,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意味着完美。</p>
<p>-&nbsp;由于关系型数据库是按行进行存储的，在某些只统计一列的需求场景下，也需要把整行读入内存，导致了一个小小的统计需求高IO的缺点
-&nbsp;关系型数据库无法存储数据结构，比如：一个商品可以从属于多个分类，业务上的从属关系体现到存储上是一个列表而已，但是关系型数据库需要把这些关系存储为多行，无法直接存储为一个列表。
-&nbsp;关系型数据库中的存储单位表的架构是强约束，操作不存在的列会报出异常，而且添加、更新、删除列必须执行DDL语句，如果表的现存数据量比较大，会出现长时间锁表的现象。
-&nbsp;关系型数据库全文搜索功能普通比较弱，用like去匹配关键词的时候，数据量比较大的情况下会出现慢查询的现象。
-&nbsp;关系型数据库基于表格的关系模型使得很难添加新的或不同种类的关联信息。</p>`,r:{minutes:11.78,words:3534},t:"NOSQL说明",y:"a"}}],["/dataBase/gongyoubufen/",{loader:()=>a(()=>import("./index.html-xKU6y5oe.js"),__vite__mapDeps([95,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>数据库介绍</h2>
<p>Oracle、MySQL、SQL Server、pgsql、SQLlite几种常用的关系型数据库，以及一堆非关系型数据库</p>
<h2>SQL分类</h2>
<p>1、数据定义语言DDL( Data Definition Language)
数据定义语言是SQL语言集中负责数据结构定义域数据对象定义的语言
主要功能是定义数据库对象，核心指令： create,alter,drop,truncate ,有些数据库的不支持事务</p>
<p>2、数据操纵语言DML&nbsp;(Data Manipulation Language)
数据操纵语言是用于数据库的操作，对数据库其中的对象和数据运行访问的编程语句
主要功能是访问数据，核心指令：insert,delete,update,select</p>`,r:{minutes:3.7,words:1110},t:"说明",y:"a"}}],["/dataBase/gongyoubufen/shiwu.html",{loader:()=>a(()=>import("./shiwu.html-BvSsN5MY.js"),__vite__mapDeps([96,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。
比如，你有2条sql要执行，如果放到一个事务里，要么2个sql都执行成功，要么都失败。都执行成功了就提交事务，有一个失败了就回滚，不存在一个成功一个失败。</p>
<h2>事务原则</h2>
<h5>1. 原子性(Atomicity)</h5>
<p>比如现在A有800元，B有200元，A给B转账200元。完成此场景有2步，可以当做在一个事务里：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> A：800-200=600
 B：200+200=400
</code></pre></div>`,r:{minutes:4.82,words:1447},t:"事务",y:"a"}}],["/dataBase/gongyoubufen/shujukulianjiechi.html",{loader:()=>a(()=>import("./shujukulianjiechi.html-VoC5RQ8r.js"),__vite__mapDeps([97,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<h5>1. .NET数据库连接池的背景</h5>
<p>数据库连接是一个耗时的行为，大多数应用程序只使用1到几种数据库连接，为了最小化打开连接的成本，ado.net使用了一种称为连接池的优化技术。</p>
<h5>2. .NET 数据库连接池的表现</h5>
<p>数据库连接池减少了必须打开新连接的次数，池程序维护了数据库物理连接。
通过为每个特定的连接配置保持一组活动的连接对象来管理连接。
每当应用程序尝试Open连接，池程序就会在池中找到可用的连接，如果有则返回给调用者；
应用程序Close连接对象时，池程序将连接对象返回到池中(Sleep), 这个连接可以在下一次Open调用中重用。
看黑板，下面是这次的重点：</p>`,r:{minutes:3.08,words:923},t:"数据库连接池",y:"a"}}],["/dataBase/gongyoubufen/shujukuqianyi.html",{loader:()=>a(()=>import("./shujukuqianyi.html-CdNecWEa.js"),__vite__mapDeps([98,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>不同数据库之间的迁移</p>
<h2>资料</h2>
<p>MySQL到sqlserver的项目迁移：<a href="https://www.cnblogs.com/helios-fz/p/16538511.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/helios-fz/p/16538511.html</a>
SSMA for MySQL 入门 (MySQLToSQL)：<a href="https://learn.microsoft.com/zh-cn/sql/ssma/mysql/getting-started-with-ssma-for-mysql-mysqltosql?view=sql-server-ver15" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/sql/ssma/mysql/getting-started-with-ssma-for-mysql-mysqltosql?view=sql-server-ver15</a></p>`,r:{minutes:.3,words:90},t:"跨数据库迁移",y:"a"}}],["/dataBase/gongyoubufen/shujukusheji.html",{loader:()=>a(()=>import("./shujukusheji.html-D5rdE7xM.js"),__vite__mapDeps([99,1])),meta:{a:"azrng",d:16905888e5,l:"2023年7月29日",c:["dataBase"],g:["无"],o:!0,e:`<p>任何数据库设计都不应该一一对应UI，UI只是你设计的参考而已，只是很多情况下业务模型正好和UI对应而已。
&nbsp;
一个业务的成败在于产品设计，一个系统设计的好坏，成败在于程序员，在业务正确的情况下，请先消化业务在开始设计系统，UI只是你消化业务的参考，UI只是你业务的具体可视化体现。
&nbsp;
1.不应该针对整个系统去设计数据库，而要将整个系统划分开成不同的组件，针对组件设置数据库；不同组件所对应的数据库表之前的关联应该尽可能的少，确保组件之间的独立性，为系统或者表结构重构提供可能性。
2.根据职责定义对象，对象要符合封装特性，确保与职责相关的数据项被定义在一个对象之内，这些数据项能够描述该职责，不会出现职责描述缺失。并且一个对象有且只有一项职责，如果一个对象负责两个以上的职责，应进行拆分。
3.针对所有表的主键和外键建立索引，对常用的检索方式上面创建组合索引，提高检索的效率。
4.设计出的表尽可能的减少数据冗余，确保数据的准确性。
<a href="http://wubx.net/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%88%99/" target="_blank" rel="noopener noreferrer">参考地址</a></p>`,r:{minutes:1.48,words:444},t:"数据库设计",y:"a"}}],["/dataBase/gongyoubufen/suoyin.html",{loader:()=>a(()=>import("./suoyin.html-CIooLaq8.js"),__vite__mapDeps([100,1])),meta:{a:"azrng",d:16447104e5,l:"2022年2月13日",c:["dataBase"],g:["无"],o:!0,e:`<h2>1. 简介</h2>
<h3>1.1 背景</h3>
<p>索引用于快速找到某一列中有某一个特定值的行，不使用索引，数据库必须从第一条记录开始读完整个表，知道找到相关的行；如果查询的列有索引，数据库能快速到底一个位置去搜索数据。
MySQL官方对于索引的定义：索引市帮助MySQL高效获取数据的数据结构，也就是说索引是一种数据结构。</p>
<blockquote>
<p>目前大部分数据库系统及文件系统都采用B-Tree和B+Tree作为索引结构。</p>
</blockquote>
<h3>1.2 索引优点</h3>
<blockquote>
<p>唯一索引，保证数据库表的每一行数据的唯一性。
大大加快数据的查询速度
加速表和表之间的链接
在使用分组和排序自居进行查询适合，显著减少查询中分组和排序的时间</p>
</blockquote>`,r:{minutes:9.33,words:2800},t:"索引",y:"a"}}],["/dataBase/indexeddb/liulanqishujuku.html",{loader:()=>a(()=>import("./liulanqishujuku.html-Bt2RuMBD.js"),__vite__mapDeps([101,1])),meta:{a:"azrng",d:162216e7,l:"2021年5月28日",c:["dataBase"],g:["无"],o:!0,e:`<h2>参考教程</h2>
<p>入门教程：<a href="https://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2018/07/indexeddb.html</a></p>
`,r:{minutes:.14,words:42},t:"浏览器数据库",y:"a"}}],["/dataBase/litedb/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-BrwNoIy5.js"),__vite__mapDeps([102,1])),meta:{a:"azrng",d:16932672e5,l:"2023年8月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>简介</h2>
<p>LiteDB 是一个小型、快速、轻量级的 .NET NoSQL 嵌入式数据库，也就是我们常说的 K/V 数据库，完全用 C## 托管代码开发，并且是免费和开源的。它非常适合在移动应用 （Xamarin iOS/Android）和小型的桌面/Web 应用中使用。</p>
<p>LiteDB 的灵感来自 MongoDB 数据库，所以它的 API 和 MongoDB 的 .NET API 非常相似。</p>
<p>LiteDB是一个轻量级的嵌入式数据库，它是用C#编写的，适用于.NET平台。它的设计目标是提供一个简单易用的数据库解决方案，可以在各种应用程序中使用。
LiteDB使用单个文件作为数据库存储，这个文件可以在磁盘上或内存中。它支持文档存储模型，类似于NoSQL数据库，每个文档都是一个JSON格式的对象。这意味着你可以存储和检索任意类型的数据，而不需要预定义模式。
LiteDB提供了一组简单的API来执行各种数据库操作，包括插入、更新、删除和查询。它还支持事务，可以确保数据的一致性和完整性。
LiteDB还提供了一些高级功能，如索引、全文搜索和文件存储。索引可以加快查询的速度，全文搜索可以在文本数据中进行关键字搜索，文件存储可以将文件直接存储在数据库中。
LiteDB的优点包括易于使用、轻量级、快速和可嵌入性。它的代码库非常小，可以很容易地集成到你的应用程序中。此外，它还具有跨平台的能力，可以在Windows、Linux和Mac等操作系统上运行。
总之，LiteDB是一个简单易用的嵌入式数据库，适用于各种应用程序。它提供了一组简单的API来执行数据库操作，并支持一些高级功能。如果你需要一个轻量级的数据库解决方案，可以考虑使用LiteDB。</p>`,r:{minutes:2.58,words:775},t:"概述",y:"a"}}],["/dataBase/mongodb/daimacaozuo.html",{loader:()=>a(()=>import("./daimacaozuo.html-C4G3mQMX.js"),__vite__mapDeps([103,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dataBase"],g:["无"],o:!0,e:`<h2>连接</h2>
<p>连接数据库并查询</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MongoClient</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> database <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token string">"mydatabase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCollection</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyEntity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"mycollection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 Builders&lt;T&gt;.Filter.Eq 进行查询</span>
<span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> Builders<span class="token operator">&lt;</span>MyEntity<span class="token operator">&gt;</span><span class="token punctuation">.</span>Filter<span class="token punctuation">.</span><span class="token function">Eq</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token string">"62a39d27025ca1ba8f1f1c1e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.66,words:199},t:"代码操作",y:"a"}}],["/dataBase/mongodb/gainianjiexi.html",{loader:()=>a(()=>import("./gainianjiexi.html-C7Ea2fzP.js"),__vite__mapDeps([104,1])),meta:{a:"azrng",d:16892928e5,l:"2023年7月14日",c:["dataBase"],g:["无"],o:!0,e:`<table>
<thead>
<tr>
<th><strong>SQL术语/概念</strong></th>
<th><strong>MongoDB术语/概念</strong></th>
<th><strong>解释/说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field(字段)</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td>聚合操作($lookup)</td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>id（字段）</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>`,r:{minutes:.39,words:116},t:"概念解析",y:"a"}}],["/dataBase/mongodb/jibencaozuo.html",{loader:()=>a(()=>import("./jibencaozuo.html-D2XDJsLZ.js"),__vite__mapDeps([105,1])),meta:{a:"azrng",d:16892928e5,l:"2023年7月14日",c:["dataBase"],g:["无"],o:!0,e:`<h3>连接</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span> 不需要账号密码的连接字符串
mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">27017</span>

<span class="token operator">--</span> 需要账号密码的连接字符串
mongodb<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>root<span class="token punctuation">:</span><span class="token number">123456</span>@localhost<span class="token operator">/</span>spark<span class="token punctuation">?</span>authSource<span class="token operator">=</span>admin
</code></pre></div>`,r:{minutes:3.49,words:1047},t:"基本操作",y:"a"}}],["/dataBase/mongodb/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-dXJGPGjP.js"),__vite__mapDeps([106,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MongoDB 是一个基于分布式文件存储的数据库，使用c++编写，目的是为web应用提供可扩展的高
性能数据存储解决方案，是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库中功能最丰富的的，最像关系数据库的。它支持的数据结构非常松散，是类似于json的bson格式，因此可以存储比较复杂的数据类型。最大的特点是支持的查询语言非常强大，语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且支持对数据建立索引。</p>
<p>官网：<a href="https://www.mongodb.com/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/</a>
中文教程：<a href="https://www.mongodb.org.cn/tutorial/" target="_blank" rel="noopener noreferrer">https://www.mongodb.org.cn/tutorial/</a>
菜鸟教程：<a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></p>`,r:{minutes:1.24,words:373},t:"说明",y:"a"}}],["/dataBase/mongodb/shiyongchangjing.html",{loader:()=>a(()=>import("./shiyongchangjing.html-Ch3vWvki.js"),__vite__mapDeps([107,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<ul>
<li>游戏场景，使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、更新</li>
<li>物流场景，使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。</li>
<li>社交场景，使用 MongoDB 存储存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能</li>
<li>物联网场景，使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析</li>
<li>视频直播，使用 MongoDB 存储用户信息、礼物信息等</li>
</ul>`,r:{minutes:2.32,words:695},t:"使用场景",y:"a"}}],["/dataBase/mongodb/zhihangjihua.html",{loader:()=>a(()=>import("./zhihangjihua.html--i4uTUQw.js"),__vite__mapDeps([108,1])),meta:{a:"azrng",d:16347744e5,l:"2021年10月21日",c:["dataBase"],g:["无"],o:!0,e:`<p>MongoDB 查询分析可以确保我们所建立的索引是否有效，是查询语句性能分析的重要工具。
MongoDB 查询分析常用函数有：explain() 和 hint()。
explain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。
接下来我们在 users 集合中创建 gender 和 user_name 的索引：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">ensureIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">user_name</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 现在在查询语句中使用 explain ：

db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>gender<span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>user_name<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">_id</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">explain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:1.31,words:394},t:"执行计划",y:"a"}}],["/dataBase/mysql/codeOperator.html",{loader:()=>a(()=>import("./codeOperator.html-BPiwRw36.js"),__vite__mapDeps([109,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>连接数据库</h2>
<h3>.Net连接</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>server=xxx;port=3306;userid=myuserid;password=pwd123;database=db125;charset=utf8;
Server=192.168.100.104;database=azrngblog;uid=root;pwd=123456;SslMode=None;
Server=localhost;Database=test;Port=3306;charset=utf8;uid=root;pwd=123456;sslmode=none;TreatTinyAsBoolean=true
</code></pre></div>`,r:{minutes:7.88,words:2365},t:"操作说明",y:"a"}}],["/dataBase/mysql/dbHelperMySQL.html",{loader:()=>a(()=>import("./dbHelperMySQL.html-Cn4jjGpo.js"),__vite__mapDeps([110,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["helper"],o:!0,e:`<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class DbHelperMySQL
{
    //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.
    public static string connectionString = "server=localhost;database=table1;uid=root;pwd=123456";

    #region 最大值

    /// &lt;summary&gt;
    /// 得到最大值
    /// &lt;/summary&gt;
    /// &lt;param name="FieldName"&gt;字段名&lt;/param&gt;
    /// &lt;param name="TableName"&gt;表名字&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static int GetMaxID(string FieldName, string TableName)
    {
        string strsql = "select max(" + FieldName + ")+1 from " + TableName;
        object obj = GetSingle(strsql);
        if (obj == null)
        {
            return 1;
        }
        else
        {
            return int.Parse(obj.ToString());
        }
    }

    #endregion

    #region 是否存在

    /// &lt;summary&gt;
    /// 是否存在
    /// &lt;/summary&gt;
    /// &lt;param name="strSql"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static bool Exists(string strSql)
    {
        object obj = GetSingle(strSql);
        int cmdresult;
        if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))
        {
            cmdresult = 0;
        }
        else
        {
            cmdresult = int.Parse(obj.ToString());
        }

        return cmdresult != 0;
    }

    /// &lt;summary&gt;
    /// 是否存在（基于MySqlParameter）
    /// &lt;/summary&gt;
    /// &lt;param name="strSql"&gt;&lt;/param&gt;
    /// &lt;param name="cmdParms"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static bool Exists(string strSql, params MySqlParameter[] cmdParms)
    {
        object obj = GetSingle(strSql, cmdParms);
        int cmdresult;
        if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))
        {
            cmdresult = 0;
        }
        else
        {
            cmdresult = int.Parse(obj.ToString());
        }

        return cmdresult != 0;
    }

    #endregion

    #region 增删改

    /// &lt;summary&gt;
    /// 返回影响的记录数
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;SQL语句&lt;/param&gt;
    /// &lt;returns&gt;影响的记录数&lt;/returns&gt;
    public static int ExecuteSql(string SQLString)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            using (MySqlCommand cmd = new MySqlCommand(SQLString, connection))
            {
                try
                {
                    connection.Open();
                    return cmd.ExecuteNonQuery();
                }
                catch (MySqlException e)
                {
                    connection.Close();
                    throw e;
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// 返回受影响行数
    /// &lt;/summary&gt;
    /// &lt;param name="sql"&gt;sql&lt;/param&gt;
    /// &lt;param name="times"&gt;超时时间&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static int ExecuteSqlByTime(string sql, int times)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            using (MySqlCommand cmd = new MySqlCommand(sql, connection))
            {
                try
                {
                    connection.Open();
                    cmd.CommandTimeout = times;
                    int rows = cmd.ExecuteNonQuery();
                    return rows;
                }
                catch (MySql.Data.MySqlClient.MySqlException e)
                {
                    connection.Close();
                    throw e;
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// 返回受影响行数
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;strsql&lt;/param&gt;
    /// &lt;param name="cmdParms"&gt;参数&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static int ExecuteSql(string SQLString, params MySqlParameter[] cmdParms)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            if (connection.State == ConnectionState.Closed)
            {
                connection.Open();
            }

            using (MySqlCommand cmd = new MySqlCommand(SQLString, connection))
            {
                if (cmdParms != null)
                {
                    cmd.Parameters.AddRange(cmdParms);
                }

                try
                {
                    return Convert.ToInt32(cmd.ExecuteNonQuery());
                }
                catch (Exception)
                {
                    return 0;
                }
            }
        }
    }

    #endregion

    #region 执行多条SQL语句

    /// &lt;summary&gt;
    /// 执行多条SQL语句，实现数据库事务。
    /// &lt;/summary&gt;
    /// &lt;param name="SQLStringList"&gt;多条SQL语句&lt;/param&gt;
    public static int ExecuteSqlTran(List&lt;String&gt; SQLStringList)
    {
        using (MySqlConnection conn = new MySqlConnection(connectionString))
        {
            conn.Open();
            MySqlCommand cmd = new MySqlCommand();
            cmd.Connection = conn;
            MySqlTransaction tx = conn.BeginTransaction();
            cmd.Transaction = tx;
            try
            {
                int count = 0;
                for (int n = 0; n &lt; SQLStringList.Count; n++)
                {
                    string strsql = SQLStringList[n];
                    if (strsql.Trim().Length &gt; 1)
                    {
                        cmd.CommandText = strsql;
                        count += cmd.ExecuteNonQuery();
                    }
                }

                tx.Commit();
                return count;
            }
            catch
            {
                tx.Rollback();
                return 0;
            }
        }
    }

    #endregion

    #region 首行首列

    /// &lt;summary&gt;
    /// 首行首列
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;计算查询结果语句&lt;/param&gt;
    /// &lt;returns&gt;查询结果（object）&lt;/returns&gt;
    public static object GetSingle(string SQLString)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            using (MySqlCommand cmd = new MySqlCommand(SQLString, connection))
            {
                try
                {
                    connection.Open();
                    object obj = cmd.ExecuteScalar();
                    if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))
                    {
                        return null;
                    }
                    else
                    {
                        return obj;
                    }
                }
                catch (MySql.Data.MySqlClient.MySqlException e)
                {
                    connection.Close();
                    throw e;
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// 首行首列
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;sql语句&lt;/param&gt;
    /// &lt;param name="Times"&gt;过期时间&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static object GetSingle(string SQLString, int Times)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            using (MySqlCommand cmd = new MySqlCommand(SQLString, connection))
            {
                try
                {
                    connection.Open();
                    cmd.CommandTimeout = Times;
                    object obj = cmd.ExecuteScalar();
                    if (Equals(obj, null) || (Equals(obj, DBNull.Value)))
                    {
                        return null;
                    }
                    else
                    {
                        return obj;
                    }
                }
                catch (MySqlException e)
                {
                    connection.Close();
                    throw e;
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// 首行首列
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;strsql&lt;/param&gt;
    /// &lt;param name="cmdParms"&gt;参数&lt;/param&gt;
    /// &lt;returns&gt;首行首列&lt;/returns&gt;
    public static object GetSingle(string SQLString, params MySqlParameter[] cmdParms)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            using (MySqlCommand cmd = new MySqlCommand())
            {
                try
                {
                    PrepareCommand(cmd, connection, null, SQLString, cmdParms);
                    object obj = cmd.ExecuteScalar();
                    cmd.Parameters.Clear();
                    if ((Equals(obj, null)) || (Equals(obj, DBNull.Value)))
                    {
                        return null;
                    }
                    else
                    {
                        return obj;
                    }
                }
                catch (MySqlException e)
                {
                    throw e;
                }
            }
        }
    }

    #endregion

    #region 查询

    /// &lt;summary&gt;
    /// 执行查询语句，返回DataSet
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;查询语句&lt;/param&gt;
    /// &lt;returns&gt;DataSet&lt;/returns&gt;
    public static DataSet Query(string SQLString)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            DataSet ds = new DataSet();
            try
            {
                connection.Open();
                MySqlDataAdapter command = new MySqlDataAdapter(SQLString, connection);
                command.Fill(ds, "ds");
            }
            catch (MySqlException ex)
            {
                throw new Exception(ex.Message);
            }

            return ds;
        }
    }

    /// &lt;summary&gt;
    /// 执行查询语句，返回DataSet
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;sql语句&lt;/param&gt;
    /// &lt;param name="Times"&gt;过期时间&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static DataSet Query(string SQLString, int Times)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            DataSet ds = new DataSet();
            try
            {
                connection.Open();
                MySqlDataAdapter command = new MySqlDataAdapter(SQLString, connection);
                command.SelectCommand.CommandTimeout = Times;
                command.Fill(ds, "ds");
            }
            catch (MySqlException ex)
            {
                throw new Exception(ex.Message);
            }

            return ds;
        }
    }

    /// &lt;summary&gt;
    /// 执行查询语句，返回DataSet
    /// &lt;/summary&gt;
    /// &lt;param name="SQLString"&gt;strsql&lt;/param&gt;
    /// &lt;param name="cmdParms"&gt;参数&lt;/param&gt;
    /// &lt;returns&gt;返回DataSet&lt;/returns&gt;
    public static DataSet GetData(string SQLString, params MySqlParameter[] cmdParms)
    {
        using (MySqlConnection connection = new MySqlConnection(connectionString))
        {
            MySqlCommand cmd = new MySqlCommand();
            PrepareCommand(cmd, connection, null, SQLString, cmdParms);
            using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
            {
                DataSet ds = new DataSet();
                try
                {
                    da.Fill(ds);
                    cmd.Parameters.Clear();
                }
                catch (MySqlException ex)
                {
                    throw new Exception(ex.Message);
                }

                return ds;
            }
        }
    }

    #endregion

    #region 执行存储过程

    /// &lt;summary&gt;
    /// 执行存储过程
    /// &lt;/summary&gt;
    /// &lt;param name="ProcName"&gt;存储过程名称&lt;/param&gt;
    /// &lt;param name="parm"&gt;参数&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static MySqlDataReader GetDataTableByProc(string ProcName, params MySqlParameter[] parm)
    {
        MySqlConnection conn = new MySqlConnection(connectionString);
        using (MySqlCommand cmd = new MySqlCommand(ProcName, conn))
        {
            if (conn.State == ConnectionState.Closed)
            {
                conn.Open();
            }

            if (parm != null)
            {
                cmd.Parameters.AddRange(parm);
            }

            cmd.CommandType = CommandType.StoredProcedure;
            return cmd.ExecuteReader(CommandBehavior.CloseConnection);
        }
    }

    #endregion

    #region 扩展

    /// &lt;summary&gt;
    /// 执行sql语句
    /// &lt;/summary&gt;
    private static void PrepareCommand(MySqlCommand cmd, MySqlConnection conn, MySqlTransaction trans,
        string cmdText, MySqlParameter[] cmdParms)
    {
        if (conn.State != ConnectionState.Open)
            conn.Open();
        cmd.Connection = conn;
        cmd.CommandText = cmdText;
        if (trans != null)
            cmd.Transaction = trans;
        cmd.CommandType = CommandType.Text; //cmdType;
        if (cmdParms != null)
        {
            foreach (MySqlParameter parameter in cmdParms)
            {
                if ((parameter.Direction == ParameterDirection.InputOutput ||
                        parameter.Direction == ParameterDirection.Input) &amp;&amp;
                    (parameter.Value == null))
                {
                    parameter.Value = DBNull.Value;
                }

                cmd.Parameters.Add(parameter);
            }
        }
    }

    /// &lt;summary&gt;
    /// 执行多条SQL语句，实现数据库事务。
    /// &lt;/summary&gt;
    /// &lt;param name="SQLStringList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）&lt;/param&gt;
    public static void ExecuteSqlTran(Hashtable SQLStringList)
    {
        using (MySqlConnection conn = new MySqlConnection(connectionString))
        {
            conn.Open();
            using (MySqlTransaction trans = conn.BeginTransaction())
            {
                MySqlCommand cmd = new MySqlCommand();
                try
                {
                    //循环
                    foreach (DictionaryEntry myDE in SQLStringList)
                    {
                        string cmdText = myDE.Key.ToString();
                        MySqlParameter[] cmdParms = (MySqlParameter[])myDE.Value;
                        PrepareCommand(cmd, conn, trans, cmdText, cmdParms);
                        int val = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }
    }

    /// &lt;summary&gt;
    /// 执行多条SQL语句，实现数据库事务。
    /// &lt;/summary&gt;
    /// &lt;param name="SQLStringList"&gt;SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）&lt;/param&gt;
    public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)
    {
        using (MySqlConnection conn = new MySqlConnection(connectionString))
        {
            conn.Open();
            using (MySqlTransaction trans = conn.BeginTransaction())
            {
                MySqlCommand cmd = new MySqlCommand();
                try
                {
                    int indentity = 0;
                    //循环
                    foreach (DictionaryEntry myDE in SQLStringList)
                    {
                        string cmdText = myDE.Key.ToString();
                        MySqlParameter[] cmdParms = (MySqlParameter[])myDE.Value;
                        foreach (MySqlParameter q in cmdParms)
                        {
                            if (q.Direction == ParameterDirection.InputOutput)
                            {
                                q.Value = indentity;
                            }
                        }

                        PrepareCommand(cmd, conn, trans, cmdText, cmdParms);
                        int val = cmd.ExecuteNonQuery();
                        foreach (MySqlParameter q in cmdParms)
                        {
                            if (q.Direction == ParameterDirection.Output)
                            {
                                indentity = Convert.ToInt32(q.Value);
                            }
                        }

                        cmd.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch
                {
                    trans.Rollback();
                    throw;
                }
            }
        }
    }

    #region 查询 * ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )

    /// &lt;summary&gt;
    /// MySqlDataReader查询 * ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
    /// &lt;/summary&gt;
    /// &lt;param name="strSQL"&gt;查询语句&lt;/param&gt;
    /// &lt;returns&gt;MySqlDataReader&lt;/returns&gt;
    public static MySqlDataReader ExecuteReader(string SQLString, params MySqlParameter[] cmdParms)
    {
        MySqlDataReader sqldata = null;
        MySqlConnection connection = new MySqlConnection(connectionString);
        MySqlCommand cmd = new MySqlCommand();
        try
        {
            PrepareCommand(cmd, connection, null, SQLString, cmdParms);
            MySqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            cmd.Parameters.Clear();
            sqldata = myReader;
        }
        catch (MySqlException)
        {
            sqldata = null;
        }

        return sqldata;
    }

    /// &lt;summary&gt;
    /// 执行查询语句，返回MySqlDataReader ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
    /// &lt;/summary&gt;
    /// &lt;param name="strSql"&gt;查询语句&lt;/param&gt;
    /// &lt;returns&gt;MySqlDataReader&lt;/returns&gt;
    public static MySqlDataReader ExecuteReader(string strSql)
    {
        var connection = new MySqlConnection(connectionString);
        var cmd = new MySqlCommand(strSql, connection);
        try
        {
            connection.Open();
            var myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            return myReader;
        }
        catch (MySql.Data.MySqlClient.MySqlException e)
        {
            throw e;
        }
    }

    #endregion

    /// &lt;summary&gt;
    /// 执行带一个存储过程参数的的SQL语句。
    /// &lt;/summary&gt;
    /// &lt;param name="sqlString"&gt;SQL语句&lt;/param&gt;
    /// &lt;param name="content"&gt;参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加&lt;/param&gt;
    /// &lt;returns&gt;影响的记录数&lt;/returns&gt;
    public static int ExecuteSql(string sqlString, string content)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var cmd = new MySqlCommand(sqlString, connection);
            var myParameter = new MySqlParameter("@content", SqlDbType.NText) { Value = content };
            cmd.Parameters.Add(myParameter);
            try
            {
                connection.Open();
                var rows = cmd.ExecuteNonQuery();
                return rows;
            }
            catch (MySqlException e)
            {
                throw e;
            }
            finally
            {
                cmd.Dispose();
                connection.Close();
            }
        }
    }

    /// &lt;summary&gt;
    /// 执行带一个存储过程参数的的SQL语句。
    /// &lt;/summary&gt;
    /// &lt;param name="sqlString"&gt;SQL语句&lt;/param&gt;
    /// &lt;param name="content"&gt;参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加&lt;/param&gt;
    /// &lt;returns&gt;影响的记录数&lt;/returns&gt;
    public static object ExecuteSqlGet(string sqlString, string content)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var cmd = new MySqlCommand(sqlString, connection);
            var myParameter = new MySqlParameter("@content", SqlDbType.NText) { Value = content };
            cmd.Parameters.Add(myParameter);
            try
            {
                connection.Open();
                var obj = cmd.ExecuteScalar();
                if ((object.Equals(obj, null)) || (object.Equals(obj, DBNull.Value)))
                {
                    return null;
                }
                else
                {
                    return obj;
                }
            }
            catch (MySqlException e)
            {
                throw e;
            }
            finally
            {
                cmd.Dispose();
                connection.Close();
            }
        }
    }

    /// &lt;summary&gt;
    /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
    /// &lt;/summary&gt;
    /// &lt;param name="strSql"&gt;SQL语句&lt;/param&gt;
    /// &lt;param name="fs"&gt;图像字节,数据库的字段类型为image的情况&lt;/param&gt;
    /// &lt;returns&gt;影响的记录数&lt;/returns&gt;
    public static int ExecuteSqlInsertImg(string strSql, byte[] fs)
    {
        using (var connection = new MySqlConnection(connectionString))
        {
            var cmd = new MySqlCommand(strSql, connection);
            var myParameter =
                new MySqlParameter("@fs", SqlDbType.Image) { Value = fs };
            cmd.Parameters.Add(myParameter);
            try
            {
                connection.Open();
                return cmd.ExecuteNonQuery();
            }
            catch (MySqlException e)
            {
                throw e;
            }
            finally
            {
                cmd.Dispose();
                connection.Close();
            }
        }
    }

    #endregion
}

</code></pre></div>`,r:{minutes:6.2,words:1860},t:"DbHelperMySQL",y:"a"}}],["/dataBase/mysql/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-BwBu3DP8.js"),__vite__mapDeps([111,1])),meta:{a:"azrng",d:1694736e6,l:"2023年9月15日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，属于 Oracle 旗下产品。</p>
<h2>查询过程</h2>
<ol>
<li>客户端发送一条查询语句到服务器；</li>
<li>服务器先查询缓存，如果命中缓存，则立即返回存储在缓存中的数据；</li>
<li>未命中缓存后，MySQL通过关键字将SQL语句进行解析，并生成一颗对应的解析树，MySQL解析器将使用MySQL语法进行验证和解析。例如，验证是否使用了错误的关键字，或者关键字的使用是否正确；</li>
<li>预处理是根据一些MySQL规则检查解析树是否合理，比如检查表和列是否存在，还会解析名字和别名，然后预处理器会验证权限；</li>
<li>根据执行计划查询执行引擎，调用API接口调用存储引擎来查询数据；</li>
<li>将结果返回客户端，并进行缓存；</li>
</ol>`,r:{minutes:1.98,words:593},t:"说明",y:"a"}}],["/dataBase/neo4j/",{loader:()=>a(()=>import("./index.html-Vl98wCV0.js"),__vite__mapDeps([112,1])),meta:{a:"azrng",d:17056224e5,l:"2024年1月19日",c:["dataBase"],g:["neo4j"],o:!0,e:`<h2>概述</h2>
<p>Neo4j是一种图形数据库管理系统，专门设计用于存储、检索和管理图形结构的数据。图形数据库采用图形模型来表示数据，其中节点表示实体，边表示实体之间的关系。Neo4j被广泛用于处理复杂的关联数据，如社交网络、推荐系统、网络安全分析等领域。</p>
<h2>主要特点和概念</h2>
<ol>
<li><strong>节点（Nodes）：</strong> 表示数据的实体，可以包含属性。节点用于存储实际数据。</li>
<li><strong>关系（Relationships）：</strong> 表示节点之间的连接。关系可以有类型，也可以包含属性。</li>
<li><strong>属性（Properties）：</strong> 节点和关系可以具有属性，用于存储有关它们自身的信息。</li>
<li><strong>图形查询语言（Cypher）：</strong> Neo4j使用Cypher查询语言，专门用于查询和操作图形数据。</li>
<li><strong>事务性操作：</strong> Neo4j支持原子事务，确保对图形数据的操作是原子性、一致性、隔离性和持久性的。</li>
<li><strong>索引和约束：</strong> 支持索引以提高查询性能，并且可以定义约束来确保数据的完整性。</li>
<li><strong>扩展性：</strong> Neo4j可以处理大规模图形数据，并具有水平和垂直扩展的能力。</li>
</ol>`,r:{minutes:1.36,words:407},t:"说明",y:"a"}}],["/dataBase/oracle/changyongshujuleixing.html",{loader:()=>a(()=>import("./changyongshujuleixing.html-By7M1Ue8.js"),__vite__mapDeps([113,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p><strong>INTEGER</strong>存储整数，整数不包括浮点数;它是一个整数数字，如：1、10、15
<strong>NUMBER</strong>，是以十进制格式进行存储的，它便于存储，但是在计算上，系统会自动的将它转换成为二进制进行运算的。它的定义方式是NUMBER(P，S)，P是精度，最大38位，S是刻度范围，可在-84...127间取值。例如：NUMBER(5，2)可以用来存储表示-999.99...999.99间的数值。P、S可以在定义是省略，例如：NUMBER(5)、NUMBER等;
<strong>CHAR</strong>，描述定长的字符串，如果实际值不够定义的长度，系统将以空格填充。它的声明方式如下CHAR(L)，L为字符串长度，缺省为1，作为变量最大32767个字符，作为数据存储在ORACLE8中最大为2000。
<strong>VARCHAR2</strong>(VARCHAR)，描述变长字符串。它的声明方式如下VARCHAR2(L)，L为字符串长度，没有缺省值，作为变量最大32767个字节，作为数据存储在ORACLE8中最大为4000。在多字节语言环境中，实际存储的字符个数可能小于L值，例如：当语言环境为中文(SIMPLIFIED CHINESE_CHINA.ZHS16GBK)时，一个VARCHAR2(200)的数据列可以保存200个英文字符或者100个汉字字符。
<strong>NCHAR、NVARCHAR2</strong>，国家字符集，与环境变量NLS指定的语言集密切相关，使用方法和CHAR、VARCHAR2相同。不过最大参数为NCHAR(2000)、NVARCHAR2(2000)
<strong>DATE</strong>唯一的一种日期类型--，用来存储时间信息，站用7个字节(从世纪到秒)
<strong>LOB</strong>（oracle8以前叫long）变量主要是用来存储大量数据的数据库字段，最大可以存储4G字节的内容，CLOB：存储单字节字符数据（如英文）NCLOB：用来存储定宽多字节字符数据（如汉字），BLOB：用来存储无结构的二进制数据（word、pdf文档）。</p>`,r:{minutes:1.7,words:510},t:"常用数据类型",y:"a"}}],["/dataBase/oracle/dblink.html",{loader:()=>a(()=>import("./dblink.html-d46WiouQ.js"),__vite__mapDeps([114,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>连接两个数据库使用
&nbsp;
&nbsp;
教程：<a href="https://www.cnblogs.com/hgnulb/p/10621635.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/hgnulb/p/10621635.html</a></p>
`,r:{minutes:.13,words:40},t:"Dblink",y:"a"}}],["/dataBase/oracle/hanshu.html",{loader:()=>a(()=>import("./hanshu.html-F8aY0Q3l.js"),__vite__mapDeps([115,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>查询</h2>
<h3>ROWNUM</h3>
<p>查询前多少条</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> rownum<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询前十条的语句：</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> rownum<span class="token operator">&lt;</span>X  

<span class="token comment">-- 分页</span>
<span class="token keyword">sql</span>语句进行分页
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>rownum r <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token string">" + strSql + "</span><span class="token punctuation">)</span> c <span class="token keyword">where</span> rownum<span class="token operator">&lt;=</span><span class="token string">" + (pageSize * pageIndex) + "</span><span class="token punctuation">)</span> t <span class="token keyword">where</span> r<span class="token operator">&gt;</span>" <span class="token operator">+</span> <span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.23,words:370},t:"函数",y:"a"}}],["/dataBase/oracle/jichucaozuo.html",{loader:()=>a(()=>import("./jichucaozuo.html-Br14HTz7.js"),__vite__mapDeps([116,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>连接</h2>
<ul>
<li>数据库安装完成后，后台管理网址：<a href="https://localhost:1158/em" target="_blank" rel="noopener noreferrer">https://localhost:1158/em</a>使用用户名sys，口令是自己设置的（123456），连接身份选择sysdba，然后可以进入。服务器安装后，默认有两个用户：sys权限最高的用户，相当于超级用户；system系统管理员，相当于高级用户；</li>
<li>可以在上面给予的那个网站上面新建表空间。新建表空间，实际就是新建个存储文件，这里写的是文件的名称。</li>
<li>新开一个项目，需要使用oracle去创建一个数据库，然后创建好的这个数据库是一个系统数据库，包含了许多系统的表，我们需要在这个系统数据库中创建用户，然后使用这个用户去连接，然后创建用户表</li>
</ul>`,r:{minutes:10.18,words:3053},t:"基础操作",y:"a"}}],["/dataBase/oracle/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-DTJ42-Tl.js"),__vite__mapDeps([117,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概念</h2>
<h3>Oracle11g的database&nbsp;和client的区别</h3>
<p>database&nbsp;是数据库，你安装到本机上，可以在本机上创建数据库。
client是客户端，你只能通过client连接上别人机器上的数据库。
&nbsp;
database&nbsp;包含client的功能
&nbsp;
&nbsp;
前者是安装在服务器上的（当然也可以装在你自己的机器上），后者是连接工具的支持文件。</p>
`,r:{minutes:.42,words:126},t:"说明",y:"a"}}],["/dataBase/postgresql/anzhuang.html",{loader:()=>a(()=>import("./anzhuang.html-BmYJJcVW.js"),__vite__mapDeps([118,1])),meta:{a:"azrng",d:16680384e5,l:"2022年11月10日",c:["dataBase"],g:["无"],o:!0,e:`<h2>docker</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">5432</span>:<span class="token number">5432</span> <span class="token comment">--name mypostgres -e POSTGRES_PASSWORD=123456 postgres</span>
</code></pre></div>`,r:{minutes:1.52,words:456},t:"安装",y:"a"}}],["/dataBase/postgresql/hanshu.html",{loader:()=>a(()=>import("./hanshu.html-Ci03W63T.js"),__vite__mapDeps([119,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>系统操作</h2>
<h3>pg_get_viewdef</h3>
<div class="language-plsql" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token comment">-- 获取指定视图的DDL语句</span>
<span class="token keyword">SELECT</span> pg_get_viewdef<span class="token punctuation">(</span><span class="token string">'orders.cr_order_merge_view'</span><span class="token operator">:</span><span class="token operator">:</span>regclass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:11.48,words:3443},t:"函数",y:"a"}}],["/dataBase/postgresql/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-CWn_SfzT.js"),__vite__mapDeps([120,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dataBase"],g:["base"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>遇到数据库关键字需要加双引号，比如select "model_id" from meta_data.model</p>
</div>
<h2>基本操作</h2>
<h3>登录</h3>
<p>psql命令连接方式</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 方式一</span>
psql postgres://username:password@host:port/dbname
<span class="token comment">## username：连接数据的用户名，默认值是postgres</span>
<span class="token comment">## password：密码，默认值是postgres</span>
<span class="token comment">## host：主机名，默认值是localhost</span>
<span class="token comment">## port：端口，默认值是5432</span>
<span class="token comment">## dbname：要连接的数据库名，默认值是postgres</span>

<span class="token comment">## 方式二</span>
psql <span class="token parameter variable">-U</span> username <span class="token parameter variable">-h</span> <span class="token function">hostname</span> <span class="token parameter variable">-p</span> port <span class="token parameter variable">-d</span> dbname
<span class="token comment">## -U username 用户名，默认值postgres</span>
<span class="token comment">## -h hostname 主机名，默认值localhost</span>
<span class="token comment">## -p port 端口号，默认值5432</span>
<span class="token comment">## -d dbname 要连接的数据库名，默认值postgres</span>
</code></pre></div>`,r:{minutes:14.67,words:4400},t:"基础知识",y:"a"}}],["/dataBase/postgresql/shouquan.html",{loader:()=>a(()=>import("./shouquan.html-EX5e3ncR.js"),__vite__mapDeps([121,1])),meta:{a:"azrng",d:16932672e5,l:"2023年8月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>授予库权限</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 授予指定用户指定库的权限</span>
<span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span> <span class="token keyword">create</span><span class="token punctuation">,</span> <span class="token keyword">temporary</span> <span class="token keyword">on</span> <span class="token keyword">database</span> <span class="token string">"data-plat"</span> <span class="token keyword">to</span> <span class="token string">"cdr_app"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.21,words:364},t:"授权",y:"a"}}],["/dataBase/postgresql/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-C2GlJRM9.js"),__vite__mapDeps([122,1])),meta:{a:"azrng",d:16932672e5,l:"2023年8月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>最先进的关系型数据库</p>
<h2>优缺点</h2>
<p>优点
性能、稳定性远强于mysql，功能也强大</p>
<p>缺点
对语法比较严格</p>
<h2>连接驱动</h2>
<h3>Npgsql</h3>
<p>官网地址：https://www.npgsql.org/index.html</p>
<h2>资料</h2>
<p>中文文档：<a href="http://www.postgres.cn/docs/12/" target="_blank" rel="noopener noreferrer">http://www.postgres.cn/docs/12/</a></p>`,r:{minutes:.29,words:87},t:"说明",y:"a"}}],["/dataBase/postgresql/shujukushiwu.html",{loader:()=>a(()=>import("./shujukushiwu.html-BtwI0Siy.js"),__vite__mapDeps([123,1])),meta:{a:"azrng",d:16932672e5,l:"2023年8月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>事务隔离级别</h2>
<h3>事务串行化</h3>
<h3>可重复读</h3>
<p>repeatable read：可重复读隔离级别下开启一个事务，这个事务在事务开启的时候申请到了一次快照，在这个事务的所有查询都是用这个快照，即使当前事务前的事务提交了修改操作，对当前事务中的查询也没有任何影响，读到的结果都是一样的。</p>
<h3>读已提交</h3>
<p>read committed：读一提交隔离级别下开启一个事务，这个事务之前的事务对它来说都是可见的(不包括活跃事务)，活跃事务中的活跃元组提交后对它来说是可见的。当活跃事务提交后，当前事务中的查询语句在执行前会先申请快照，就能查到那些活跃事务中修改的记录，而这个事务之后的事务对当前事务来说都是不可见的。
在此说下幻读：
当在一个活跃事务中插入记录并提交，而另一个事务删除了这条插入的记录并提交时，在当前事务中就看到了不同的结果，像是发生了幻觉，这叫幻读。</p>`,r:{minutes:1.16,words:347},t:"数据库事务",y:"a"}}],["/dataBase/postgresql/zhihangjihua.html",{loader:()=>a(()=>import("./zhihangjihua.html-B_qSZhRt.js"),__vite__mapDeps([124,1])),meta:{a:"azrng",d:16915392e5,l:"2023年8月9日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>每个sql语句都有自己的执行计划，通过explain指令获取执行计划。</p>
<p>analyse 对比 analyze：只是英式英语与美式英语的区别，功能上没有区别，资料：<a href="https://stackoverflow.com/questions/40943835/postgresql-analyse-vs-analyze" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/40943835/postgresql-analyse-vs-analyze</a></p>`,r:{minutes:2.47,words:741},t:"执行计划",y:"a"}}],["/dataBase/postgresql/zhuaiyizifu.html",{loader:()=>a(()=>import("./zhuaiyizifu.html-C9B_zXNN.js"),__vite__mapDeps([125,1])),meta:{a:"azrng",d:16915392e5,l:"2023年8月9日",c:["dataBase"],g:["无"],o:!0,e:`<h3>对单引号的两种转义方式</h3>
<p>在SQL标准中字符串是用单引号括起来的，而在PostgreSQL中遵守了该标准，双引号则是用来表示变量的，如果在字符串中需要使用到单引号，就需要对其进行转义。</p>
<h4>方式一：使用E和反斜杠进行转义</h4>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> E'\\'<span class="token number">233</span>'<span class="token punctuation">;</span> 
</code></pre></div>`,r:{minutes:.86,words:258},t:"转义字符",y:"a"}}],["/dataBase/redis/duolufuyong.html",{loader:()=>a(()=>import("./duolufuyong.html-CAo0wGIw.js"),__vite__mapDeps([126,1])),meta:{a:"azrng",d:16876512e5,l:"2023年6月25日",c:["dataBase"],g:["无"],o:!0,e:`<p>四种模式</p>
<p>evport</p>
<p>epoll</p>
<p>kqueue</p>
<p>select
<img src="/common/1614609511216-4bcce3d2-5125-4cb6-a1d3-2a29e23c275a.png" alt="image.png" loading="lazy"></p>
`,r:{minutes:.14,words:43},t:"多路复用",y:"a"}}],["/dataBase/redis/jichumingling.html",{loader:()=>a(()=>import("./jichumingling.html-DTxnz2Wz.js"),__vite__mapDeps([127,1])),meta:{a:"azrng",d:16901568e5,l:"2023年7月24日",c:["dataBase"],g:["无"],o:!0,e:`<h2>服务</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property">## 进入服务</span>
redis<span class="token operator">-</span>cli

<span class="token preprocessor property">## 读取所有配置项</span>
config <span class="token keyword">get</span> <span class="token operator">*</span>
</code></pre></div>`,r:{minutes:.22,words:67},t:"基础命令",y:"a"}}],["/dataBase/redis/quanwenjiansuo.html",{loader:()=>a(()=>import("./quanwenjiansuo.html-VFYYwd7t.js"),__vite__mapDeps([128,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Redis Search是一个Redis模块，它使用压缩的倒排索引来实现快速的索引和低内存占用。Redis Search可以对Redis数据进行精确短语匹配、模糊搜索、数值过滤、地理空间筛选等多种搜索功能。Redis Search还支持聚合、高亮、词干提取、拼写纠错等特性。
文档地址：<a href="https://redis.io/docs/interact/search-and-query/" target="_blank" rel="noopener noreferrer">https://redis.io/docs/interact/search-and-query/</a></p>`,r:{minutes:.59,words:176},t:"全文检索",y:"a"}}],["/dataBase/redis/",{loader:()=>a(()=>import("./index.html-CXQjdP7L.js"),__vite__mapDeps([129,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>Redis 是一个高性能的key-value内存数据库，全称为远程字典服务（Remote Dictionary  Server）。<a href="https://baike.baidu.com/item/NoSQL/8828247" target="_blank" rel="noopener noreferrer">NoSQL</a>(NoSQL = Not Only SQL )，意即“不仅仅是<a href="https://baike.baidu.com/item/SQL" target="_blank" rel="noopener noreferrer">SQL</a>泛指非关系型的数据库。键是区分大小写的。数据是保存在内存中，同时redis可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比memcached支持更多的数据结构(string,list列表[队列和栈],set[集合],sorted set[有序集合] hash(hash表))</p>`,r:{minutes:3.82,words:1146},t:"说明",y:"a"}}],["/dataBase/redis/redisfabudingyue.html",{loader:()=>a(()=>import("./redisfabudingyue.html-CgJGzUym.js"),__vite__mapDeps([130,1])),meta:{a:"azrng",d:16876512e5,l:"2023年6月25日",c:["dataBase"],g:["无"],o:!0,e:`<p>redis目前的订阅发布采用的是发送即忘策略，如果你的程序需要可靠性的事件通知，那么键空间通知可能就不适合你；当订阅事件的客户端断线时候，它就会丢失所有短线期间分给他的事件，并不能确保消息送达。</p>
<h2>事件类型</h2>
<p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>事件是用  __keyspace@DB__:KeyPattern 或者  __keyevent@DB__:OpsType 的格式来发布消息的。
DB表示在第几个库；KeyPattern则是表示需要监控的键模式（可以用通配符，如：__key*__:*）；OpsType则表示操作类型。因此，如果想要订阅特殊的Key上的事件，应该是订阅keyspace。
比如说，对 0 号数据库的键 mykey 执行 DEL 命令时， 系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令：
PUBLISH __keyspace@0__:sampleKey del
PUBLISH __keyevent@0__:del sampleKey
订阅第一个频道 __keyspace@0__:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件， 而订阅第二个频道 __keyevent@0__:del 则可以接收 0 号数据库中所有执行 del 命令的键。
</code></pre></div>`,r:{minutes:4.76,words:1428},t:"redis发布订阅",y:"a"}}],["/dataBase/redis/redisxiaoxiduilie.html",{loader:()=>a(()=>import("./redisxiaoxiduilie.html-CpJImVR1.js"),__vite__mapDeps([131,1])),meta:{a:"azrng",d:16282944e5,l:"2021年8月7日",c:["dataBase"],g:["无"],o:!0,e:`<p>一、消息队列是在消息传输过程汇总保存消息的容器。
为了解决类似于双十一或者其他时候，用户点击按钮访问数据库，并发了过大，超过系统最大负载能力而出现的问题。
通过消息队列，将短时间内高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务，改善网站系统的性能。</p>
`,r:{minutes:.5,words:149},t:"redis消息队列",y:"a"}}],["/dataBase/sqlite/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-C--l2yN3.js"),__vite__mapDeps([132,1])),meta:{a:"azrng",d:16645824e5,l:"2022年10月1日",c:["dataBase"],g:["无"],o:!0,e:`<h2>数据库</h2>
<h3>所有表</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> name
<span class="token keyword">from</span> sqlite_master
<span class="token keyword">where</span> <span class="token class-name">type</span> <span class="token operator">=</span> 'table'
order <span class="token keyword">by</span> name<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.39,words:118},t:"基础知识",y:"a"}}],["/dataBase/sqlite/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-BYUx9Wbl.js"),__vite__mapDeps([133,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。</p>
<h2>为什么使用</h2>
<p>不需要一个单独的服务器进程或操作的系统（无服务器的）。
SQLite 不需要配置，这意味着不需要安装或管理。
一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。
SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。
SQLite 是自给自足的，这意味着不需要任何外部的依赖。
SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。
SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。
SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。
SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</p>`,r:{minutes:1.48,words:444},t:"介绍",y:"a"}}],["/dataBase/sqlite/sqlitefts5.html",{loader:()=>a(()=>import("./sqlitefts5.html-Do71UBXk.js"),__vite__mapDeps([134,1])),meta:{a:"azrng",d:16916256e5,l:"2023年8月10日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>FTS5 是一个 SQLite 虚拟表模块，为数据库应用程序提供全文搜索功能。在最基本的形式中， 全文搜索引擎允许用户有效地搜索大型 包含一个或多个 搜索词。谷歌提供给万维网用户的搜索功能是全文搜索。 引擎，因为它允许用户搜索网络上包含的所有文档， 例如，术语“FTS5”。
文档：<a href="https://www.sqlite.org/fts5.html" target="_blank" rel="noopener noreferrer">https://www.sqlite.org/fts5.html</a></p>
`,r:{minutes:.47,words:140},t:"SQLiteFTS5",y:"a"}}],["/dataBase/sqlserver/dbhelper.html",{loader:()=>a(()=>import("./dbhelper.html-gpmiXVaK.js"),__vite__mapDeps([135,1])),meta:{a:"azrng",d:16408224e5,l:"2021年12月30日",c:["dataBase"],g:["无"],o:!0,e:`<p>操作</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>首行首列
public static object ExecuteScalar(string sql, params SqlParameter[] param)
        {
            using (SqlConnection con = new SqlConnection(conn))
            {
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                using (SqlCommand com = new SqlCommand(sql, con))
                {
                    if (param != null)
                    {
                        com.Parameters.AddRange(param);
                    }
                    return com.ExecuteScalar();
                }
            }
        }

查询
public static DataTable GetDate(string sql, params SqlParameter[] parm)
        {
            using (SqlConnection con = new SqlConnection(conn))
            {
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                SqlDataAdapter da = new SqlDataAdapter(sql, con);
                DataSet ds = new DataSet();
                if (parm != null)
                {
                    da.SelectCommand.Parameters.AddRange(parm);
                }
                da.Fill(ds);
                return ds.Tables[0];
            }

        }

受影响行数
 public static bool ExecuteNonQuery(string sql, params SqlParameter[] parm)
        {
            bool i = false;
            using (SqlConnection con = new SqlConnection(conn))
            {
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                using (SqlCommand com = new SqlCommand(sql, con))
                {
                    if (parm != null)
                    {
                        com.Parameters.AddRange(parm);
                    }
                    if (Convert.ToInt32(com.ExecuteNonQuery()) &gt; 0)
                    {
                        i = true;
                    }
                    return i;
                }
            }
        }

SqlDataReader 查询
  public static SqlDataReader DataReader(string sql, params SqlParameter[] parm)
        {
            SqlConnection con = new SqlConnection(conn);//此处不能使用using
            if (con.State == ConnectionState.Closed)
            {
                con.Open();
            }
            using (SqlCommand cmd = new SqlCommand(sql, con))
            {
                if (parm != null)
                {
                    cmd.Parameters.AddRange(parm);
                }
                return cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
        }
执行存储过程
  public static SqlDataReader DataReaderByProc(string procname, params SqlParameter[] parm)
        {
            SqlConnection con = new SqlConnection(conn);
            using (SqlCommand cmd = new SqlCommand(procname, con))
            {
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                if (parm != null)
                {
                    cmd.Parameters.AddRange(parm);
                }
                cmd.CommandType = CommandType.StoredProcedure;
                return cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
        }



</code></pre></div>`,r:{minutes:.79,words:238},t:"DBHelper",y:"a"}}],["/dataBase/sqlserver/dingshibeifenjihua.html",{loader:()=>a(()=>import("./dingshibeifenjihua.html-CKShcw_C.js"),__vite__mapDeps([136,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<p>执行备份计划时候失败
<img src="/common/1609036355543-ac8764ff-e690-4e8f-b0a5-a2bd6f1cf4e2.png" alt="image.png" loading="lazy">
需要打开服务器管理器=》工具=》计算机管理=》服务=》找到SQLSERVERAGENT代理 -&gt;&nbsp;启动
<img src="/common/1609036355537-18d0af0c-22c0-454f-b89d-21263720834f.png" alt="image.png" loading="lazy">
&nbsp;
然后设置成自动启动
<img src="/common/1609036355565-1c14ef9e-51a4-4974-8e71-efb26f6ed949.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.32,words:96},t:"定时备份计划",y:"a"}}],["/dataBase/sqlserver/issue.html",{loader:()=>a(()=>import("./issue.html-DdAA3XA5.js"),__vite__mapDeps([137,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>CPU占用高</h2>
<p>SQLSERVER排查CPU占用高的情况 - 马会东 - 博客园
<a href="https://www.cnblogs.com/duanweishi/p/13856924.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/duanweishi/p/13856924.html</a></p>
<h2>数据库显示为单个用户，无法操作的问题</h2>
<p>运行：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> master<span class="token punctuation">;</span>
GO
<span class="token keyword">DECLARE</span> <span class="token variable">@SQL</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token variable">@SQL</span><span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">SELECT</span> <span class="token variable">@SQL</span><span class="token operator">=</span><span class="token variable">@SQL</span><span class="token operator">+</span><span class="token string">'; KILL '</span><span class="token operator">+</span>RTRIM<span class="token punctuation">(</span>SPID<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sysprocesses
<span class="token keyword">WHERE</span> dbid<span class="token operator">=</span>DB_ID<span class="token punctuation">(</span><span class="token string">'DataBaseName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">EXEC</span><span class="token punctuation">(</span><span class="token variable">@SQL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
GO

<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> DataBaseName <span class="token keyword">SET</span> MULTI_USER<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.16,words:349},t:"问题",y:"a"}}],["/dataBase/sqlserver/",{loader:()=>a(()=>import("./index.html-BiTx7zLY.js"),__vite__mapDeps([138,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dataBase"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="http://www.oschina.net/question/267865_48311" target="_blank" rel="noopener noreferrer">11 个重要的数据库设计规则</a></p>
<p>SQL脚本进阶：<a href="https://www.cnblogs.com/edisonchou/p/3878135.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/edisonchou/p/3878135.html</a>、
事务存储过程触发器：<a href="https://www.cnblogs.com/edisonchou/p/3941749.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/edisonchou/p/3941749.html</a></p>`,r:{minutes:.36,words:109},t:"说明",y:"a"}}],["/dataBase/sqlserver/tazhan.html",{loader:()=>a(()=>import("./tazhan.html-Dewji2sc.js"),__vite__mapDeps([139,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>纵向分割与横向分割</h2>
<p><strong>1. 纵向分表</strong>
纵向分表是指将一个有20列的表根据列拆分成两个表一个表10列一个表11列，这样单个表的容量就会减少很多，可以提高查询的性能，并在一定程度上减少锁行，锁表带来的性能损耗。
纵向分表的原则是什么呢，应该怎样拆分呢？答案是根据业务逻辑的需要来拆分，对于一张表如果业务上分两次访问某一张表其中一部分数据，那么就可以根据每次访问列的不同来做拆分; 另外还可以根据列更新的频率来拆分，例如某些列每天要更新3次，有些列从创建开始基本上很少更新。
举例：
假定场景，我有一张用户表，这张表包含列：
ID, UserName, Password, RealName, Gender, Email, IsEmailValid, Birthday, Country, City, Address, Mobile, Phone, ZipCode, Hometown, OfficePhone, Company, Position, Industry, LatestLoginTime, LatestLoginIP, LoginTimes,OnlineMinutes
假定现在我们的登录出现了性能问题，用户登录经常出现数据库超时的现象。我们打算用拆表的方法解决这个问题。先看下涉及到登录的字段有：UserName,Password,LatestLoginTime,LatestLoginIP,LoginTimes；那么我们就可以以此为依据将原表拆分为：UserLogin和UserBase 两个表，后者包含除了登录信息的其他列信息；两张表都要包含主键ID。
<strong>2. 横向分区</strong>
横向分区是将表从行的角度拆分，例如将创建时间在05年之前的数据放在一个分区上，将05年到08年之间的数据放到另一个分区上，以此类推。横向分区所根据的列必须在聚集索引上，通常会根据时间，主键id等进行划分。
横向分区将数据划分为不同的区，在根据分区列条件进行查询时可以缩小查询的范围，从而提高查询的性能；另外如果数据库服务器有多个cpu，则可以通过并行操作获得更好的性能。
到底要根据那个列进行横向的分区和查询有关系，我们在建表的时候需要分析，会根据那个列进行查询。
举例：</p>`,r:{minutes:3.72,words:1115},t:"拓展",y:"a"}}],["/dataBase/zhongjianjian/sqlshenhechaxunpingtai.html",{loader:()=>a(()=>import("./sqlshenhechaxunpingtai.html-BGKH2ycS.js"),__vite__mapDeps([140,1])),meta:{a:"azrng",d:16758144e5,l:"2023年2月8日",c:["dataBase"],g:["无"],o:!0,e:`<h2>Archery</h2>
<p>仓库地址：<a href="https://gitee.com/rtttte/Archery" target="_blank" rel="noopener noreferrer">https://gitee.com/rtttte/Archery</a>
文档地址：<a href="https://archerydms.com/home/" target="_blank" rel="noopener noreferrer">https://archerydms.com/home/</a></p>
`,r:{minutes:.16,words:48},t:"SQL审核查询平台",y:"a"}}],["/cloud/ciAndCd/flubucore.html",{loader:()=>a(()=>import("./flubucore.html-BR0GU4Lp.js"),__vite__mapDeps([141,1])),meta:{a:"azrng",d:16219008e5,l:"2021年5月25日",c:["cloud"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p><a href="https://github.com/dotnetcore/FlubuCore" target="_blank" rel="noopener noreferrer">FlubuCore</a>&nbsp;是一个跨平台的自动化构建和部署系统，用于使用C#代码构建项目和执行部署脚本。</p>
<blockquote>
<p>官网：<a href="https://flubucore-zh.dotnetcore.xyz/" target="_blank" rel="noopener noreferrer">https://flubucore-zh.dotnetcore.xyz/</a></p>
</blockquote>`,r:{minutes:.26,words:77},t:"Flubucore",y:"a"}}],["/cloud/ciAndCd/gitliuchenghedevopsliucheng.html",{loader:()=>a(()=>import("./gitliuchenghedevopsliucheng.html-BaPl0aIQ.js"),__vite__mapDeps([142,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["cloud"],g:["无"],o:!0,e:`<h2>图文展示</h2>
<figure><img src="/common/1615515154454-76614852-a92b-4560-b816-f498ad0fb749.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>详细流程</h2>
<h3>1. 开发阶段</h3>
<ul>
<li>开发人员从develop切出feature分支，然后经过项目经理梳理本次需求后开发人员在本分支上进行开发，自测后合并到develop分支</li>
<li>此时会打出ImageTag:develop的镜像，通过<strong>自动部署到集成测试环境(开发环境)</strong></li>
<li>开发人员应该关注集成测试环境</li>
</ul>`,r:{minutes:4.53,words:1358},t:"Git流程和DevOps流程",y:"a"}}],["/cloud/ciAndCd/",{loader:()=>a(()=>import("./index.html-ep5ldXKW.js"),__vite__mapDeps([143,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>描述</h2>
<h3>持续集成**（Continuous Integration ，CI）**</h3>
<p>传统的方式是每个开发人员在完成手头的工作后，然后在项目为生阶段进行集成。
持续集成是团队的开发人员经常集成他们的工作，通常每个人员每天至少提交一次代码，这也就意味着每天可能发生多次继承。每次继承都是通过自动化的构建来验证，从而尽快的发现集成的错误，也可以大大减少集成的问题。
代码集成以后，当所有的单元测试通过，那么开发人员就可以得到一个绿色的构建(代表构建成功了)，这表明他们已经成功地集成在一起了，代码正按照测试预期在工作。尽管集成代码代表能够一起工作了，但是这个时候并不能进行生产环境的部署，因为他没有在类似于生产环境中的测试。</p>`,r:{minutes:2.1,words:630},t:"说明",y:"a"}}],["/cloud/ciAndCd/teamcity.html",{loader:()=>a(()=>import("./teamcity.html-JA4rU1AB.js"),__vite__mapDeps([144,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>是一个款强大的持续集成工作，包括服务端和客户端。提供了一系列特性可以让团队快速实现持续集成：IDE工具集成、各种消息通知、各种报表、项目管理、分布式的编译等等。</p>
<p>是一个商业软件</p>
`,r:{minutes:.35,words:104},t:"TeamCity",y:"a"}}],["/cloud/container/",{loader:()=>a(()=>import("./index.html-KO_tud1w.js"),__vite__mapDeps([145,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>容器的本质是一个进程，进程与进程之前的相互隔离就造成了容器与容器的相互不影响的特性。将集装箱的思想应用到了软件的打包和部署上，为不同的代码提供了基于容器标准化运输系统。</p>
<p>思想：
集装箱：会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到
这个集装箱就可以了
标准化：1.运输的标准化2.命令的标准化3.提供的rrest的api
隔离化：docker在运行集装箱内的内容时候，会在linux的内核中，单独的开辟一片</p>
<p></p>
<p>比较出名的有： Containerd 和 Podman 和Docker</p>
<h2>镜像仓库</h2>`,r:{minutes:2.69,words:808},t:"容器",y:"a"}}],["/cloud/istio/",{loader:()=>a(()=>import("./index.html-DEOegyXQ.js"),__vite__mapDeps([146,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>中文文档：<a href="https://istio.io/latest/zh/docs/" target="_blank" rel="noopener noreferrer">https://istio.io/latest/zh/docs/</a></p>
<h2>资料</h2>
<p>工良最新出品：Istio 入门教程：<a href="https://istio.whuanle.cn" target="_blank" rel="noopener noreferrer">https://istio.whuanle.cn</a></p>
`,r:{minutes:.18,words:53},t:"说明",y:"a"}}],["/cloud/k3s/install.html",{loader:()=>a(()=>import("./install.html-9r45GPsd.js"),__vite__mapDeps([147,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在Ubuntu服务器部署K3s，集群有问题，要搭建集群不适合看此文章</p>
</div>
<h2>K3S安装</h2>
<p>可以通过下面的命令进行安装k3s（执行官方的安装脚本）</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 默认地址</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://get.k3s.io <span class="token operator">|</span> <span class="token function">sh</span> -

<span class="token comment"># 国内镜像加速地址，安装特定版本</span>
<span class="token function">curl</span> <span class="token parameter variable">-sfL</span> https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1  <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token function">sh</span> -

<span class="token comment"># 安装并设置默认镜像源地址，安装特定版本</span>
<span class="token function">curl</span> –sfL <span class="token punctuation">\\</span>
     https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh <span class="token operator">|</span> <span class="token punctuation">\\</span>
     <span class="token assign-left variable">INSTALL_K3S_VERSION</span><span class="token operator">=</span>v1.25.3+k3s1 <span class="token assign-left variable">INSTALL_K3S_MIRROR</span><span class="token operator">=</span>cn <span class="token function">sh</span> <span class="token parameter variable">-s</span> - <span class="token punctuation">\\</span>
     --system-default-registry <span class="token string">"registry.cn-hangzhou.aliyuncs.com"</span>
</code></pre></div>`,r:{minutes:6.15,words:1846},t:"安装以及配置",y:"a"}}],["/cloud/k3s/k3sDeployKuboard.html",{loader:()=>a(()=>import("./k3sDeployKuboard.html-BEH_DDUO.js"),__vite__mapDeps([148,1])),meta:{a:"token-go",d:16911936e5,l:"2023年8月5日",c:["dotNet"],g:["k3s"],o:!1,e:`<h2>AutoK3s</h2>
<p>AutoK3s 是一款 K3s 集群自动化部署和管理工具，可以方便开发者自助管理多云环境中的 K3s 集群。可以用来安装K3s，也可以通过管理K3s集群。</p>
<p>文档地址：https://docs.rancher.cn/docs/k3s/autok3s/_index</p>
<p>以下是一些 autok3s 提供的功能和优势：</p>
<ol>
<li>一键式集群创建：autok3s 提供了一个简洁的命令行接口，可以通过指定一些参数和选项，快速创建一个全新的 Kubernetes 集群。</li>
<li>多云服务提供商支持：autok3s 支持多种云服务提供商，如 AWS、Azure、阿里云等，可以方便地在这些云平台上创建和管理集群。</li>
<li>简化配置和管理：autok3s 提供了一些默认配置和自动化选项，可以减少手动操作和配置的复杂性。</li>
<li>集群扩展和升级：通过 autok3s，你可以通过简单的命令来扩展集群规模或者升级到新版本，而无需手动执行复杂的操作。</li>
<li>集成其他工具：autok3s 可以与其他工具和服务进行集成，如 Traefik、Metallb 等，以增强集群的功能和性能。</li>
</ol>`,r:{minutes:3.03,words:908},t:"k3s其他内容安装",y:"a"}}],["/cloud/k3s/",{loader:()=>a(()=>import("./index.html-CPNMSjja.js"),__vite__mapDeps([149,1])),meta:{a:"azrng",d:16654464e5,l:"2022年10月11日",c:["cloud"],g:["k3s"],o:!1,e:`<h2>概述</h2>
<p>k3s是经过CNCF认证的由Rancher公司开发维护的一个<strong>轻量级的 Kubernetes 发行版</strong>，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，<code>K3s 就是阉割版 K8s</code>，消耗资源极少。它主要用于<strong>边缘计算、物联网</strong>等场景。</p>
<p>官网文档：https://docs.k3s.io/zh/</p>
<p>中文网站：http://docs.rancher.cn/docs/k3s/quick-start/_index/</p>`,r:{minutes:4.47,words:1342},t:"说明",y:"a"}}],["/cloud/k8s/bushuwenjian.html",{loader:()=>a(()=>import("./bushuwenjian.html-C0hIlENX.js"),__vite__mapDeps([150,1])),meta:{a:"azrng",d:1678752e6,l:"2023年3月14日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>使用yaml文件管理将容器部署到k8s的过程。</p>
<h2>操作</h2>
<h3>创建文件</h3>
<p>创建backend-deploy.yml文件并添加下面的内容</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pizzabackend
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> pizzabackend
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pizzabackend
        <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>YOUR DOCKER USER NAME<span class="token punctuation">]</span>/pizzabackend<span class="token punctuation">:</span>latest
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ASPNETCORE_URLS
          <span class="token key atrule">value</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//<span class="token important">*:</span><span class="token number">80</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> pizzabackend
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> pizzabackend
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP
  <span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> pizzabackend
</code></pre></div>`,r:{minutes:2.67,words:802},t:"部署文件",y:"a"}}],["/cloud/k8s/changyonggainian.html",{loader:()=>a(()=>import("./changyonggainian.html-hkU8wmEI.js"),__vite__mapDeps([151,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["cloud"],g:["无"],o:!0,e:`<p>Kubernetes发展非常迅速，已经成为容器编排领域的领导者，接下来我们将讲解Kubernetes中涉及到的一些主要概念。</p>
<h2><strong>1、Pod</strong></h2>
<p>Pod是一组紧密关联的容器集合，支持多个容器在一个Pod中共享网络和文件系统，可以通过进程间通信和文件共享这种简单高效的方式完成服务，是Kubernetes调度的基本单位。Pod的设计理念是每个Pod都有一个唯一的IP。
Pod具有如下特征：</p>
<ul>
<li>包含多个共享IPC、Network和UTC namespace的容器，可直接通过localhost通信</li>
<li>所有Pod内容器都可以访问共享的Volume，可以访问共享数据</li>
<li>优雅终止:Pod删除的时候先给其内的进程发送SIGTERM，等待一段时间(grace period)后才强制停止依然还在运行的进程</li>
<li>特权容器(通过SecurityContext配置)具有改变系统配置的权限(在网络插件中大量应用)</li>
<li>支持三种重启策略（restartPolicy），分别是：Always、OnFailure、Never</li>
<li>支持三种镜像拉取策略（imagePullPolicy），分别是：Always、Never、IfNotPresent</li>
<li>资源限制，Kubernetes通过CGroup限制容器的CPU以及内存等资源，可以设置request以及limit值</li>
<li>健康检查，提供两种健康检查探针，分别是livenessProbe和redinessProbe，前者用于探测容器是否存活，如果探测失败，则根据重启策略进行重启操作，后者用于检查容器状态是否正常，如果检查容器状态不正常，则请求不会到达该Pod</li>
<li>Init container在所有容器运行之前执行，常用来初始化配置</li>
<li>容器生命周期钩子函数，用于监听容器生命周期的特定事件，并在事件发生时执行已注册的回调函数，支持两种钩子函数：postStart和preStop，前者是在容器启动后执行，后者是在容器停止前执行</li>
</ul>`,r:{minutes:13.62,words:4086},t:"常用概念",y:"a"}}],["/cloud/k8s/fuwufaxian.html",{loader:()=>a(()=>import("./fuwufaxian.html-DXSPWTkB.js"),__vite__mapDeps([152,1])),meta:{a:"杰哥的IT之旅",d:1688256e6,l:"2023年7月2日",c:["cloud","Kubernetes"],g:["服务发现"],o:!1,e:`<h2>K8S 服务发现之旅</h2>
<p>Kubernetes 服务发现是一个经常让我产生困惑的主题之一。本文分为两个部分：</p>
<ul>
<li>网络方面的背景知识</li>
<li>深入了解 Kubernetes 服务发现</li>
</ul>
<p>要了解服务发现，首先要了解背后的网络知识。这部分内容相对浅显，如果读者熟知这一部分，完全可以跳过，直接阅读服务发现部分。
开始之前还有一个需要提醒的事情就是，为了详细描述这一过程，本文略长。</p>
<h2>K8S 网络基础</h2>
<p>要开始服务发现的探索之前，需要理解以下内容：</p>
<ul>
<li>Kubernetes 应用运行在容器之中，容器处于 Pod 之内。</li>
<li>每个 Pod 都会附着在同一个大的扁平的 IP 网络之中，被称为 Pod 网络（通常是 VXLAN 叠加网络）。</li>
<li>每个 Pod 都有自己的唯一的 IP 地址，这个 IP 地址在 Pod 网络中是可路由的。</li>
</ul>`,r:{minutes:10.13,words:3040},t:"服务发现",y:"a"}}],["/cloud/k8s/gitlabhek8szidonghuafabu.html",{loader:()=>a(()=>import("./gitlabhek8szidonghuafabu.html-VAb903BR.js"),__vite__mapDeps([153,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>前置条件</h2>
<ul>
<li>一台Linux服务器，安装好Docker</li>
<li>一个K8s集群环境</li>
<li>一个Gitlab仓库，可以自己搭建或者直接使用官方仓库(中文版gitlab:<a href="https://jihulab.com/" target="_blank" rel="noopener noreferrer">https://jihulab.com/</a>)</li>
<li>一个镜像仓库，用于存储docker镜像，这里我用的华为的镜像仓库 （<a href="https://www.huaweicloud.com/product/swr.html" target="_blank" rel="noopener noreferrer">https://www.huaweicloud.com/product/swr.html</a>）</li>
<li>本文的操作基于<a href="https://jihulab.com/" target="_blank" rel="noopener noreferrer">https://jihulab.com/</a> 仓库进行</li>
</ul>`,r:{minutes:5.34,words:1602},t:"Gitlab和K8S自动化发布",y:"a"}}],["/cloud/k8s/k9s.html",{loader:()=>a(()=>import("./k9s.html-DYmO_ix5.js"),__vite__mapDeps([154,1])),meta:{t:"k9s"}}],["/cloud/k8s/",{loader:()=>a(()=>import("./index.html-9IRt5Xi5.js"),__vite__mapDeps([155,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Kubernetes 是一种可移植且可扩展的开放源代码平台，用于管理和编排容器化工作负载。</p>
<ul>
<li>容器的自行修复(声明性配置管理)。 例如，重启失败的容器或替换容器。</li>
<li>根据需要动态地纵向扩展或纵向缩减部署的容器计数。</li>
<li>容器的自动滚动更新和回滚。</li>
<li>管理存储。</li>
<li>管理网络流量。</li>
<li>存储并管理敏感信息，如用户名和密码。</li>
</ul>
<h2>管理工具</h2>
<p>k8slens：https://k8slens.dev/</p>
<h2>组件</h2>
<p><a href="https://mp.weixin.qq.com/s/wVJ0adSL1GuQIz8Q98_PaQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/wVJ0adSL1GuQIz8Q98_PaQ</a> | 使用 C## 开发 Kubernetes 组件，获取集群资源信息
本地保存地址：开发\\docs\\使用 C## 开发 Kubernetes 组件，获取集群资源信息.png</p>`,r:{minutes:1.2,words:361},t:"说明",y:"a"}}],["/cloud/k8s/wanglaotongxin.html",{loader:()=>a(()=>import("./wanglaotongxin.html-CGVXAEcP.js"),__vite__mapDeps([156,1])),meta:{a:"云端密码",d:1688256e6,l:"2023年7月2日",c:["cloud"],g:["无"],o:!1,e:`<h2>名词解释</h2>
<p>1、网络的命名空间：Linux 在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命名空间中，彼此间无法通信；Docker 利用这一特性，实现不容器间的网络隔离。
2、Veth 设备对：也叫虚拟网络接口对。Veth设备对的引入是为了实现在不同网络命名空间的通信。
3、Iptables/Netfilter：Netfilter 负责在内核中执行各种挂接的规则（过滤、修改、丢弃等），运行在内核 模式中；Iptables模式是在用户模式下运行的进程，负责协助维护内核中 Netfilter 的各种规则表；通过二者的配合来实现整个 Linux 网络协议栈中灵活的数据包处理机制。
4、网桥：网桥是一个二层网络设备,通过网桥可以将 linux 支持的不同的端口连接起来,并实现类似交换机那样的多对多的通信。
5、路由：Linux 系统包含一个完整的路由功能，当IP层在处理数据发送或转发的时候，会使用路由表来决定发往哪里。</p>`,r:{minutes:10.87,words:3262},t:"网络通信",y:"a"}}],["/computerBasics/arithmetic/common.html",{loader:()=>a(()=>import("./common.html-C2XWFtTV.js"),__vite__mapDeps([157,1])),meta:{a:"azrng",d:16444512e5,l:"2022年2月10日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><img src="/common/1644500363642-6e1f64b2-41d1-4cbf-9039-4e1c41f81457.jpeg" alt="" loading="lazy">
加密算法的目的是：在于使得别人无法查看加密的数据，并且在需要的时候还可以对数据进行解密来重新查看数据。
哈希算法的目的是：它在大多数情况下都是不可逆的，即时你通过哈希算法得到的数据，无法经过任何算法还原回去，使用场景之一是验证参数是否被修改。</p>
<h2>算法</h2>
<h3>加密算法</h3>
<p><strong>加密</strong>：是以某种特殊的算法改变原有的信息，使得未授权的用户即使获得已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。
<strong>解密</strong>：加密的逆过程为解密，即将该加密信息转化为其原来信息的过程。
加密算法分为对称加密和非对称加密，其中对称加密算法的加解密密钥相同，非对称加解密的密钥不同。
<img src="/common/1625387586186-1e35110a-662d-48fe-b850-8506f631c92b.webp" alt="" loading="lazy"></p>`,r:{minutes:2.51,words:753},t:"常用算法",y:"a"}}],["/computerBasics/arithmetic/diguiyouhua.html",{loader:()=>a(()=>import("./diguiyouhua.html-BV15KWZe.js"),__vite__mapDeps([158,1])),meta:{a:"azrng",d:16438464e5,l:"2022年2月3日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>比如菲波那切数列指的是这样子一个数列：1,1,2,3,5,8,13,21,34...
计算公式是</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Fibo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">double</span></span> c <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.09,words:1227},t:"递归优化",y:"a"}}],["/computerBasics/arithmetic/fuzadu.html",{loader:()=>a(()=>import("./fuzadu.html-5RkTM_Tj.js"),__vite__mapDeps([159,1])),meta:{a:"azrng",d:16491168e5,l:"2022年4月5日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。</p>
<h3>空间复杂度</h3>
<p>是指在一个算法程序在执行过程中，单位时间内临时所占用的存储容量是多少。用S(n)=O(f(n))来表示。</p>
<h3>时间复杂度</h3>
<p>是指在一个算法程序执行过程中，所需要花费的时间多少。</p>
<blockquote>
<p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数，记作T(n)=O(f(n))，称为O(f(n))为算法的时间复杂度。</p>
</blockquote>`,r:{minutes:.83,words:250},t:"复杂度",y:"a"}}],["/computerBasics/arithmetic/",{loader:()=>a(()=>import("./index.html-BfwzG3hX.js"),__vite__mapDeps([160,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>常见算法
递归
几种排序
分治算法
贪心算法</p>
<h2>算法教程</h2>
<h3>Hello 算法</h3>
<p>Hello算法旨在创建一本开源、免费、对新手友好的数据结构与算法入门教程。</p>
<ul>
<li>全书采用动画图解，结构化地讲解数据结构与算法知识，内容清晰易懂，学习曲线平滑。</li>
<li>源代码可一键运行，帮助读者在练习中提升编程技能，了解算法工作原理和数据结构底层实现。</li>
<li>算法源代码皆可一键运行，支持 Python、C++、Java、C#、Go、Swift、JavaScript、TypeScript、Dart、Rust、C 和 Zig 等语言。</li>
</ul>`,r:{minutes:.75,words:226},t:"说明",y:"a"}}],["/computerBasics/arithmetic/sortAlgorithm.html",{loader:()=>a(()=>import("./sortAlgorithm.html-Bp43pYD8.js"),__vite__mapDeps([161,1])),meta:{a:"azrng",d:16711488e5,l:"2022年12月16日",c:["计算机基础"],g:["无"],o:!0,e:`<h2><strong>简介</strong></h2>
<p>排序算法是我们编程中遇到的最多的算法。目前主流的算法有8种。
平均时间复杂度从高到低依次是</p>
<ul>
<li>
<p>冒泡排序（o(n2)</p>
</li>
<li>
<p>选择排序（o(n2)）</p>
</li>
<li>
<p>插入排序（o(n2)）</p>
</li>
<li>
<p>堆排序（o(nlogn)）</p>
</li>
<li>
<p>归并排序（o(nlogn)）</p>
</li>
<li>
<p>快速排序（o(nlogn)）</p>
</li>
<li>
<p>希尔排序（o(n1.25)）</p>
</li>
<li>
<p>基数排序（o(n)）</p>
</li>
</ul>`,r:{minutes:10.09,words:3027},t:"排序算法",y:"a"}}],["/computerBasics/arithmetic/taskOperator.html",{loader:()=>a(()=>import("./taskOperator.html-DuXhHYdL.js"),__vite__mapDeps([162,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>并发</h2>
<p>多个任务看起来是同时进行的，这是一种假并行。</p>
<blockquote>
<p>单核下使用多道技术实现</p>
</blockquote>
<figure><img src="/common/1617612481622-114fbc98-5c31-47a0-8649-f9257817d8a4.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h2>并行</h2>
<p>多个任务同时进行</p>
<blockquote>
<p>并行必须有多核才能实现，否则只能实现并发(伪并行)</p>
</blockquote>`,r:{minutes:.47,words:142},t:"并行、并发、串行",y:"a"}}],["/computerBasics/arithmetic/weiyuyunsuan.html",{loader:()=>a(()=>import("./weiyuyunsuan.html-CbNjnHK2.js"),__vite__mapDeps([163,1])),meta:{a:"azrng",d:16438464e5,l:"2022年2月3日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>位与运算：二进制运算，相同位的两个数字都为1，则为1；若有一个不为1，则为0；
&nbsp;
比如00101 &amp; 11100 结果是00100</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>A <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1100</span>
B <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1101</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
A<span class="token operator">&amp;</span>B <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1100</span>
A<span class="token operator">|</span>B <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1101</span>
A<span class="token operator">^</span>B <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">0001</span>
<span class="token operator">~</span>A  <span class="token operator">=</span> <span class="token number">1100</span> <span class="token number">0011</span>
</code></pre></div>`,r:{minutes:2.13,words:638},t:"位与运算",y:"a"}}],["/computerBasics/arithmetic/youxiangmohuantutu.html",{loader:()=>a(()=>import("./youxiangmohuantutu.html-BCEL_3JF.js"),__vite__mapDeps([164,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>概念</h2>
<p>有向图由顶点和有向边组成，有向边由上游点和下游点组成，比如一个(u,v)表示一个有向边，其中u就是该有向边的上游点，v就是该有向边的下游点，
入度就是一个顶点作为下游点所在有向边的个数(也就是指向该顶点的个数)，比如顶点1的入度为0，顶点3的入度为1，顶点6的入度为2。
出度就是一个顶点作为上游点所在有向边的个数(该顶点指出的个数)，比如顶点的出度是1，顶点3的出度是2。
<img src="/common/1669733409962-36e0cc02-9f53-4d1f-ae81-1db8920b2a9c.png" alt="image.png" loading="lazy">
在线展示示例：<a href="https://echarts.apache.org/examples/zh/editor.html?c=graph-simple" target="_blank" rel="noopener noreferrer">https://echarts.apache.org/examples/zh/editor.html?c=graph-simple</a></p>`,r:{minutes:2.42,words:726},t:"有向无环图图",y:"a"}}],["/computerBasics/dataStructure/",{loader:()=>a(()=>import("./index.html-oqHr3zqU.js"),__vite__mapDeps([165,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>数据结构是指相互之间存在着一种或者多种关系的数据元素的集合和该集合的数据元素之间的关系组成。常用的有：数组 栈&nbsp; 链表&nbsp; 队列&nbsp; 树&nbsp; 图&nbsp; 堆&nbsp; 散列表等</p>
<p>常用数据类型的底层结构  二叉树等</p>
<h2>数据类型</h2>
<p>数组
数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的，数组中的元素通过数组下标进行访问，数组下标从0开始。例如下面这段代码就是将数组的第一个元素赋值为 1。</p>
<p>int[] data = new int[100]；data[0]&nbsp; = 1;</p>`,r:{minutes:7.47,words:2241},t:"数据结构",y:"a"}}],["/computerBasics/dataStructure/singleLinkedList.html",{loader:()=>a(()=>import("./singleLinkedList.html-sZCA3Q44.js"),__vite__mapDeps([166,1])),meta:{a:"azrng",d:16491168e5,l:"2022年4月5日",c:["计算机基础"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/oAidtjKPU_ZZwj0cdZzOsA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/oAidtjKPU_ZZwj0cdZzOsA</a> 单链表
如果失效访问开发\\docs\\单链表.png</p>
`,r:{minutes:.18,words:55},t:"单链表知识",y:"a"}}],["/computerBasics/network/",{loader:()=>a(()=>import("./index.html-BBTOauCT.js"),__vite__mapDeps([167,1])),meta:{a:"azrng",d:1711152e6,l:"2024年3月23日",c:["计算机基础"],g:["network"],o:!0,e:`<h2>网络七层模型</h2>
<p>网络七层模型，即OSI（Open System Interconnection）参考模型，是国际标准化组织（ISO）制定的一个概念性的框架，用于理解、设计和描述计算机网络通信的全过程。每一层都承担着特定的功能，并与相邻层通过接口进行交互。以下是按照从底层到高层排列的七层模型详细说明：</p>
<ul>
<li>数据链路层 (Data Link Layer)
<ul>
<li>功能：提供节点间数据帧的传输服务，负责错误检测和纠正，如使用校验码确保数据正确性；还定义了如何在物理线路上标识网络地址，实现介质访问控制（MAC）。</li>
<li>子层包括逻辑链路控制（LLC）和媒体访问控制（MAC）。</li>
</ul>
</li>
<li>网络层 (Network Layer)
<ul>
<li>功能：负责将数据包从源主机路由至目标主机，主要任务是IP寻址和路径选择。</li>
<li>在Internet中，TCP/IP协议族中的IP协议对应这一层。</li>
</ul>
</li>
<li>传输层 (Transport Layer)
<ul>
<li>功能：提供端到端的数据传输服务，保证数据的可靠性和顺序性，例如TCP协议提供面向连接、可靠的服务，UDP协议则提供无连接、不可靠的服务。</li>
<li>主要协议：TCP (Transmission Control Protocol) 和 UDP (User Datagram Protocol)。</li>
</ul>
</li>
<li>会话层 (Session Layer)
<ul>
<li>功能：建立、管理及终止不同应用间的会话连接，比如同步两个系统间的对话，以及恢复中断的通信等。</li>
<li>在实际的TCP/IP模型中，这部分功能通常由上层的应用程序直接处理。</li>
</ul>
</li>
<li>表示层 (Presentation Layer)
<ul>
<li>功能：处理数据格式、加密解密、压缩解压等与数据表示有关的问题，确保信息在不同系统之间的语义透明性。</li>
<li>示例：ASCII、JPEG、MPEG等编码标准在此层得到处理。</li>
</ul>
</li>
<li>应用层 (Application Layer)
<ul>
<li>功能：为应用程序提供接口以接入网络服务，支持各种网络应用，如电子邮件、文件传输、Web浏览等。</li>
<li>主要协议：HTTP、FTP、SMTP、DNS等。</li>
</ul>
</li>
</ul>`,r:{minutes:1.81,words:544},t:"说明",y:"a"}}],["/computerBasics/network/tcp.html",{loader:()=>a(()=>import("./tcp.html-D8Y72NoA.js"),__vite__mapDeps([168,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["计算机基础"],g:["tcp","http"],o:!1,e:`<h2>三次握手</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>三次握手过程主要是为了双方都能明确对方的接收与发送能力正常，同时协商出本次连接的数据通信序号和确认序号</p>
</div>
<figure><img src="/computerBasics/93873eb881a54cdd8e1569ff181986f9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
`,r:{minutes:4.25,words:1274},t:"TCP",y:"a"}}],["/computerBasics/os/cpu.html",{loader:()=>a(()=>import("./cpu.html-DWnccf-A.js"),__vite__mapDeps([169,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["计算机基础"],g:["cpu"],o:!0,e:`<h2>概述</h2>
<p>X86 和 ARM 都是CPU设计的一个架构。</p>
<ul>
<li>X86 用的是复杂指令集。</li>
<li>ARM用的是精简指令集。</li>
</ul>
<p>amd和Intel这俩公司的渊源很深，早期时Intel先是自己搞了个<a href="https://www.zhihu.com/search?q=x86%E6%9E%B6%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">x86架构</a>，然后amd拿到了x86的授权也可以自己做x86了。接着intel向64位过渡的时候自己搞了个ia64（x64架构）但是因为和x86架构不兼容市场反应极差，amd率先搞了x86的64位兼容（32和64的混合架构）也就是后来的x86-64，后来Intel也拿到了生产这货的授权（i和a两家专利交叉的很严重），也搞了x86-64，因为amd先搞出来的所以x86-64也叫amd64<br>
目前amd和Intel是世界上最大的两家x86和x86-64的cpu厂家（intel比较给力，四分天下有其三）。除了这两家还有几家小的公司也有x86的授权，比如via，不过技术水平真的很一般。<br>
再说x86，arm和<a href="https://www.zhihu.com/search?q=mips&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">mips</a>，这三个的区别和联系要从cpu早期说起，早期的cpu有两个设计思路，1是把cpu内的逻辑电路做的非常复杂，这样可以直接用cpu硬件事先复杂指令，这个叫<a href="https://www.zhihu.com/search?q=%E5%A4%8D%E6%9D%82%E6%8C%87%E4%BB%A4%E9%9B%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">复杂指令集</a>cisc；另一个思路是尽可能把cpu做的简单，依靠简单指令的组合迭代完成复杂指令，这个叫<a href="https://www.zhihu.com/search?q=%E7%B2%BE%E7%AE%80%E6%8C%87%E4%BB%A4%E9%9B%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">精简指令集</a>risc<br>
x86目前泛指x86和x86-64架构，这是因为x86-64完全兼容x86。早期的x86是<a href="https://www.zhihu.com/search?q=cisc&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">cisc</a>的代表，后来的发展中逐步引入了<a href="https://www.zhihu.com/search?q=risc&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">risc</a>的部分理念，将内部指令的实现大量模块化，准确来说是一个cisc外加risc部分技术的架构。<br>
目前x86的主要产品有Intel的至强，酷睿，奔腾，赛扬和凌动；amd的锐龙，<a href="https://www.zhihu.com/search?q=apu&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">apu</a>等。上文提到的x64架构目前只有intel 安腾而且已经放弃了产品线。<br>
到目前为止intel和amd的x86架构cpu虽然指令集上有很大差别了但是还是相互兼容的，所以软件可以直接用。'
再说arm。<br>
arm是risc的典型代表，不过在arm的发展过程中引入了部分复杂指令（完全没有复杂指令的话操作系统跑起来异常艰难），所以是一个risc基础外加cisc技术的cpu。<br>
arm的主要<a href="https://www.zhihu.com/search?q=%E4%B8%93%E5%88%A9%E6%8A%80%E6%9C%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">专利技术</a>在arm公司手中，像高通，三星，苹果这些公司需要拿到arm的授权。<br>
另一个risc的典型处理器就是mips。mips是一个<a href="https://www.zhihu.com/search?q=%E5%AD%A6%E9%99%A2%E6%B4%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">学院派</a>的cpu，授权门槛极低，因此很多厂家都做mips或者mips衍生架构。我们平时接触到的<a href="https://www.zhihu.com/search?q=mips%E6%9E%B6%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">mips架构</a>cpu主要用在嵌入式领域，比如<a href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A211243489%7D" target="_blank" rel="noopener noreferrer">路由器</a>。</p>`,r:{minutes:3.45,words:1034},t:"CPU架构",y:"a"}}],["/computerBasics/os/memory.html",{loader:()=>a(()=>import("./memory.html-RaoO49v2.js"),__vite__mapDeps([170,1])),meta:{a:"azrng",d:17152128e5,l:"2024年5月9日",c:["计算机基础"],g:["内存"],o:!0,e:`<h2>内存特征</h2>
<p>内存就像以分数，其中的页码就代表着内存地址，而书本的每一页都能保存特定的信息量，大小为一个字节(byte)。</p>
<p>最小的存储单元：每一页可以存储一字节，也就是8位(bit)的信息</p>
<p>结构组成：一本书由众多页数紧密排列而成，构成了一个较大的存储空间。</p>
<p>唯一地址：每一页都有其唯一的页码(内存地址)。</p>
`,r:{minutes:.5,words:149},t:"内存",y:"a"}}],["/computerBasics/os/taskRunStatus.html",{loader:()=>a(()=>import("./taskRunStatus.html-B1NpqKPq.js"),__vite__mapDeps([171,1])),meta:{a:"azrng",d:16825536e5,l:"2023年4月27日",c:["计算机基础"],g:["任务","状态"],o:!0,e:`<h2>就绪态</h2>
<ul>
<li>当进程已分配到除CPU以外的所有必要的资源后,只要再获得CPU, 便可执行程序, 进程这时的状态就称为就绪态,</li>
<li>在一个系统中处于就绪态的进程可能有多个, 通常将他们排成一个队列, 这就叫就绪队列</li>
</ul>
<h2>运行态</h2>
<ul>
<li>当进程已经获得CPU操作权限, 其程序正在运行, 着就叫做运行态</li>
<li>在单核操作系统中, 只有一个进程处于运行态, 多核操作系统有多个进程处于运行态</li>
</ul>
<h2>阻塞态</h2>
<ul>
<li>正在执行的进程, 由于等待某个事件而无法执行时, 便被操作系统剥夺了cpu的操作时间, 这是就是阻塞态</li>
<li>引起阻塞的原因多种, 例如: 等待I/O操作, 更高优先级的任务抢走了CPU权限等.</li>
</ul>`,r:{minutes:1.63,words:490},t:"任务运行的状态",y:"a"}}],["/dotnet/anquanhebiaoshi/shujubaohudataprotection.html",{loader:()=>a(()=>import("./shujubaohudataprotection.html-DX_mlyGE.js"),__vite__mapDeps([172,1])),meta:{a:"azrng",d:16464384e5,l:"2022年3月5日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文示例环境：vs2022、.Net6</p>
</blockquote>
<h2>需求</h2>
<p>是一个简单、易用的加密API，可以用来保护数据，防止配置数据泄露。</p>
<h2>设计原则</h2>
<ul>
<li>配置应该尽可能简单，默认情况下应该可以零配置，开发人员可以直接运行。</li>
<li>提供一个简单的API，容易使用，并且不会轻易用错。</li>
<li>开发人员不需要专门学习如何管理这些密钥(公私钥)，系统应该自动选择算法和管理密钥的生命周期。理想情况下开发人员都不应该访问这些密钥的原始文件。</li>
<li>密钥应该是受保护的，不能被远程调用到。系统应该有一个自动保护机制并且可以自动应用。</li>
</ul>`,r:{minutes:3.83,words:1150},t:"数据保护DataProtection",y:"a"}}],["/dotnet/aop/aspectcore_core.html",{loader:()=>a(()=>import("./aspectcore_core.html-DTrG_nlZ.js"),__vite__mapDeps([173,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年5月30日</p>
</blockquote>
<h2>概述</h2>
<p>下载量：3.22M</p>
<h2>操作</h2>
<h3>AspectCore.Core搭配Polly</h3>
<p>虽然我们完成了简单的重试、服务降级、熔断等功能。但是显然对于每个方法都去使用 Polly 编写一堆策略的话实在是太麻烦了。那么有什么办法能改进一下 Polly 的使用体验吗？答案是使用 AOP 的思想，通过在执行的方法上打上 Attribute 的方式来指定 Polly 的策略。
下面我们使用 lemon 大佬的 AspectCore AOP 组件结合 Polly 来演示下如何通过 AOP 的思想来处理重试、降级、熔断等策略。
通过 nuget 安装 AspectCore 核心类库。</p>`,r:{minutes:2.98,words:895},t:"AspectCore.Core",y:"a"}}],["/dotnet/aop/castle_dynamicproxy.html",{loader:()=>a(()=>import("./castle_dynamicproxy.html-DgPquXh_.js"),__vite__mapDeps([174,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年5月30日</p>
</blockquote>
<h2>概述</h2>
<p>Castle.DynamicProxy可以实现动态代理的功能，这个也是很多框架的基础。也就是说它是众多开源项目向.NET Core兼容的重要基础组件，也就是开发过程中我们不需要处理切面中(日志等)的工作，而是运行时，通过动态代理来完成。</p>
<p>Castle.Core.AsyncInterceptor 是 Castle.DynamicProxy 的扩展库，它简化了异步方法拦截器的开发。</p>
<p>下载量：372M</p>
<h2>优势</h2>
<p>使用 Castle.Core.AsyncInterceptor 的主要优势是能够使用 async/await 模式拦截异步方法。通过提供简单的拦截方法机制，这简化了异步方法拦截器的开发。</p>`,r:{minutes:1.26,words:378},t:"Castle.DynamicProxy",y:"a"}}],["/dotnet/aop/dispatchproxy.html",{loader:()=>a(()=>import("./dispatchproxy.html-DXqMV5qk.js"),__vite__mapDeps([175,1])),meta:{a:"azrng",d:16779744e5,l:"2023年3月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>是.Net原生的一种实现动态代理的方案。</p>
<h2>操作</h2>
<p>定义DynamicProxy类来继承自DispatchProxy</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DispatchProxy</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 目标类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> Decorated <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 动作之后执行</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> AfterAction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 动作之前执行</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> BeforeAction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInfo</span> targetMethod<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Exception</span> exception <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">AfterActionMethod</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">object</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//调用实际目标对象的方法</span>
            result <span class="token operator">=</span> targetMethod<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>Decorated<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            exception <span class="token operator">=</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">BeforeActionMethod</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用完执行方法后的委托，如果有异常，抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 创建代理实例</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decorated<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>代理的接口类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterAction<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>方法执行前执行的事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeAction<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>方法执行后执行的事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name">T</span> decorated<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> afterAction<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> beforeAction<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">object</span></span> proxy <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> DynamicProxy<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用DispatchProxy 的Create创建一个新的T</span>
        <span class="token class-name">DynamicProxy<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> proxyDecorator <span class="token operator">=</span> <span class="token punctuation">(</span>DynamicProxy<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span>proxy<span class="token punctuation">;</span>
        proxyDecorator<span class="token punctuation">.</span>Decorated <span class="token operator">=</span> decorated<span class="token punctuation">;</span>
        <span class="token comment">//把自定义的方法委托给代理类</span>
        proxyDecorator<span class="token punctuation">.</span>AfterAction <span class="token operator">=</span> afterAction<span class="token punctuation">;</span>
        proxyDecorator<span class="token punctuation">.</span>BeforeAction <span class="token operator">=</span> beforeAction<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>proxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AfterActionMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            AfterAction<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"执行之前异常：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>StackTrace</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BeforeActionMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> result<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            BeforeAction<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"执行之后异常：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>StackTrace</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.86,words:858},t:"DispatchProxy",y:"a"}}],["/dotnet/aop/dora_interception.html",{loader:()=>a(()=>import("./dora_interception.html-CYD9g5sC.js"),__vite__mapDeps([176,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/pCU0hRppXh-tn9ogL6g6fQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/pCU0hRppXh-tn9ogL6g6fQ</a> | 全新升级的AOP框架Dora.Interception[1]: 编程体验
AOP框架汇总：<a href="https://mp.weixin.qq.com/s/dI5AxpZNdvbXRo1dDEVSKA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/dI5AxpZNdvbXRo1dDEVSKA</a></p>`,r:{minutes:.19,words:56},t:"Dora.Interception",y:"a"}}],["/dotnet/aop/fody.html",{loader:()=>a(()=>import("./fody.html-jUDJdQ56.js"),__vite__mapDeps([177,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/wsNdr8L2T5WJmhdBhmxPHw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/wsNdr8L2T5WJmhdBhmxPHw</a> | 一行代码, 在 C## 中实现 AOP</p>
`,r:{minutes:.14,words:41},t:"Fody",y:"a"}}],["/dotnet/aop/mradvice.html",{loader:()=>a(()=>import("./mradvice.html-B8nHc52L.js"),__vite__mapDeps([178,1])),meta:{a:"azrng",d:16538688e5,l:"2022年5月30日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年5月30日</p>
</blockquote>
<h2>介绍</h2>
<p>Mr. Advice 是 PostSharp 的开源（免费）替代品。
下载量：394k</p>
<h2>操作</h2>
<h3>简单操作</h3>
<p>创建特性</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProudAdvice</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">IMethodAdvice</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Advise</span><span class="token punctuation">(</span><span class="token class-name">MethodAdviceContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// do things you want here</span>
        context<span class="token punctuation">.</span><span class="token function">Proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this calls the original method</span>
        <span class="token comment">// do other things here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.41,words:122},t:"MrAdvice",y:"a"}}],["/dotnet/aop/postsharp.html",{loader:()=>a(()=>import("./postsharp.html-tQs_AOws.js"),__vite__mapDeps([179,1])),meta:{a:"azrng",d:16538688e5,l:"2022年5月30日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年5月30日</p>
</blockquote>
<h2>介绍</h2>
<p>PostSharp是一个用于在.NET平台上实现<a href="https://so.csdn.net/so/search?q=AOP&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">AOP</a>（Aspect-Oriented Programming，面向方面编程）的框架，现通过简单的示例代码来演示如何使用postsharp。</p>
<p>下载量：6.93M</p>`,r:{minutes:.34,words:101},t:"PostSharp",y:"a"}}],["/dotnet/aop/",{loader:()=>a(()=>import("./index.html-Djkox3Hj.js"),__vite__mapDeps([180,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>AOP是Aspect Oriented Programing的缩写，中文翻译为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是软件开发中的一个热点，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从面使得业务逻辑各部分之间的耦合度低，提高程序的可重用性，同时提高开发的效率。在运行时、动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。
举例：我们在两个类中，可能需要在每个方法中做日志，按照面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系。而不能将这些重复的代码统一起来。而AOP就是为了解决这个问题而生的。</p>`,r:{minutes:1.88,words:564},t:"说明",y:"a"}}],["/dotnet/aop/rougamo.html",{loader:()=>a(()=>import("./rougamo.html-CzVH0Spt.js"),__vite__mapDeps([181,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>静态代码织入AOP，.NET最常用的AOP应该是Castle DynamicProxy，rougamo的功能与其类似，但是实现却截然不同， DynamicProxy是运行时生成一个代理类，通过方法重写的方式执行织入代码，rougamo则是代码编译时直接修改IL代码。</p>
<p>仓库地址：<a href="https://github.com/inversionhourglass/Rougamo" target="_blank" rel="noopener noreferrer">https://github.com/inversionhourglass/Rougamo</a></p>`,r:{minutes:2.4,words:719},t:"Rougamo",y:"a"}}],["/dotnet/api/apilanjie.html",{loader:()=>a(()=>import("./apilanjie.html-DkpobNd5.js"),__vite__mapDeps([182,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>参考资料</h2>
<p>内容来自：.NetAPI拦截技能 <a href="https://mp.weixin.qq.com/s/gqphrk9vRoSDxtWG1OHo8Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/gqphrk9vRoSDxtWG1OHo8Q</a></p>
`,r:{minutes:.15,words:44},t:"API拦截",y:"a"}}],["/dotnet/api/connectedservices.html",{loader:()=>a(()=>import("./connectedservices.html-IZKmO3Cb.js"),__vite__mapDeps([183,1])),meta:{a:"azrng",d:16853184e5,l:"2023年5月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>生成API调用代码</h2>
<p>生成的代码将和接口对应的参数、返回值一一对应，本文底层使用的工具为NSwag.exe，其他可替代的方案还有AutoSet.exe。
本文中生成的代码将在编译过程中自动编译，类似grpc生成代码的模式，如果使用AutoSet则需要手动引入代码。
另外也可以使用NSwag对应的vs插件(<a href="https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=Unchase.unchaseopenapiconnectedservice</a>)</p>`,r:{minutes:.8,words:241},t:"Connected Services",y:"a"}}],["/dotnet/api/curldehttpqingqiu.html",{loader:()=>a(()=>import("./curldehttpqingqiu.html-Bshmx8Q5.js"),__vite__mapDeps([184,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["dotNET"],g:["无"],o:!0,e:`<h3>POST请求</h3>
<h4>application/x-www-form-urlencoded</h4>
<blockquote>
<p>curl localhost:3000/api/basic -X POST -d 'hello=world'</p>
</blockquote>
<h4>multipart/form-data(最常见的一种POST请求)</h4>
<blockquote>
<p>curl localhost:3000/api/multipart -F raw=@raw.data -F hello=world</p>
</blockquote>
<h4>application/json</h4>`,r:{minutes:.49,words:147},t:"Curl的Http请求",y:"a"}}],["/dotnet/api/miniapi.html",{loader:()=>a(()=>import("./miniapi.html-lnpmwKt3.js"),__vite__mapDeps([185,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>官网文档地址：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0</a></p>
<h2>参数</h2>
<p>获取args参数</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> debugEnabled <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"--debug"</span><span class="token punctuation">,</span> StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> logAsJson <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"--logAsJson"</span><span class="token punctuation">,</span> StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.22,words:366},t:"MiniApi",y:"a"}}],["/dotnet/api/qingqiubiaoshichuandi.html",{loader:()=>a(()=>import("./qingqiubiaoshichuandi.html-Crnp6YTi.js"),__vite__mapDeps([186,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>请求头链路传播</p>
<h2>操作</h2>
<h3>HeaderPropagation</h3>
<p>源码地址：<a href="https://github.com/dotnet/aspnetcore/tree/main/src/Middleware/HeaderPropagation" target="_blank" rel="noopener noreferrer">https://github.com/dotnet/aspnetcore/tree/main/src/Middleware/HeaderPropagation</a></p>
<h4>基本使用</h4>`,r:{minutes:1.72,words:515},t:"请求标识传递",y:"a"}}],["/dotnet/api/shiyonghttprepljinhangceshi.html",{loader:()=>a(()=>import("./shiyonghttprepljinhangceshi.html-fqHTE9Hu.js"),__vite__mapDeps([187,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>资料：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/web-api/http-repl/?view=aspnetcore-7.0&amp;tabs=windows" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/aspnet/core/web-api/http-repl/?view=aspnetcore-7.0&amp;tabs=windows</a>
httprepl   <a href="https://www.cnblogs.com/tcjiaan/p/17742167.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/tcjiaan/p/17742167.html</a></p>`,r:{minutes:.2,words:60},t:"使用HttpRepl进行测试",y:"a"}}],["/dotnet/api/shujuchuanshujiami.html",{loader:()=>a(()=>import("./shujuchuanshujiami.html-DZmbOTPX.js"),__vite__mapDeps([188,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>为了安全性起见，客户要求客户端必须将数据加密后才能传给服务端。
起先，准备使用非对称加密（RSA）方式，但是发现它对原始文本长度有限制。
而对称加密(AES)没有长度限制，但是使用固定密钥存在暴露的风险。</p>
<h2>思路</h2>
<p>密钥肯定每个用户不同，而要验证用户则必须登录。
因此，唯一可以安全获取密钥的时机，只能是在登录时。
而为了保证用户名密码传输安全，可以使用RSA公钥加密后传输，所有客户端使用同一公钥也没问题。
登录成功后，服务端将生成token和AES密钥返回给客户端。但是，返回的AES密钥是经过加密的，而加密密钥则是“用户名+密码”。
<strong>这样保证了，只有刚才成功登录的客户端才能解密出AES密钥。</strong>
以后的传输，全部使用AES加密，服务端可以根据token从缓存获取AES密钥解密。
整体流程如下图：
<img src="/common/1643893176902-9c5e1ef6-42e3-4e64-8dd9-37b6a4156d09.webp" alt="" loading="lazy">
缺点：这样子的话，客户端也需要保存住用户的账号密码，因为每次传输的时候要使用到密码进行加密使用的。</p>`,r:{minutes:2.23,words:670},t:"数据传输加密",y:"a"}}],["/dotnet/api/sse.html",{loader:()=>a(()=>import("./sse.html-CUGhqDkA.js"),__vite__mapDeps([189,1])),meta:{a:"azrng",d:16872192e5,l:"2023年6月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>现如今程序员对Web API的调用已经是轻车熟路。但是传统的api调用都是拉模式，也就是主动发起请求去调用一个api.
但是程序员往往对另一种很有用的模式很陌生，即推模式。</p>
<ul>
<li>拉模式 - 主动调用并获取结果的模式。</li>
<li>推模式 - 订阅并接受数据推送的模式。</li>
</ul>
<p>今天要介绍的是一个被大家忽略但却非常有用的一项技术。
基于HTTP/2的标准服务器事件推送模式，英文简称Server-Sent Events，后面简称SSE。</p>
<h2>Server-Sent Events</h2>
<p>这里引用MDN上的一段解释：</p>`,r:{minutes:6.15,words:1845},t:"SSE",y:"a"}}],["/dotnet/api/webTransport.html",{loader:()=>a(()=>import("./webTransport.html-CPVe65w7.js"),__vite__mapDeps([190,1])),meta:{a:"azrng",d:17052768e5,l:"2024年1月15日",c:["dotNET"],g:["API"],o:!0,e:`<h2>简介</h2>
<p>WebTransport 是一个新的 Web API，使用 HTTP/3 协议来支持双向传输。它用于 Web 客户端和 HTTP/3 服务器之间的双向通信。它支持通过 不可靠的 Datagrams API 发送数据，也支持可靠的 Stream API 发送数据。</p>
<p>因为 HTTP/3 使用了基于 UDP 的 QUIC 协议，所以 Web Transport 可以在一个连接上创建多个流，而且不会相互阻塞。</p>
<p>WebTransport 支持三种不同类型的流量：数据报（datagrams） 以及单向流和双向流。</p>
<p>WebTransport 的设计基于现代 Web 平台基本类型（比如 Streams API）。它在很大程度上依赖于 promise，并且可以很好地与 <code>async</code> 和 <code>await</code> 配合使用。</p>`,r:{minutes:1.63,words:489},t:"WebTransport",y:"a"}}],["/dotnet/avalonia/issue.html",{loader:()=>a(()=>import("./issue.html-CKjLcYSN.js"),__vite__mapDeps([191,1])),meta:{a:"azrng",d:1710288e6,l:"2024年3月13日",c:["dotNET"],g:["avalonia","issue"],o:!0,e:`<h2>未使用Fluent主题导致的不能预览</h2>
<p>新创建的项目会自动应用一个名为 Fluent 的主题，对应的 Nuget 是：Avalonia.Themes.Fluent 。不过当你不使用这个主题，使用其他主题的时候，会导致无法预览，比如 Visual Studio 错误信息为</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Unable to resolve type Avalonia.Data.RelativeSource
</code></pre></div>`,r:{minutes:1.25,words:376},t:"问题",y:"a"}}],["/dotnet/avalonia/openSourceComponent.html",{loader:()=>a(()=>import("./openSourceComponent.html-D_NmgzTk.js"),__vite__mapDeps([192,1])),meta:{a:"azrng",d:1690848e6,l:"2023年8月1日",c:["dotNET"],g:["component"],o:!0,e:`<h2>开源项目</h2>
<p>Awesome Avalonia：https://github.com/AvaloniaCommunity/awesome-avalonia</p>
<p>中科时代开发示例：https://github.com/Sinsegye-CSharp/AvaloniaSamples</p>
<p>ChatBox：https://github.com/sealoyal2018/ChatBox.git</p>
<h2>图标库</h2>
<p>Fluent Icons：https://avaloniaui.github.io/icons.html</p>
<h2>UI组件库</h2>`,r:{minutes:2.17,words:650},t:"开源项目",y:"a"}}],["/dotnet/avalonia/operator.html",{loader:()=>a(()=>import("./operator.html-CST1_059.js"),__vite__mapDeps([193,1])),meta:{a:"azrng",d:16854912e5,l:"2023年5月31日",c:["dotNET"],g:["operator"],o:!0,e:`<h2>快速上手</h2>
<h3>安装模板</h3>
<p>运行命令安装模板，详细步骤看<a href="https://docs.avaloniaui.net/zh-Hans/docs/get-started/install" target="_blank" rel="noopener noreferrer">此处</a></p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet <span class="token keyword">new</span> install Avalonia<span class="token punctuation">.</span>Templates
</code></pre></div>`,r:{minutes:2.52,words:756},t:"基础操作",y:"a"}}],["/dotnet/avalonia/",{loader:()=>a(()=>import("./index.html-B49Olhqx.js"),__vite__mapDeps([194,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["avalonia"],o:!0,e:`<h2>概述</h2>
<p>Avalonia是一个强大的框架，使开发人员能够使用.NET创建跨平台应用程序。它使用自己的渲染引擎绘制UI控件，确保在Windows、macOS、Linux、Android、iOS和WebAssembly等不同平台上具有一致的外观和行为。这意味着开发人员可以共享他们的UI代码，并在不同的目标平台上保持统一的外观和感觉。</p>
<p>官网地址：<a href="https://www.avaloniaui.net/How-It-Works" target="_blank" rel="noopener noreferrer">https://www.avaloniaui.net/How-It-Works</a>
中文官网：<a href="https://docs.avaloniaui.net/zh-Hans/docs/next/welcome" target="_blank" rel="noopener noreferrer">https://docs.avaloniaui.net/zh-Hans/docs/next/welcome</a>
在线编辑测试：<a href="https://play.avaloniaui.net/" target="_blank" rel="noopener noreferrer">https://play.avaloniaui.net/</a></p>`,r:{minutes:.61,words:183},t:"说明",y:"a"}}],["/dotnet/base/chengxuji.html",{loader:()=>a(()=>import("./chengxuji.html-CL5U37za.js"),__vite__mapDeps([195,1])),meta:{a:"azrng",d:16971552e5,l:"2023年10月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>程序集别名</h2>
<p>使用场景：当你使用的一个开源项目中他依赖一个程序集，然后这个程序集刚好也是你的依赖项，但是这两个程序集的版本不一样，这个时候你就会遇到这个问题</p>
<p>当你现在有一个程序A，它引用了两个类库B和C，这个B和C的程序集名称一样，项目文件如下配置</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>net7<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ImplicitUsings<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>ImplicitUsings<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Nullable<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>Nullable<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>RootNamespace<span class="token operator">&gt;</span>ClassLibrarySample<span class="token operator">&lt;</span><span class="token operator">/</span>RootNamespace<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.33,words:399},t:"程序集",y:"a"}}],["/dotnet/base/diaoyongzhexinxi.html",{loader:()=>a(()=>import("./diaoyongzhexinxi.html-CVF4sL6P.js"),__vite__mapDeps([196,1])),meta:{a:"azrng",d:16777152e5,l:"2023年3月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>为了方便我们获取调用方的方法名等信息，而不再传播nameof来获取，所以找到了下面的方法。</p>
<h2>操作</h2>
<h3>获取调用者行号</h3>
<p>通过CallerLineNumber来获取调用者的行号<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute?view=net-7.0" target="_blank" rel="noopener noreferrer">文档地址</a></p>`,r:{minutes:1.23,words:370},t:"调用者信息",y:"a"}}],["/dotnet/base/ihostedservicerenwu.html",{loader:()=>a(()=>import("./ihostedservicerenwu.html-Dnuhucl3.js"),__vite__mapDeps([197,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["backgroud"],o:!0,e:`<h2>后台任务配置</h2>
<p>可以通过配置来操作后台任务的设置</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>builder.Services.Configure&lt;HostOptions&gt;(options =&gt;
{
    // 当后台任务抛出异常的时候该如何处理
    options.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.StopHost;
});
</code></pre></div>`,r:{minutes:2.87,words:861},t:"后台任务",y:"a"}}],["/dotnet/buildAndRelease/aot.html",{loader:()=>a(()=>import("./aot.html-DyweOzy_.js"),__vite__mapDeps([198,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET Native Ahead-of-Time （AOT） 编译是 .NET 平台中的前沿技术。使用 AOT，C# 代码被编译为开发人员计算机上的本机代码。这与传统方法形成鲜明对比，在传统方法中代码是在运行时被编译为本机代码。</p>
<p>官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot</a></p>`,r:{minutes:4.75,words:1424},t:"AOT",y:"a"}}],["/dotnet/buildAndRelease/obfuscator.html",{loader:()=>a(()=>import("./obfuscator.html-BFRCa_X_.js"),__vite__mapDeps([199,1])),meta:{a:"azrng",d:16892064e5,l:"2023年7月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>将编程后的程序混淆，使得编译后代码不容易被别人看懂。</p>
<h2>工具</h2>
<ul>
<li>ConfuserEx
<ul>
<li>文档：<a href="https://blog.csdn.net/qq_40594137/article/details/102058180" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_40594137/article/details/102058180</a></li>
</ul>
</li>
<li>Eziriz .Net Reactor
<ul>
<li>文档：<a href="https://masuit.org/34?t=v62hl5juu22o" target="_blank" rel="noopener noreferrer">https://masuit.org/34?t=v62hl5juu22o</a></li>
<li>资料：<a href="https://blog.csdn.net/sinat_40003796/article/details/124865720" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sinat_40003796/article/details/124865720</a></li>
</ul>
</li>
<li>JIEJIE.NET
<ul>
<li>文档：<a href="https://www.cnblogs.com/dotnet-box/p/17360983.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/dotnet-box/p/17360983.html</a></li>
<li>项目地址：<a href="https://github.com/dcsoft-yyf/JIEJIE.NET" target="_blank" rel="noopener noreferrer">https://github.com/dcsoft-yyf/JIEJIE.NET</a></li>
</ul>
</li>
</ul>`,r:{minutes:1.04,words:312},t:"混淆器",y:"a"}}],["/dotnet/buildAndRelease/",{loader:()=>a(()=>import("./index.html-BV8_QfD-.js"),__vite__mapDeps([200,1])),meta:{a:"azrng",d:1680048e6,l:"2023年3月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>平台</h2>
<p>龙芯支持：<a href="http://www.loongnix.cn/zh/api/dotnet/" target="_blank" rel="noopener noreferrer">http://www.loongnix.cn/zh/api/dotnet/</a></p>
<h2>部署模式选择</h2>
<p>ASP.NetCore目前的部署方式分为三种，独立发布（SCD）、框架依赖（FDD）、依赖框架的可执行文件（FDE）。其中FDD和FDE差别不大，不予讨论</p>
<h3>独立部署</h3>
<p>不依赖目标系统上存在的共享组件。所有的组件（netcore库和netcore运行时）都包含在应用程序中，并且独立于其他netcore应用程序。</p>`,r:{minutes:3.93,words:1178},t:"概述",y:"a"}}],["/dotnet/chengxujicaozuo/caozuo.html",{loader:()=>a(()=>import("./caozuo.html-Ptg6wEJM.js"),__vite__mapDeps([201,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>获取项目版本号</h2>
<p>通过以下代码可以获取到项目的版本号</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> assemblyVersion <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetEntryAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AssemblyInformationalVersionAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>InformationalVersion<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>assemblyVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.39,words:1318},t:"操作",y:"a"}}],["/dotnet/chengxujicaozuo/huoqukuangjiadebanbenhao.html",{loader:()=>a(()=>import("./huoqukuangjiadebanbenhao.html-DDEIno5v.js"),__vite__mapDeps([202,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>NerF</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 获取.NetF版本号</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Version</span> <span class="token function">GetFrameworkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> registerKey <span class="token operator">=</span> <span class="token string">@"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\";
    var defaultVersion = new Version(0, 0);
    try
    {
        //Release根据文档描述是版本密钥，应该是类似版本构建号，能够判断是否已安装.NET。
        //Version是.NetFramework的版本
        using var sub = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(registerKey);
        if (!(sub?.GetValue("</span>Release"<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">int</span></span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> defaultVersion<span class="token punctuation">;</span>

        <span class="token comment">//判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">528040</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">461808</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">461308</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">460798</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">394802</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">394254</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">393295</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">379893</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">378675</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;=</span> <span class="token number">378389</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ignored</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//小于4.5，一般不存在这个环境</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Version</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.79,words:237},t:"获取框架的版本号",y:"a"}}],["/dotnet/chengxujicaozuo/interceptDLL.html",{loader:()=>a(()=>import("./interceptDLL.html-DOumjahD.js"),__vite__mapDeps([203,1])),meta:{a:"沙漠尽头的狼",d:16955136e5,l:"2023年9月24日",c:["dotNet"],g:["Lib.Harmony"],o:!0,e:`<h2>1. 什么是方法拦截？</h2>
<p>方法拦截是指在方法被调用之前或之后，通过插入自定义的代码来修改方法的行为。通过方法拦截，开发人员可以在不修改原始代码的情况下，对方法的输入参数进行验证、修改方法的返回值、记录方法的调用日志等操作。</p>
<p>本文使用<code>Lib.Harmony</code>库实现第三方库方法的拦截，关于该库站长写过[快学会这个技能-.NET API拦截技法](快学会这个技能-.NET API拦截技法 - Dotnet9[2])一文，大家可以再看看，但该篇文章未介绍非public类及方法如何拦截，本文会有所补充反过来 。</p>
<h2>2. 示例程序拦截</h2>`,r:{minutes:8.28,words:2484},t:"拦截|篡改|伪造.NET类库中不限于public的类和方法",y:"a"}}],["/dotnet/chengxujicaozuo/jiangdllneiqiandll.html",{loader:()=>a(()=>import("./jiangdllneiqiandll.html-BsDRN283.js"),__vite__mapDeps([204,1])),meta:{a:"azrng",d:16917984e5,l:"2023年8月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>希望能够将第三方DLL构建到我的DLL中，而不是在可能的情况下将它们放在一起</p>
<h2>解决方案参考</h2>
<p>embeddedResourcePrefix是嵌入资源的字符串路径，它通常是程序集的名称，后跟包含资源的任何文件夹结构(例如"MyComapny.MyProduct.MyAssembly.Resources“，如果dll位于项目中一个名为Resources的文件夹中)。它还假设dll具有.dll.resource扩展名。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EnableDynamicLoadingForDlls</span><span class="token punctuation">(</span><span class="token class-name">Assembly</span> assemblyToLoadFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> embeddedResourcePrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>AssemblyResolve <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// had to add =&gt;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> resName <span class="token operator">=</span> embeddedResourcePrefix <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".dll.resource"</span><span class="token punctuation">;</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Stream</span> input <span class="token operator">=</span> assemblyToLoadFrom<span class="token punctuation">.</span><span class="token function">GetManifestResourceStream</span><span class="token punctuation">(</span>resName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> input <span class="token operator">!=</span> <span class="token keyword">null</span>
                         <span class="token punctuation">?</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token function">StreamToBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>
                         <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                _log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Error dynamically loading dll: "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Had to add colon</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">StreamToBytes</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> capacity <span class="token operator">=</span> input<span class="token punctuation">.</span>CanSeek <span class="token punctuation">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">MemoryStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> readLength<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                readLength <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// had to change to buffer.Length</span>
                output<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>readLength <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.29,words:386},t:"将DLL内嵌DLL",y:"a"}}],["/dotnet/chengxujicaozuo/nixiangfanbianyigongju.html",{loader:()=>a(()=>import("./nixiangfanbianyigongju.html-PvjokSfL.js"),__vite__mapDeps([205,1])),meta:{a:"azrng",d:16708896e5,l:"2022年12月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>dotPeek</h2>
<p>官网地址：<a href="https://www.jetbrains.com/decompiler/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/decompiler/</a>
dotPeek 是 JetBrains 开发的一款.Net反编译工具，是.Net工具套件中的一个，而且免费使用。</p>
<blockquote>
<p>使用体验
优点：
查看源码操作快捷键更熟悉，界面更舒服
可以直接搜索nuget包看源码，以及查看每个版本的
缺点：
不能选择语言版本</p>
</blockquote>`,r:{minutes:.91,words:273},t:"逆向反编译工具",y:"a"}}],["/dotnet/chengxujicaozuo/pInvokeDLL.html",{loader:()=>a(()=>import("./pInvokeDLL.html-wZ3axVaP.js"),__vite__mapDeps([206,1])),meta:{a:"baibaomen-org",d:16917984e5,l:"2023年8月12日",c:["dotNet"],g:["pInvoke","DLL"],o:!1,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>本编所涉及到的工具以及框架：
1、Visual Studio 2022
2、.net 6.0</p>
</div>
<h2>P/Invok是什么？</h2>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code>P/Invoke全称为Platform <span class="token function">Invoke</span><span class="token punctuation">(</span>平台调用<span class="token punctuation">)</span>，其实际上就是一种函数调用机制，通过P/Invoke就可以实现调用非托管Dll中的函数。
</code></pre></div>`,r:{minutes:5.72,words:1717},t:"P/Invoke之C#调用动态链接库DLL",y:"a"}}],["/dotnet/commonMethod/downloader.html",{loader:()=>a(()=>import("./downloader.html-zTC7YbT4.js"),__vite__mapDeps([207,1])),meta:{a:"azrng",d:16988832e5,l:"2023年11月2日",c:["dotNET"],g:["下载","httpClient"],o:!0,e:`<h2>概述</h2>
<p>通过HttpClient请求远程文件并实现下载的功能</p>
<h2>操作</h2>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var url = "http://lg-hkg.fdcservers.net/10MBtest.zip";
var task = new DownLoadTask();
await task.StartAsync(url, "D:\\\\Downloads");

/// &lt;summary&gt;
/// 一个下载任务类
/// &lt;/summary&gt;
public class DownLoadTask
{
    public async Task StartAsync(string url, string saveFolderPath)
    {
        try
        {
            using var client = new HttpClient();
            // 1.1.某些网站会反爬，所以我们需要设置一些参数
            client.DefaultRequestHeaders.Add("User-Agent",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.61");

            // 2.进行异步请求
            await using var stream = await client.GetStreamAsync(url);

            var suffix = GetFileType("zip");
            var filePath = Path.Combine(saveFolderPath, Random.Shared.Next(10, 10000) + suffix);
            await using var fileStream = File.Create(filePath);
            await stream.CopyToAsync(fileStream);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"请求下载失败：{e.Message}");
        }
    }

    /// &lt;summary&gt;
    /// 检测文件的类型
    /// &lt;/summary&gt;
    /// &lt;param name="type"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private string GetFileType(string type)
    {
        var suffix = "";
        if (type.Contains("jpeg"))
        {
            suffix = ".jpg";
        }
        else if (type.Contains("zip"))
        {
            suffix = ".zip";
        }
        else if (type.Contains("application/octet-stream"))
        {
            suffix = ".exe";
        }
        else if (type.Contains("png"))
        {
            suffix = ".png";
        }
        else if (type.Contains("mp4"))
        {
            suffix = ".mp4";
        }
        else if (type.Contains("avi"))
        {
            suffix = ".avi";
        }
        else if (type.Contains("mp3"))
        {
            suffix = ".mp3";
        }
        else if (type.Contains("mpeg"))
        {
            suffix = ".m4a";
        }

        return suffix;
    }
}
</code></pre></div>`,r:{minutes:3.39,words:1018},t:"HTTP简易下载器",y:"a"}}],["/dotnet/commonMethod/iniwenjiandouxie.html",{loader:()=>a(()=>import("./iniwenjiandouxie.html-C6UosCdD.js"),__vite__mapDeps([208,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>使用ini文件来保存配置信息</p>
<h2>操作</h2>
<p>假设我有下面的ini文件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataBase</span></span><span class="token punctuation">]</span>
<span class="token preprocessor property">## 举例配置项</span>
host<span class="token operator">=</span><span class="token number">100</span>
</code></pre></div>`,r:{minutes:2.25,words:676},t:"Ini文件读写",y:"a"}}],["/dotnet/commonMethod/ipchuli.html",{loader:()=>a(()=>import("./ipchuli.html-DCaFjmaS.js"),__vite__mapDeps([209,1])),meta:{a:"azrng",d:16491168e5,l:"2022年4月5日",c:["dotNET"],g:["无"],o:!0,e:`<h3>IPAddressRange</h3>
<p>通过引用nuget包IPAddressRange来处理判断一个ip是否在一个ip区域内</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// rangeA.Begin is "192.168.0.0", and rangeA.End is "192.168.0.255".</span>
<span class="token class-name"><span class="token keyword">var</span></span> rangeA <span class="token operator">=</span> IPAddressRange<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.0.0/255.255.255.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rangeA<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.0.34"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is True.</span>
rangeA<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.10.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is False.</span>
rangeA<span class="token punctuation">.</span><span class="token function">ToCidrString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is 192.168.0.0/24</span>

<span class="token comment">// rangeB.Begin is "192.168.0.10", and rangeB.End is "192.168.10.20".</span>
<span class="token class-name"><span class="token keyword">var</span></span> rangeB1 <span class="token operator">=</span> IPAddressRange<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.0.10 - 192.168.10.20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rangeB1<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.3.45"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is True.</span>
rangeB1<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.0.9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is False.</span>

<span class="token comment">// 支持快捷范围描述。</span>
<span class="token comment">// ("192.168.10.10-20" means range of begin:192.168.10.10 to end:192.168.10.20.)</span>
<span class="token class-name"><span class="token keyword">var</span></span> rangeB2 <span class="token operator">=</span> IPAddressRange<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"192.168.10.10-20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 支持CIDR表达式和IPv6。</span>
<span class="token class-name"><span class="token keyword">var</span></span> rangeC <span class="token operator">=</span> IPAddressRange<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"fe80::/10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
rangeC<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"fe80::d503:4ee:3882:c586%3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is True.</span>
rangeC<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"::1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// is False.</span>
</code></pre></div>`,r:{minutes:1.75,words:525},t:"IP处理",y:"a"}}],["/dotnet/commonMethod/leizhuaiurl.html",{loader:()=>a(()=>import("./leizhuaiurl.html-ChMyS3vt.js"),__vite__mapDeps([210,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 参数拼接Url</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要拼接的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IsStrUpper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否开启转小写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>Url,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToPaeameter</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">object</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> IsStrUpper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">,</span> <span class="token string">"Unable to convert object to a dictionary. The source object is null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> property <span class="token keyword">in</span> TypeDescriptor<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> property<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>IsStrUpper<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				buff<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>WebUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> WebUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">{</span>
				buff<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>WebUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> WebUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> buff<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token char">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.44,words:132},t:"类转url",y:"a"}}],["/dotnet/commonMethod/qianggongbaosuanfa.html",{loader:()=>a(()=>import("./qianggongbaosuanfa.html-BW0XL3WZ.js"),__vite__mapDeps([211,1])),meta:{a:"azrng",d:1647216e6,l:"2022年3月14日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.1,words:29},t:"抢红包算法",y:"a"}}],["/dotnet/commonMethod/",{loader:()=>a(()=>import("./index.html-vFJXTLzO.js"),__vite__mapDeps([212,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<p><a href="https://mp.weixin.qq.com/s/HbxqxLo8Z5hXkhjUqQS3bA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/HbxqxLo8Z5hXkhjUqQS3bA</a> | DotNetCommon-搜集.neter开发常用的功能</p>
`,r:{minutes:.14,words:41},t:"说明",y:"a"}}],["/dotnet/commonNuget/communitytoolkit.html",{loader:()=>a(()=>import("./communitytoolkit.html-DiZO0pf9.js"),__vite__mapDeps([213,1])),meta:{a:"azrng",d:16797024e5,l:"2023年3月25日",c:["dotNET"],g:["toolkit"],o:!0,e:`<h2>概述</h2>
<p>是一个适用于所有.Net开发者的的帮助类库和API集合，跨平台，由微软维护和发布。
官网文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/communitytoolkit/mvvm/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/communitytoolkit/mvvm/</a></p>
<p>社区工具包文档：https://mvvm.coldwind.top/</p>
<h2>包细分</h2>`,r:{minutes:.98,words:295},t:"CommunityToolkit",y:"a"}}],["/dotnet/commonNuget/diaoduqi.html",{loader:()=>a(()=>import("./diaoduqi.html-sSJPQPHP.js"),__vite__mapDeps([214,1])),meta:{a:"azrng",d:16822944e5,l:"2023年4月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>NCrontab</h2>
<p>NCrontab 是 .NET Standard 1.0 支持的所有 .NET 运行时的 crontab。它提供 crontab 表达式的解析和格式化，以及根据以 crontab 格式表示的计划计算时间的出现次数。</p>
<p>帮助类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CronHelper</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 尝试转换为Cron表达式</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cron<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> cron<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            CrontabSchedule<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 尝试获取下一个CRON表达式的时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateTime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cron<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> <span class="token function">GetNextTime</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> dateTime<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> cron<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ex <span class="token operator">=</span> CrontabSchedule<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>cron<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CrontabSchedule<span class="token punctuation">.</span>ParseOptions</span> <span class="token punctuation">{</span> IncludingSeconds <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">GetNextOccurrence</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.6,words:181},t:"调度器",y:"a"}}],["/dotnet/commonNuget/file.html",{loader:()=>a(()=>import("./file.html-CkxMIMZ4.js"),__vite__mapDeps([215,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>路径</h2>
<p>获取程序运行目录，可以通过引用下面的nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.DotNet.PlatformAbstractions"</span> Version<span class="token operator">=</span><span class="token string">"3.1.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:5.59,words:1677},t:"文件",y:"a"}}],["/dotnet/commonNuget/fluentftp.html",{loader:()=>a(()=>import("./fluentftp.html-_g63GX7K.js"),__vite__mapDeps([216,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>项目中经常涉及到将文件批量上传到其它空间或服务器，这个时候我们有可能需要用到FTP协议进行传输，所以这里我推荐使用FluentFTP，一款很好用的FTP传输框架。
github地址：<a href="https://github.com/robinrodricks/FluentFTP" target="_blank" rel="noopener noreferrer">https://github.com/robinrodricks/FluentFTP</a></p>
<h2>安装</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"FluentFTP"</span> Version<span class="token operator">=</span><span class="token string">"35.2.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.66,words:1097},t:"FluentFTP",y:"a"}}],["/dotnet/commonNuget/hanshushibiancheng.html",{loader:()=>a(()=>import("./hanshushibiancheng.html-Df1B8uY9.js"),__vite__mapDeps([217,1])),meta:{a:"azrng",d:16676928e5,l:"2022年11月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>LanguageExt</h2>
<p>这个库使用c#的特性来提供一个函数式编程“基类库”
仓库地址：<a href="https://github.com/louthy/language-ext" target="_blank" rel="noopener noreferrer">https://github.com/louthy/language-ext</a></p>
<p>nuget包</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;PackageReference Include="LanguageExt.Core" Version="4.3.2-beta" /&gt;
</code></pre></div>`,r:{minutes:.24,words:71},t:"函数式编程",y:"a"}}],["/dotnet/commonNuget/ikvmOperation.html",{loader:()=>a(()=>import("./ikvmOperation.html-D6cE5PS3.js"),__vite__mapDeps([218,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["dotNet"],g:["ikvm"],o:!1,e:`<h2>IKVM是什么？</h2>
<p>从GitHub摘抄说明：IKVM 是 Microsoft .NET 平台的 Java 实现。它可用于快速轻松地：</p>
<ul>
<li>在 .NET Framework 或 .NET Core 上执行已编译的 Java 代码（字节码）</li>
<li>将字节码转换为 .NET 程序集，以在 .NET 项目中直接访问其 API</li>
</ul>
<p><strong>无需将源代码移植</strong>到 .NET 即可完成这些任务。</p>
<p>GitHub文档地址：https://github.com/ikvmnet/ikvm</p>
<h2>用法</h2>`,r:{minutes:4.14,words:1241},t:"IKVM操作",y:"a"}}],["/dotnet/commonNuget/jiaobenjieshiqi.html",{loader:()=>a(()=>import("./jiaobenjieshiqi.html-DiI2ShmB.js"),__vite__mapDeps([219,1])),meta:{a:"azrng",d:16915392e5,l:"2023年8月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Jint</h2>
<p>Jint 是 .NET 的 Javascript 解释器，可以在任何现代 .NET 平台上运行，因为它支持 .NET 标准 2.0 和 .NET 4.6.2 目标（及更高版本）。</p>
<p>下载量：6.06M</p>
<h3>操作</h3>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Jint"</span> Version<span class="token operator">=</span><span class="token string">"2.11.58"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.34,words:403},t:"脚本解释器",y:"a"}}],["/dotnet/commonNuget/kongzhitaishuchu.html",{loader:()=>a(()=>import("./kongzhitaishuchu.html-WmrXpGLi.js"),__vite__mapDeps([220,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>有时候需要临时编写测试代码，会使用LINQPad进行编写代码，虽然该工具很轻量级，还可以安装Nuget包，特别合适写测试demo等(目前我只是简单测试使用)，但是有时候还是习惯使用Visual Studio编写代码，感觉提示的效果更好，所以就是还是习惯性去开Visual Studio。</p>
<h2>然而</h2>
<p>LINQPad里面的Dump扩展方法确实用着很舒服，比如我们这么使用</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 输出对象</span>
	p<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">{</span>
		<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">"李四"</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">"王五"</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:3.18,words:953},t:"控制台输出",y:"a"}}],["/dotnet/commonNuget/minglinghang.html",{loader:()=>a(()=>import("./minglinghang.html-Ce_fvfr6.js"),__vite__mapDeps([221,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>CommandLineParser</h2>
<p>用于 .NET 的简洁语法 C# 命令行分析器</p>
<p>仓库地址：https://github.com/commandlineparser/commandline</p>
<h3>示例</h3>
<p>安装nuget包</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>&lt;ItemGroup&gt;
&lt;PackageReference Include="CommandLineParser" Version="2.9.1" /&gt;
&lt;/ItemGroup&gt;
</code></pre></div>`,r:{minutes:2.94,words:881},t:"命令行",y:"a"}}],["/dotnet/commonNuget/shijianchuli.html",{loader:()=>a(()=>import("./shijianchuli.html-gT__x83f.js"),__vite__mapDeps([222,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>引言</h2>
<p>Linux和Windows两者所采用的时区不同，两者的时区分别为：Linux：IANA，Windows:Windows time zone IDs。为了让两者采用同一个时区，最终统一采用IANA。</p>
<h2>NodaTime</h2>
<p>Noda Time 是一个日期和时间 API，可替代 .NET 中内置的 DateTime/DateTimeOffset 等类型。</p>
<p>使用场景：比如你部署到linux上的时候，发现DateTime.New获取到的时间和windows时间不一致，获取到的时间比系统时间早了8个小时，原因就是linux和windows两者采用的时区不同，两者的时区分别为：Linux：IANA，Windows:Windows time zone IDs，这个时候就需要使用该软件来实现采用同一个时区</p>`,r:{minutes:1.6,words:479},t:"时间处理",y:"a"}}],["/dotnet/commonNuget/textOperation.html",{loader:()=>a(()=>import("./textOperation.html-D0L3CM3p.js"),__vite__mapDeps([223,1])),meta:{a:"azrng",d:17079552e5,l:"2024年2月15日",c:["dotNET"],g:["text"],o:!0,e:`<h2>Slugify可读性强的URL</h2>
<p>Microsoft .NET 的简单 Slug / Clean URL 生成器帮助程序。可以实现任何字符串的连字符、小写字符、字母数字版本，删除变音符号，折叠空格和破折号以及修建空格。</p>
<p>Nuget：https://www.nuget.org/packages/Slugify.Core</p>
<p>简单示例，安装nuget包</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>PM&gt; Install-Package Slugify.Core
</code></pre></div>`,r:{minutes:1.46,words:437},t:"文本处理",y:"a"}}],["/dotnet/commonNuget/tongyong.html",{loader:()=>a(()=>import("./tongyong.html-CwEjqogz.js"),__vite__mapDeps([224,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["dotNET"],g:["无"],o:!0,e:`<h2>工具类库汇总</h2>
<p>https://gitee.com/FenRuiDangDeFuLangXiSi/CosyNest | 刘晓阳/CosyNest - 码云 - 开源中国   工具类库</p>
<h3>Masuit.Tools</h3>
<p>https://gitee.com/masuit/Masuit.Tools | 懒得勤快的码数吐司工具库</p>
<p>特色功能</p>
<ul>
<li>LargeMemoryStream：支持操作最大1TB的内存</li>
</ul>
<h2>ConfigureAwait</h2>
<h3>ConfigureAwaitChecker.Analyzer</h3>`,r:{minutes:2.92,words:876},t:"通用",y:"a"}}],["/dotnet/console/changyongcaozuo.html",{loader:()=>a(()=>import("./changyongcaozuo.html-Dl0WAjti.js"),__vite__mapDeps([225,1])),meta:{a:"azrng",d:16586208e5,l:"2022年7月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>对控制台实现以下操作</p>
<ul>
<li>配置的获取</li>
<li>DI注入</li>
</ul>
<h2>实现</h2>
<p>创建CreateHostHelper类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CreateHostHelper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHost</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//设置当前环境</span>
        <span class="token class-name"><span class="token keyword">var</span></span> environmentName <span class="token operator">=</span> <span class="token string">"Development"</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 定义 Serilog 配置</span>
        Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//初始化 Logger 配置</span>
            <span class="token punctuation">.</span>ReadFrom<span class="token punctuation">.</span><span class="token function">Configuration</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//将 Serilog 连接到我们的配置</span>
            <span class="token punctuation">.</span>Enrich<span class="token punctuation">.</span><span class="token function">FromLogContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//从装入的 Serilog 向日志添加更多信息</span>
            <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//决定在哪里显示日志</span>
            <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化 Logger</span>

        Log<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token string">"Application Starting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                config<span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                config<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                config<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.{env.EnvironmentName}.json"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                config<span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    config<span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostContext<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//添加默认服务</span>
                services<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//其他服务</span>
                services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogService<span class="token punctuation">,</span> LogService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseEnvironment</span><span class="token punctuation">(</span>environmentName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加serilog</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1,words:300},t:"常用操作",y:"a"}}],["/dotnet/csharp/bulongguolvqi.html",{loader:()=>a(()=>import("./bulongguolvqi.html-BExQ6wm5.js"),__vite__mapDeps([226,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个非常节省空间的概率数据结构，运行速度快、占用内存小，但是有一定的误判率且无法删除元素。
本质上由一个位数组(每个元素都只占用1bit)和n个哈希函数组成。</p>
<h2>特性</h2>
<ul>
<li>检查一个元素是否在集成中；</li>
<li>检查结果分为2种：一定不在集合中、可能在集合中；</li>
<li>布隆过滤器支持添加元素、检查元素，但是不支持删除元素；</li>
<li>检查结果的“可能在集合中”说明存在一定误判率；
<ul>
<li>已经添加进入布隆过滤器的元素是不会被误判的，仅未添加过的元素才可能被误判；</li>
</ul>
</li>
<li>添加的元素超过预设容量越多，误报的可能性越大。</li>
</ul>`,r:{minutes:5.66,words:1699},t:"布隆过滤器",y:"a"}}],["/dotnet/csharp/changedaimajiexi.html",{loader:()=>a(()=>import("./changedaimajiexi.html-B4sVfTcA.js"),__vite__mapDeps([227,1])),meta:{a:"azrng",d:17001792e5,l:"2023年11月17日",c:["csharp"],g:["无"],o:!0,e:`<h4>获取IP地址</h4>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Request<span class="token punctuation">.</span>UserHostAddress<span class="token punctuation">.</span>ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
string userip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">"HTTP_VIA"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">null</span><span class="token punctuation">)</span>
{
	userip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token keyword">Current</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">"HTTP_X_FORWARDED_FOR"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
}
<span class="token keyword">else</span>
{
	userip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token keyword">Current</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
}
</code></pre></div>`,r:{minutes:1.45,words:436},t:"单个代码解析",y:"a"}}],["/dotnet/csharp/clr.html",{loader:()=>a(()=>import("./clr.html-BXVvPIbM.js"),__vite__mapDeps([228,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>公共语言运行时介绍：<a href="https://cwoodruff.gitbooks.io/the-book-of-the-runtime/content/introduction-to-the-common-language-runtime.html" target="_blank" rel="noopener noreferrer">https://cwoodruff.gitbooks.io/the-book-of-the-runtime/content/introduction-to-the-common-language-runtime.html</a></p>`,r:{minutes:.19,words:58},t:"CLR",y:"a"}}],["/dotnet/csharp/cSharpStandard.html",{loader:()=>a(()=>import("./cSharpStandard.html-Biht69ni.js"),__vite__mapDeps([229,1])),meta:{t:"CSharp规范"}}],["/dotnet/csharp/cunchujiegou.html",{loader:()=>a(()=>import("./cunchujiegou.html-C1kEHX40.js"),__vite__mapDeps([230,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>c#中包含三类内存：托管堆、非托管堆、栈，其中运行中的 .NET 应用程序使用两个区域来存储数据：<strong>栈</strong>和<strong>托管堆</strong>，其中<strong>托管堆</strong>简称为<strong>堆</strong>。</p>
<h3>三大内存区域</h3>
<ul>
<li>托管堆内存：由GC管理的内存，<code>new</code>一个<code>class</code>，<code>class</code>的本体就在托管堆上，交给GC来管理</li>
<li>非托管内存：可以通过Marshal.AllocHGlobal 和 Marshal.FreeHGlobal 方法来分配和释放内存，这里得到的内存是非托管堆内存，GC 管不着，自己进行管理</li>
<li>栈内存：可以进行栈上进行一些内存操作。</li>
</ul>`,r:{minutes:4.63,words:1390},t:"存储结构",y:"a"}}],["/dotnet/csharp/digui.html",{loader:()=>a(()=>import("./digui.html-B-0WT-vt.js"),__vite__mapDeps([231,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>递归确实是一个奇妙的思维方式。对一些简单的递归问题，我们总是惊叹于递归描述问题的能力和编写代码的简洁，但要想真正领悟递归的精髓、灵活地运用递归思想来解决问题却并不是一件容易的事情。
递归：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开它。若干次之后，你打开面前的门后，发现只有一间屋子，没有门了。然后，你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这你把钥匙打开了几扇门。
循环：你打开面前这扇门，看到屋里面还有一扇门。你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门（若前面两扇门都一样，那么这扇门和前两扇门也一样；如果第二扇门比第一扇门小，那么这扇门也比第二扇门小，你继续打开这扇门，一直这样继续下去直到打开所有的门。但是，入口处的人始终等不到你回去告诉他答案。</p>`,r:{minutes:2.64,words:793},t:"递归",y:"a"}}],["/dotnet/csharp/dingshiqi.html",{loader:()=>a(()=>import("./dingshiqi.html-C8uAAk9d.js"),__vite__mapDeps([232,1])),meta:{a:"azrng",d:16982784e5,l:"2023年10月26日",c:["csharp"],g:["无"],o:!0,e:`<h2>Timer</h2>
<p>TimerCallback委托专门用于定时器的操作，这个委托允许我们定义一个定时任务，在指定的间隔之后重复调用。实际的类型与ParameterizedThreadStart委托是一样的。
Timer类的构造函数定义如下：
public Timmer(TimerCallback callback,Object state,long dueTime,long period)
Callback表示一个时间到达时执行的委托，这个委托代表的方法必须符合委托TimerCallback的定义。
State表示当调用这个定时器委托时传递的参数。
dutTime表示从创建定时器到第一次调用时延迟的时间，以毫秒为单位。
Period表示定时器开始之后，每次调用之间的时间间隔，以毫秒为单位。
示例,使用TimerCallback每隔一秒钟输出一次时间：</p>`,r:{minutes:1.75,words:526},t:"定时器",y:"a"}}],["/dotnet/csharp/dongtaishengchengdaima.html",{loader:()=>a(()=>import("./dongtaishengchengdaima.html-CO3WFiJM.js"),__vite__mapDeps([233,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>ClassDescription</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassDescription</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ModuleName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AssemblyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ClassName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>PropertyDescription<span class="token punctuation">&gt;</span></span> Properties <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyDescription</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> Type <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.63,words:1690},t:"动态生成代码",y:"a"}}],["/dotnet/csharp/dtohepoco.html",{loader:()=>a(()=>import("./dtohepoco.html-64_Nu1IT.js"),__vite__mapDeps([234,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h3>数据传输对象 (DTO)</h3>
<p>DTO 是“数据传输对象”。它是一个目的是传输数据的对象。根据定义，DTO 应该只包含数据，而不是逻辑或行为。**如果 DTO 包含逻辑，则它不是 DTO。**但是等等，什么是“逻辑”或“行为”？
通常，逻辑和行为是指类型上的方法。在 C## 中，DTO 应该只有属性，并且这些属性应该只获取和设置数据，而不是验证数据或对其执行其他操作。</p>
<h4>属性和数据注释呢？</h4>
<p>将元数据添加到 DTO 以使其支持模型验证或类似目的并不罕见。这些属性不会向 DTO 本身添加任何行为，而是促进系统中其他地方的行为。因此，它们不会违反 DTO 不应包含任何行为的“规则”。</p>`,r:{minutes:8.08,words:2423},t:"DTO和POCO",y:"a"}}],["/dotnet/csharp/emit.html",{loader:()=>a(()=>import("./emit.html-BKsW4tZz.js"),__vite__mapDeps([235,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>Emit则可以在运行时动态生成代码。
一个程序集的层级：方法=&gt;类型=&gt;模块=&gt;程序集</p>
<h2>操作</h2>
<blockquote>
<p>.net&nbsp;fw项目，可以实现程序集的运行和保存，但是.Net&nbsp;Core的就只能运行了</p>
</blockquote>
<h3>动态生成代码输出</h3>
<p>通过构建程序集等动态生成一个方法，然后通过反射执行方法然后输出信息</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//方法=&gt;类型=&gt;模块=&gt;程序集</span>

<span class="token comment">//定义程序集名称</span>
<span class="token class-name"><span class="token keyword">var</span></span> _assemblyName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyName</span><span class="token punctuation">(</span><span class="token string">"DynamicAssemblyDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个程序集构建器</span>
<span class="token comment">// Framework 也可以这样：AppDomain.CurrentDomain.DefineDynamicAssembly</span>
<span class="token class-name">AssemblyBuilder</span> ab <span class="token operator">=</span> AssemblyBuilder<span class="token punctuation">.</span><span class="token function">DefineDynamicAssembly</span><span class="token punctuation">(</span>_assemblyName<span class="token punctuation">,</span> AssemblyBuilderAccess<span class="token punctuation">.</span>Run<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用程序集构建器创建一个模块构建器</span>
<span class="token class-name">ModuleBuilder</span> mb <span class="token operator">=</span> ab<span class="token punctuation">.</span><span class="token function">DefineDynamicModule</span><span class="token punctuation">(</span>_assemblyName<span class="token punctuation">.</span>Name<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用模块构建器创建一个类型构建器</span>
<span class="token class-name">TypeBuilder</span> tb <span class="token operator">=</span> mb<span class="token punctuation">.</span><span class="token function">DefineType</span><span class="token punctuation">(</span><span class="token string">"DynamicConsole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使类型实现IConsole接口</span>
tb<span class="token punctuation">.</span><span class="token function">AddInterfaceImplementation</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IConsole</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> attrs <span class="token operator">=</span> MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Virtual <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>NewSlot <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>HideBySig <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Final<span class="token punctuation">;</span>

<span class="token comment">// 使用类型构建器创建一个方法构建器</span>
<span class="token class-name">MethodBuilder</span> methodBuilder <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token string">"Say"</span><span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过方法构建器获取一个MSIL生成器</span>
<span class="token class-name"><span class="token keyword">var</span></span> IL <span class="token operator">=</span> methodBuilder<span class="token punctuation">.</span><span class="token function">GetILGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始编写方法的执行逻辑</span>

<span class="token comment">// 将一个字符串压入栈顶</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldstr<span class="token punctuation">,</span> <span class="token string">"I'm here."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用Console.Writeline函数</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Call<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"WriteLine"</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 退出函数</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//方法结束</span>

<span class="token comment">// 从类型构建器中创建出类型</span>
<span class="token class-name"><span class="token keyword">var</span></span> dynamicType <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">CreateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//ab.Save(aName.Name + ".dll");</span>
<span class="token comment">// 通过反射创建出动态类型的实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> console <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>dynamicType<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">IConsole</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ab.Save("DynamicAssemblyExample.dll");</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"不错，完成了任务!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 输出</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IConsole</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 说</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.57,words:470},t:"Emit",y:"a"}}],["/dotnet/csharp/jiaoyanfangfa.html",{loader:()=>a(()=>import("./jiaoyanfangfa.html-26NvbwHM.js"),__vite__mapDeps([236,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<p>邮箱验证</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValidEmail</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> valueAsString<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// only return true if there is only 1 '@' character</span>
	<span class="token comment">// and it is neither the first nor the last character</span>
	<span class="token class-name"><span class="token keyword">int</span></span> index <span class="token operator">=</span> valueAsString<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token char">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> index <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
		index <span class="token operator">!=</span> valueAsString<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
		index <span class="token operator">==</span> valueAsString<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token char">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.29,words:86},t:"校验方法",y:"a"}}],["/dotnet/csharp/kaobeifangfa.html",{loader:()=>a(()=>import("./kaobeifangfa.html-pK4V_U_6.js"),__vite__mapDeps([237,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>clone是深拷贝，copy是浅拷贝，如果是值类型的话是没什么区别的，如果是引用类型的话深拷贝拷贝的事整个对象的数据，而浅拷贝仅仅拷贝对象的引用。因为类的实例是引用类型，要想用原有的类中的实例的数据的话，既要想创建原对象的一个副本的话,只能用clone方法。Clone方法分为深clone和浅clone 。</p>
<h2>深拷贝</h2>
<h3>手动克隆</h3>
<p>一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。</p>`,r:{minutes:2.81,words:844},t:"拷贝方法",y:"a"}}],["/dotnet/csharp/leixingzhuaihuan.html",{loader:()=>a(()=>import("./leixingzhuaihuan.html-DTMFXRVV.js"),__vite__mapDeps([238,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>对象引用可以：</p>
<ul>
<li>隐式向上转换为基类的引用</li>
<li>显式向下转换为子类的引用</li>
</ul>
<h3>隐式转换</h3>
<p>子类转换为父类，这个时候是隐式转换</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 向上类型转换创建一个基类指向子类的引用</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"二哈"</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">"公"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span> animal <span class="token operator">=</span> dog<span class="token punctuation">;</span>
<span class="token comment">// 转换之后，被引用对象本身不会被替换或者改变</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dog<span class="token operator">==</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>
</code></pre></div>`,r:{minutes:2.58,words:774},t:"类型转换",y:"a"}}],["/dotnet/csharp/mingmingmoshi.html",{loader:()=>a(()=>import("./mingmingmoshi.html-Do1mdr6T.js"),__vite__mapDeps([239,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>A/HC/LC模式</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>prefix<span class="token punctuation">?</span> <span class="token operator">+</span> action <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token return-type class-name">high</span> context <span class="token punctuation">(</span>HC<span class="token punctuation">)</span> <span class="token operator">+</span> low context<span class="token punctuation">?</span> <span class="token punctuation">(</span>LC<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:.89,words:268},t:"命名模式",y:"a"}}],["/dotnet/csharp/pooling.html",{loader:()=>a(()=>import("./pooling.html-CoZmqJQG.js"),__vite__mapDeps([240,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/FpElTEuokoT1wN1nLyP0cw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/FpElTEuokoT1wN1nLyP0cw</a> | C## Pooling</p>
`,r:{minutes:.11,words:33},t:"Pooling",y:"a"}}],["/dotnet/csharp/",{loader:()=>a(()=>import("./index.html-DJE0ZVBG.js"),__vite__mapDeps([241,1])),meta:{a:"azrng",d:17001792e5,l:"2023年11月17日",c:["csharp"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>C#(C Sharp)是一门编程语言，.Net就是应用程序运行的执行环境。
系统瓶颈关键是：硬件配置、网络带宽、系统架构（分布式、集中式）、外部负载。
响应和吞吐：响应就表示应答的快慢，吞吐表示处理数量的多少。
官网文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/csharp/</a>
c#高级编程第11版系列博客：<a href="https://www.cnblogs.com/zenronphy/p/ProfessionalCSharp7.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zenronphy/p/ProfessionalCSharp7.html</a>
编码约定：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/coding-style/coding-conventions</a>
搜索代码片段：<a href="https://www.dotnetperls.com/" target="_blank" rel="noopener noreferrer">https://www.dotnetperls.com/</a></p>`,r:{minutes:4.12,words:1235},t:"说明",y:"a"}}],["/dotnet/csharp/wanglao.html",{loader:()=>a(()=>import("./wanglao.html-DP7qfwDO.js"),__vite__mapDeps([242,1])),meta:{a:"azrng",d:16983648e5,l:"2023年10月27日",c:["csharp"],g:["无"],o:!0,e:`<blockquote>
<p>本文为读书笔记
示例代码环境：vs2022+.Net6</p>
</blockquote>
<h2>概述</h2>
<p>.NET Framework在System.Net.*命名空间中包含了支持各种网络标准的类，支持的标准包括HTTP、TCP/IP以及FTP等。
以下列出了其中的主要组件：</p>
<ul>
<li>WebClient类：支持通过HTTP或者FTP执行简单的下载/上传操作。</li>
<li>WebRequest和WebResponse类：可以从底层控制客户端HTTP或FTP操作。·</li>
<li>HttpClient类：消费HTTP Web API和RESTful服务。</li>
<li>HttpListener类：用于编写HTTP服务器。</li>
<li>SmtpClient类：构造并通过SMTP协议发送邮件。</li>
<li>Dns类：用于进行域名和地址之间的转换。</li>
<li>TcpClient、UdpClient、TcpListener和Socket类：用于直接访问传输层和网络层。</li>
</ul>`,r:{minutes:12.38,words:3713},t:"网络",y:"a"}}],["/dotnet/csharp/yasuhejieyasu.html",{loader:()=>a(()=>import("./yasuhejieyasu.html-CuCd0ge1.js"),__vite__mapDeps([243,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>涉及到存入到数据库或者http传输的数据量比较大，这个时候，就需要考虑在存入数据库或者发送传输之前，将数据压缩下，当从数据库中取出时，再解压还原数据。通过GZipStream实现压缩和解压缩字符串。</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GZipStreamHelper</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 压缩字符串，回传 Base64 結果</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ZipText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> inputBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">ZipText</span><span class="token punctuation">(</span>inputBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 压缩数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputBytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ZipText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> inputBytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name">MemoryStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">GZipStream</span> gs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GZipStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> CompressionMode<span class="token punctuation">.</span>Compress<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            gs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>inputBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inputBytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> outputBytes <span class="token operator">=</span> outputStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>outputBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 解压缩字符串</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zippedText<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">UnzipZippedText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> zippedText<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>zippedText<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">string</span></span> unzipedText <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>zippedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MemoryStream</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">GZipStream</span> zipStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GZipStream</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> CompressionMode<span class="token punctuation">.</span>Decompress<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> streamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>zipStream<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                unzipedText <span class="token operator">=</span> streamReader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            unzipedText <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> unzipedText<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1,words:300},t:"压缩和解压缩",y:"a"}}],["/dotnet/csharp/yichang.html",{loader:()=>a(()=>import("./yichang.html-BD5LTGNa.js"),__vite__mapDeps([244,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>异常的处理</p>
<h2>异常类</h2>
<p>xxx</p>
<h2>捕获异常</h2>
<p>xxx</p>
<h2>自定义异常</h2>
<p>我们可以通过继承自Exception来编写自定义异常</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseCustomerException</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Exception</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">BaseCustomerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">BaseCustomerException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">BaseCustomerException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> code<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ErrorCode <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">BaseCustomerException</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token class-name">Exception</span> innerException<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> innerException<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">HttpStatusCode</span> HttpCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> HttpStatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 异常编码</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ErrorCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.6,words:1079},t:"异常",y:"a"}}],["/dotnet/csharp/yuyanbanbenjilu.html",{loader:()=>a(()=>import("./yuyanbanbenjilu.html-z7h4D9rX.js"),__vite__mapDeps([245,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<blockquote>
<p>检测当前语言版本：#error version</p>
</blockquote>
<h2>C## 6中新增的功能</h2>
<h3>1.get 只读属性</h3>
<p>简洁的语法来创建不可变类型，仅有get访问器：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:13.3,words:3989},t:"语言版本记录",y:"a"}}],["/dotnet/csharp/zhengzebiaodashijiaoyan.html",{loader:()=>a(()=>import("./zhengzebiaodashijiaoyan.html-DdW1vCSV.js"),__vite__mapDeps([246,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>网站</h2>
<p>学习正则表达式：<a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md" target="_blank" rel="noopener noreferrer">https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md</a>
菜鸟教程：<a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/regexp/regexp-tutorial.html</a>
开源中国在线测试：<a href="https://tool.oschina.net/regex/" target="_blank" rel="noopener noreferrer">https://tool.oschina.net/regex/</a>
正则表达式在线测试网站：<a href="https://regex101.com/" target="_blank" rel="noopener noreferrer">https://regex101.com/</a>
正则表达式可视化查看网站：<a href="https://wangwl.net/static/projects/visualRegex" target="_blank" rel="noopener noreferrer">https://wangwl.net/static/projects/visualRegex</a>
如何看懂复杂的正则表达式：<a href="https://www.cnblogs.com/superstar/p/6638970.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/superstar/p/6638970.html</a></p>`,r:{minutes:8.37,words:2512},t:"正则表达式校验",y:"a"}}],["/dotnet/cuowuchuli/shibairenwuchongshi.html",{loader:()=>a(()=>import("./shibairenwuchongshi.html-ECaKwbef.js"),__vite__mapDeps([247,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h3>说明</h3>
<p>异常是指方法没有完成应该完成的任务。有时候需要对一些失败的任务进行多次的重试操作，如果重试达到指定数目，就不再重试。(由于网络波动导致任务处理失败)</p>
<h3>示例</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CommonTools</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token class-name">NLog<span class="token punctuation">.</span>Logger</span> logger <span class="token operator">=</span> NLog<span class="token punctuation">.</span>LogManager<span class="token punctuation">.</span><span class="token function">GetCurrentClassLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> sleepMillisecondsTimeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 若发生 Exception (资料库查询时候)，重复执行相同的动作</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>retryTimes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>预设重试 3次，传入 0直接 return default(T)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Retry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> retryTimes <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                retryTimes<span class="token operator">--</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"剩余重试次数: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">retryTimes</span><span class="token punctuation">}</span></span><span class="token string">, retry error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">, Exception detail: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepMillisecondsTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">Retry</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 传入多个动作，遇到 Exception依序执行 (资料库查詢超时，改用不同条件查询)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handlers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Retry</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> handlers<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handlers<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"第 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">次执行错误(start from 0): retry error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">, Exception detail: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepMillisecondsTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 若发生生 Exception (资料库查询时候)，重复执行相同的动作</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>retryTimes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>预设重试 3次，传入 0直接 return<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Retry</span><span class="token punctuation">(</span><span class="token class-name">Action</span> handler<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> retryTimes <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                retryTimes<span class="token operator">--</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"剩余重试次数: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">retryTimes</span><span class="token punctuation">}</span></span><span class="token string">, retry error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">, Exception detail: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleepMillisecondsTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">Retry</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.35,words:404},t:"失败任务重试",y:"a"}}],["/dotnet/daimafenxi/daimazhiliang.html",{loader:()=>a(()=>import("./daimazhiliang.html-BZx-8oB7.js"),__vite__mapDeps([248,1])),meta:{a:"azrng",d:16822944e5,l:"2023年4月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>SonarQube</h2>
<p>聊一聊如何用SonarQube管理.NET代码质量：<a href="https://mp.weixin.qq.com/s/LU-Y5NWwzDdHzsPsKcIhrg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LU-Y5NWwzDdHzsPsKcIhrg</a></p>
<p>插件：<a href="https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2022" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2022</a></p>`,r:{minutes:.2,words:59},t:"代码质量",y:"a"}}],["/dotnet/daimafenxi/fenxigongju.html",{loader:()=>a(()=>import("./fenxigongju.html-Dijp0XHS.js"),__vite__mapDeps([249,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>MiniProfiler</h2>
<h3>概述</h3>
<p>一个简单但有效的mini分析器。
官网：<a href="https://miniprofiler.com/" target="_blank" rel="noopener noreferrer">https://miniprofiler.com/</a></p>
<h3>安装组件</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package MiniProfiler.AspNetCore.Mvc
</code></pre></div>`,r:{minutes:1.92,words:575},t:"分析工具",y:"a"}}],["/dotnet/daimafenxi/",{loader:()=>a(()=>import("./index.html-C4OmwCmy.js"),__vite__mapDeps([250,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET Compiler Platform (Roslyn) 分析器会检查 C## 或 Visual Basic 代码的代码质量和样式问题。 从 .NET 5 开始，这些分析器包含在 .NET SDK 中，无需单独安装。 如果项目面向 .NET 5 或更高版本，则默认启用代码分析。 如果项目面向之前版本的 .NET 实现（例如 .NET Core、. NET Standard 或 .NET Framework），则必须通过将 <a href="https://learn.microsoft.com/zh-cn/dotnet/core/project-sdk/msbuild-props#enablenetanalyzers" target="_blank" rel="noopener noreferrer">EnableNETAnalyzers</a> 属性设置为true以手动启用代码分析。</p>`,r:{minutes:4.04,words:1211},t:"说明",y:"a"}}],["/dotnet/daimafenxi/yuandaimafenxi.html",{loader:()=>a(()=>import("./yuandaimafenxi.html-MqJnVTha.js"),__vite__mapDeps([251,1])),meta:{a:"azrng",d:16866144e5,l:"2023年6月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>NET Compiler Platform (Roslyn) 分析器会检查 C## 或 Visual Basic 代码的代码质量和样式问题。 从 .NET 5 开始，这些分析器包含在 .NET SDK 中，无需单独安装。 如果项目面向 .NET 5 或更高版本，则默认启用代码分析(无需在配置)。 如果项目面向其他 .NET 实现（例如 .NET Core(低版本)、.NET Standard 或 .NET Framework），则必须将 EnableNETAnalyzers 属性设置为 来手动启用代码分析。
如果你不想移动到 .NET 5+ SDK、具有非 SDK 样式的 .NET Framework 项目或更倾向于使用基于 NuGet 包的模型，则也可以安装Nuget包 Microsoft.CodeAnalysis.NetAnalyzers来使用该分析器。</p>`,r:{minutes:1.65,words:496},t:"源代码分析",y:"a"}}],["/dotnet/daimayouhua/daimayouhua.html",{loader:()=>a(()=>import("./daimayouhua.html-BW2_2Meg.js"),__vite__mapDeps([252,1])),meta:{a:"azrng",d:1694736e6,l:"2023年9月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/5XFBYPD15oQtiLvFF8nYjA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/5XFBYPD15oQtiLvFF8nYjA</a> | .NET 代码优化，聊聊逻辑圈复杂度
<a href="https://mp.weixin.qq.com/s/tDl3oYLRg56SvaDxKvmwjA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/tDl3oYLRg56SvaDxKvmwjA</a> | C#性能优化-树形结构递归优化</p>`,r:{minutes:.21,words:64},t:"代码优化",y:"a"}}],["/dotnet/daimayouhua/quanjuxingnengzhenduangongju.html",{loader:()=>a(()=>import("./quanjuxingnengzhenduangongju.html-Chonoaww.js"),__vite__mapDeps([253,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>现在<code>.NET Core</code> 上线后，不可避免的会出现各种问题，如内存泄漏、CPU占用高、接口处理耗时较长等问题。这个时候就需要快速准确的定位问题，并解决。这时候就可以使用<code>.NET Core </code>为开发人员提供了一系列功能强大的诊断工具。
接下来就详细了解下：<code>.NET Core</code>全局诊断工具</p>
<ul>
<li>dotnet-counters</li>
<li>dotnet-dump</li>
<li>dotnet-gcdump</li>
<li>dotnet-trace</li>
<li>dotnet-symbol</li>
<li>dotnet-sos</li>
</ul>`,r:{minutes:6.87,words:2061},t:"全局性能诊断工具",y:"a"}}],["/dotnet/debugging/dumpAnalyses.html",{loader:()=>a(()=>import("./dumpAnalyses.html-CJUx2dLJ.js"),__vite__mapDeps([254,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>C#内存转储，或称为<code>dump</code>文件，是应用程序在特定时刻状态的快照。可以把程序的执行状态通过调试器保存到dump文件中，它们对于诊断问题（如性能问题、崩溃和内存泄漏）非常有帮助。</p>
<h2>什么是内存转储</h2>
<p>内存转储实质上是一个应用程序在特定点状态的快照。它包含了与应用程序相关的系统内存中的所有内容，包括变量、线程和堆栈跟踪。当进行调试，特别是尝试复制难以重现的错误时，这些数据可能会非常有用。</p>
<blockquote>
<p>内容来自：https://mp.weixin.qq.com/s/YfkO6cVrwXn0x0PlHmMfrg</p>
</blockquote>`,r:{minutes:6.09,words:1826},t:"内存转储Dump",y:"a"}}],["/dotnet/debugging/",{loader:()=>a(()=>import("./index.html-DdsYjZw9.js"),__vite__mapDeps([255,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>调试工具</h2>
<ul>
<li>dotnet-counters: 实时统计runtime的状况, 包括 CPU、内存、GC、异常等</li>
<li>dotnet-trace: 类似性能探测器</li>
<li>dotnet-dump: 程序崩溃时使用该工具</li>
</ul>
`,r:{minutes:.23,words:70},t:"说明",y:"a"}}],["/dotnet/debugging/vs2022yuanchengdiaoshiiisfuwu.html",{loader:()=>a(()=>import("./vs2022yuanchengdiaoshiiisfuwu.html-DL1f5O_-.js"),__vite__mapDeps([256,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>当有些情况，测试环境又bug，但是本地有不好复现或者没法复现的时候，这时候就需要用到远程调试了，通过在测试环境上安装一个调试工具，然后就可以在本地运行代码来远程连接到测试服务器来调试代码。</p>
<blockquote>
<p>当前项目是一个老项目，部署在IIS中</p>
</blockquote>
<h2>准备</h2>
<p>首先我们需要先准备工具，可以直接去官网进行下载安装
<img src="/common/1680529071192-18572334-1f94-40d0-ab3c-8fec3dc7a612.png" alt="image.png" loading="lazy">
下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/?rr=https://docs.microsoft.com/en-us/visualstudio/debugger/remote-debugging?view=vs-2022" target="_blank" rel="noopener noreferrer">https://visualstudio.microsoft.com/zh-hans/downloads/?rr=https://docs.microsoft.com/en-us/visualstudio/debugger/remote-debugging?view=vs-2022</a></p>`,r:{minutes:3.17,words:950},t:"VS2022远程调试IIS服务",y:"a"}}],["/dotnet/debugging/xianchengdiaoshi.html",{loader:()=>a(()=>import("./xianchengdiaoshi.html-BFVg3NOZ.js"),__vite__mapDeps([257,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过利用Vs的线程窗口来查看目前所有活动线程的运行情况以及线程目前在代码何处运行。</p>
<h2>操作</h2>
<h3>死锁测试</h3>
<p>实现一个简单的死锁程序：声明两个对象，让两个线程各自占用一个锁，然后再取拿另外一个锁，从而形成死锁</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> task1 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>DeadLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>DeadLock_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock_1<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DeadLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeadLock_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock_1<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"DeadLock_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.13,words:339},t:"线程调试",y:"a"}}],["/dotnet/debugging/xingnengdiaoshi.html",{loader:()=>a(()=>import("./xingnengdiaoshi.html-kUsI11--.js"),__vite__mapDeps([258,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>VS自带的性能监控工具提供了一些数据的监控和分析，比较常用的就是CPU使用和内存IO的监控。它支持本地启动项目的监控以及进程和可执行程序的附加。</p>
<h2>操作</h2>
<h3>CPU密集代码</h3>
<p>实现一个cpu密集的代码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">MultiRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//启动20个线程</span>
<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">MultiRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Thread<span class="token punctuation">[</span><span class="token punctuation">]</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> index <span class="token keyword">in</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tasks<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        tasks<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> Parallel<span class="token punctuation">.</span><span class="token function">ForEachAsync</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> <span class="token punctuation">(</span>task<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ValueTask<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行了"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"I AM Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.85,words:254},t:"性能调试",y:"a"}}],["/dotnet/gongnenganli/appjiekoukaifa.html",{loader:()=>a(()=>import("./appjiekoukaifa.html-9obkt4Rv.js"),__vite__mapDeps([259,1])),meta:{a:"azrng",d:16119648e5,l:"2021年1月30日",c:["dotNET"],g:["无"],o:!0,e:`<h3>接口请求类</h3>
<p>公共参数：token 客户端标识  app版本号</p>
<blockquote>
<p>这些参数通过请求头的方式传输过来</p>
</blockquote>
<h3>接口返回类</h3>
<p>code：根据不同的场景定义不同的状态code
message:返回的消息内容
data：返回的数据内容</p>
<h3>接口加密</h3>
<h3>登录互踢</h3>
<p>用户在设备上登录后，后端生成一个随机数或者guid存储起来(redis、数据库)返回给前端，前端每次都需要把这个东西传输过来，每次调用接口的时候去判断当前传输过来的值和存储的值是否一样，如果不一样，那么直接返回状态让强制退出。</p>`,r:{minutes:.69,words:206},t:"APP接口开发",y:"a"}}],["/dotnet/gongnenganli/shiyonggongneng.html",{loader:()=>a(()=>import("./shiyonggongneng.html-DNVm295e.js"),__vite__mapDeps([260,1])),meta:{a:"azrng",d:16922304e5,l:"2023年8月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>固定时间限制</h2>
<p>通过在程序中内置一个结束时间，然后每次登录等将获取获取的时间和这个时间进行对比检测，如果超过那么就禁止使用</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"[controller]"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">VerifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> serviceUrl <span class="token operator">=</span> <span class="token string">"http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp"</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetTimeResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> convertTimestamp <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>T<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>convertTimestamp<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 时间转换失败  当网络异常处理</span>
            <span class="token keyword">return</span> <span class="token string">"当前时间转换失败"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currTime <span class="token operator">=</span> timeStamp<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> endTimeStr <span class="token operator">=</span> <span class="token string">"202304210947"</span><span class="token punctuation">;</span><span class="token comment">// 试用的结束时间</span>
        <span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">TryParseExact</span><span class="token punctuation">(</span>endTimeStr<span class="token punctuation">,</span> <span class="token string">"yyyyMMddHHmm"</span><span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">,</span> DateTimeStyles<span class="token punctuation">.</span>AdjustToUniversal<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 获取结束时间失败，被人修改</span>
            <span class="token keyword">return</span> <span class="token string">"获取结束时间失败"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currTime <span class="token operator">&gt;</span> endTime<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"超过试用期"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 获取时间戳时间返回类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetTimeResult</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// api名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> api <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 版本</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> v <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">//响应是否成功</span>
    <span class="token comment">//public string[] ret { get; set; }</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 返回的时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimestampInfo</span> data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimestampInfo</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 毫秒时间戳</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> T <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.98,words:294},t:"试用功能",y:"a"}}],["/dotnet/jiaocheng/books.html",{loader:()=>a(()=>import("./books.html-CjT6_wto.js"),__vite__mapDeps([261,1])),meta:{a:"azrng",d:17142624e5,l:"2024年4月28日",c:["dotNET"],g:["book"],o:!1,e:`<h2>概述</h2>
<p>.Net微服务书籍：<a href="https://learn.microsoft.com/zh-cn/dotnet/architecture/microservices/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/architecture/microservices/</a></p>
<p>.Net框架揭秘：<a href="https://www.cnblogs.com/artech/p/inside-asp-net-core-6.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/artech/p/inside-asp-net-core-6.html</a><br>
C# 8.0核心技术指南<br>
C# 图解教程 Apress<br>
C# 8.0本质论 Pearson</p>`,r:{minutes:30.41,words:9124},t:"书籍推荐",y:"a"}}],["/dotnet/jiaocheng/jiaocheng.html",{loader:()=>a(()=>import("./jiaocheng.html-DJgIBAf3.js"),__vite__mapDeps([262,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>来自网络，内容是否过时自行判断</p>
</div>
<h2>C#基础 C## Basis</h2>
<p><a href="https://aka.ms/LearnC" target="_blank" rel="noopener noreferrer">使用 C## 第一步</a>
<a href="https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro" target="_blank" rel="noopener noreferrer">微软官方的.NET Hello World初级课程</a>
<a href="https://docs.microsoft.com/en-us/dotnet/standard/get-started" target="_blank" rel="noopener noreferrer">Tutorials for getting started with .NET</a>
<a href="https://aka.ms/docNETWeb" target="_blank" rel="noopener noreferrer">使用 ASP.NET Core 创建 Web API</a>
全面的c#编码规范：<a href="https://masuit.com/1755" target="_blank" rel="noopener noreferrer">https://masuit.com/1755</a></p>`,r:{minutes:1.64,words:491},t:"教程",y:"a"}}],["/dotnet/jiaocheng/optimize.html",{loader:()=>a(()=>import("./optimize.html-BpI12X5c.js"),__vite__mapDeps([263,1])),meta:{a:"azrng",d:17008704e5,l:"2023年11月25日",c:["dotNET"],g:["优化"],o:!1,e:`<p>https://mp.weixin.qq.com/s/-_9qFnpN62ekuONoisa0bw | NativeBuffering,一种高性能、零内存分配的序列化解决方案[性能测试篇]</p>
<p>https://www.cnblogs.com/lindexi/p/17750753.html | dotnet 推荐 LightWorkFlowManager 轻量的工作过程管理库 - lindexi - 博客园</p>
<p>https://www.cnblogs.com/artech/p/net-memory-layout.html | .NET的各种对象在内存中如何布局[博文汇总] - Artech - 博客园</p>`,r:{minutes:.44,words:133},t:"优化文章",y:"a"}}],["/dotnet/jiaocheng/ziliaojingshuajiagoupian.html",{loader:()=>a(()=>import("./ziliaojingshuajiagoupian.html-B4JZo-yk.js"),__vite__mapDeps([264,1])),meta:{a:"azrng",d:16432416e5,l:"2022年1月27日",c:["dotNET"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>来自网络，内容是否过时自行判断</p>
</div>
<h2>深入.NET</h2>
<p>#、.NET Core跨平台解读
<a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-01.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[上篇]：历史的枷锁</a>
<a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-02.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[中篇]：复用之殇</a>
<a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-03.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[下篇]：全新的布局（.NET Standard）</a></p>`,r:{minutes:15.08,words:4525},t:"资料精选架构篇",y:"a"}}],["/dotnet/jiaocheng/ziliaojingshuajinjiepian.html",{loader:()=>a(()=>import("./ziliaojingshuajinjiepian.html-B6BPQMtB.js"),__vite__mapDeps([265,1])),meta:{a:"azrng",d:1652832e6,l:"2022年5月18日",c:["dotNET"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>来自网络，内容是否过时自行判断</p>
</div>
<h3>.NET 工程化</h3>
<p>#、StyleCop编码规范
<a href="https://www.cnblogs.com/DarkInNight/p/5457875.html" target="_blank" rel="noopener noreferrer">StyleCop规则汇总</a>
<a href="https://www.jianshu.com/p/dab842095449" target="_blank" rel="noopener noreferrer">在VS2017中使用StyleCop</a>
<a href="https://blog.csdn.net/michel4liu/article/details/83388336" target="_blank" rel="noopener noreferrer">netcore将StyleCop.Analyzers自定义规则应用到整个解决方案</a></p>`,r:{minutes:15.62,words:4685},t:"资料精选进阶篇",y:"a"}}],["/dotnet/jiaocheng/ziliaojingshuarumenpian.html",{loader:()=>a(()=>import("./ziliaojingshuarumenpian.html-CW1BBcIO.js"),__vite__mapDeps([266,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>来自网络，内容是否过时自行判断</p>
</div>
<h3>.NET 简介</h3>
<p>.NET 开源之路
<a href="https://img2018.cnblogs.com/blog/106337/201907/106337-20190716091427767-2084221958.png" target="_blank" rel="noopener noreferrer"><img src="/common/1642519528170-9865d003-934c-4436-9ff6-f0b07f66cfe4.png" alt="image.png" loading="lazy"></a>
<a href="https://mp.weixin.qq.com/s/7nRaUSUM2wnStcari3ggcw" target="_blank" rel="noopener noreferrer">.NET 时间轴</a>
<a href="https://blog.csdn.net/humourer/article/details/76030968" target="_blank" rel="noopener noreferrer">.NetFrameWork发展史</a></p>`,r:{minutes:18.36,words:5508},t:"资料精选入门篇",y:"a"}}],["/dotnet/jitongcaozuo/changyonggongneng.html",{loader:()=>a(()=>import("./changyonggongneng.html-BYI9PTST.js"),__vite__mapDeps([267,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["dotNET"],g:["无"],o:!0,e:`<h2>获取程序集配置</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 获取版本号</span>
<span class="token class-name"><span class="token keyword">var</span></span> ver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AssemblyFileVersionAttribute<span class="token punctuation">)</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AssemblyFileVersionAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Version<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ver <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Version<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.91,words:1472},t:"常用功能",y:"a"}}],["/dotnet/jitongcaozuo/yingjianxinxihuoqu.html",{loader:()=>a(()=>import("./yingjianxinxihuoqu.html-BopKbZmV.js"),__vite__mapDeps([268,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["dotNET"],g:["无"],o:!0,e:`<h2>获取屏幕并指定屏幕显示</h2>
<p>首先获取屏幕信息，然后指定在某一个屏幕上显示。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取所有屏幕信息</span>
<span class="token class-name"><span class="token keyword">var</span></span> screens <span class="token operator">=</span> Screen<span class="token punctuation">.</span>AllScreens<span class="token punctuation">;</span>
<span class="token comment">// 如果有两个屏幕，则在第二个屏幕上显示窗体</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>screens<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 获取第二个屏幕的信息</span>
    <span class="token class-name"><span class="token keyword">var</span></span> secondScreen <span class="token operator">=</span> screens<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置在第二个屏幕上显示并且最大化</span>
    form<span class="token punctuation">.</span>StartPosition <span class="token operator">=</span> FormStartPosition<span class="token punctuation">.</span>Manual<span class="token punctuation">;</span>
    form<span class="token punctuation">.</span>Location <span class="token operator">=</span> secondScreen<span class="token punctuation">.</span>Bounds<span class="token punctuation">.</span>Location<span class="token punctuation">;</span>
    form<span class="token punctuation">.</span>WindowState <span class="token operator">=</span> FormWindowState<span class="token punctuation">.</span>Maximized<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.89,words:568},t:"硬件信息获取",y:"a"}}],["/dotnet/kuangjiajiexi/changyongprogrampeizhi.html",{loader:()=>a(()=>import("./changyongprogrampeizhi.html-B7cPMoiy.js"),__vite__mapDeps([269,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>示例一</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add services to the container.</span>
<span class="token function">ConfigureServices</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Services<span class="token punctuation">,</span> builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">"/swagger/v1/swagger.json"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">,</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
    services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">"v1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span>
        <span class="token punctuation">{</span>
            Version <span class="token operator">=</span> <span class="token string">"v1"</span><span class="token punctuation">,</span>
            Title <span class="token operator">=</span> <span class="token string">" 接口文档"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他自定义的注入</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.99,words:296},t:"常用Program配置",y:"a"}}],["/dotnet/kuangjiajiexi/launchsettings_json.html",{loader:()=>a(()=>import("./launchsettings_json.html-Bh0xbVuS.js"),__vite__mapDeps([270,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>默认配置</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">"iisSettings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"windowsAuthentication"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"anonymousAuthentication"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"iisExpress"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"applicationUrl"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:54339/"</span><span class="token punctuation">,</span>
      <span class="token string">"sslPort"</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"profiles"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"IIS Express"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"commandName"</span><span class="token punctuation">:</span> <span class="token string">"IISExpress"</span><span class="token punctuation">,</span>
      <span class="token string">"launchBrowser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">"environmentVariables"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"ASPNETCORE_My_Environment"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token string">"ASPNETCORE_DETAILEDERRORS"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token string">"ASPNETCORE_ENVIRONMENT"</span><span class="token punctuation">:</span> <span class="token string">"Staging"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">"EnvironmentsSample"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"commandName"</span><span class="token punctuation">:</span> <span class="token string">"Project"</span><span class="token punctuation">,</span>
      <span class="token string">"launchBrowser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">"environmentVariables"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"ASPNETCORE_ENVIRONMENT"</span><span class="token punctuation">:</span> <span class="token string">"Staging"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"applicationUrl"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:54340/"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">"Kestrel Staging"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"commandName"</span><span class="token punctuation">:</span> <span class="token string">"Project"</span><span class="token punctuation">,</span>
      <span class="token string">"launchBrowser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">"environmentVariables"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"ASPNETCORE_My_Environment"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token string">"ASPNETCORE_DETAILEDERRORS"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        <span class="token string">"ASPNETCORE_ENVIRONMENT"</span><span class="token punctuation">:</span> <span class="token string">"Staging"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">"applicationUrl"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:51997/"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:.35,words:106},t:"launchSettings.json",y:"a"}}],["/dotnet/kuangjiajiexi/mono.html",{loader:()=>a(()=>import("./mono.html-DKl3PJGh.js"),__vite__mapDeps([271,1])),meta:{a:"azrng",d:16854048e5,l:"2023年5月30日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><strong>Mono</strong>是一个软件平台，旨在让开发人员轻松创建跨平台应用程序。
官网：<a href="https://www.mono-project.com/" target="_blank" rel="noopener noreferrer">https://www.mono-project.com/</a></p>
`,r:{minutes:.2,words:61},t:"Mono",y:"a"}}],["/dotnet/kuangjiajiexi/sdkgongzuofuzai.html",{loader:()=>a(()=>import("./sdkgongzuofuzai.html-DKduGOiR.js"),__vite__mapDeps([272,1])),meta:{a:"azrng",d:16835904e5,l:"2023年5月9日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文来自微信公众号【My IO】</p>
</blockquote>
<h2>前言</h2>
<p>为了应对.NET SDK能够支持的程序集项目（例如iOS、Android、WASM）的不断增长，从.NET 6开始，允许用户仅安装必要的SDK（例如ASP.NET Core），而不是一次性安装“完整版”SDK。
这一切的基础，是新的dotnet CLI命令——workload。</p>
<h2>操作</h2>
<h3>列表</h3>
<p>首先，列出可安装的工作负载：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet workload search
</code></pre></div>`,r:{minutes:2.39,words:716},t:"SDK工作负载",y:"a"}}],["/dotnet/kuangjiajiexi/shengmingzhoujicaozuo.html",{loader:()=>a(()=>import("./shengmingzhoujicaozuo.html-DhKDdIu6.js"),__vite__mapDeps([273,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>获取启动的端口</h2>
<p>使用场景：服务注册</p>
<blockquote>
<p>方案来源自：微信公众号【MY IO】</p>
</blockquote>
<h3>Srart启动获取</h3>
<p>正常我们是使用WebApplication.Run方法进行启动的，但是我们现在为了获取启动后的端口，我们可以不用Run方法启动，而是等待Start完成：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//注释</span>
<span class="token comment">//app.Run();</span>

<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>Urls<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">WaitForShutdownAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span> 输出信息
http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5259</span>
</code></pre></div>`,r:{minutes:5.53,words:1659},t:"生命周期操作",y:"a"}}],["/dotnet/kuangjiajiexi/startup.html",{loader:()=>a(()=>import("./startup.html-DjRfQPHf.js"),__vite__mapDeps([274,1])),meta:{a:"azrng",d:16586208e5,l:"2022年7月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Startup程序启动</h2>
<ul>
<li>第一步：执行services.AddControllers() 将Controller的核心服务注册到容器中去</li>
<li>第二步：执行app.UseRouting() 将EndpointRoutingMiddleware中间件注册到http管道中</li>
<li>第三步：执行app.UseAuthorization() 将AuthorizationMiddleware中间件注册到http管道中</li>
<li>第四步：执行app.UseEndpoints(encpoints=&gt;endpoints.MapControllers())有两个主要的作用：调用endpoints.MapControllers()将本程序集定义的所有Controller和Action转</li>
</ul>`,r:{minutes:.7,words:210},t:"Startup",y:"a"}}],["/dotnet/kuangjiajiexi/yuanmaxuexi.html",{loader:()=>a(()=>import("./yuanmaxuexi.html-DojHFNM8.js"),__vite__mapDeps([275,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>源码地址</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>主要仓库
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>dotnet<span class="token operator">/</span><span class="token class-name">runtime</span>
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>dotnet<span class="token operator">/</span><span class="token class-name">aspnetcore</span>


https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>dotnet<span class="token operator">/</span>corefx <span class="token punctuation">.</span>net core的 开源项目地址

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>EntityFrameworkCore  EF Core源码

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>Configuration 配置模块源码

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>Routing 路由模块

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>Security 认证及授权 

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>DependencyInjection 依赖注入

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>HttpAbstractions 有很多的一些HTTP管道的抽象接口都定义在这里

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span><span class="token class-name">Options</span>

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span><span class="token class-name">Mvc</span> 

https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>aspnet<span class="token operator">/</span>Hosting

Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Identity<span class="token punctuation">.</span>Stores Identity数据库地址
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>dotnet<span class="token operator">/</span>aspnetcore<span class="token operator">/</span>tree<span class="token operator">/</span>v6<span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">/</span>src<span class="token operator">/</span>Identity<span class="token operator">/</span>Extensions<span class="token punctuation">.</span>Stores<span class="token operator">/</span>src

</code></pre></div>`,r:{minutes:.62,words:186},t:"源码学习",y:"a"}}],["/dotnet/maui/kaiyuanxiangmu.html",{loader:()=>a(()=>import("./kaiyuanxiangmu.html-aViv6xZG.js"),__vite__mapDeps([276,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>dotnet-maui-showcase</h2>
<p>仓库地址：<a href="https://github.com/jsuarezruiz/dotnet-maui-showcase" target="_blank" rel="noopener noreferrer">https://github.com/jsuarezruiz/dotnet-maui-showcase</a></p>
<h2>Dots</h2>
<p>友好的.NET SDK 管理器
仓库地址：<a href="https://github.com/nor0x/Dots" target="_blank" rel="noopener noreferrer">https://github.com/nor0x/Dots</a></p>`,r:{minutes:.2,words:60},t:"开源项目",y:"a"}}],["/dotnet/maui/pingtaiapi.html",{loader:()=>a(()=>import("./pingtaiapi.html-Cp4Ojrg1.js"),__vite__mapDeps([277,1])),meta:{a:"azrng",d:16790976e5,l:"2023年3月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>电话</h2>
<p><strong>Microsoft.Maui.ApplicationModel.Communication</strong>命名空间中的PhoneDialer类为 Windows、Android、iOS（和 iPadOS）和 macOS 平台提供电话拨号功能（和其他）的抽象**。<strong>静态</strong>Open**方法尝试使用电话拨号器呼叫作为参数提供的号码。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>PhoneDialer<span class="token punctuation">.</span>Default<span class="token punctuation">.</span>IsSupported<span class="token punctuation">)</span>
        PhoneDialer<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>translatedNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArgumentNullException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">DisplayAlert</span><span class="token punctuation">(</span><span class="token string">"无法拨号"</span><span class="token punctuation">,</span> <span class="token string">"手机号码无效"</span><span class="token punctuation">,</span> <span class="token string">"确定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Other error has occurred.</span>
    <span class="token keyword">await</span> <span class="token function">DisplayAlert</span><span class="token punctuation">(</span><span class="token string">"Unable to dial"</span><span class="token punctuation">,</span> <span class="token string">"电话拨号失败."</span><span class="token punctuation">,</span> <span class="token string">"确定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.58,words:473},t:"平台API",y:"a"}}],["/dotnet/maui/",{loader:()=>a(()=>import("./index.html-3zSBsc0E.js"),__vite__mapDeps([278,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MAUI 是&nbsp;Xamarin.Forms 的进化（Xamarin.Forms 已经有6年历史了）。支持Model-View-ViewModel（MVVM）和Model-View-Update (MVU)等模式编写。NET MAUI 的目的是简化多平台应用程序开发。使用 .NET MAUI，您可以使用单个项目创建多平台应用程序，但您可以根据需要添加特定于平台的源代码和资源。.NET MAUI 的主要目标是使您能够在单个代码库中实现尽可能多的应用程序逻辑和 UI 布局。</p>
<p>官网：<a href="https://learn.microsoft.com/zh-cn/dotnet/maui/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/maui/ </a>
<a href="https://learn.microsoft.com/zh-cn/training/browse/?expanded=dotnet&amp;products=dotnet-maui" target="_blank" rel="noopener noreferrer">Learn练习教程</a></p>`,r:{minutes:4.96,words:1488},t:"说明",y:"a"}}],["/dotnet/maui/wenti.html",{loader:()=>a(()=>import("./wenti.html-3XZp4Jyk.js"),__vite__mapDeps([279,1])),meta:{a:"azrng",d:16665696e5,l:"2022年10月24日",c:["dotNET"],g:["无"],o:!0,e:`<p>播放
<a href="https://www.nuget.org/packages/Xam.Plugins.Android.ExoPlayer.Ima/#readme-body-tab" target="_blank" rel="noopener noreferrer">https://www.nuget.org/packages/Xam.Plugins.Android.ExoPlayer.Ima/#readme-body-tab</a></p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>video autoplay muted loop playsinline <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"slideContent"</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">source</span> src<span class="token operator">=</span><span class="token string">"videos/TRIMOTERM.mp4"</span> type<span class="token operator">=</span><span class="token string">"video/mp4"</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.17,words:52},t:"问题",y:"a"}}],["/dotnet/maui/xaml.html",{loader:()=>a(()=>import("./xaml.html-DGBHBJRb.js"),__vite__mapDeps([280,1])),meta:{a:"azrng",d:1679184e6,l:"2023年3月19日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>XAML 是 Microsoft 创建的一种声明性标记语言。XAML 旨在简化在应用程序中创建 UI 的过程。
您创建的 XAML 文档包含以声明方式描述应用程序 UI 元素的元素。请记住，XAML 中的这些元素直接表示对象的实例化。在 XAML 中定义元素后，您可以在代码隐藏文件中访问它并使用 C## 代码定义行为。</p>
<h2>命名空间</h2>
<p><a href="https://learn.microsoft.com/zh-cn/training/modules/create-user-interface-xaml/3-types-propeties-maui-xaml" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/training/modules/create-user-interface-xaml/3-types-propeties-maui-xaml</a></p>`,r:{minutes:.86,words:259},t:"XAML",y:"a"}}],["/dotnet/mingmingguandaoipc/",{loader:()=>a(()=>import("./index.html-DBnCxJO9.js"),__vite__mapDeps([281,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.09,words:26},t:"说明",y:"a"}}],["/dotnet/mobanyinqing/jntemplate.html",{loader:()=>a(()=>import("./jntemplate.html-QgfmF5ux.js"),__vite__mapDeps([282,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>极念模板引擎(JNTemplate)是一款完全国产的基于C#语言开发的跨平台的文本解析引擎（模板引擎），它能生成任何基于文本的内容，包括且不限于html,xml,css等,让前端展示与后端代码逻辑分离。同时，它也提供了一个在WebForm与Razor之外的选择！
JNTemplate所有代码全部开源，且具有最小的依赖关系，能轻松实现迁移与跨平台。同时，在满足我们开源协议的前提下，大家可以自由使用，分发，和用于商业目的（具体见License.txt）。
从2.0版本开始，引擎全面升级为编译型模板引擎，在性能上得到了更大的提升。</p>
<p>包下载量：45377</p>`,r:{minutes:1.02,words:306},t:"JNTemplate",y:"a"}}],["/dotnet/mobanyinqing/",{loader:()=>a(()=>import("./index.html-BISeD-Wg.js"),__vite__mapDeps([283,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过往模版内填充数据来实现展示页面等效果</p>
<h2>框架</h2>
<ol>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor" target="_blank" rel="noopener noreferrer">Razor</a></li>
<li><a href="https://github.com/dotliquid/dotliquid" target="_blank" rel="noopener noreferrer">DotLiquid</a></li>
<li><a href="https://github.com/lunet-io/scriban" target="_blank" rel="noopener noreferrer">Scriban</a></li>
<li><a href="https://github.com/sebastienros/fluid" target="_blank" rel="noopener noreferrer">Fluid</a></li>
</ol>`,r:{minutes:.23,words:68},t:"说明",y:"a"}}],["/dotnet/newFunction/dotNet6.html",{loader:()=>a(()=>import("./dotNet6.html-ZovWDWSS.js"),__vite__mapDeps([284,1])),meta:{a:"azrng",d:16971552e5,l:"2023年10月13日",c:["dotNET"],g:["无"],o:!0,e:`<p><strong>读写文件</strong>
在 .NET 6 中，有一个新的 API 可以在不使用 FileStream 的情况下读取/写入文件。它还支持分散/聚集 IO（多个缓冲区）和给定文件偏移量的覆盖读取和写入。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name">SafeFileHandle</span> handle <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenHandle</span><span class="token punctuation">(</span><span class="token string">"ConsoleApp128.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">long</span></span> length <span class="token operator">=</span> RandomAccess<span class="token punctuation">.</span><span class="token function">GetLength</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.16,words:948},t:".Net6 API",y:"a"}}],["/dotnet/newFunction/dotNet8.html",{loader:()=>a(()=>import("./dotNet8.html-CvDWgW82.js"),__vite__mapDeps([285,1])),meta:{a:"azrng",d:17000064e5,l:"2023年11月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>宣布推出.Net8：https://devblogs.microsoft.com/dotnet/announcing-dotnet-8/</p>
<p>.Net8中的性能改进：https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8</p>
<p>.Net8 中身份认证：https://devblogs.microsoft.com/dotnet/whats-new-with-identity-in-dotnet-8/</p>
<p>https://www.cnblogs.com/powertoolsteam/p/17833417.html | .NET 8.0 中有哪些新的变化？ - 葡萄城技术团队 - 博客园</p>`,r:{minutes:.47,words:140},t:".Net8 API",y:"a"}}],["/dotnet/newFunction/",{loader:()=>a(()=>import("./index.html-VCJLohvo.js"),__vite__mapDeps([286,1])),meta:{a:"azrng",d:16985376e5,l:"2023年10月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.Net/C#年表以及各版本更新的内容：https://lvhang.site/docs/dotnettimeline</p>
<p>.Net中的中断行变更：https://learn.microsoft.com/zh-cn/dotnet/core/compatibility/breaking-changes</p>
<p>.Net库的更改规则：https://learn.microsoft.com/zh-cn/dotnet/core/compatibility/library-change-rules</p>
<h2>为什么要升级</h2>
<ul>
<li>可以获得更快的速度，相同的代码运行的速度更快</li>
<li>.NetFramework升级到.NetCore可以跨平台，可以使用到更加便宜Linux托管</li>
<li>升级到更新的框架，可以更方便的寻找开发人员，因为一般开发人员会学习比较新的框架</li>
</ul>`,r:{minutes:2.19,words:658},t:"说明",y:"a"}}],["/dotnet/nuget/baobanbenzidongshengji.html",{loader:()=>a(()=>import("./baobanbenzidongshengji.html-D8BQRith.js"),__vite__mapDeps([287,1])),meta:{a:"azrng",d:16789248e5,l:"2023年3月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>因为公司有自己的私有包服务，但是在发包的过程中，时常会出现忘记升级包版本的情况，导致需要重新发包，就显得比较麻烦，于是就有了实现自动升级包版本的想法。鉴于服务是区分为四个环境的（dev，test，staging和master），所以对应的包版本标识也应该有四个。
预设的环境与包版本标识对应关系如下</p>
<table>
<thead>
<tr>
<th>环境</th>
<th>包版本标识</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>dev</td>
<td>alpha</td>
<td>1.0.1-alpha.2108211136</td>
</tr>
<tr>
<td>test</td>
<td>beta</td>
<td>1.0.1-beta.2108211137</td>
</tr>
<tr>
<td>staging</td>
<td>rc</td>
<td>1.0.1-rc.2108211138</td>
</tr>
<tr>
<td>master</td>
<td>release</td>
<td>1.0.1.2</td>
</tr>
</tbody>
</table>`,r:{minutes:2.84,words:851},t:"包版本自动升级",y:"a"}}],["/dotnet/nuget/jiaobenfabubao.html",{loader:()=>a(()=>import("./jiaobenfabubao.html-Yzm_5wFQ.js"),__vite__mapDeps([288,1])),meta:{a:"azrng",d:16779744e5,l:"2023年3月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过命令去发布nuget包</p>
<h2>流程</h2>
<p>参考文档：<a href="https://learn.microsoft.com/zh-cn/nuget/nuget-org/publish-a-package" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/nuget/nuget-org/publish-a-package</a></p>
<h2>命令</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet nuget push SettingConfig<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span>nupkg <span class="token operator">--</span>api<span class="token operator">-</span>key xxxxxx <span class="token operator">--</span><span class="token class-name">source</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>nuget<span class="token punctuation">.</span>org<span class="token operator">/</span>v3<span class="token operator">/</span>index<span class="token punctuation">.</span>json
</code></pre></div>`,r:{minutes:.33,words:100},t:"脚本发布包",y:"a"}}],["/dotnet/nuget/",{loader:()=>a(()=>import("./index.html-Ch55XxWC.js"),__vite__mapDeps([289,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["dotNET"],g:["nuget"],o:!0,e:`<h2>概述</h2>
<p>NuGet 是免费、开源的包管理开发工具，专注于在 .NET 应用开发过程中，简单地合并第三方的组件库。</p>
<p>官方文档：https://learn.microsoft.com/zh-cn/nuget/what-is-nuget
Nuget上不错的库、工具、框架集合：https://dotnet.libhunt.com/</p>
<h2>常用命令</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 将包更新到最新版本</span>
Update<span class="token operator">-</span>Package

<span class="token comment">// 重新安装所有包</span>
Update<span class="token operator">-</span>Package <span class="token operator">-</span>reinstall

<span class="token operator">--</span> 指定项目重新安装
Update<span class="token operator">-</span>Package <span class="token operator">-</span>reinstall <span class="token operator">-</span>Project ProjectName
</code></pre></div>`,r:{minutes:5.65,words:1695},t:"说明",y:"a"}}],["/dotnet/shengchanlidisheng/genApiDoc.html",{loader:()=>a(()=>import("./genApiDoc.html-0SJF0uMY.js"),__vite__mapDeps([290,1])),meta:{t:"API文档生成"}}],["/dotnet/shengchanlidisheng/kaifasuidaoshiyong.html",{loader:()=>a(()=>import("./kaifasuidaoshiyong.html-B_NsQOO0.js"),__vite__mapDeps([291,1])),meta:{a:"azrng",d:168048e7,l:"2023年4月3日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>首先开发隧道可以干嘛，引用官网的一句话叫做：可以在无法直接相互连接的计算机之间建立临时连接，创建一个 URL，使任何具有 Internet 连接的设备在<code>localhost</code>上运行时都可以连接到 ASP.NET Core 项目。</p>
<p>那么我们就可以在临时调试场景中，将当前的服务启动并生成一个外网的Url地址，让对方进行访问，不论是和第三方调试还是说和公司同事之间调试都是很方便的。</p>
<h2>前提条件</h2>
<ul>
<li>安装了 ASP.NET 和 Web 开发工作负载的 Visual Studio 2022 版本 17.5 或更高版本。 需要登录到 Visual Studio 才能创建和使用开发隧道。 该功能在 Visual Studio for Mac 中不可用。</li>
<li>启用了开发隧道预览功能。 选择“工具”&gt;“选项”&gt;“环境”&gt;“预览功能”&gt;“为 Web 应用启用开发隧道”。</li>
</ul>`,r:{minutes:2.76,words:829},t:"开发隧道使用",y:"a"}}],["/dotnet/shengchanlidisheng/vschajian.html",{loader:()=>a(()=>import("./vschajian.html-CEbFbs_O.js"),__vite__mapDeps([292,1])),meta:{a:"azrng",d:168264e7,l:"2023年4月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>创建简易Vsix安装包提高生产效率。</p>
<h2>操作</h2>
<h3>创建扩展项目</h3>
<p>新建一个项目，选择扩展项目(VSIX Project)，选择c#开发</p>
<h3>创建模板项目</h3>
<p>新建一个项目，选择 c# Item Template。
点击class.cs，增加如下代码，里面有定义好的宏。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">/*----------------------------------------------------------------
 Copyright (C) 2021 webmote 版权所有

 创建者：$username$
 创建时间：$time$
 文件：$itemname$.cs
 功能描述：

----------------------------------------------------------------*/</span>
<span class="token keyword">namespace</span> $rootnamespace$
<span class="token punctuation">{</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// $safeitemname$接口输入参数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> $safeitemname$Args 
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// $safeitemname$接口输出参数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> $safeitemname$Result 
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.55,words:466},t:"VS简单插件创建",y:"a"}}],["/dotnet/shujufangwen/dotnetshengchengshujuku.html",{loader:()=>a(()=>import("./dotnetshengchengshujuku.html-DcG4Owp0.js"),__vite__mapDeps([293,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文主要是回顾下从项目创建到生成数据到数据库(代码优先)的全部过程。采用EFCore作为ORM框架。</p>
<blockquote>
<p>本次示例环境：vs2019、net5、mysql</p>
</blockquote>
<h2>创建项目</h2>
<p>本次事例代码是用过vs2019创建的ASP.NET Core Web API项目
可以通过可视化界面创建或者通过命令行创建</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet <span class="token keyword">new</span> webapi <span class="token operator">-</span>o Net5ByDocker
</code></pre></div>`,r:{minutes:3.7,words:1110},t:"dotnet生成数据库",y:"a"}}],["/dotnet/signalr/messagepack.html",{loader:()=>a(()=>import("./messagepack.html-CHHWP1tt.js"),__vite__mapDeps([294,1])),meta:{a:"azrng",d:16457472e5,l:"2022年2月25日",c:["dotNET"],g:["无"],o:!0,e:`<p>默认signalR是json传输方式，但是MessagePack是一种快速、精简的二进制序列化格式，当性能和宽带需要考虑时候，建议用这个，它会创建比json更小的信息
&nbsp;
使用：
服务器需要安装<code>Microsoft.AspNetCore.SignalR.Protocols.MessagePack</code>js客户端需要添加包<code>@microsoft/signalr-protocol-msgpack</code>
综上一共引用的包有：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">script</span> src<span class="token operator">=</span><span class="token string">"~/lib/signalr/signalr.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">script</span> src<span class="token operator">=</span><span class="token string">"~/lib/msgpack5/msgpack5.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">script</span> src<span class="token operator">=</span><span class="token string">"~/lib/signalr/signalr-protocol-msgpack.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.66,words:198},t:"MessagePack",y:"a"}}],["/dotnet/signalr/nginxshiyongwesocketwenti.html",{loader:()=>a(()=>import("./nginxshiyongwesocketwenti.html-B8cEkQu6.js"),__vite__mapDeps([295,1])),meta:{a:"azrng",d:169776e7,l:"2023年10月20日",c:["dotNET"],g:["无"],o:!0,e:`<p>如果直接使用会提示错误：
<img src="/common/1614392761475-1a951725-a938-4c2c-99eb-b36f01ef48a8.png" alt="image.png" loading="lazy">
问题的原因是：nginx没有启用wesocket
&nbsp;
现在给nginx增加配置</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>location <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">^</span><span class="token operator">/</span>backuph5<span class="token operator">/</span> <span class="token punctuation">{</span>
            rewrite <span class="token operator">^</span><span class="token operator">/</span>backuph5<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token operator">/</span>$<span class="token number">1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token class-name">proxy_pass</span>                http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.7</span><span class="token number">.250</span><span class="token punctuation">:</span><span class="token number">5560</span><span class="token punctuation">;</span>
            proxy_set_header Upgrade $http_upgrade<span class="token punctuation">;</span>
            proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.65,words:195},t:"nginx使用WeSocket问题",y:"a"}}],["/dotnet/signalr/qianhouduanfenli.html",{loader:()=>a(()=>import("./qianhouduanfenli.html-CNomW2Rh.js"),__vite__mapDeps([296,1])),meta:{a:"azrng",d:16903296e5,l:"2023年7月26日",c:["dotNET"],g:["无"],o:!0,e:`<h2>连接</h2>
<h3>前端连接</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">signalR<span class="token punctuation">.</span>HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:5000/chatHub"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span>signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token comment">//配置日志，可选</span>
                <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//自动重新连接重试4次(0、2、10、30s)，默认不会自动重新连接</span>
                <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//自定义重新连接尝试次数(毫秒)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>'我连接成功了'<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"出错"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">onreconnecting</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//本来连接然后丢失连接触发</span>
        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>state <span class="token operator">==</span><span class="token operator">=</span> signalR<span class="token punctuation">.</span>HubConnectionState<span class="token punctuation">.</span>Reconnecting<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接已断开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">onreconnected</span><span class="token punctuation">(</span>connectionId <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token doc-comment comment">////本来连接然后丢失连接然后重新连接触发</span>
        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>state <span class="token operator">==</span><span class="token operator">=</span> signalR<span class="token punctuation">.</span>HubConnectionState<span class="token punctuation">.</span>Connected<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接又成功了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//手动重新连接</span>
<span class="token keyword">async</span> <span class="token return-type class-name">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"SignalR Connected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//手动连接</span>
connection<span class="token punctuation">.</span><span class="token function">onclose</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.14,words:343},t:"前后端分离",y:"a"}}],["/dotnet/signalr/signalr.html",{loader:()=>a(()=>import("./signalr.html-Dbcy6D7G.js"),__vite__mapDeps([297,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>SinalR for ASP.Net Core 是 SignalR 的浴火重生版，允许你在 ASP.Net Core 中实现实时通讯，这里的&nbsp;<code>实时</code>&nbsp;意味着双方都能快速的感知对方发来的消息，比如：一旦 server 端有需要推送的内容将会直接 push 到 client，这和原始的 http 单向请求有着本质的区别。</p>
<p>默认采用的回落机制来进行传输和连接，也可以禁用回落机制，只采用一种传输方式
Long polling=》Server Sent Events=》Web Scoket
优先选择传输最好的
<img src="/common/1614392596148-7270f71a-b34e-4f59-a3c2-5d9e788fc0fe.png" alt="image.png" loading="lazy"></p>`,r:{minutes:2.23,words:669},t:"Signalr",y:"a"}}],["/dotnet/signalr/signalrfuzaijunheng.html",{loader:()=>a(()=>import("./signalrfuzaijunheng.html--eDyqpx9.js"),__vite__mapDeps([298,1])),meta:{a:"azrng",d:1614384e6,l:"2021年2月27日",c:["dotNET"],g:["无"],o:!0,e:`<p>引用包：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.SignalR.StackExchangeRedis"</span> Version<span class="token operator">=</span><span class="token string">"3.1.9"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"StackExchange.Redis"</span> Version<span class="token operator">=</span><span class="token string">"2.2.4"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.81,words:243},t:"Signalr负载均衡",y:"a"}}],["/dotnet/signalr/signalrkuozhan.html",{loader:()=>a(()=>import("./signalrkuozhan.html-Ce-IEZtA.js"),__vite__mapDeps([299,1])),meta:{a:"azrng",d:1614384e6,l:"2021年2月27日",c:["dotNET"],g:["无"],o:!0,e:`<p>基于SignalR的消息推送与二维码描登录实现：<a href="https://mp.weixin.qq.com/s/Jbfimr2Nxi1Brtuv4vuPig" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Jbfimr2Nxi1Brtuv4vuPig</a></p>
`,r:{minutes:.16,words:48},t:"signalr扩展",y:"a"}}],["/dotnet/signalr/signalrshiyongjwt.html",{loader:()=>a(()=>import("./signalrshiyongjwt.html-CBw6SmPq.js"),__vite__mapDeps([300,1])),meta:{a:"azrng",d:16457472e5,l:"2022年2月25日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> <span class="token string">"JwtBearer"</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">"JwtBearer"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span><span class="token string">"JwtBearer"</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Audience <span class="token operator">=</span> <span class="token string">"Audience"</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// The signing key must match!</span>
        ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">"SecurityKey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the JWT Issuer (iss) claim</span>
        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidIssuer <span class="token operator">=</span> <span class="token string">"Issuer"</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the JWT Audience (aud) claim</span>
        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidAudience <span class="token operator">=</span> <span class="token string">"Audience"</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the token expiry</span>
        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// If you want to allow a certain Account of clock drift, set that here</span>
        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtBearerEvents</span>
     <span class="token punctuation">{</span>
        OnMessageReceived <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//重点在于这里；判断是Signalr的路径</span>
        <span class="token class-name"><span class="token keyword">var</span></span> accessToken <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">[</span><span class="token string">"access_token"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这点有区别</span>
        <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">StartsWithSegments</span><span class="token punctuation">(</span><span class="token string">"/chat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Token <span class="token operator">=</span> accessToken<span class="token punctuation">;</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>`,r:{minutes:.5,words:149},t:"signalr使用jwt",y:"a"}}],["/dotnet/t4moban/t4moban.html",{loader:()=>a(()=>import("./t4moban.html-CjK9lO39.js"),__vite__mapDeps([301,1])),meta:{a:"azrng",d:16098048e5,l:"2021年1月5日",c:["dotNET"],g:["无"],o:!0,e:`<p>代码生成引擎，是由一些文本框和控制逻辑组成的混合模板，他可以生成文本文件。控制逻辑编写为程序代码的片段。生成的文件可以是任何类型的文本，例如网页、资源文件或任何语言的程序源代码。
&nbsp;
文本模板类型
设计时T4文本模板、运行时T4文本模板
&nbsp;
&nbsp;
&nbsp;
&nbsp;
T4代码提示需要安装：<code>tangible T4 Editor 2.5.0 plus modeling tools for VS 2019</code></p>
`,r:{minutes:.5,words:150},t:"T4模板",y:"a"}}],["/dotnet/t4moban/t4yufa.html",{loader:()=>a(()=>import("./t4yufa.html-BPCQ0fFW.js"),__vite__mapDeps([302,1])),meta:{a:"azrng",d:16431552e5,l:"2022年1月26日",c:["dotNET"],g:["无"],o:!0,e:`<h2>指令</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;#@ 指令  属性=“值” #&gt;模式
</code></pre></div><h2>模板指令</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;#@ template debug="false" hostspecific="false" language="C#"#&gt; 
</code></pre></div>`,r:{minutes:.95,words:286},t:"T4语法",y:"a"}}],["/dotnet/windowsservice/",{loader:()=>a(()=>import("./index.html-BxdhcgmA.js"),__vite__mapDeps([303,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Windows 服务是一种在后台运行的应用程序，它可以在系统启动时自动启动，并且以系统级别权限运行。Windows 服务是基于Windows操作系统的服务控制管理器（Service Control Manager）进行管理的。开发者可以使用编程语言（如C#、C++等）编写Windows服务，然后通过安装到操作系统中来实现长期运行和提供某种功能。</p>
<h2>操作</h2>
<h3>获取进程对应的服务名</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> processId <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"SELECT * FROM Win32_Service WHERE ProcessId = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">processId</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> serviceName <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ManagementObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"The service name is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">serviceName</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">WaitForShutdownAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.01,words:304},t:"说明",y:"a"}}],["/dotnet/workservice/",{loader:()=>a(()=>import("./index.html-CDKqwMzf.js"),__vite__mapDeps([304,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>工作服务：工作服务是一种基于任务调度的服务执行机制。与Windows服务不同，工作服务通常是由应用程序或框架提供的一种机制，用于定期或按需执行特定的任务。工作服务不会在系统启动时自动启动，而是由应用程序根据需要手动触发或按计划执行。</p>
<h2>资料</h2>
<p>入门介绍：<a href="https://mp.weixin.qq.com/s/ujGkb5oaXq3lqX_g_eQ3_g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ujGkb5oaXq3lqX_g_eQ3_g</a>
<a href="https://mp.weixin.qq.com/s/6d2Yluw7h6r_r54Hef1MOA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/6d2Yluw7h6r_r54Hef1MOA</a> | .NET Worker Service 如何优雅退出
.Net6打包部署到windows service：<a href="https://mp.weixin.qq.com/s/by7h-WPjdVYn8_oLzwv2fA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/by7h-WPjdVYn8_oLzwv2fA</a>
.Net泛型主机：<a href="https://learn.microsoft.com/zh-cn/dotnet/core/extensions/generic-host" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/core/extensions/generic-host</a></p>`,r:{minutes:.6,words:181},t:"说明",y:"a"}}],["/dotnet/workservice/serviceself.html",{loader:()=>a(()=>import("./serviceself.html-C5YOaUZW.js"),__vite__mapDeps([305,1])),meta:{a:"azrng",d:168264e7,l:"2023年4月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>为<a href="https://learn.microsoft.com/zh-cn/dotnet/core/extensions/generic-host" target="_blank" rel="noopener noreferrer">.NET 泛型主机</a>的应用程序提供自安装为服务进程的能力，支持windows和linux平台。
仓库地址：<a href="https://github.com/xljiulang/ServiceSelf" target="_blank" rel="noopener noreferrer">https://github.com/xljiulang/ServiceSelf</a></p>`,r:{minutes:.28,words:84},t:"ServiceSelf",y:"a"}}],["/dotnet/xiangmumoban/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-BfbH_LXQ.js"),__vite__mapDeps([306,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>自定义创建项目模板</p>
<h2>开源项目模板</h2>
<h3>Ardalis.CleanArchitecture.Template</h3>
<p>干净架构和 ASP.NET Core 入门</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet <span class="token keyword">new</span> <span class="token operator">--</span>install Ardalis<span class="token punctuation">.</span>CleanArchitecture<span class="token punctuation">.</span>Template

dotnet <span class="token keyword">new</span> clean<span class="token operator">-</span>arch <span class="token operator">-</span>o Your<span class="token punctuation">.</span>ProjectName
</code></pre></div>`,r:{minutes:.81,words:243},t:"说明",y:"a"}}],["/dotnet/xiangmumoban/vue_jsdapeiwebapimoban.html",{loader:()=>a(()=>import("./vue_jsdapeiwebapimoban.html-Bae_JvDL.js"),__vite__mapDeps([307,1])),meta:{a:"azrng",d:1695168e6,l:"2023年9月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>创建一个Vue.js和Web API前后端集成的项目。</p>
<h2>操作</h2>
<h3>Vue JS 3.0 with .NET 5 Web API</h3>
<p>安装扩展：Vue JS 3.0 with .NET 5 Web API
<img src="/common/1663412657062-0a6f2772-9bf5-4723-884e-5fc5dad632fc.png" alt="image.png" loading="lazy"></p>
<blockquote>
<p>该扩展只能安装在Vs2019上并且框架版本是.Net5，详细信息：<a href="https://marketplace.visualstudio.com/items?itemName=alexandredotnet.vuejsdotnetfive&amp;ssr=false#overview" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=alexandredotnet.vuejsdotnetfive&amp;ssr=false#overview</a></p>
</blockquote>`,r:{minutes:1.3,words:389},t:"Vue.js搭配WebAPI模板",y:"a"}}],["/dotnet/xiangmumoban/xiangmumobansheji.html",{loader:()=>a(()=>import("./xiangmumobansheji.html-2BOITpFP.js"),__vite__mapDeps([308,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>通过创建项目模板，省去在新建项目的时候拷贝公共类，创建各个公共配置的步骤。</p>
<h2>基本配置</h2>
<h3>构建模板</h3>
<p>在合适做项目模板的项目根目录下新建一个文件夹.template.config，同时在这个文件夹下面创建template.json。
示例如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">"Azrng"</span><span class="token punctuation">,</span> <span class="token comment">//必须</span>
  <span class="token string">"classifications"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"Web/WebAPI"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//必须，这个对应模板的Tags</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"EFCoreDemo"</span><span class="token punctuation">,</span> <span class="token comment">//必须，这个对应模板的Templates</span>
  <span class="token string">"identity"</span><span class="token punctuation">:</span> <span class="token string">"EFCoreMySQLTemplate"</span><span class="token punctuation">,</span> <span class="token comment">//可选，模板的唯一名称</span>
  <span class="token string">"shortName"</span><span class="token punctuation">:</span> <span class="token string">"efmy"</span><span class="token punctuation">,</span> <span class="token comment">//必须，这个对应模板的Short Name</span>
  <span class="token string">"tags"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token string">"C#"</span><span class="token punctuation">,</span>
    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"project"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"sourceName"</span><span class="token punctuation">:</span> <span class="token string">"EFMyDemo"</span><span class="token punctuation">,</span> <span class="token comment">// 可选，要替换的名字</span>
  <span class="token string">"preferNameDirectory"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment">// 可选，添加目录  </span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.31,words:393},t:"项目模板设计",y:"a"}}],["/dotnet/xiangmuqianyi/",{loader:()=>a(()=>import("./index.html-BVarY4Mv.js"),__vite__mapDeps([309,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>工具</h2>
<p>迁移分析工具NET Portability Analyzer
try-convert</p>
<h2>资料</h2>
<p>.netfw迁移到.NetCore：<a href="https://www.cnblogs.com/88223100/p/netframework-to-netcore.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/88223100/p/netframework-to-netcore.html</a>
使用try-convert将.NET Framework项目迁移到.NET Core：<a href="https://www.cnblogs.com/88223100/p/try-convert.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/88223100/p/try-convert.html</a></p>`,r:{minutes:.25,words:74},t:"说明",y:"a"}}],["/dotnet/xiangmuqianyi/shengjizhushou.html",{loader:()=>a(()=>import("./shengjizhushou.html-CVBz73iw.js"),__vite__mapDeps([310,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>.NET 升级助手是一款可以在不同类型的 .NET Framework 应用上运行的命令行工具。 它旨在帮助将 .NET Framework 应用升级到 .NET 6。 在运行此工具后，大多数情况下，应用将需要其他操作才能完成迁移。 此工具会安装可以帮助完成迁移的分析器。
该工具目前支持下列 .NET Framework 应用类型：</p>
<ul>
<li>.NET Framework Windows 窗体应用</li>
<li>.NET Framework WPF 应用</li>
<li>.NET Framework ASP.NET MVC 应用</li>
<li>.NET Framework 控制台应用</li>
<li>.NET Framework 类库</li>
</ul>`,r:{minutes:2.6,words:780},t:"升级助手",y:"a"}}],["/dotnet/youhuyinqing/",{loader:()=>a(()=>import("./index.html-DVT-BRMi.js"),__vite__mapDeps([311,1])),meta:{a:"azrng",d:16845408e5,l:"2023年5月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>包</h2>
<h3>stride</h3>
<p>仓库地址：<a href="https://github.com/stride3d/stride" target="_blank" rel="noopener noreferrer">https://github.com/stride3d/stride</a></p>
`,r:{minutes:.13,words:38},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/peizhicunchu.html",{loader:()=>a(()=>import("./peizhicunchu.html-Di8WvUN_.js"),__vite__mapDeps([312,1])),meta:{a:"azrng",d:16858368e5,l:"2023年6月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>存储位置</h2>
<p>在WinForms中，可以使用以下方式来保存数据库连接字符串等敏感信息：</p>
<ol>
<li>在应用程序的配置文件（app.config或web.config）中保存连接字符串。配置文件具有加密选项，可以将连接字符串进行加密以保护敏感信息。</li>
<li>使用Windows凭据管理器（Credential Manager）API来存储和检索敏感信息。通过这种方式，您可以将用户名和密码等敏感信息保存在操作系统级别的凭据存储区域中，并且只有授权的用户才能访问这些信息。</li>
<li>将连接字符串等敏感信息保存在加密文本文件或二进制文件中。在读取连接字符串时，需要使用加密算法对文件进行解密。</li>
</ol>`,r:{minutes:2.74,words:822},t:"配置存储",y:"a"}}],["/dotnet/zhuomianchengxu/shangweijikaifa.html",{loader:()=>a(()=>import("./shangweijikaifa.html-CvzegmzV.js"),__vite__mapDeps([313,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>框架选择</h2>
<p>1、 WASDK（WinUI 3）
github：https://github.com/microsoft/WindowsAppSDK
Windows 应用 SDK 是一组新的开发人员组件和工具，它们代表着 Windows 应用开发平台的下一步发展。Windows 应用 SDK 提供一组统一的 API 和工具，可供从 Windows 11 到 Windows 10 版本 1809 上的任何桌面应用以一致的方式使用。</p>
<p>Windows 应用 SDK 不会用 C++ 替换 Windows SDK 或现有桌面 Windows 应用类型，例如 .NET（包括 Windows 窗体和 WPF）和桌面 Win32。
相反，Windows 应用 SDK 使用一组通用 API 来补充这些现有工具和应用类型，开发人员可以在这些平台上依赖这些 API 来执行操作。有关更多详细信息，请参阅Windows 应用 SDK 的优势。
这个WASDK目前是微软主推的开源的，UI部分是结合了WinUI 3。
2、WPF
github：https://github.com/dotnet/wpf
欢迎使用 Windows Presentation Foundation (WPF) 桌面指南，这是一个与分辨率无关的 UI 框架，使用基于矢量的呈现引擎，构建用于利用现代图形硬件。WPF 提供一套完善的应用程序开发功能，这些功能包括 Extensible Application Markup Language (XAML)、控件、数据绑定、布局、二维和三维图形、动画、样式、模板、文档、媒体、文本和版式。WPF 属于 .NET，因此可以生成整合 .NET API 其他元素的应用程序。
目前WPF也已经开源，而且整体上更为成熟，Visual Studio就是WPF 4.x开发的，生态也比较好。
3、WinForms
github:https://github.com/dotnet/winforms)
欢迎使用 Windows 窗体的桌面指南，Windows 窗体是一个可创建适用于 Windows 的丰富桌面客户端应用的 UI 框架。Windows 窗体开发平台支持广泛的应用开发功能，包括控件、图形、数据绑定和用户输入。Windows 窗体采用 Visual Studio 中的拖放式可视化设计器，可轻松创建 Windows 窗体应用。
这个也是开源的，Winform算是上手即用的开发框架了，通过拖拉拽可以很轻松的创建出UI和编写对应的功能，对于UI美观程度不太重要的工业领域，这个用来做工具开发很简单，上手也容易。
4、UWP
github:https://docs.microsoft.com/zh-cn/windows/uwp/get-started/universal-application-platform-guide)
UWP 是创建适用于 Windows 的客户端应用程序的众多方法之一。UWP 应用使用 WinRT API 来提供强大的 UI 和高级异步功能，这些功能非常适用于 Internet 连接的设备。
微软对于UWP，只能说曾经爱过，当初UWP可是当红炸子鸡，号称跨windows全平台，不过现在也是跨windows全平台，可惜没搞好，不过虽然不够受重视，但是一时半会还是死不掉，毕竟WASDK还不够成熟。
为什么选择WASDK
通过上面的介绍，大家对于windows下的原生UI开发框架应该有了一些了解，如果抛开语言限制的话还有更多的选择，比如QT，各种前端的跨平台，像微软自己家的MAUI什么的，我之前还写了一篇《WinUI迁移到即将"过时"的.NET MAUI个人体验》。
最近的微软Windows App SDK 1.1版本发布了，意味着BUG应该少了很多，也可以正式的在一些项目中使用了。通过官方的WinUI库，我们可以轻松的构建符合Win11设计规范的UI，由于UWP的种种问题，WPF和WinForms又是只开源，应该不会有大的新特性了，外加本人以前也经常玩玩UWP，通过前景和自己的喜好，肯定是选择WASDK了。</p>`,r:{minutes:3.24,words:971},t:"上位机开发",y:"a"}}],["/live/yule/aifuzhu.html",{loader:()=>a(()=>import("./aifuzhu.html-Dc3tV6kh.js"),__vite__mapDeps([314,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["生活"],g:["无"],o:!0,e:`<h3>文字</h3>
<h3>写作</h3>
<ul>
<li>脱口秀（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-stand-up-comedian" target="_blank" rel="noopener noreferrer">Stand-up Comedianopen in new window</a>）：输入一个话题，输出基于该话题的幽默脱口秀，会尽量融入日常生活。</li>
<li>讲故事（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-storyteller" target="_blank" rel="noopener noreferrer">Storytelleropen in new window</a>）：输入一个主题和目标受众，输出与之相关的故事。</li>
<li>编剧（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-screenwriter" target="_blank" rel="noopener noreferrer">Screenwriteropen in new window</a>）：根据主题创作一个剧本，需包含故事背景、人物和对话。</li>
<li>小说家（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-novelist" target="_blank" rel="noopener noreferrer">Novelistopen in new window</a>）：根据故事类型来输出小说，比如奇幻、浪漫、历史等。</li>
<li>诗人（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-poet" target="_blank" rel="noopener noreferrer">Poetopen in new window</a>）：根据话题或主题输出诗句。</li>
<li>新闻记者（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-a-journalist" target="_blank" rel="noopener noreferrer">Journalistopen in new window</a>）：引用已有的数据资料，用新闻的写作风格输出主题文章。</li>
<li>论文（<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-an-academician" target="_blank" rel="noopener noreferrer">Academicianopen in new window</a>，<a href="https://github.com/f/awesome-chatgpt-prompts#act-as-an-essay-writer" target="_blank" rel="noopener noreferrer">Essay Writeropen in new window</a>）：根据主题输出内容翔实有信服力的论文。</li>
</ul>`,r:{minutes:6.95,words:2084},t:"AI辅助",y:"a"}}],["/live/yule/banZi.html",{loader:()=>a(()=>import("./banZi.html-CzUqNkwb.js"),__vite__mapDeps([315,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["生活"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>板子：友善 nanopc t3</p>
<p>https://wiki.friendlyelec.com/wiki/index.php/NanoPC-T3</p>
<p>maix</p>
<p>https://wiki.sipeed.com/hardware/zh/maixzero/m0p/m0p_dock.html</p>
<p>https://mp.weixin.qq.com/s/oxDBH0z_blwCMBCr4AXhLg | 目前200以内最值得购买的开发板，别的不用看了，就它能买 — OrangePi Zero2</p>
`,r:{minutes:.24,words:71},t:"板子",y:"a"}}],["/live/yule/chatgptgeji.html",{loader:()=>a(()=>import("./chatgptgeji.html-CVLrDx-I.js"),__vite__mapDeps([316,1])),meta:{a:"azrng",d:16798752e5,l:"2023年3月27日",c:["生活"],g:["无"],o:!0,e:`<h3>OpenGpt</h3>
<p>地址：https://open-gpt.app/
这个网站现在有 1000 多个应用，比如：写诗、取名、修改错别字、翻译等，按照使用场景分的很细，也可创建自己的应用。
每天每个用户免费使用 10 次，使用 自己的 API key 可以解除限制。</p>
<h3>you.com</h3>
<p>地址：https://you.com
you.com 是一个搜索引擎，Chat 是这款搜索引擎中的一个模块。在 Chat 模块进行搜索，中间区域给给出一个最优答案，右侧也会有通过搜索引擎返回的结果列表。</p>
<h3>周报生成器</h3>
<p>地址：https://weeklyreport.avemaria.fun/zh
将一周所做的事情罗列下，就能生成一份很详细的周报，稍微改改就能用，有周报困扰的同学可以试试。</p>`,r:{minutes:6.06,words:1817},t:"ChatGpt合集",y:"a"}}],["/live/yule/joke.html",{loader:()=>a(()=>import("./joke.html-DmyUigew.js"),__vite__mapDeps([317,1])),meta:{a:"azrng",d:16905888e5,l:"2023年7月29日",c:["生活"],g:["娱乐"],o:!0,e:`<h2>新冠段子</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>我：这次...全靠你了
免疫系统：放心吧交给我，三年了，养兵千日,用兵一时
我：去吧，干掉它们
免疫系统：待会打起来你照顾好自己，我杀疯了可顾不上你
免疫系统：操TMD，先把体温给老子拉到40,老子烧死它们
我：可这样我也撑不住啊
免疫系统：我相信你你可以撑住
我：可是我好像看见了我奶来接我了
免疫系统：别可是了，我们没有退路，这把高端局给我上42度，开启终极模式
免疫系统：MD还有谁？癌细胞呢！出来与我一战
多年后.
免疫系统：那年我双手插兜，不知道什么叫做对手，连宿主也没放在眼里……..
</code></pre></div>`,r:{minutes:5.37,words:1610},t:"段子",y:"a"}}],["/orm/adoNet/dbhelper.html",{loader:()=>a(()=>import("./dbhelper.html-CA49btGm.js"),__vite__mapDeps([318,1])),meta:{a:"azrng",d:16799616e5,l:"2023年3月28日",c:["orm"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Configuration</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">DAL</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBHelper</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> conn <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>ConnectionStrings<span class="token punctuation">[</span><span class="token string">"connstr"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ConnectionString<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 返回首行首列</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> param<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlCommand</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        com<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> com<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DataTable</span> <span class="token function">GetDate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parm<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">SqlDataAdapter</span> da <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">DataSet</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    da<span class="token punctuation">.</span>SelectCommand<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                da<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 返回受影响行数</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parm<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">bool</span></span> i <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlCommand</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        com<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        i <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行存储过程</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ExecuteNonQueryByProc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parm<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">bool</span></span> i <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlCommand</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        com<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    com<span class="token punctuation">.</span>CommandType <span class="token operator">=</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        i <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 使用SqlDataReader进行查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">SqlDataReader</span> <span class="token function">DataReader</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parm<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处不能使用using</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    cmd<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span>CommandBehavior<span class="token punctuation">.</span>CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行存储过程</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>procname<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">SqlDataReader</span> <span class="token function">DataReaderByProc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> procname<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parm<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">SqlConnection</span> con <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlCommand</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlCommand</span><span class="token punctuation">(</span>procname<span class="token punctuation">,</span> con<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span>State <span class="token operator">==</span> ConnectionState<span class="token punctuation">.</span>Closed<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    con<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>parm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    cmd<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>parm<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cmd<span class="token punctuation">.</span>CommandType <span class="token operator">=</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">;</span>
                <span class="token keyword">return</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span>CommandBehavior<span class="token punctuation">.</span>CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.41,words:424},t:"DbHelper",y:"a"}}],["/orm/adoNet/dongruandaimashengchengqi.html",{loader:()=>a(()=>import("./dongruandaimashengchengqi.html-CTuYNwja.js"),__vite__mapDeps([319,1])),meta:{a:"azrng",d:16417728e5,l:"2022年1月10日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>官网地址：<a href="http://www.maticsoft.com/download.aspx" target="_blank" rel="noopener noreferrer">http://www.maticsoft.com/download.aspx</a></p>
<h2>公共类</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Maticsoft<span class="token punctuation">.</span>IDAL</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Maticsoft<span class="token punctuation">.</span>DBUtility</span><span class="token punctuation">;</span><span class="token comment">//Please add references</span>
<span class="token keyword">namespace</span> <span class="token namespace">Maticsoft<span class="token punctuation">.</span>SQLServerDAL</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 数据访问类:BlogArticle</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">BlogArticle</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">IBlogArticle</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">BlogArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">region</span>  BasicMethod</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 得到最大ID</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetMaxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">GetMaxID</span><span class="token punctuation">(</span><span class="token string">"bID"</span><span class="token punctuation">,</span> <span class="token string">"BlogArticle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 是否存在该记录</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Exists</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> bID<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"select count(1) from BlogArticle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where bID=@bID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bID"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> bID<span class="token punctuation">;</span>

            <span class="token keyword">return</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 增加一条数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> model<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"insert into BlogArticle("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" values ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"@bsubmitter,@btitle,@bcategory,@bcontent,@btraffic,@bcommentNum,@bUpdateTime,@bCreateTime,@bRemark)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">";select @@IDENTITY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bsubmitter"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@btitle"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcategory"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcontent"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@btraffic"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcommentNum"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bUpdateTime"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bCreateTime"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bRemark"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bsubmitter<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>btitle<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcategory<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcontent<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>btraffic<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcommentNum<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bUpdateTime<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bCreateTime<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bRemark<span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">GetSingle</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 更新一条数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> model<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"update BlogArticle set "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bsubmitter=@bsubmitter,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"btitle=@btitle,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bcategory=@bcategory,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bcontent=@bcontent,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"btraffic=@btraffic,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bcommentNum=@bcommentNum,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bUpdateTime=@bUpdateTime,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bCreateTime=@bCreateTime,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"bRemark=@bRemark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where bID=@bID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bsubmitter"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@btitle"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcategory"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcontent"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@btraffic"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bcommentNum"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bUpdateTime"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bCreateTime"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bRemark"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>NVarChar<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bID"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bsubmitter<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>btitle<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcategory<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcontent<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>btraffic<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bcommentNum<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bUpdateTime<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bCreateTime<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bRemark<span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> model<span class="token punctuation">.</span>bID<span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">int</span></span> rows<span class="token operator">=</span>DbHelperSQL<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除一条数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> bID<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"delete from BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where bID=@bID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bID"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> bID<span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">int</span></span> rows<span class="token operator">=</span>DbHelperSQL<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 批量删除数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">DeleteList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> bIDlist <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"delete from BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where bID in ("</span><span class="token operator">+</span>bIDlist <span class="token operator">+</span> <span class="token string">")  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> rows<span class="token operator">=</span>DbHelperSQL<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 得到一个对象实体</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> <span class="token function">GetModel</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> bID<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"select  top 1 bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark from BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where bID=@bID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@bID"</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>Int<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> bID<span class="token punctuation">;</span>

            <span class="token class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> model<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DataSet</span> ds<span class="token operator">=</span>DbHelperSQL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">DataRowToModel</span><span class="token punctuation">(</span>ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 得到一个对象实体</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> <span class="token function">DataRowToModel</span><span class="token punctuation">(</span><span class="token class-name">DataRow</span> row<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span> model<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Maticsoft<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BlogArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bID"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">[</span><span class="token string">"bID"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bID<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bID"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bsubmitter"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bsubmitter<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token string">"bsubmitter"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"btitle"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>btitle<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token string">"btitle"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bcategory"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bcategory<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token string">"bcategory"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bcontent"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bcontent<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token string">"bcontent"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"btraffic"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">[</span><span class="token string">"btraffic"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>btraffic<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"btraffic"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bcommentNum"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">[</span><span class="token string">"bcommentNum"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bcommentNum<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bcommentNum"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bUpdateTime"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">[</span><span class="token string">"bUpdateTime"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bUpdateTime<span class="token operator">=</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bUpdateTime"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bCreateTime"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">[</span><span class="token string">"bCreateTime"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bCreateTime<span class="token operator">=</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bCreateTime"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"bRemark"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    model<span class="token punctuation">.</span>bRemark<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token string">"bRemark"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> model<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获得数据列表</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DataSet</span> <span class="token function">GetList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> strWhere<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"select bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" FROM BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strWhere<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token operator">+</span>strWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获得前几行数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DataSet</span> <span class="token function">GetList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> Top<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> strWhere<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> filedOrder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"select "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>Top<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" top "</span><span class="token operator">+</span>Top<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" bID,bsubmitter,btitle,bcategory,bcontent,btraffic,bcommentNum,bUpdateTime,bCreateTime,bRemark "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" FROM BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strWhere<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token operator">+</span>strWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" order by "</span> <span class="token operator">+</span> filedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取记录总数</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetRecordCount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> strWhere<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"select count(1) FROM BlogArticle "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strWhere<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token operator">+</span>strWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name"><span class="token keyword">object</span></span> obj <span class="token operator">=</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">GetSingle</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 分页获取数据列表</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DataSet</span> <span class="token function">GetListByPage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> strWhere<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">orderby</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> startIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> endIndex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> strSql<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM ( "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" SELECT ROW_NUMBER() OVER ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">orderby</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"order by T."</span> <span class="token operator">+</span> <span class="token keyword">orderby</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"order by T.bID desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">")AS Row, T.*  from BlogArticle T "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>strWhere<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" WHERE "</span> <span class="token operator">+</span> strWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">" ) TT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            strSql<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">" WHERE TT.Row between {0} and {1}"</span><span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> DbHelperSQL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/*
        /// &lt;summary&gt;
        /// 分页获取数据列表
        /// &lt;/summary&gt;
        public DataSet GetList(int PageSize,int PageIndex,string strWhere)
        {
            SqlParameter[] parameters = {
                    new SqlParameter("@tblName", SqlDbType.VarChar, 255),
                    new SqlParameter("@fldName", SqlDbType.VarChar, 255),
                    new SqlParameter("@PageSize", SqlDbType.Int),
                    new SqlParameter("@PageIndex", SqlDbType.Int),
                    new SqlParameter("@IsReCount", SqlDbType.Bit),
                    new SqlParameter("@OrderType", SqlDbType.Bit),
                    new SqlParameter("@strWhere", SqlDbType.VarChar,1000),
                    };
            parameters[0].Value = "BlogArticle";
            parameters[1].Value = "bID";
            parameters[2].Value = PageSize;
            parameters[3].Value = PageIndex;
            parameters[4].Value = 0;
            parameters[5].Value = 0;
            parameters[6].Value = strWhere;    
            return DbHelperSQL.RunProcedure("UP_GetRecordByPage",parameters,"ds");
        }*/</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span>  BasicMethod</span>
        <span class="token preprocessor property">#<span class="token directive keyword">region</span>  ExtensionMethod</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span>  ExtensionMethod</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:3.53,words:1059},t:"动软代码生成器",y:"a"}}],["/orm/adoNet/issue.html",{loader:()=>a(()=>import("./issue.html-CEEubyM7.js"),__vite__mapDeps([320,1])),meta:{a:"azrng",d:17006976e5,l:"2023年11月23日",c:["orm"],g:["issue"],o:!0,e:`<h2>连接sqlserver2008问题</h2>
<h3>场景</h3>
<p>在使用System.Data.SqlClient(Microsoft.Data.SqlClient只是测试了一次发现也连接不了)连接sqlserver2008的时候在容器部署的情况下报错，因为连接的是甲方的数据库，数据库版本等不能升级或者打补丁</p>
<h3>错误信息</h3>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Connection Timeout Expired. The timeout period elapsed during the post-login phase. The connection could have timed out while waiting for server to complete the login process and respond; Or it could have timed out while attempting to create multiple active connections. The duration spent while attempting to connect to this server was - [Pre-Login] initialization=3; handshake=10; [Login] initialization=0; authentication=0; [Post-Login] complete=14074;
</code></pre></div>`,r:{minutes:2.05,words:615},t:"问题",y:"a"}}],["/orm/adoNet/operation.html",{loader:()=>a(()=>import("./operation.html-inkD0M91.js"),__vite__mapDeps([321,1])),meta:{a:"azrng",d:16968096e5,l:"2023年10月9日",c:["orm"],g:["adonet"],o:!0,e:`<h2>前言</h2>
<p>可以直接通过ADO.NET来操作数据库，一般为了方便起见，是搭配Dapper等进行操作的</p>
<h2>查询操作</h2>

<p>执行查询返回列表</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var sql = "select * from user";
var connection = new MySqlConnection("连接字符串");
if (connection.State != ConnectionState.Open)
    await connection.OpenAsync();

using var cmd = connection.CreateCommand();
cmd.CommandText = strSql;
using var reader = await cmd.ExecuteReaderAsync();
var list = ReadEntityListByReader&lt;Employee&gt;(reader);

/// &lt;summary&gt;
/// Read entity list by reader
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;entity&lt;/typeparam&gt;
/// &lt;param name="reader"&gt;data reader&lt;/param&gt;
/// &lt;returns&gt;entity&lt;/returns&gt;
private static List&lt;T&gt; ReadEntityListByReader&lt;T&gt;(DbDataReader reader) where T : new()
{
    List&lt;T&gt; listT = new List&lt;T&gt;();
    using (reader)
    {
        while (reader.Read())
        {
            T inst = new T();
            foreach (var pi in typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public))
            {
                var obj = new object();
                try
                {
                    obj = reader[pi.Name];
                }
                catch (Exception ex)
                {
                    continue;
                }
                if (obj == DBNull.Value || obj == null)
                    continue;
                var si = pi.GetSetMethod();
                if (si == null)
                    continue;
                pi.SetValue(inst, obj, null);
            }
            listT.Add(inst);
        }
    }
    return listT;
}
</code></pre></div>`,r:{minutes:2.12,words:635},t:"操作",y:"a"}}],["/orm/adoNet/",{loader:()=>a(()=>import("./index.html-nJP9b9zo.js"),__vite__mapDeps([322,1])),meta:{a:"azrng",d:16851456e5,l:"2023年5月27日",c:["orm"],g:["无"],o:!0,e:`<h2>连接池</h2>
<p>数据库服务器建立连接的过程是比较耗时的，对此，ADO.NET中使用了连接池来进行优化。在.NET中不同的Data Provider对于连接池的处理方式不尽相同。默认情况下，ADO.NET 启用连接池优化，可以通过连接字符串来配置是否启用连接池。
连接池可以减少和数据库建立连接的次数，连接池中维护着一组活跃的数据库连接。在我们调用IDbConnection的Open方法时，CLR会去连接池中寻找是否有可用的连接，若有则返回该连接而无需与数据库建立新的连接。当我们调用IDbConnection的Close方法时，连接会被连接池回收但不断开与数据库的连接，以备下次使用。连接池中的连接空闲一段时间（约4~8分钟）后或者连接池检测到连接已与服务器断开（需要与服务器通讯才能检测连接是否已断开），那么该连接将会被销毁。
在第一次打开连接时，ADO.NET会根据连接配置来建立连接池。ADO.NET为每个连接配置创建一个连接池，所以若程序中用到多个不同的连接配置（如，不同的连接字符串），则会有多个连接池。
若连接池中发生了超时或者其它登录错误，则会抛出异常，那么在接下来的5s内尝试该连接都将失败，这5s钟成为阻塞期。若阻塞期结束后的连接再次失败，则会进入一个新的阻塞期，新的阻塞期时长是上个阻塞期时长的2倍，但最多不超过1分钟。
如果连接字符串中没有设置MinPoolSize的值，或者将该值设为0，那么当池中没有活动连接时，连接池也会被销毁。但若将MinPoolSize的值设为大于0，那么只有在卸载AppDomain时，连接池才会被销毁。当连接池中发生了较为严重的错误，连接池也会自我清理。
连接池中最大连接数默认为100，当连接池中连接数已达到上限，且均被占用，那么新的请求会进入队列等到，等待时间超过15s（默认）则会抛出异常。
数据库连接推荐使用如下写法，这样using语句结束后，连接对象会回到连接池中以便下次请求使用。</p>`,r:{minutes:2.84,words:853},t:"说明",y:"a"}}],["/orm/dapper/component.html",{loader:()=>a(()=>import("./component.html-CAMNPE-f.js"),__vite__mapDeps([323,1])),meta:{a:"azrng",d:17099424e5,l:"2024年3月9日",c:["orm"],g:["compoent"],o:!0,e:`<h2>Dapper.AOT</h2>
<p>将Dapper进行AOT的组件</p>
<h2>DapperQueryBuilder</h2>
<p>DapperQueryBuilder是扩展库，它增强了Dapper的功能，特别是关于动态SQL查询和命令的构建。它提供了字符串插值和Fluent API的操作方式，让我们构建复杂的动态查询变得更加直观和简单，并且没有SQL注入的风险。</p>
<p>仓库地址：https://github.com/Drizin/DapperQueryBuilder</p>
<p>示例</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>//Dapper代码量：需要定义SQL语句、参数列表对象
var dynamicParams = new DynamicParameters();
string sql = "SELECT * FROM Product WHERE 1=1";
sql += " AND Name LIKE @productName"; 
dynamicParams.Add("productName", productName);
sql += " AND ProductSubcategoryID = @subCategoryId"; 
dynamicParams.Add("subCategoryId", subCategoryId);
var products = cn.Query&lt;Product&gt;(sql, dynamicParams);


//DapperQueryBuilder：字符串插值的方式，更加直观而且代码量更少
var query = cn.QueryBuilder($"SELECT * FROM Product WHERE 1=1");
query += $"AND Name LIKE {productName}"; 
query += $"AND ProductSubcategoryID = {subCategoryId}"; 
var products = query.Query&lt;Product&gt;();
</code></pre></div>`,r:{minutes:.71,words:214},t:"组件",y:"a"}}],["/orm/dapper/dapperCqrs.html",{loader:()=>a(()=>import("./dapperCqrs.html-Bzn-Og5z.js"),__vite__mapDeps([324,1])),meta:{a:"azrng",d:16706304e5,l:"2022年12月10日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一个主库+一个从库或者多个从库的结构，从库的数据来自主库的同步。</p>
<h2>操作</h2>
<blockquote>
<p>下面只是关于dapper操作数据库读写分离的构思。</p>
</blockquote>
<p>新建一个存储连接字符串的类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionStringConsts</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 主库连接字符串</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> MasterConnectionString <span class="token operator">=</span> <span class="token string">"server=db.master.com;Database=crm_db;UID=root;PWD=1"</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 从库连接字符串</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> SlaveConnectionString <span class="token operator">=</span> <span class="token string">"server=db.slave.com;Database=crm_db;UID=root;PWD=1"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.99,words:896},t:"Dapper读写分离",y:"a"}}],["/orm/dapper/dapperLite.html",{loader:()=>a(()=>import("./dapperLite.html-ClPTwlZJ.js"),__vite__mapDeps([325,1])),meta:{a:"azrng",d:16864416e5,l:"2023年6月11日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Dapper.Lite是一款Dapper扩展，单表查询和SQL拼接查询条件支持Lambda表达式，旨在为大家提供一款简单易用、稳定可靠的ORM，支持Oracle、MSSQL、MySQL、PostgreSQL、SQLite、Access、ClickHouse等数据库，以及任意ADO.NET支持的数据库。
仓库地址：<a href="https://github.com/0611163/Dapper.Lite" target="_blank" rel="noopener noreferrer">https://github.com/0611163/Dapper.Lite</a></p>`,r:{minutes:.69,words:208},t:"说明",y:"a"}}],["/orm/dapper/parameter.html",{loader:()=>a(()=>import("./parameter.html-DRQSdKeu.js"),__vite__mapDeps([326,1])),meta:{a:"azrng",d:16866144e5,l:"2023年6月13日",c:["orm"],g:["无"],o:!0,e:`<h2>公共</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@stime"</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>StartTime<span class="token punctuation">.</span><span class="token function">To24HString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.02,words:907},t:"参数化查询",y:"a"}}],["/orm/dapper/",{loader:()=>a(()=>import("./index.html-Hz1XxtPl.js"),__vite__mapDeps([327,1])),meta:{a:"azrng",d:16893792e5,l:"2023年7月15日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><em>Dapper</em>是一款轻量级ORM<em>框架</em>,为解决网站访问流量极高而产生的性能问题而构造,主要通过执行TSQL表达式而实现数据库的CQRS。</p>
<h2>连接字符串</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>MySQL：
Server=47.xxxx;database=gxgtest;uid=gxg;pwd=123456;charset=utf8;

SQL server
Data Source=.;Initial Catalog=Test;User ID=sa;Password=123456

pgsql
Host=localhost;Username=postgres;Password=123456;Database=consoletest
</code></pre></div>`,r:{minutes:5.68,words:1705},t:"说明",y:"a"}}],["/orm/ef/ef.html",{loader:()=>a(()=>import("./ef.html-BFIWtLhB.js"),__vite__mapDeps([328,1])),meta:{a:"azrng",d:16689024e5,l:"2022年11月20日",c:["orm"],g:["无"],o:!0,e:`<p>• Entity Framework是实现orm思想中的一种框架。linq也是，只不过是轻量级的
• ADO.NET EF就是以ADO.NET为基础所发展出来的对象关系。
• 实体框架EF是ADO.NET中一组支持开发面向数据的软件应用程序的技术，是微软的一个ORM框架。底层还是ADO.NET。
• EF全面解释</p>
<p>连接数据库的方法:
来自数据库的EF设计器
sa登录：
metadata=res://<em>/poco.ceshi3.csdl|res://</em>/poco.ceshi3.ssdl|res://<em>/poco.ceshi3.msl;provider=System.Data.SqlClient;provider connection string="data source=.;initial catalog=MPMS;persist security info=True;user id=sa;password=;MultipleActiveResultSets=True;App=EntityFramework"
window登录方式
metadata=res://<em>/poco.ceshi3.csdl|res://</em>/poco.ceshi3.ssdl|res://</em>/poco.ceshi3.msl;provider=System.Data.SqlClient;provider connection string="data source=.;initial catalog=MPMS;integrated security=True;multipleactiveresultsets=True;application name=EntityFramework"
来自数据库的code first</p>`,r:{minutes:1.81,words:543},t:"EF",y:"a"}}],["/orm/ef/efcaozuo.html",{loader:()=>a(()=>import("./efcaozuo.html-CwGNxQH2.js"),__vite__mapDeps([329,1])),meta:{a:"azrng",d:16447104e5,l:"2022年2月13日",c:["orm"],g:["无"],o:!0,e:`<h4>创建上下文对象：</h4>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">WordBoradEntities</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WordBoradEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.04,words:613},t:"EF操作",y:"a"}}],["/orm/ef/linq_lambda.html",{loader:()=>a(()=>import("./linq_lambda.html-BiZ_keZH.js"),__vite__mapDeps([330,1])),meta:{a:"azrng",d:16447104e5,l:"2022年2月13日",c:["orm"],g:["无"],o:!0,e:`<h4>查询</h4>
<p>linq语法：更应该叫做查询表达式</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>from 变量名 <span class="token keyword">in</span> db<span class="token punctuation">.</span>对象名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>
<span class="token keyword">orderby</span>、<span class="token keyword">select</span>、<span class="token keyword">join</span>
</code></pre></div>`,r:{minutes:1.84,words:551},t:"Linq+lambda",y:"a"}}],["/orm/ef/youhua.html",{loader:()=>a(()=>import("./youhua.html-o1kt4FgF.js"),__vite__mapDeps([331,1])),meta:{a:"azrng",d:16447104e5,l:"2022年2月13日",c:["orm"],g:["无"],o:!0,e:`<h3>过滤查询</h3>
<p>示例:查询用户姓名中包含有p字母的所有用户信息
推荐写法：使用contains</p>
<blockquote>
<p>var data3 = dbContext.T_UserInfor.Where(u =&gt; u.userName.Contains("p")).ToList();</p>
</blockquote>
<p>这点和efcore的不一样，efcore生成的是CHARINDEX("p",userName)&gt;0</p>
<h3>包含关系</h3>
<p>示例：求用户姓名为&nbsp;"p1,p2,p3,p4,x2,y4"的所有用户信息，已知字符串 string str = "p1,p2,p3,p4,x2,y4";
正确做法：将字符串转成list，然后再使用contains</p>`,r:{minutes:.53,words:158},t:"优化",y:"a"}}],["/orm/efcore/fengzhuanggonggonglei.html",{loader:()=>a(()=>import("./fengzhuanggonggonglei.html-BIfE5cGJ.js"),__vite__mapDeps([332,1])),meta:{a:"azrng",d:16725312e5,l:"2023年1月1日",c:["orm"],g:["无"],o:!0,e:`<h2>数据库上下文</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 泛型方法，直接注入EF上下文</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span> 
        <span class="token keyword">public</span> <span class="token class-name">DbContext</span> db<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 在使用的时候，自动注入db上下文</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token function">BaseService</span><span class="token punctuation">(</span><span class="token class-name">DbContext</span> db<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> db<span class="token punctuation">;</span>

            <span class="token comment">//关闭全局追踪的代码</span>
            <span class="token comment">//db.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/****************************************下面进行方法的封装（同步）***********************************************/</span>
        <span class="token comment">//1. 直接提交数据库</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-数据源</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Entities</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">EntitiesNoTrack</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-新增</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Added<span class="token punctuation">;</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Del</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 04-根据条件删除(支持批量删除)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件删除(支持批量删除)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>传入Lambda表达式(生成表达式目录树)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">DelBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listDels <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listDels<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>model <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 05-单实体修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改后的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">Modify</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Modified<span class="token punctuation">;</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 06-批量修改（非lambda）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 批量修改（非lambda）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要修改实体中 修改后的属性 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询实体的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>lambda的形式表示要修改的实体属性名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">ModifyBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> proNames<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listModifes <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>PropertyInfo<span class="token punctuation">&gt;</span></span> proInfos <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Instance <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Public<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> PropertyInfo<span class="token punctuation">&gt;</span></span> dicPros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> PropertyInfo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            proInfos<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>proNames<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dicPros<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> proName <span class="token keyword">in</span> proNames<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dicPros<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>proName<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">PropertyInfo</span> proInfo <span class="token operator">=</span> dicPros<span class="token punctuation">[</span>proName<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">object</span></span> newValue <span class="token operator">=</span> proInfo<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">T</span> m <span class="token keyword">in</span> listModifes<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        proInfo<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 07-根据条件查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件(lambda表达式的形式生成表达式目录树)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetListBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
           
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 08-根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tkey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序字段类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAsc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>升序or降序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetListBy</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 09-分页查询(根据Lambda排序)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tkey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序字段类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAsc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>升序or降序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetPageList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>

            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 10-分页查询(根据名称排序)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 分页查询输出总行数（根据名称排序）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rowCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>输出的总数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortDirection<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>asc 或 desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetPageListByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortDirection<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                list <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                list <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 11-分页查询输出总行数（根据Lambda排序）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tkey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序字段类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAsc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>升序or降序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetPageList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> rowCount<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            rowCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 12-分页查询输出总行数（根据名称排序）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 分页查询输出总行数（根据名称排序）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rowCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>输出的总数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortDirection<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>asc 或 desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetPageListByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> rowCount<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortDirection<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            count <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                list<span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                list <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                   <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            rowCount <span class="token operator">=</span> count<span class="token punctuation">;</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>


        <span class="token comment">//2. SaveChange剥离出来，处理事务</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-批量处理SaveChange()</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 事务批量处理</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SaveChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-新增</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 新增</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要新增的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">AddNo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Added<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DelNo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 04-根据条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">DelByNo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listDels <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listDels<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>model <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 05-修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改后的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">ModifyNo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Modified<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>


        <span class="token comment">//3. EF调用sql语句</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-执行增加,删除,修改操作(或调用相关存储过程)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行增加,删除,修改操作(或调用存储过程)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pars<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ExecuteSql</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pars<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlRaw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-执行查询操作（调用查询类的存储过程）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行查询操作</span>
        <span class="token doc-comment comment">/// 注：查询必须返回实体的所有属性字段；结果集中列名必须与属性映射的项目匹配；查询中不能包含关联数据</span>
        <span class="token doc-comment comment">/// 除Select以外其他的SQL语句无法执行</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pars<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ExecuteQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pars<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//表示跟踪状态（默认是跟踪的）</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//表示不跟踪状态</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-执行查询操作（与Linq相结合）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行查询操作</span>
        <span class="token doc-comment comment">/// 注：查询必须返回实体的所有属性字段；结果集中列名必须与属性映射的项目匹配；查询中不能包含关联数据</span>
        <span class="token doc-comment comment">/// 除Select以外其他的SQL语句无法执行</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pars<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ExecuteQueryWhere</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pars<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//表示跟踪状态（默认是跟踪的）</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//表示不跟踪状态</span>
                <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>



        <span class="token comment">/****************************************下面进行方法的封装（异步）***********************************************/</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-新增</span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AddAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DelAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-根据条件删除(支持批量删除)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件删除(支持批量删除)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>传入Lambda表达式(生成表达式目录树)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DelByAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listDels <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listDels<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>model <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 04-单实体修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>修改后的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ModifyAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Modified<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 05-批量修改（非lambda）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 批量修改（非lambda）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要修改实体中 修改后的属性 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询实体的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>lambda的形式表示要修改的实体属性名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ModifyByAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> proNames<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listModifes <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Type</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>PropertyInfo<span class="token punctuation">&gt;</span></span> proInfos <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Instance <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Public<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> PropertyInfo<span class="token punctuation">&gt;</span></span> dicPros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> PropertyInfo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            proInfos<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>proNames<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dicPros<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> proName <span class="token keyword">in</span> proNames<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dicPros<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>proName<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">PropertyInfo</span> proInfo <span class="token operator">=</span> dicPros<span class="token punctuation">[</span>proName<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">object</span></span> newValue <span class="token operator">=</span> proInfo<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">T</span> m <span class="token keyword">in</span> listModifes<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        proInfo<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 06-根据条件查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件(lambda表达式的形式生成表达式目录树)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetListByAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 07-根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tkey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序字段类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAsc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>升序or降序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetListByAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> data<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 08-分页查询(根据Lambda排序)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据条件排序和查询</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tkey<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序字段类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAsc<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>升序or降序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token generic-method"><span class="token function">GetPageListAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Tkey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> orderLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isAsc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>

            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>orderLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> data<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 09-分页查询(根据名称排序)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 分页查询输出总行数（根据名称排序）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageIndex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>页码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rowCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>输出的总数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whereLambda<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查询条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortDirection<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>asc 或 desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isTrack<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是否跟踪状态，默认是跟踪的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetPageListByNameAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> pageIndex<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> pageSize<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> whereLambda<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortDirection<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTrack<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                list <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                list <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DataSorting</span><span class="token punctuation">(</span>sortName<span class="token punctuation">,</span> sortDirection<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

 

        <span class="token comment">//2. SaveChange剥离出来，处理事务</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-批量处理SaveChange()</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 事务批量处理</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">SaveChangeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-新增</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 新增</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要新增的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>EntityEntry<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AddNoAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
           <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
        
        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-根据条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">DelByNoAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> listDels <span class="token operator">=</span><span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            listDels<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>model <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>


        <span class="token comment">//3. EF调用sql语句</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-执行增加,删除,修改操作(或调用存储过程)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 执行增加,删除,修改操作(或调用存储过程)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pars<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">ExecuteSqlAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> pars<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlRawAsync</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> pars<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>


        <span class="token comment">/****************************************下面是基于【EFCore.BulkExtensions】大数据的处理 （同步）***********************************************/</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-增加</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 增加</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkInsert</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkInsert</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 修改</span>
        <span class="token doc-comment comment">/// PS：传入的实体如果不赋值,则更新为null,即传入的实体每个字段都要有值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkUpdate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkUpdate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除</span>
        <span class="token doc-comment comment">/// PS：传入的list中的实体仅需要主键有值,它是根据主键删除的</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkDelete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkDelete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 04-条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">BatchDelete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 05-条件更新1</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件更新</span>
        <span class="token doc-comment comment">/// PS：要更新哪几个字段，就给传入的实体中的哪几个字段赋值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要更新的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>更新为的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">BatchUpdate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">,</span> <span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchUpdate</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 06-条件更新2</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件更新</span>
        <span class="token doc-comment comment">/// PS：要更新哪几个字段，就给传入的实体中的哪几个字段赋值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要更新的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>更新为的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token generic-method"><span class="token function">BatchUpdate2</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> modelWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchUpdate</span><span class="token punctuation">(</span>modelWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>


        <span class="token comment">/****************************************下面是基于【EFCore.BulkExtensions】大数据的处理 （异步）***********************************************/</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-增加</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 增加</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkInsertAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkInsertAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-修改</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 修改</span>
        <span class="token doc-comment comment">/// PS：传入的实体如果不赋值,则更新为null,即传入的实体每个字段都要有值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkUpdateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkUpdateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 03-删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 删除</span>
        <span class="token doc-comment comment">/// PS：传入的list中的实体仅需要主键有值,它是根据主键删除的</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">BulkDeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">BulkDeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 04-条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件删除</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要删除的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">BatchDeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchDeleteAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 05-条件更新1</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件更新</span>
        <span class="token doc-comment comment">/// PS：要更新哪几个字段，就给传入的实体中的哪几个字段赋值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要更新的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>更新为的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span>  <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">BatchUpdateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">,</span> <span class="token class-name">T</span> model<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchUpdateAsync</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 06-条件更新2</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 条件更新</span>
        <span class="token doc-comment comment">/// PS：要更新哪几个字段，就给传入的实体中的哪几个字段赋值</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delWhere<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>需要更新的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>更新为的实体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">BatchUpdate2Async</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> delWhere<span class="token punctuation">,</span> <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> modelWhere<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>delWhere<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BatchUpdateAsync</span><span class="token punctuation">(</span>modelWhere<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token punctuation">}</span>
 <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 排序的扩展</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SortExtension</span>
    <span class="token punctuation">{</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 01-根据string名称排序扩展(单字段)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 根据string名称排序扩展(单字段)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序数据源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sortDirection<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序方式 asc或desc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DataSorting</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sortDirection<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sortingDir <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortDirection<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"ASC"</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                sortingDir <span class="token operator">=</span> <span class="token string">"OrderBy"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sortDirection<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"DESC"</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                sortingDir <span class="token operator">=</span> <span class="token string">"OrderByDescending"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">ParameterExpression</span> param <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PropertyInfo</span> pi <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>sortName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            types<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pi<span class="token punctuation">.</span>PropertyType<span class="token punctuation">;</span>
            <span class="token class-name">Expression</span> expr <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Queryable</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortingDir<span class="token punctuation">,</span> types<span class="token punctuation">,</span> source<span class="token punctuation">.</span>Expression<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Lambda</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> sortName<span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> query<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 02-根据多个string名称排序扩展(多字段)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///  根据多个string名称排序扩展(多字段)</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>数据源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderParams<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>排序类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DataManySorting</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token class-name">FiledOrderParam<span class="token punctuation">[</span><span class="token punctuation">]</span></span> orderParams<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderParams <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> orderParams<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> orderParams<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> property <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>orderParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> propertyAccess <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MakeMemberAccess</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> orderByExpr <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Lambda</span><span class="token punctuation">(</span>propertyAccess<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">string</span></span> methodName <span class="token operator">=</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">?</span>
                            orderParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>IsDesc <span class="token punctuation">?</span> <span class="token string">"ThenByDescending"</span> <span class="token punctuation">:</span> <span class="token string">"ThenBy"</span>
                            <span class="token punctuation">:</span> orderParams<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>IsDesc <span class="token punctuation">?</span> <span class="token string">"OrderByDescending"</span> <span class="token punctuation">:</span> <span class="token string">"OrderBy"</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> resultExp <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
                            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Queryable</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span>
                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> property<span class="token punctuation">.</span>PropertyType <span class="token punctuation">}</span><span class="token punctuation">,</span>
                            data<span class="token punctuation">.</span>Expression<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Quote</span><span class="token punctuation">(</span>orderByExpr<span class="token punctuation">)</span>
                            <span class="token punctuation">)</span><span class="token punctuation">;</span>
                        data <span class="token operator">=</span> data<span class="token punctuation">.</span>Provider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>resultExp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 排序类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FiledOrderParam</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//是否降序</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDesc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">//排序名称</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PropertyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:15.23,words:4568},t:"封装公共类",y:"a"}}],["/orm/efcore/issue.html",{loader:()=>a(()=>import("./issue.html-B_yhQGf3.js"),__vite__mapDeps([333,1])),meta:{a:"azrng",d:17006976e5,l:"2023年11月23日",c:["orm"],g:["issue"],o:!0,e:`<h2>pgsql默认true问题</h2>
<p>场景：将表中一个bool类型的值显式设置该字段默认值为true，然后插入false的值时候，生成sql如下</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Executed DbCommand (44ms) [Parameters=[@p0='7132734341593665537', @p1='admin11' (Nullable = false), @p2='2023-11-21T06:19:46.8346319Z' (DbType = DateTime), @p3='1', @p4='6934152201521549313', @p5='2023-11-21T06:19:46.83
46326Z' (DbType = DateTime), @p6='张三' (Nullable = false), @p7='654321' (Nullable = false), @p8='1'], CommandType='Text', CommandTimeout='30']
INSERT INTO sample."user" (id, account, create_time, credit, group_id, modify_time, name, pass_word, sex)
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8)
RETURNING deleted;
</code></pre></div>`,r:{minutes:.51,words:152},t:"问题",y:"a"}}],["/orm/efcore/jiamicunchushuju.html",{loader:()=>a(()=>import("./jiamicunchushuju.html-4r-Kkofk.js"),__vite__mapDeps([334,1])),meta:{a:"MY IO",d:16779744e5,l:"2023年3月5日",c:["orm"],g:["无"],o:!1,e:`<h2>目的</h2>
<p>针对某些数据字段要保存敏感数据的情况，比如银行卡号，我们需要使用一种机制保证存储到数据库的数据是加密的，避免数据泄露风险，但是又能够正常读取出来显示。
下面我们用MySql演示如何操作。</p>
<h2>操作</h2>
<p>创建一个ConsoleApp1，然后引用下列NuGet包：</p>
<ul>
<li>EntityFrameworkCore.DataEncryption</li>
<li>Pomelo.EntityFrameworkCore.MySql</li>
</ul>
<p>假设数据表User已创建好，包含3个字段:</p>
<ul>
<li>Id 主键</li>
<li>Name 姓名</li>
<li>BankCard 银行账户</li>
</ul>`,r:{minutes:1.35,words:405},t:"加密存储数据",y:"a"}}],["/orm/efcore/quanjuyichanglanjie.html",{loader:()=>a(()=>import("./quanjuyichanglanjie.html-ChL1te7K.js"),__vite__mapDeps([335,1])),meta:{a:"azrng",d:1652832e6,l:"2022年5月18日",c:["orm"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>不想将那些数据报错的异常直接返回给前端，但是弄全局异常拦截封装处理的话，错误有不具体，所以？</p>
<h2>操作</h2>
<h3>sqlserver</h3>
<p>检查 SQL Server 返回的错误号。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DbUpdateException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sqlException <span class="token operator">=</span> ex<span class="token punctuation">.</span>InnerException <span class="token keyword">as</span> <span class="token class-name">SqlException</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlException <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sqlException<span class="token punctuation">.</span>Number <span class="token operator">==</span> <span class="token number">2627</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//重复值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.63,words:189},t:"异常拦截",y:"a"}}],["/orm/efcore/",{loader:()=>a(()=>import("./index.html-oFnwiWsF.js"),__vite__mapDeps([336,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["orm"],g:["efcore"],o:!0,e:`<h2>概述</h2>
<p>EFCore可以用作对象关系映射程序(ORM),轻量级，以便于.Net开发人员能否使用.Net对象来处理数据库(可以不用关心sql)。
使用EFCore+Linq进行数据库查询更加方便。
官方文档：<a href="https://learn.microsoft.com/zh-cn/ef/core/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/ef/core/</a></p>
<h2>原理</h2>
<p>底层还是基于<code>ADO.Net+SQL</code>语句实现的。
应用程序生成c#代码=&gt;EFCore生成SQL=&gt;<code>ADO.NET</code>=&gt;执行数据库。</p>`,r:{minutes:1.35,words:405},t:"说明",y:"a"}}],["/orm/efcore/shijian(lishi)biao.html",{loader:()=>a(()=>import("./shijian(lishi)biao.html-P7PS-1rH.js"),__vite__mapDeps([337,1])),meta:{a:"azrng",d:16897248e5,l:"2023年7月19日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<blockquote>
<p>该方案仅支持SqlServer</p>
</blockquote>
<p>SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版本也会插入到历史表中。</p>
<p>通过这种方式跟踪更改，您可以捕获特定表的整个历史记录。这对于保留更改的审核日志很有用。</p>
<h2>操作</h2>`,r:{minutes:1.59,words:476},t:"时间(历史)表",y:"a"}}],["/orm/efcore/youhua.html",{loader:()=>a(()=>import("./youhua.html-DeHaGvnZ.js"),__vite__mapDeps([338,1])),meta:{a:"azrng",d:16606944e5,l:"2022年8月17日",c:["orm"],g:["无"],o:!0,e:`<h2>使用DbContext池</h2>
<p>在Core Mvc中,如果使用 AddDbContextPool 方法，那么在控制器请求 DbContext 实例时，我们会首先检查池中有无可用的实例。 请求处理完成后，实例的任何状态都将被重置，并且实例本身会返回池中。&nbsp;从概念上讲，此方法类似于 ADO.NET 连接池的运行原理，并具有节约 DbContext 实例初始化成本的优势。
poolSize 参数 AddDbContextPool 设置池保留的最大实例数 中128。 一旦 poolSize 超出，就不会缓存新的上下文实例，EF 会回退到按需创建实例的非池行为。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContextPool</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BloggingContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span> options <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.49,words:1348},t:"优化",y:"a"}}],["/orm/insql/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-CNdiq_oL.js"),__vite__mapDeps([339,1])),meta:{a:"azrng",d:16864416e5,l:"2023年6月11日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Insql是一个轻量级的.NET ORM框架。对象映射基于 Dapper，Sql 配置的灵感来自 Mybatis。</p>
<p>下载量：36.5k(2023年6月11日21:54:21)
仓库地址：<a href="https://github.com/rainrcn/insql" target="_blank" rel="noopener noreferrer">https://github.com/rainrcn/insql</a></p>
`,r:{minutes:.26,words:77},t:"说明",y:"a"}}],["/orm/linq2db/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-BgEK5Biy.js"),__vite__mapDeps([340,1])),meta:{a:"azrng",d:16864416e5,l:"2023年6月11日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>LINQ to DB 是最快的 LINQ 数据库访问库，在 POCO 对象和数据库之间提供了一个简单、轻量级、快速且类型安全的层。
从架构上讲，它比Dapper，Massive或PetaPoco等微ORM高出一步，因为您使用LINQ表达式而不是魔术字符串，同时在代码和数据库之间保持一个薄的抽象层。您的查询由 C## 编译器检查，并允许轻松重构。
但是，它不像 LINQ 到 SQL 或实体框架那样繁重。没有更改跟踪，因此您必须自己管理它，但从积极的一面来看，您可以获得更多控制并更快地访问数据。</p>
<p>下载量：7.25m(2023年6月11日21:55:03)</p>`,r:{minutes:.78,words:234},t:"介绍",y:"a"}}],["/orm/mongodbdriver/shuiming.html",{loader:()=>a(()=>import("./shuiming.html--TXkYbGo.js"),__vite__mapDeps([341,1])),meta:{a:"azrng",d:1689552e6,l:"2023年7月17日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MongoDB Driver 是用于连接 MongoDB 数据库的官方驱动程序。</p>
<h2>注入范围</h2>
<p>在 MongoDB 中使用单例模式的主要原因是维持一个数据库连接的复用，以提高性能和资源利用率。MongoDB 的连接通常是昂贵的，因为它涉及网络通信和身份验证等操作。通过使用单例模式，可以在应用程序的生命周期内重复使用同一个数据库连接，从而避免频繁地创建和销毁连接，减少开销。主要还是因为Client是线程安全的。</p>
<p>在EF Core中，DbContext 并不是线程安全的。默认情况下，每个线程应该拥有自己的 DbContext 实例。
这是因为 DbContext 内部维护了一些状态信息，如跟踪对象、缓存查询结果等。如果多个线程共享同一个 DbContext 实例，则可能导致并发访问和修改这些状态信息，从而引发不可预料的结果或并发问题。
为了确保线程安全性，请按照以下最佳实践操作：</p>`,r:{minutes:1.57,words:471},t:"说明",y:"a"}}],["/orm/sqlkata/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-CQ2MZ6QL.js"),__vite__mapDeps([342,1])),meta:{a:"azrng",d:16864416e5,l:"2023年6月11日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>功能强大的动态 SQL 查询生成器，支持 Sql Server、MySql、PostgreSql、Oracle 和Firebird。SqlKata 有一个富有表现力的 API。它遵循干净的命名约定，这与SQL语法非常相似。通过对受支持的数据库引擎提供抽象级别，允许您使用具有相同统一 API 的多个数据库。</p>
<p>SqlKata 支持复杂的查询，例如嵌套条件、从子查询中进行选择、筛选子查询、条件语句等。目前，它具有用于Sql服务器，MySql，后greSql和火鸟的内置编译器。SqlKata.执行包提供了使用 <a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener noreferrer">Dapper</a> 将查询提交到数据库的功能。</p>`,r:{minutes:1.25,words:375},t:"说明",y:"a"}}],["/orm/odbc/odbcSqlServer.html",{loader:()=>a(()=>import("./odbcSqlServer.html-BvLUUnLs.js"),__vite__mapDeps([343,344,1])),meta:{a:"azrng",d:16897248e5,l:"2023年7月19日",c:["orm"],g:["odbc"],o:!0,e:`<h2>ODBC是什么？</h2>
<p>ODBC是什么？我也不知道，用摘抄一个互联网上的话来解释：ODBC英文全称为：Open Database Connectivity。用于在不同的操作系统和数据库管理系统之间进行数据访问的标准化接口。它提供了一组函数和API，使得应用程序可以通过统一的方式访问不同类型的数据源。 大多数数据源都有适用的 ODBC 驱动程序。</p>
<p>那么ODBC和ADO.NET以及JDBC的关系是什么？让GPT来回答一下吧：</p>
<p>ODBC（Open Database Connectivity）和<code>ADO.NET</code>（ActiveX Data Objects .NET）是 Microsoft 开发的数据库访问接口。而 JDBC（Java Database Connectivity）则是由 Sun Microsystems 开发的 Java 数据库访问标准。</p>`,r:{minutes:6.31,words:1894},t:"为什么要使用ODBC连接SqlServer",y:"a"}}],["/orm/odbc/",{loader:()=>a(()=>import("./index.html-BZ9hn28b.js"),__vite__mapDeps([345,344,1])),meta:{a:"azrng",d:17006976e5,l:"2023年11月23日",c:["orm"],g:["odbc"],o:!0,e:`<h2>概述</h2>
<p>ODBC英文全称为：Open Database Connectivity。用于在不同的操作系统和数据库管理系统之间进行数据访问的标准化接口。它提供了一组函数和API，使得应用程序可以通过统一的方式访问不同类型的数据源。 大多数数据源都有适用的 ODBC 驱动程序。</p>
<p><a href="https://learn.microsoft.com/zh-cn/sql/connect/odbc/microsoft-odbc-driver-for-sql-server?view=sql-server-ver16" target="_blank" rel="noopener noreferrer">Microsoft ODBC Driver for SQL Server文档说明</a></p>`,r:{minutes:3.3,words:989},t:"说明",y:"a"}}],["/orm/sqlsugar/jianjie.html",{loader:()=>a(()=>import("./jianjie.html-7JlgxCaE.js"),__vite__mapDeps([346,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<blockquote>
<p>官网地址：<a href="http://www.donet5.com/Home/Doc" target="_blank" rel="noopener noreferrer">http://www.donet5.com/Home/Doc</a></p>
</blockquote>
`,r:{minutes:.12,words:36},t:"简介",y:"a"}}],["/orm/sqlsugar/operation.html",{loader:()=>a(()=>import("./operation.html-DAbd3w66.js"),__vite__mapDeps([347,1])),meta:{a:"azrng",d:16795296e5,l:"2023年3月23日",c:["orm"],g:["无"],o:!0,e:`<h2>连接数据库</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>oracle连接数据库方式
Data Source=192.168.1.102/ORANEWLE;User ID=DYZHCSLEAPP;Password=NYEKTLEAPP;

mysql连接数据库方式
server=192.168.120.59;Port=3306; Database=yisheng;Uid=read_user;Pwd=12341234;SslMode=None;

SQL Server连接数据库方式
server=192.168.1.101;uid=sa;pwd=123456; database =TicketPlatform
</code></pre></div>`,r:{minutes:2.09,words:627},t:"操作",y:"a"}}],["/otherLanguage/golang/anzhuang.html",{loader:()=>a(()=>import("./anzhuang.html-31A-GV46.js"),__vite__mapDeps([348,1])),meta:{a:"azrng",d:16432416e5,l:"2022年1月27日",c:["otherLanguage"],g:["无"],o:!0,e:`<blockquote>
<p>本文是在windows下进行操作的</p>
</blockquote>
<h3>安装环境</h3>
<p>go环境下载：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener noreferrer">https://golang.google.cn/dl/</a>
修改环境配置</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量。
它有用户变量和系统变量。两者的区别是用户变量下配置只对当前用户有效，系统变量下配置对所有用户有效。本人建议在用户变量下配置。

• 配置 GOROOT
选择&lt;新建&gt;按钮。
变量名：GOROOT
变量值：D:\\Program Files\\Go
• 配置 path
找到path（如果不存在，则新建），点击编辑—&gt;新建，输入：%GOROOT%\\bin
</code></pre></div>`,r:{minutes:1,words:299},t:"安装",y:"a"}}],["/otherLanguage/golang/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-DAwWFgdp.js"),__vite__mapDeps([349,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>学习路线</h2>
<p>尚硅谷的golang教程太长了，看不下去，我也是根据群友的推荐，把李文周和刘丹冰的视频看完，他们的视频都只有二三十集，看完就可以入门了
如果还想继续深入，就看幼麟实验室，动画讲解，讲的很深入，真心不错
自己再找几个开源的项目练练手，就问题不大了！</p>
<h2>资料</h2>
<p>go知识：<a href="http://www.randyfield.cn/archives/" target="_blank" rel="noopener noreferrer">http://www.randyfield.cn/archives/</a>
微信公众号：<a href="https://mp.weixin.qq.com/s/bvKrIVRSKh2rpKMfOUBKWw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/bvKrIVRSKh2rpKMfOUBKWw</a>
go版本的ioc库，完善了单元测试和文档：<a href="https://github.com/whuanle/goioc" target="_blank" rel="noopener noreferrer">https://github.com/whuanle/goioc</a>
<a href="https://gostack.cc/" target="_blank" rel="noopener noreferrer">https://gostack.cc/</a>
<a href="https://www.cloudwego.io/zh/" target="_blank" rel="noopener noreferrer">https://www.cloudwego.io/zh/</a>
<a href="https://www.topgoer.cn/" target="_blank" rel="noopener noreferrer">https://www.topgoer.cn/</a></p>`,r:{minutes:.62,words:187},t:"基础知识",y:"a"}}],["/otherLanguage/java/shuoming.html",{loader:()=>a(()=>import("./shuoming.html-DKaL2mwO.js"),__vite__mapDeps([350,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["otherLanguage"],g:["无"],o:!0,e:`<p><a href="https://www.cnblogs.com/dlhjw/p/15202983.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/dlhjw/p/15202983.html</a></p>
<p>知识图谱：<a href="https://www.processon.com/view/link/604cc2141e08537ac5c1b59e#map" target="_blank" rel="noopener noreferrer">https://www.processon.com/view/link/604cc2141e08537ac5c1b59e#map</a></p>`,r:{minutes:.15,words:45},t:"说明",y:"a"}}],["/otherLanguage/shell/bashjichuzhishi.html",{loader:()=>a(()=>import("./bashjichuzhishi.html-z72him9y.js"),__vite__mapDeps([351,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>数据类型</h2>
<h3>变量</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 定义变量</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"张三"</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>

<span class="token comment">## 接收输入</span>
<span class="token builtin class-name">echo</span> <span class="token string">"请输入"</span>
<span class="token builtin class-name">read</span> name
<span class="token builtin class-name">echo</span> <span class="token string">"您输入的值为：<span class="token variable">\${name}</span>"</span>
</code></pre></div>`,r:{minutes:1.98,words:593},t:"Bash基础知识",y:"a"}}],["/otherLanguage/shell/shelljichu.html",{loader:()=>a(()=>import("./shelljichu.html-BA6A-bfI.js"),__vite__mapDeps([352,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>条件测试：<a href="https://mp.weixin.qq.com/s/NKEXQpcNECwF_lSi41JFVA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/NKEXQpcNECwF_lSi41JFVA</a></p>
`,r:{minutes:.12,words:37},t:"Shell基础",y:"a"}}],["/otherLanguage/python/changjiancuowu.html",{loader:()=>a(()=>import("./changjiancuowu.html-D3dODVDY.js"),__vite__mapDeps([353,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>No module named pip</h2>
<p>错误：
ModuleNotFoundError: No module named ‘pip’</p>
<p>通过运行下面简单的cmd命令行语句来修复：
python -m ensurepip
python -m pip install --upgrade pip</p>
<h2>Preparing wheel metadata</h2>
<p>安装pyinstaller失败，Preparing wheel metadata ... error</p>
<p>错误原因是：
先安装wheel</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>pip install wheel <span class="token operator">-</span><span class="token class-name">i</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>pypi<span class="token operator">/</span>simple<span class="token operator">/</span>
</code></pre></div>`,r:{minutes:.36,words:108},t:"常见错误",y:"a"}}],["/otherLanguage/python/changyongjiaoben.html",{loader:()=>a(()=>import("./changyongjiaoben.html-DsTdI_X4.js"),__vite__mapDeps([354,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>办公</h2>
<h3>PDF转图片</h3>
<p>小型自动化脚本可以方便地获取整个 PDF 页面并将它们转换为图像。该脚本使用流行的 PyMuPDF 模块，该模块以其 PDF 文本提取而闻名。</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">## PDF to Images</span>
<span class="token comment">## pip install PyMuPDF</span>
<span class="token keyword">import</span> fitz
<span class="token keyword">def</span> <span class="token function">pdf_to_images</span><span class="token punctuation">(</span>pdf_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    doc <span class="token operator">=</span> fitz<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>pdf_file<span class="token punctuation">)</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> doc<span class="token punctuation">:</span>
        pix <span class="token operator">=</span> p<span class="token punctuation">.</span>get_pixmap<span class="token punctuation">(</span><span class="token punctuation">)</span>
        output <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"page</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">.</span>number<span class="token punctuation">}</span></span><span class="token string">.png"</span></span>
        pix<span class="token punctuation">.</span>writePNG<span class="token punctuation">(</span>output<span class="token punctuation">)</span>
pdf_to_images<span class="token punctuation">(</span><span class="token string">"test.pdf"</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:.66,words:197},t:"常用脚本",y:"a"}}],["/otherLanguage/python/changyongjichugongneng.html",{loader:()=>a(()=>import("./changyongjichugongneng.html-D7f5B-e-.js"),__vite__mapDeps([355,1])),meta:{a:"azrng",d:16274304e5,l:"2021年7月28日",c:["otherLanguage"],g:["无"],o:!0,e:`<h3>弹框获取路径</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>import tkinter <span class="token keyword">as</span> <span class="token class-name">tk</span>
<span class="token keyword">from</span> tkinter import <span class="token class-name">filedialog</span>



root <span class="token operator">=</span>tk<span class="token punctuation">.</span><span class="token function">Tk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
root<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token preprocessor property">## folderpath=filedialog.askdirectory()</span>
<span class="token preprocessor property">## print(folderpath) ## 打印文件夹路径 C:/Users/yunpeng.zhang/Documents/WXWork</span>

<span class="token preprocessor property">## filepath=filedialog.askopenfilename();</span>
<span class="token preprocessor property">## print(filepath) ## 打印文件路径 E:/疑问点/Snipaste_2021-04-08_13-58-16.png  </span>
</code></pre></div>`,r:{minutes:1.51,words:453},t:"常用基础功能",y:"a"}}],["/otherLanguage/python/idechajian.html",{loader:()=>a(()=>import("./idechajian.html-Cm7Lzbls.js"),__vite__mapDeps([356,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<h3>IDE Eval Reset</h3>
<p>破解工具的操作</p>
<h3>Key Promoter X</h3>
<p>它就相当于一个快捷键管理大师，它时刻地在：</p>
<ul>
<li>教导你，当下你的这个操作，应该使用哪个快捷操作来提高效率？</li>
<li>提醒你，当下你的这个操作，还没有设置快捷键，赶紧设置一个？</li>
</ul>
<p>有了 &nbsp;<code>Key Promoter X</code>，你很快就能熟练地掌握快捷键，替代鼠标指日可待。
比如我使用鼠标点开 <code>Find in Path</code>，它就会在右下角弹窗提示你该用哪个快捷键</p>`,r:{minutes:1.93,words:579},t:"IDE插件",y:"a"}}],["/otherLanguage/python/shuoming.html",{loader:()=>a(()=>import("./shuoming.html-CYuTjzgM.js"),__vite__mapDeps([357,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。
Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有
&nbsp;
<strong>Python 是一种解释型语言：</strong> 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。
<strong>Python 是交互式语言：</strong> 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。
<strong>Python 是面向对象语言:</strong> 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。
**Python 是初学者的语言：**Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p>`,r:{minutes:1.19,words:357},t:"说明",y:"a"}}],["/otherLanguage/python/xiaoshili.html",{loader:()=>a(()=>import("./xiaoshili.html-BabNrk2C.js"),__vite__mapDeps([358,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>图片做素描图</h2>
<p>pip安装包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>pip install opencv<span class="token operator">-</span>python
</code></pre></div><p>源码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>import cv2

'''第一种'''
<span class="token preprocessor property">## '''读入图片转化为灰度图'''</span>
<span class="token preprocessor property">## img_rgb = cv2.imread('110.jpg')</span>
<span class="token preprocessor property">## img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2GRAY)</span>
<span class="token preprocessor property">## img_gray = cv2.medianBlur(img_gray, 5)</span>
<span class="token preprocessor property">## '''二值化操作'''</span>
<span class="token preprocessor property">## img_edge = cv2.adaptiveThreshold(img_gray, 255,</span>
<span class="token preprocessor property">##                                  cv2.ADAPTIVE_THRESH_MEAN_C,</span>
<span class="token preprocessor property">##                                  cv2.THRESH_BINARY, blockSize=3, C=2)</span>

<span class="token preprocessor property">## '''保存图片'''</span>
<span class="token preprocessor property">## cv2.imwrite('120.jpg', img_edge)</span>

'''第二种 使用这个 '''
'''读入图片转化为灰度图'''
img_rgb <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span>'e<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>p<span class="token punctuation">.</span>jpg'<span class="token punctuation">)</span>
img_gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token class-name"><span class="token punctuation">(</span>img_rgb<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_RGB2GRAY<span class="token punctuation">)</span></span>
img_gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>medianBlur<span class="token class-name"><span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> 5<span class="token punctuation">)</span></span>
img_blur <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">GaussianBlur</span><span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            sigmaX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sigmaY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
img_blur <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> img_blur<span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>

'''保存图片'''
cv2<span class="token punctuation">.</span><span class="token function">imwrite</span><span class="token punctuation">(</span>'e<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pp<span class="token punctuation">.</span>png'<span class="token punctuation">,</span>img_blur<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:8.78,words:2634},t:"小示例",y:"a"}}],["/otherLanguage/python/xuexiziliao.html",{loader:()=>a(()=>import("./xuexiziliao.html-DFLZzs2g.js"),__vite__mapDeps([359,1])),meta:{a:"azrng",d:16431552e5,l:"2022年1月26日",c:["otherLanguage"],g:["无"],o:!0,e:`<ul>
<li><strong>前期</strong>：花点时间选一门口碑上佳的入门电子文字教程，坚持下去，不轻易换教程</li>
<li><strong>中期</strong>：跟着教程，先学会抄代码，从抄代码中学习代码思维，举一反三，在这个阶段要做好学习笔记，从零开始构建自己的 Python 知识库，方便后面速查。</li>
<li><strong>后期</strong>：去某课网上找 Python 的项目实战课堂，一门小几百，质量很高，到这个阶段，要面向工作学编程，从项目中去巩固前面的基础，不断查缺补漏，学习项目开发完整流程。</li>
</ul>
<p>基础入门：
python中文指南：<a href="http://python.iswbm.com/en/latest/" target="_blank" rel="noopener noreferrer">http://python.iswbm.com/en/latest/</a></p>`,r:{minutes:1.09,words:327},t:"学习资料",y:"a"}}],["/otherLanguage/python/youqukaiyuanxiangmu.html",{loader:()=>a(()=>import("./youqukaiyuanxiangmu.html-CUx8jNym.js"),__vite__mapDeps([360,1])),meta:{a:"azrng",d:16431552e5,l:"2022年1月26日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>12306</h2>
<p>12306 购票小助手</p>
<blockquote>
<p>Github：<a href="https://github.com/testerSunshine/12306" target="_blank" rel="noopener noreferrer">https://github.com/testerSunshine/12306</a></p>
</blockquote>
`,r:{minutes:.14,words:42},t:"有趣开源项目",y:"a"}}],["/otherLanguage/xml/shuoming.html",{loader:()=>a(()=>import("./shuoming.html-CbgNGK0l.js"),__vite__mapDeps([361,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>XML 指可扩展标记语言（e<strong>X</strong>tensible&nbsp;<strong>M</strong>arkup&nbsp;<strong>L</strong>anguage）。
XML 被设计用来传输和存储数据。</p>
<p>XML 指可扩展标记语言（EXtensible Markup Language）。
XML 是一种很像HTML的标记语言。
XML 的设计宗旨是传输数据，而不是显示数据。
XML 标签没有被预定义。您需要自行定义标签。
XML 被设计为具有自我描述性。
XML 是 W3C 的推荐标准。
xml和html之前的差异
XML 不是 HTML 的替代。
XML 和 HTML 为不同的目的而设计：
XML 被设计用来传输和存储数据，其焦点是数据的内容。
HTML 被设计用来显示数据，其焦点是数据的外观。
HTML 旨在显示信息，而 XML 旨在传输信息。</p>`,r:{minutes:.94,words:281},t:"说明",y:"a"}}],["/middleware/authorize/keycloak.html",{loader:()=>a(()=>import("./keycloak.html-Cx4jAxwr.js"),__vite__mapDeps([362,1])),meta:{a:"azrng",d:16416864e5,l:"2022年1月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Keycloak是一种面向现代应用和服务的开源IAM（身份识别与访问管理）解决方案，Keycloak提供了单点登录（SSO）功能，支持OpenID Connect、OAuth 2.0、SAML 2.0标准协议，拥有简单易用的管理控制台，并提供对LDAP、Active Directory以及Github、Google等社交账号登录的支持，做到了非常简单的开箱即用。</p>
<h2>资料</h2>
<p>文档：<a href="https://www.cnblogs.com/shanyou/p/14751793.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/shanyou/p/14751793.html</a></p>`,r:{minutes:.44,words:133},t:"Keycloak",y:"a"}}],["/middleware/authorize/openidconnect.html",{loader:()=>a(()=>import("./openidconnect.html-DSohUw3M.js"),__vite__mapDeps([363,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>OpenID Connect的简称是OIDC，OIDC=(Identity,Authentication)+OAuth 2.0。它在OAuth 2.0上构建了一个身份标识层，是一个基于OAuth 2.0协议的<strong>身份认证标准协议</strong>。JWT是作为它的底层实现支持。
OpenID Connect允许开发者验证跨网站和应用的用户，而无需拥有和管理密码文件，允许所有类型的客户,包括基于浏览器的JavaScript和本机移动应用程序,启动登录流动和接收可验证断言对登录用户的身份。</p>
<blockquote>
<p>OAuth2是一个授权协议，它无法提供完善的身份认证功能，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端（比如服务端应用，移动APP，JS应用），且完全兼容OAuth2</p>
</blockquote>`,r:{minutes:1.83,words:550},t:"OpenId Connect",y:"a"}}],["/middleware/cangku/octokit.html",{loader:()=>a(()=>import("./octokit.html-ku21FSUO.js"),__vite__mapDeps([364,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>适用于 .NET 和 .NET Core 的基于异步的 GitHub API 客户端库
文档地址：<a href="https://octokitnet.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">https://octokitnet.readthedocs.io/en/latest/</a>
仓库地址：<a href="https://github.com/octokit/octokit.net" target="_blank" rel="noopener noreferrer">https://github.com/octokit/octokit.net</a></p>`,r:{minutes:.21,words:62},t:"Octokit",y:"a"}}],["/middleware/duanlianjie/duanlianjie.html",{loader:()=>a(()=>import("./duanlianjie.html-PDfnPtz7.js"),__vite__mapDeps([365,1])),meta:{a:"azrng",d:16419456e5,l:"2022年1月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>将一个长的不方便记录的域名变相缩短为一个短一点甚至可以方便记录的短域名地址。</p>
<h2>步骤</h2>
<p>输入一个长域名一个过期时间和一个自定义的别名，服务会输出一个包含自定义别名的短域名，并且在过期时间到来之前都可以正常访问并重定向到原始的域名地址上去。</p>
<h3>要求</h3>
<ul>
<li>过期后失效</li>
<li>短域名是唯一的</li>
<li>支持自定义短域名，长度在7个字符之内，不包含特殊字符</li>
<li>要保证安全，不允许被爬起从而盗取数据</li>
</ul>
<h3>逻辑</h3>
<h4>生成短域名</h4>
<ul>
<li>输入长域名，判断是否保存过，保存过就不再次保存</li>
<li>生成一个从未使用过的短域名</li>
<li>将长域名和短域名的关系存储到数据库中</li>
</ul>`,r:{minutes:3.59,words:1076},t:"短连接",y:"a"}}],["/middleware/duanlianjie/hashidsshixianduanlianjie.html",{loader:()=>a(()=>import("./hashidsshixianduanlianjie.html-kMDRH8Rk.js"),__vite__mapDeps([366,1])),meta:{a:"azrng",d:16475616e5,l:"2022年3月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>原理</h2>
<p>短链接，顾名思义就是在形式上比较短的链接网址。借助短链接，可以用简短的网址替代原来冗长的网址
整个短链接服务的实现原理如下：</p>
<ol>
<li>用户访问短链接，请求到达服务器;</li>
<li>服务器将短链接转换成为长链接，然后给浏览器返回重定向的状态码302;</li>
<li>浏览器拿到重定向的状态码，以及真正需要访问的地址，重定向到真正的长链接上。</li>
</ol>
<h2>实现</h2>
<p>创建一个Web API项目，用于实现短链接服务。
首先，实现生成短链接接口：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"shorten"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ShortenUrl</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashids</span><span class="token punctuation">(</span><span class="token string">"公众号My IO"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">minHashLength</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hashids<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.15,words:346},t:"Hashids实现短连接",y:"a"}}],["/middleware/duanxin/aliyunduanxin.html",{loader:()=>a(()=>import("./aliyunduanxin.html-hw3ntUKf.js"),__vite__mapDeps([367,1])),meta:{a:"azrng",d:1643328e6,l:"2022年1月28日",c:["middleware"],g:["无"],o:!0,e:`<p>首先要注册一个阿里云账号，由于发送短信消息需要用到短信签名、短信模板ID（已添加并通过审核）
1、注册阿里云账号（地址：https://www.aliyun.com/）
2、添加短信签名和短信模板
3、短信服务相关引用dll
添加引用
引用——&gt;管理NuGet程序包——&gt;搜索Aliyun.Acs.Core——&gt;安装</p>
<div class="language-plsql" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">using</span> Aliyun<span class="token punctuation">.</span>Acs<span class="token punctuation">.</span>Core<span class="token punctuation">;</span>
<span class="token keyword">using</span> Aliyun<span class="token punctuation">.</span>Acs<span class="token punctuation">.</span>Core<span class="token punctuation">.</span><span class="token keyword">Exceptions</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> Aliyun<span class="token punctuation">.</span>Acs<span class="token punctuation">.</span>Core<span class="token punctuation">.</span>Profile<span class="token punctuation">;</span>
<span class="token keyword">using</span> Aliyun<span class="token punctuation">.</span>Acs<span class="token punctuation">.</span>Dysmsapi<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>V20170525<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">;</span>
<span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.35,words:704},t:"阿里云短信",y:"a"}}],["/middleware/duanxin/",{loader:()=>a(()=>import("./index.html-CbnsBHNV.js"),__vite__mapDeps([368,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>短信验证码最佳实践：<a href="https://mp.weixin.qq.com/s/y6z7YYiiONS_aUrkJFZqpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/y6z7YYiiONS_aUrkJFZqpQ</a></p>
`,r:{minutes:.14,words:41},t:"说明",y:"a"}}],["/middleware/duanxin/yunlianrongtongxunduanxin.html",{loader:()=>a(()=>import("./yunlianrongtongxunduanxin.html-Cw-P4cIX.js"),__vite__mapDeps([369,1])),meta:{a:"azrng",d:1643328e6,l:"2022年1月28日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>操作</h2>
<p>配置文件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">"SmsConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string">"SMSValidCodeSecond"</span><span class="token punctuation">:</span> <span class="token string">"600"</span><span class="token punctuation">,</span> <span class="token comment">//短信有效时间-秒-</span>
  <span class="token string">"SmsAddress"</span><span class="token punctuation">:</span> <span class="token string">"app.cloopen.com"</span><span class="token punctuation">,</span> <span class="token comment">//短信服务器地址</span>
  <span class="token string">"SmsPort"</span><span class="token punctuation">:</span> <span class="token string">"8883"</span><span class="token punctuation">,</span> <span class="token comment">//短信服务器端口</span>
  <span class="token string">"SmsAccountSid"</span><span class="token punctuation">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token comment">//主帐号</span>
  <span class="token string">"SmsAccountToken"</span><span class="token punctuation">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token comment">//主帐号令牌</span>
  <span class="token string">"SmsAppId"</span><span class="token punctuation">:</span> <span class="token string">"xxxxx"</span> <span class="token comment">//应用ID</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div>`,r:{minutes:.62,words:185},t:"云联融通讯短信",y:"a"}}],["/middleware/fenci/jieba_net.html",{loader:()=>a(()=>import("./jieba_net.html-CJjOUT-n.js"),__vite__mapDeps([370,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/bqKGfiKG7jWsT-IlUjmG0w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/bqKGfiKG7jWsT-IlUjmG0w</a> | C#中使用jieba.NET、WordCloudSharp制作词云图
<a href="https://mp.weixin.qq.com/s/9yh1kltroQKd1xcNkNQp6Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/9yh1kltroQKd1xcNkNQp6Q</a> | .NET 使用 Jieba.NET 库实现中文分词匹配</p>`,r:{minutes:.2,words:61},t:"Jieba.NET",y:"a"}}],["/middleware/fenci/mingancizujian.html",{loader:()=>a(()=>import("./mingancizujian.html-BJagNW_U.js"),__vite__mapDeps([371,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>现如今大部分服务都会有用户输入，为了服务的正常运行，很多时候不得不针对输入进行敏感词的检测、替换。如果人工做这样的工作，不仅效率低，成本也高。所以，先让代码去处理输入，成为了经济方便的途径。</p>
<h2>ToolGood.Words</h2>
<p>首先我们要使用的开源组件是 <a href="https://github.com/toolgood/ToolGood.Words" target="_blank" rel="noopener noreferrer">ToolGood.Words</a>
<img src="/common/1620891320700-cdaee58d-cfff-4bb2-b590-2f1823c5e595.png" alt="" loading="lazy">
通过简单的了解，我们可以知道它可以针对敏感词及其拼音、跳词等变形进行检测，在实际的应用场景中能满足大部分的需求。
具体的用法在这里不做过多的介绍，接下来我们需要做的事情是如何在现有代码中快速且方便的情况下接入敏感词组件。很显然，如果我们按照组件写的示例去操作，会发现需要在现有的代码中进行大量重构的操作，这显然会累垮 VS 。熟悉我的朋友首先就会想到使用 AOP 的方式去优化处理。（这里不过多介绍AOP，如果想了解更多，请移步 <a href="https://www.cnblogs.com/chenug/p/9848852.html" target="_blank" rel="noopener noreferrer">C## 中使用面向切面编程（AOP）中实践代码整洁</a> )</p>`,r:{minutes:3.54,words:1061},t:"敏感词组件",y:"a"}}],["/middleware/fenci/zhizuociyuntu.html",{loader:()=>a(()=>import("./zhizuociyuntu.html-DA_h_m1q.js"),__vite__mapDeps([372,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>词云简介</h2>
<p>“词云”由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于2006年最先使用，是通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”的视觉上的突出。
网上大部分文章介绍的是使用Python的jieba、wordcloud的库生成词云图，本文则介绍在C#中如何使用jieba.NET、WordCloudSharp库生成词云图，后者是前者的.NET实现。</p>
<h2>准备工作</h2>
<p>创建一个C#的控制台项目，通过NuGet添加引用对jieba.NET、WordCloudSharp的引用，使用方法可以参考以下链接：</p>`,r:{minutes:3.47,words:1042},t:"制作词云图",y:"a"}}],["/middleware/fullTextSearch/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-DCwv62In.js"),__vite__mapDeps([373,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>全文引擎对比</h2>
<ul>
<li>Lucene是一个基于Java开发的全文检索基础包，使用起来繁杂，且默认不支持分布式检索</li>
<li>Solr是基于Lucene开发的一个搜索工具。抽象度更高，使用更简单，且提供一个控制面板。</li>
<li>ElasticSearch也是基于Lucene开发的。同样是高度抽象，并提供了一个非常强大的DSL检索功能，可以很方便的检索出数据。</li>
<li>Solr和ES的区别主要在于：ES有强大的实时检索能力而不怎么掉速，Solr创建索引的同时，检索速度会下降。如果不考虑实时检索，Solr的速度更快。Solr社区更成熟。ES使用更方便更现代化。</li>
<li>Sphinx是俄罗斯人开发的一个全文检索引擎，使用C++开发。性能比Java开发的es和solr高，但是在社区繁荣度上，比ES和solr差很多。比如中文分词器，sphinx的coreseek插件已经停更了。sphinx有个非常好的地方就是可以作为MySQL插件使用。</li>
</ul>`,r:{minutes:1.37,words:412},t:"概述",y:"a"}}],["/middleware/fullTextSearch/redisearch.html",{loader:()=>a(()=>import("./redisearch.html-Q3U52akH.js"),__vite__mapDeps([374,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>RediSearch 是一个分布式全文搜索和聚合引擎，构建为 Redis 之上的模块。它使用户能够以极快的方式在其 Redis 数据集上执行复杂的搜索查询。 RediSearch 的独特架构是用 C 语言编写的，并从头开始构建在优化的数据结构上，使其成为市场上其他搜索引擎的真正替代品。它作为一个独立的搜索引擎非常适合用于索引和检索可搜索数据。</p>
`,r:{minutes:.52,words:157},t:"RediSearch",y:"a"}}],["/middleware/gongzuoliu/ccflow.html",{loader:()=>a(()=>import("./ccflow.html-Cs1e9NWQ.js"),__vite__mapDeps([375,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><strong>GitHub地址</strong>: https://gitee.com/opencc/ccflow</p>
<p>CCFlow（驰骋工作流引擎）是一款面向.NET的快速开发平台，致力于简化流程设计与实施。其核心特色包括：</p>
<ul>
<li><strong>快速开发</strong>：提供拖拽式设计工具，快速构建流程图，降低开发门槛。</li>
<li><strong>表单集成</strong>：内置表单设计器，支持与业务表单无缝集成，简化数据收集与处理。</li>
<li><strong>业务规则引擎</strong>：支持复杂的业务规则配置，满足多变的业务决策需求。</li>
<li><strong>企业级特性</strong>：具备权限管理、审计日志、版本控制等功能，满足企业级应用需求。</li>
</ul>`,r:{minutes:.69,words:208},t:"CCFlow",y:"a"}}],["/middleware/gongzuoliu/elsa.html",{loader:()=>a(()=>import("./elsa.html-DjbZFmDb.js"),__vite__mapDeps([376,1])),meta:{a:"azrng",d:16384896e5,l:"2021年12月3日",c:["middleware"],g:["无"],o:!0,e:`<h3>说明</h3>
<p>elsa是一个开源的.NET Standard 工作流框架，工作流不仅可以使用代码定义，还可以定义为JSON、YAML或XML。
官方网站：<a href="https://elsa-workflows.github.io/elsa-core/" target="_blank" rel="noopener noreferrer">https://elsa-workflows.github.io/elsa-core/</a></p>
<p>持久化。工作流几乎可以使用任何存储机制持久化。将支持以下提供程序：</p>
<ul>
<li>In Memory</li>
<li>File System</li>
<li>SQL Server</li>
<li>MongoDB</li>
<li>CosmosDB</li>
</ul>`,r:{minutes:4.28,words:1284},t:"Elsa",y:"a"}}],["/middleware/gongzuoliu/mxgraph.html",{loader:()=>a(()=>import("./mxgraph.html-noGcdEV6.js"),__vite__mapDeps([377,1])),meta:{a:"azrng",d:16384896e5,l:"2021年12月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>mxGraph包包含一个用JavaScript编写的客户端软件，以及各种语言的一系列后端（.NET、Java、PHP）。客户端软件是一个图形组件，它具有可选的应用程序包装器，该应用程序包装器集成到现有的web界面中。客户端需要Web服务器将所需文件传递给客户端，或者可以在没有webserver的情况下从本地文件系统运行。后端可以原样使用，也可以以支持的语言之一嵌入到现有服务器应用程序中。</p>
`,r:{minutes:.58,words:174},t:"mxGraph",y:"a"}}],["/middleware/gongzuoliu/",{loader:()=>a(()=>import("./index.html-DgaDT1XX.js"),__vite__mapDeps([378,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>Workflow-Core</li>
<li>CCFlow</li>
<li>elsa</li>
<li>slickflow</li>
<li>WorkflowEngine.NET</li>
</ul>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/QabXMxixbuvx15kgrr9fXQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/QabXMxixbuvx15kgrr9fXQ</a> | ASP.NET Core + Workflow Core 实现简单审批工作流
<a href="https://mp.weixin.qq.com/s/En1IklX5HKX3HZzwrY42xw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/En1IklX5HKX3HZzwrY42xw</a> | 开源的 .NET 工作流引擎 Elsa 开源</p>`,r:{minutes:.23,words:69},t:"说明",y:"a"}}],["/middleware/gongzuoliu/visor_js.html",{loader:()=>a(()=>import("./visor_js.html-DeTZ9CbQ.js"),__vite__mapDeps([379,1])),meta:{a:"azrng",d:16419456e5,l:"2022年1月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Visor.js 基于JQuery，在Canvas上制作在线绘图应用的核心基础文件。它支持鼠标的拖拽移动,伸缩,旋转和各种事件。
Gitee：https://gitee.com/zhouyig/Visor.js</p>
`,r:{minutes:.24,words:71},t:"Visor.js",y:"a"}}],["/middleware/gongzuoliu/workflow-core.html",{loader:()=>a(()=>import("./workflow-core.html-CWnYPFpn.js"),__vite__mapDeps([380,1])),meta:{a:"azrng",d:16384896e5,l:"2021年12月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Workflow-Core是一个基于.NET Standard的轻量级工作流引擎，目前有超过3100+个star。它提供了FluentAPI、多任务、持久化以及并行处理的功能，适合于小型工作流、责任链的需求开发。
由于Workflow-Core支持工作流长期运行，因此Workflow-Core支持以下多种数据源格式的持久化，可以通过安装不同的Provider包来实现对应的持久化：</p>
<ul>
<li>（默认提供，用于测试和开发）内存</li>
<li>MongoDB</li>
<li>MS SQL Server</li>
<li>MySql</li>
<li>Sqlite</li>
<li>Redis</li>
<li>PostgreSQL</li>
</ul>`,r:{minutes:.64,words:193},t:"Workflow-Core",y:"a"}}],["/middleware/grpc/dotnetdaimayouxiangrpcfuwu.html",{loader:()=>a(()=>import("./dotnetdaimayouxiangrpcfuwu.html-DY985wHR.js"),__vite__mapDeps([381,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>该方式适用于多个服务之前都是**.Net项目**的场景
优点：</p>
<ul>
<li>可以在 .NET 服务器和客户端之间共享 .NET 服务和数据协定类型。</li>
<li>无需在 <code>.proto</code> 文件和代码生成过程中定义协定。</li>
</ul>
<h2>操作</h2>
<h3>引用组件</h3>
<p>创建一个共享的类库ShareProto，该类库可以被服务端和客户端进行访问，添加下面的包引用</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"protobuf-net.Grpc"</span> Version<span class="token operator">=</span><span class="token string">"1.0.152"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"protobuf-net.Grpc.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"1.0.152"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.69,words:506},t:"dotNet代码优先gRPC服务",y:"a"}}],["/middleware/grpc/grpc-web.html",{loader:()=>a(()=>import("./grpc-web.html-BkN4-RzR.js"),__vite__mapDeps([382,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<p>gRPC-Web 允许从浏览器应用程序使用 gRPC，gRPC-Web 支持在新场景中使用 gRPC：
JavaScript 浏览器应用程序可以使用 gRPC-Web JavaScript 客户端调用 gRPC 服务。
Blazor WebAssembly 应用程序可以使用.Net Core gRPC 客户端调用 gRPC 服务。
可以让 gRPC 服务被用于不完全支持 HTTP/2 的环境中。
可以让 gRPC 用于 HTTP/2 中没有的技术，例如 Windows 身份验证。
Grpc.AspNetCore.Web 和 Grpc.Net.Client.Web 提供了扩展来为 .NET Core 支持端到端的 gRPC-Web。
&nbsp;
&nbsp;
&nbsp;
Asp.Net Core 已支持 gRPC-Web &nbsp; <a href="https://mp.weixin.qq.com/s?__biz=MzAxMjEzNjYwNw==&amp;mid=2677250480&amp;idx=1&amp;sn=5d0e8ebc073ed29fd70e87fb5be04ade&amp;chksm=81d14040b6a6c956e69d746b640d9274ced9799a45555428dc673bf05a5ea92588941cd80a2f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">链接</a>
js调用gRPC-Web &nbsp; <a href="https://mp.weixin.qq.com/s?__biz=MzAwNTMxMzg1MA==&amp;mid=2654077573&amp;idx=3&amp;sn=04323da2ea272242f3892594d1c0b973&amp;chksm=80d826d0b7afafc6e94ade6a1581f9175106804ee1d249fc1a96b411b7a93633379933751f00&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1581381060696&amp;sharer_shareid=b24b68115bb61d7d2faf0d3d81a3e656&amp;key=9c0a8c4c60b2594eaf394a83066bfa30778b9d1fd1553f568c63b5447cae9db462aa1710916a5638329cbb9095da3d96401e73fb0e7e26700bed1f99c73e62ef567d63f479ca36fd1594337e41a32c9d&amp;ascene=1&amp;uin=MzE1MjEyNzg0OQ%3D%3D&amp;devicetype=Windows+10&amp;version=62080074&amp;lang=zh_CN&amp;exportkey=A9aRLmte%2F41W7qpRaMJpOHE%3D&amp;pass_ticket=jPjHSUnjEStjRj81e7TprFxv2II%2FqeRIU27t9XvqZHfY%2Fwohw3Fa9m4dNUh3NVYL" target="_blank" rel="noopener noreferrer">链接</a></p>`,r:{minutes:.77,words:232},t:"gRPC-WEB",y:"a"}}],["/middleware/grpc/grpc.html",{loader:()=>a(()=>import("./grpc.html-DEKuJa7E.js"),__vite__mapDeps([383,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><img src="/common/1625569084899-bc895ae4-ce5b-4750-95fc-9d1dadf23b27.png" alt="image.png" loading="lazy">
gRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webservice。</p>
<blockquote>
<p>gRPC官网：<a href="https://www.grpc.io" target="_blank" rel="noopener noreferrer">https://www.grpc.io</a></p>
</blockquote>`,r:{minutes:3.2,words:959},t:"gRPC",y:"a"}}],["/middleware/grpc/grpcdiaoshigongju.html",{loader:()=>a(()=>import("./grpcdiaoshigongju.html-DaXaj0DK.js"),__vite__mapDeps([384,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>1. 开篇语</h2>
<p>环境：windows10、.NetCore 3.x +<br>
该文章已经写了好久了，当初时候不懂得二进制包的用法，然后直接安装的go环境使用的，今天终于懂得了二进制文件的用法，所以可以直接跳过配置go环境的步骤，去看二进制用法。</p>
<h3>1.1 go环境安装</h3>
<p>先去下载go语言安装包，然后安装到某一个目录(随意)
<img src="/common/1637482333425-1f07bddf-0022-44f5-a34f-106b1475d427.png" alt="image.png" loading="lazy">
然后验证是否安装成功，在命令行输入</p>`,r:{minutes:3.4,words:1021},t:"gRPC调试工具",y:"a"}}],["/middleware/grpc/grpchttpapi.html",{loader:()=>a(()=>import("./grpchttpapi.html-CMbt-V5b.js"),__vite__mapDeps([385,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["无"],o:!0,e:`<p>另外需要引用的组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Grpc.HttpApi"</span> Version<span class="token operator">=</span><span class="token string">"0.1.0-alpha.21317.5"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Grpc.Swagger"</span> Version<span class="token operator">=</span><span class="token string">"0.1.0-alpha.21317.5"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.26,words:77},t:"gRPC HTTP API",y:"a"}}],["/middleware/grpc/grpcliu.html",{loader:()=>a(()=>import("./grpcliu.html-DdJB7AVS.js"),__vite__mapDeps([386,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>为什么gRPC 支持流</h2>
<p>gRPC 通信是基于 HTTP/2 实现的，它的双向流映射到 HTTP/2 流。HTTP/2 具有流的概念，流是为了实现HTTP/2的多路复用。流是服务器和客户端在HTTP/2连接内用于交换帧数据的独立双向序列，逻辑上可看做一个较为完整的交互处理单元，即表达一次完整的资源请求、响应数据交换流程；一个业务处理单元，在一个流内进行处理完毕，这个流生命周期完结。
特点如下：</p>
<ul>
<li>一个HTTP/2连接可同时保持多个打开的流，任一端点交换帧</li>
<li>流可被客户端或服务器单独或共享创建和使用</li>
<li>流可被任一端关闭</li>
<li>在流内发送和接收数据都要按照顺序</li>
<li>流的标识符自然数表示，1~2^31-1区间，有创建流的终端分配</li>
<li>流与流之间逻辑上是并行、独立存在</li>
</ul>`,r:{minutes:.93,words:278},t:"gRPC 流",y:"a"}}],["/middleware/grpc/grpcsichongmoshi.html",{loader:()=>a(()=>import("./grpcsichongmoshi.html-DQeVtpHs.js"),__vite__mapDeps([387,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>简单 RPC（Unary RPC）、服务端流式 RPC （Server streaming RPC）、客户端流式 RPC （Client streaming RPC）、双向流式 RPC（Bi-directional streaming RPC）。它们主要有以下特点：</p>
<table>
<thead>
<tr>
<th><strong>服务类型</strong></th>
<th><strong>特点</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>简单 (一元)RPC</td>
<td>一般的rpc调用，传入一个请求对象，返回一个返回对象</td>
</tr>
<tr>
<td>服务端流式   RPC</td>
<td>传入一个请求对象，服务端可以返回多个结果对象</td>
</tr>
<tr>
<td>客户端流式   RPC</td>
<td>客户端传入多个请求对象，服务端返回一个结果对象</td>
</tr>
<tr>
<td>双向流式   RPC</td>
<td>结合客户端流式RPC和服务端流式RPC，可以传入多个请求对象，返回多个结果对象</td>
</tr>
</tbody>
</table>`,r:{minutes:9.38,words:2814},t:"gRPC四种模式",y:"a"}}],["/middleware/grpc/jianquan.html",{loader:()=>a(()=>import("./jianquan.html-BYj1xde5.js"),__vite__mapDeps([388,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<p>gRPC程序也是需要鉴权的，否则都可以随意请求如何处理?下面我们就来演示下如何进行鉴权。</p>
<h3>配置Jwt认证</h3>
<p>我们需要先在服务端配置jwt认证方案，此处我直接引用封装的组件包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Common.JwtToken"</span> Version<span class="token operator">=</span><span class="token string">"1.1.2"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.99,words:297},t:"鉴权",y:"a"}}],["/middleware/grpc/protowenjian.html",{loader:()=>a(()=>import("./protowenjian.html-C1e6gYqQ.js"),__vite__mapDeps([389,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍文件</h2>
<ul>
<li>定义包、库名字</li>
<li>定义服务“Service”</li>
<li>定义输入输出模型“Message”</li>
</ul>
<p>选中项目右键新建协议缓冲区文件，后缀名是.proto。
<img src="/common/1638090959218-2d44b271-6613-4966-94d1-8bd885cde46b.png" alt="image.png" loading="lazy">
简单示例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span> <span class="token comment">//标识使用proto3协议</span>

<span class="token class-name">option</span> csharp_namespace <span class="token operator">=</span> <span class="token string">"RPC.Protos.Two"</span><span class="token punctuation">;</span> <span class="token comment">// 命名空间</span>

package RPC<span class="token punctuation">.</span>Protos<span class="token punctuation">.</span>Two<span class="token punctuation">;</span><span class="token comment">// 命名空间</span>

<span class="token return-type class-name">service</span> Customer<span class="token punctuation">{</span> <span class="token comment">// 定义服务Customer</span>

    <span class="token comment">//登录 </span>
	<span class="token return-type class-name">rpc</span> <span class="token function">Login</span><span class="token punctuation">(</span>LoginVm<span class="token punctuation">)</span> <span class="token function">returns</span><span class="token punctuation">(</span>LoginResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义请求和响应</span>
<span class="token punctuation">}</span>

<span class="token comment">//登录请求类</span>
<span class="token return-type class-name">message</span> LoginVm<span class="token punctuation">{</span>
  <span class="token comment">// 定义每个字段的顺序，这也就是我们序列化的顺序，是通过数据类型和顺序来识别指定的值  </span>
  <span class="token class-name"><span class="token keyword">string</span></span> account<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//帐号</span>
  <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//密码</span>
<span class="token punctuation">}</span>

<span class="token comment">//登录返回类</span>
<span class="token return-type class-name">message</span> LoginResult<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//用户名</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:6.44,words:1932},t:"proto文件",y:"a"}}],["/middleware/grpc/yichanglanjieqi.html",{loader:()=>a(()=>import("./yichanglanjieqi.html-DM1-U4yr.js"),__vite__mapDeps([390,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<p>通过使用Grpc.Core.RpcException来捕捉异常，也可以通过注入拦截器来捕捉异常</p>
<p>Interceptor类是gRPC服务拦截器的基类，是一个抽象类，它定义了几个虚方法如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">TResponse</span> <span class="token generic-method"><span class="token function">BlockingUnaryCall</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AsyncUnaryCall<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsyncUnaryCall</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AsyncServerStreamingCall<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsyncServerStreamingCall</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AsyncClientStreamingCall<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsyncClientStreamingCall</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">AsyncDuplexStreamingCall<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">AsyncDuplexStreamingCall</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">UnaryServerHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ClientStreamingServerHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">ServerStreamingServerHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">DuplexStreamingServerHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.06,words:318},t:"异常拦截器",y:"a"}}],["/middleware/guizeyinqing/rulesengine.html",{loader:()=>a(()=>import("./rulesengine.html-BZ7P_Lff.js"),__vite__mapDeps([391,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>示例</h2>
<h3>发放优惠券</h3>
<p>大体就是用户有一些优惠券，系统会根据用户订单情况，筛选可以使用的优惠券供用户选择，用户选择后会计算出优惠后金额。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">RulesEngine<span class="token punctuation">.</span>Extensions</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">RulesEngine<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">RulesEngineSample<span class="token punctuation">.</span>Services</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICouponService</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CouponService<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Coupon<span class="token punctuation">&gt;</span></span> _userCoupons<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Order</span> _order<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">User</span> _user<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">CouponService</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CouponService<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
            <span class="token comment">//假装用户用的优惠券</span>
            _userCoupons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Coupon<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Coupon</span>
                <span class="token punctuation">{</span>
                    ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
                    Code<span class="token operator">=</span><span class="token string">"YH01"</span><span class="token punctuation">,</span>
                    Name <span class="token operator">=</span> <span class="token string">"满500减20"</span><span class="token punctuation">,</span>
                    BeginTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    EndTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-06-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    Expression <span class="token operator">=</span> <span class="token string">"input1.Details.Sum(s =&gt; s.Price * Convert.ToDecimal(s.Quantity))&gt;= 500"</span><span class="token punctuation">,</span>
                    Symbol<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">,</span>
                    Number<span class="token operator">=</span><span class="token number">20</span>

                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Coupon</span>
                <span class="token punctuation">{</span>
                    ID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
                    Code<span class="token operator">=</span><span class="token string">"YH02"</span><span class="token punctuation">,</span>
                    Name <span class="token operator">=</span> <span class="token string">"新人5元券"</span><span class="token punctuation">,</span>
                    BeginTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    EndTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-06-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    Expression <span class="token operator">=</span> <span class="token string">"input1.Details.Count&gt;0"</span><span class="token punctuation">,</span>
                    Symbol<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">,</span>
                    Number<span class="token operator">=</span><span class="token number">5</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Coupon</span>
                <span class="token punctuation">{</span>
                    ID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
                    Code<span class="token operator">=</span><span class="token string">"YH03"</span><span class="token punctuation">,</span>
                    Name <span class="token operator">=</span> <span class="token string">"商品C五折"</span><span class="token punctuation">,</span>
                    BeginTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    EndTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2021-06-01"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    Expression <span class="token operator">=</span> <span class="token string">"input1.Details.Where(s=&gt;s.GoodsID==\\"SP0000003\\").Count()&gt;0"</span><span class="token punctuation">,</span>
                    Symbol<span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">,</span>
                    Number<span class="token operator">=</span><span class="token number">0.5f</span><span class="token punctuation">,</span>
                    GoodsID<span class="token operator">=</span><span class="token string">"SP0000003"</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//假装当前用户的订单</span>
            _order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
            <span class="token punctuation">{</span>
                OrderNo <span class="token operator">=</span> <span class="token string">"NO00000001"</span><span class="token punctuation">,</span>
                OrderTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
                Details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Detail<span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Detail</span><span class="token punctuation">{</span> GoodsID<span class="token operator">=</span><span class="token string">"SP0000001"</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">"商品A"</span><span class="token punctuation">,</span> Price<span class="token operator">=</span><span class="token number">12.5m</span><span class="token punctuation">,</span> Quantity<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Detail</span><span class="token punctuation">{</span> GoodsID<span class="token operator">=</span><span class="token string">"SP0000002"</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">"商品B"</span><span class="token punctuation">,</span> Price<span class="token operator">=</span><span class="token number">100m</span><span class="token punctuation">,</span> Quantity<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Detail</span><span class="token punctuation">{</span> GoodsID<span class="token operator">=</span><span class="token string">"SP0000003"</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">"商品C"</span><span class="token punctuation">,</span> Price<span class="token operator">=</span><span class="token number">22.3m</span><span class="token punctuation">,</span> Quantity<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            _user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> UserName <span class="token operator">=</span> <span class="token string">"zhangsan"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 适配优惠券</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SelectCouponAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> workRules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RulesEngine<span class="token punctuation">.</span>Models<span class="token punctuation">.</span>WorkflowRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workRules<span class="token punctuation">.</span>WorkflowName <span class="token operator">=</span> <span class="token string">"优惠券"</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Rule<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> coupon <span class="token keyword">in</span> _userCoupons<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>BeginTime <span class="token operator">&lt;</span> DateTime<span class="token punctuation">.</span>Now <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>EndTime <span class="token operator">&gt;</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rule</span>
                <span class="token punctuation">{</span>
                    RuleName <span class="token operator">=</span> coupon<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
                    SuccessEvent <span class="token operator">=</span> coupon<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>
                    ErrorMessage <span class="token operator">=</span> <span class="token string">"规则应用失败"</span><span class="token punctuation">,</span>
                    ErrorType <span class="token operator">=</span> ErrorType<span class="token punctuation">.</span>Error<span class="token punctuation">,</span>
                    RuleExpressionType <span class="token operator">=</span> RuleExpressionType<span class="token punctuation">.</span>LambdaExpression<span class="token punctuation">,</span>
                    Expression <span class="token operator">=</span> coupon<span class="token punctuation">.</span>Expression
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                rules<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            workRules<span class="token punctuation">.</span>Rules <span class="token operator">=</span> rules<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> rulesEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RulesEngine<span class="token punctuation">.</span>RulesEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WorkflowRules<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> workRules <span class="token punctuation">}</span><span class="token punctuation">,</span> _logger<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ruleResults <span class="token operator">=</span> <span class="token keyword">await</span> rulesEngine<span class="token punctuation">.</span><span class="token function">ExecuteAllRulesAsync</span><span class="token punctuation">(</span><span class="token string">"优惠券"</span><span class="token punctuation">,</span> _order<span class="token punctuation">,</span> _user<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// var valueCoupons = new List&lt;string&gt;();</span>
            <span class="token comment">//处理结果</span>
            <span class="token class-name"><span class="token keyword">var</span></span> discountCoupons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> ruleResult <span class="token keyword">in</span> ruleResults<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleResult<span class="token punctuation">.</span>IsSuccess<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    discountCoupons<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"可以使用的优惠券 “</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_userCoupons<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Code <span class="token operator">==</span> ruleResult<span class="token punctuation">.</span>Rule<span class="token punctuation">.</span>SuccessEvent<span class="token punctuation">)</span><span class="token punctuation">?.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">”, Code是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ruleResult<span class="token punctuation">.</span>Rule<span class="token punctuation">.</span>SuccessEvent</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//valueCoupons.Add(ruleResult.Rule.SuccessEvent);</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//resultList.OnSuccess((eventName) =&gt;</span>
            <span class="token comment">//{</span>
            <span class="token comment">//    discountOffered += $"可以使用的优惠券“{userCoupons.SingleOrDefault(s =&gt; s.Code == eventName)?.Name}”,Code是：{eventName} ";</span>
            <span class="token comment">//});</span>
            ruleResults<span class="token punctuation">.</span><span class="token function">OnFail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                discountCoupons<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">"您没有适合的优惠券！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> discountCoupons<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 计算订单支付总额</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOrderAmount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> code<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>            
            <span class="token class-name"><span class="token keyword">var</span></span> selectCoupon <span class="token operator">=</span> _userCoupons<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Code <span class="token operator">==</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> orderAmount <span class="token operator">=</span> <span class="token number">0m</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>selectCoupon<span class="token punctuation">.</span>Symbol<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token punctuation">:</span>
                    orderAmount <span class="token operator">=</span> _order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Price <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>selectCoupon<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>selectCoupon<span class="token punctuation">.</span>GoodsID<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        orderAmount <span class="token operator">=</span> _order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Price <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> detail <span class="token operator">=</span> _order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>GoodsID <span class="token operator">==</span> selectCoupon<span class="token punctuation">.</span>GoodsID<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>detail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            orderAmount <span class="token operator">-=</span> detail<span class="token punctuation">.</span>Price <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> selectCoupon<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        orderAmount <span class="token operator">=</span> _order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Price <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>selectCoupon<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$"订单总金额：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_order<span class="token punctuation">.</span>Details<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Price <span class="token operator">*</span> Convert<span class="token punctuation">.</span><span class="token function">ToDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token punctuation">}</span></span><span class="token string">，优惠后请支付：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">orderAmount</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coupon</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BeginTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> EndTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Expression <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Symbol <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Number <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> GoodsID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderNo <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> OrderTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Detail<span class="token punctuation">&gt;</span></span> Details <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Detail</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> GoodsID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> Quantity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Price <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.55,words:766},t:"RulesEngine",y:"a"}}],["/middleware/identityId/fenbushiweiyibiaoshi.html",{loader:()=>a(()=>import("./fenbushiweiyibiaoshi.html-YThHEEmk.js"),__vite__mapDeps([392,1])),meta:{a:"azrng",d:16920576e5,l:"2023年8月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>这个唯一序号有如下几种特征：</p>
<ul>
<li>全局唯一性：确保生成的序列是全局唯一的，不可重复。</li>
<li>有序性：确保生成的ID值对于某个用户或者业务是按一定的数字有序递增的。</li>
<li>高可用性：确保生成ID功能的高可用，能够承接较大峰值，能够保证序列生成的有效性（不重复且有序）。</li>
<li>带时间标记：ID中有时间片段组成，可是清晰识别出操作的时间。</li>
</ul>
<h2>其他组件</h2>
<p>四个id生成器的性能比较：https://www.cnblogs.com/fs7744/p/17823881.html</p>`,r:{minutes:2,words:600},t:"唯一标识",y:"a"}}],["/middleware/identityId/hashidsjianduanzifuchuanid.html",{loader:()=>a(()=>import("./hashidsjianduanzifuchuanid.html-CBMy3JcZ.js"),__vite__mapDeps([393,1])),meta:{a:"azrng",d:16568928e5,l:"2022年7月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Hashids是一个小型的开源库，它从数字生成简短的、唯一的、非顺序的id。它将像347这样的数字转换成像“yr8”这样的字符串，或者像[27,986]这样的数字数组转换成“3kTMd”。您还可以解码这些id。这对于将多个参数绑定到一个或简单地将它们用作简短的uid非常有用。</p>
<blockquote>
<p>官网：<a href="https://hashids.org/objective-c/" target="_blank" rel="noopener noreferrer">https://hashids.org/objective-c/</a></p>
</blockquote>`,r:{minutes:1.13,words:339},t:"Hashids简短字符串ID",y:"a"}}],["/middleware/identityId/idhelperxuehuaid.html",{loader:()=>a(()=>import("./idhelperxuehuaid.html-BwW9ndfV.js"),__vite__mapDeps([394,1])),meta:{a:"azrng",d:16914528e5,l:"2023年8月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>IdHelper是一个.NET（支持.NET45+或.NET Standard2+）生成分布式趋势自增Id组件，有两个版本：原始版为基于雪花Id方案，需要手动管理设置WorkerId；完美版在原始版的基础上使用Zookeeper来解决原始版中的WorkerId的分配问题和时间回拨问题。</p>
<p>原始版安装方式：Nuget安装IdHelper即可
完美版安装方式：Nuget安装IdHelper.Zookeeper即可
github：<a href="https://github.com/Coldairarrow/IdHelper" target="_blank" rel="noopener noreferrer">https://github.com/Coldairarrow/IdHelper</a></p>`,r:{minutes:.61,words:182},t:"IdHelper雪花Id",y:"a"}}],["/middleware/identityId/jiyushujukufenbushiid.html",{loader:()=>a(()=>import("./jiyushujukufenbushiid.html-Bb71CxCY.js"),__vite__mapDeps([395,1])),meta:{a:"azrng",d:16919712e5,l:"2023年8月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个根据数据库来生成分布式ID的组件。
长度：16位，前端可以使用number类型来接收
结构：6位年月日+3位机器码+7位ID
例如：2021年8月31日1号pod生成的第10个数据，2108310010000010</p>
<blockquote>
<p>生成内容唯一性待确认</p>
</blockquote>
<h2>雪花ID问题</h2>
<ul>
<li>雪花Id的long类型，需要19位数字，前端的number类型是16位的，需要后端改序列化或前端改成string</li>
<li>需要一个唯一的工作机器ID，一般用于zookper实现。</li>
</ul>`,r:{minutes:1.15,words:344},t:"基于数据库分布式ID",y:"a"}}],["/middleware/identityId/newidshunxuguid.html",{loader:()=>a(()=>import("./newidshunxuguid.html-B5LUhTD5.js"),__vite__mapDeps([396,1])),meta:{a:"azrng",d:16933536e5,l:"2023年8月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>snowflake那种需要包含机器ID无法去中心化，必须有一个全局生成机器ID的机制作为额外协调。所以可以尝试使用NewId。</p>
<p>NewId是一个连续ID生成器，它使用主机MAC地址，结合时间戳和递增的序列号实现ID生成策略。由于MAC地址全局唯一，因此NewId无需机器ID这样的额外设施，即可生成按时间顺序排序的全局唯一标识符。</p>
<p>仓库地址：<a href="https://github.com/phatboyg/NewId" target="_blank" rel="noopener noreferrer">https://github.com/phatboyg/NewId</a>
文档地址：<a href="https://masstransit.io/documentation/patterns/newid#newid" target="_blank" rel="noopener noreferrer">https://masstransit.io/documentation/patterns/newid#newid</a></p>`,r:{minutes:2.13,words:639},t:"NewId顺序Guid",y:"a"}}],["/middleware/identityId/ulid.html",{loader:()=>a(()=>import("./ulid.html-Bzv7bXhW.js"),__vite__mapDeps([397,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一种可排序的随机标识生成方式以及在 .NET 中的使用</p>
<p>仓库地址：<a href="https://github.com/ultimicro/netulid" target="_blank" rel="noopener noreferrer">https://github.com/ultimicro/netulid</a></p>
<h2>对比UUId</h2>
<h3>1.1 可排序性</h3>
<p>ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。</p>
<h3>1.2 长度更短</h3>`,r:{minutes:1.24,words:371},t:"ULID",y:"a"}}],["/middleware/identityId/xuehuaidgonggonglei.html",{loader:()=>a(()=>import("./xuehuaidgonggonglei.html-VuVaWIDR.js"),__vite__mapDeps([398,1])),meta:{a:"azrng",d:16919712e5,l:"2023年8月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>该文章生成的内容唯一性待确认</p>
<p>使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增。
格式：1bit保留 + 41bit时间戳 + 10bit机器 + 12bit序列号
第一位不使用，主要是为了避免部分场景变成负数；
<strong>41位时间戳</strong>，也就是2的41次方，毫秒为单位，足够保存69年。这里一般存储1970年以来的毫秒数，建议各个系统根据需要自定义这个开始日期；
<strong>10位机器码</strong>，理论上可以表示1024台机器，也可以拆分几位表示机房几位表示机器。这里<strong>默认采用本机IPv4地址最后两段以及进程Id一起作为机器码</strong>，确保机房内部不同机器，以及相同机器上的不同进程，拥有不同的机器码；
<strong>12位序列号</strong>，表示范围0~4095，一直递增，即使毫秒数加一，这里也不会归零，避免被恶意用户轻易猜测得到前后订单号；</p>`,r:{minutes:4.04,words:1211},t:"雪花ID公共类",y:"a"}}],["/middleware/identityId/yitterxuehuaid.html",{loader:()=>a(()=>import("./yitterxuehuaid.html-Di8_nAvA.js"),__vite__mapDeps([399,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一种全新的雪花漂移算法，让ID更短、生成速度更快。 核心在于缩短ID长度的同时，还能拥有极高瞬时并发处理量（50W/0.1s），及强大的配置能力。
gitee：<a href="https://gitee.com/yitter/idgenerator" target="_blank" rel="noopener noreferrer">https://gitee.com/yitter/idgenerator</a></p>
<p>示例：271488814194757</p>
<h2>功能</h2>
<ul>
<li>雪花算法（雪花漂移），它生成的ID更短、速度更快</li>
<li>支持 k8s 等容器环境自动扩容（自动注册 WorkerId），可在单机或分布式环境生成数字型唯一ID。</li>
</ul>`,r:{minutes:1.01,words:304},t:"Yitter雪花ID",y:"a"}}],["/middleware/jiedianbianjiqi/stnodeeditor.html",{loader:()=>a(()=>import("./stnodeeditor.html-DHCPMEb6.js"),__vite__mapDeps([400,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>STNodeEditor 是一个轻量且功能强大的节点编辑器 使用方式非常简洁 提供了丰富的属性以及事件可以非常方便的完成节点之间数据的交互及通知 大量的虚函数可供开发者重写具有很高的自由性。</p>
<p>仓库地址：<a href="https://github.com/DebugST/STNodeEditor" target="_blank" rel="noopener noreferrer">https://github.com/DebugST/STNodeEditor</a></p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/MUkeGAinYeMBmrIKzsrKEA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/MUkeGAinYeMBmrIKzsrKEA</a> | 开源的 .NET 轻量级且功能强大的节点编辑器</p>`,r:{minutes:.46,words:138},t:"STNodeEditor",y:"a"}}],["/middleware/notification/notificationCollect.html",{loader:()=>a(()=>import("./notificationCollect.html-fCLZ6PjI.js"),__vite__mapDeps([401,1])),meta:{a:"azrng",d:16698528e5,l:"2022年12月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>之前写了一个关于捷易快信做通知服务的文章，然后收到了朋友的评论。下面我将简单了解一下朋友们推荐的服务。</p>
<h2>通知组件</h2>
<h3>EasyNotice</h3>
<p>EasyNotice 是一个基于 .NET 开源的消息通知组件，支持多种通知方式，包括邮件通知、钉钉、飞书、企业微信。</p>
<p>仓库地址：https://github.com/Bryan-Cyf/EasyNotice</p>
<h2>Server酱</h2>
<h3>介绍</h3>
<p>分为旧版本(依赖模板消息)、新版本(Turbo版)，作者推荐使用新版，因为支持多通道和客户端。</p>`,r:{minutes:4.22,words:1267},t:"其他通知服务",y:"a"}}],["/middleware/notification/notificationService.html",{loader:()=>a(()=>import("./notificationService.html-G6EemvQU.js"),__vite__mapDeps([402,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>这两天看见有大佬分享使用钉钉和企业微信的机器人来做通知报警，然后我想到了我使用的另一个第三方软件<strong>捷易快信</strong>(可能大家都不知道这个东西，我也忘了我最开始是咋知道的)，该服务的优点是可以通过微信进行提醒，不过每条需要收费0.0080元，但是不要担心每月可能会赠送4元(因为我的就是)，对于我来说，够我玩了。</p>
<h2>注册配置</h2>
<p>访问网址：<a href="http://jy.erpit.cn/login" target="_blank" rel="noopener noreferrer">http://jy.erpit.cn/login</a>
<img src="/common/1623074832782-048ef9a4-e41c-4fbf-ad27-840cf1813f57.png" alt="image.png" loading="lazy">
我是直接使用的微信进行登录的，看个人爱好进行登录。
下面模拟一个服务器告警来做一个演示消息通知。
<img src="/common/1623075258900-dda3a98c-8190-46e8-a30f-2dbfcc6d52f2.png" alt="image.png" loading="lazy"></p>`,r:{minutes:2.33,words:699},t:"简单通知服务",y:"a"}}],["/middleware/office/anglesharp.html",{loader:()=>a(()=>import("./anglesharp.html-lfq8wgbJ.js"),__vite__mapDeps([403,1])),meta:{a:"azrng",d:16667424e5,l:"2022年10月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>官网：<a href="https://anglesharp.github.io/" target="_blank" rel="noopener noreferrer">https://anglesharp.github.io/</a>
GitHub仓库地址：<a href="https://github.com/AngleSharp/AngleSharp" target="_blank" rel="noopener noreferrer">https://github.com/AngleSharp/AngleSharp</a></p>
<h2>操作</h2>
<p>安装组件包</p>`,r:{minutes:1.81,words:542},t:"AngleSharp",y:"a"}}],["/middleware/office/aspose.html",{loader:()=>a(()=>import("./aspose.html-a-N10NdK.js"),__vite__mapDeps([404,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>测试例子</h2>
<p>引用包</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Aspose.Cells" Version="21.3.0" /&gt;
    &lt;PackageReference Include="Aspose.PDF" Version="21.3.0" /&gt;
  &lt;/ItemGroup&gt;
</code></pre></div>`,r:{minutes:1.26,words:379},t:"Aspose",y:"a"}}],["/middleware/office/closedxml.html",{loader:()=>a(()=>import("./closedxml.html-DAONKY_s.js"),__vite__mapDeps([405,1])),meta:{a:"azrng",d:1694736e6,l:"2023年9月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ClosedXML 是一个 .NET 库，用于读取、操作和写入 Excel 2007+（.xlsx，.xlsm）文件。它旨在提供一个直观且用户友好的界面来处理底层的OpenXML API。
仓库地址：<a href="https://github.com/closedxml/closedxml" target="_blank" rel="noopener noreferrer">https://github.com/closedxml/closedxml</a></p>
<h2>操作</h2>
<p>nuget包</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>PM&gt; Install-Package ClosedXML
</code></pre></div>`,r:{minutes:.3,words:89},t:"closedxml",y:"a"}}],["/middleware/office/epplus.html",{loader:()=>a(()=>import("./epplus.html-D0a05QsV.js"),__vite__mapDeps([406,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>EPPlus是一个使用Open Office XML(xlsx)文件格式，能读写Excel 2007/2010 文件的开源组件，在导出Excel的时候不需要电脑上安装office，它的一个缺点就是不支持导出2003版的Excel(xls)。</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"EPPlus"</span> Version<span class="token operator">=</span><span class="token string">"5.8.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.23,words:969},t:"EPPlus",y:"a"}}],["/middleware/office/epubHandle.html",{loader:()=>a(()=>import("./epubHandle.html-lCpZn5Me.js"),__vite__mapDeps([407,1])),meta:{a:"azrng",d:16985376e5,l:"2023年10月29日",c:["middleware"],g:["epub"],o:!0,e:`<h2>概述</h2>
<p>Epub 格式其实就是按照一定规则生成的一个小型网站，含有书籍的目录和内容等其他信息，然后将这些整个网页文件打包为 ZIP 压缩格式。</p>
<h2>开源组件</h2>
<h3>NovelEpubMaker</h3>
<p>使用该组件来生成Epub格式的电子书</p>
<h3>EpubReader</h3>
<p>用于读取 EPUB 文件的 .NET 库</p>
<p>仓库地址：https://github.com/vers-one/EpubReader</p>
<p>文档地址：https://os.vers.one/EpubReader/getting-started/index.html</p>`,r:{minutes:.48,words:145},t:"Epub处理",y:"a"}}],["/middleware/office/exceltohtml.html",{loader:()=>a(()=>import("./exceltohtml.html-_56dvdnf.js"),__vite__mapDeps([408,1])),meta:{a:"azrng",d:16479936e5,l:"2022年3月23日",c:["middleware"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"ExcelToHtml",y:"a"}}],["/middleware/office/htmlagilitypack.html",{loader:()=>a(()=>import("./htmlagilitypack.html-PK7a2KaK.js"),__vite__mapDeps([409,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>这是一个敏捷的HTML解析器，它构建一个读/写DOM，并支持普通的XPATH或XSLT的.Net代码库，允许解析web地址之外的HTML文件，解析器对畸形HTML非常宽容。
文档地址：<a href="https://html-agility-pack.net/documentation" target="_blank" rel="noopener noreferrer">https://html-agility-pack.net/documentation</a>
GitHub仓库地址：<a href="https://github.com/zzzprojects/html-agility-pack" target="_blank" rel="noopener noreferrer">https://github.com/zzzprojects/html-agility-pack</a></p>`,r:{minutes:.9,words:270},t:"HtmlAgilityPack",y:"a"}}],["/middleware/office/miniexcel.html",{loader:()=>a(()=>import("./miniexcel.html-CdriH8Wg.js"),__vite__mapDeps([410,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MiniExcel简单、高效避免OOM的.NET处理Excel查、写、填充数据工具。
目前主流框架大多需要将数据全载入到内存方便操作，但这会导致内存消耗问题，MiniExcel 尝试以 Stream 角度写底层算法逻辑，能让原本1000多MB占用降低到几MB，避免内存不够情况。</p>
<p>Github：<a href="https://github.com/shps951023/MiniExcel" target="_blank" rel="noopener noreferrer">https://github.com/shps951023/MiniExcel</a></p>`,r:{minutes:.62,words:185},t:"MiniExcel",y:"a"}}],["/middleware/office/miniword.html",{loader:()=>a(()=>import("./miniword.html-BzEFfk7M.js"),__vite__mapDeps([411,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/jHsYeQiNjUwQF1lvqGnOOQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/jHsYeQiNjUwQF1lvqGnOOQ</a> | .NET Word模板引擎--MiniWord，继MiniExcel后又一开源作品！</p>
`,r:{minutes:.16,words:47},t:"MiniWord",y:"a"}}],["/middleware/office/nsoup.html",{loader:()=>a(()=>import("./nsoup.html-DsJzCGqK.js"),__vite__mapDeps([412,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>操作html的工具</p>
<h2>操作</h2>
<h3>获取文本</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> nsoup <span class="token operator">=</span> NSoup<span class="token punctuation">.</span>NSoupClient<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>htmltxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> nsoup<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.84,words:251},t:"NSoup",y:"a"}}],["/middleware/office/onlyoffice.html",{loader:()=>a(()=>import("./onlyoffice.html-DBReTt3g.js"),__vite__mapDeps([413,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ONLYOFFICE 是一个开源的办公套件，包括文档、表格、演示文稿和表单等应用程序。
可以很好低与微软Office兼容，允许多人实时在线对同一个文档进行协作编辑，并且支持Windows、Liunx、macOS、Android、iOS系统，方便团队移动办公协作。
仓库地址：https://github.com/ONLYOFFICE/CommunityServer</p>
<h2>特点</h2>
<p>1、跨平台：支持多种操作系统和平台；
2、开源：可以免费使用与修改；
3、强大的文件兼容性： 支持多种文件格式；
4、连接：与Google Drive、Box、Dropbox、OneDrive、OwnCloud等集成；
5、完整的办公套件：文档、表格、演示文稿和表单，可以满足日常的办公需求；
6、Web：可在浏览器运行使用，方便与团队共享与协作。</p>`,r:{minutes:.86,words:257},t:"ONLYOFFICE",y:"a"}}],["/middleware/office/openxml.html",{loader:()=>a(()=>import("./openxml.html-B7fhCQkB.js"),__vite__mapDeps([414,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>DocumentFormat<span class="token punctuation">.</span>OpenXml
</code></pre></div><h3>导出PPT文件中图片</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 导出PPT文件中所有图片</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sourcePath<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>源文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetDir<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>目标文件存放目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExportPPTImages</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sourcePath<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> targetDir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">PresentationDocument</span> presentationDocument <span class="token operator">=</span> PresentationDocument<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">,</span> <span class="token named-parameter punctuation">isEditable</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">PresentationPart</span> presentationPart <span class="token operator">=</span> presentationDocument<span class="token punctuation">.</span>PresentationPart<span class="token punctuation">;</span>
        <span class="token class-name">DocumentFormat<span class="token punctuation">.</span>OpenXml<span class="token punctuation">.</span>Presentation<span class="token punctuation">.</span>Presentation</span> presentation <span class="token operator">=</span> presentationPart<span class="token punctuation">.</span>Presentation<span class="token punctuation">;</span>
        <span class="token class-name">List<span class="token punctuation">&lt;</span>ImagePart<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ImagePart<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">DocumentFormat<span class="token punctuation">.</span>OpenXml<span class="token punctuation">.</span>Presentation<span class="token punctuation">.</span>SlideId</span> item <span class="token keyword">in</span> presentation<span class="token punctuation">.</span>SlideIdList<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DocumentFormat<span class="token punctuation">.</span>OpenXml<span class="token punctuation">.</span>Presentation<span class="token punctuation">.</span>SlideId<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">SlidePart</span> slidePart <span class="token operator">=</span> presentationPart<span class="token punctuation">.</span><span class="token function">GetPartById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>RelationshipId<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">SlidePart</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>slidePart<span class="token punctuation">.</span>ImageParts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List<span class="token punctuation">&lt;</span>IGrouping<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> ImagePart<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>Uri<span class="token punctuation">.</span>OriginalString<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//导出PPT所有的图片</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">ImagePart</span> imagePart <span class="token operator">=</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> tempFileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>targetDir<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$"image_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">.jpg"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Stream</span> stream <span class="token operator">=</span> imagePart<span class="token punctuation">.</span><span class="token function">GetStream</span><span class="token punctuation">(</span>FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    bitmap<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>tempFileName<span class="token punctuation">,</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//presentation.Save();</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.97,words:292},t:"OpenXml",y:"a"}}],["/middleware/office/puppeteersharp.html",{loader:()=>a(()=>import("./puppeteersharp.html-CVF_8r-5.js"),__vite__mapDeps([415,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>仓库地址：<a href="https://github.com/hardkoded/puppeteer-sharp" target="_blank" rel="noopener noreferrer">https://github.com/hardkoded/puppeteer-sharp</a></p>
<h2>操作</h2>
<p>引用nuget包：PuppeteerSharp</p>
<h3>将HTML转图片/PDF</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrowserFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DownloadAsync</span><span class="token punctuation">(</span>BrowserFetcher<span class="token punctuation">.</span>DefaultChromiumRevision<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> browser <span class="token operator">=</span> <span class="token keyword">await</span> Puppeteer<span class="token punctuation">.</span><span class="token function">LaunchAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LaunchOptions</span> <span class="token punctuation">{</span> Headless <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> destFilePath <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory <span class="token operator">+</span> <span class="token string">"TestImgCreate\\\\"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> outputFile <span class="token operator">=</span> destFilePath <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">NewPageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">SetViewportAsync</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ViewPortOptions</span>
        <span class="token punctuation">{</span>
            Width <span class="token operator">=</span> <span class="token number">425</span><span class="token punctuation">,</span> <span class="token comment">//图片宽度</span>
            Height <span class="token operator">=</span> <span class="token number">635</span> <span class="token comment">//图片高度</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">SetContentAsync</span><span class="token punctuation">(</span>
        <span class="token string">@"
    &lt;html&gt;
    &lt;body&gt;
    &lt;div class='box'&gt;
        &lt;h1&gt;考场号:&amp;nbsp;&amp;nbsp;&amp;nbsp;01&lt;/h1&gt;
        &lt;h1&gt;座位号:&amp;nbsp;&amp;nbsp;&amp;nbsp;01&lt;/h1&gt;
        &lt;div class='center-box'&gt;
        &lt;h4&gt;姓&amp;nbsp; &amp;nbsp;&amp;nbsp;名:&amp;nbsp; &amp;nbsp;花卷&lt;/h4&gt;
        &lt;h4&gt;身份证号:&amp;nbsp; &amp;nbsp;545645456456465&lt;/h4&gt;
        &lt;h4&gt;准考证号:&amp;nbsp; &amp;nbsp;54564545454&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class='botom-box'&gt;
        &lt;h2&gt;温馨提示:&lt;/h2&gt;
        &lt;h3&gt;请核对信息无误后,张贴在准考证指定位置！&lt;/h3&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    &lt;style&gt;
    .box{
        box-sizing: border-box;
        padding-top: 10px;  
        text-align: center;
        font-family: fangsong;
    }
    .box&gt;h1 {
        font-size: 46px;
    }
    .center-box {
        text-align: left;
        width:290px;
        margin:60px auto;
    }
    .center-box &gt; h4{
        font-size: 18px;
    }
    .botom-box {
        text-align: center;
        margin-left: 20px;
    }
    &lt;/style&gt;"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ScreenshotOptions</span> screenshotOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScreenshotOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    screenshotOptions<span class="token punctuation">.</span>FullPage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是否截取整个页面</span>
    screenshotOptions<span class="token punctuation">.</span>OmitBackground <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//是否使用透明背景，而不是默认白色背景</span>
    screenshotOptions<span class="token punctuation">.</span>Quality <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//截图质量 0-100（png不可用）</span>
    screenshotOptions<span class="token punctuation">.</span>Type <span class="token operator">=</span> ScreenshotType<span class="token punctuation">.</span>Jpeg<span class="token punctuation">;</span> <span class="token comment">//截图格式</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">ScreenshotAsync</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> screenshotOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.18,words:353},t:"PuppeteerSharp",y:"a"}}],["/middleware/office/",{loader:()=>a(()=>import("./index.html-CKYB3vkj.js"),__vite__mapDeps([416,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>框架</h2>
<h3>Word</h3>
<ul>
<li>NOPI</li>
<li>Aspose</li>
<li>OpenXml</li>
<li>MiniWord</li>
</ul>
<h3>Excel</h3>
<ul>
<li>NPOI</li>
<li>Spire</li>
<li>TowerSoft.HtmlToExcel</li>
<li>EPPlus</li>
<li>MiniExcel</li>
<li>closedxml</li>
<li>ExcelToHtml</li>
</ul>
<h3>PPT</h3>
<ul>
<li>OpenXml</li>
<li>ShapeCrawler</li>
</ul>`,r:{minutes:.86,words:258},t:"说明",y:"a"}}],["/middleware/office/spire.html",{loader:()=>a(()=>import("./spire.html-MCZNNyoS.js"),__vite__mapDeps([417,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>免费版本有版权标识信息，至于有没有更多不确定。</p>
<h2>FreeSpire</h2>
<p>免费的.NET库，用于操作Office</p>
<p>文档地址：https://www.e-iceblue.com/Introduce/free-doc-component.html</p>
<h2>和免费版区别</h2>
<p>FreeSpire.Doc和Spire.Doc指的是同一个产品系列的不同版本。Spire.Doc是由E-iceblue公司开发的一款用于.NET平台的Word文档处理库，它允许开发者在没有安装Microsoft Office的情况下创建、读取、修改和转换Word文档。Spire.Doc分为两个版本：
1、Spire.Doc (付费版)：</p>`,r:{minutes:3.65,words:1096},t:"Spire",y:"a"}}],["/middleware/office/towersoft_htmltoexcel.html",{loader:()=>a(()=>import("./towersoft_htmltoexcel.html-Bw7IwWAJ.js"),__vite__mapDeps([418,1])),meta:{a:"azrng",d:16479936e5,l:"2022年3月23日",c:["middleware"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"TowerSoft.HtmlToExcel",y:"a"}}],["/middleware/oss/aliyunoss.html",{loader:()=>a(()=>import("./aliyunoss.html-DVA-9Zg2.js"),__vite__mapDeps([419,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>图片上传功能是web开发必不可少的功能。图片上传到哪里其实都是一个非常头疼的事情，多个文件源各种地址组合，经常会出现图片地址错误问题。自从前后端分离、小程序、app成为流行后，大家一般都会将文件、图片等静态资源存储在独立的一个源，公司可以自己搭建一个文件中心，更多的是将这些静态资源存放在像阿里云oss，七牛云等专业的文件资源存储。</p>
<h2>操作</h2>
<h3>开发和配置</h3>
<ul>
<li>开发环境：.NetCore3.1,Net5</li>
<li>提前申请好阿里云OSS，拿到endpoint，AccessKeyID，AccessKeySecret，Bucket和Domain这些配置参数。</li>
<li>项目Nuget添加包：Aliyun.OSS</li>
</ul>`,r:{minutes:2.88,words:864},t:"阿里云OSS",y:"a"}}],["/middleware/oss/fastdfs.html",{loader:()=>a(()=>import("./fastdfs.html-hH5BN1nm.js"),__vite__mapDeps([420,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>FastDFS是一个开源的轻量级<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1250388" target="_blank" rel="noopener noreferrer">分布式文件系统</a>，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/932451" target="_blank" rel="noopener noreferrer">负载均衡</a>的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>`,r:{minutes:.76,words:228},t:"FastDFS",y:"a"}}],["/middleware/oss/filebrowser.html",{loader:()=>a(()=>import("./filebrowser.html-BWdaOGee.js"),__vite__mapDeps([421,1])),meta:{a:"azrng",d:16698528e5,l:"2022年12月1日",c:["middleware"],g:["无"],o:!0,e:`<p><a href="https://www.cnblogs.com/zhurong/p/16937645.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhurong/p/16937645.html</a></p>
`,r:{minutes:.1,words:29},t:"FileBrowser",y:"a"}}],["/middleware/oss/fluentftp.html",{loader:()=>a(()=>import("./fluentftp.html-FN9SXAGA.js"),__vite__mapDeps([422,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>FluentFTP 是一个适用于 .NET 和 .NET Standard 的 FTP 和 FTPS 客户端。
并且针对速度进行了优化，没有外部依赖， 完全用 C## 编写。</p>
<p>仓库地址：<a href="https://github.com/robinrodricks/FluentFTP" target="_blank" rel="noopener noreferrer">https://github.com/robinrodricks/FluentFTP</a></p>
<h2>操作</h2>
<h3>基础操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 通过用户名密码创建连接</span>
<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncFtpClient</span><span class="token punctuation">(</span><span class="token string">"123.123.123.123"</span><span class="token punctuation">,</span> <span class="token string">"david"</span><span class="token punctuation">,</span> <span class="token string">"pass123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接到服务器，并设置自动重连</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">AutoConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 列出所有的文件</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">FtpListItem</span> item <span class="token keyword">in</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetListing</span><span class="token punctuation">(</span><span class="token string">"/htdocs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 如果是文件类型</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>Type <span class="token operator">==</span> FtpObjectType<span class="token punctuation">.</span>File<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 获取文件大小</span>
        <span class="token class-name"><span class="token keyword">long</span></span> size <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetFileSize</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 计算文件 hash</span>
        <span class="token class-name">FtpHash</span> hash <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetChecksum</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取文件或文件夹的修改时间</span>
    <span class="token class-name">DateTime</span> time <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetModifiedTime</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上传一个文件</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">UploadFile</span><span class="token punctuation">(</span><span class="token string">@"C:\\MyVideo.mp4"</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/MyVideo.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移动文件</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">MoveFile</span><span class="token punctuation">(</span><span class="token string">"/htdocs/MyVideo.mp4"</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/MyVideo_2.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 下载文件</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">DownloadFile</span><span class="token punctuation">(</span><span class="token string">@"C:\\MyVideo_2.mp4"</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/MyVideo_2.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 删除文件</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">DeleteFile</span><span class="token punctuation">(</span><span class="token string">"/htdocs/MyVideo_2.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 关闭连接，结束</span>
<span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.97,words:291},t:"FluentFTP",y:"a"}}],["/middleware/oss/httpfileserver.html",{loader:()=>a(()=>import("./httpfileserver.html-C116299i.js"),__vite__mapDeps([423,1])),meta:{a:"azrng",d:16730496e5,l:"2023年1月7日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一款免费、开源、便携专为个人用户所设计的 HTTP 文件服务器系统软件，估计没有比 Http File Server 使用起来更为简单的 HTTP 文件服务器了，它不仅上手快、设置简单，而且连安装的步骤都省掉了，相当方便。
基本上，需要用户设置的就是网页服务器的IP地址。直接拨号的用户填写自己的外网IP就可以了；内网的用户（通过路由器）需要填写内网地址，如192.168.x..x。然后需要在路由器中映射对应的IP和端口，相对要麻烦一些。Http File Server 提供的功能很全，包括文件上传/下载、虚拟文件系统、完整日志记录、账户管理等等。此外，假如暂时不需要服务器了，直接“Switch Off”或退出程序就可以了，不会影响其它任何程序的使用。
官网：<a href="https://www.rejetto.com/hfs/?f=intro" target="_blank" rel="noopener noreferrer">https://www.rejetto.com/hfs/?f=intro</a>
下载地址：<a href="https://www.rejetto.com/hfs/?f=dl" target="_blank" rel="noopener noreferrer">https://www.rejetto.com/hfs/?f=dl</a></p>`,r:{minutes:.96,words:288},t:"HttpFileServer",y:"a"}}],["/middleware/oss/minio.html",{loader:()=>a(()=>import("./minio.html-5OuoNrNV.js"),__vite__mapDeps([424,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Minio 是一个基于Apache License v2.0开源协议的对象存储服务，虽然轻量，却拥有着不错的性能。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据。
例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T 不等。
官方文档：<a href="http://docs.minio.org.cn/docs/master/minio-deployment-quickstart-guide" target="_blank" rel="noopener noreferrer">http://docs.minio.org.cn/docs/master/minio-deployment-quickstart-guide</a></p>`,r:{minutes:3.72,words:1117},t:"Minio",y:"a"}}],["/middleware/oss/qiniuyuncunchu.html",{loader:()=>a(()=>import("./qiniuyuncunchu.html-CvqRhXJB.js"),__vite__mapDeps([425,1])),meta:{a:"azrng",d:16422912e5,l:"2022年1月16日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>C## SDK 属于服务端SDK之一，主要有如下功能：</p>
<ul>
<li>提供生成客户端上传所需的上传凭证的功能</li>
<li>提供文件从服务端直接上七牛的功能</li>
<li>提供对七牛空间中文件进行管理的功能</li>
<li>提供对七牛空间中文件进行处理的功能</li>
<li>提供七牛CDN相关的刷新，预取，日志功能</li>
</ul>
<h2>操作</h2>
<h3>客户端上传凭证</h3>
<p>客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证，而这些上传凭证是通过服务端的SDK来生成的，然后通过客户自己的业务API分发给客户端使用。根据上传的业务需求不同，c## SDK支持丰富的上传凭证生成方式。
创建各种上传凭证之前，我们需要定义好其中鉴权对象mac：</p>`,r:{minutes:5.01,words:1503},t:"七牛云存储",y:"a"}}],["/middleware/oss/",{loader:()=>a(()=>import("./index.html-Cipka9R-.js"),__vite__mapDeps([426,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>组件</h2>
<h3>OnceMi.AspNetCore.OSS</h3>
<p>Asp.Net Core 5.0/6.0对象储存扩展包，支持Minio自建对象储存、阿里云OSS、腾讯云COS、七牛云Kodo。支持OSS常规操作，比如储存桶创建，删除、对象上传、下载、生成签名URL等。支持.NET 5/6，也推荐升级至.NET 5/6.</p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/SovmrWnD6EfUi37KqxUTVg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/SovmrWnD6EfUi37KqxUTVg</a>：阿里.腾讯.七牛.对象储存C#这一个就够了</p>`,r:{minutes:.42,words:126},t:"说明",y:"a"}}],["/middleware/oss/tfs.html",{loader:()=>a(()=>import("./tfs.html-NehlJr7w.js"),__vite__mapDeps([427,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>TFS(淘宝文件系统)高扩展、高可用、高性能、面向互联网的分布式文件系统，主要针对海量的非结构化数据。
提供海量非结构化数据，通常文件大小不超过1M，满足了淘宝对小文件的存储需求。</p>
`,r:{minutes:.34,words:103},t:"TFS",y:"a"}}],["/middleware/pachong/anglesharp.html",{loader:()=>a(()=>import("./anglesharp.html-B5UuYP0e.js"),__vite__mapDeps([428,1])),meta:{a:"azrng",d:16667424e5,l:"2022年10月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p><a href="https://www.yuque.com/docs/share/73bf6054-28b9-4a1f-8253-b621453f54ea?view=doc_embed" target="_blank" rel="noopener noreferrer">AngleSharp</a></p>
<h2>示例</h2>
<p>爬取博客园事例：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>HotNews<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> Configuration<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">WithDefaultLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> address <span class="token operator">=</span> <span class="token string">"https://www.cnblogs.com"</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> BrowsingContext<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> document <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> cellSelector <span class="token operator">=</span> <span class="token string">"article.post-item"</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> cells <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">QuerySelectorAll</span><span class="token punctuation">(</span>cellSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> cells<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">QuerySelector</span><span class="token punctuation">(</span><span class="token string">"section&gt;div&gt;a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HotNews</span>
    <span class="token punctuation">{</span>
        Title <span class="token operator">=</span> a<span class="token punctuation">.</span>TextContent<span class="token punctuation">,</span>
        Url <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">GetAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.45,words:136},t:"AngleSharp",y:"a"}}],["/middleware/pachong/changyongzujian.html",{loader:()=>a(()=>import("./changyongzujian.html-DYfPdpcB.js"),__vite__mapDeps([429,1])),meta:{a:"azrng",d:16555968e5,l:"2022年6月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>PhantomJS</h2>
<p>PhantomJS：算是一个没有UI界面的浏览器，主要用来实现页面自动化测试，我们则利用它的页面解析功能，执行网站内容的抓取。
下载解压后将Bin文件夹中的phantomjs.exe文件复制到你爬虫项目下的任意文件夹。
下载地址：http://phantomjs.org/download.html</p>
<blockquote>
<p>缺点：环境安装复杂，API调用不友好</p>
</blockquote>
<h2>Selenium</h2>
<p>是一个自动化测试工具，封装了很多WebDriver用于跟浏览器内核通讯，我用开发语言来调用它实现PhantomJS的自动化操作。它的下载页面里有很多东西，我们只需要Selenium Client，它支持了很多语言（C#、JAVA、Ruby、Python、NodeJS），按自己所学语言下载即可。
下载地址：http://docs.seleniumhq.org/download/</p>`,r:{minutes:.81,words:242},t:"常用组件",y:"a"}}],["/middleware/pachong/fuzhugongju.html",{loader:()=>a(()=>import("./fuzhugongju.html-Bw7vRhXe.js"),__vite__mapDeps([430,1])),meta:{a:"azrng",d:16518816e5,l:"2022年5月7日",c:["middleware"],g:["无"],o:!0,e:`<h2>User-Agent</h2>
<p>测试当前爬虫的User-Agent：<a href="http://www.whatismyuseragent.net" target="_blank" rel="noopener noreferrer">http://www.whatismyuseragent.net</a></p>
<h2>免费代理</h2>
<p><a href="https://www.xicidaili.com/" target="_blank" rel="noopener noreferrer">西刺代理</a>
<a href="http://www.89ip.cn/" target="_blank" rel="noopener noreferrer">89免费代理</a>
<a href="http://www.iphai.com/" target="_blank" rel="noopener noreferrer">IP海</a>
<a href="http://31f.cn/" target="_blank" rel="noopener noreferrer">三一代理</a>
<a href="http://www.ip3366.net/" target="_blank" rel="noopener noreferrer">云代理</a>
<a href="http://www.66ip.cn/" target="_blank" rel="noopener noreferrer">66免费代理</a></p>`,r:{minutes:.27,words:82},t:"辅助工具",y:"a"}}],["/middleware/pachong/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-Cj75cyeP.js"),__vite__mapDeps([431,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>抓取数据的主要思路就是分析目标网站的页面逻辑，利用xpath、正则表达式等知识去解析网页拿到我们想要的数据，通过引用nuget组件然后实现通过jq获取指定的元素。</p>
<h2>组件介绍</h2>
<p>HtmlAgilityPack、AngleSharp、PuppeteerSharp，前两个可以处理传统的页面，无法抓取单页应用，如果需要抓取单页应用可以使用PuppeteerSharp。</p>
<h2>概念</h2>
<h3>分布式爬虫</h3>
<p>分布式爬虫通常需要两个端：</p>
<ul>
<li>控制端</li>
<li>爬虫端</li>
</ul>`,r:{minutes:3.7,words:1110},t:"概述",y:"a"}}],["/middleware/pachong/htmlagilitypack.html",{loader:()=>a(()=>import("./htmlagilitypack.html-BgC8MxC7.js"),__vite__mapDeps([432,1])),meta:{a:"azrng",d:16767648e5,l:"2023年2月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p><a href="https://www.yuque.com/docs/share/8a134a56-0272-4d3d-9a41-c84b5f35af89?view=doc_embed" target="_blank" rel="noopener noreferrer">HtmlAgilityPack</a></p>
<h2>示例</h2>
<p>抓取事例：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>HotNews<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> web <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HtmlWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> htmlDocument <span class="token operator">=</span> <span class="token keyword">await</span> web<span class="token punctuation">.</span><span class="token function">LoadFromWebAsync</span><span class="token punctuation">(</span><span class="token string">"https://www.cnblogs.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> node <span class="token operator">=</span> htmlDocument<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">"//*[@id='post_list']/article/section/div/a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> node<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HotNews</span>
    <span class="token punctuation">{</span>
        Title <span class="token operator">=</span> item<span class="token punctuation">.</span>InnerText<span class="token punctuation">,</span>
        Url <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">GetAttributeValue</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.26,words:79},t:"HtmlAgilityPack",y:"a"}}],["/middleware/pachong/puppeteersharp.html",{loader:()=>a(()=>import("./puppeteersharp.html-_uLeVIsk.js"),__vite__mapDeps([433,1])),meta:{a:"azrng",d:16943904e5,l:"2023年9月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>PuppeteerSharp是基于Puppeteer的，Puppeteer&nbsp;是一个Google 开源的NodeJS 库，它提供了一个高级API 来通过DevTools协议控制Chromium 浏览器。Puppeteer 默认以无头(Headless) 模式运行，但是可以通过修改配置运行“有头”模式。
PuppeteerSharp可以干很多事情，不光可以用来抓取单页应用，还可以用来生成页面PDF或者图片，可以做自动化测试等。</p>
<p>官网：<a href="https://www.puppeteersharp.com/" target="_blank" rel="noopener noreferrer">https://www.puppeteersharp.com/</a>
GitHub仓库地址：<a href="https://github.com/hardkoded/puppeteer-sharp" target="_blank" rel="noopener noreferrer">https://github.com/hardkoded/puppeteer-sharp</a></p>`,r:{minutes:3,words:900},t:"PuppeteerSharp",y:"a"}}],["/middleware/pachong/shili.html",{loader:()=>a(()=>import("./shili.html-C3VkgPLM.js"),__vite__mapDeps([434,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["middleware"],g:["无"],o:!0,e:`<p>异步并发、设置代理、操作Cookie、Gzip页面加速。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">CookieContainer</span> CookiesContainer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//定义Cookie容器</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 异步创建爬虫</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uri<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>爬虫URL地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proxy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>代理服务器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>网页源代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> proxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pageSource <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnStart <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OnStartEventArgs</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebRequest<span class="token punctuation">)</span>WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span>Accept <span class="token operator">=</span> <span class="token string">"*/*"</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span>ServicePoint<span class="token punctuation">.</span>Expect100Continue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//加快载入速度</span>
            request<span class="token punctuation">.</span>ServicePoint<span class="token punctuation">.</span>UseNagleAlgorithm <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//禁止Nagle算法加快载入速度</span>
            request<span class="token punctuation">.</span>AllowWriteStreamBuffering <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//禁止缓冲加快载入速度</span>
            request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>HttpRequestHeader<span class="token punctuation">.</span>AcceptEncoding<span class="token punctuation">,</span> <span class="token string">"gzip,deflate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义gzip压缩页面支持</span>
            request<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">;</span><span class="token comment">//定义文档类型及编码</span>
            request<span class="token punctuation">.</span>AllowAutoRedirect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//禁止自动跳转</span>
            <span class="token comment">//设置User-Agent，伪装成Google Chrome浏览器</span>
            request<span class="token punctuation">.</span>UserAgent <span class="token operator">=</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36"</span><span class="token punctuation">;</span>
            request<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span><span class="token comment">//定义请求超时时间为5秒</span>
            request<span class="token punctuation">.</span>KeepAlive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//启用长连接</span>
            request<span class="token punctuation">.</span>Method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">;</span><span class="token comment">//定义请求方式为GET              </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span>Proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置代理服务器IP，伪装请求地址</span>
            request<span class="token punctuation">.</span>CookieContainer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CookiesContainer<span class="token punctuation">;</span><span class="token comment">//附加Cookie容器</span>
            request<span class="token punctuation">.</span>ServicePoint<span class="token punctuation">.</span>ConnectionLimit <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span><span class="token comment">//定义最大连接数</span>

            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebResponse<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span><span class="token comment">//获取请求响应</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token keyword">in</span> response<span class="token punctuation">.</span>Cookies<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CookiesContainer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将Cookie加入容器，保存登录状态</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ContentEncoding<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//解压</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">GZipStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GZipStream</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CompressionMode<span class="token punctuation">.</span>Decompress<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            pageSource <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ContentEncoding<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"deflate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//解压</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">DeflateStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeflateStream</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CompressionMode<span class="token punctuation">.</span>Decompress<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            pageSource <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Stream</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//原始</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>

                            pageSource <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            request<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> threadId <span class="token operator">=</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">;</span><span class="token comment">//获取当前任务线程ID</span>
            <span class="token class-name"><span class="token keyword">var</span></span> milliseconds <span class="token operator">=</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span><span class="token comment">//获取请求执行时间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnCompleted <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OnCompletedEventArgs</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> milliseconds<span class="token punctuation">,</span> pageSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>OnError <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OnErrorEventArgs</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pageSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.5,words:450},t:"示例",y:"a"}}],["/middleware/printPlugin/fastreport.html",{loader:()=>a(()=>import("./fastreport.html-DElkRtnH.js"),__vite__mapDeps([435,1])),meta:{a:"azrng",d:16395264e5,l:"2021年12月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>示例：https://jhrs.com/2021/44698.html</p>
`,r:{minutes:.1,words:31},t:"fastreport",y:"a"}}],["/middleware/printPlugin/",{loader:()=>a(()=>import("./index.html-BGNfRmnF.js"),__vite__mapDeps([436,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>常见打印需求</h2>
<ol>
<li>使用默认打印机打印PDF文档</li>
<li>使用虚拟打印机（Microsoft XPS Document Writer）打印PDF文档</li>
<li>指定打印机及PDF文档打印页码范围</li>
<li>静默打印PDF文档</li>
<li>双面打印PDF文档</li>
<li>黑白打印PDF文档</li>
<li>打印PDF文档时选择不同的出纸盒</li>
<li>将PDF文档打印多份</li>
<li>打印PDF一页为多页、打印多页为一页</li>
<li>自定义纸张大小打印PDF</li>
</ol>
<h2>组件</h2>
<p>打印机操作代码
https://www.whuanle.cn/archives/21032
https://www.whuanle.cn/archives/21367</p>`,r:{minutes:1.43,words:429},t:"概述",y:"a"}}],["/middleware/renwudiaodu/antjob.html",{loader:()=>a(()=>import("./antjob.html-Dl50NmN9.js"),__vite__mapDeps([437,1])),meta:{a:"azrng",d:16530912e5,l:"2022年5月21日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>分布式任务调度系统，纯NET打造的重量级大数据实时计算平台，万亿级调度经验积累！面向中小企业大数据分析场景。</p>
<h2>功能</h2>
<p>AntJob的核心是<strong>蚂蚁算法</strong>：<strong>把任意大数据拆分成为小块，采用蚂蚁搬家策略计算每一块！</strong>
（蚂蚁搬家，一个馒头掉在地上，众多小蚂蚁会把馒头掰成小块小块往家里般！）
该算法设计于2008年，最开始用于处理基金公司的短信/邮件/传真群发（每批两百万）和电话话费分析（上百种国际长途计费规则），数据量不算大，但是有一定复杂度，并且要求支持持续处理（实时计算）以及出错重试。
2016年在中通快递某产品项目中使用该算法进行大数据实时计算，成功挑战每日1200万的订单。并进一步发展衍生成为重量级实时计算平台，集分布式计算、集群调度、配置中心、负载均衡、故障转移、跨机房冗余、作业监控告警、百亿级数据清洗、超大Redis缓存（&gt;2T）于一身，于2019年达到每年万亿级计算量（2019年双十一日订单量破亿）。
AntJob是开源简化版，仅提供分布式计算和集中调度能力，支持百亿级调度（需要改造）。
AntJob主要功能点：</p>`,r:{minutes:2.81,words:843},t:"AntJob",y:"a"}}],["/middleware/renwudiaodu/coravel.html",{loader:()=>a(()=>import("./coravel.html-98_GCOtE.js"),__vite__mapDeps([438,1])),meta:{a:"azrng",d:16457472e5,l:"2022年2月25日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>框架轻，使用简单，支持秒级定时任务。Coravel Pro可以连接数据库进行任务调度，Coravel Pro可以支持web可视化，将任务执行情况通过web显示出来。</p>
<blockquote>
<p>GitHub：<a href="https://github.com/jamesmh/coravel" target="_blank" rel="noopener noreferrer">https://github.com/jamesmh/coravel</a></p>
</blockquote>
<h2>操作</h2>
<h3>Nuget安装</h3>
<p>在调用类库层安装Coravel。
<img src="/common/1641912866485-44edfc95-de73-4d44-82f3-d99fabdc9e2f.jpeg" alt="" loading="lazy"></p>`,r:{minutes:1.94,words:583},t:"Coravel",y:"a"}}],["/middleware/renwudiaodu/easyquartz.html",{loader:()=>a(()=>import("./easyquartz.html-BIq9kdPE.js"),__vite__mapDeps([439,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>平常项目中你会选择哪个任务调度组件那？是Quartz还是Hangfire，又或者是Coravel、ScheduleMaster、FluentScheduler那？
对于Quartz和Hangfire我都使用过，我知道他们都可以实现秒级别精度的调度并且都支持Cron，看板的话Hangfire自带有，Quartz的话第三方工具自带有，比如本文要介绍的东西：EasyQuartz
该组件是朋友最新编写的一个组件，框架版本为长期支持版本.Net6.0，支持面板以及MySQL存储(其他存储方案留有扩展口)，项目源码地址为：<a href="https://gitee.com/CRole/EasyQuartz" target="_blank" rel="noopener noreferrer">https://gitee.com/CRole/EasyQuartz</a></p>`,r:{minutes:1.3,words:391},t:"EasyQuartz",y:"a"}}],["/middleware/renwudiaodu/fluentscheduler.html",{loader:()=>a(()=>import("./fluentscheduler.html-Dvn8L5SU.js"),__vite__mapDeps([440,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>FluentSchedule 是.NET平台下的一款轻量级任务调度组件。接口丰富，功能强大，简单易容。官网提供的丰富示例，让开发者很容易上手。如果在项目中简单的设置定时任务，优先使用该组件。
官网：https://fluentscheduler.github.io/
GitHub：https://github.com/fluentscheduler/FluentScheduler</p>
`,r:{minutes:.35,words:104},t:"FluentScheduler",y:"a"}}],["/middleware/renwudiaodu/hangfire.html",{loader:()=>a(()=>import("./hangfire.html-CP9NbckU.js"),__vite__mapDeps([441,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>轻便，可持久化，还有面板</p>
<p>官网文档：https://www.hangfire.io/overview.html</p>
<h2>快速上手</h2>
<p>新建项目.Net6的WebApi项目，然后安装下面nuget包并使用内存储存</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk.Web<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Swashbuckle.AspNetCore<span class="token punctuation">"</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6.5.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hangfire.AspNetCore<span class="token punctuation">"</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.8.6<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 👈
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hangfire.InMemory<span class="token punctuation">"</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.6.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> 👈
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,r:{minutes:4.45,words:1335},t:"Hangfire",y:"a"}}],["/middleware/renwudiaodu/",{loader:()=>a(()=>import("./index.html-Ys7OGx-K.js"),__vite__mapDeps([442,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>常见组件</h2>
<ul>
<li><a href="https://github.com/HangfireIO/Hangfire" target="_blank" rel="noopener noreferrer">HangFire</a></li>
<li><a href="https://github.com/jamesmh/coravel" target="_blank" rel="noopener noreferrer">Coravel</a></li>
<li><a href="https://github.com/fluentscheduler/FluentScheduler" target="_blank" rel="noopener noreferrer">Fluent Scheduler</a></li>
<li><a href="https://github.com/quartznet/quartznet" target="_blank" rel="noopener noreferrer">Quartz</a></li>
<li><a href="https://github.com/2881099/FreeScheduler" target="_blank" rel="noopener noreferrer">FreeScheduler</a></li>
<li>TaskScheduler</li>
<li>AntJob</li>
</ul>`,r:{minutes:.6,words:180},t:"说明",y:"a"}}],["/middleware/renwudiaodu/schedulemaster.html",{loader:()=>a(()=>import("./schedulemaster.html-Dlhe_t0S.js"),__vite__mapDeps([443,1])),meta:{a:"azrng",d:16483392e5,l:"2022年3月27日",c:["middleware"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"ScheduleMaster",y:"a"}}],["/middleware/renwudiaodu/timerlei.html",{loader:()=>a(()=>import("./timerlei.html-BvvZ8ZWK.js"),__vite__mapDeps([444,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>Timer是.NET内置的定时器类，它位于命名空间System.Timers下。Timer是一个基于服务器端的计时器，提供了Interval属性来设置重复触发定时任务的间隔(单位为毫秒)，触发事件则由Elapsed事件来指定。另外，还可以通过AutoReset属性来设置Timer的Elapsed事件只触发一次或者重复触发。
文档地址：https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer?view=net-6.0</p>
<h2>操作</h2>
<h3>IHostedService中使用</h3>`,r:{minutes:.65,words:194},t:"Timer类",y:"a"}}],["/middleware/renwudiaodu/xxl-job.html",{loader:()=>a(()=>import("./xxl-job.html-NAEqFp-m.js"),__vite__mapDeps([445,1])),meta:{a:"azrng",d:16483392e5,l:"2022年3月27日",c:["middleware"],g:["无"],o:!0,r:{minutes:.09,words:27},t:"XXL-Job",y:"a"}}],["/middleware/reverseProxy/traefik.html",{loader:()=>a(()=>import("./traefik.html-CeXxzt-q.js"),__vite__mapDeps([446,1])),meta:{a:"azrng",d:171504e7,l:"2024年5月7日",c:["middleware"],g:["Traefik"],o:!0,e:`<h2>资料</h2>
<p>能更好集成容器的反向代理工具Traefik的简单使用：https://mp.weixin.qq.com/s/wimK2ZlY3Gh1uZ2Yid1foA</p>
`,r:{minutes:.14,words:43},t:"Traefik",y:"a"}}],["/middleware/shijianzongxian/jaina.html",{loader:()=>a(()=>import("./jaina.html-BWX1ujAh.js"),__vite__mapDeps([447,1])),meta:{a:"azrng",d:1677888e6,l:"2023年3月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET 事件总线，简化项目、类库、线程、服务等之间的通信。
仓库地址：<a href="https://gitee.com/dotnetchina/Jaina" target="_blank" rel="noopener noreferrer">https://gitee.com/dotnetchina/Jaina</a></p>
<h2>备注</h2>
<p>todo：
学习里面关于事件绑定委托的方案，以及学习里面关于如何进行测试好坏的方案</p>
`,r:{minutes:.31,words:93},t:"Jaina",y:"a"}}],["/middleware/shijianzongxian/masaframework.html",{loader:()=>a(()=>import("./masaframework.html-CLGgkZKc.js"),__vite__mapDeps([448,1])),meta:{a:"azrng",d:1677888e6,l:"2023年3月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>支持进程内和进程外事件总线。</p>
<h2>优点</h2>
<ul>
<li>模块解耦
<ul>
<li>模块间没有强依赖关系</li>
<li>可在任意位置发送事件</li>
</ul>
</li>
<li>支持AOP
<ul>
<li>一种装配到事件管道以处理事件请求和响应的技术</li>
</ul>
</li>
<li>支持Saga
<ul>
<li>一种业务补偿模式，将一个请求处理程序划分为不同的步骤执行</li>
</ul>
</li>
<li>Handler支持编排
<ul>
<li>事件的处理程序可以分成不同的步骤按顺序有序执行</li>
</ul>
</li>
<li>自动提交、错误回滚
<ul>
<li>结合UnitOfWork支持自动提交、错误回滚等。</li>
<li>操作成功后，框架自动保存</li>
<li>操作失败后，框架自动回滚</li>
</ul>
</li>
<li>提供跨进程事件总线
<ul>
<li>不需要我们自己对接RabbitMq、Kafka等消息队列</li>
</ul>
</li>
</ul>`,r:{minutes:1.46,words:439},t:"MasaFramework",y:"a"}}],["/middleware/shijianzongxian/masstransit.html",{loader:()=>a(()=>import("./masstransit.html-CaGtLN5L.js"),__vite__mapDeps([449,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>有些场景无法避免的需要实时、同步场景下进行，可以借助Saga事务来解决这个困惑。</p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/hhqSMErNDcBr7Dej3N9vIA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/hhqSMErNDcBr7Dej3N9vIA</a> | AspNetCore&amp;MassTransit Courier实现分布式事务
本地代码存储：\\开发\\docs\\AspNetCore&amp;MassTransit Courier实现分布式事务.png</p>`,r:{minutes:.61,words:184},t:"MassTransit",y:"a"}}],["/middleware/shijianzongxian/mediatr.html",{loader:()=>a(()=>import("./mediatr.html-DTJS9Y-z.js"),__vite__mapDeps([450,1])),meta:{a:"azrng",d:1693008e6,l:"2023年8月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MediatR是一款基于中介者模式的思想而实现的.NET library，主要是为了解决进程内消息发送与消息处理过程之间的耦合问题。MediatR 提供了一种简洁的方式来协调应用程序内部的消息传递。通过将请求发送给中介者，可以确保每个处理程序只处理与其相关的请求，而不需要直接依赖其他处理程序。</p>
<p>MediatR 的效果可以类比为进程内的事件总线。虽然 MediatR 不是一个传统意义上的事件总线，但它在应用程序内部实现了中介者模式，可以将请求发送给对应的处理程序进行处理，从而达到解耦和组织代码的目的。</p>
<blockquote>
<p>中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>
</blockquote>`,r:{minutes:4.2,words:1260},t:"MediatR",y:"a"}}],["/middleware/shijianzongxian/",{loader:()=>a(()=>import("./index.html-CZOMPfA8.js"),__vite__mapDeps([451,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一种发布/订阅结构，通过发布订阅模式解决业务之间的解耦，订阅者之间相互不认识也互不干扰。</p>
<h3>事件总线类型</h3>
<p>跨进程事件总线：发布方与订阅方不在同一个进程中，订阅方是一个新的请求。组件：CAP、MasaFramework
进程内事件总线：发布方与订阅方在同一个进程中，订阅方出错会引起当前请求的出错。组件：Mediatr、MasaFramework</p>
<h3>常用的模型</h3>
<p>事件总线常用的模型：内存模型、传统的队列模型、发布-订阅模型。</p>
<ul>
<li>内存模型：进程内模型，事件总线在内部遍历消费者列表传递数据</li>
<li>队列模型：消息或者事件持久化到传统消息队列(Queue)即返回，以实时性降低换取吞吐能力提升</li>
<li>发布-订阅模型：事件源(EventSource)得到强化，出现如分布式、持久化、消费复制/分区等特性。</li>
</ul>`,r:{minutes:1.94,words:583},t:"说明",y:"a"}}],["/middleware/shijianzongxian/shijianzongxianneicunmoshi.html",{loader:()=>a(()=>import("./shijianzongxianneicunmoshi.html-yxfKgrIa.js"),__vite__mapDeps([452,1])),meta:{a:"azrng",d:16930944e5,l:"2023年8月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>时间总线，提供了实现观察者模式的骨架代码。
事件是由一个Publisher跟一个或多个的Subsriber组成，但是在实际的使用过程中，我们会发现，Subsriber必须知道Publisher是谁才可以注册事件，进而达到目的，那这其实就是一种耦合，为了解决这个问题，就出现了事件总线的模式，事件总线允许不同的模块之间进行彼此通信而又不需要相互依赖。</p>
<h2>做什么</h2>
<p>1、EventBus实现了对于事件的注册以及取消注册的管理
2、EventBus内部维护了一份事件源与事件处理程序的对应关系，并且通过这个对应关系在事件发布的时候可以找到对应的处理程序去执行
3、EventBus应该要支持默认就注册事件源与处理程序的关系，而不需要开发人员手动去注册（这里可以让开发人员去控制自动还是手动）</p>`,r:{minutes:4.96,words:1488},t:"事件总线内存模式",y:"a"}}],["/middleware/shijianzongxian/slimmessagebus.html",{loader:()=>a(()=>import("./slimmessagebus.html-BrYgJB5f.js"),__vite__mapDeps([453,1])),meta:{a:"azrng",d:16910208e5,l:"2023年8月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>SlimMessageBus 是 .NET 消息代理的客户端外观。它带有特定代理（RabbitMQ，Kafka，Azure EventHub，MQTT，Redis Pub/Sub）和内存中消息传递（进程内通信）的实现。SlimMessageBus 还提供消息队列上的请求-响应实现。
仓库地址：<a href="https://github.com/zarusz/SlimMessageBus/" target="_blank" rel="noopener noreferrer">https://github.com/zarusz/SlimMessageBus/</a></p>`,r:{minutes:.31,words:94},t:"SlimMessageBus",y:"a"}}],["/middleware/shijianzongxian/zack_eventbusrabbitmq.html",{loader:()=>a(()=>import("./zack_eventbusrabbitmq.html-D9I1dKN2.js"),__vite__mapDeps([454,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>该包是杨中科老师基于开源项目改造的一个基于rabbitmq的的事件总线封装包</p>
<p>仓库地址：<a href="https://github.com/yangzhongke/NETBookMaterials/tree/main/%E6%9C%80%E5%90%8E%E5%A4%A7%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/YouZack-VNext/Zack.EventBus" target="_blank" rel="noopener noreferrer">https://github.com/yangzhongke/NETBookMaterials/tree/main/%E6%9C%80%E5%90%8E%E5%A4%A7%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/YouZack-VNext/Zack.EventBus</a></p>`,r:{minutes:1.47,words:440},t:"Zack.EventBusRabbitMq",y:"a"}}],["/middleware/smallService/jiagoutu.html",{loader:()=>a(()=>import("./jiagoutu.html-BMPk7z4F.js"),__vite__mapDeps([455,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>架构图</h2>
<p><img src="/common/1624497455143-104691ec-981b-435c-b6db-3389013aed54.webp" alt="" loading="lazy">
这个图我感觉挺对，聚合服务层看情况使用。</p>
<h2>组件选型</h2>
<p>.NET Core+Swagger+Consul+Polly+Ocelot+IdentityServer4+Exceptionless+Apollo+SkyWalking</p>
<h3>网关</h3>
<p>API网关是微服务架构中的唯一入口，它提供一个单独且统一的API入口用于访问内部一个或多个API。它可以具有身份验证，监控，负载均衡，缓存，限流，请求分片与管理，静态响应处理等。</p>`,r:{minutes:6.51,words:1953},t:"架构图",y:"a"}}],["/middleware/smallService/polly.html",{loader:()=>a(()=>import("./polly.html-BQe2U6C3.js"),__vite__mapDeps([456,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Polly是一个.Net弹性和瞬态故障处理库，允许开发人员通过更简单并且线程安全的方式来执行如重试(Retry)、断路(Circuit Breaker)、超时(Timeout)、隔离(Bulkhead Isolation)、缓存(Cache)、降级回退(Fallback)、策略组合(PolicyWrap)等策略。
被动策略：异常处理、结果处理
主动策略：超时处理、断路器、降级回退、缓存</p>
<blockquote>
<p>支持的框架：<a href="https://github.com/App-vNext/Polly/wiki/Supported-targets" target="_blank" rel="noopener noreferrer">https://github.com/App-vNext/Polly/wiki/Supported-targets</a></p>
</blockquote>`,r:{minutes:5.71,words:1713},t:"Polly",y:"a"}}],["/middleware/smallService/",{loader:()=>a(()=>import("./index.html-CTGhVUHp.js"),__vite__mapDeps([457,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>微服务体系</h2>
<ul>
<li>域：一个域是一套注册中心、配置中心、监控中心、网关等组成的结构体系，一个域中可以有多个系统。</li>
<li>系统：一个系统相当于一个容器集群，这个容器系统内可以部署多个应用节点。</li>
<li>节点：实现微服务的轻耦合节点(应用)</li>
</ul>
<p>微软官网：<a href="https://dotnet.microsoft.com/zh-cn/learn/aspnet/microservices-architecture" target="_blank" rel="noopener noreferrer">https://dotnet.microsoft.com/zh-cn/learn/aspnet/microservices-architecture</a></p>`,r:{minutes:5.55,words:1666},t:"概述",y:"a"}}],["/middleware/smallService/rongduanjiangji.html",{loader:()=>a(()=>import("./rongduanjiangji.html-DXZbRj2A.js"),__vite__mapDeps([458,1])),meta:{a:"azrng",d:16874784e5,l:"2023年6月23日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>熔断器如同电力过载保护器。它可以实现快速失败,如果它在一段时间内侦测到许多类似的错误,会强迫其以后的多个调用快速失败,不再访问远程服务器,从而防止应用程序不断地尝试执行可能会失败的操作,使得应用程序继续执行而不用等待修正错误,或者浪费时间去等到长时间的超时产生。</p>
<p>降级的目的是当某个服务提供者发生故障的时候,向调用方返回一个错误响应或者替代响应。举例子:如视频播放器请求playsafe的替代方案;加载内容评论时如果出错,则以缓存中加载或者显示"评论暂时不可用" 。</p>
<h2>Resilience</h2>
<p>https://mp.weixin.qq.com/s/CaR-SC_hmlgAtjS97mzRvg | .NET 8 中的 Microsoft.Extensions.Http.Resilience库</p>`,r:{minutes:2.09,words:627},t:"熔断降级",y:"a"}}],["/middleware/smallService/xianliu.html",{loader:()=>a(()=>import("./xianliu.html-VFMwOluE.js"),__vite__mapDeps([459,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>对外部服务请求的限制，尽早拒绝过载的请求，能够保证尽量处理负载过程中的请求。</p>
<p>与熔断的区别：限流作用是防御上游流量超过处理能力的手段，熔断作用是容错下游的快速失败的手段。</p>
<h2>操作</h2>
<p>主流的底层就是基于令牌桶算法和漏斗算法。</p>
<ul>
<li>计数器算法</li>
<li>令牌桶算法</li>
<li>漏桶算法</li>
<li>滑动窗口算法</li>
</ul>
<h3>计数器算法</h3>
<h4>原理</h4>
<p>在一定时间间隔里，记录请求的次数，当请求次数超过该时间限制时候，就把计数器清零。当请求次数超过间隔的内的最大次数时候，拒绝访问。</p>`,r:{minutes:13.8,words:4140},t:"限流",y:"a"}}],["/middleware/tuxiangchuli/duochongmaskiasharp_qrcode.html",{loader:()=>a(()=>import("./duochongmaskiasharp_qrcode.html-RuyNQbjO.js"),__vite__mapDeps([460,1])),meta:{a:"azrng",d:1651968e6,l:"2022年5月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>二维码（QR Code），与传统的一维码，比如条形码，二维码具有存储的数据量更大；可以包含数字、字符，及中文文本等混合内容；有一定的容错性（在部分损坏以后还可以正常读取）；空间利用率高等优点。</p>
<h2>优点</h2>
<p>虽然已经有很多生成二维码的解决方案，但是它们大多依赖System.Drawing，而在Linux下需要考虑System.Drawing的GDI+兼容性问题（需要安装libgdiplus），但是该组件完全不依赖GDI和System.Drawing。</p>
<p>Linux平台生成二维码无依赖性包  SkiaSharp.NativeAssets.Linux.NoDependencies</p>`,r:{minutes:1.38,words:413},t:"多种码SkiaSharp.QrCode",y:"a"}}],["/middleware/tuxiangchuli/duochongmazxing_net.html",{loader:()=>a(()=>import("./duochongmazxing_net.html-Dm68P2Qp.js"),__vite__mapDeps([461,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>支持解码和生成图像中的条形码（如 QR 码、PDF 417、EAN、UPC、Aztec、Data Matrix、Codabar）的库。不支持跨平台。</p>
<h2>操作</h2>
<blockquote>
<p>本文示例环境：vs2022、.Net6</p>
</blockquote>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"System.Drawing.Common"</span> Version<span class="token operator">=</span><span class="token string">"6.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"ZXing.Net"</span> Version<span class="token operator">=</span><span class="token string">"0.16.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.8,words:540},t:"多种码ZXing.Net",y:"a"}}],["/middleware/tuxiangchuli/huoqushexiangtoupaizhao.html",{loader:()=>a(()=>import("./huoqushexiangtoupaizhao.html-CeLyQloo.js"),__vite__mapDeps([462,1])),meta:{a:"azrng",d:16916256e5,l:"2023年8月10日",c:["middleware"],g:["无"],o:!0,e:`<p>公共类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 一个控制摄像头的类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pick</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_USER <span class="token operator">=</span> <span class="token number">0x400</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WS_CHILD <span class="token operator">=</span> <span class="token number">0x40000000</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WS_VISIBLE <span class="token operator">=</span> <span class="token number">0x10000000</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_START <span class="token operator">=</span> WM_USER<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_STOP <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">68</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_DRIVER_CONNECT <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_DRIVER_DISCONNECT <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SAVEDIB <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_GRAB_FRAME <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SEQUENCE <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">62</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_FILE_SET_CAPTURE_FILEA <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SEQUENCE_NOFILE <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_OVERLAY <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">51</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_PREVIEW <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_CALLBACK_VIDEOSTREAM <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_CALLBACK_ERROR <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_CALLBACK_STATUSA <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_CALLBACK_FRAME <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_SCALE <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">53</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_CAP_SET_PREVIEWRATE <span class="token operator">=</span> WM_CAP_START <span class="token operator">+</span> <span class="token number">52</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">IntPtr</span> hWndC<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> bStat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">IntPtr</span> mControlPtr<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> mWidth<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> mHeight<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> mLeft<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> mTop<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 初始化摄像头</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>控件的句柄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>开始显示的左边距<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>开始显示的上边距<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要显示的宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要显示的长度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token function">Pick</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> handle<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> left<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> top<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> width<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> height<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            mControlPtr <span class="token operator">=</span> handle<span class="token punctuation">;</span>
            mWidth <span class="token operator">=</span> width<span class="token punctuation">;</span>
            mHeight <span class="token operator">=</span> height<span class="token punctuation">;</span>
            mLeft <span class="token operator">=</span> left<span class="token punctuation">;</span>
            mTop <span class="token operator">=</span> top<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"avicap32.dll"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">capCreateCaptureWindowA</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lpszWindowName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> dwStyle<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nWidth<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nHeight<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> hWndParent<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nID<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"avicap32.dll"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">capGetVideoFormat</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> psVideoFormat<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> wSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"User32.dll"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> wMsg<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> wParam<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 开始显示图像</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bStat<span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>

            bStat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lpszName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            hWndC <span class="token operator">=</span> <span class="token function">capCreateCaptureWindowA</span><span class="token punctuation">(</span>lpszName<span class="token punctuation">,</span> WS_CHILD <span class="token operator">|</span> WS_VISIBLE<span class="token punctuation">,</span> mLeft<span class="token punctuation">,</span> mTop<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">,</span> mControlPtr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>hWndC<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_CALLBACK_VIDEOSTREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_CALLBACK_ERROR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_CALLBACK_STATUSA<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_DRIVER_CONNECT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_SCALE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_PREVIEWRATE<span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_OVERLAY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SET_PREVIEW<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 停止显示</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_DRIVER_DISCONNECT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bStat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 抓图</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要保存bmp文件的路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GrabImage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IntPtr</span> hBmp <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">StringToHGlobalAnsi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SAVEDIB<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hBmp<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 录像</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要保存avi文件的路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Kinescope</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IntPtr</span> hBmp <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">StringToHGlobalAnsi</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_FILE_SET_CAPTURE_FILEA<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hBmp<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_SEQUENCE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 停止录像</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StopKinescope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">SendMessage</span><span class="token punctuation">(</span>hWndC<span class="token punctuation">,</span> WM_CAP_STOP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.21,words:662},t:"获取摄像头拍照",y:"a"}}],["/middleware/tuxiangchuli/imagesharp.html",{loader:()=>a(()=>import("./imagesharp.html-DeBo3QAa.js"),__vite__mapDeps([463,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ImageSharp 是一个全新的、功能齐全的、完全托管的、跨平台的 2D 图形库。旨在简化图像处理，ImageSharp 为您带来了一个非常强大但非常简单的 API。
github：<a href="https://github.com/SixLabors/ImageSharp" target="_blank" rel="noopener noreferrer">https://github.com/SixLabors/ImageSharp</a>
官网：<a href="https://docs.sixlabors.com/articles/imagesharp/" target="_blank" rel="noopener noreferrer">https://docs.sixlabors.com/articles/imagesharp/</a></p>`,r:{minutes:3.93,words:1180},t:"ImageSharp",y:"a"}}],["/middleware/tuxiangchuli/magick_net.html",{loader:()=>a(()=>import("./magick_net.html-DKkwJtqd.js"),__vite__mapDeps([464,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Magick.NET 是 ImageMagick 的 .NET 库，ImageMagick 是一个强大的创建、编辑、合成和转换位图图像工具。</p>
<h3>优点</h3>
<ul>
<li>作者维护积极，下载量高</li>
<li><strong>支持多平台</strong></li>
<li>商用免费</li>
</ul>
<h2>操作</h2>
<h3>Png转Ico</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MagickImage</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        image<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"test_64px.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        image<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        image<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"test_32px.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Conversion has been completed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.35,words:105},t:"Magick.NET",y:"a"}}],["/middleware/tuxiangchuli/qrcodegenerator.html",{loader:()=>a(()=>import("./qrcodegenerator.html-D1Be-4B2.js"),__vite__mapDeps([465,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>QrCodeGenerator 是开源的 .NET 二维码生成库，它支持从文本字符串和字节数组生成二维码图片。
这个库是基于 .NET Standard 2.0 构建的，所以它可以在大多数现代 .NET 平台（.NET Core、.NET Framework、Mono 等）上运行，包括 .NET 6, .NET 7。</p>
<p>仓库地址：<a href="https://github.com/manuelbl/QrCodeGenerator" target="_blank" rel="noopener noreferrer">https://github.com/manuelbl/QrCodeGenerator</a></p>`,r:{minutes:1.31,words:393},t:"QrCodeGenerator",y:"a"}}],["/middleware/tuxiangchuli/",{loader:()=>a(()=>import("./index.html-BqtiD-qJ.js"),__vite__mapDeps([466,1])),meta:{a:"azrng",d:16483392e5,l:"2022年3月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>计算机视觉</h2>
<p>https://mp.weixin.qq.com/s/flc5AEz3FEBN__1GwgEXYg | 零基础 从 yolo8 入门计算机视觉超简单：物体识别、图像分类、轨迹追踪、姿势识别</p>
`,r:{minutes:.21,words:64},t:"概述",y:"a"}}],["/middleware/tuxiangchuli/systemDrawingCommon.html",{loader:()=>a(()=>import("./systemDrawingCommon.html-KHbsTop3.js"),__vite__mapDeps([467,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>System.Drawing.Common被设计为对 Windows 技术的精简包装，曾经主要用于图像处理，例如 QR 码生成器和文本渲染。</p>
<h2>官方说明</h2>
<p><strong>跨平台方案不建议使用该包</strong>。</p>
<p>libgdiplus是原生端跨平台实现的主要提供者System.Drawing.Common。libgdiplus实际上是对System.Drawing.Common依赖的 Windows 部分的重新实现。该实现是libgdiplus一个重要的组件。大约 30,000 行 C 代码基本上未经测试，并且缺乏很多功能。libgdiplus还具有许多用于图像处理和文本渲染的外部依赖项，例如cairo、pango和其他本机库。这些依赖关系使维护和运输组件更具挑战性。自从包含 Mono 跨平台实现以来，我们已经将许多问题重定向到libgdiplus从未得到修复的问题。相比之下，我们采用的其他外部依赖项，例如icu或openssl，是高质量的库。libgdiplus使其功能集和质量与 .NET 堆栈的其余部分相提并论是不可行的。</p>`,r:{minutes:14.99,words:4497},t:"System.Drawing.Common",y:"a"}}],["/middleware/tuxiangchuli/tiaoxingmabarcodelib.html",{loader:()=>a(()=>import("./tiaoxingmabarcodelib.html-D0DNGqR1.js"),__vite__mapDeps([468,1])),meta:{a:"azrng",d:1651968e6,l:"2022年5月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>该库旨在为开发人员提供一个简单的类，以便在需要从数据字符串生成条形码图像时使用。
Github：<a href="https://github.com/barnhill/barcodelib" target="_blank" rel="noopener noreferrer">https://github.com/barnhill/barcodelib</a>
缺点：依赖System.Drawing.Common，不支持跨平台</p>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"BarcodeLib"</span> Version<span class="token operator">=</span><span class="token string">"2.4.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.63,words:188},t:"条形码BarcodeLib",y:"a"}}],["/middleware/testMange/changyongleiku.html",{loader:()=>a(()=>import("./changyongleiku.html-BVNSuHop.js"),__vite__mapDeps([469,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>模拟工具</h2>
<h3>NSubstitute</h3>
<p>NSubstitute 是 .NET 模拟库的友好替代品。它具有简单、简洁的语法，可帮助开发人员编写更清晰的测试。NSubstitute专为Arrange-Act-Assert（AAA）测试而设计，并考虑了测试驱动开发（TDD）。
官网文档：<a href="https://nsubstitute.github.io/" target="_blank" rel="noopener noreferrer">https://nsubstitute.github.io/</a></p>
<p>资料
从Moq迁移到NSubstitute：<a href="https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#number-of-invocations-timesexactlyn--receivedn" target="_blank" rel="noopener noreferrer">https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute</a>
moq迁移
<a href="https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments" target="_blank" rel="noopener noreferrer">https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments</a></p>`,r:{minutes:5.82,words:1745},t:"常用类库",y:"a"}}],["/middleware/testMange/jianshu.html",{loader:()=>a(()=>import("./jianshu.html-BF-i2gN3.js"),__vite__mapDeps([470,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>测试类型</h2>
<ul>
<li>单元测试
<ul>
<li>范围：是一种针对代码中最小功能单元进行的测试，通常是一个方法或者一个类的某个特定功能，目的是验证这个最小单元的功能是否正常</li>
<li>独立性：单元测试通常是以隔离的环境进行的，不依赖其他组件、服务或系统(包括与数据库、文件系统和网络资源的交互)，通过模拟或者替换依赖项来实现独立性</li>
<li>快速执行：因为测试的范围小且独立性强，因此它们通常执行速度非常快</li>
<li>侧重于验证代码内部逻辑的正确性和稳定性</li>
</ul>
</li>
<li>集成测试
<ul>
<li>范围：用于验证多个组件或者模块之间的交互和协作的测试，目的是确保不同的组件在整合的时候能够正确地工作，并满足预期的功能和业务需求。</li>
<li>上下文：集成测试需要更真实的环境中运行，涉及到真实的依赖项和外部系统(例如数据库、网络服务等)</li>
<li>操作复杂性：因为集成测试覆盖了更广泛的功能和交互，因此设置和执行可能相对复杂一些</li>
<li>侧重于组件之间的交互和协作正确性</li>
</ul>
</li>
<li>负载测试
<ul>
<li>确认系统是否可以处理指定的负载，比如使用应用程序的并发用户数和应用程序响应性处理交互的能力.</li>
</ul>
</li>
<li>渗漏测试
<ul>
<li>Dude Suite：https://www.dudesuite.cn/</li>
</ul>
</li>
</ul>`,r:{minutes:7.67,words:2302},t:"简述",y:"a"}}],["/middleware/testMange/monihttpxiangying.html",{loader:()=>a(()=>import("./monihttpxiangying.html-DvSyigT_.js"),__vite__mapDeps([471,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>在我们的业务代码中往往会有很多调用内部其他 team 或者是第三方的一些服务，在编写单元测试代码时，往往需要 Mock Http Response 来模拟更好可能的返回结果，我封装了一个简单的 Http Handler 来简化 Mock 过程，让基于 HttpClient Http Response 的模拟更为简单。</p>
<h2>示例</h2>
<p>首先来看一个简单的使用示例，也是一个测试用例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Theory</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HttpStatusTest</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span> httpStatusCode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MockHttpHandler</span><span class="token punctuation">(</span>req <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>httpStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">"http://localhost:32123/api/values"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>httpStatusCode<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.66,words:498},t:"模拟 Http 响应",y:"a"}}],["/middleware/testMange/qiyaoceshi.html",{loader:()=>a(()=>import("./qiyaoceshi.html-C9ghrzxy.js"),__vite__mapDeps([472,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>契约测试：对程序的输入和输出进行测试，测试的时候，将测试请求发送到内置的模拟服务器而不是真是的服务器。</p>
<h3>为什么需要契约测试？</h3>
<p>构建和维护微服务是一项艰巨的任务。 在众多服务必须彼此无缝交互的世界中，确保对一项服务的更改不会破坏另一项服务的功能是很让人头疼的。 传统的集成测试针对的是整个系统之间的交互，工作量太大、速度太慢，甚至无法直接识别问题。 与之相反的是，契约测试侧重于测试各个服务之间的契约。 合同测试根据消费者和提供商之间商定的契约分别对消费者和提供商进行测试。</p>
<h3>如何执行契约测试</h3>
<p>在契约测试中，消费者端程序员编写“消费者测试”，其中包含期望的输入和输出，并且期望将被保存到 Pact Json 文件中。 运行时，测试将请求发送到内置的模拟服务器而不是真实服务器，模拟服务器使用保存的 Pact Json 文件发送响应，该响应将用于验证消费者端测试用例。
此外，契约测试框架将读取保存的 Pact Json 文件，并向服务提供者（服务器）发送请求，并且将根据Pact Json 文件中的预期输出来验证响应。</p>`,r:{minutes:1.47,words:442},t:"契约测试",y:"a"}}],["/middleware/testMange/specflowhangweiceshi.html",{loader:()=>a(()=>import("./specflowhangweiceshi.html-BW4E0EJi.js"),__vite__mapDeps([473,1])),meta:{a:"azrng",d:1655856e6,l:"2022年6月22日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>SpecFlow是.Net平台下用于行为驱动开发的开源框架。它使用普通人能够理解的的软件需求描述作为软件测试的基础，并可以将它们转换为可执行代码。
详细介绍可参看官网：https://specflow.org/</p>
<h2>操作</h2>
<h3>安装扩展</h3>
<p>下载扩展包SpecFlow，安装并重启</p>
<h3>基本操作</h3>
<h4>创建项目</h4>
<p>新建项目，选择“SpecFlow project”模板，点击“创建”按钮，在弹出的窗口中选择.NET框架和测试框架。这里我们选择MSTest作为测试框架。</p>
<h4>添加Feature文件</h4>`,r:{minutes:1.66,words:498},t:"SpecFlow行为测试",y:"a"}}],["/middleware/xiaoxiduilie/changjianwenti.html",{loader:()=>a(()=>import("./changjianwenti.html-l6CZnD_4.js"),__vite__mapDeps([474,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<p>1、如何防止消息重复消费
在生产方根据业务特点生成消息ID，例如：给用户添加因为下单而赠送积分的消息ID，就可以根据userid_orderid积分数量来生成唯一的消息ID。
通过该消息ID，消费端就可以把已经消费的消息ID存储到本地或者存储到redis中，如果消费端是多个消费者在并行进行消费，在判断重复消息的时候你会需要锁来保证同样数据的顺序化。</p>
`,r:{minutes:.57,words:170},t:"常见问题",y:"a"}}],["/middleware/xiaoxiduilie/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-C5x_hYaE.js"),__vite__mapDeps([475,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h3>什么是消息队列？</h3>
<p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。
消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p>
<h3>消息队列的使用场景</h3>
<p>不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。
&nbsp;不需要立即获取结果，但是并发量又需要控制的时候，就是要使用消息队列的时候。</p>`,r:{minutes:4.05,words:1215},t:"概述",y:"a"}}],["/middleware/xiaoxiduilie/kafka.html",{loader:()=>a(()=>import("./kafka.html-DDkZOxT-.js"),__vite__mapDeps([476,1])),meta:{a:"azrng",d:16902432e5,l:"2023年7月25日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>是一个开源的、分布式、可扩展的、高性能的发布订阅模式的消息中间件。</p>
<h2>架构</h2>
<figure><img src="/common/1615282098271-a59d460c-3027-4fda-bf31-4bab916b0e04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>简单例子</h2>
<blockquote>
<p>安装组件：Install-Package&nbsp;kafka-net</p>
</blockquote>`,r:{minutes:.77,words:230},t:"Kafka",y:"a"}}],["/middleware/xiaoxiduilie/mqtt.html",{loader:()=>a(()=>import("./mqtt.html-CJX6aRvK.js"),__vite__mapDeps([477,1])),meta:{a:"azrng",d:16853184e5,l:"2023年5月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://zhuanlan.zhihu.com/p/421109780" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/421109780</a> | MQTT协议，终于有人讲清楚了 - 知乎</p>
`,r:{minutes:.15,words:44},t:"MQTT",y:"a"}}],["/middleware/xiaoxiduilie/pulsar.html",{loader:()=>a(()=>import("./pulsar.html-DwLQ4eDB.js"),__vite__mapDeps([478,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Pulsar是一款分布式发布/订阅消息平台。</p>
<h2>资料</h2>
<p>参考文章：<a href="https://mp.weixin.qq.com/s/ibkcQ-iD1FHRJTBVlM5czA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ibkcQ-iD1FHRJTBVlM5czA</a></p>
`,r:{minutes:.18,words:55},t:"Pulsar",y:"a"}}],["/middleware/xiaoxiduilie/xiaoxiduilieredis.html",{loader:()=>a(()=>import("./xiaoxiduilieredis.html-DMsJFDNR.js"),__vite__mapDeps([479,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>通过redis实现轻量级订阅方法</p>
<blockquote>
<p>参考文档：<a href="https://www.cnblogs.com/kellynic/p/9952386.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/kellynic/p/9952386.html</a></p>
</blockquote>
<h2>操作</h2>
<p>本文使用组件：CSRedisCore</p>
<h3>简单操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"发布订阅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                RedisHelper<span class="token punctuation">.</span><span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CSRedis<span class="token punctuation">.</span>CSRedisClient</span><span class="token punctuation">(</span><span class="token string">"192.168.7.253:6379,password=guoba@2000,defaultDatabase=13,prefix=my_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//程序1：使用代码实现订阅端</span>
                <span class="token class-name"><span class="token keyword">var</span></span> sub <span class="token operator">=</span> RedisHelper<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"chan1"</span><span class="token punctuation">,</span> msg <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//sub.Disponse(); //停止订阅</span>

                <span class="token comment">//程序2：使用代码实现发布端</span>
                RedisHelper<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">"chan1"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.41,words:123},t:"消息队列redis",y:"a"}}],["/middleware/yanchiduilie/hangfireyanchiduilie.html",{loader:()=>a(()=>import("./hangfireyanchiduilie.html-orUqAQS9.js"),__vite__mapDeps([480,1])),meta:{a:"azrng",d:165672e7,l:"2022年7月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> jobId <span class="token operator">=</span> BackgroundJob<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Delayed!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里改成分钟就好了</span>
</code></pre></div>`,r:{minutes:.16,words:49},t:"Hangfire延迟队列",y:"a"}}],["/middleware/yanchiduilie/jianjie.html",{loader:()=>a(()=>import("./jianjie.html-SgsJtf1c.js"),__vite__mapDeps([481,1])),meta:{a:"azrng",d:16758144e5,l:"2023年2月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>首先它要具有队列的特性，再给它附加一个延迟消费队列消息的功能，也就是说可以指定队列中的消息在哪个时间点被消费。</p>
<h2>使用场景</h2>
<p>延迟队列在项目中的应用还是比较多的，尤其像电商类平台：</p>
<ol>
<li>订单成功后，在30分钟内没有支付，自动取消订单</li>
<li>外卖平台发送订餐通知，下单成功后60s给用户推送短信。</li>
<li>如果订单一直处于某一个未完结状态时，及时处理关单，并退还库存</li>
<li>淘宝新建商户一个月内还没上传商品信息，将冻结商铺等</li>
</ol>
<h2>方案</h2>
<h3>Redis过期监听</h3>`,r:{minutes:2.02,words:607},t:"简介",y:"a"}}],["/middleware/yanchiduilie/jishiguanliqi.html",{loader:()=>a(()=>import("./jishiguanliqi.html-CZduo1X0.js"),__vite__mapDeps([482,1])),meta:{a:"azrng",d:1673136e6,l:"2023年1月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>我早上10点20分预定了一张火车票，我需要在15分钟内支付完成，否则订单会被取消。同一时间可能会有成百上千的人预定其他火车票，我需要在每个人的15分钟期限达时候执行检查，如果还未支付则自动取消订单。</p>
<h2>方案</h2>
<p>我们搞清楚了要解决的问题以后，我们来思考方案。有经验的程序员会立即思考出下面的方案：</p>
<ul>
<li>使用消息队列的延迟投送功能，每个订单添加成功后发送一个延迟15分钟的延迟消息。订单状态处理器15分钟后收到消息，检查支付状态，如果未支付则取消订单。</li>
<li>Redis也有类似的功能，原理大致相同。</li>
</ul>`,r:{minutes:7.1,words:2129},t:"基于C#的计时管理器",y:"a"}}],["/middleware/yanchiduilie/redishuancunguojishijian.html",{loader:()=>a(()=>import("./redishuancunguojishijian.html-Dy2WN1u0.js"),__vite__mapDeps([483,1])),meta:{a:"azrng",d:1657584e6,l:"2022年7月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>redis自2.8.0之后版本提供Keyspace Notifications功能，允许客户订阅Pub / Sub频道，以便以某种方式接收影响Redis数据集事件。</p>
<h2>操作</h2>
<h3>配置</h3>
<p>修改redis.config配置开启过期通知功能，然后重启redis，修改方法如下
打开注释：notify-keyspace-events  “Ex”。( 例如，“Kx”表示想监控某个Key的失效事件。 )
注释掉：notify-keyspace-events  ""</p>
<h3>实现</h3>
<p>事件通过 Redis 的订阅与发布功能（pub/sub）来进行分发,
故需要订阅 <strong>keyevent@0</strong>:expired 通道0表示db0 根据自己的dbindex选择合适的数字。
<a href="https://www.yuque.com/docs/share/a93bae1b-15fa-4419-90c3-aae33e573daa?view=doc_embed" target="_blank" rel="noopener noreferrer">redis发布订阅</a></p>`,r:{minutes:1.16,words:347},t:"redis缓存过期事件",y:"a"}}],["/middleware/yanchiduilie/zidingyiyanchiduilie.html",{loader:()=>a(()=>import("./zidingyiyanchiduilie.html-Bk9ZvcQT.js"),__vite__mapDeps([484,1])),meta:{a:"azrng",d:16758144e5,l:"2023年2月8日",c:["middleware"],g:["无"],o:!0,e:`<p>在gitee里面的TaskSchedules解决方案下有自定义延迟队列的实现方案</p>
`,r:{minutes:.18,words:55},t:"自定义延迟队列",y:"a"}}],["/middleware/yinpinshipin/speechsynthesizeryuyin.html",{loader:()=>a(()=>import("./speechsynthesizeryuyin.html-5TbC8Zky.js"),__vite__mapDeps([485,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>语音播报等</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"System.Speech"</span> Version<span class="token operator">=</span><span class="token string">"6.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.51,words:153},t:"SpeechSynthesizer语音",y:"a"}}],["/middleware/yinpinshipin/whisper_net.html",{loader:()=>a(()=>import("./whisper_net.html-KWgJYby0.js"),__vite__mapDeps([486,1])),meta:{a:"azrng",d:16933536e5,l:"2023年8月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><strong>Whisper.net</strong> 是一个先进的语音转文本模型，基于语音识别技术，可以将语音信号转换为文本，OpenAI Whisper 的 dotnet 绑定由 whisper.cpp 实现。</p>
<p>支持：语音识别、自动转录、多语言支持等。</p>
<p>仓库地址：https://github.com/sandrohanea/whisper.net?</p>
<h2>模型</h2>
<p>ggml模型类别枚举参考：</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public enum GgmlType
{
    Tiny,
    TinyEn,
    Base,
    BaseEn,
    Small,
    SmallEn,
    Medium,
    MediumEn,
    LargeV1,
    Large
}
</code></pre></div>`,r:{minutes:.98,words:294},t:"Whisper.net",y:"a"}}],["/middleware/yinpinshipin/yuyinliaotian.html",{loader:()=>a(()=>import("./yuyinliaotian.html-Df_pRFqB.js"),__vite__mapDeps([487,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["middleware"],g:["无"],o:!0,e:`<p><a href="https://mp.weixin.qq.com/s/YEX9HEGFVmEaaYTVn4uBLA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/YEX9HEGFVmEaaYTVn4uBLA</a> | C#用6步实现语音聊天</p>
`,r:{minutes:.14,words:42},t:"语音聊天",y:"a"}}],["/middleware/yufajiexi/irony.html",{loader:()=>a(()=>import("./irony.html-CTodIRIT.js"),__vite__mapDeps([488,1])),meta:{a:"azrng",d:16628544e5,l:"2022年9月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET下的语法解析框架，Irony框架最开始的时候是由Roman Ivantsov发布在codeplex上的一个开源项目，它使用MIT协议开源。</p>
<p>仓库地址：<a href="https://github.com/daxnet/irony" target="_blank" rel="noopener noreferrer">https://github.com/daxnet/irony</a></p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Irony<span class="token punctuation">.</span>NetCore <span class="token operator">-</span>Version <span class="token number">1.1</span><span class="token number">.11</span>
Install<span class="token operator">-</span>Package Irony<span class="token punctuation">.</span>Interpreter<span class="token punctuation">.</span>NetCore <span class="token operator">-</span>Version <span class="token number">1.1</span><span class="token number">.11</span>
</code></pre></div>`,r:{minutes:.31,words:94},t:"irony",y:"a"}}],["/middleware/yufajiexi/sqljiexi.html",{loader:()=>a(()=>import("./sqljiexi.html-B_DwkSum.js"),__vite__mapDeps([489,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>组件</h2>
<h3>antlr4</h3>
<p>ANTLR（ANother Language Recognition Tool ）是一个功能强大的解析器生成器，用于读取、处理、执行或翻译结构化文本或二进制文件。</p>
<p>仓库地址：https://github.com/antlr/antlr4</p>
<p>https://mp.weixin.qq.com/s/BcuiM3ifm-PCOBZUja7vJg | Antlr一个领域语言利器——入门篇</p>
<p>https://mp.weixin.qq.com/s/Z6lzJm6Qcty_MSQsFlD9Pg | 基于Antlr4的Sql解析</p>`,r:{minutes:1.74,words:523},t:"SQL解析",y:"a"}}],["/middleware/zidonghuacaozuo/cliwrap.html",{loader:()=>a(()=>import("./cliwrap.html-aHzhMeea.js"),__vite__mapDeps([490,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>CliWrap是一个用于与外部命令行界面交互的库。它为启动进程、重定向输入和输出流、等待完成、处理取消等提供了一个方便的模型。
仓库地址：<a href="https://github.com/Tyrrrz/CliWrap" target="_blank" rel="noopener noreferrer">https://github.com/Tyrrrz/CliWrap</a></p>
`,r:{minutes:.29,words:87},t:"CliWrap",y:"a"}}],["/middleware/zidonghuacaozuo/flaUIAutomation.html",{loader:()=>a(()=>import("./flaUIAutomation.html-3-J7Lo_Q.js"),__vite__mapDeps([491,1])),meta:{a:"azrng",d:1691712e6,l:"2023年8月11日",c:["dotNet"],g:["自动化"],o:!0,e:`<h2>概述</h2>
<p>FlaUI是一个.NET库，有助于Windows应用程序（Win32，WinForms，WPF，Store Apps等）的自动化UI测试。它基于 Microsoft 的本机 UI 自动化库，因此有点像它们的包装器。
FlaUI 包装了 UI 自动化库中的几乎所有内容，但也提供了本机对象，以防有人有 FlaUI 尚未涵盖的特殊需求。一些想法是从UIAComWrapper项目或TestStack.White复制的，但从头开始重写以获得干净的代码库。</p>
<p>仓库地址：https://github.com/FlaUI/FlaUI</p>
<h2>操作</h2>
<p>安装nuget包</p>`,r:{minutes:2.79,words:837},t:"FlaUI自动化",y:"a"}}],["/middleware/zidonghuacaozuo/netautogui.html",{loader:()=>a(()=>import("./netautogui.html-DxvLjzpg.js"),__vite__mapDeps([492,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个键盘鼠标自动化的组件</p>
<h2>操作</h2>
<p>引用nuget包(直接安装最新版本)</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"NetAutoGUI.Windows"</span> Version<span class="token operator">=</span><span class="token string">"1.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.99,words:296},t:"NetAutoGUI",y:"a"}}],["/middleware/zidonghuacaozuo/",{loader:()=>a(()=>import("./index.html-Be1L9poZ.js"),__vite__mapDeps([493,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>smartbear可以知道程序里控件类型，名称，甚至有哪些属性，方法
System.Windows.Automation;
ui automation
smartbear，可以知道程序里控件类型，名称，甚至有哪些属性，方法
UIBot</p>
<p><a href="https://www.cnblogs.com/1996-Chinese-Chen/p/17663064.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/1996-Chinese-Chen/p/17663064.html</a> | 【微信自动化】使用c#实现微信自动化 - 四处观察 - 博客园</p>`,r:{minutes:.68,words:203},t:"说明",y:"a"}}],["/middleware/zidonghuacaozuo/uiautomation.html",{loader:()=>a(()=>import("./uiautomation.html-C7bR2e1M.js"),__vite__mapDeps([494,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Microsoft UI Automation是适用于Microsoft Windows的辅助功能框架。它满足了辅助技术产品和自动化测试框架的需求，通过提供对用户界面（UI）信息的编程访问来实现。此外，UI Automation还使控件和应用程序开发人员能够使其产品具有辅助功能。</p>
<p>使用编程访问可以通过代码模仿由传统鼠标和键盘输入展开的任何交互和体验，UIAutomation 通过五个组件实现编程访问：</p>
<ul>
<li>UI Automation tree（UI自动化树）</li>
<li>UI Automation elements（UI自动化元素）</li>
<li>UI Automation properties(UI自动化属性)</li>
<li>Control patterns（控件模式）</li>
<li>UI Automation events（UI自动化事件）</li>
</ul>`,r:{minutes:.78,words:234},t:"UIAutomation",y:"a"}}],["/soft/devTools/codeConfig.html",{loader:()=>a(()=>import("./codeConfig.html-CkYiKKbV.js"),__vite__mapDeps([495,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["无"],e:`<h2>编程语言生命周期</h2>
<p>https://endoflife.date/</p>
<h2>开源镜像</h2>
<h3>华为云开源镜像</h3>
<p>地址：https://mirrors.huaweicloud.com/home</p>
<p>不登录下载地址示例：https://mirrors.huaweicloud.com/elasticsearch/7.6.2/</p>
<h2>主题</h2>
<h3>Dracula</h3>
<p>德古拉主题</p>
<p>主题官网：<a href="https://draculatheme.com/" target="_blank" rel="noopener noreferrer">https://draculatheme.com/</a></p>`,r:{minutes:.26,words:77},t:"开发小配置",O:4,y:"a"}}],["/soft/devTools/codeStatistics.html",{loader:()=>a(()=>import("./codeStatistics.html-ZyN0zm7o.js"),__vite__mapDeps([496,1])),meta:{a:"azrng",d:17084736e5,l:"2024年2月21日",c:["soft"],g:["statistics"],e:`<h2>前言</h2>
<p>什么时候会遇到需要统计代码行数？根据代码行数来算绩效吗？虽然我们确实有过这个规定，老东家有过这种奇怪规定让每个开发统计自己的代码行数，然后统计汇总上报给领导，但是这里介绍该工具的目的是用于软著等用途。</p>
<h2>VS Code Counter</h2>
<p>这是一个vscode的扩展，对多种编程语言中源代码的空行、注释行和物理行进行计数。
使用方法可以参考：<a href="https://marketplace.visualstudio.com/items?itemName=uctakeoff.vscode-counter" target="_blank" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=uctakeoff.vscode-counter</a></p>`,r:{minutes:.78,words:233},t:"代码行数统计",y:"a"}}],["/soft/devTools/communicationTest.html",{loader:()=>a(()=>import("./communicationTest.html-zd9w8Eja.js"),__vite__mapDeps([497,1])),meta:{a:"azrng",d:17123616e5,l:"2024年4月6日",c:["soft"],g:["通讯","测试"],e:`<h2>概述</h2>
<p><strong>通讯测试是用于评估网络性能、稳定性和安全性的过程</strong>。它的主要作用包括：</p>
<ul>
<li>连通性测试</li>
<li>故障排查</li>
<li>安全评估</li>
<li>取证（没错就是取证）</li>
</ul>
<h2>工具</h2>
<h3>ping</h3>
<ul>
<li>作为最常用的命令，<strong>用来测量两台设备是否可达和往返时间</strong>（RTT）</li>
<li>它使用<strong>ICMP</strong>协议（<strong>OSI模型的第3层</strong>即网络层）</li>
<li>windows上的<code>ping</code>默认通讯4次，你可以在结尾增加<code>-t</code>来持续<code>ping</code></li>
</ul>`,r:{minutes:3.03,words:909},t:"通讯测试相关工具",y:"a"}}],["/soft/devTools/linqpad.html",{loader:()=>a(()=>import("./linqpad.html-1ezVV8cY.js"),__vite__mapDeps([498,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["无"],e:`<h2>说明</h2>
<p>一个C＃/ VB / F＃暂存器，可立即执行任何表达式，语句块或程序，具有丰富的输出格式和丰富的功能。 还可让您以交互方式查询LINQ中的数据库。</p>
<ul>
<li>简约的代码编辑界面</li>
<li>不到<code>20MB</code>的体积——超轻量级</li>
<li>强大的格式化输出，不管你是输出文字、表格、还是动态数据</li>
<li>支持多种数据库等</li>
</ul>
<blockquote>
<p>官网：<a href="https://www.linqpad.net" target="_blank" rel="noopener noreferrer">https://www.linqpad.net</a></p>
</blockquote>`,r:{minutes:.59,words:177},t:"LINQPad",O:1,y:"a"}}],["/soft/devTools/neiwangchuantou.html",{loader:()=>a(()=>import("./neiwangchuantou.html-Byo8GM5J.js"),__vite__mapDeps([499,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["无"],e:`<h2>概述</h2>
<p>别人可以通过域名访问到你本机的服务。</p>
<p>知乎推荐：<a href="https://zhuanlan.zhihu.com/p/404714235" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/404714235</a></p>
<h2>p2p-tunnel</h2>
<p>仓库地址：<a href="https://github.com/snltty/p2p-tunnel" target="_blank" rel="noopener noreferrer">https://github.com/snltty/p2p-tunnel</a></p>`,r:{minutes:1.41,words:422},t:"内网穿透",O:3,y:"a"}}],["/soft/devTools/nssm.html",{loader:()=>a(()=>import("./nssm.html-Boa-P9I5.js"),__vite__mapDeps([500,1])),meta:{a:"加菲的博客",d:16708032e5,l:"2022年12月12日",c:["soft"],o:!1,e:`<h2>1.安装</h2>
<p>这里使用的<code>chocolatey</code>安装</p>
<div class="language-plain" data-ext="plain" data-title="plain"><pre class="language-plain"><code>choco install nssm
</code></pre></div><figure><img src="/common/blog202212122213221.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:1.39,words:418},t:"守护进程NSSM",y:"a"}}],["/soft/devTools/openSourceProtocol.html",{loader:()=>a(()=>import("./openSourceProtocol.html-BoGzY3vG.js"),__vite__mapDeps([501,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["开源协议"],o:!1,e:`<blockquote>
<p>文章来源自微信公众号【全球技术精选】</p>
</blockquote>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>开源≠免费</p>
</div>
<hr>
<h2>不根据协议使用开源软件可能面临的风险</h2>
<p>2003 年 Linksys 公司（同年 3 月被思科收购）推出 WRT-54G，这款路由器采用了基于 Linux 的固件，而 Linux 使用的是 GPL 开源协议，所以思科迫于压力，开放了 WRT-54G 的源码，这使得爱好者们知道了路由器固件的实现方式，进而促成了各种相关开源项目的繁荣，其中就包括 OpenWRT</p>`,r:{minutes:4.71,words:1412},t:"常见开源协议",y:"a"}}],["/soft/devTools/vscode.html",{loader:()=>a(()=>import("./vscode.html-B881qX2H.js"),__vite__mapDeps([502,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["无"],e:`<h2>插件推荐</h2>
<h3>汉化</h3>
<p>Chinese (Simplified) Language Pack for Visual Studio Code  设置中文</p>
<h3>主题</h3>
<ul>
<li>One Dark Pro</li>
</ul>
<h3>样式</h3>
<h4>vscode-icon</h4>
<p>让vscode资源目录加上图标</p>
<h4>Bracket Pair Colorizer</h4>
<p>让括号有独立的颜色</p>
<h3>管理</h3>
<h4>Project Manager</h4>
<p>多项目切换工具</p>
<h3>Web</h3>`,r:{minutes:1.64,words:492},t:"VsCode",O:2,y:"a"}}],["/soft/Linux/baocunfanghuoqiangguize.html",{loader:()=>a(()=>import("./baocunfanghuoqiangguize.html-BPNoUH9E.js"),__vite__mapDeps([503,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<p>对防火墙规则进行保存时候提示错误
保存命令：service iptables save
报错：The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.
<strong>解决方法：</strong>
systemctl stop firewalld 关闭防火墙
yum install iptables-services 安装或更新服务
再使用systemctl enable iptables 启动iptables
最后 systemctl start iptables 打开iptables
再执行service iptables save
3.重启iptables服务：
service iptables restart
执行完毕之后/etc/syscofig/iptables文件就有了</p>`,r:{minutes:.87,words:261},t:"保存防火墙规则",O:3,y:"a"}}],["/soft/Linux/linux.html",{loader:()=>a(()=>import("./linux.html-Dw_D0OAm.js"),__vite__mapDeps([504,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>教程</h2>
<p>鸟哥的linux私房菜：<a href="https://linux.vbird.org/linux_basic/centos7/" target="_blank" rel="noopener noreferrer">https://linux.vbird.org/linux_basic/centos7/</a></p>
<p>中文文档：<a href="https://www.kancloud.cn/thinkphp/linux-command-line/39431" target="_blank" rel="noopener noreferrer">https://www.kancloud.cn/thinkphp/linux-command-line/39431</a></p>`,r:{minutes:.27,words:80},t:"说明",O:1,y:"a"}}],["/soft/Linux/selinux.html",{loader:()=>a(()=>import("./selinux.html-u-X3RnjN.js"),__vite__mapDeps([505,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>介绍</h2>
<p>SELinux一共有三种状态。</p>
<ul>
<li>Enforcing：默认状态，强制启用，状态值是1</li>
<li>Permissive：宽容，大部分规则都放行，状态值是0</li>
<li>Disabled：禁用，不设置任何规则</li>
</ul>
<h2>操作</h2>
<h3>关闭</h3>
<p>先查询当前的状态</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>getenforce
</code></pre></div>`,r:{minutes:1.07,words:321},t:"SELinux",O:2,y:"a"}}],["/soft/Linux/shCommand.html",{loader:()=>a(()=>import("./shCommand.html-C_JWYgZB.js"),__vite__mapDeps([506,1])),meta:{a:"azrng",d:16901568e5,l:"2023年7月24日",c:["Windows"],g:["命令","shell"],e:`<h2>基础语法</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token string">"Output content"</span>
</code></pre></div><h2>输入和输出</h2>
<p>输出信息</p>`,r:{minutes:1.17,words:350},t:"Shell命令",y:"a"}}],["/soft/Linux/tools.html",{loader:()=>a(()=>import("./tools.html-CmQswxIK.js"),__vite__mapDeps([507,1])),meta:{a:"azrng",d:17105472e5,l:"2024年3月16日",c:["linux"],g:["tools"],e:`<h2>运维管理面板</h2>
<h3>1Panel</h3>
<p>1Panel 是新一代的 Linux 服务器运维管理面板，用户可以通过 Web 图形界面轻松管理 Linux 服务器，实现主机监控、文件管理、数据库管理、容器管理等功能</p>
<p>官网：https://1panel.cn/</p>
<p>仓库地址：https://github.com/1Panel-dev/1Panel</p>
<p>快速一键安装</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://resource.fit2cloud.com/1panel/package/quick_start.sh <span class="token parameter variable">-o</span> quick_start.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> quick_start.sh
</code></pre></div>`,r:{minutes:.36,words:109},t:"工具",y:"a"}}],["/soft/serverConfigs/ddns.html",{loader:()=>a(()=>import("./ddns.html-B7QF8YN0.js"),__vite__mapDeps([508,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["服务器或证书"],g:["DDNS"],e:`<h2>概述</h2>
<p>我想大家应该都清楚域名解析是什么，就是将不好记的IPv4地址变为好记的域名嘛。DDNS中的D呢，是Dynamic，顾名思义就是将我们老变的宽带IP变成固定的域名访问。</p>
<h2>SangServerTool</h2>
<p>域名解析和SSL证书续签的工具</p>
<p>仓库地址：https://github.com/marin1993/SangServerTool
参考文档：<a href="https://mp.weixin.qq.com/s/e6gt1QdJHa0ihm02quY2-g" target="_blank" rel="noopener noreferrer">用.NET做DDNS动态域名解析和SSL证书申请</a></p>`,r:{minutes:.45,words:136},t:"DDNS",O:1,y:"a"}}],["/soft/serverConfigs/dns.html",{loader:()=>a(()=>import("./dns.html-DGHhJ7Cd.js"),__vite__mapDeps([509,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["服务器或证书"],g:["无"],e:`<h2>概述</h2>
<p>DNS是域名系统（Domain Name System）的缩写。它是一种用于将域名转换为对应IP地址的分布式命名系统。在互联网上，每个设备都需要一个唯一的IP地址以进行通信。然而，人们更容易记住和使用易于理解的域名（如https://www.cnblogs.com/Can-daydayup），而不是记住一长串数字（如192.0.2.1）。这就是DNS的作用：将域名映射到相应的IP地址。DNS工作原理如下：</p>
<ol>
<li>当你在浏览器中输入一个域名时，例如https://www.cnblogs.com/Can-daydayup，浏览器会发出一个DNS查询请求。</li>
<li>操作系统的网络设置中配置了一个默认的DNS服务器地址，该请求会被发送到该DNS服务器。</li>
<li>DNS服务器接收到查询请求后，会查找存储在其数据库中的域名和IP地址的映射关系。</li>
<li>如果DNS服务器没有相应的映射关系，它会向其他更高级别的DNS服务器发送查询请求，直到找到能提供所需映射关系的DNS服务器。</li>
<li>当DNS服务器找到域名和IP地址的映射关系后，它会将该信息返回给发起查询的设备。</li>
<li>浏览器接收到IP地址后，会使用该地址与目标服务器建立连接，开始进行网络通信。DNS的重要性在于它对于互联网的正常运行至关重要。它不仅用于解析域名到IP地址，还用于反向解析、缓存管理、负载均衡和安全功能等方面。无论是浏览网页、发送电子邮件还是进行其他网络活动，DNS都在后台默默地发挥着重要的作用。</li>
</ol>`,r:{minutes:2.89,words:866},t:"DNS",O:2,y:"a"}}],["/soft/serverConfigs/fangwenneiwangfuwu.html",{loader:()=>a(()=>import("./fangwenneiwangfuwu.html-BWu1kgwL.js"),__vite__mapDeps([510,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["服务器或证书"],g:["无"],e:`<h2>使用IPV6访问内网数据</h2>
<p>监测自己是否存在IPV6环境：<a href="http://test-ipv6.com/" target="_blank" rel="noopener noreferrer">http://test-ipv6.com/</a> 或者使用 <a href="https://ipw.cn/" target="_blank" rel="noopener noreferrer">https://ipw.cn/</a></p>
<blockquote>
<p>如果想从外部访问内网的IPV6地址，那么还需要关闭路由器的防火墙。</p>
</blockquote>`,r:{minutes:1.05,words:316},t:"访问内网服务",O:3,y:"a"}}],["/soft/serverConfigs/",{loader:()=>a(()=>import("./index.html-Di4UtrpD.js"),__vite__mapDeps([511,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["服务器或证书"],g:["无"],e:`<h2>概述</h2>
<p>服务器的一些知识</p>
<h2>服务器创建虚拟机工具</h2>
<ul>
<li>multipass</li>
<li>vmware公司的esxi：https://www.vmware.com/cn/products/esxi-and-esx.html</li>
<li>proxmox：https://www.proxmox.com/en/</li>
<li>terraform：https://www.terraform.io/</li>
</ul>
<p>https://mp.weixin.qq.com/s/VuM3Om3QLPc0MMDgQwiozA | 自动化编排工具Terraform介绍</p>`,r:{minutes:2.88,words:865},t:"说明",y:"a"}}],["/soft/serverConfigs/zhengshu.html",{loader:()=>a(()=>import("./zhengshu.html-BI8jkg3I.js"),__vite__mapDeps([512,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["服务器或证书"],g:["无"],e:`<h2>Let’s Encrypt</h2>
<p>Let’s Encrypt 是一个证书颁发机构（CA）。要从 Let’s Encrypt 获取网站域名的证书，只需要证明对域名的实际控制权即可。有两种验证方式，通过域名解析添加 TXT 记录，或是在网站添加指定的验证文件（实现访问指定地址返回要求的字符串即可，不过不支持有通配符的申请）。</p>
<p>证书自动申请使用Certes(https://github.com/fszlin/certes)库来实现 Let’s Encrypt 证书的自动续签。</p>
<h2>OpenSSL</h2>
<h3>操作</h3>
<h4>申请</h4>
<p><a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener noreferrer">下载openssl安装包</a>并安装,打开命令行,输入openssl,如果提示Openssl不是内部或外部命令,需要设置一下环境变量,把Openssl的安装目录加入到path环境变量.
另外新建一个环境变量,如以下所示,名称为：OPENSSL_CONF,指向你安装目录的openssl.cfg文件,现在输入openssl应该没有问题了.
新建一个文件夹用于放置密钥,在该目录打开命令行.
1.申请一个私钥,在命令行中输入:</p>`,r:{minutes:3.74,words:1123},t:"证书",O:4,y:"a"}}],["/soft/windows/batmingling.html",{loader:()=>a(()=>import("./batmingling.html-DjS244X1.js"),__vite__mapDeps([513,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Windows"],g:["无"],e:`<h2>基础语法</h2>
<p>on和off都是echo的关键字,echo on 是打开回显，echo off是关闭回显。系统默认是echo on。echo off只能关闭echo off后面的代码的回显，但不能关闭自身的回显，所以需要加上@关闭自身的回显。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@echo off

<span class="token builtin class-name">echo</span> 输出内容

pause	 
</code></pre></div>`,r:{minutes:1.31,words:393},t:"Bat命令",O:1,y:"a"}}],["/soft/windows/cipanqingli.html",{loader:()=>a(()=>import("./cipanqingli.html-CfuqOQPv.js"),__vite__mapDeps([514,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Windows"],g:["无"],e:`<h2>如何清理</h2>
<p>①键盘按下Win+R，唤起运行窗口；<br>②输入%temp%按回车；<br>③Ctrl+A全选后删除即可。</p>
<h2>C盘可以删除的文件</h2>
<p>①C:\\Documents and settings\\用户名\\Local settings\\temp\\下的所有文件（用户临时文件）；<br>②C:\\Documents and setting\\用户名\\cookies\\所有文件（保留index)；<br>③C:\\Documents and settings\\用户名\\Local settings\\temporary internet Files\\下所有文件（页面文件）；<br>④C:\\Documents and settings\\用户名\\Local settings\\Histoy\\下的所有文件（历史记录）；<br>⑤C:\\Documents and settings\\用户名\\Recent\\下的所有文件（最近浏览文件的快捷方式）；<br>⑥C:\\WINDOWS\\Temp\\下的所有文件（临时文件）；<br>⑦C:\\WINDOWS\\ServicePackFiles\\ 下的所有文件（升级后的备份文件）；<br>⑧C:\\WINDOWS\\SoftWareDistribution\\download\\ 下的文件；<br>⑨C:\\WINDOWS\\System32\\dllcache\\下dll文档，这是备用的dll文档，只要你已拷贝了安装文件也可以删；<br>⑩C:\\WINDOWS\\driver cache\\i386\\下的（硬件的备份文件）。</p>`,r:{minutes:2.86,words:857},t:"磁盘清理",O:5,y:"a"}}],["/soft/windows/docsWeb.html",{loader:()=>a(()=>import("./docsWeb.html-AwBE6mUY.js"),__vite__mapDeps([515,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["小软件介绍"],g:["无"],e:`<h2>VuePress</h2>
<p>Vue驱动的静态网站生成器</p>
<p>官网：<a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">https://v2.vuepress.vuejs.org/zh/</a></p>
<p>示例网站：<a href="https://www.apifox.cn/help/app/getting-started/" target="_blank" rel="noopener noreferrer">https://www.apifox.cn/help/app/getting-started/</a></p>`,r:{minutes:5.86,words:1757},t:"文档网站",O:5,y:"a"}}],["/soft/windows/hyperv.html",{loader:()=>a(()=>import("./hyperv.html-B_AMPp9S.js"),__vite__mapDeps([516,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Hyper-v"],g:["无"],e:`<h2>概述</h2>
<p>Hyper-V是微软的一款虚拟化产品，是微软第一个采用类似Vmware ESXi和Citrix Xen的基于hypervisor的技术。</p>
<p>官网文档：<a href="https://learn.microsoft.com/zh-cn/windows-server/virtualization/hyper-v/hyper-v-on-windows-server" target="_blank" rel="noopener noreferrer">此处</a></p>
<h2>配置网络交换机</h2>
<p>提前创建交换机是 因为到会的安装过程中会有一步选择交换机，这里提前创建好，到会安装时直接选择，在安装完成后虚拟机直接就可以连接网络。
<img src="/common/1637650216953-ea7f0e51-9adf-420c-b464-d7607d0bfd94.png" alt="image.png" loading="lazy">
点击：新建网络交换机=&gt;外部网络=&gt;创建虚拟交换机
<img src="/common/1637650318128-e8b445ad-3b14-4252-b365-5a2c04819526.png" alt="image.png" loading="lazy">
创建对应的网卡，点击确定完成创建交换机
<img src="/common/1637650583189-eee81bac-64a2-47e7-9a7f-ee9156280361.png" alt="image.png" loading="lazy">
具体如何选择合适的网卡：
Realtek PCIe GBE Family Controller：有线网卡驱动
Qualcomm Atheros QCA61：无线网卡驱动
通过自己本机的网络连接地方选择可以正常上网的网卡。</p>`,r:{minutes:1.24,words:373},t:"Hyper-V",O:1,y:"a"}}],["/soft/windows/mdTools.html",{loader:()=>a(()=>import("./mdTools.html-DOllmYVl.js"),__vite__mapDeps([517,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["小软件介绍"],g:["无"],e:`<h2>Typora</h2>
<p>Typora 一款Markdown 编辑器和阅读器。</p>
<h3>Lapis主题</h3>
<p>仓库地址：<a href="https://github.com/YiNNx/typora-theme-lapis/" target="_blank" rel="noopener noreferrer">https://github.com/YiNNx/typora-theme-lapis/</a></p>
<ol>
<li>Clone 此仓库，或从 <a href="https://github.com/YiNNx/typora-theme-lapis/releases/latest" target="_blank" rel="noopener noreferrer">Latest Release</a> 中下载typora-theme-lapis.zip并解压。</li>
<li>在 Typora 菜单中选择 偏好设置 (Preferences) -&gt; 找到外观部分，点击“打开主题文件夹”按钮。</li>
<li>将 lapis.css &amp; lapis-dark.css 文件和 lapis 文件夹复制到 Typora 的主题文件夹中。</li>
<li>重启 Typora，然后从主题列表中选择 Lapis / Lapis Dark。</li>
</ol>`,r:{minutes:2.64,words:791},t:"MD工具",O:1,y:"a"}}],["/soft/windows/picGoImageStorage.html",{loader:()=>a(()=>import("./picGoImageStorage.html-iZce0w0W.js"),__vite__mapDeps([518,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["soft"],g:["无"],o:!0,e:`<p>overover</p>
<h2>介绍</h2>
<p>图床工具，就是自动把本地图片转成连接的一款工具，网络上有很多图床工具，PicGo就是一款比较优秀的图床工具，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床</p>
<blockquote>
<p>GitHub：<a href="https://github.com/PicGo/" target="_blank" rel="noopener noreferrer">https://github.com/PicGo/</a>
下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener noreferrer">https://github.com/Molunerfinn/PicGo/releases</a></p>
</blockquote>`,r:{minutes:3.33,words:998},t:"PicGo图床",y:"a"}}],["/soft/windows/sortRecommend.html",{loader:()=>a(()=>import("./sortRecommend.html-BuBs4Nl_.js"),__vite__mapDeps([519,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Windows"],g:["无"],e:`<h2>软件推荐</h2>
<h3>Terminal</h3>
<p>一个命令行工具</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 连接linux</span>
<span class="token function">ssh</span> IP <span class="token parameter variable">-l</span> root
</code></pre></div><p>美化方案：https://zhuanlan.zhihu.com/p/354603010</p>`,r:{minutes:1.11,words:333},t:"软件推荐",O:4,y:"a"}}],["/soft/windows/windows.html",{loader:()=>a(()=>import("./windows.html-tlr8o5K7.js"),__vite__mapDeps([520,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Windows"],g:["无"],e:`<h2>系统下载</h2>
<p>win10：https://www.microsoft.com/zh-cn/software-download/windows10</p>
<p>win11：https://www.microsoft.com/zh-cn/software-download/windows11</p>
<h2>系统修复</h2>
<ul>
<li>按键盘的Windows键（左下角四个方框的按键）+Q键，搜索cmd，选择以管理员身份运行→输入：DISM.exe /Online /Cleanup-image /Scanhealth  敲击回车；</li>
<li>待提示完成后，继续输入：DISM.exe /Online /Cleanup-image /Restorehealth  敲击回车；</li>
<li>待提示完成后，继续输入：sfc /scannow  敲击回车；提示文件修复成功后，重启电脑</li>
</ul>`,r:{minutes:.79,words:236},t:"说明",O:2,y:"a"}}],["/soft/windows/windowsSeverInstall.html",{loader:()=>a(()=>import("./windowsSeverInstall.html-CAdUaBm4.js"),__vite__mapDeps([521,1])),meta:{a:"azrng",d:17004384e5,l:"2023年11月20日",c:["cloud"],g:["docker"],o:!0,e:`<h2>概述</h2>
<p>若要运行 Windows 容器，必须在计算机上具有受支持的容器运行时。 Windows 当前支持的运行时是 <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd" target="_blank" rel="noopener noreferrer">containerd</a>、<a href="https://mobyproject.org/" target="_blank" rel="noopener noreferrer">Moby</a> 和 <a href="https://info.mirantis.com/docker-engine-support" target="_blank" rel="noopener noreferrer">Mirantis 容器运行时</a>。</p>`,r:{minutes:1.55,words:466},t:"Windows Server安装docker",y:"a"}}],["/soft/windows/windowsStore.html",{loader:()=>a(()=>import("./windowsStore.html-CRZFrRVF.js"),__vite__mapDeps([522,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Windows"],g:["无"],e:`<h2>概述</h2>
<p>开发者注册地址：<a href="https://developer.microsoft.com/zh-cn/microsoft-store/register/" target="_blank" rel="noopener noreferrer">https://developer.microsoft.com/zh-cn/microsoft-store/register/</a></p>
<h2>参考资料</h2>
<p>注册流程：<a href="https://learn.microsoft.com/zh-cn/previous-versions/msdn10/jj659043(v=msdn.10)" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/previous-versions/msdn10/jj659043(v=msdn.10)</a></p>`,r:{minutes:.2,words:60},t:"Windows商店",O:3,y:"a"}}],["/soft/windows/wslLinux.html",{loader:()=>a(()=>import("./wslLinux.html-kmG37ePw.js"),__vite__mapDeps([523,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["soft"],g:["linux","wsl"],o:!1,e:`<h2>前言</h2>
<p>在windows pc上面部署Linux</p>
<ul>
<li>虚拟机：性能与功能受限</li>
<li>双系统：切换麻烦，容易无法引导</li>
<li>双机/云主机：贵</li>
</ul>
<h2>概述</h2>
<p>Windows Subsystem for Linux（简称WSL）是一个在Windows 10\\11上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，其目标是使纯正的Ubuntu、Debian等映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。 内容来自于百度百科。</p>`,r:{minutes:5.45,words:1636},t:"WSL",y:"a"}}],["/softwareDesign/domainDrivenDesign/clearArchitecture.html",{loader:()=>a(()=>import("./clearArchitecture.html-JZQesQAa.js"),__vite__mapDeps([524,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>整洁架构也叫做洋葱架构</p>
<figure><img src="/common/1693141717170-c76e1825-6a0b-40ac-bd30-b2641e68b4d3.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<ul>
<li>内层的部分比外层的部分更加抽象-&gt;内层表达抽象，外层表达实现(内层定义接口，外层定义实现 )</li>
<li>外层的代码只能调用内层的代码，内层的代码可以通过依赖注入的形式间接调用外层的代码，举例：读取文件然后发送邮件</li>
</ul>`,r:{minutes:1.91,words:572},t:"整洁架构",y:"a"}}],["/softwareDesign/domainDrivenDesign/codingPractice.html",{loader:()=>a(()=>import("./codingPractice.html-D-iBMh9v.js"),__vite__mapDeps([525,1])),meta:{a:"azrng",d:17009568e5,l:"2023年11月26日",c:["软件设计"],g:["实践"],o:!0,e:`<h2>DDD中的写操作</h2>
<p>在写的操作中，我们需要严格地按照应用服务-&gt;聚合根-&gt;资源库的结构进行编码，写的操作又三种场景</p>
<ul>
<li>通过聚合根完成业务请求，这是DDD完成业务请求的典型方式</li>
<li>通过Factory完成聚合跟单创建</li>
<li>通过DomainService去完成业务请求，当业务放在聚合根中不合适的时候才考虑放在DomainService中</li>
</ul>
<p>资料来自：https://www.cnblogs.com/davenkin/p/ddd-coding-practices.html</p>
<h2>DDD中的读操作</h2>`,r:{minutes:1.38,words:415},t:"编码实践",y:"a"}}],["/softwareDesign/domainDrivenDesign/",{loader:()=>a(()=>import("./index.html-lXwDpYgy.js"),__vite__mapDeps([526,1])),meta:{a:"azrng",d:16923168e5,l:"2023年8月18日",c:["软件设计"],g:["ddd"],o:!0,e:`<h2>描述</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>DDD无关系统的大小，而是教我们如何做好软件的。</p>
</div>
<p>DDD(Domain-Deiven design)是一种设计思想，是一个应用于微服务架构的方法论，倾向于让所有人站到同一个角度看问题。最接地气的说：<strong>DDD应该是面向对象的进阶</strong></p>
<p>诞生于2004年，兴起于2014年(微服务元年)，自从微服务兴起之后，DDD的概念才越来越多被提起来。不过DDD之于微服务，无外乎“DDD的界限上下文可以用于指导微服务的划分”，使用单体架构也不影响我们划分界限上下文(模块)</p>`,r:{minutes:7.49,words:2246},t:"说明",y:"a"}}],["/softwareDesign/highQualityCode/designPrinciples.html",{loader:()=>a(()=>import("./designPrinciples.html-D6polXbW.js"),__vite__mapDeps([527,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>设计原则是指导我们代码设计的一些经验总结。
特点：听起来比较抽象，定义描述比较模糊，不同的人会有不同的解读，所以需要掌握设计的初衷，能够解决哪些编程问题，有哪些应用场景。
难点：<strong>掌握设计的初衷，能够解决哪些编程问题，有哪些应用场景。</strong></p>
<p>对于设计而言，这些原则就是纲领性的标准，你必须灵活准遵守，原则是不变的，而方法是灵活的，在不同的应用中协调和权衡，是面向对象设计的精髓，而这些智慧在逐步的实践和探索中形成。</p>
<h2>常用设计原则</h2>
<ul>
<li>SOLID原则-SRP单一职责原则
<ul>
<li>一个模块应该一个类行为负责</li>
</ul>
</li>
<li>SOLID原则-OCP开闭原则
<ul>
<li>软件实体应该对扩展开发，对修改封闭</li>
</ul>
</li>
<li>SOLID原则-LSP里式替换原则
<ul>
<li>子类必须能够替换父类型</li>
</ul>
</li>
<li>SOLID原则-接口隔离原则
<ul>
<li>高层与底层之间通过接口关联</li>
</ul>
</li>
<li>SOLID原则-DIP依赖反转原则
<ul>
<li>高层模块不应该依赖于底层模块，二者应该都依赖于抽象。</li>
</ul>
</li>
<li>Kiss原则
<ul>
<li>尽量保持简单</li>
</ul>
</li>
<li>YNGNI原则
<ul>
<li>不需要的不要去设计</li>
</ul>
</li>
<li>DRY原则
<ul>
<li>不要编写重复代码</li>
</ul>
</li>
<li>LOG(迪米特)原则
<ul>
<li>最小知识原则，高内聚低耦合。</li>
</ul>
</li>
</ul>`,r:{minutes:12.62,words:3786},t:"设计原则",y:"a"}}],["/softwareDesign/highQualityCode/ruhepingjiadaimahaohuai.html",{loader:()=>a(()=>import("./ruhepingjiadaimahaohuai.html-Cbjed5rx.js"),__vite__mapDeps([528,1])),meta:{a:"azrng",d:16495488e5,l:"2022年4月10日",c:["软件设计"],g:["无"],o:!0,e:`<h2>评判标准</h2>
<ul>
<li>可维护性</li>
<li>可读性</li>
<li>可扩展性</li>
<li>灵活性</li>
<li>简洁性</li>
<li>可复用性</li>
<li>可测试性</li>
</ul>
<h3>可维护性</h3>
<p>在不破坏原有代码设计、不引入新的bug的情况下，能够快速修改或者添加代码。</p>
<p>代码分层情清晰、模块化好、高内聚低耦合、遵从基于接口而非实现编程的设计原则等等。</p>
<p>简单理解：如果bug容易修复，修改、添加功能能够轻松完成，那么就可以主观认为代码易维护。</p>
<h3>可读性</h3>
<p>考虑代码是否易读、易理解。</p>`,r:{minutes:3.35,words:1005},t:"如何评价代码好坏",y:"a"}}],["/softwareDesign/highQualityCode/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-vbtglMpp.js"),__vite__mapDeps([529,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>面向对象是武器，设计模式是招式，设计原则是心法，以心法为基础，以武器运用招式应对复杂的编程问题。</p>
`,r:{minutes:.25,words:74},t:"说明",y:"a"}}],["/softwareDesign/openSourceFrame/manyTenant.html",{loader:()=>a(()=>import("./manyTenant.html-BEKI9Nxj.js"),__vite__mapDeps([530,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<p>如果你在开发sass应用程序，可以参考或者直接使用这些开源的框架。</p>
<h6>ASP.NET Boilerplate — Web应用程序框架</h6>
<p>ASP.NET Boilerplate是专门为新的现代Web应用程序设计的通用应用程序框架。它使用已经熟悉的工具并围绕它们实施最佳实践，以为您提供SOLID开发经验。</p>
<ul>
<li>https://github.com/aspnetboilerplate/aspnetboilerplate</li>
<li>https://aspnetboilerplate.com/</li>
<li>https://aspnetboilerplate.com/Pages/Documents/Multi-Tenancy</li>
</ul>`,r:{minutes:1.3,words:390},t:"多租户的开源框架",y:"a"}}],["/softwareDesign/openSourceFrame/wtm.html",{loader:()=>a(()=>import("./wtm.html-CE5fxtnD.js"),__vite__mapDeps([531,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>基于.netcore的快速开发框架</p>
<blockquote>
<p>官网：<a href="https://wtmdoc.walkingtec.cn/" target="_blank" rel="noopener noreferrer">https://wtmdoc.walkingtec.cn/</a>
GitHub：<a href="https://github.com/dotnetcore/WTM" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/WTM</a></p>
</blockquote>`,r:{minutes:.19,words:58},t:"WTM",y:"a"}}],["/softwareDesign/seeSystem/erpSystem.html",{loader:()=>a(()=>import("./erpSystem.html--AiiRkr9.js"),__vite__mapDeps([532,1])),meta:{a:"azrng",d:17028576e5,l:"2023年12月18日",c:["软件设计"],g:["system"],o:!0,e:`<h2>概述</h2>
<p>erp</p>
`,r:{minutes:.09,words:27},t:"ERP系统",y:"a"}}],["/softwareDesign/seeSystem/quanxianjitong.html",{loader:()=>a(()=>import("./quanxianjitong.html-l9mtXqwv.js"),__vite__mapDeps([533,1])),meta:{a:"azrng",d:16524864e5,l:"2022年5月14日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>RBAC(Role-based Access Control):通过预定义的角色赋予访问权限，每个角色规定了一套权限。
ABAC(Attribute-based Access Control)：通过策略授予权限，策略可能将多个属性/claims组合到一起，允许复杂的权限规则。</p>
<h2>资料</h2>
<p>“权限系统”设计剖析：https://mp.weixin.qq.com/s/Qg5yPTf7u9I27p9DawuxnA</p>
`,r:{minutes:.37,words:112},t:"权限系统",y:"a"}}],["/softwareDesign/seeSystem/wmsSystem.html",{loader:()=>a(()=>import("./wmsSystem.html-D2H9u2uX.js"),__vite__mapDeps([534,1])),meta:{a:"azrng",d:17028576e5,l:"2023年12月18日",c:["软件设计"],g:["system"],o:!0,e:`<h2>概述</h2>
<p>仓储管理系统</p>
`,r:{minutes:.11,words:32},t:"WMS系统",y:"a"}}],["/softwareDesign/systemDesign/clientTryOut.html",{loader:()=>a(()=>import("./clientTryOut.html-D5X_slWA.js"),__vite__mapDeps([535,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h3>1.概要</h3>
<p>最近接到公司安排的任务给客户端设计一个“试用30天”的一个需求，其功能主要是为了防止客户拿到产品之后不支付尾款继续使用。众所周知靠纯软件想防“盗版”，“限制试用”等做法是行业难题。只要价值足够高一定有人会破解绕过你的所有防线达到免费试用的目的。那为什么还要写这篇文章呢，主要是为了给遇到同样问题的小伙伴提供一些"纸糊"的限制用户试用的思路，作为一个连接点的文章。
这里分享五种思路：</p>
<ul>
<li>时间限制</li>
<li>次数限制</li>
<li>加密软件</li>
<li>加密狗</li>
<li>策略胁迫</li>
</ul>
<h3>2.详细内容</h3>`,r:{minutes:3.21,words:964},t:"客户端应用试用限制设计",y:"a"}}],["/softwareDesign/systemDesign/loginSecurity.html",{loader:()=>a(()=>import("./loginSecurity.html-zerrOVBS.js"),__vite__mapDeps([536,1])),meta:{a:"azrng",d:16923168e5,l:"2023年8月18日",c:["软件设计"],g:["无"],o:!0,e:`<blockquote>
<p>来自：掘金，作者：哒哒哒哒打代码
链接：https://juejin.cn/post/6859214952704999438</p>
</blockquote>
<h2>1. 暴力破解</h2>
<p>只要网站是暴露在公网的，那么很大概率上会被人盯上，尝试爆破这种简单且有效的方式：
通过各种方式获得了网站的用户名之后，通过编写程序来遍历所有可能的密码，直至找到正确的密码为止</p>
<h3>1.1 验证码</h3>
<p>可以在密码输出错误达到一定次数时候，增加验证码校验，比如我们设置，当用户密码错误达到3次之后，则需要用户输入图片验证码才可以继续登录操作
暴露的问题：
图片验证码真的很难做到有效的防止机器人</p>`,r:{minutes:3.42,words:1026},t:"登录接口安全性",y:"a"}}],["/softwareDesign/systemDesign/oneTimePassword.html",{loader:()=>a(()=>import("./oneTimePassword.html-DfPVfDDS.js"),__vite__mapDeps([537,1])),meta:{a:"Catcher Wong",d:17044992e5,l:"2024年1月6日",c:["软件设计"],g:["一次性密码"],o:!0,e:`<h2>背景</h2>
<p>一次性密码（One Time Password，简称OTP），又称动态密码或单次有效密码，是指计算器系统或其他数字设备上只能使用一次的密码，有效期为只有一次登录会话或交易。</p>
<p>最常见的场景应该就是 2FA（双因素身份验证），例如 Github 的 2FA，云账号的 MFA等，以及一些需要动态密码的场景，例如动态口令牌等</p>
<p>它有两种比较常见的实现有 HOTP（HMAC-Based One-Time Password） 和 TOTP（Time-Based One-Time Password）</p>
<h2>HOTP和TOTP</h2>
<p>HOTP 是基于 HMAC 的一次性密码，其工作原理：<code>HOTP(S,C) = Truncate(HMAC-SHA-1(S,C))</code></p>`,r:{minutes:5.18,words:1553},t:"一次性密码",y:"a"}}],["/softwareDesign/systemDesign/softLicence.html",{loader:()=>a(()=>import("./softLicence.html-3L9V3fTT.js"),__vite__mapDeps([538,1])),meta:{t:"软件Licence应用实例"}}],["/web/blazor/blazorise.html",{loader:()=>a(()=>import("./blazorise.html-DiWpXWlo.js"),__vite__mapDeps([539,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个blazor的框架
官网：<a href="https://blazorise.com/docs" target="_blank" rel="noopener noreferrer">https://blazorise.com/docs</a></p>
`,r:{minutes:.13,words:39},t:"Blazorise",y:"a"}}],["/web/blazor/blazorspark.html",{loader:()=>a(()=>import("./blazorspark.html-Cr9UYtGy.js"),__vite__mapDeps([540,1])),meta:{a:"azrng",d:16874784e5,l:"2023年6月23日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Blazor Spark 是一个开源 Web 框架，旨在通过其富有表现力和直观的语法来加速 Web 应用程序开发。它提供了坚实的基础和一组强大的功能，使开发人员能够轻松创建卓越的 Web 应用程序。
Blazor Spark 采用 Blazor Server 基于组件的架构并扩展了其功能，使开发人员能够快速构建功能丰富的 Web 应用程序。
它还提供无缝且高效的开发体验，包括自定义 CLI 命令以提高您的效率。
文档地址：<a href="https://blazorspark.com" target="_blank" rel="noopener noreferrer">https://blazorspark.com</a></p>`,r:{minutes:.59,words:178},t:"Blazor Spark",y:"a"}}],["/web/blazor/openSourceSample.html",{loader:()=>a(()=>import("./openSourceSample.html-W6RqihbH.js"),__vite__mapDeps([541,1])),meta:{a:"azrng",d:17027712e5,l:"2023年12月17日",c:["web"],g:["blazor","示例"],o:!0,e:`<h2>AIStudio.Blazor.App</h2>
<p>用AntDesignBlazor快速开发一个权限系统</p>
<p>https://www.cnblogs.com/akwkevin/p/17889497.html</p>
<h2>Known</h2>
<p><code>Known</code>是基于<code>Blazor</code>的企业级快速开发框架，低代码，跨平台，开箱即用，一处代码，多处运行。</p>
<ul>
<li>官网：<a href="http://known.pumantech.com/" target="_blank" rel="noopener noreferrer">http://known.pumantech.com</a></li>
<li>Gitee： https://gitee.com/known/Known</li>
<li>Github：https://github.com/known/Known</li>
</ul>`,r:{minutes:1.52,words:456},t:"开源示例",y:"a"}}],["/web/blazor/",{loader:()=>a(()=>import("./index.html-Cho_iRRO.js"),__vite__mapDeps([542,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Blazor是什么？</h2>
<p>Blazor 是在.Net和Razor上构建的用户UI框架，用于使用 HTML、CSS 和 C# 构建网页。 可以使用标准 HTML 和 CSS 定义网站的布局和设计。</p>
<h3>两个模式</h3>
<p>Blazor WebAssembly：部署在用户计算机的浏览器上运行(类似于单页面应用程序)(需要浏览器支持HTML5标准的WebAssembly运行时)(通过 WebAssembly 直接在浏览器中运行的客户端 Web 应用)。
Blazor Server：在服务器上作为Asp.Net应用程序的一部分运行，系统将使用 ASP.NET Core SignalR 和首选 Web 套接字连接来维护双向通信管道(通过 WebSocket 连接处理 UI 交互的服务器端代码)。</p>`,r:{minutes:2.9,words:869},t:"说明",y:"a"}}],["/web/jq/ajaxyibutongbu.html",{loader:()=>a(()=>import("./ajaxyibutongbu.html-Df6ZpBrw.js"),__vite__mapDeps([543,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["web"],g:["无"],o:!0,e:`<p>Ajax请求默认的都是异步的
如果想同步 async设置为false就可以（默认是true）</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token punctuation">:</span> <span class="token string">"some.php"</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.3,words:90},t:"ajax异步同步",y:"a"}}],["/web/layui/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-YTjfg04a.js"),__vite__mapDeps([544,1])),meta:{a:"azrng",d:16838496e5,l:"2023年5月12日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>极简化模块UI框架。</p>
<p>官网文档：<a href="https://layui.dev/" target="_blank" rel="noopener noreferrer">https://layui.dev/</a></p>
`,r:{minutes:.15,words:44},t:"说明",y:"a"}}],["/web/npm/pnpm.html",{loader:()=>a(()=>import("./pnpm.html-C5M4dUPY.js"),__vite__mapDeps([545,1])),meta:{a:"azrng",d:1690848e6,l:"2023年8月1日",c:["web"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>安装</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">pnpm</span>

<span class="token comment"># 升级版本</span>
<span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token function">pnpm</span>

<span class="token comment"># 查看版本</span>
<span class="token function">pnpm</span> <span class="token parameter variable">-v</span>

<span class="token comment"># 设置镜像源</span>
<span class="token function">pnpm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org/

<span class="token comment"># 检查镜像源</span>
<span class="token function">pnpm</span> config get registry
</code></pre></div>`,r:{minutes:.52,words:157},t:"Pnpm",y:"a"}}],["/web/npm/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-DhQ95vxp.js"),__vite__mapDeps([546,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>包管理器</p>
<p>包搜索地址：<a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/</a></p>
<h2>基本操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 删除全部依赖包 </span>
npm uninstall <span class="token operator">*</span>
<span class="token comment">//删除指定的依赖包 </span>
npm uninstall xxx
<span class="token comment">//删除全局的指定依赖(xxx为依赖名称) </span>
npm uninstall xxx <span class="token operator">-</span>g

<span class="token comment">//清缓存  手动删除node_modules文件夹及文件夹里面的全部文件</span>
npm cache clean <span class="token operator">--</span>force
</code></pre></div>`,r:{minutes:1.07,words:320},t:"说明",y:"a"}}],["/web/vue/changyongcaozuo.html",{loader:()=>a(()=>import("./changyongcaozuo.html-ZOZiE7vf.js"),__vite__mapDeps([547,1])),meta:{a:"azrng",d:16923168e5,l:"2023年8月18日",c:["web"],g:["无"],o:!0,e:`<h2>指定端口</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//npm run serve --port 端口号  例：</span>
npm run serve <span class="token operator">--</span>port <span class="token number">8081</span>
</code></pre></div>`,r:{minutes:.15,words:46},t:"常用操作",y:"a"}}],["/web/vue/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-C8iEGgTQ.js"),__vite__mapDeps([548,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>框架推荐</h2>
<ul>
<li>Vben Admin：<a href="https://vvbin.cn/doc-next/" target="_blank" rel="noopener noreferrer">https://vvbin.cn/doc-next/</a></li>
<li>免费的vuejs模板：<a href="https://colorlib.com/wp/free-vuejs-admin-template/" target="_blank" rel="noopener noreferrer">https://colorlib.com/wp/free-vuejs-admin-template/</a></li>
</ul>`,r:{minutes:.19,words:56},t:"说明",y:"a"}}],["/web/webkaifa/borwserduixiang.html",{loader:()=>a(()=>import("./borwserduixiang.html-BoVXxtJA.js"),__vite__mapDeps([549,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<h2>Window 对象</h2>
<p>Window 对象表示浏览器打开的窗口</p>
<h3>top属性</h3>
<p>top属性返回当前窗口的最顶层浏览器窗口
语法：
Window.top
&nbsp;
实例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">meta</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>菜鸟教程<span class="token punctuation">(</span>runoob<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token return-type class-name">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>top<span class="token operator">!=</span>window<span class="token punctuation">.</span>self<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;这个窗口不是最顶层窗口!我在一个框架?&lt;/p&gt;"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span> 
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;这个窗口是最顶层窗口!&lt;/p&gt;"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    
<span class="token operator">&lt;</span><span class="token class-name">input</span> type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"check()"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"检查窗口"</span><span class="token operator">&gt;</span>
    
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.84,words:253},t:"Borwser对象",y:"a"}}],["/web/webkaifa/freeApi.html",{loader:()=>a(()=>import("./freeApi.html-BfDAHVjE.js"),__vite__mapDeps([550,1])),meta:{a:"azrng",d:16837632e5,l:"2023年5月11日",c:["web"],g:["api"],o:!0,e:`<h2>免费的Api库</h2>
<p>1.public-apis 2.awesome-apis</p>
<h2>聚合平台</h2>
<h3>大米API</h3>
<p>https://api.qqsuu.cn/</p>
<p>60s看世界：https://udp.qqsuu.cn/apis/60s/index.html</p>
<h3>韩小韩API</h3>
<p>https://api.vvhan.com/</p>
<h2>Apifox</h2>
<p>文档地址：<a href="https://echo.apifox.com/" target="_blank" rel="noopener noreferrer">https://echo.apifox.com/</a></p>`,r:{minutes:2,words:600},t:"免费API",y:"a"}}],["/web/webkaifa/htmlgeshi.html",{loader:()=>a(()=>import("./htmlgeshi.html-nlury7Jk.js"),__vite__mapDeps([551,1])),meta:{a:"azrng",d:16490304e5,l:"2022年4月4日",c:["web"],g:["无"],o:!0,e:`<p>标准格式</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>body 元素的内容会显示在浏览器中。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.19,words:58},t:"HTML格式",y:"a"}}],["/web/webkaifa/http.html",{loader:()=>a(()=>import("./http.html-CLzDguGU.js"),__vite__mapDeps([552,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>HTTPS通信过程</h2>
<p>HTTPS协议 = HTTP协议 + SSL/TLS协议，在HTTPS数据传输的过程中，需要用SSL/TLS对数据进行加密和解密，需要用HTTP对加密后的数据进行传输，由此可以看出HTTPS是由HTTP和SSL/TLS一起合作完成的。
SSL的全称是Secure Sockets Layer，即安全套接层协议，是为网络通信提供安全及数据完整性的一种安全协议。SSL协议在1994年被Netscape发明，后来各个浏览器均支持SSL，其最新的版本是3.0
TLS的全称是Transport Layer Security，即安全传输层协议，最新版本的TLS（Transport Layer Security，传输层安全协议）是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。在TLS与SSL3.0之间存在着显著的差别，主要是它们所支持的加密算法不同，所以TLS与SSL3.0不能互操作。虽然TLS与SSL3.0在加密算法上不同，但是在我们理解HTTPS的过程中，我们可以把SSL和TLS看做是同一个协议。
HTTPS为了兼顾安全与效率，同时使用了对称加密和非对称加密。数据是被对称加密传输的，对称加密过程需要客户端的一个密钥，为了确保能把该密钥安全传输到服务器端，采用非对称加密对该密钥进行加密传输，总的来说，对数据进行对称加密，对称加密所要使用的密钥通过非对称加密传输。
<img src="/common/1609836114974-0a50b37d-d0a4-41da-9e36-90e442df9ec3.png" alt="image.png" loading="lazy">
HTTPS在传输的过程中会涉及到三个密钥：
服务器端的公钥和私钥，用来进行非对称加密
客户端生成的随机密钥，用来进行对称加密
一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步。
1.客户端向服务器发起HTTPS请求，连接到服务器的443端口
2.服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。
3.服务器将自己的公钥发送给客户端。
4.客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，下文会进行说明。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。
5.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。
6.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。
7.然后服务器将加密后的密文发送给客户端。
8.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。</p>`,r:{minutes:3.41,words:1023},t:"HTTP",y:"a"}}],["/web/webkaifa/spa.html",{loader:()=>a(()=>import("./spa.html-BmSGpP5a.js"),__vite__mapDeps([553,1])),meta:{a:"azrng",d:16492896e5,l:"2022年4月7日",c:["web"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>使用 SPA 框架的应用程序称为 SPA 应用程序。 为什么称作“单页”呢？ 为了使某个应用像客户端应用一样快速，需要将它保留在同一页中。
但这是否意味着该应用只有一个视图？ 单页并不意味着只有一个视图。 更多的是关于你如何从一页转到另一页。 无需在浏览器地址字段中键入新的 URL，而是停留在同一页中，但需要使用 SPA 框架来替换内容。 你的 SPA 框架在很大程度上依赖于 JavaScript 来操作文档对象模型，这是一个将应用表示为不同节点（相当于树上的叶子）的树。</p>
<h2>SPA框架</h2>
<ul>
<li>**Angular：**此框架已问世多年，它重度使用 TypeScript。 TypeScript 类似于 C#，其工具适用于 Angular。</li>
<li>**React：**React 非常流行，你可以使用 ES6 和 TypeScript。 和 Angular 一样，它也提供很好的工具。</li>
<li>**Vue.js：**Vue.js 也是一个不错的选择，很多人都在使用它。</li>
<li>**Svelte：**Svelte 在这些框架中相对较新，但如果你只是使用 HTML、JavaScript 和 CSS 进行开发，则它可以发挥很好的作用。 它的编译器功能强大，能够在很大程度上隐藏框架部分。</li>
</ul>`,r:{minutes:1.17,words:350},t:"SPA",y:"a"}}],["/web/webkaifa/sucaishouji.html",{loader:()=>a(()=>import("./sucaishouji.html-BRsZqNe0.js"),__vite__mapDeps([554,1])),meta:{a:"azrng",d:16833312e5,l:"2023年5月6日",c:["web"],g:["无"],o:!0,e:`<h2>配色网站</h2>
<p><a href="http://colorschemedesigner.com/" target="_blank" rel="noopener noreferrer">http://colorschemedesigner.com/</a>
<a href="https://kuler.adobe.com/explore/newest/" target="_blank" rel="noopener noreferrer">https://kuler.adobe.com/explore/newest/</a></p>
<h2>图标网站</h2>
<p>icons：<a href="https://icons8.com/icons" target="_blank" rel="noopener noreferrer">https://icons8.com/icons</a></p>`,r:{minutes:1.8,words:540},t:"素材收集",y:"a"}}],["/web/webkaifa/webscoket.html",{loader:()=>a(()=>import("./webscoket.html--fhhuf9B.js"),__vite__mapDeps([555,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["web"],g:["无"],o:!0,e:`<p>区别：<a href="https://www.cnblogs.com/Javi/p/9303020.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/Javi/p/9303020.html</a>
&nbsp;
web端即时通讯，在net中可以直接使用signalr
&nbsp;
&nbsp;
<a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/html/html5-websocket.html</a>
&nbsp;
<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>`,r:{minutes:.2,words:59},t:"WebScoket",y:"a"}}],["/dataBase/gongyoubufen/tools/dbtool.html",{loader:()=>a(()=>import("./dbtool.html-BqVzAD45.js"),__vite__mapDeps([556,1])),meta:{a:"azrng",d:16905888e5,l:"2023年7月29日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>DbTool 是一个支持 CodeFirst/DbFirst/ModelFirst 的数据库小工具，原本是基于 dotnet framework WinForm 实现的，在 1.1.0 版本更新中使用 dotnet core 3.1 基于 WPF 重写了，并实现了一个简单的基于插件模式开发模式并引入了多语言的基础支持。
github：<a href="https://github.com/WeihanLi/DbTool" target="_blank" rel="noopener noreferrer">https://github.com/WeihanLi/DbTool</a></p>`,r:{minutes:.43,words:128},t:"DbTool",y:"a"}}],["/dataBase/mongodb/linuxanzhuang/docker-composebushumongodb.html",{loader:()=>a(()=>import("./docker-composebushumongodb.html-B_wuelDl.js"),__vite__mapDeps([557,1])),meta:{a:"azrng",d:16823808e5,l:"2023年4月25日",c:["dataBase"],g:["无"],o:!0,e:`<div class="language-docker" data-ext="docker" data-title="docker"><pre class="language-docker"><code>mongo: #内存数据库服务
    container_name: mongo
    image: mongo
    hostname: mongo
    restart: always
    ports: 
      - "27017:27017"
    environment: 
      TZ: Asia/Shanghai
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
</code></pre></div>`,r:{minutes:.28,words:84},t:"Docker-compose部署mongodb",y:"a"}}],["/dataBase/mongodb/linuxanzhuang/linuxanzhuang.html",{loader:()=>a(()=>import("./linuxanzhuang.html-DiXEzF_z.js"),__vite__mapDeps([558,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p><a href="https://blog.csdn.net/sun007700/article/details/100671570" target="_blank" rel="noopener noreferrer">centos7安装mongodb以及使用</a></p>
`,r:{minutes:.12,words:37},t:"linux安装",y:"a"}}],["/dataBase/mongodb/linuxanzhuang/windowsanzhuang.html",{loader:()=>a(()=>import("./windowsanzhuang.html-bFsXQ3t3.js"),__vite__mapDeps([559,1])),meta:{a:"azrng",d:168264e7,l:"2023年4月28日",c:["dataBase"],g:["无"],o:!0,e:`<h2>外部访问</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>在windows上安装后  

打开 C<span class="token punctuation">:</span>\\Program Files\\MongoDB\\Server\\<span class="token number">6.0</span>\\bin\\mongod<span class="token punctuation">.</span>cfg
<span class="token preprocessor property">## network interfaces</span>
net<span class="token punctuation">:</span>
port<span class="token punctuation">:</span> <span class="token number">27017</span>
bindIp<span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> 改为 <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
</code></pre></div>`,r:{minutes:.19,words:58},t:"windows安装",y:"a"}}],["/dataBase/mysql/install/dockerInstall.html",{loader:()=>a(()=>import("./dockerInstall.html-DYk33n_Z.js"),__vite__mapDeps([560,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>下面示例创建的mysql实例其数据都在容器内部存储，容器删除数据就没了，所以如果要保存数据要考虑挂载容器</p>
</div>
<h2>docker部署mysql</h2>
<p>拉取镜像</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker pull mysql
</code></pre></div>`,r:{minutes:.8,words:239},t:"容器安装",y:"a"}}],["/dataBase/mysql/install/linuxInstall.html",{loader:()=>a(()=>import("./linuxInstall.html-UPg34Pvs.js"),__vite__mapDeps([561,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>linux部署mysql5.7</h2>
<h3>下载包</h3>
<p>首先先下载好mysql包，版本是<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar" target="_blank" rel="noopener noreferrer">5.7.26</a>&nbsp; <a href="https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener noreferrer">8.0版本</a></p>`,r:{minutes:3.04,words:912},t:"Linux安装",y:"a"}}],["/dataBase/mysql/install/",{loader:()=>a(()=>import("./index.html-DDSxfdZe.js"),__vite__mapDeps([562,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>命令行操作</h2>
<p>登录MySQL：mysql -u root -p
重启MySQL服务：service mysql restart 或者systemctl restart mysqld
查询mysql是否运行：ps -ef | grep -i mysql
重启mysql服务：systemctl restart mysqld
关闭mysql服务：systemctl stop mysqld</p>
<h2>字符集</h2>
<p>数据库和表的字符集统一使用utf8mb4-general-ci
兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效；
utf8mb4支持emojj表情符</p>`,r:{minutes:.87,words:262},t:"说明",y:"a"}}],["/dataBase/mysql/install/windowInstall.html",{loader:()=>a(()=>import("./windowInstall.html-GxbAxR9j.js"),__vite__mapDeps([563,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>mysql-5.7.26-winx64 解压版安装</h2>
<p>1.先去下载安装包，zip格式 <a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener noreferrer">https://www.mysql.com/downloads/</a>
2.解压安装包，放在D:\\MySql\\mysql-5.7.26-winx64路径下
<img src="/common/1614063538485-6f540338-acf0-40a6-808b-815d827d5fd0.png" alt="image.png" loading="lazy">
3.把bin目录配置到环境变量path的后面
新建MYSQL_HOME变量，并配置值为:
D:\\MySql\\mysql-5.7.26-winx64
编辑path系统变量，将
%MYSQL_HOME%\\bin
添加到path变量后。
配置path环境变量，也可不新建MYSQL_HOME变量，而是直接将MySQL安装目录下的bin配置到path变量下，Path：%MYSQL_HOME%\\bin
4.准备好my.ini文件，可以先新建一个my.txt文件，然后通过重命名修改文件后缀为.ini，以前的版本解压后或许会存在my-default.ini文件，但是5.7.23版本没有，因此要自己手动创建该文件, 编辑好my.ini文件之后，将my.ini文件放到
D:\\MySql\\mysql-5.7.26-winx64
目录下。文件的内容如下：</p>`,r:{minutes:3.86,words:1157},t:"Windows安装",y:"a"}}],["/dataBase/mysql/jiaoben/mysqlbeifenjiaoben.html",{loader:()=>a(()=>import("./mysqlbeifenjiaoben.html-D8v0mB6H.js"),__vite__mapDeps([564,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>脚本默认备份全库，也可以备份某个表，可以设置保留周期，结果压缩，将备份结果发送邮件通知。</p>
<h2>内容</h2>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment">#!/bin/bash</span>

<span class="token comment">## 数据表名称，可以为空</span>
table_name<span class="token operator">=</span>$<span class="token number">1</span>

<span class="token comment">## 数据库名称</span>
database_name<span class="token operator">=</span>test_data
<span class="token comment">## 备份周期，单位为天</span>
backup_period<span class="token operator">=</span><span class="token number">30</span>
<span class="token comment">## 备份目录</span>
backup_dir<span class="token operator">=</span><span class="token operator">/</span>date<span class="token operator">/</span>mysql<span class="token operator">/</span>backup
<span class="token comment">## 邮箱地址</span>
email_address<span class="token operator">=</span>xxxxx@mail<span class="token punctuation">.</span>qq
<span class="token comment">## MySQL账号</span>
mysql_user<span class="token operator">=</span>root
<span class="token comment">## MySQL密码</span>
mysql_password<span class="token operator">=</span>root1234

<span class="token comment">## 获取当前日期</span>
date_str<span class="token operator">=</span>\`date <span class="token operator">+</span><span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d\`

<span class="token comment">## 备份文件名</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">-</span>z <span class="token string">"$table_name"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> then
    backup_file_name<span class="token operator">=</span><span class="token string">"\${database_name}_\${date_str}.sql"</span>
<span class="token keyword">else</span>
    backup_file_name<span class="token operator">=</span><span class="token string">"\${database_name}_\${table_name}_\${date_str}.sql"</span>
fi

<span class="token comment">## 压缩后备份文件名</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">-</span>z <span class="token string">"$table_name"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> then
    compressed_backup_file_name<span class="token operator">=</span><span class="token string">"\${database_name}_\${date_str}.tar.gz"</span>
<span class="token keyword">else</span>
    compressed_backup_file_name<span class="token operator">=</span><span class="token string">"\${database_name}_\${table_name}_\${date_str}.tar.gz"</span>
fi

<span class="token comment">## 备份文件路径</span>
backup_file_path<span class="token operator">=</span><span class="token string">"\${backup_dir}/\${backup_file_name}"</span>

<span class="token comment">## 压缩后备份文件路径</span>
compressed_backup_file_path<span class="token operator">=</span><span class="token string">"\${backup_dir}/\${compressed_backup_file_name}"</span>

<span class="token comment">## 检查备份目录是否存在，如果不存在则创建</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> ! <span class="token operator">-</span>d <span class="token string">"$backup_dir"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> then
    mkdir <span class="token operator">-</span>p <span class="token string">"$backup_dir"</span>
fi

<span class="token comment">## 备份MySQL数据表</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">-</span>z <span class="token string">"$table_name"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> then
    mysqldump <span class="token operator">-</span><span class="token string">u"$mysql_user"</span> <span class="token operator">-</span>p<span class="token string">"$mysql_password"</span> <span class="token string">"$database_name"</span> <span class="token operator">&gt;</span> <span class="token string">"$backup_file_path"</span>
<span class="token keyword">else</span>
    mysqldump <span class="token operator">-</span><span class="token string">u"$mysql_user"</span> <span class="token operator">-</span>p<span class="token string">"$mysql_password"</span> <span class="token string">"$database_name"</span> <span class="token string">"$table_name"</span> <span class="token operator">&gt;</span> <span class="token string">"$backup_file_path"</span>
fi

<span class="token comment">## 压缩备份文件</span>
tar <span class="token operator">-</span>czvf <span class="token string">"$compressed_backup_file_path"</span> <span class="token string">"$backup_file_path"</span>

<span class="token comment">## 删除备份文件</span>
rm <span class="token operator">-</span>f <span class="token string">"$backup_file_path"</span>

<span class="token comment">## 检查备份结果</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">-</span>f <span class="token string">"$compressed_backup_file_path"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> then
    echo <span class="token string">"备份成功！"</span>
    echo <span class="token string">"备份文件路径：$compressed_backup_file_path"</span>
    subject<span class="token operator">=</span><span class="token string">"MySQL备份成功"</span>
    body<span class="token operator">=</span><span class="token string">"MySQL备份成功，备份文件路径：$compressed_backup_file_path"</span>
<span class="token keyword">else</span>
    echo <span class="token string">"备份失败！"</span>
    subject<span class="token operator">=</span><span class="token string">"MySQL备份失败"</span>
    body<span class="token operator">=</span><span class="token string">"MySQL备份失败！"</span>
fi

<span class="token comment">## 发送备份结果到指定邮箱</span>
echo <span class="token string">"$body"</span> <span class="token operator">|</span> mail <span class="token operator">-</span>s <span class="token string">"$subject"</span> <span class="token string">"$email_address"</span>

<span class="token comment">## 删除过期备份文件</span>
find <span class="token string">"$backup_dir"</span> <span class="token operator">-</span>mtime <span class="token operator">+</span><span class="token string">"$backup_period"</span> <span class="token operator">-</span>name <span class="token string">"*.tar.gz"</span> <span class="token operator">-</span><span class="token keyword">exec</span> rm <span class="token punctuation">{</span><span class="token punctuation">}</span> \\<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.3,words:391},t:"MySQL备份脚本",y:"a"}}],["/dataBase/mysql/jiaoben/mysqldumpOperator.html",{loader:()=>a(()=>import("./mysqldumpOperator.html-BM9cfhq0.js"),__vite__mapDeps([565,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!1,e:`<h2>mysqldump说明</h2>
<p>mysqldump命令备份数据在MySQL中提供了命令行导出数据库数据以及文件的一种方便的工具mysqldump,我们可以通过命令行直接实现数据库内容的导出dump,首先我们简单了解一下mysqldump命令用法:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>#MySQLdump常用mysqldump -u root -p --databases 数据库1 数据库2 &gt; xxx.sql
</code></pre></div>`,r:{minutes:6.68,words:2005},t:"mysqldump操作数据库",y:"a"}}],["/dataBase/mysql/jichuzhishi/chaxunshuju.html",{loader:()=>a(()=>import("./chaxunshuju.html-Dpv0U-EN.js"),__vite__mapDeps([566,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>select语句的执行顺序</p>
<ul>
<li>Select      distinct 查询字段</li>
<li>From 表名</li>
<li>Join 连接条件</li>
<li>Where 查询条件</li>
<li>Group by      分组字段</li>
<li>Having 分组后条件</li>
<li>Order by      排序条件</li>
<li>Limit 查询起始位置，查询总数</li>
</ul>
`,r:{minutes:.28,words:84},t:"查询数据",y:"a"}}],["/dataBase/mysql/jichuzhishi/cunchuguocheng.html",{loader:()=>a(()=>import("./cunchuguocheng.html-DELbdf6H.js"),__vite__mapDeps([567,1])),meta:{a:"azrng",d:16909344e5,l:"2023年8月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>定义</h2>
<p>把复杂的操作，封装一个过程。类似于函数。</p>
<h3>优点</h3>
<p>1、复杂操作，调用简单。
2、速度快。</p>
<h3>缺点：</h3>
<p>1、封装复杂。
2、没有灵活性。</p>
<h3>查看所有存储过程命令</h3>
<p>1 show procedure status;
查看存储过程或函数的创建代码：
1 show create procedure proc_name;
2 show create function func_name;
调用存储命令：
1 call 名称;
删除存储过程命令：
1 DROP {PROCEDURE | FUNCTION} [IF EXISTS] 名称；
创建存储过程：
1 create procedure 名称(参数,.....)
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 过程体;
4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 过程体;
5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end//
参数：
1 in|out|inout 参数名称 类型(长度)
在sql语句中给变量赋值：
1 into
在过程体外声明变量：
1 @变量名
重新制定sql语句的结束符：
1 delimiter //
例子：获取5条文章记录
1 create procedure getNews()
2&nbsp;&nbsp;&nbsp;&nbsp; begin
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from news limit 5;
4&nbsp;&nbsp;&nbsp;&nbsp; end//
例子：获取n条文章记录
1 create procedure getNewsN(in n int(5))
2&nbsp;&nbsp;&nbsp;&nbsp; begin
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from news limit n;
4&nbsp;&nbsp;&nbsp;&nbsp; end//
例子：获取某栏目下文章的条数。
1 create procedure getNewsByType(in fid int,out num int)
2&nbsp;&nbsp;&nbsp;&nbsp; begin
3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select count(*) into num from news where fcid=fid;
4&nbsp;&nbsp;&nbsp;&nbsp; end//
声明变量：
1 declare 变量名 类型(长度) default 默认值;
给变量赋值：
1 set 变量名=值;
说明：
强类型。
例子：</p>`,r:{minutes:2.24,words:673},t:"存储过程",y:"a"}}],["/dataBase/mysql/jichuzhishi/fenoubiao.html",{loader:()=>a(()=>import("./fenoubiao.html-BtZBC-OB.js"),__vite__mapDeps([568,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>分区表在物理上表现为多个文件，在逻辑上表现为一个表；
谨慎选择分区键，跨分区查询效率可能更低；
建议采用物理分表的方式管理大数据。</p>
`,r:{minutes:.29,words:87},t:"分区表",y:"a"}}],["/dataBase/mysql/jichuzhishi/hanshu.html",{loader:()=>a(()=>import("./hanshu.html-CohS2966.js"),__vite__mapDeps([569,1])),meta:{a:"azrng",d:1690848e6,l:"2023年8月1日",c:["dataBase"],g:["无"],o:!0,e:`<p>创建一个简单的函数</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $$
<span class="token keyword">DROP</span> <span class="token keyword">FUNCTION</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> genPerson$$
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> genPerson<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">DECLARE</span> str <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">SET</span> <span class="token variable">@tableName</span><span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">SET</span> str<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span><span class="token string">'create table '</span><span class="token punctuation">,</span> <span class="token variable">@tableName</span><span class="token punctuation">,</span><span class="token string">'(id int, name varchar(20));'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token keyword">END</span> $$
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.55,words:164},t:"函数",y:"a"}}],["/dataBase/mysql/jichuzhishi/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-BFQ6WrgT.js"),__vite__mapDeps([570,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:'<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>遇到数据库关键字需要加```符号`，比如</p>\n<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>Index<span class="token punctuation">`</span></span>  <span class="token keyword">from</span> sample<span class="token punctuation">.</span>menu\n</code></pre></div></div>',r:{minutes:12.56,words:3769},t:"基础知识",y:"a"}}],["/dataBase/mysql/jichuzhishi/liecaozuo.html",{loader:()=>a(()=>import("./liecaozuo.html-B3GwBe5u.js"),__vite__mapDeps([571,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>添加字段</h2>
<p>ALTER TABLE 表明 add 字段名称 类型(int,char,VARCHAR...) DEFAULT 默认值&nbsp; 位置（FIRST, AFTER+字段名称）;
示例：</p>
<h3>添加到表字段最后</h3>
<p>ALTER TABLE el_customer add aaa VARCHAR(20) DEFAULT null COMMENT '测试';
Or
alter table TABLE_NAME add column NEW_COLUMN_NAME varchar(20) not null;</p>
<h3>添加到第一个</h3>`,r:{minutes:.74,words:221},t:"列操作",y:"a"}}],["/dataBase/mysql/jichuzhishi/mysqlshujuleixing.html",{loader:()=>a(()=>import("./mysqlshujuleixing.html-Drqxv36Y.js"),__vite__mapDeps([572,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>mysql支持多种类型，大概可以分为三类：数值、日期/时间和字符串类型</p>
<h2>数值类型</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围（有符号）</th>
<th>范围（无符号）</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>tinyint</td>
<td>1 字节</td>
<td>(-128，127)</td>
<td>(0，255)</td>
<td>小整数值</td>
</tr>
<tr>
<td>smallint</td>
<td>2 字节</td>
<td>(-32 768，32 767)</td>
<td>(0，65 535)</td>
<td>大整数值</td>
</tr>
<tr>
<td>mediumint</td>
<td>3 字节</td>
<td>(-8 388 608，8 388 607)</td>
<td>(0，16 777 215)</td>
<td>大整数值</td>
</tr>
<tr>
<td>int或integer</td>
<td>4 字节</td>
<td>(-2 147 483 648，2 147 483 647)</td>
<td>(0，4 294 967 295)</td>
<td>大整数值</td>
</tr>
<tr>
<td>bigint</td>
<td>8 字节</td>
<td>(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td>
<td>(0，18 446 744 073 709 551 615)</td>
<td>极大整数值</td>
</tr>
<tr>
<td>float</td>
<td>4 字节</td>
<td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351   E-38，3.402 823 466 351 E+38)</td>
<td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td>单精度</td>
</tr>
<tr>
<td>浮点数值</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>double</td>
<td>8 字节</td>
<td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4   E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7   E+308)</td>
<td>双精度</td>
</tr>
<tr>
<td>浮点数值</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>decimal</td>
<td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td>依赖于M和D的值</td>
<td>依赖于M和D的值</td>
<td>小数值</td>
</tr>
</tbody>
</table>`,r:{minutes:4.49,words:1347},t:"MySQL数据类型",y:"a"}}],["/dataBase/mysql/jichuzhishi/shiwu.html",{loader:()=>a(()=>import("./shiwu.html-CGVkwl9D.js"),__vite__mapDeps([573,1])),meta:{a:"azrng",d:16758144e5,l:"2023年2月8日",c:["dataBase"],g:["无"],o:!0,e:`<h2>隔离级别</h2>
<h2>参考资料</h2>
<p>数据库事务：<a href="https://www.cnblogs.com/pingguo-softwaretesting/p/14802736.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/pingguo-softwaretesting/p/14802736.html</a>
https://mp.weixin.qq.com/s/vEwB2n0ySOaTtsjcNBIHXg | C# 从代码入门 Mysql 数据库事务</p>
`,r:{minutes:.2,words:59},t:"事务",y:"a"}}],["/dataBase/mysql/jichuzhishi/shujubiao.html",{loader:()=>a(()=>import("./shujubiao.html-BQQnnpjo.js"),__vite__mapDeps([574,1])),meta:{a:"azrng",d:1664496e6,l:"2022年9月30日",c:["dataBase"],g:["无"],o:!0,e:`<h3>创建数据表</h3>
<p>通用语法：
CREATE TABLE table_name (column_name column_type);
以下例子中我们将在runoob数据库中创建数据表runoob_tbl：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>chat.receptionist_buystatus<span class="token punctuation">\`</span></span>
<span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>buystatusId<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">COMMENT</span> <span class="token string">'置忙状态ID'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">COMMENT</span> <span class="token string">'置忙名称'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">COMMENT</span> <span class="token string">'添加时间'</span><span class="token punctuation">,</span>
   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>BuyStatusId<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'置忙状态表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.46,words:737},t:"数据表",y:"a"}}],["/dataBase/mysql/jichuzhishi/suo.html",{loader:()=>a(()=>import("./suo.html-Z-a2Do8I.js"),__vite__mapDeps([575,1])),meta:{a:"azrng",d:16720128e5,l:"2022年12月26日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MySQL数据库的锁，按照作用范围划分为：行级锁、页级锁和表级锁，行级锁是锁定粒度最细的一种锁，能大大减少数据库操作的冲突。</p>
<h2>行级锁</h2>
<p>行级锁又分为共享锁和排他锁两种</p>
<h3>共享锁</h3>
<p>（Share Lock）又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。
如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据
用法
SELECT … LOCK IN SHARE MODE;</p>`,r:{minutes:.98,words:294},t:"锁",y:"a"}}],["/dataBase/mysql/jichuzhishi/suoyin.html",{loader:()=>a(()=>import("./suoyin.html-COVbNBzi.js"),__vite__mapDeps([576,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>索引并不是越多越好，要根据查询针对性的创建，考虑where和order by
尽量避免在where子句中对字段进行null值判断，否则将导致引起放弃使用索引而进行全表扫描
值分布很稀少的字段不适合建索引，例如“性别”这种只有两三个值的字段
使用多列索引时主意顺序和查询条件保持一致，同时删除不必要的单列索引</p>
<h2>索引分类</h2>
<blockquote>
<p>唯一索引：唯一性，指定列不能出现重复数据
主键索引：一般在创建表的时候进行制定，一个表只有一个主键索引
联合索引：在表中两个或者多个列以上的基础创建索引</p>
</blockquote>
<h3>查询索引</h3>`,r:{minutes:6.29,words:1888},t:"索引",y:"a"}}],["/dataBase/mysql/jichuzhishi/utf8heutf8mb4deoubie.html",{loader:()=>a(()=>import("./utf8heutf8mb4deoubie.html-C5MphQ-b.js"),__vite__mapDeps([577,1])),meta:{a:"azrng",d:1642896e6,l:"2022年1月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。当然，为了节省空间，一般情况下使用utf8也就够了。
可以简单的理解 utf8mb4 是目前最大的一个字符编码,支持任意文字。</p>
<p>utf8 是 Mysql 中的一种字符集，只支持最长三个字节的 UTF-8字符，也就是 Unicode 中的基本多文本平面。
Mysql 中的 utf8 为什么只支持持最长三个字节的 UTF-8字符呢？我想了一下，可能是因为 Mysql 刚开始开发那会，Unicode 还没有辅助平面这一说呢。那时候，Unicode 委员会还做着 “65535 个字符足够全世界用了”的美梦。Mysql 中的字符串长度算的是字符数而非字节数，对于 CHAR 数据类型来说，需要为字符串保留足够的长。当使用 utf8 字符集时，需要保留的长度就是 utf8 最长字符长度乘以字符串长度，所以这里理所当然的限制了 utf8 最大长度为 3，比如 CHAR(100) Mysql 会保留 300字节长度。至于后续的版本为什么不对 4 字节长度的 UTF-8 字符提供支持，我想一个是为了向后兼容性的考虑，还有就是基本多文种平面之外的字符确实很少用到。</p>`,r:{minutes:2.96,words:889},t:"utf8 和utf8mb4的区别",y:"a"}}],["/dataBase/mysql/jichuzhishi/yaoshutiaojian.html",{loader:()=>a(()=>import("./yaoshutiaojian.html-CDzRzWsO.js"),__vite__mapDeps([578,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>约束条件就是在给字段加一些约束，使该字段存储的值更加符合我们的预期。
常用约束条件有以下这些
<strong>UNSIGNED</strong>&nbsp;：无符号，值从0开始，无负数
<strong>ZEROFILL</strong>：零填充，当数据的显示长度不够的时候可以使用前补0的效果填充至指定长度,字段会自动添加UNSIGNED
<strong>NOT NULL</strong>：非空约束，表示该字段的值不能为空
<strong>DEFAULT</strong>：表示如果插入数据时没有给该字段赋值，那么就使用默认值
<strong>PRIMARY KEY</strong>：主键约束，表示唯一标识，不能为空，且一个表只能有一个主键。一般都是用来约束id
<strong>AUTO_INCREMENT</strong>：自增长，只能用于数值列，而且配合索引使用,默认起始值从1开始，每次增长1
<strong>UNIQUE KEY</strong>：唯一值，表示该字段下的值不能重复，null除外。比如身份证号是一人一号的，一般都会用这个进行约束
<strong>FOREIGN KEY</strong>：外键约束，目的是为了保证数据的完成性和唯一性，以及实现一对一或一对多关系</p>`,r:{minutes:1.05,words:316},t:"约束条件",y:"a"}}],["/dataBase/mysql/jichuzhishi/zhihangshunxu.html",{loader:()=>a(()=>import("./zhihangshunxu.html-Ctriucuv.js"),__vite__mapDeps([579,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<table>
<thead>
<tr>
<th>参数</th>
<th>排序</th>
</tr>
</thead>
<tbody>
<tr>
<td>Max&nbsp; where</td>
<td>Max&gt;where</td>
</tr>
<tr>
<td>Max   where&nbsp; Group by</td>
<td>Group&gt;Max&gt;where</td>
</tr>
<tr>
<td>Max   group by</td>
<td>Group   by&gt;max</td>
</tr>
<tr>
<td>where多个条件</td>
<td>从左到右依次执行，最好将筛选条件大的放前面</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>`,r:{minutes:.25,words:74},t:"执行顺序",y:"a"}}],["/dataBase/mysql/jichuzhishi/zhihangyugou.html",{loader:()=>a(()=>import("./zhihangyugou.html-CeCkS1Xo.js"),__vite__mapDeps([580,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>默认MySQL以；号结束，但是有些时候要把多行SQL语句作为一段进行执行，那么就需要使用DELIMITER&nbsp;
示例：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $$ 
<span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>updateegopriceondelete<span class="token punctuation">\`</span></span>$$ 
<span class="token keyword">CREATE</span>
<span class="token keyword">TRIGGER</span> <span class="token identifier"><span class="token punctuation">\`</span>updateegopriceondelete<span class="token punctuation">\`</span></span><span class="token keyword">AFTER</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">\`</span>customerinfo<span class="token punctuation">\`</span></span> 
<span class="token keyword">FOR EACH ROW</span> <span class="token keyword">BEGIN</span> 
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> egoprice WHEREcustomerId<span class="token operator">=</span>OLD<span class="token punctuation">.</span>customerId<span class="token punctuation">;</span> 
<span class="token keyword">END</span>$$ 
<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.3,words:91},t:"执行语句",y:"a"}}],["/dataBase/mysql/jinjie/federated.html",{loader:()=>a(()=>import("./federated.html-7qFYuILc.js"),__vite__mapDeps([581,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>实现的需求是我想在a库的user表添加数据的时候，同时自动在b库的user表中添加一条数据
相当于主库和从库，主库无论做任何操作都会自动映射到从库中，以此保持数据一致性。</p>
<h4>查询是否支持</h4>
<p>查询MySQL中是否有Federated这个引擎</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">show</span> engines<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.15,words:344},t:"Federated",y:"a"}}],["/dataBase/mysql/jinjie/zhucongfuzhi.html",{loader:()=>a(()=>import("./zhucongfuzhi.html-Dff7o3NB.js"),__vite__mapDeps([582,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><img src="/common/1614056262236-4899a721-3403-46ad-9e2e-eadb3ccac404.jpeg" alt="image.jpeg" loading="lazy">
（1）Master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；
（2）Slave将Master的二进制日志事件(binary log events)拷贝到它的中继日志(relay log)；
注：Slave服务器中有一个I/O线程(I/O Thread)在不停地监听Master的二进制日志(Binary Log)是否有更新：如果没有它会睡眠等待Master产生新的日志事件；如果有新的日志事件(Log Events)，则会将其拷贝至Slave服务器中的中继日志(Relay Log)。
（3）Slave重做中继日志(Relay Log)中的事件，将Master上的改变反映到它自己的数据库中。
注：Slave服务器中有一个SQL线程(SQL Thread)从中继日志读取事件，并重做其中的事件从而更新Slave的数据，使其与Master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中继日志的开销很小。</p>`,r:{minutes:2.71,words:812},t:"主从复制",y:"a"}}],["/dataBase/mysql/mysqlhanshu/duibi.html",{loader:()=>a(()=>import("./duibi.html-BWTGIsk7.js"),__vite__mapDeps([583,1])),meta:{a:"azrng",d:1649808e6,l:"2022年4月13日",c:["dataBase"],g:["无"],o:!0,e:`<h2>count(*)、count(1)、count(列)</h2>
<h3>执行效果</h3>
<p>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL &nbsp;
count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL &nbsp;
count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</p>
<h3>执行效率上</h3>
<p>列名为主键，count(列名)会比count(1)快 &nbsp;
列名不为主键，count(1)会比count(列名)快 &nbsp;
如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（<em>） &nbsp;
如果有主键，则 select count（主键）的执行效率是最优的 &nbsp;
如果表只有一个字段，则 select count（</em>）最优。</p>`,r:{minutes:.82,words:245},t:"对比",y:"a"}}],["/dataBase/mysql/mysqlhanshu/mysqlhanshu.html",{loader:()=>a(()=>import("./mysqlhanshu.html-9h_U-VjR.js"),__vite__mapDeps([584,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>筛选</h2>
<h3>Limit</h3>
<p>limit  跳过的条数，请求的数量(每页的数量)</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- MySql查询前10条数据sql语句为</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- 通常0是可以省略的，直接写成 limit 10。0代表从第0条记录后面开始，也就是从第一条开始。</span>

<span class="token comment">-- 只要查询出来数据的第一条记录，那么需要写成</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SU_supplycontract t   <span class="token keyword">WHERE</span> supplyContractCode<span class="token operator">=</span><span class="token string">"CRM20180813002"</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用合理的分页方式来提高分页的效率，比如我们查询id大于xxx的然后取十条</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">&gt;</span> <span class="token number">100000</span> <span class="token keyword">limit</span> <span class="token number">20</span>
<span class="token comment">-- 如果上述SQL语句使用(limit 100000, 20)做分页的时候，随着表数据量的增加，直接使用limit语句会越来越慢，此时，可以通过取前一页的最大ID，以此为起点，再进行limit操作，效率提升显著。</span>


<span class="token number">1.</span> 查询员工表中工资降序的前<span class="token number">5</span>条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token number">2.</span> 查询员工表中工资降序的第<span class="token number">3</span>页的<span class="token number">4</span>条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token number">3.</span>查询商品表中价格升序的前<span class="token number">10</span>条数据
<span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t_item  <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token number">4.</span>查询商品价格低于<span class="token number">100</span>元的商品信息第三页的三条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> price<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token keyword">limit</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token number">5.</span>查询<span class="token number">10</span>号和<span class="token number">30</span>号部门的员工工资在前三名的员工信息
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span>  emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">or</span> deptno<span class="token operator">=</span><span class="token number">30</span> <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:14.95,words:4485},t:"MySQL函数",y:"a"}}],["/dataBase/mysql/mysqlhanshu/shujuleixing.html",{loader:()=>a(()=>import("./shujuleixing.html-vMIywKZp.js"),__vite__mapDeps([585,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<p>------字符串相关函数------
1.获取字符串的长度 &nbsp; char_length(str);
获取所有员工的姓名和姓名的字符长度：
select ename,char_length(ename) from emp;
2.获取字符串 &nbsp;&nbsp;&nbsp;&nbsp; instr(str,substr);
select instr(‘abcdefgh’,’d’);
3.插入字符串 insert(str,start,length,newstr);
select insert (‘abcdefg’,3,2,’m’);
4.转大写&nbsp; 转小写
select upper(‘abc’),lower(‘NBA’);
5.左边截取和右边截取
select left(‘abcdefg’,2),right(‘abcdefg’,2);
6.去两端空白
select trim(‘ a b ’);
7.截取字符串
select substring (‘abcdefg’,3,2);
8.重复&nbsp; repeat(str,count);
select repeat(‘ab’,2);
9.替换 &nbsp; replace(str,old new);
select replace(‘This is my sql’,’my’,’your’);
10.反转 &nbsp; reverse (str);
select reverse(‘abc’);
&nbsp;
&nbsp;
------数学相关函数------
1.向下取整floor(num)
select floor(3.84);
2.四舍五入round(num)
select round(3.84);
round(num,m); m代表小数位数
select round(3.123456,3);//3.123
3.非四舍五入 truncate(num,m)
select truncate(3.84567,3);//3.845
4.随机数rand()
select floor(rand()<em>6)+5;//&nbsp; 5-10随机数
select floor(rand()<em>6)+3; //3-8 随机数
&nbsp;
&nbsp;
------分组查询------ group by 分组关键词
分组函数与聚合函数结合使用，以组为单位统计。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 题目中每个xxx 就在group by后面写xxx
1.查询每个部门的最高工资
select deptno,max(sal) from emp group by deptno;
2.查询每个部门的平均工资
select deptno, avg(sal) from emp group by deptno;
3.查询每个分类下商品的最低价格
select category_id,min(price) from t_item group by category_id;
4.查询每个部门中工资大于1500的人数
select deptno,count(</em>) from emp where sal&gt;1500 group by deptno;
5.查询每个领导的手下人数
select mgr,count(</em>) from emp where mgr is not null group by mgr;
6.查询每个商品分类的库存总量
select category_id,sum(num) from t_item group by category_id;
&nbsp;
&nbsp;
------多字段分组查询------
1.查询每个部门下每个领导的手下人数
select deptno,mgr,count(<em>) from emp where mgr is not null group by deptno,mgr;
&nbsp;
------having------
a.where后面只能写普通字段的条件，不能再写聚合函数
b.having后面可以写普通字段条件也可以写聚合函数，但是推荐在having后面只写聚合函数
c.having写在group by 后面。
格式： select * from 表名 where ..... group by xxx&nbsp; having .... order by ..... limit ...;
2. 查询每个部门的平均工资，要求平均工资大于2000
select&nbsp; deptno,avg(sal) from emp group by deptno having avg(sal)&gt;2000;
3. 查询每个分类的平均单价，过滤掉平均单价低于100的。
select&nbsp; category_id,avg(price) from&nbsp; t_item group by category_id having&nbsp; avg(price)&gt;=100;
&nbsp;
####练习####
1.查询每个分类商品的库存总量，要求总量高于19999
select category_id, sum(num) from t_item&nbsp; group by&nbsp; category_id having sum(num)&gt;19999;
2.查询分类id为238,917的两个分类的平均单价各是多少
select&nbsp; category_id,avg(price) from t_item where category_id =238 or category_id=917 group by category_id;
3.查询emp表中每个部门的平均工资高于2000的部门编号，部门人数，平均工资 最后根据平均工资降序排序
select deptno,count(</em>),avg(sal) from emp group by&nbsp;deptno having avg(sal)&gt;2000 order by avg(sal) desc;
4.查询emp表中工资在1000-3000之间的员工，每个部门的编号，工资总和，平均工资，要求过滤掉平均工资低于2000的部门，按照工资总和降序排序
select deptno,sum(sal),avg(sal) from emp where sal between 1000 and 3000 group by deptno&nbsp; having avg(sal) &gt;2000 order by sum(sal) desc;
5. 查询emp表中不是以s开头每个职位的名字，人数，工资总和，最高工资，过滤掉平均工资是3000的职位，根据人数升序排序，如果一致根据工资总和降序排序
select job,count(<em>),sum(sal),max(sal) from emp where job not like ‘s%’group by job having avg(sal)!=3000 order by count(</em>),sum(sal) desc;
6.查询emp表每年入职的人数
select extract(year from hiredate) y,count(*) from emp group by y;
&nbsp;
&nbsp;
------子查询------</p>`,r:{minutes:8.59,words:2576},t:"数据类型",y:"a"}}],["/dataBase/mysql/shujukuyouhuajilu/chaxunsql.html",{loader:()=>a(()=>import("./chaxunsql.html-Bh2JOYxP.js"),__vite__mapDeps([586,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>可通过开启慢查询日志找出较慢的SQL
sql语句尽可能简单：一个sql只能在一个cpu运算；大语句拆小语句，减少锁时间；一条大SQL可以堵死整个库
or改写成in：or的效率是n级别，in的效率是log（n）级别，in的个数建议控制在200以内
不用函数和触发器，在应用程序实现
避免%xx式查询
少用join
使用同类型进行比较，比如‘123’和‘123’比，123和123比
尽量避免在where子句中使用！=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描
对于连续数值，使用between不用in：select id from t where num between 1 and 5
列表数据不要拿全表，要使用limit来分页，每页数量也不要太大</p>`,r:{minutes:.81,words:242},t:"查询SQL",y:"a"}}],["/dataBase/mysql/shujukuyouhuajilu/douxiefenli.html",{loader:()=>a(()=>import("./douxiefenli.html-CC-HThZR.js"),__vite__mapDeps([587,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>基本逻辑就是让主数据库处理事务性增删改操作，而从数据库处理select查询操作，数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。
&nbsp;
使用原因：因为写比读更加耗时，读写分离解决的是数据库的写入，影响了查询的效率。
&nbsp;
原理：在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全。</p>
`,r:{minutes:.64,words:191},t:"读写分离",y:"a"}}],["/dataBase/mysql/shujukuyouhuajilu/jianbiaoyugouyouhua.html",{loader:()=>a(()=>import("./jianbiaoyugouyouhua.html-CLcUUqnW.js"),__vite__mapDeps([588,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>数据库使用字符集是：UTF8,排序规则是：utf8_general_ci；
永远为每个表设置一个ID作为主键，最好是int类型，并自动设置&nbsp;AUTO_INCREMENT标志。使用varchar类型当做主键使性能下降，然后如果设置了自增的话如何导出导入会影响；
尽可能使用not null，除非特殊情况必须要使用null；
如果存储一些比较有限而且固定的值，比如性别、国家这种，推荐使用enum而不是varchar；
如果一个表只有几列。使用MEDIUMINT, SMALLINT 或是更小的 TINYINT会更好。
如果不需要记录时分秒，使用Date（YYYY-MM-DD）比DateTime（YYYY-MM-DD HH:mm:ss）更好&nbsp;，尽量使用trmestamp，因为其存储空间只需要datetime的一半。对于只需要精确到某一天的数据类型，建议使用DATE类型，因为他的存储空间只需要3个字节，比TIMESTAMP还少。不建议通过INT类型类存储一个unix timestamp 的值，因为这太不直观，会给维护带来不必要的麻烦，同时还不会带来任何好处。
不到万不得已不要使用double，不仅仅是存储长度问题，同是存在精确性的问题。也不建议使用decimal，建议乘以固定备注转换成整数存储，可以节省存储空间。
对于整数的存储，在数据量较大的情况下，建议区分开tinyint/int/bigint的选择，能确定不会使用复数的情况，建议添加unsigned定义。（自增默认就是这种类型，Navicat中对数值类型字段设置无符号）
对于字符类型，如果是固定长度，建议用char，不定长度尽量使用varchar，且仅仅设置适当的最大长度。guid应该使用char(36)
可以针对单个字段设置单独的字符集，这个具体还需要查阅资料
适当拆分，比如我们表中存在类似的text或者很大的varchar类型的大字段的时候，如果我们大部分访问这个表都不需要这个字段，那么我们就应该把这单独拆分到另外的独立表中，以减少常用数据所占用的存储空间。
尽量使用not null，设置null会增加sql的io量，所以尽量确保default的值不是null。
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<a href="https://www.cnblogs.com/pengyunjing/p/6591676.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/pengyunjing/p/6591676.html</a></p>`,r:{minutes:2.15,words:646},t:"建表语句优化",y:"a"}}],["/dataBase/mysql/shujukuyouhuajilu/jinshencaozuo.html",{loader:()=>a(()=>import("./jinshencaozuo.html-DLi-qwUq.js"),__vite__mapDeps([589,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>1.如果要执行一个大的delete和insert你需要小心，因为这两个操作会锁表，表一旦锁住，别的操作就进不来了。比如说删除一些然后睡会。</p>
`,r:{minutes:.27,words:81},t:"谨慎操作",y:"a"}}],["/dataBase/mysql/shujukuyouhuajilu/shujukuyouhuajilu.html",{loader:()=>a(()=>import("./shujukuyouhuajilu.html-ClHRL_c3.js"),__vite__mapDeps([590,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h2>修改语句</h2>
<p>问题1：修改3万多条数据运行时间1秒多
UPDATE dynews_news a set a.StickState = 2 WHERE a.StickEndTime &lt;= sysdate() and a.IsStick = 1 and a.F_DeleteMark = 0 and a.F_EnabledMark = 1;
解决方案：对IsStick 、DeleteMark 、EnabledMark 添加普通索引；</p>
<h2>查询语句</h2>
<p>问题1：查询10000行到10010行
完美方案是：
SELECT * FROM table WHERE id BETWEEN 1000000 AND 1000010;
如果id不是连续的一段，那么就使用下面的的方法：
SELECT * FROM table WHERE id IN(10000, 100000, 1000000...);
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<a href="https://www.cnblogs.com/itdragon/p/8146439.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/itdragon/p/8146439.html</a>
&nbsp;
<a href="https://www.cnblogs.com/youyoui/p/7851007.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/youyoui/p/7851007.html</a>
&nbsp;
<a href="https://mp.weixin.qq.com/s/jm4J15_yqosBFNmn5f9R-w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/jm4J15_yqosBFNmn5f9R-w</a></p>`,r:{minutes:.52,words:157},t:"数据库优化记录",y:"a"}}],["/dataBase/mysql/yudaodewenti/diguichubulaishangji.html",{loader:()=>a(()=>import("./diguichubulaishangji.html-Bal8we8i.js"),__vite__mapDeps([591,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<p>场景描述：现在是做一个左边的树形菜单，根据用户角色找出来可以访问的模块页面，但是因为最外层那个地方添加角色授权的不能勾选，导致查询的时候出不来。
初识的查询思路是：首先根据用户找出来他的角色ID，然后根据授权表和模块表去查询用户可以访问的页面，然后根据查出来的东西进行递归成一个树形菜单。</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_ParentId<span class="token punctuation">,</span>a<span class="token punctuation">.</span>PltSystemId<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_EnCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_SortCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_FullName<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_Icon<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_UrlAddress<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_Target<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_IsMenu<span class="token punctuation">,</span>F_AllowEdit<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_AllowDelete<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_EnabledMark<span class="token punctuation">,</span>a<span class="token punctuation">.</span>F_Description<span class="token punctuation">,</span>c<span class="token punctuation">.</span>F_ObjectId  
<span class="token keyword">from</span> plt_roleauthorize c <span class="token keyword">LEFT</span> 
<span class="token keyword">JOIN</span> sys_module a <span class="token keyword">on</span> c<span class="token punctuation">.</span>F_ItemId<span class="token operator">=</span>a<span class="token punctuation">.</span>F_Id 
<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>F_DeleteMark<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>F_EnabledMark<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> c<span class="token punctuation">.</span>F_ObjectId<span class="token operator">=</span><span class="token string">'{roleid}'</span>
</code></pre></div>`,r:{minutes:1.62,words:486},t:"递归出不来上级",y:"a"}}],["/dataBase/mysql/yudaodewenti/issue.html",{loader:()=>a(()=>import("./issue.html-NSttXyZk.js"),__vite__mapDeps([592,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["dataBase"],g:["无"],o:!0,e:`<h2>安装mysql提示已经存在</h2>
<p>安装My SQL的时候出现了
“The service already exists
&nbsp;The current server installed: D:\\mysql\\mysql-5.7.18-win64\\mysql-5.7.18-winx64\\bin\\mysqld MySQL"
但是并没有找到该文件夹，之前已经被删除了。
<img src="/common/1614062670615-a4c9014e-992a-4843-b807-1cfbd5094c32.png" alt="image.png" loading="lazy">
原因：原先安装的mysql没有卸载完，服务没有删除掉。
解决方法：
1、在cmd中输入”sc query mysql”查看名为mysql的服务
<img src="/common/1614062670622-86c1e0c0-4c7e-4673-bf27-6a60509a89d4.png" alt="image.png" loading="lazy"></p>`,r:{minutes:6.57,words:1972},t:"Issue",y:"a"}}],["/dataBase/mysql/yudaodewenti/netFrameworkUse.html",{loader:()=>a(()=>import("./netFrameworkUse.html-i3OZjzva.js"),__vite__mapDeps([593,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<h2>MySql.Data</h2>
<p>当前MySQL数据库中，版本使用的是mysql-5.7.26-winx64
首先需要安装插件：
<img src="/common/1609051365516-2a2c78b3-811d-42cb-aa75-345dfc0e28ad.png" alt="image.png" loading="lazy">
或者使用了另一个组合
mysql-for-visualstudio-1.2.8 搭配mysql-connector-net-6.10.7
安装也需要注意先后步骤，不然有一部分安装不上。先安装MySql Server，再安装MySql for VS，再安装Connector/ODBC，重点来了，一定要最后安装Connector/NET，然后创建MVC项目，然后再nuget中安装</p>`,r:{minutes:.84,words:251},t:"EF连接MySQL",y:"a"}}],["/dataBase/mysql/zhihangjihua/jiancesuoyinshifoushengxiao.html",{loader:()=>a(()=>import("./jiancesuoyinshifoushengxiao.html-DD_K30X3.js"),__vite__mapDeps([594,1])),meta:{a:"azrng",d:16936992e5,l:"2023年9月3日",c:["dataBase"],g:["无"],o:!0,e:`<p><img src="/common/1609051305019-77f9900a-b535-4618-8db5-50cb410a9a44.png" alt="image.png" loading="lazy">
EXPLAIN列的解释：
table：显示这一行的数据是关于哪张表的。
type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL。
possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句。
key： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MySQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MySQL忽略索引。
key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好。
ref：显示索引的哪一列被使用了，如果可能的话，是一个常数。
rows：MySQL认为必须检查的用来返回请求数据的行数。
Extra：关于MySQL如何解析查询的额外信息。
extra列返回的描述的意义：
&nbsp;
Distinct: 一旦MySQL找到了与行相联合匹配的行，就不再搜索了。
Not exists: MySQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了。
Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，MySQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。
Using filesort: 看到这个的时候，查询就需要优化了。MySQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。
Using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。
Using temporary: 看到这个的时候，查询需要优化了。这里，MySQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上。
Where used: 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）。
system: 表只有一行：system表。这是const连接类型的特殊情况。
const: 表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MySQL先读这个值然后把它当做常数来对待。
eq_ref: 在连接中，MySQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。
ref: 这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好。
range: 这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况。
index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。
ALL: 这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。</p>`,r:{minutes:3.52,words:1055},t:"检测索引是否生效",y:"a"}}],["/dataBase/oracle/dotnetcaozuo/dotnetcaozuo.html",{loader:()=>a(()=>import("./dotnetcaozuo.html-B6gPShZZ.js"),__vite__mapDeps([595,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span><span class="token keyword">add</span> name<span class="token operator">=</span><span class="token string">"DbContext"</span> connectionString<span class="token operator">=</span><span class="token string">"Data Source= (DESCRIPTION =     (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.110.186)(PORT = 1521))    (CONNECT_DATA =       (SERVER = DEDICATED)       (SERVICE_NAME = ORANEWLE 这个需要改)    )   );User ID=DYZHCSLEAPP这个需要改;Password=NYEKTLEAPP这个需要改;Persist Security Info=True"</span> providerName<span class="token operator">=</span><span class="token string">"Oracle.ManagedDataAccess.Client"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token keyword">add</span> name<span class="token operator">=</span><span class="token string">"OracleDbContext"</span> providerName<span class="token operator">=</span><span class="token string">"Oracle.ManagedDataAccess.Client"</span> connectionString<span class="token operator">=</span><span class="token string">"User Id=oracle_user;Password=oracle_user_password;Data Source=oracle"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.9,words:270},t:"dotNet操作",y:"a"}}],["/dataBase/oracle/dotnetcaozuo/oraclehelper.html",{loader:()=>a(()=>import("./oraclehelper.html-B5aE5cat.js"),__vite__mapDeps([596,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>  <span class="token operator">&lt;</span>appSettings<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token keyword">add</span> <span class="token keyword">key</span><span class="token operator">=</span><span class="token string">"ConnectionString"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"Data Source= (DESCRIPTION =    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.10)(PORT = 1521))     (CONNECT_DATA =       (SERVER = DEDICATED)       (SERVICE_NAME = LYKG)     )  );User ID==LYKG;Password==Dyzhcs;Persist Security Info=True;Connection Lifetime=20;Max Pool Size=500"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>appSettings<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:6.55,words:1964},t:"OracleHelper",y:"a"}}],["/dataBase/oracle/oracleshiyongwenti/11gchuangjianshujuku.html",{loader:()=>a(()=>import("./11gchuangjianshujuku.html-Cbeid7MT.js"),__vite__mapDeps([597,1])),meta:{a:"azrng",d:16721856e5,l:"2022年12月28日",c:["dataBase"],g:["无"],o:!0,e:`<p>方法/步骤
①. 按住键盘上Windows键，打开开始菜单，找到Database Configuration Assitant并打开
<img src="/common/1614064424438-919e5226-858d-4542-8414-15d67a265803.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
②. 打开数据库配置助手Database Configuration Assitant，单击“下一步”;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 步骤1：选择“创建数据库”，单击“下一步”
<img src="/common/1614064424449-6b8b4135-5b25-492a-8179-8650b61a0f20.jpeg" alt="image.jpeg" loading="lazy">
<img src="/common/1614064424459-1631a415-2ff0-4271-be20-8a3170e8cc5e.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤2：选择“一般用途或事务处理”，单击“下一步”；
&nbsp;&nbsp;&nbsp; 步骤3：设置数据库的名称和实例名，两者可设置相同，也可以不同，单击“下一步”
<img src="/common/1614064424465-310837b1-c5aa-48a8-9656-e78b0d2f8f84.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤4：管理选项配置，不勾选配置Enterprise Manager，单击“下一步”；
<img src="/common/1614064424462-2c0280d7-6d9c-4739-a2fb-6b1e69cf8a75.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤5：数据库身份证明,可以为不同的账户分别设置不同的管理口令，也可以为所有账户设置同一口令，单击“下一步”
<img src="/common/1614064424482-cb48827b-c4f1-4fa5-b872-9d029f6b7dec.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤6：数据库文件所在位置，默认存储类型：文件系统，存储位置：使用模版中的数据库文件位置，也可以自己指定存储路径，单击“下一步”；
<img src="/common/1614064424468-26a605bf-5e52-44d8-8127-746ee6bd5c6b.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤7：恢复配置，指定快速恢复区
<img src="/common/1614064424478-2c8bc9f2-5577-42f6-8e20-1015a6ea80c7.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤8：数据库内容，根据需要，选择是否添加示例方案，单击“下一步”；
&nbsp;&nbsp;&nbsp; 步骤9：初始化参数，设置内存、字符集等，单击“下一步”
<img src="/common/1614064424491-1be84c13-3c51-4f6e-8812-d9dfae83398a.jpeg" alt="image.jpeg" loading="lazy">
一般这里服务器上面创建的内存大小20G就可以了
<img src="/common/1614064424637-8a04ec95-6b2b-4950-a0b8-c8688ef8e78c.jpeg" alt="image.jpeg" loading="lazy">
<img src="/common/1614064424526-255b036d-0c2f-40d1-91be-fed4e9dd4d0d.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤10：数据库存储，控制文件、数据文件、重做日志文件位置设置，单击“下一步”；
<img src="/common/1614064424514-c642404b-def9-4ff1-8a40-f85cbd1d7829.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;&nbsp;&nbsp; 步骤11 ：创建选项，创建数据库，生成脚本，单击“完成”，开始创建数据库
<img src="/common/1614064424509-6335aa67-1dda-481b-958e-0c73fb66f064.jpeg" alt="image.jpeg" loading="lazy">
<img src="/common/1614064424548-32a11630-4621-4047-83df-8fc4dfa94fad.jpeg" alt="image.jpeg" loading="lazy">
<strong>创建用户与生成表空间代码</strong>
注意： 在创建表空间的时候要注意路径必须符合Oracle安装路径。
<img src="/common/1614064424519-b707b0fc-c80c-457b-9b57-950c4aefeb04.png" alt="image.png" loading="lazy"></p>`,r:{minutes:1.83,words:548},t:"11g创建数据库",y:"a"}}],["/dataBase/oracle/oracleshiyongwenti/oracleshiyongwenti.html",{loader:()=>a(()=>import("./oracleshiyongwenti.html-CNL6U0Nx.js"),__vite__mapDeps([598,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>乱码</h2>
<p>打开SQL plus后发现现实文字是乱码，这个时候需要点击右键属性，然后勾选旧版控制台。并重新打开sqlplus,"修改默认代码页"，把“437 OEM 美国”改为“936 ANSI/OEM 简体中文（GBK）”。
创建数据库时候提示Enterprise Manager配置失败的解决办法 无法打开OEM的解决办法&nbsp; <a href="https://blog.csdn.net/zyf19930610/article/details/51262253" target="_blank" rel="noopener noreferrer">链接</a>
连接数据库时候一直提示用户名不存在，但是真实存在该用户，并且已经赋予权限，并且可以在本地数据库工具中可以连接上，最后解决办法：不能将用户名和数据库名称设置一致，如果设置一致可能就会出这个错误。</p>`,r:{minutes:12.48,words:3743},t:"Oracle使用问题",y:"a"}}],["/dataBase/oracle/shujukubeifenhehaiyuan/fuwuqidingshijihua.html",{loader:()=>a(()=>import("./fuwuqidingshijihua.html-Cfbt9uHx.js"),__vite__mapDeps([599,1])),meta:{a:"azrng",d:16721856e5,l:"2022年12月28日",c:["dataBase"],g:["无"],o:!0,e:`<p>需求：每天定时备份一次数据库，然后每次备份的时候删除7天前的备份记录
&nbsp;
1、我们创建一个文档（以城市之窗项目为例）
&nbsp;
@echo off
echo 正在备份城市之窗数据库，请稍等......
expdp DYZHCSLEAPP/NYEKTLEAPP@ORANEWLE dumpfile=%date:<sub>0,4%%date:</sub>5,2%%date:~8,2%.DMP LOGFILE=%date:<sub>0,4%%date:</sub>5,2%%date:~8,2%.log schemas=(DYZHCSLEAPP)
&nbsp;
echo 删除过久的备份记录
forfiles /P D:\\app\\Administrator\\admin\\ORANEWLE\\dpdump /M *.dmp /S /D -7 /C "cmd /c del /F /s /q @file"
forfiles /P D:\\app\\Administrator\\admin\\ORANEWLE\\dpdump /M *.log /S /D -7 /C "cmd /c del /F /s /q @file"
&nbsp;
echo 任务完成
exit
&nbsp;
2、把这个文件修改成bat文件
<img src="/common/1614064792022-c82d9ed4-424e-4792-9355-b3710a9be2c1.png" alt="image.png" loading="lazy">
3、创建windows任务计划
&nbsp;
<img src="/common/1614064792037-f316543f-bd83-44de-ab97-1529323d49f4.png" alt="image.png" loading="lazy">
4、创建任务
<img src="/common/1614064792039-1253c783-3a32-4933-85f4-95f2adf91725.png" alt="image.png" loading="lazy">
5、开始设置选项，这几个都要选择
<img src="/common/1614064792037-7a355def-55ff-4931-95e4-79114125a136.png" alt="image.png" loading="lazy">
6、新建触发器
<img src="/common/1614064792049-be296c5e-3ec2-4594-aef3-dd2a6be5bce9.png" alt="image.png" loading="lazy">
7、新建操作
<img src="/common/1614064792044-e755efef-fff4-47d3-a363-f6ba90618bc7.png" alt="image.png" loading="lazy">
8、条件上面没有特殊的操作
<img src="/common/1614064792055-4c2a7a6a-d06c-4620-a50e-e7fd868d1cea.png" alt="image.png" loading="lazy">
9、设置
<img src="/common/1614064792051-a2db2806-00c6-40ab-ba7f-457481768dbb.png" alt="image.png" loading="lazy">
10、设置完毕
等待第二天看定时任务是否正常执行。</p>`,r:{minutes:1.08,words:325},t:"服务器定时计划",y:"a"}}],["/dataBase/oracle/shujukubeifenhehaiyuan/shujukubeifenhehaiyuan.html",{loader:()=>a(()=>import("./shujukubeifenhehaiyuan.html-DIvbci6J.js"),__vite__mapDeps([600,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>1、一般情况下，数据库备份导出的是一个脚本文件，这个脚本文件里面包含了用户名称以及表空间名称；所以如果备份时候要创建相同的表空间和用户名称。
举例说明，比如使用的客户端是sqldeveloper，那么就是用上面工具里面的导出按钮进行导出成一个脚本文件。
2、需要注意查看原数据库用户名、密码、服务器名称、所属表空间、所属临时表空间</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>先查看源数据库是属于哪个表空间等等，然后导出为dmp格式，还原数据库时候需要先创建数据库，创建数据库是使用<span class="token keyword">Database</span> Configuration Assistant工具进行创建数据库，然后使用cmd去连接数据库
sqlplus 全局数据库名<span class="token operator">/</span>命令  <span class="token keyword">as</span> sysdba
创建表空间：
如果放在一个文件夹中，那么这个文件夹必须提前先创建好
<span class="token keyword">create</span> <span class="token keyword">tablespace</span> 表空间名称 datafile <span class="token string">'F:\\HYInstitute\\HYINSTITUTE.DBF'</span> size <span class="token number">1000</span>M autoExtend <span class="token keyword">on</span><span class="token punctuation">;</span>
然后创建临时表空间
<span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> CCEN_TMP  tempfile <span class="token string">'E:\\app\\Administrator\\admin\\tablespace_tmp\\CCEN_temp.dbf'</span> size  <span class="token number">1000</span>M autoExtend <span class="token keyword">on</span><span class="token punctuation">;</span>
创建用户：
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名 IDENTIFIED <span class="token keyword">BY</span> 口令 <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span>  表空间名称<span class="token punctuation">;</span>
或者
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> DYZHCSYKT  IDENTIFIED <span class="token keyword">BY</span> DYZHCSYKT <span class="token keyword">DEFAULT</span> <span class="token keyword">tablespace</span> CCEN <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> CCEN_TMP<span class="token punctuation">;</span>  
给用户赋权限：
<span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span> resource<span class="token punctuation">,</span>dba <span class="token keyword">to</span> 用户名<span class="token punctuation">;</span>
最后打开第三方客户端，然后使用系统用户名称、口令等进行连接，然后运行备份的dmp文件。
打开cmd运行框，运行
imp tianzhi_smart<span class="token operator">/</span>tianzhi_smart<span class="token variable">@192.168.10.129</span>:<span class="token number">1521</span><span class="token operator">/</span>orclfile<span class="token operator">=</span><span class="token string">'E:\\tianzhi_smart.dmp'</span> <span class="token keyword">full</span><span class="token operator">=</span>y<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.6,words:2580},t:"数据库备份和还原",y:"a"}}],["/dataBase/oracle/anzhuang/oracleinstallclient12_2anzhuangjiaocheng.html",{loader:()=>a(()=>import("./oracleinstallclient12_2anzhuangjiaocheng.html-BvLFNdmW.js"),__vite__mapDeps([601,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<p>一、Oracle Install Client12.2下载地址：
<a href="http://www.oracle.com/technetwork/cn/database/features/instant-client/index-097480.html" target="_blank" rel="noopener noreferrer">http://www.oracle.com/technetwork/cn/database/features/instant-client/index-097480.html</a>
里面有很多版本可供下载，但是要注意，客户端是多少位的下载多少位，不要因为系统是64位的就下载64位的。
二、配置
把下载的instantclient-basic-windows.x64-12.2.0.1.0.zip压缩包解压，放到D:\\Oracle \\instantclient_12_2 目录下。
在“环境变量”的“系统变量”中增加：</p>`,r:{minutes:1.37,words:412},t:"Oracle Install Client12.2安装教程",y:"a"}}],["/dataBase/oracle/anzhuang/winx64_12201_clientanzhuang.html",{loader:()=>a(()=>import("./winx64_12201_clientanzhuang.html-B3GLMzcL.js"),__vite__mapDeps([602,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<p><img src="/common/1614064357249-4ab37afa-d3aa-4fa1-b352-34a94b310b0a.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1614064357254-5f5bd039-7020-4f07-86c1-52c167f233cb.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1614064357254-49dcb59e-1382-4bcb-bbfb-4007ebf9abb9.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1614064357231-76669f93-29cf-4d5e-b059-73455d1c3f15.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1614064357331-589c8f70-f181-43c2-b94a-880f8c014b41.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.21,words:62},t:"winx64_12201_client安装",y:"a"}}],["/dataBase/postgresql/biaoziduanleixing/biaoziduanleixing.html",{loader:()=>a(()=>import("./biaoziduanleixing.html-DcYUw-J-.js"),__vite__mapDeps([603,1])),meta:{a:"azrng",d:16795296e5,l:"2023年3月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>时间</h2>
<p>pg数据库有两个时间类型<code>timestamp</code>和<code>timestamptz</code>，其中<code>timestamp</code>是<code>timestamp without time zone</code>的别名，<code>timestamptz</code>是<code>timestamp with time zone</code>的别名。</p>
<ul>
<li>timestamp应存储所在时区的本地时间</li>
<li>timestamptz 应存储utc时间</li>
</ul>
<h2>字符串</h2>
`,r:{minutes:1.03,words:310},t:"表字段类型",y:"a"}}],["/dataBase/postgresql/biaoziduanleixing/shijianchuli.html",{loader:()=>a(()=>import("./shijianchuli.html--stlkk2t.js"),__vite__mapDeps([604,1])),meta:{a:"azrng",d:1693008e6,l:"2023年8月26日",c:["dataBase"],g:["无"],o:!1,e:`<h2>数据库层次</h2>
<h3>时间类型</h3>
<p>对于pg数据库有两个时间类型<code>timestamp</code>和<code>timestamptz</code>，其中<code>timestamp</code>是<code>timestamp without time zone</code>的别名，<code>timestamptz</code>是<code>timestamp with time zone</code>的别名。</p>
<ol>
<li><code>timestamp</code>应存储所在时区的本地时间</li>
<li><code>timestamptz</code>应存储utc时间</li>
</ol>`,r:{minutes:7.66,words:2297},t:"时间处理",y:"a"}}],["/dataBase/redis/anzhuang/bushufangan.html",{loader:()=>a(()=>import("./bushufangan.html-DbogAIg9.js"),__vite__mapDeps([605,1])),meta:{a:"azrng",d:16901568e5,l:"2023年7月24日",c:["dataBase"],g:["无"],o:!0,e:`<h3>模式</h3>
<p>单个部署=&gt;主从复制模式=&gt;集群模式</p>
<h3>主从复制，读写分离</h3>
<p>一主多从，读写分离，但主节点仍存在单点问题。
有多个redis服务器，通过命令或者配置实现主从关系，其中一台是主服务器，其他的是从服务器，复制指的是将主服务器的数据同步到从服务器，数据只能从主服务器向从服务器单向同步。
主服务器写，各个从服务器读。
查询服务器主从信息：info replication
缺点：当主节点宕机之后还需要人为重新进行主从关系配置。</p>
<h3>哨兵模式</h3>
<p>通过哨兵监控主从服务节点，并提供自动容灾恢复。
专门兼容主服务器，一旦有变故，哨兵自动处理，这样故障恢复及时并且更加智能。redis哨兵本质还是一个redis节点，只是运行模式不一样而已。
最基础模式：一个哨兵监控一主二从的环境
<img src="/common/1610775570125-710054f7-6d38-4766-8ab3-f8439dd76e53.png" alt="" loading="lazy">
流程图
<img src="/common/1610775820248-9ca8bb52-b43b-4006-a4ae-c65158749a7d.png" alt="" loading="lazy">
缺点：</p>`,r:{minutes:1.49,words:448},t:"部署方案",y:"a"}}],["/dataBase/redis/anzhuang/docker-composebushuredis.html",{loader:()=>a(()=>import("./docker-composebushuredis.html-uSj78jG1.js"),__vite__mapDeps([606,1])),meta:{a:"azrng",d:16276896e5,l:"2021年7月31日",c:["dataBase"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>version<span class="token punctuation">:</span> '<span class="token number">3.4</span>'

services<span class="token punctuation">:</span>
  redis<span class="token punctuation">:</span>
    image<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    container_name<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    hostname<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    restart<span class="token punctuation">:</span> <span class="token class-name">always</span>
    ports<span class="token punctuation">:</span>
      <span class="token operator">-</span> <span class="token number">6379</span><span class="token punctuation">:</span><span class="token number">6379</span>
    networks<span class="token punctuation">:</span>
      <span class="token operator">-</span> <span class="token class-name">net_db</span>
    volumes<span class="token punctuation">:</span>
      <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">/</span>conf<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span class="token punctuation">:</span>rw
      <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token class-name">rw</span>
    command<span class="token punctuation">:</span>
      redis<span class="token operator">-</span>server <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf <span class="token operator">--</span>appendonly <span class="token class-name">yes</span>

networks<span class="token punctuation">:</span>
  net_db<span class="token punctuation">:</span>
    driver<span class="token punctuation">:</span> bridge
</code></pre></div>`,r:{minutes:.24,words:73},t:"Docker-compose部署redis",y:"a"}}],["/dataBase/redis/anzhuang/linuxanzhuangredis.html",{loader:()=>a(()=>import("./linuxanzhuangredis.html-DOXiG-Iv.js"),__vite__mapDeps([607,1])),meta:{a:"azrng",d:16901568e5,l:"2023年7月24日",c:["dataBase"],g:["无"],o:!0,e:`<h2>操作</h2>
<p>查询yum源中是是否有redis
命令：yum info redis&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
安装redis数据库
命令：yum install redis&nbsp;&nbsp;&nbsp;
开启redis服务
命令：service redis start&nbsp;
<img src="/common/1609927422737-35afc46e-2c2a-492a-8dac-8e7cbbc7fc74.png" alt="image.png" loading="lazy">
查看redis是否开启
命令：ps -ef | grep redis&nbsp;&nbsp;
<img src="/common/1609927422746-59c5710e-35b2-4a88-a0c6-2f99f327ba02.png" alt="image.png" loading="lazy">
进入redis服务
命令：redis-cli
在进入服务的状态查看所有配置项
命令：CONFIG GET *
<img src="/common/1609927422741-a27be344-8f39-4444-99e8-20fdd2ca2e1e.png" alt="image.png" loading="lazy">
我们需要修改的配置有：
daemonize改为yes；yes代表守护进程，后台运行，否则每次只要回到控制台就会自动关闭、
protected-mode设置为no，保护模式默认是yes，如果想外网访问，那么需要将此属性改为no
bind：绑定主机地址；如果需要远程访问需要将这个属性改为bing *
&nbsp;
查找redis的安装目录
命令：whereis redis
<img src="/common/1609927422748-03b7d22a-98d2-4ee4-b047-fe2097e0781f.png" alt="image.png" loading="lazy">
编辑配置文件
命令：vim /etc/redis.conf
或者直接找到这个文件进行编辑
&nbsp;
改完以后需要关闭服务然后再开启redis服务：然后本地就可以连接远程redis服务
&nbsp;
关闭服务
命令：redis-cli&nbsp; shutdown
&nbsp;
&nbsp;
&nbsp;
&nbsp;
开放端口6379、6380的防火墙
/sbin/iptables -I INPUT -p tcp --dport 6379&nbsp;-j ACCEPT&nbsp;&nbsp; 开启6379
/sbin/iptables -I INPUT -p tcp --dport 6380 -j ACCEPT&nbsp;&nbsp;&nbsp; 开启6380
/etc/rc.d/init.d/iptables save&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 保存
&nbsp;
包安装的方式：
需要去官网下载 &nbsp;<a href="https://redis.io/download" target="_blank" rel="noopener noreferrer">https://redis.io/download</a></p>`,r:{minutes:1.25,words:376},t:"linux安装redis",y:"a"}}],["/dataBase/redis/anzhuang/windowskehuduan.html",{loader:()=>a(()=>import("./windowskehuduan.html-VHOlIhG1.js"),__vite__mapDeps([608,1])),meta:{a:"azrng",d:16901568e5,l:"2023年7月24日",c:["dataBase"],g:["无"],o:!0,e:`<h2>5.x版本</h2>
<p>仓库地址：
<a href="https://github.com/tporadowski/redis" target="_blank" rel="noopener noreferrer">https://github.com/tporadowski/redis</a></p>
<h2>3.x版本</h2>
<p>1、首先找到Redis的安装地址<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener noreferrer">https://github.com/MSOpenTech/redis/releases</a>。
点进去找到.msi文件下载安装
<img src="/common/1609927361191-f8fe28ec-f31f-47a8-b4a1-1a82ab5d7fba.png" alt="image.png" loading="lazy">
&nbsp;
2、安装redis desktop
在GitHub搜索框搜索Redis Desktop找到第一个
<img src="/common/1609927361179-61e49015-5cdb-4c52-9ba9-2cc3e63e4141.png" alt="image.png" loading="lazy">
然后点进入找到releases
<img src="/common/1609927361188-aa7df257-fb26-4c39-a26b-256ecf1c6812.png" alt="image.png" loading="lazy">
点进去，找到一个比较稳定的版本0.8.8，点击.exe文件下载安装
<img src="/common/1609927361162-9945b290-4338-476b-8f7e-94bbb0b7c989.png" alt="image.png" loading="lazy">
&nbsp;
安装过程很简单，一直next直到finish，<strong>注意：要记住文件的安装位置如：C:\\Program Files (x86)\\RedisDesktopManager</strong>
<img src="/common/1609927361226-0e253e8b-3973-4654-a485-7145d46f54a2.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.62,words:186},t:"Windows客户端",y:"a"}}],["/dataBase/redis/jianchanjieshao/chijiuhua.html",{loader:()=>a(()=>import("./chijiuhua.html-BHBCY1F7.js"),__vite__mapDeps([609,1])),meta:{a:"azrng",d:16382304e5,l:"2021年11月30日",c:["dataBase"],g:["无"],o:!0,e:`<p>持久化就是将内存中的数据放到硬盘上，redis持久化方式有两种，RDB方式(默认)和AOF两种</p>
<h2>1. RDB保存(默认持久化方式)</h2>
<p>RDB<strong>快照</strong>的形式存储，指定时间内操作多少步骤然后就做快照保存。每次保存的文件都比之前大，所以是增量方式。
默认配置：60秒内操作数达到1w次，那么就保存；5分钟内操作超过十次，那么就保存；15分钟内操作超过1条，那么就保存。
Save：通过命令save可以强制持久化保存为rdb文件，但是因为redis是单线程的，期间会阻塞redis服务进程，redis服务不再处理任何指令，除非等保存结束。
Bgsave：父进程启动一个子进程，然后通过子进程将内存中的数据持久化到文件中，期间不会影响其他的指令操作。</p>`,r:{minutes:1.98,words:595},t:"持久化",y:"a"}}],["/dataBase/redis/jianchanjieshao/neicunyouhua.html",{loader:()=>a(()=>import("./neicunyouhua.html-DVf-4AkM.js"),__vite__mapDeps([610,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<h4>控制key的长度</h4>
<p>过长的key名称也会占用过多的内存空间，所以在保证key简单清晰的前提下，尽可能把key定义的短一些。</p>
<h4>避免存储bigkey</h4>
<p>避免存储过大的值，建议</p>
<ul>
<li>string：大小控制在10kb以下</li>
<li>list/hash/set/zset：元素数量控制在1万以下</li>
</ul>
<h4>选择合适的数据类型</h4>
<p>字符串和数值存储为string类型
hasg、zset存储的元素数量控制在转换阈值以下，以压缩列表存储</p>
<h4>把redis当作缓存使用</h4>
<p>因为存储在内存中，这就意味着资源也是有限的，你在使用的时候要记住把他当作缓存来使用，而不是把他当作一个数据库来使用，写入到缓存中的数据，应该尽可能的都设置过期时间。</p>`,r:{minutes:.81,words:242},t:"内存优化",y:"a"}}],["/dataBase/redis/redisshujuleixing/hashleixing.html",{loader:()=>a(()=>import("./hashleixing.html-BdOSHiFF.js"),__vite__mapDeps([611,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>将一些结构化的东西打包成hashmap，在客户端序列化后存储为一个字符串的值，比如用户姓名、年龄等
&nbsp;
场景：将用户登录成功后的数据序列化后存在hash类型中。
&nbsp;
&nbsp;
适合存储用户信息对象，相比如序列化存储为字符串，省去了序列化的消耗</p>
`,r:{minutes:.4,words:121},t:"hash类型",y:"a"}}],["/dataBase/redis/redisshujuleixing/hyperloglog.html",{loader:()=>a(()=>import("./hyperloglog.html-n804fCHA.js"),__vite__mapDeps([612,1])),meta:{a:"azrng",d:16595712e5,l:"2022年8月4日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>菜鸟教程：<a href="https://www.runoob.com/redis/redis-hyperloglog.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/redis/redis-hyperloglog.html</a></p>
`,r:{minutes:.12,words:37},t:"HyperLogLog",y:"a"}}],["/dataBase/redis/redisshujuleixing/jigeset.html",{loader:()=>a(()=>import("./jigeset.html-DfwKRmVv.js"),__vite__mapDeps([613,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>场景：可以添加删除元素，提供有对集合求交并差的操作，例如可以将一个用户所关注的人
放在一个集合里面，将所有粉丝放在一个集合里面，可以方便使用共同关注，共同爱好。
&nbsp;
set支持自动排重，string类型的无序集合
&nbsp;
127.0.0.1:6379&gt; del mykey
(integer) 1
**SADD&nbsp; **key member [member ...]:时间复杂度中的N表示操作的成员数量。如果在插入的过程用，参数中有的成员在Set中已经存在，该成员将被忽略，而其它成员仍将会被正常插入。如果执行该命令之前，该Key并不存在，该命令将会创建一个新的Set，此后再将参数中的成员陆续插入。如果该Key的Value不是Set类型，该命令将返回相关的错误信息。
127.0.0.1:6379&gt; sadd mykey a b c d
(integer) 4
<strong>SCARD</strong>key:获取Set中成员的数量。
127.0.0.1:6379&gt; scard mykey
(integer) 4
<strong>SISMEMBER</strong>&nbsp;key member：判断参数中指定成员是否已经存在于与Key相关联的Set集合中。
127.0.0.1:6379&gt; sismember mykey a
(integer) 1
<strong>SMEMBERS</strong>&nbsp;key：时间复杂度中的N表示Set中已经存在的成员数量。获取与该Key关联的Set中所有的成员。
127.0.0.1:6379&gt; smembers mykey</p>`,r:{minutes:4.2,words:1259},t:"集合set",y:"a"}}],["/dataBase/redis/redisshujuleixing/jigesortedset.html",{loader:()=>a(()=>import("./jigesortedset.html-3UQemr9_.js"),__vite__mapDeps([614,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>有序集合，相比较set多一个权重参数score，使得集合能够按照score进行有序排列
&nbsp;
场景;存储一个班级同学的成绩，集合中的key是同学的学号，value是得分，可以在插入数据的时候进行排序</p>
`,r:{minutes:.34,words:101},t:"集合sorted set",y:"a"}}],["/dataBase/redis/redisshujuleixing/liebiaolist.html",{loader:()=>a(()=>import("./liebiaolist.html-C9_87o-j.js"),__vite__mapDeps([615,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>场景：可以轻松显现最新消息排行，另一个应用是消息队列，可以利用list的push操作，将任务存在list中，然后工作线程再用pop操作将任务取出并执行。
&nbsp;
&nbsp;
&nbsp;
127.0.0.1:6379&gt; get mykey
"a"
127.0.0.1:6379&gt; del mykey
(integer) 1
127.0.0.1:6379&gt; get mykey
(nil)
lpush ：在指定Key所关联的List Value的头部插入参数中给出的所有Values。
127.0.0.1:6379&gt; lpush mykey a b c
(integer) 3
127.0.0.1:6379&gt; lpush key1 a
(integer) 1
127.0.0.1:6379&gt; del key1
(integer) 1
lpushx ：仅有当参数中指定的Key存在时，该命令才会在其所关联的List Value的头部插入参数中给出的Value，否则将不会有任何操作发生。
127.0.0.1:6379&gt; lpushx key1 a
(integer) 0
127.0.0.1:6379&gt; get mye1
(nil)
127.0.0.1:6379&gt; get key1
(nil)
127.0.0.1:6379&gt; lpushx mykey d
(integer) 4
127.0.0.1:6379&gt; lrange mykey -32 4</p>`,r:{minutes:2.1,words:630},t:"列表List",y:"a"}}],["/dataBase/redis/redisshujuleixing/redisshujuleixing.html",{loader:()=>a(()=>import("./redisshujuleixing.html-C3iO1eLu.js"),__vite__mapDeps([616,1])),meta:{a:"azrng",d:16914528e5,l:"2023年8月8日",c:["dataBase"],g:["无"],o:!0,e:`<h2>数据结构</h2>
<p>一种数据结构类型对应多种数据结构来实现
<img src="/common/1615016591442-f0fdd49f-c1c1-4dd0-9ef0-0467826a16e1.png" alt="" loading="lazy">
例如，String、Set 在存储 int 数据时，会采用整数编码存储。Hash、ZSet 在元素数量比较少时（可配置），会采用压缩列表（ziplist）存储，在存储比较多的数据时，才会转换为哈希表和跳表。</p>
<h2>String字符串</h2>
<p>一个键对应一个值，值是字符串</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>					<span class="token comment">//存储单个</span>
                    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认是序列化后然后存储的</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这种方式还得序列化</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> value2 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推荐这种</span>

                    <span class="token comment">//批量写入</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
                        <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"001"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token punctuation">{</span> <span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token punctuation">{</span> <span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string">"南京"</span><span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">SetAll</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">;</span>


                    <span class="token comment">//批量读取</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//设置过期时间</span>
                    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//指定时间过期</span>
                    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//追加</span>
                    client<span class="token punctuation">.</span><span class="token function">AppendToValue</span><span class="token punctuation">(</span><span class="token string">"zhuijia"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">AppendToValue</span><span class="token punctuation">(</span><span class="token string">"zhuijia"</span><span class="token punctuation">,</span> <span class="token string">"Love"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">AppendToValue</span><span class="token punctuation">(</span><span class="token string">"zhuijia"</span><span class="token punctuation">,</span> <span class="token string">"You"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> zhuijia <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"zhuijia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//获取之前的值，然后赋值新的</span>
                    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> oldValue <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetAndSetValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> newValue <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//自增自减少</span>

                    <span class="token comment">//自增然后返回结果</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//自减返回结果</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Decrement</span><span class="token punctuation">(</span><span class="token string">"countb"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">Decrement</span><span class="token punctuation">(</span><span class="token string">"countb"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    client<span class="token punctuation">.</span><span class="token function">Decrement</span><span class="token punctuation">(</span><span class="token string">"countb"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"countb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//add和set</span>
                    <span class="token comment">//如果已经存在就添加不进去，不存在就可以添加</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"addvalue"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"addvalue"</span><span class="token punctuation">,</span> <span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"addvalue"</span><span class="token punctuation">,</span> <span class="token string">"name3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
                    <span class="token comment">//直接替换值</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"setvalue"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"setvalue"</span><span class="token punctuation">,</span> <span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"setvalue"</span><span class="token punctuation">,</span> <span class="token string">"name3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

                    <span class="token comment">//判断数据库中是否存在key</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">//判断这个key是哪种类型</span>
                    client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetEntryType</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.96,words:1487},t:"Redis数据类型",y:"a"}}],["/dataBase/redis/redisshujuleixing/zifuchuan.html",{loader:()=>a(()=>import("./zifuchuan.html-CEPooeNw.js"),__vite__mapDeps([617,1])),meta:{a:"azrng",d:16876512e5,l:"2023年6月25日",c:["dataBase"],g:["无"],o:!0,e:`<p>Append：在字符串的末尾附加，如果key不存在，那么创建key，并设置为空字符串，返回的是操作后字符串的长度。
<img src="/common/1609927625433-0c667830-a700-43a1-a224-0fa5b46ff6ff.png" alt="image.png" loading="lazy">
Del:根据指定的key去删除这个key
<img src="/common/1609927625435-08b6d88d-207f-4e02-bcc5-f44cb41b1cef.png" alt="image.png" loading="lazy">
getrange：根据索引去截取值，从第几个索引开始，到第几个索引结束。
<img src="/common/1609927625433-5d791598-8966-40d5-851f-921f7384d614.png" alt="image.png" loading="lazy">
decr：将制定key的value值减去1，如果不存在，返会-1，如果不能把值转换为整形值，那么将返回失败信息。
<img src="/common/1609927625433-41ae2ccc-d736-49eb-9d0b-69491bebe6b2.png" alt="image.png" loading="lazy">
incr：将指定的值增加1，如果值不存在，返回1，如果不能转换为整形值，那么返回相应的错误信息。
decrby：将值减少指定数，如果不能转换为整形，返回相应错误信息。
<img src="/common/1609927625447-03765b7b-954c-46f8-a55a-9e3b78ebe725.png" alt="image.png" loading="lazy">
incrby：将值增加指定数，如果不能转换为整形，返回错误信息。
<img src="/common/1609927625437-6e34467e-a2e4-492a-b98a-721e167ce217.png" alt="image.png" loading="lazy">
get：获取指定key的value，如果与该key关联的值不是string类型，返回错误信息。
<img src="/common/1609927625470-7ddb52e8-8e65-4a52-ba8d-ace314395ea2.png" alt="image.png" loading="lazy">
set：设定为指定的值，如果该key已经存在，则覆盖其原有的值。
<img src="/common/1609927625478-7afb364f-e808-4050-b37f-b46065543e88.png" alt="image.png" loading="lazy">
getset：设置该key的值，并返回原来的值。
<img src="/common/1609927625488-bb20029c-2b14-4778-8a74-5e5a91a5cb1d.png" alt="image.png" loading="lazy">
strlen：返回指定key的长度，如果值不是string类型，那么返回错误信息。
<img src="/common/1609927625671-ae739992-6d8d-4c49-974e-8a361b5f2b66.png" alt="image.png" loading="lazy">
setex：设置一个key的值，并且为这个值设置存过时间(秒)，主要用于被当做cache服务器使用时。
<img src="/common/1609927625477-7ee8e02a-299d-44b0-8b1c-805108a5f409.png" alt="image.png" loading="lazy">
setnx：设置该key的指定值，如果该key不存在，返回1，设置成功，key存在，返回0，设置失败。
<img src="/common/1609927625485-9492f434-029c-4a22-841b-b394c8d59335.png" alt="image.png" loading="lazy">
Setrange:替换值，从指定索引开始，然后替换为指定的值。
<img src="/common/1609927625553-b770f749-9fdb-462b-bbf2-ed1b088614ed.png" alt="image.png" loading="lazy">
Getrange:截取字符串，从指定索引开始，到指定索引结束。
<img src="/common/1609927625480-0e591fed-9549-45b3-96db-025b8f327d99.png" alt="image.png" loading="lazy">
Setbit:设置指定offiset上的bit值，值只能是0或者1，设置后该命令返回该offset上原有的bit值，如果指定key不存在，将创建一个新值。
**SETBIT **key offset value&nbsp;
<img src="/common/1609927625514-454030c1-96af-4617-ac97-d108fd448a0c.png" alt="image.png" loading="lazy">
getbit：返回在指定offset上的bit值，0或1，如果iffset超过string value的长度，该命令将返回0，所以对于空字符串始终返回0。
**GETBIT **key offset&nbsp;
127.0.0.1:6379&gt; get mykey
"\\x03"
127.0.0.1:6379&gt; getbit mykey 6
(integer) 1
127.0.0.1:6379&gt; getbit mykey 10
(integer) 0
Mget:N表示获取Key的数量。返回所有指定Keys的Values，如果其中某个Key不存在，或者其值不为string类型，该Key的Value将返回nil。
<strong>MGET</strong>key [key ...]&nbsp;
<img src="/common/1609927625487-aa862ca3-067f-4735-b8d1-bdd2811a13a2.png" alt="image.png" loading="lazy">
Mset:N表示指定Key的数量。该命令原子性的完成参数中所有key/value的设置操作，其具体行为可以看成是多次迭代执行SET命令。
&nbsp;<strong>MSET</strong>key value [key value ...]&nbsp;
Msetnx:N表示指定Key的数量。该命令原子性的完成参数中所有key/value的设置操作，其具体行为可以看成是多次迭代执行SETNX命令。然而这里需要明确说明的是，<em>如果在这一批Keys中有任意一个Key已经存在了，那么该操作将全部回滚，即所有的修改都不会生效。</em>
<strong>MSETNX</strong>key value [key value ...]&nbsp;
&nbsp;
教程地址：<a href="https://www.cnblogs.com/ITzhangyunpeng/p/9558466.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ITzhangyunpeng/p/9558466.html</a></p>`,r:{minutes:2.95,words:886},t:"字符串",y:"a"}}],["/dataBase/redis/yiwenhebug/queshaomsvcp140_dll.html",{loader:()=>a(()=>import("./queshaomsvcp140_dll.html-CJiK_Je5.js"),__vite__mapDeps([618,1])),meta:{a:"azrng",d:16876512e5,l:"2023年6月25日",c:["dataBase"],g:["无"],o:!0,e:`<p>点击下载目录中的cdredist_86
<img src="/common/1609927296756-d54e69fa-1cfd-471b-aedb-3234aa586c3d.png" alt="image.png" loading="lazy">
安装即可解决</p>
`,r:{minutes:.16,words:49},t:"缺少MSVCP140.dll",y:"a"}}],["/dataBase/redis/yiwenhebug/yiwenhebug.html",{loader:()=>a(()=>import("./yiwenhebug.html-Bd-8jtIi.js"),__vite__mapDeps([619,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p><strong>bug</strong>
1.如果启动Redis-server一闪而退，那么需要使用管理员打开命令提示符，然后找到那个文件夹，输入<strong>redis-server.exe redis.windows.conf</strong>
&nbsp;
&nbsp;
&nbsp;
<strong>疑问</strong>
1.redis是不是一个服务器上独立的一个地方。答：是一个独立的服务程序
2.是服务器需要安装redis客户端还是每个使用的人需要安装这个客户端，（应该是只需要服务器端安装布置，iis访问发布的网站，这个redis可以使用）答：服务器安装，使用的人可以直接连接，但是查看的话需要装客户端软件查看</p>`,r:{minutes:.64,words:191},t:"疑问和bug",y:"a"}}],["/dataBase/redis/zujian/csredis.html",{loader:()=>a(()=>import("./csredis.html-D-0RNimy.js"),__vite__mapDeps([620,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dataBase"],g:["无"],o:!0,e:`<h2>1. 介绍</h2>
<p>CSRedis 是 redis.io 官方推荐库，支持 redis-trib集群、哨兵、私有分区与连接池管理技术，简易 RedisHelper 静态类, 它主要又两个程序集。</p>
<ol>
<li>CSRedisCore：主库,实现对接redis各种功能</li>
<li>Caching.CSRedis：分布式缓存 CSRedisCore 实现 Microsoft.Extensions.Caching，通过IDistributedCache进行操作</li>
</ol>
<blockquote>
<p>GitHub地址：<a href="https://github.com/2881099/csredis" target="_blank" rel="noopener noreferrer">https://github.com/2881099/csredis</a>
GitHub地址翻译中文版本：<a href="https://www.cnblogs.com/tuyile006/p/14051569.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/tuyile006/p/14051569.html</a>
操作说明文档：<a href="https://www.cnblogs.com/yaopengfei/p/14211883.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yaopengfei/p/14211883.html</a></p>
</blockquote>`,r:{minutes:1.35,words:405},t:"CSRedis",y:"a"}}],["/dataBase/redis/zujian/freeredis.html",{loader:()=>a(()=>import("./freeredis.html-D8t2XbkA.js"),__vite__mapDeps([621,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>FreeRedis 是基于 .NET 的 Redis 客户端，支持 .NET Core 2.1+、.NET Framework 4.0+ 和 Xamarin。
仓库地址：<a href="https://github.com/2881099/FreeRedis" target="_blank" rel="noopener noreferrer">https://github.com/2881099/FreeRedis</a></p>
<h2>操作</h2>
<h3>基础操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> redisClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisClient</span><span class="token punctuation">(</span><span class="token string">"localhost:6379,password=123,defaultDatabase=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> redisClient<span class="token punctuation">.</span><span class="token function">SetAsync</span><span class="token punctuation">(</span><span class="token string">"jsonFormat"</span><span class="token punctuation">,</span> jsonToBase64<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.26,words:77},t:"FreeRedis",y:"a"}}],["/dataBase/redis/zujian/jianchanshiyong.html",{loader:()=>a(()=>import("./jianchanshiyong.html-j34KJzFG.js"),__vite__mapDeps([622,1])),meta:{a:"azrng",d:16815168e5,l:"2023年4月15日",c:["dataBase"],g:["无"],o:!0,e:`<h3>连接字符串</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>localhost<span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">,</span>DefaultDatabase<span class="token operator">=</span><span class="token number">0</span>
</code></pre></div>`,r:{minutes:.13,words:40},t:"简单使用",y:"a"}}],["/dataBase/redis/zujian/nrejson.html",{loader:()=>a(()=>import("./nrejson.html-DEpc44sB.js"),__vite__mapDeps([623,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>NReJSON 是StackExchange.Redis库的一系列扩展方法，可让您与<a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>模块<a href="https://github.com/RedisJSON/RedisJSON" target="_blank" rel="noopener noreferrer">RedisJSON</a>进行交互。这可以通过SE.Redis 库中已经存在的Execute和方法实现。</p>
<h2>操作</h2>
<blockquote>
<p>本文示例环境：vs2022、.Net6</p>
</blockquote>`,r:{minutes:1.01,words:302},t:"NReJSON",y:"a"}}],["/dataBase/redis/zujian/redisom.html",{loader:()=>a(()=>import("./redisom.html-DjW4Ni7E.js"),__vite__mapDeps([624,1])),meta:{a:"azrng",d:1646352e6,l:"2022年3月4日",c:["dataBase"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>支持使用 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fredis%2Fredis-om-spring" target="_blank" rel="noopener noreferrer">LINQ</a> 查询 Redis 域对象</p>
<h3>安装redis</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker run <span class="token operator">-</span>p <span class="token number">6379</span><span class="token punctuation">:</span><span class="token number">6379</span> redislabs<span class="token operator">/</span>redismod<span class="token punctuation">:</span>preview
</code></pre></div>`,r:{minutes:.45,words:134},t:"RedisOM",y:"a"}}],["/dataBase/sqlserver/base/dataType.html",{loader:()=>a(()=>import("./dataType.html-DkCVCgEb.js"),__vite__mapDeps([625,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["dataType"],o:!0,e:`<h2>数据类型介绍</h2>
<table>
<thead>
<tr>
<th><strong>SQL Server数据类型</strong></th>
<th><strong>占用字节数</strong></th>
<th><strong>表示范围</strong></th>
<th><strong>对应的CLR类型</strong></th>
<th><strong>对应数据库类型选择</strong></th>
<th><strong>适用场景</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>char(n)</td>
<td></td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.string.aspx" target="_blank" rel="noopener noreferrer">System.String</a></td>
<td>char(2)</td>
<td>使用char(2)来表示类型或状态(建议用tinyint代替)</td>
</tr>
<tr>
<td>varchar</td>
<td>varchar(n)</td>
<td>1~8000</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.string.aspx" target="_blank" rel="noopener noreferrer">System.String</a></td>
<td>varchar(20)</td>
<td>只包含英文字符的字符串</td>
</tr>
<tr>
<td>nvarchar</td>
<td>nvarchar(n)</td>
<td>1~4000</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.string.aspx" target="_blank" rel="noopener noreferrer">System.String</a></td>
<td>nvarchar(20)</td>
<td>包含中文字符的字符串</td>
</tr>
<tr>
<td>int</td>
<td>4个字节</td>
<td>-2,147,483,648 到 2,147,483,647</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.int32.aspx" target="_blank" rel="noopener noreferrer">System.Int32</a></td>
<td>int</td>
<td>表示整型，比如自增ID和表示數量</td>
</tr>
<tr>
<td>bigint</td>
<td>8个字节</td>
<td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.int64.aspx" target="_blank" rel="noopener noreferrer">System.Int64</a>(Long)</td>
<td>bigint</td>
<td>表示长整型，比如自增ID(数量比较大的情况下)</td>
</tr>
<tr>
<td>decimal</td>
<td>5~17字节</td>
<td></td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.decimal.aspx" target="_blank" rel="noopener noreferrer">System.Decimal</a></td>
<td>decimal(18,2)</td>
<td>金额和價格(和錢相關的)</td>
</tr>
<tr>
<td>tinyint</td>
<td>1字节</td>
<td>0~255</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.byte.aspx" target="_blank" rel="noopener noreferrer">System.Byte</a></td>
<td>tinyint</td>
<td>类型和状态，比char(2)扩展性好</td>
</tr>
<tr>
<td>bit</td>
<td></td>
<td>0，1或NULL</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.boolean.aspx" target="_blank" rel="noopener noreferrer">System.Boolean</a></td>
<td>bit</td>
<td>一般用来表示是和否两种情形，比如IsStop</td>
</tr>
<tr>
<td>datetime</td>
<td>8字节</td>
<td>1753 年 1 月 1 日到 9999 年 12 月 31 日</td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.datetime.aspx" target="_blank" rel="noopener noreferrer">System.DateTime</a></td>
<td>datetime</td>
<td>表示日期和时间</td>
</tr>
<tr>
<td>time</td>
<td></td>
<td></td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.timespan.aspx" target="_blank" rel="noopener noreferrer">System.TimeSpan</a></td>
<td>time(7)</td>
<td>表示时间间隔，比如计时和耗時</td>
</tr>
<tr>
<td>varbinary</td>
<td></td>
<td></td>
<td><a href="http://msdn.microsoft.com/en-us/library/system.byte.aspx" target="_blank" rel="noopener noreferrer">System.Byte</a></td>
<td>varbinary(max)</td>
<td>表示二进制数据</td>
</tr>
</tbody>
</table>`,r:{minutes:1.95,words:585},t:"数据类型",y:"a"}}],["/dataBase/sqlserver/base/functions.html",{loader:()=>a(()=>import("./functions.html-CojI4o4Y.js"),__vite__mapDeps([626,1])),meta:{a:"azrng",d:1702512e6,l:"2023年12月14日",c:["dataBase"],g:["函数"],o:!0,e:`<h2>cast</h2>
<p>转换数据类型</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 将其他类型转换bigint类型</span>
<span class="token keyword">select</span> cast<span class="token punctuation">(</span>number <span class="token keyword">as</span> <span class="token keyword">bigint</span><span class="token punctuation">)</span> number <span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>shop
</code></pre></div>`,r:{minutes:.33,words:100},t:"函数",y:"a"}}],["/dataBase/sqlserver/base/hierarchyid.html",{loader:()=>a(()=>import("./hierarchyid.html-lVYlNCUo.js"),__vite__mapDeps([627,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>HierarchyId是一种长度可变的Sql Server数据类型，它能存储带有层次结构的数据。
HierarchyId数据类型的值可以直接表示树层次结构中的位置，例如：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>总公司</td>
</tr>
<tr>
<td>/1/</td>
<td>分公司1</td>
</tr>
<tr>
<td>/2/</td>
<td>分公司2</td>
</tr>
<tr>
<td>/1/1/</td>
<td>部门A</td>
</tr>
<tr>
<td>/1/1/1/</td>
<td>小组X</td>
</tr>
<tr>
<td>/1/1/2/</td>
<td>小组Y</td>
</tr>
</tbody>
</table>`,r:{minutes:1.64,words:492},t:"HierarchyId",y:"a"}}],["/dataBase/sqlserver/base/operation.html",{loader:()=>a(()=>import("./operation.html-B8_ekOVJ.js"),__vite__mapDeps([628,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<h2>系统操作</h2>
<h3>数据库版本</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查看数据库版本</span>
<span class="token keyword">select</span> @<span class="token variable">@version</span>
</code></pre></div><h3>检索执行SQL时间</h3>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">declare</span> <span class="token variable">@begin_date</span> <span class="token keyword">datetime</span> 
<span class="token keyword">declare</span> <span class="token variable">@end_date</span> <span class="token keyword">datetime</span> 
<span class="token keyword">select</span> <span class="token variable">@begin_date</span> <span class="token operator">=</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">-----------需要执行的sql语句</span>
<span class="token keyword">select</span> AC_ID <span class="token keyword">from</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>ys_tb_Collection51<span class="token punctuation">]</span> <span class="token keyword">where</span> AC_ID<span class="token operator">=</span><span class="token number">4273</span>  <span class="token operator">or</span> AC_ID<span class="token operator">=</span><span class="token number">4274</span>
<span class="token comment">----------</span>
<span class="token keyword">select</span> <span class="token variable">@end_date</span> <span class="token operator">=</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">select</span> datediff<span class="token punctuation">(</span>ms<span class="token punctuation">,</span><span class="token variable">@begin_date</span><span class="token punctuation">,</span><span class="token variable">@end_date</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'用时/毫秒'</span>

<span class="token comment">-- sqlserver查询慢sql  </span>
<span class="token keyword">SELECT</span> t<span class="token punctuation">.</span><span class="token keyword">text</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_elapsed_time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count                                                          <span class="token keyword">AS</span> avg_elapsed_time<span class="token punctuation">,</span>
       <span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_worker_time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count                                                           <span class="token keyword">AS</span> avg_cpu_time<span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_elapsed_time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count<span class="token punctuation">)</span> <span class="token operator">-</span>
       <span class="token punctuation">(</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_worker_time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count<span class="token punctuation">)</span>                                                         <span class="token keyword">AS</span> avg_wait_time<span class="token punctuation">,</span>
       qs<span class="token punctuation">.</span>total_logical_reads <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count                                                                  <span class="token keyword">AS</span> avg_logical_reads<span class="token punctuation">,</span>
       qs<span class="token punctuation">.</span>total_logical_writes <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count                                                                 <span class="token keyword">AS</span> avg_writes<span class="token punctuation">,</span>
       <span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_elapsed_time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span>                                                                               <span class="token keyword">AS</span> cumulative_elapsed_time_all_executions
<span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>dm_exec_query_stats qs
         <span class="token keyword">CROSS</span> <span class="token keyword">apply</span> sys<span class="token punctuation">.</span>Dm_exec_sql_text <span class="token punctuation">(</span>sql_handle<span class="token punctuation">)</span> t
<span class="token keyword">WHERE</span> t<span class="token punctuation">.</span><span class="token keyword">text</span> <span class="token operator">like</span> <span class="token string">'%具体的表名%'</span>
  <span class="token operator">and</span> qs<span class="token punctuation">.</span>creation_time
    <span class="token operator">&gt;</span> <span class="token string">'2023-12-05 16:00:00'</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>qs<span class="token punctuation">.</span>total_elapsed_time <span class="token operator">/</span> qs<span class="token punctuation">.</span>execution_count<span class="token punctuation">)</span> <span class="token keyword">DESC</span>
</code></pre></div>`,r:{minutes:16.09,words:4826},t:"基础操作",y:"a"}}],["/dataBase/sqlserver/install/dockerInstall.html",{loader:()=>a(()=>import("./dockerInstall.html-BBLAugFV.js"),__vite__mapDeps([629,1])),meta:{a:"azrng",d:16954272e5,l:"2023年9月23日",c:["dataBase"],g:["无"],o:!0,e:`<blockquote>
<p>SQLserver从2017版本已经开始支持运行在docker上，也就是说sql server现在可以运行在linux下</p>
</blockquote>
<h2>安装</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 镜像地址</span>
https://hub.docker.com/_/microsoft-mssql-server  

<span class="token comment">## 拉取镜像</span>
<span class="token function">docker</span> pull mcr.microsoft.com/mssql/server:2017-latest

<span class="token comment">## 查看镜像</span>
<span class="token function">docker</span> images

<span class="token comment">## 启动镜像生成容器 </span>
<span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token string">"ACCEPT_EULA=Y"</span> <span class="token parameter variable">-e</span> <span class="token string">"SA_PASSWORD=Sql987654"</span>  <span class="token parameter variable">-p</span> <span class="token number">1433</span>:1433 <span class="token parameter variable">--name</span> sqlserver  <span class="token parameter variable">-d</span> mcr.microsoft.com/mssql/server:2017-latest

<span class="token comment"># 生成容器 冰创建sa密码以及创建一个新用户以及新用户的密码</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> sqlserver2017  <span class="token parameter variable">-d</span> <span class="token parameter variable">-e</span> <span class="token string">'ACCEPT_EULA=Y'</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">SA_PASSWORD</span><span class="token operator">=</span><span class="token string">'Sql987654'</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">SQLSERVER_DATABASE</span><span class="token operator">=</span>demo <span class="token parameter variable">-e</span> <span class="token assign-left variable">SQLSERVER_USER</span><span class="token operator">=</span>azrng <span class="token parameter variable">-e</span> <span class="token assign-left variable">SQLSERVER_PASSWORD</span><span class="token operator">=</span><span class="token string">'Sql987654321'</span>   <span class="token parameter variable">-p</span> <span class="token number">1433</span>:1433 mcr.microsoft.com/mssql/server:2017-latest
    
<span class="token comment"># 或者使用阿里云镜像源</span>
<span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token string">"ACCEPT_EULA=Y"</span> <span class="token parameter variable">-e</span> <span class="token string">"SA_PASSWORD=Sql987654"</span>  <span class="token parameter variable">-p</span> <span class="token number">1433</span>:1433 <span class="token parameter variable">--name</span> sqlserver2019  <span class="token parameter variable">-d</span> registry.cn-hangzhou.aliyuncs.com/zrng/mssql:2019-latest
</code></pre></div>`,r:{minutes:1.55,words:465},t:"docker下安装",y:"a"}}],["/dataBase/sqlserver/install/linuxInstall.html",{loader:()=>a(()=>import("./linuxInstall.html-SBlNEa4-.js"),__vite__mapDeps([630,1])),meta:{a:"惑豁猿",d:169128e7,l:"2023年8月6日",c:["soft"],g:["sqlserver"],o:!1,e:`<h2>SQL Server 2022 安装</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>数据库选择SQL Server 2022，系统选择Ubuntu 20.04</p>
<p>文档地址：SQL Server 2022文档地址：https://learn.microsoft.com/zh-cn/sql/sql-server/?view=sql-server-ver16</p>
</div>
<p>SQL Server 2022先决条件：服务器内存至少需要2 GB 。</p>
<p><strong>1、导入公共存储库 GPG 密钥</strong></p>`,r:{minutes:5.59,words:1676},t:"Linux安装sqlserver",y:"a"}}],["/dataBase/sqlserver/install/windowsInstall.html",{loader:()=>a(()=>import("./windowsInstall.html-DAFsjVQZ.js"),__vite__mapDeps([631,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["dataBase"],g:["无"],o:!0,e:`<p>SqlServer2017下载地址：
<a href="">ed2k://|file|cn_sql_server_2017_developer_x64_dvd_11296175.iso|1769777152|E21AE7C3576C0BDF1BC0ADC541217FAC|/</a>
还需要另外安装SSMS2017，地址
<a href="https://download.microsoft.com/download/5/0/B/50B02ECB-CB5C-4C23-A1D3-DAB4467604DA/SSMS-Setup-CHS.exe" target="_blank" rel="noopener noreferrer">https://download.microsoft.com/download/5/0/B/50B02ECB-CB5C-4C23-A1D3-DAB4467604DA/SSMS-Setup-CHS.exe</a>
秘钥
Enterprise Core 6GPYM-VHN83-PHDM2-Q9T2R-KBV83
Developer 22222-00000-00000-00000-00000
Enterprise TDKQD-PKV44-PJT4N-TCJG2-3YJ6B
Strandard PHDV4-3VJWD-N7JVP-FGPKY-XBV89
Web WV79P-7K6YG-T7QFN-M3WHF-37BXC</p>`,r:{minutes:.33,words:99},t:"windows下安装",y:"a"}}],["/cloud/ciAndCd/azuredevopsserver/",{loader:()=>a(()=>import("./index.html-BayLzvS8.js"),__vite__mapDeps([632,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Azure DevOps 支持协作文化，并支持一套将开发人员、项目经理和参与者聚集在一起开发软件的流程。 它让组织能以比使用传统软件开发方法更快的速度创造和改进产品。</p>
<p>文档：<a href="https://learn.microsoft.com/zh-cn/azure/devops/user-guide/what-is-azure-devops?view=azure-devops" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/azure/devops/user-guide/what-is-azure-devops?view=azure-devops</a></p>`,r:{minutes:.45,words:135},t:"说明",y:"a"}}],["/cloud/ciAndCd/github/bushu_netfuwu.html",{loader:()=>a(()=>import("./bushu_netfuwu.html-D03gnxk6.js"),__vite__mapDeps([633,1])),meta:{a:"azrng",d:16658784e5,l:"2022年10月16日",c:["cloud"],g:["无"],o:!0,e:`<h2>发布并传到远程服务器</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>name<span class="token punctuation">:</span> ASP<span class="token punctuation">.</span>NET Core <span class="token number">6.0</span> Example build <span class="token keyword">and</span> <span class="token class-name">deploy</span>
  
<span class="token keyword">on</span><span class="token punctuation">:</span>
  push<span class="token punctuation">:</span>
    branches<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"main"</span> <span class="token punctuation">]</span>
  pull_request<span class="token punctuation">:</span>
    branches<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"main"</span> <span class="token punctuation">]</span>

jobs<span class="token punctuation">:</span>

  build<span class="token punctuation">:</span>
    runs<span class="token operator">-</span><span class="token keyword">on</span><span class="token punctuation">:</span> ubuntu<span class="token operator">-</span><span class="token class-name">latest</span>

    steps<span class="token punctuation">:</span>
    <span class="token operator">-</span> uses<span class="token punctuation">:</span> actions<span class="token operator">/</span>checkout@v3
    <span class="token operator">-</span> name<span class="token punctuation">:</span> <span class="token class-name">Setup <span class="token punctuation">.</span>NET</span>
      uses<span class="token punctuation">:</span> actions<span class="token operator">/</span>setup<span class="token operator">-</span>dotnet<span class="token class-name">@v2</span>
      with<span class="token punctuation">:</span>
        dotnet<span class="token operator">-</span>version<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">.</span>x
        
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Restore <span class="token class-name">dependencies</span>
      run<span class="token punctuation">:</span> dotnet restore
      
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Build <span class="token class-name">package</span>
      run<span class="token punctuation">:</span> dotnet publish <span class="token punctuation">.</span><span class="token operator">/</span>NetByDocker <span class="token operator">-</span>c Release <span class="token operator">-</span>r linux<span class="token operator">-</span>x64 <span class="token operator">--</span>self<span class="token operator">-</span>contained <span class="token boolean">false</span> <span class="token operator">-</span>o deploy
      
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Upload <span class="token class-name">package</span>
      uses<span class="token punctuation">:</span> garygrossgarten<span class="token operator">/</span>github<span class="token operator">-</span>action<span class="token operator">-</span>scp@v0<span class="token punctuation">.</span><span class="token number">7.3</span>
      with<span class="token punctuation">:</span>
        host<span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span>REMOTE_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>
        username<span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span>REMOTE_USER <span class="token punctuation">}</span><span class="token punctuation">}</span>
        password<span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span>REMOTE_PWD <span class="token punctuation">}</span><span class="token punctuation">}</span>
        port<span class="token punctuation">:</span> <span class="token number">22</span>
        local<span class="token punctuation">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>runner<span class="token operator">/</span>work<span class="token operator">/</span>my<span class="token operator">-</span>example<span class="token operator">/</span>my<span class="token operator">-</span>example<span class="token operator">/</span>deploy<span class="token operator">/</span>
        remote<span class="token punctuation">:</span> <span class="token string">"/home/project/example/"</span>
</code></pre></div>`,r:{minutes:3.5,words:1049},t:"部署.Net服务",y:"a"}}],["/cloud/ciAndCd/github/githubactionshengchengjingxiangbingbushu.html",{loader:()=>a(()=>import("./githubactionshengchengjingxiangbingbushu.html-jE24tlJf.js"),__vite__mapDeps([634,635,1])),meta:{a:"azrng",d:16695072e5,l:"2022年11月27日",c:["cloud"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过GitHub的Actions来部署.Net服务到阿里云服务器。</p>
<h2>环境准备</h2>
<p>需要一个阿里云服务器并且该服务器还安装了docker环境，如果环境安装不清楚可以查看之前的文章。</p>
<h3>创建镜像仓库</h3>
<p>在阿里云的容器镜像服务中，创建一个镜像仓库用来存储我们测试的镜像，这里我提前创建仓库为myexample，地址为registry.cn-hangzhou.aliyuncs.com/zrng/myexample。</p>
<h3>准备项目文件</h3>
<p>本文主要讨论GitHub的Action功能，所以项目文件直接使用之前示例代码，在Github创建仓库my-example，该仓库的代码使用之前的代码(仓库地址为：<a href="https://gitee.com/AZRNG/my-example" target="_blank" rel="noopener noreferrer">https://gitee.com/AZRNG/my-example</a>)</p>`,r:{minutes:5.23,words:1570},t:"GitHub Action生成镜像并部署",y:"a"}}],["/cloud/ciAndCd/github/",{loader:()=>a(()=>import("./index.html-DeVYkFMD.js"),__vite__mapDeps([636,635,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过github的Action可以实现在提交代码的时候，自动将程序部署到指定的服务器上(公网服务器)。</p>
<h2>服务器配置</h2>
<p>在指定的仓库中，选择Settings=&gt;Secrets=&gt;Actions
<img src="/common/1662964788789-be6dab44-c8d3-47e5-92be-8b39ffad23f6.png" alt="image.png" loading="lazy">
点击右上的新建就可以创建想要保存的隐私配置信息
<img src="/common/1662964862458-55292112-dc41-4232-96cb-361d761de2f1.png" alt="image.png" loading="lazy">
这里我保存了一下服务器的地址、账号、密码信息
<img src="/common/1662965030882-327a67e5-f6cb-492e-a62a-7e7430ddf13b.png" alt="image.png" loading="lazy"></p>`,r:{minutes:1.64,words:491},t:"说明",y:"a"}}],["/cloud/ciAndCd/gitlab/anzhuang.html",{loader:()=>a(()=>import("./anzhuang.html-CLcBWW-f.js"),__vite__mapDeps([637,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Gitlab是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。
Gitlab-CI就是一套配合GitLab使用的持续集成系统，GitLab8.0以后的版本是默认集成了GitLab-CI并且默认启用的。
Gitlab-Pages是一个go语言写的HTTP服务，原来只在Gitlab.com和Gitlab企业版中可用，在8.17版本的时候在Gitlab社区版支持。
Gitlab-Runner是配合GitLab-CI进行使用的，它是一个用来执行软件集成脚本的工具。</p>
<blockquote>
<p>来源：<a href="https://mp.weixin.qq.com/s/nqpXN75M5vMUtmzVcgewVg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/nqpXN75M5vMUtmzVcgewVg</a></p>
</blockquote>`,r:{minutes:3.18,words:954},t:"安装",y:"a"}}],["/cloud/ciAndCd/gitlab/daiwancheng.html",{loader:()=>a(()=>import("./daiwancheng.html-B81vsvv4.js"),__vite__mapDeps([638,1])),meta:{a:"azrng",d:16695072e5,l:"2022年11月27日",c:["cloud"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>任务：

本来准备自己本地起一个虚拟机安装gitlab<span class="token operator">-</span>runnner  然后自己弄，结果就是安装gitlab<span class="token operator">-</span>runner一直有问题，提示网络不对啥的


目的：通过gitlab<span class="token operator">-</span>runner实现  提交代码后自动通过docker进行部署程序。


https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>webenh<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">11254420</span><span class="token punctuation">.</span>html



windows安装gitlab<span class="token operator">-</span><span class="token class-name">runner</span>
https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>suyuanli<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">14320502</span><span class="token punctuation">.</span>html




docker exec <span class="token operator">-</span>it gitlab<span class="token operator">-</span>runner gitlab<span class="token operator">-</span>runner register <span class="token operator">-</span>n \\
  <span class="token operator">--</span>url <span class="token string">"http://172.18.231.92:9006/"</span> \\
  <span class="token operator">--</span>registration<span class="token operator">-</span>token <span class="token string">"WqUyssN18gKonWmWF6L4"</span> \\
  <span class="token operator">--</span>executor <span class="token string">"docker"</span> \\
  <span class="token operator">--</span>description <span class="token string">"net-register-runner"</span> \\
  <span class="token operator">--</span>tag<span class="token operator">-</span>list <span class="token string">"net-docker-deploy"</span> \\
  <span class="token operator">--</span>docker<span class="token operator">-</span>image <span class="token string">"docker:20.10.21"</span> \\
  <span class="token operator">--</span>docker<span class="token operator">-</span>volumes <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>docer<span class="token punctuation">.</span>sock<span class="token punctuation">:</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>docker<span class="token punctuation">.</span>sock
</code></pre></div>`,r:{minutes:.47,words:142},t:"待完成",y:"a"}}],["/cloud/ciAndCd/gitlab/giitlabdeyml.html",{loader:()=>a(()=>import("./giitlabdeyml.html-fgcnVP-B.js"),__vite__mapDeps([639,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["cloud"],g:["无"],o:!0,e:`<h2>通用配置</h2>
<h3>数组</h3>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>colors
  <span class="token punctuation">-</span> red
  <span class="token punctuation">-</span> blue
  <span class="token punctuation">-</span> yellow
</code></pre></div><p>相当于JSON中的</p>`,r:{minutes:1.52,words:457},t:"Giitlab的yml",y:"a"}}],["/cloud/ciAndCd/gitlab/gitlabrunner.html",{loader:()=>a(()=>import("./gitlabrunner.html-nhXNT7-6.js"),__vite__mapDeps([640,1])),meta:{a:"azrng",d:16629408e5,l:"2022年9月12日",c:["cloud"],g:["无"],o:!0,e:`<p>安装</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>

<span class="token comment">## For Debian/Ubuntu/Mint</span>
<span class="token comment">## 添加存储库</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
<span class="token comment">## 安装最新版本</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-runner



<span class="token comment">## For RHEL/CentOS/Fedora</span>
<span class="token comment">## 添加存储库</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
<span class="token comment">## 安装最新版本</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-runner


安装特定版本
<span class="token comment">## for DEB based systems</span>
<span class="token function">apt-cache</span> madison gitlab-runner
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-runner<span class="token operator">=</span><span class="token number">10.0</span>.0

<span class="token comment">## for RPM based systems</span>
yum list gitlab-runner <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-runner-10.0.0-1

</code></pre></div>`,r:{minutes:1.25,words:374},t:"Gitlab Runner",y:"a"}}],["/cloud/ciAndCd/gitlab/jianchanbushu.html",{loader:()=>a(()=>import("./jianchanbushu.html-BstQvzLf.js"),__vite__mapDeps([641,1])),meta:{a:"azrng",d:16695072e5,l:"2022年11月27日",c:["cloud"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>我们要实现的目的是我本地不断提交代码(CI),然后服务器不断进行部署(CD)的一个简单流程。</p>
<h2>环境准备</h2>
<p>Ubuntu服务器A：已经安装了docker，并使用docker部署了gitlab
服务器B：已经安装了docker</p>
<h2>Gitlab检查</h2>
<p>这里我们来检查一下Gitlab是否运行正常，这里我访问我服务器A地址：http://192.168.137.125:9006</p>
<figure><img src="/dotnet/image-20240421221535572.png" alt="image-20240421221535572" tabindex="0" loading="lazy"><figcaption>image-20240421221535572</figcaption></figure>`,r:{minutes:2.69,words:807},t:"简单部署",y:"a"}}],["/cloud/ciAndCd/gitlab/liushuixianjiaoben.html",{loader:()=>a(()=>import("./liushuixianjiaoben.html-Dc1E06_L.js"),__vite__mapDeps([642,1])),meta:{a:"azrng",d:16695072e5,l:"2022年11月27日",c:["cloud"],g:["无"],o:!0,e:`<p>示例文件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>images:docker:19.03 <span class="token comment">## 基础镜像</span>

build-job:
  stage: build
  script:
    - <span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$GITLAB_USER_LOGIN</span>!"</span>

test-job1:
  stage: <span class="token builtin class-name">test</span>
  script:
    - <span class="token builtin class-name">echo</span> <span class="token string">"This job tests something"</span>

test-job2:
  stage: <span class="token builtin class-name">test</span>
  script:
    - <span class="token builtin class-name">echo</span> <span class="token string">"This job tests something, but takes more time than test-job1."</span>
    - <span class="token builtin class-name">echo</span> <span class="token string">"After the echo commands complete, it runs the sleep command for 20 seconds"</span>
    - <span class="token builtin class-name">echo</span> <span class="token string">"which simulates a test that runs 20 seconds longer than test-job1"</span>
    - <span class="token function">sleep</span> <span class="token number">20</span>

deploy-prod:
  stage: deploy
  script:
    - <span class="token builtin class-name">echo</span> <span class="token string">"This job deploys something from the <span class="token variable">$CI_COMMIT_BRANCH</span> branch."</span>
</code></pre></div>`,r:{minutes:.76,words:227},t:"流水线脚本",y:"a"}}],["/cloud/ciAndCd/gitlab/sshmianmidenglu.html",{loader:()=>a(()=>import("./sshmianmidenglu.html-2PzuTi6c.js"),__vite__mapDeps([643,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["cloud"],g:["无"],o:!0,e:`<p>受控机器上的某个账户信任 CI机器上gitlab-runner账户。</p>
<ol>
<li>先执行<code>su gitlab-runner</code>切换到<code>gitlab-runner</code>账户</li>
<li>在你的CI机器(主控端)上使用 ssh-keygen命令创建公钥，使用<code>ssh-keygen -t rsa</code>来创建，程序会问你存放目录，如果不需要修改，直接回车几次即可</li>
<li>将~/.ssh目录下<code>id_rsa.pub</code>文件拷贝到受控机器的<code>~/.ssh</code>目录中，然后将文件内容导入到<code>~/.ssh/authorized_keys</code>文件</li>
</ol>`,r:{minutes:.73,words:220},t:"SSH免密登录",y:"a"}}],["/cloud/ciAndCd/gitlab/variables.html",{loader:()=>a(()=>import("./variables.html-CeO_3HzW.js"),__vite__mapDeps([644,1])),meta:{a:"azrng",d:16308864e5,l:"2021年9月6日",c:["cloud"],g:["无"],o:!0,e:`<h2>参考资料</h2>
<blockquote>
<p>官方翻译中文资料：<a href="https://blog.csdn.net/londa/article/details/93896368" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/londa/article/details/93896368</a></p>
</blockquote>
`,r:{minutes:.14,words:41},t:"Variables",y:"a"}}],["/cloud/ciAndCd/jenkins/changyongchajian.html",{loader:()=>a(()=>import("./changyongchajian.html-B6xOKMP4.js"),__vite__mapDeps([645,646,1])),meta:{a:"azrng",d:16246656e5,l:"2021年6月26日",c:["cloud"],g:["无"],o:!0,e:`<h2>镜像</h2>
<p>Role-based Authorization Strategy jenkins是通过插件对用户的权限进行控制的</p>
<p>部署插件
Generic WebHook Trigger =&gt; 触发WebHook必备
Gogs Plugin =&gt; 因为我使用的Git Server是Gogs搭建的
gitlab=》gitlab支持插件
Gitee=》Gitee使用的插件
MSBuild Plugin/MSBuild =&gt; 进行sln、csproj项目文件的编译
MSTest &amp; xUnit =&gt; 进行基于MSTest或基于xUnit的单元测试
Nuget Plugin =&gt; 拉取Nuget包必备
Pipeline =&gt; 实现Pipeline任务必备，建议将Pipeline相关插件都安装上
Powershell Plugin =&gt; 如果你的CI服务器是基于Windows的，那么安装一下Powershell插件来执行命令吧
WallDisplay =&gt; 电视投屏构建任务列表必备
Git Parameter=&gt;参数化分支构建可以选择不同的分支进行自动化部署</p>`,r:{minutes:1.54,words:461},t:"常用插件",y:"a"}}],["/cloud/ciAndCd/jenkins/jenkinspeizhi.html",{loader:()=>a(()=>import("./jenkinspeizhi.html-BOZ5gtjA.js"),__vite__mapDeps([647,646,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h3>构建触发器</h3>
<h4>轮询SCM</h4>
<p>轮询远程仓库有代码变更就进行构建</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>H<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>  
</code></pre></div>`,r:{minutes:1.23,words:370},t:"Jenkins配置",y:"a"}}],["/cloud/ciAndCd/jenkins/",{loader:()=>a(()=>import("./index.html-D9oOg_5Z.js"),__vite__mapDeps([648,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Jenkins 是一款流行的开源持续集成（CI）与持续部署（CD）工具，用于自动化各种任务，包括构建、测试和部署软件。</p>
<h2>构建任务</h2>
<h4>流水线Pipeline</h4>
<p>一套运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的<strong>复杂流程编排与可视化</strong>。</p>
<ul>
<li><em><strong>Stage</strong></em>: 阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。如上图所示，Build，Test和Deploy就是Stage，代表了三个不同的阶段：编译、测试和部署。</li>
<li><em><strong>Node</strong></em>: 节点，一个Node就是一个Jenkins节点，或者是Master，或者是Slave，是执行Step的具体运行期环境。</li>
<li><em><strong>Step</strong></em>: 步骤，Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>
</ul>`,r:{minutes:1.68,words:505},t:"说明",y:"a"}}],["/cloud/ciAndCd/jenkins/yuanchengbushu.html",{loader:()=>a(()=>import("./yuanchengbushu.html-BEuWts3f.js"),__vite__mapDeps([649,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h3>配置远程服务器</h3>
<p>进入到”Manage Jenkins“ - "Configure System"中配置远程服务器
<img src="/common/1611562321669-ab5bec14-7a76-436b-9ddd-c1a932e7a1e7.png" alt="" loading="lazy">
Passphrase：SSH密码
Path to key：SSH私钥的文件路径
Key：私钥串，如果“Key”和“Path to key”都设置，则“Key”的优先级较高
Disable exec：禁止在目标机上执行命令
SSH Server 配置（指定远程服务器的ip，可以配置多个ssh server ）
Name：SSH节点配置的名称，在Job中使用Publish over SSH插件时，此名称将出现在“SSH Server”中“Name”的下拉列表中，如下图：
Hostname：通过SSH连接到的远程主机名或IP
Username：SSH服务使用的用户名，使用key进行连接时为key指定的用户名</p>`,r:{minutes:2.52,words:757},t:"远程部署",y:"a"}}],["/cloud/container/docker/commonCommand.html",{loader:()=>a(()=>import("./commonCommand.html-N0mzKfr4.js"),__vite__mapDeps([650,1])),meta:{a:"azrng",d:1683504e6,l:"2023年5月8日",c:["cloud"],g:["无"],o:!0,e:`<h2>1. Docker容器信息</h2>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 查看docker容器版本</span>
docker version
<span class="token comment">## 查看docker容器信息</span>
docker info
<span class="token comment">## 查看docker容器帮助文档</span>
docker <span class="token punctuation">-</span><span class="token punctuation">-</span>help
</code></pre></div>`,r:{minutes:8.08,words:2425},t:"Docker常用命令",y:"a"}}],["/cloud/container/docker/concept.html",{loader:()=>a(()=>import("./concept.html-D8y5D1bV.js"),__vite__mapDeps([651,1])),meta:{a:"azrng",d:16250112e5,l:"2021年6月30日",c:["cloud"],g:["无"],o:!0,e:`<p>可以基于镜像创建容器，也可以基于容器创建镜像。
从仓库拉取镜像，也可以将本地镜像推送到仓库。</p>
<h2>镜像(Image)</h2>
<p>Docker镜像是一个特殊的文件系统，包含了程序运行时候所需要的资源和环境。镜像不包含任何动态数据，其内容在构建之后也不会被改变。镜像就是模板，可以用来创建Docker容器，另外Docker提供了很简单的机制来创建镜像和更新现有的镜像，用户还可以直接从镜像仓库下载已经做好的镜像来直接使用。</p>
<h3>docker镜像加速原理</h3>
<p>docker镜像实际上是由一层一层的文件系统组成的，这种层级文件系统就是UnionFS
<img src="/common/1625064568269-4e28e7fe-cd4e-4033-a55f-34313c71839c.png" alt="image.png" loading="lazy"></p>`,r:{minutes:18.81,words:5642},t:"常见概念",y:"a"}}],["/cloud/container/docker/dockerbushunetcore.html",{loader:()=>a(()=>import("./dockerbushunetcore.html-CAra1mCr.js"),__vite__mapDeps([652,1])),meta:{a:"azrng",d:16844544e5,l:"2023年5月19日",c:["cloud"],g:["无"],o:!0,e:`<h3>增加dockerfile</h3>
<p>将写好的项目增加dockerfile文件，可以通过右键添加docker支持方式增加，然后发布弄到服务器</p>
<h3>生成自定义镜像</h3>
<p>在打包的项目目录下执行
命令：docker build -t 镜像名称:版本 .&nbsp; 后面有一个.标识是当前目录
示例：docker build -t booklibrary:1.0 .（结尾有一个点，代表在当前文件夹中查找dockerfile）
或者：docker build -t booklibrary .</p>
<h4>查看镜像</h4>
<p>命令：docker images</p>`,r:{minutes:1.43,words:428},t:"docker部署netcore",y:"a"}}],["/cloud/container/docker/dockerfilecaozuo.html",{loader:()=>a(()=>import("./dockerfilecaozuo.html-Bv6UeVcM.js"),__vite__mapDeps([653,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!1,e:`<h2>初体验</h2>
<ul>
<li>
<p>准备一个项目</p>
<p>这里就直接创建一个默认的API项目(基于.NetCore3.1)即可，什么都不做。</p>
</li>
<li>
<p>编写Dockerfile</p>
<p>在项目根目录下增加一个Dockerfile文件，里面内容如下：</p>
<figure><img src="/common/202212111144327.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>具体内容如下</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim
WORKDIR /app
COPY . .
EXPOSE 80
ENTRYPOINT ["dotnet", "DockerDemo.dll"]
</code></pre></div><p>设置Dockerfile的文件属性为始终复制，如下：</p>
<figure><img src="/common/202212111144648.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>以文件系统的形式发布项目，指定本地目录，如下：</p>
<figure><img src="/common/202212111144320.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
</li>
<li>
<p>将发布之后的文件拷贝到装有Docker的主机上</p>
<p>将项目进行发布，把发布之后的文件拷贝到我的阿里云服务器上，用到的工具是FinalShell(一个工具完成连接服务器和上传文件，很好用)，如下：</p>
<figure><img src="/common/202212111144960.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
</li>
<li>
<p>打包为镜像</p>
<p>进入发布文件目录，执行<code>docker build</code>命令，将发布文件打包为一个镜像，如下：</p>
<figure><img src="/common/202212111144030.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>上图中的mydockerdemo 是镜像名，可以自定义；通过<code>docker images</code>查看镜像是否生成，如下：</p>
<figure><img src="/common/202212111144782.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
</li>
<li>
<p>根据镜像启动容器(里面包含我们的项目)</p>
<p>镜像生成之后，就可以通过<code>docker run</code>指令根据镜像启动容器了，即启动我们的项目</p>
<figure><img src="/common/202212111144433.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -d --name mydockerdemo -p 9999:80 mydockerdemo
</code></pre></div><p>-d：后台模式运行；</p>
<p>--name：给运行中的容器指定一个名字；</p>
<p>-p：指定端口映射， 主机的端口9999映射到容器的端80，因为在容器里面我们的项目是以80 端口启动的；</p>
<p>最后一个参数是上一步生成的镜像名称， 即根据此镜像启动一个容器实例。</p>
</li>
<li>
<p>测试访问看看，只要配置了云服务器的安全组和防火墙放开9999端口，那么外网就可以访问了,如下：</p>
<figure><img src="/common/202212111144833.webp" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
</li>
</ul>`,r:{minutes:26.39,words:7917},t:"Dockerfile操作",y:"a"}}],["/cloud/container/docker/dockerfileGenerator.html",{loader:()=>a(()=>import("./dockerfileGenerator.html-FiTmACOe.js"),__vite__mapDeps([654,1])),meta:{a:"azrng",d:16765056e5,l:"2023年2月16日",c:["cloud"],g:["dockerfile"],o:!0,e:`<h2>概述</h2>
<p>通过实际的情况来描述如何生成镜像</p>
<h2>生成镜像</h2>
<h3>项目目录格式</h3>
<p>A目录</p>
<figure><img src="/common/1609562141077-6d3e1de3-a49d-4cc3-bd68-4594e7f93a0c.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>B目录</p>
<figure><img src="/common/1609562141087-6181298a-e038-4f2f-8ad2-b22271873ec2.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,r:{minutes:.62,words:186},t:"dockerfile生成镜像",y:"a"}}],["/cloud/container/docker/images.html",{loader:()=>a(()=>import("./images.html-Ois-wouK.js"),__vite__mapDeps([655,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["images"],o:!0,e:`<h2>镜像搜索</h2>
<p>微软发布的镜像列表：<a href="https://mcr.microsoft.com/" target="_blank" rel="noopener noreferrer">https://mcr.microsoft.com/</a></p>
<h2>NetCore镜像</h2>
<h3>官方镜像</h3>
<p>官网镜像地址：<a href="https://mcr.microsoft.com/product/dotnet/sdk/about" target="_blank" rel="noopener noreferrer">https://mcr.microsoft.com/product/dotnet/sdk/about</a><br>
dockerHub镜像地址：<a href="https://hub.docker.com/_/microsoft-dotnet" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/microsoft-dotnet</a></p>`,r:{minutes:3.46,words:1037},t:"镜像操作",y:"a"}}],["/cloud/container/docker/markSmallImage.html",{loader:()=>a(()=>import("./markSmallImage.html-BYJDnVRV.js"),__vite__mapDeps([656,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["docker"],o:!0,e:`<p>前段时间网易蜂巢曾经推出蜂巢 <code>Logo</code> T恤，用的正是 Docker 镜像制作，最神奇的是，它最终的镜像大小只有 <code>585</code> 字节。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>$ docker images | grep hub.c.163.com/public/logo
REPOSITORY                      TAG           IMAGE ID         CREATED       SIZE
hub.c.163.com/public/logo       latest        6fbdd13cd204     11 days ago   585 B
</code></pre></div>`,r:{minutes:9.55,words:2865},t:"制作精简的镜像",y:"a"}}],["/cloud/container/docker/",{loader:()=>a(()=>import("./index.html-aQ0d4GvQ.js"),__vite__mapDeps([657,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><strong>Docker 是一个开源的应用容器引擎，是用Go语言开发的</strong>。用于开发、交付和运行应用程序的开放平台，能够将应用程序与基础设施分开，从而可以快速交付软件。</p>
<p>看看Docker 的Logo图</p>
<figure><img src="/common/image-20230924163836131.png" alt="image-20230924163836131" tabindex="0" loading="lazy"><figcaption>image-20230924163836131</figcaption></figure>`,r:{minutes:4.84,words:1453},t:"说明",y:"a"}}],["/cloud/container/docker/wentichuli.html",{loader:()=>a(()=>import("./wentichuli.html-DMuBiwEK.js"),__vite__mapDeps([658,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>版本问题</h2>
<p>Error parsing reference: "mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base" is not a valid repository/tag: invalid reference format</p>
<h3>原因</h3>
<p>这个问题一般是由docker的版本错误导致的
FROM microsoft/dotnet:2.2-aspnetcore-runtime AS base，使用docker的新特性multi-stage build，该特性要求docker 17.05或更高版本。
我使用的服务器版本是centos 7.5 ,默认安装docker安装的docker 1.13.1版本</p>`,r:{minutes:1.04,words:312},t:"问题处理",y:"a"}}],["/cloud/container/dockerCompose/changyongjiaoben.html",{loader:()=>a(()=>import("./changyongjiaoben.html-CJSSzsaU.js"),__vite__mapDeps([659,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>安装gitlab</h2>
<p>1.创建一个全新的虚拟机，并且至少有4g运行内存
2.安装docker以及docker_compose
3.将ssh的默认的22端口，修改为60022端口
vi /etc/ssh/sshd_config
port 22-&gt;60022
systemctl restart sshd
4.docker-compose.yml文件去安装gitlab(下载和运行时间比较长)</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>version: '3.1'
services: 
  image: 'twang2218/gitlab-ce-zh:11.1.4'
  container_name: 'gitlab'
  restart: always
  privileged: true
  hostname: 'gitlab'
  environment: 
    TZ: 'Asiz/Shanghai'
    GITLAB_OMNIBUS_CONFIG: |
      external_url 'http:/192.168.199.110'
      gitlab_rails['time_zone']='Asia/Shanghai'
      gitlab_rails['smtp_enable']=true
      gitlab_rails['gitlab_shell_ssh_port']=22
  ports: 
    - '80:80'
    - '443:443'
    - '22:22'
  volumes: 
    - /opt/docker_gitlab/config:/etc/gitlab
    - /opt/docker_gitlab/data:/var/opt/gitlab
    - /opt/docker_gitlab/logs:/var/log/gitlab
</code></pre></div>`,r:{minutes:1.61,words:483},t:"常用脚本",y:"a"}}],["/cloud/container/dockerCompose/composeIssue.html",{loader:()=>a(()=>import("./composeIssue.html-BdYDT-sy.js"),__vite__mapDeps([660,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>Couldn’t connect to Docker daemon at http+docker://localunixsocket - is it running?</h2>
<p>解决方案：出现这个问题是因为当前用户权限的问题，只要将当前用户加入docker组就可以了
如果还没有docker group分组就添加一个
命令：sudo groupadd docker
将用户加入该group分组，然后退出并重新登录就生效了
命令：sudo gpasswd -a \${USER} docker
重启docker服务
命令：sudo service docker restart
切换当前会话到新group
命令：newgrp - docker
或者
原因是服务没有启动或者docker-compose版本太老了，或者使用sudo docker-compose up</p>`,r:{minutes:1.26,words:379},t:"问题处理",y:"a"}}],["/cloud/container/dockerCompose/linuxInstall.html",{loader:()=>a(()=>import("./linuxInstall.html-C1NwJaL4.js"),__vite__mapDeps([661,1])),meta:{a:"azrng",d:16694208e5,l:"2022年11月26日",c:["cloud"],g:["无"],o:!0,e:`<h2>说明</h2>
<p><strong>Docker默认安装环境下是不包含Docker Compose工具的，需要单独安装</strong>。Docker Compose工具搭配Docker才有意义，所以安装Docker Compose之前需要安装Docker。以下演示平台为Linux，其他平台请参照文档：https://docs.docker.com/compose/install/</p>
<h2>下载文件</h2>
<p>其实Docker Compose是一个<strong>可执行文件</strong>，直接下载对应文件即可，执行如下命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 下载Docker Compose文件， 这个地址下载比较慢</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

<span class="token comment"># 如果想安装其他版本，只需要上面命令中的1.29.2替换为想要安装的版本号即可，比如当下最新的版本为2.22.0，那么脚本如下（该版本需要加v）</span>
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
</code></pre></div>`,r:{minutes:1.64,words:492},t:"Linux安装Docker-Compose",y:"a"}}],["/cloud/container/dockerCompose/peizhiwenjian.html",{loader:()=>a(()=>import("./peizhiwenjian.html-BjZHOgK6.js"),__vite__mapDeps([662,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>说明</h2>
<p><strong>Docker Compose需要搭配YAML文件使用，YAML 是一种数据序列化语言，适用于所有编程语言，后缀名为.yml</strong>。</p>
<p>所以在进行实操前，需要大概的了解一下YAML的语法，不要慌，语法和Json的思路很像，大概了解一下，后续用到查文档就行啦。</p>
<h3>简单说说语法</h3>
<p><strong>YAML文件内容是通过空格的缩进来代表层次</strong>，常用的数据类型有如下：</p>
<ul>
<li>
<p><strong>对象</strong>：键值对集合；</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># yaml 对象语法
testKey:testValue
# Json 语法
{"testKey":"testValue"}
# yaml 嵌套对象
testKey:{testKey1:testValue1,testKey2:testValue2}
# Json 语法
{"testKey":{"testKey1":"testValue1","testKey2":"testValue2"}}
</code></pre></div></li>
<li>
<p><strong>数组</strong>：一组按次序排列的数据；用-前缀表示。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># yaml 数组语法
-value1
-value2
-value3
# Json 数组语法
["value1","value2","value3"]
# yaml 数组行内语法
testKey:[value1,value2]
# Json 语法
{"testKey":['value1','value2']}
</code></pre></div></li>
<li>
<p><strong>纯量</strong>：不可再分的值，包括字符串、整数、浮点数、日期、布尔值等。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code># yaml
testKey:666
# Json
{testKey:666}
# yaml
isbool:true
# Json
{isbool:true}
</code></pre></div></li>
</ul>`,r:{minutes:7.84,words:2351},t:"配置文件",y:"a"}}],["/cloud/container/dockerCompose/",{loader:()=>a(()=>import("./index.html-BVLzSHIi.js"),__vite__mapDeps([663,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。</p>
<p>举个例：比如开发一个Web项目，需要有数据库、Redis、MongoDB、配置中心等等，如果将其进行容器化，可以有两种选择，第一种就是把所有的服务依赖和应用程序全部构建为一个镜像，然后以一个容器运行，即这个容器里面包含了Web应用程序、数据库、Redis、MongoDB、配置中心等；另一种方式就各自服务单独启动为一个容器服务，比较独立，一般可以一个一个的启动容器，然后通过网络连接起来就行；显然第二种方式是小伙伴们更多的选择，如果能配上一个批量操作那就完美了，而Docker Compose就是来干这个事的。</p>`,r:{minutes:3.64,words:1092},t:"说明",y:"a"}}],["/cloud/container/operators/portainer.html",{loader:()=>a(()=>import("./portainer.html-CafIVC6q.js"),__vite__mapDeps([664,1])),meta:{a:"azrng",d:16858368e5,l:"2023年6月4日",c:["cloud"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>轻量级图形页面管理之Portainer</p>
<blockquote>
<p>官网：<a href="http://www.portainer.io" target="_blank" rel="noopener noreferrer">http://www.portainer.io</a>
演示地址：<a href="http://demo.portainer.io" target="_blank" rel="noopener noreferrer">http://demo.portainer.io</a> 用户名：admin 密码：tryportainer</p>
</blockquote>`,r:{minutes:1.23,words:369},t:"可视化界面Portainer",y:"a"}}],["/cloud/container/operators/",{loader:()=>a(()=>import("./index.html-CkgdXexG.js"),__vite__mapDeps([665,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>Docker在线版：<a href="https://labs.play-with-docker.com/" target="_blank" rel="noopener noreferrer">https://labs.play-with-docker.com/</a></p>
</blockquote>
<h2>Docker可视化</h2>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 9000<span class="token punctuation">:</span>9000  <span class="token punctuation">-</span><span class="token punctuation">-</span>name portainer <span class="token punctuation">-</span><span class="token punctuation">-</span>restart always  <span class="token punctuation">-</span>v /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock <span class="token punctuation">-</span><span class="token punctuation">-</span>restart=always <span class="token punctuation">-</span><span class="token punctuation">-</span>name prtainer portainer/portainer
</code></pre></div>`,r:{minutes:3.57,words:1072},t:"Docker部署常用服务",y:"a"}}],["/cloud/container/podman/install.html",{loader:()=>a(()=>import("./install.html-D5mZKrTn.js"),__vite__mapDeps([666,1])),meta:{a:"azrng",d:1711152e6,l:"2024年3月23日",c:["cloud"],g:["podman","install"],o:!0,e:`<h2>Centos安装</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//安装podman
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># yum -y install podman</span>

//仓库配置
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/containers/registries.conf</span>
<span class="token punctuation">[</span>registries.search<span class="token punctuation">]</span>
registries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'registry.access.redhat.com'</span>, <span class="token string">'registry.redhat.io'</span>, <span class="token string">'docker.io'</span><span class="token punctuation">]</span> //这个是查找，从这三个地方查找，如果只留一个，则只在一个源里查找
unqualified-search-registries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"registry.fedoraproject.org"</span>, <span class="token string">"registry.access.redhat.com"</span>, <span class="token string">"registry.centos.org"</span>, <span class="token string">"docker.io"</span><span class="token punctuation">]</span> //这里也要改为一个

<span class="token punctuation">[</span>registries.insecure<span class="token punctuation">]</span>
registries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.0</span>.0.1<span class="token punctuation">]</span>   //这里写那些http的仓库，比如harbor

//配置加速器
<span class="token punctuation">[</span>registries.search<span class="token punctuation">]</span>
registries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://l9h8fu9j.mirror.aliyuncs.com'</span>,<span class="token string">'docker.io'</span><span class="token punctuation">]</span>
</code></pre></div>`,r:{minutes:.49,words:146},t:"安装",y:"a"}}],["/cloud/container/podman/",{loader:()=>a(()=>import("./index.html-wahozqwP.js"),__vite__mapDeps([667,1])),meta:{a:"azrng",d:1711152e6,l:"2024年3月23日",c:["cloud"],g:["podman"],o:!0,e:`<h2>概述</h2>
<p>Podman 是一个开源的容器运行时项目，可在大多数 Linux 平台上使用。Podman 提供与 Docker 非常相似的功能。正如前面提到的那样，它不需要在你的系统上运行任何守护进程，并且它也可以在没有 root 权限的情况下运行。</p>
<p>Podman 可以管理和运行任何符合 OCI（Open Container Initiative）规范的容器和容器镜像。Podman 提供了一个与 Docker 兼容的命令行前端来管理 Docker 镜像。</p>
<p>Podman 官网地址：<a href="https://link.zhihu.com/?target=https%3A//podman.io/" target="_blank" rel="noopener noreferrer">https://podman.io/</a></p>`,r:{minutes:2.09,words:628},t:"说明",y:"a"}}],["/cloud/k3s/operators/netCoreInstall.html",{loader:()=>a(()=>import("./netCoreInstall.html-DDdYYN-e.js"),__vite__mapDeps([668,1])),meta:{a:"azrng",d:17038944e5,l:"2023年12月30日",c:["cloud"],g:["dotnet","k3s"],o:!0,e:`<h2>配置文件</h2>
<p>master-deployment.yaml</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: net-sample
  labels:
    name: net-sample
spec:
  selector:
    matchLabels:
      name: net-sample
  replicas: 1 # 启动实例数
  template:
    metadata:
      labels:
        name: net-sample
    spec:
      containers:
        - name: net-sample
          image: registry.cn-hangzhou.aliyuncs.com/zrng/test:0.0.2 # 镜像地址
          imagePullPolicy: Always
          ports:
            - containerPort: 8080 # 端口和netcore内部端口要一致
</code></pre></div>`,r:{minutes:.94,words:281},t:".Net部署",y:"a"}}],["/cloud/k3s/operators/redisInstall.html",{loader:()=>a(()=>import("./redisInstall.html-DAnqQQ4y.js"),__vite__mapDeps([669,1])),meta:{a:"azrng",d:17038944e5,l:"2023年12月30日",c:["cloud"],g:["redis","k3s"],o:!0,e:`<h2>创建配置文件</h2>
<p>创建配置文件redis-master-deployment.yaml</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1 
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> redis
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> redis
      <span class="token key atrule">role</span><span class="token punctuation">:</span> master
      <span class="token key atrule">tier</span><span class="token punctuation">:</span> backend
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> redis
        <span class="token key atrule">role</span><span class="token punctuation">:</span> master
        <span class="token key atrule">tier</span><span class="token punctuation">:</span> backend
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> master
        <span class="token key atrule">image</span><span class="token punctuation">:</span> kubeguide/redis<span class="token punctuation">-</span>master
        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">6379</span>
</code></pre></div>`,r:{minutes:.58,words:173},t:"Redis部署",y:"a"}}],["/cloud/k8s/anzhuang/minikube.html",{loader:()=>a(()=>import("./minikube.html-CZh5JgzY.js"),__vite__mapDeps([670,1])),meta:{a:"azrng",d:16422912e5,l:"2022年1月16日",c:["cloud"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Minikube 是一个易于在本地运行 Kubernetes 的工具，可在你的笔记本电脑上的虚拟机内轻松创建单机版 Kubernetes 集群。便于尝试 Kubernetes 或使用 Kubernetes 日常开发。
地址：<a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener noreferrer">https://github.com/kubernetes/minikube</a></p>
`,r:{minutes:.29,words:86},t:"Minikube",y:"a"}}],["/cloud/k8s/anzhuang/rainbond.html",{loader:()=>a(()=>import("./rainbond.html-CpW_ktuS.js"),__vite__mapDeps([671,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["cloud"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Rainbond是一款以应用为中心的开源PaaS，由好雨基于Docker、Kubernetes等容器技术自主研发，可作为公有云或私有云环境下的应用交付平台、DevOps平台、自动化运维平台和行业云平台，或作为企业级的混合云多云管理工具、Kubernetes容器管理工具或Service Mesh微服务架构治理工具。</p>
<p>官网：<a href="https://www.rainbond.com/" target="_blank" rel="noopener noreferrer">https://www.rainbond.com/</a>
文档地址：<a href="https://www.rainbond.com/docs/installation/install-with-dind/" target="_blank" rel="noopener noreferrer">https://www.rainbond.com/docs/installation/install-with-dind/</a></p>`,r:{minutes:.49,words:146},t:"Rainbond",y:"a"}}],["/cloud/k8s/anzhuang/rancher.html",{loader:()=>a(()=>import("./rancher.html-JKttcR-z.js"),__vite__mapDeps([672,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["cloud"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Rancher 发行的操作系统新选择：Rancher Desktop for Windows，它可以帮助你在Windows桌面上管理Kubernetes和容器。当然他当然会支持Linux，Mac的。</p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/D4SEJ2FY7hNXahNSDHobQg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/D4SEJ2FY7hNXahNSDHobQg</a></p>
`,r:{minutes:.25,words:76},t:"Rancher",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/casbinfangwenkongzhi.html",{loader:()=>a(()=>import("./casbinfangwenkongzhi.html-BvBk84pS.js"),__vite__mapDeps([673,1])),meta:{a:"azrng",d:16510176e5,l:"2022年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>强大而高效的开源访问控制库，支持基于各种访问控制模型强制实施授权。</p>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Casbin<span class="token punctuation">.</span>NET <span class="token operator">-</span>Version <span class="token number">2.0</span><span class="token number">.0</span><span class="token operator">-</span>preview<span class="token punctuation">.</span><span class="token number">3</span>
</code></pre></div>`,r:{minutes:.25,words:75},t:"Casbin访问控制",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/changyongzujian.html",{loader:()=>a(()=>import("./changyongzujian.html-D3mR_ySm.js"),__vite__mapDeps([674,1])),meta:{a:"azrng",d:16510176e5,l:"2022年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>组件</h2>
<h3>IdentityModel</h3>
<p>OpenID Connect &amp; OAuth 2.0 client library
IdentityModel是一个基于Claim的Identity库，提供了一组类来标识用户的身份，以及对这些东西的抽象。</p>
<blockquote>
<p>历史介绍：最初，IdentityModel 是属于 WIF(Windows Identity Foundation) 的一部分，WIF 是微软2004年给 .NET 平台搞的一套身份验证框架（包含Claims，Configuration，Metadata，Policy，Servicesd等等），微软想把这个东西作为 .NET 标准框架的一部分，所以它的命名空间是 System.IdentityModel， 了解这个东西的人不是很多，不过不知道也没关系，反正这玩意也已经被淘汰了。
在 .NET Core 中， WIF 这些套件只有 System.IdentityModel.Tokens.Jwt 被保留了下来，其他全被扔掉了，为什么呢？
原因是只有 JWT 这部分东西有用，其他的部分更多的是为以前的 Web Servics, WCF 那套分布式东西设计的，那套分布式的东西淘汰了，自然也不必要保留了。</p>
</blockquote>`,r:{minutes:10.42,words:3125},t:"常用组件",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/claimsxiangguangainian.html",{loader:()=>a(()=>import("./claimsxiangguangainian.html-C_ochJPu.js"),__vite__mapDeps([675,1])),meta:{a:"azrng",d:1695168e6,l:"2023年9月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>验证模型</h2>
<p>ASP.NET Core 的验证模型是&nbsp;claims-based authentication 。**Claim&nbsp;**是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。
You can think of claims as being a statement about...That statement consists of a name and a value.
对应现实中的事物，比如驾照，驾照中的“身份证号码：xxx”是一个claim，“姓名：xxx”是另一个claim。
一组claims构成了一个identity，具有这些claims的identity就是 <strong>ClaimsIdentity</strong> ，驾照就是一种ClaimsIdentity，可以把ClaimsIdentity理解为“证件”，驾照是一种证件，护照也是一种证件。
ClaimsIdentity的持有者就是 **ClaimsPrincipal&nbsp;**，一个ClaimsPrincipal可以持有多个ClaimsIdentity，就比如一个人既持有驾照，又持有护照。
理解了Claim, ClaimsIdentity, ClaimsPrincipal这三个概念，就能理解生成登录Cookie为什么要用下面的代码？</p>`,r:{minutes:6.05,words:1815},t:"Claims相关概念",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-BvDj1KsG.js"),__vite__mapDeps([676,1])),meta:{a:"azrng",d:1675728e6,l:"2023年2月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>身份验证：用户提供凭据，然后将其和存储在数据库或者其他地方的凭据进行对比。如果凭据匹配，则用户身份验证成功，<strong>是一种识别用户是谁的操作</strong>。
授权：指判断是否允许用户执行操作的过程，是<strong>确定用户是否有权限访问资源的过程</strong>。</p>
<h2>认证</h2>
<p>如果访问要求身份验证的终结点，但是并没有添加身份验证，那么就会提示错误</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>No authenticationScheme <span class="token class-name">was</span> specified<span class="token punctuation">,</span> <span class="token keyword">and</span> there was no DefaultChallengeScheme found<span class="token punctuation">.</span>
</code></pre></div>`,r:{minutes:6.21,words:1864},t:"概述",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/httpcontext.html",{loader:()=>a(()=>import("./httpcontext.html-BvQnc1gY.js"),__vite__mapDeps([677,1])),meta:{a:"azrng",d:16470432e5,l:"2022年3月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<h2>源码解答</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">AddIdentities</span><span class="token punctuation">(</span>claimIdentiies<span class="token punctuation">)</span><span class="token punctuation">;</span>

context<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimsIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.77,words:230},t:"HttpContext",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/huoquyonghuxinxi.html",{loader:()=>a(()=>import("./huoquyonghuxinxi.html-BxW_hyk6.js"),__vite__mapDeps([678,1])),meta:{a:"azrng",d:16962912e5,l:"2023年10月3日",c:["dotNET"],g:["无"],o:!0,e:`<h2>用户信息设置</h2>
<p>用户信息一般是保存在上下文的HttpContext的User中，然后我们可以通过下面的方法去获取</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">// 保存用户信息</span>
<span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhagnsna"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
HttpContext<span class="token punctuation">.</span>User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>Type<span class="token operator">==</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.43,words:1330},t:"获取用户信息",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/shujubaohushixianxianshitoken.html",{loader:()=>a(()=>import("./shujubaohushixianxianshitoken.html-BXZmJtqV.js"),__vite__mapDeps([679,1])),meta:{a:"azrng",d:16510176e5,l:"2022年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>使用场景</h2>
<p>生成有过期时间的token凭据。比如重置密码的令牌。</p>
<h2>操作</h2>
<h3>数据保护组件</h3>
<p>注册数据保护</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.9,words:270},t:"数据保护实现限时Token",y:"a"}}],["/dotnet/api/controllerApi/action.html",{loader:()=>a(()=>import("./action.html-Boz8Wfew.js"),__vite__mapDeps([680,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>特性</h2>
<h3>[HttpPost]</h3>
<p>表示请求的谓词是Post. 加上Controller的Route前缀, 那么访问这个Action的地址就应该是: 'api/product'
后边也可以跟着自定义的路由地址, 例如 [HttpPost("create")], 那么这个Action的路由地址就应该是: 'api/product/create'.</p>
<h3>[FromBody]</h3>
<p>请求的body里面包含着方法需要的实体数据, 方法需要把这个数据Deserialize成ProductCreation, [FromBody]就是干这些活的.
客户端程序可能会发起一个Bad的Request, 导致数据不能被Deserialize, 这时候参数product就会变成null. 所以这是一个客户端发生的错误, 程序为让客户端知道是它引起了错误, 就应该返回一个<strong>Bad Request</strong>&nbsp;400 (Bad Request表示客户端引起的错误)的 Status Code.</p>`,r:{minutes:11.31,words:3394},t:"Action",y:"a"}}],["/dotnet/api/controllerApi/banbenkongzhi.html",{loader:()=>a(()=>import("./banbenkongzhi.html-B0vX1ban.js"),__vite__mapDeps([681,1])),meta:{a:"azrng",d:16421184e5,l:"2022年1月14日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文示例代码环境：vs2019+.Net5</p>
</blockquote>
<h2>1. 优点</h2>
<ol>
<li>有助于保护原有系统，不受影响，并及时修改问题</li>
<li>可以实现用户的私人定制（比如是付费接口）</li>
<li>快速迭代</li>
</ol>
<h2>2. API版本控制</h2>
<ul>
<li>在URL中追加版本或者作为查询字符串参数</li>
<li>通过自动以标头和通过接受标头</li>
</ul>
<h3>2.1 安装组件</h3>
<p>ASP.NET API versioning为您提供了一种功能强大但易于使用的方法，用于将API版本控制语义添加到使用ASP.NET构建的新的和现有的REST服务中。API版本控制扩展定义了简单的元数据属性和约定，用于描述您的服务实现了哪些API版本。</p>`,r:{minutes:4.46,words:1339},t:"版本控制",y:"a"}}],["/dotnet/api/controllerApi/douquqingqiuti.html",{loader:()=>a(()=>import("./douquqingqiuti.html-Brq9R0ky.js"),__vite__mapDeps([682,1])),meta:{a:"azrng",d:16655328e5,l:"2022年10月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>本文来介绍一下如何读取Request.Body正确方式。</p>
<h2>场景</h2>
<p>比如想记录每次请求的参数，这个时候就需要读取Request.Body来获取信息</p>
<h2>读取</h2>
<h3>中间件读取</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _requestDelegate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> requestDelegate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _requestDelegate <span class="token operator">=</span> requestDelegate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以实现多次读取Body</span>
        <span class="token comment">/*
         因为我们在读取完Stream之后，此时的Stream指针位置已经在Stream的结尾处，即Position此时不为0，
        而Stream读取正是依赖Position来标记外部读取Stream到啥位置，所以我们再次读取的时候会从结尾开始读，
        也就读取不到任何信息了。所以我们要想重复读取RequestBody那么就要再次读取之前重置RequestBody的Position为0，

         */</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"data="</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>

        <span class="token keyword">await</span> <span class="token function">_requestDelegate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> sr2<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"data="</span> <span class="token operator">+</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.68,words:503},t:"读取请求体",y:"a"}}],["/dotnet/api/controllerApi/gechongbutongjieshougeshi.html",{loader:()=>a(()=>import("./gechongbutongjieshougeshi.html-CBmTQ7Zt.js"),__vite__mapDeps([683,1])),meta:{a:"azrng",d:16438464e5,l:"2022年2月3日",c:["dotNET"],g:["无"],o:!0,e:`<h3>Dictionary</h3>
<p>RawData(Dictionary&lt;string, string&gt; data)</p>
<h4>postman请求格式</h4>
<p>raw</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token string">"keys"</span><span class="token punctuation">:</span> <span class="token string">"121"</span><span class="token punctuation">,</span>
    <span class="token string">"aa"</span><span class="token punctuation">:</span> <span class="token string">"555"</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.57,words:171},t:"各种不同接收格式",y:"a"}}],["/dotnet/api/controllerApi/geshihuaxiangyingshuju.html",{loader:()=>a(()=>import("./geshihuaxiangyingshuju.html-DQ4WxddX.js"),__vite__mapDeps([684,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文示例环境：vs2022、.net5</p>
</blockquote>
<h2>返回内容协商</h2>
<p>WebApi提供了多种内容格式，那么可以通过accept header来选择最好的内容返回格式，比如application/json, application/xml等等，如果没有专门设置，那么webapi就会使用默认的格式。默认是json格式，也可以配置xml等格式。</p>
<h2>配置格式化程序</h2>
<p>要想支持额外的格式可以添加相应的nuget包并配置来支持。输入和输出的格式化程序不同。 模型绑定使用输入格式化程序。 格式响应使用输出格式化程序。</p>`,r:{minutes:6.59,words:1976},t:"格式化响应数据",y:"a"}}],["/dotnet/api/controllerApi/httpcontext.html",{loader:()=>a(()=>import("./httpcontext.html-BvPnNdKX.js"),__vite__mapDeps([685,1])),meta:{a:"azrng",d:16965504e5,l:"2023年10月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>HttpContext 封装了有关个别 HTTP 请求和响应的所有信息。 收到 HTTP 请求时，HttpContext 实例会进行初始化。</p>
<h2>注意事项</h2>
<p>HttpContext 不是线程安全型。 在处理请求之外读取或写入 HttpContext 的属性可能会导致 NullReferenceException</p>
<p>文档：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-7.0#httpcontext-access-from-a-background-thread</a></p>`,r:{minutes:4.42,words:1326},t:"HttpContext",y:"a"}}],["/dotnet/api/controllerApi/jiekoufanhuilei.html",{loader:()=>a(()=>import("./jiekoufanhuilei.html-BSETAfg9.js"),__vite__mapDeps([686,1])),meta:{a:"azrng",d:16798752e5,l:"2023年3月27日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IApiResult</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 是否成功</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSuccess <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 消息</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> Message <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 错误码</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> Code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IApiResult<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IApiResult</span></span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 数据</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token return-type class-name">T</span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiResult</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IApiResult</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _message<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _code<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsSuccess <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>_code<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty <span class="token punctuation">:</span> _code<span class="token punctuation">;</span>
            <span class="token keyword">set</span> <span class="token operator">=&gt;</span> _code <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Message
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty <span class="token punctuation">:</span> _message<span class="token punctuation">;</span>
            <span class="token keyword">set</span> <span class="token operator">=&gt;</span> _message <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiResult<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ApiResult</span><span class="token punctuation">,</span> <span class="token class-name">IApiResult<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">T</span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.45,words:136},t:"接口返回类",y:"a"}}],["/dotnet/api/controllerApi/kuayuqingqiu.html",{loader:()=>a(()=>import("./kuayuqingqiu.html-DlSiyErL.js"),__vite__mapDeps([687,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>浏览器的安全策略上的限制可以有效组织Ajax向另外的一个服务发起请求，这就是著名的同源策略。跨域仅仅是浏览器的行为，通过代理服务器，或者其他工具可以绕过。
不同的域名、不用的端口、不用的协议之间请求都会出现跨域问题。</p>
<p>跨域对同源的要求有三点：协议相同、ip相同、端口相同。</p>
<h2>操作</h2>
<h3>Cors</h3>
<h4>注册服务</h4>
<p>如何突破这种限制，可以使用CORS。NetF中可以使用microsoft.aspnet.webapi.cors包来解决跨域问题。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddCommon</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            services<span class="token punctuation">.</span><span class="token function">AddCors</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
               options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AllowAll"</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    p<span class="token punctuation">.</span><span class="token function">AllowAnyOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//允许任务来源的主机访问</span>
                      <span class="token punctuation">.</span><span class="token function">AllowAnyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//允许任何请求方式</span>
                      <span class="token punctuation">.</span><span class="token function">AllowAnyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许任何头部</span>
                      <span class="token comment">//.AllowCredentials();//允许任何证书     </span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.13,words:638},t:"跨域请求",y:"a"}}],["/dotnet/api/controllerApi/moxingbangdingheyanzheng.html",{loader:()=>a(()=>import("./moxingbangdingheyanzheng.html-C4uWbK63.js"),__vite__mapDeps([688,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>模型绑定就是接收将来自HTTP请求的数据映射到模型的过程，这个过程是自动进行的。如果找不到模型属性的值，并不会报错，而是给该属性设置默认值。
示例：比如我们有一个接口为</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"{id}"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span>Pet<span class="token punctuation">&gt;</span></span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> dogsOnly<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:13.34,words:4002},t:"模型绑定和验证",y:"a"}}],["/dotnet/api/controllerApi/moxingyanzhengfluentvalidation.html",{loader:()=>a(()=>import("./moxingyanzhengfluentvalidation.html-D-lFjeN_.js"),__vite__mapDeps([689,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>用于构建强类型验证规则的.NET 库。FluentValidation的原理是通过实现<code>AbstractValidator&lt;T&gt;</code>来实现对T实体类的验证，通过不同的Rule来验证T中的属性。</p>
<h2>操作</h2>
<blockquote>
<p>本文示例代码：vs2022、.Net6</p>
</blockquote>
<p>.Net WebApi项目引用组件</p>
<div class="language-plsql" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code> <span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">"FluentValidation.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"11.2.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.45,words:1035},t:"模型验证FluentValidation",y:"a"}}],["/dotnet/api/controllerApi/qingqiucanshubangding.html",{loader:()=>a(()=>import("./qingqiucanshubangding.html-NkeU-oe9.js"),__vite__mapDeps([690,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Json格式请求参数绑定</h2>
<p>对于json格式的入参，不去创建Action类，直接像[FromQuery]一样进行绑定。
仓库地址：<a href="https://github.com/yangzhongke/YouZack.FromJsonBody" target="_blank" rel="noopener noreferrer">https://github.com/yangzhongke/YouZack.FromJsonBody</a></p>
<h3>操作</h3>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package YouZack<span class="token punctuation">.</span>FromJsonBody
</code></pre></div>`,r:{minutes:.5,words:149},t:"请求参数绑定",y:"a"}}],["/dotnet/api/controllerApi/qingqiuwenjianchuli.html",{loader:()=>a(()=>import("./qingqiuwenjianchuli.html-BYtuLyZV.js"),__vite__mapDeps([691,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>其他资料</h2>
<p><a href="https://www.yuque.com/docs/share/eef00bc7-9cb3-4ba2-9099-d72bfacde44e?view=doc_embed" target="_blank" rel="noopener noreferrer">文件与目录操作</a></p>
<h2>基础操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 字节数据保存文件</span>
System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">WriteAllBytes</span><span class="token punctuation">(</span><span class="token string">"d:\\\\999.png"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 是否存在</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:11.06,words:3319},t:"请求文件处理",y:"a"}}],["/dotnet/api/controllerApi/",{loader:()=>a(()=>import("./index.html-BS3jB-25.js"),__vite__mapDeps([692,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>在 ASP.NET Core 应用中，一个 WebAPI 控制器需遵循以下约定：</p>
<ul>
<li>控制器类必须继承 ControllerBase 或间接继承</li>
<li>动作方法必须贴有 [HttpMethod] 特性，如：[HttpGet]</li>
<li>控制器或动作方法至少有一个配置 [Route] 特性</li>
<li>生成 WebAPI 路由地址时会自动去掉控制器名称 Controller 后缀</li>
<li>[ApiController]这个特训个是应用于Controller，它其实并不是强制的，但是他提供了一些帮助，使得WebApi的开发更好。
<ul>
<li>要求适用属性路由，也就是不能通过strartup的configure方法统一配置路由模板。</li>
<li>自动http 400响应。也就是action方法传入的model含有验证错误的时候，会自动出发http 400响应。</li>
<li>推断参数的绑定源。它将推断出acrion方法的参数到底来自于哪个绑定源，[FromBody]、[FormForm]等等。</li>
</ul>
</li>
</ul>`,r:{minutes:2.03,words:608},t:"基于控制器的API",y:"a"}}],["/dotnet/api/controllerApi/webapijiekouqingqiuwanshan.html",{loader:()=>a(()=>import("./webapijiekouqingqiuwanshan.html-BRyNUnQV.js"),__vite__mapDeps([693,1])),meta:{a:"azrng",d:16911072e5,l:"2023年8月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过一个简单的项目，编写一些WebApi操作示例。
http状态码大全：<a href="https://www.php.cn/course/1020.html" target="_blank" rel="noopener noreferrer">https://www.php.cn/course/1020.html</a></p>
<blockquote>
<p>本文示例代码环境：vs2022、net6</p>
</blockquote>
<h2>准备</h2>
<p>新创建了一个.NetWebAPI程序，安装组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"AutoMapper.Extensions.Microsoft.DependencyInjection"</span> Version<span class="token operator">=</span><span class="token string">"11.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Mvc.NewtonsoftJson"</span> Version<span class="token operator">=</span><span class="token string">"6.0.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Swashbuckle.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"6.3.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Swashbuckle.AspNetCore.Newtonsoft"</span> Version<span class="token operator">=</span><span class="token string">"6.3.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:9.44,words:2832},t:"WebApi操作示例",y:"a"}}],["/dotnet/api/controllerApi/xiangyingyasu.html",{loader:()=>a(()=>import("./xiangyingyasu.html-DNBVhpkU.js"),__vite__mapDeps([694,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>响应压缩技术是目前Web开发领域中比较常用的技术，在带宽资源受限的情况下，使用压缩技术是提升带宽负载的首选方案。我们熟悉的Web服务器，比如IIS、Tomcat、Nginx、Apache等都可以使用压缩技术，常用的压缩类型包括Brotli、Gzip、Deflate，它们对CSS、JavaScript、HTML、XML 和 JSON等类型的效果还是比较明显的，但是也存在一定的限制对于图片效果可能没那么好，因为图片本身就是压缩格式。其次，对于小于大约150-1000 字节的文件（具体取决于文件的内容和压缩的效率，压缩小文件的开销可能会产生比未压缩文件更大的压缩文件。在ASP.NET Core中我们可以使用非常简单的方式来使用响应压缩。</p>`,r:{minutes:2.43,words:729},t:"响应压缩",y:"a"}}],["/dotnet/api/remoteProcedureCall/flurl_httpgonggonglei.html",{loader:()=>a(()=>import("./flurl_httpgonggonglei.html-Ct5fTGP3.js"),__vite__mapDeps([695,1])),meta:{a:"azrng",d:16819488e5,l:"2023年4月20日",c:["dotNET"],g:["无"],o:!0,e:`<p>需要将下面文档稍作修改</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 网络请求帮助类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpHelper</span>
<span class="token punctuation">{</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Get</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">HttpGetAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">YuQueResult</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> url
        <span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReceiveJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Post</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postData<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">HttpPostAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> postData<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">YuQueResult</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>postData <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> url
        <span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">PostJsonAsync</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReceiveJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Put</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postData<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">HttpPutAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> postData<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">YuQueResult</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>postData <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> url
        <span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">PutJsonAsync</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReceiveJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// DeleteA</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">HttpDeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">YuQueResult</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> url
        <span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">DeleteAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReceiveJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>Status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>IsSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// get请求</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>语雀个人设置的token<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAgent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>语雀需要收集的用户标识<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>请求到的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> token<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> userAgent <span class="token operator">=</span> <span class="token string">"netCoreSdk"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">HttpWebRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebRequest<span class="token punctuation">)</span>WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"X-Auth-Token"</span><span class="token punctuation">,</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token class-name">HttpWebResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebResponse<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// get请求</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请求地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>语雀个人设置的token<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAgent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>语雀需要收集的用户标识<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>请求到的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">HttpGetAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> token<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> userAgent <span class="token operator">=</span> <span class="token string">"netCoreSdk"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">HttpWebRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebRequest<span class="token punctuation">)</span>WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"X-Auth-Token"</span><span class="token punctuation">,</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token class-name">HttpWebResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpWebResponse<span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.77,words:531},t:"Flurl.Http公共类",y:"a"}}],["/dotnet/api/remoteProcedureCall/httpclient.html",{loader:()=>a(()=>import("./httpclient.html-C6bg0F8_.js"),__vite__mapDeps([696,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>HttpClient是用户进行HTTP请求的，不过在我释放HttpClient对象时候，基础套接字不会立即释放，所以可能导致套接字耗尽，最终导致SocketException错误，所以推荐使用HttpClientFactory。</p>
<h2>底层方法</h2>
<p>HttpClient底层调用是</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>_handler<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:12.17,words:3651},t:"HttpClient",y:"a"}}],["/dotnet/api/remoteProcedureCall/httpclientchulixiangyingyasu.html",{loader:()=>a(()=>import("./httpclientchulixiangyingyasu.html-BPbPMPeG.js"),__vite__mapDeps([697,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>服务端的主要工作就是根据Content-Encoding头信息判断采用哪种方式压缩并返回。有压缩就有解压，而解压的工作就是在请求客户端处理的。比如浏览器，这是我们最常用的Http客户端，许多浏览器都是默认在我们发出请求的时候(比如我们浏览网页的时候)在Request Head中添加Content-Encoding，然后根据响应信息处理相关解压。这些都源于浏览器已经内置了关于请求压缩和解压的机制。类似的还有许多，比如常用的代理抓包工具Filder也是内置这种机制的。只不过需要手动去处理，但实现方式都是一样的。</p>
<h2>操作</h2>
<h3>HttpClient</h3>`,r:{minutes:1.75,words:525},t:"HttpClient处理响应压缩",y:"a"}}],["/dotnet/api/remoteProcedureCall/httpRequest.html",{loader:()=>a(()=>import("./httpRequest.html-DSEri6bC.js"),__vite__mapDeps([698,1])),meta:{a:"azrng",d:16983648e5,l:"2023年10月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>.Net调用RestAPI时候通常有三种选择，分别为：<code>WebClient, HttpWebRequest，HttpClient</code></p>
<ul>
<li><code>HttpWebRequest</code> 是一种相对底层的处理 Http request/response 的方式。</li>
<li><code>WebClient</code> 提供了对 HttpWebRequest 的高层封装，来简化使用者的调用。</li>
<li><code>HttpClient</code> 是一种新的处理 Http request/response 工具包，具有更高的性能。</li>
</ul>`,r:{minutes:3.35,words:1005},t:"HTTP请求",y:"a"}}],["/dotnet/api/remoteProcedureCall/kestrel.html",{loader:()=>a(()=>import("./kestrel.html-CessfHxy.js"),__vite__mapDeps([699,1])),meta:{a:"azrng",d:16942176e5,l:"2023年9月9日",c:["dotNET"],g:["http"],o:!0,e:`<h2>资料</h2>
<p>构建SatelliteRpc：基于Kestrel的RPC框架（整体设计篇）：https://mp.weixin.qq.com/s/AXcdNx7Acgn6WYvb4ExKeQ</p>
`,r:{minutes:.13,words:38},t:"Kestrel",y:"a"}}],["/dotnet/api/remoteProcedureCall/restfulfengge.html",{loader:()=>a(()=>import("./restfulfengge.html-Bohf-TuQ.js"),__vite__mapDeps([700,1])),meta:{a:"azrng",d:16711488e5,l:"2022年12月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>RESTful是目前最流行的API设计规范，是符合REST风格的一种软件架构风格，它不是标准。符合REST原则的架构方式被称作为 RESTful 规范。</p>
<ol>
<li>每一个URI代表一种资源;</li>
<li>同一种资源有多种表现形式(xml/json);</li>
<li>所有的操作都是无状态的。</li>
<li>规范统一接口。</li>
<li>返回一致的数据格式。</li>
<li>可缓存(客户端可以缓存响应的内容)</li>
</ol>
<p>HttpGet,HttpPost,HttpPut,HttpDelete，这四个就是传说中的<strong>RESTful风格</strong>的编程。
为什么会有这种风格呢：
RESTful 风格接口实际情况是，我们在前后端在约定接口的时候，可以约定各种风格的接口，但是，RESTful&nbsp;接口是目前来说比较流行的，并且在运用中比较方便和常见的接口。</p>`,r:{minutes:3.57,words:1071},t:"RESTful风格",y:"a"}}],["/dotnet/api/remoteProcedureCall/restkaiyuanku.html",{loader:()=>a(()=>import("./restkaiyuanku.html-MSXQs9Tc.js"),__vite__mapDeps([701,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>ReFit</h2>
<p>Refit 是一个类型安全的 REST 开源库，是一套基于 RESTful 架构的 .NET 客户端实现，内部使用 HttpClient 类封装，可通过 Refit 更加简单安全地访问 Web API 接口，要使用Refit 框架，只需要在项目中通过 NuGet 包安装器安装即可。声明式调用
github：<a href="https://github.com/reactiveui/refit" target="_blank" rel="noopener noreferrer">https://github.com/reactiveui/refit</a></p>`,r:{minutes:1.42,words:427},t:"REST 开源库",y:"a"}}],["/dotnet/api/socket/",{loader:()=>a(()=>import("./index.html-DLVJ83o9.js"),__vite__mapDeps([702,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/rhRnd9np8LPHrsbVxGEzXA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/rhRnd9np8LPHrsbVxGEzXA</a> | 你也可以写个聊天程序 C## Socket学习</p>
<p>https://mp.weixin.qq.com/s/IcFlW_GegSysH5wgdjqxAA | .NET中高性能、高可用性Socket通讯库</p>
`,r:{minutes:.2,words:61},t:"说明",y:"a"}}],["/dotnet/api/socket/supersocket.html",{loader:()=>a(()=>import("./supersocket.html-7aYr-Aii.js"),__vite__mapDeps([703,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>SuperSocket是一个轻量级, 跨平台而且可扩展的 .Net/Mono Socket 服务器程序框架。你无须了解如何使用 Socket, 如何维护 Socket 连接和 Socket 如何工作，但是你却可以使用 SuperSocket 很容易的开发出一款 Socket 服务器端软件，例如游戏服务器，GPS 服务器, 工业控制服务和数据采集服务器等等。</p>
<p>文档地址：<a href="https://docs.supersocket.net/" target="_blank" rel="noopener noreferrer">https://docs.supersocket.net/</a></p>`,r:{minutes:.45,words:135},t:"SuperSocket",y:"a"}}],["/dotnet/api/socket/touchsocket.html",{loader:()=>a(()=>import("./touchsocket.html-BPNC4Lv_.js"),__vite__mapDeps([704,1])),meta:{a:"azrng",d:16879104e5,l:"2023年6月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>TouchSocket是.Net(包括 C## 、VB.Net、F#)的一个整合性的、超轻量级的网络通信框架。包含了 tcp、udp、ssl、http、websocket、rpc、jsonrpc、webapi、xmlrpc等一系列的通信模块。一键式解决 TCP 黏分包问题，udp大数据包分片组合问题等。使用协议模板，可快速实现「固定包头」、「固定长度」、「区间字符」等一系列的数据报文解析。
仓库地址：<a href="https://github.com/RRQM/TouchSocket" target="_blank" rel="noopener noreferrer">https://github.com/RRQM/TouchSocket</a></p>`,r:{minutes:.52,words:156},t:"TouchSocket",y:"a"}}],["/dotnet/api/swagger/banbenkongzhi.html",{loader:()=>a(()=>import("./banbenkongzhi.html-BIaEhG0z.js"),__vite__mapDeps([705,1])),meta:{a:"azrng",d:16668288e5,l:"2022年10月27日",c:["dotNET"],g:["无"],o:!0,e:`<h3>1. 安装组件</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Mvc.Versioning"</span> Version<span class="token operator">=</span><span class="token string">"4.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer"</span> Version<span class="token operator">=</span><span class="token string">"4.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Swashbuckle.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"5.6.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.45,words:1036},t:"版本控制",y:"a"}}],["/dotnet/api/swagger/chuli.html",{loader:()=>a(()=>import("./chuli.html-BmPJU0nO.js"),__vite__mapDeps([706,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["dotNET"],g:["无"],o:!0,e:`<h2>显示枚举注释</h2>
<p>为了让swagger界面上显示实体类中枚举类型的注释</p>
<blockquote>
<p>测试环境：net5.0+Swashbuckle.AspNetCore 6.1.4</p>
</blockquote>
<p>枚举示例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 性别枚举 </span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 未知</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    Unknown <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 男</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    Man <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 女</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    Woman <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.17,words:2150},t:"处理",y:"a"}}],["/dotnet/api/swagger/jibenshiyong.html",{loader:()=>a(()=>import("./jibenshiyong.html-DbjRCqqm.js"),__vite__mapDeps([707,1])),meta:{a:"azrng",d:16971552e5,l:"2023年10月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。日常可以用于后端开发人员测试接口或者前后端联调使用。从.net5开始，swagger已经集成到vs2019编译器中，可以通过勾对选项“启用OpenAPI支持”显示基本的swagger配置。</p>
<blockquote>
<p>本文示例环境：vs2019、net5</p>
</blockquote>
<h2>1 基本使用</h2>
<p>新建一个netcore api项目，为了测试效果，我多创建几个控制器
<img src="/common/1620911118372-0d629e1a-bc7a-41ec-9cc2-ea375da45497.png" alt="image.png" loading="lazy"></p>`,r:{minutes:6.65,words:1996},t:"基本使用",y:"a"}}],["/dotnet/api/swagger/nswag.html",{loader:()=>a(()=>import("./nswag.html-CrW5mjS8.js"),__vite__mapDeps([708,1])),meta:{a:"azrng",d:1624752e6,l:"2021年6月27日",c:["dotNET"],g:["无"],o:!0,e:`<p>添加nuget引用Nawag.AspNetCore
然后在startup.cs方法中添加服务</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddSwaggerDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册Swagger 服务</span>
</code></pre></div>`,r:{minutes:.45,words:135},t:"Nswag",y:"a"}}],["/dotnet/api/swagger/renzhengfanganbiaoshi.html",{loader:()=>a(()=>import("./renzhengfanganbiaoshi.html-B8pDi3S9.js"),__vite__mapDeps([709,1])),meta:{a:"azrng",d:16971552e5,l:"2023年10月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>不论那种认证方式，需要注意的就是下面代码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//定义认证方式</span>
options<span class="token punctuation">.</span><span class="token function">AddSecurityDefinition</span><span class="token punctuation">(</span><span class="token string">"ApiKey"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Description <span class="token operator">=</span> <span class="token string">"输入你的的ApiKey"</span><span class="token punctuation">,</span> <span class="token comment">// 认证方式的备注</span>
    Name <span class="token operator">=</span> <span class="token string">"x-api-key"</span><span class="token punctuation">,</span> <span class="token comment">//jwt默认的参数名称</span>
    In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> <span class="token comment">// 认证标识存储的位置</span>
    Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey<span class="token punctuation">,</span>
    Scheme <span class="token operator">=</span> <span class="token string">"ApiKeySchema"</span> <span class="token comment">//认证方案名</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.87,words:560},t:"认证方案标识",y:"a"}}],["/dotnet/api/swagger/wentichuli.html",{loader:()=>a(()=>import("./wentichuli.html-BbncwaO6.js"),__vite__mapDeps([710,1])),meta:{a:"azrng",d:16239744e5,l:"2021年6月18日",c:["dotNET"],g:["无"],o:!0,e:`<h3>TypeError: Failed to fetch</h3>
<p>使用postman或者浏览器直接访问接口提示是正常的，但是就是使用swagger提示这个错误
解决方法是因为当前浏览器安装了AdBlockPlus，他把那个localhost当成广告过滤掉了</p>
<h3>无法加载问题</h3>
<p>Netcore webapi使用swagger提示无法加载swagger.json文档
报错页面：
<img src="/common/1610593545594-040d6890-8933-499d-95e1-3eef05f4609a.png" alt="image.png" loading="lazy">
&nbsp;
出现原因就是某一个控制器中某一个接口没有声明请求方式，所以导致出现这个问题，坑呀</p>`,r:{minutes:.79,words:237},t:"问题处理",y:"a"}}],["/dotnet/api/swagger/zhushishuiming.html",{loader:()=>a(()=>import("./zhushishuiming.html-CiGobRog.js"),__vite__mapDeps([711,1])),meta:{a:"azrng",d:16971552e5,l:"2023年10月13日",c:["dotNET"],g:["无"],o:!0,e:`<p>示例：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 添加热力图</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Sample request:</span>
<span class="token doc-comment comment">/// \`\`\`</span>
<span class="token doc-comment comment">///  POST /hotmap</span>
<span class="token doc-comment comment">///  {</span>
<span class="token doc-comment comment">///      "displayName": "演示名称1",</span>
<span class="token doc-comment comment">///      "matchRule": 0,</span>
<span class="token doc-comment comment">///      "matchCondition": "https://www.cnblogs.com/JulianHuang/",</span>
<span class="token doc-comment comment">///      "targetUrl": "https://www.cnblogs.com/JulianHuang/",</span>
<span class="token doc-comment comment">///      "versions": [</span>
<span class="token doc-comment comment">///      {</span>
<span class="token doc-comment comment">///         "versionName": "ver2020",</span>
<span class="token doc-comment comment">///         "startDate": "2020-12-13T10:03:09",</span>
<span class="token doc-comment comment">///         "endDate": "2020-12-13T10:03:09",</span>
<span class="token doc-comment comment">///          "offlinePageUrl": "3fa85f64-5717-4562-b3fc-2c963f66afa6",  //  没有绑定图片和离线网页的对应属性传 null</span>
<span class="token doc-comment comment">///          "pictureUrl": "3fa85f64-5717-4562-b3fc-2c963f66afa6",</span>
<span class="token doc-comment comment">///          "createDate": "2020-12-13T10:03:09"</span>
<span class="token doc-comment comment">///      }</span>
<span class="token doc-comment comment">///    ]</span>
<span class="token doc-comment comment">///  }</span>
<span class="token doc-comment comment">///\`\`\`</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createHotmapInput<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">Consumes</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Produces</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"text/plan"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ProducesResponseType</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">AddHotmapAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">CreateHotmapInput</span> createHotmapInput<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token class-name"><span class="token keyword">var</span></span> model <span class="token operator">=</span> ObjectMapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CreateHotmapInput<span class="token punctuation">,</span> Hotmap<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>createHotmapInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
     model<span class="token punctuation">.</span>ProfileId <span class="token operator">=</span> CurrentUser<span class="token punctuation">.</span>TenantId<span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token keyword">await</span> _hotmaps<span class="token punctuation">.</span><span class="token function">InsertAsync</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.14,words:341},t:"注释说明",y:"a"}}],["/dotnet/api/webservice/dotnetzhisoapcorejianchanshiyong.html",{loader:()=>a(()=>import("./dotnetzhisoapcorejianchanshiyong.html-BpSNhK1-.js"),__vite__mapDeps([712,1])),meta:{a:"azrng",d:16885152e5,l:"2023年7月5日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最近更新时间：2021年12月24日 17:01:19</p>
</blockquote>
<p>最近在工作中，需要同时放出来WebAPI接口和支持Soap协议的WebService接口，在dotNetFramework时候玩过WebService，这可是好久没再碰过了，没想到现在居然遇到了。只好迎难而上。</p>
<h2>介绍</h2>
<p>本来是在ASP.NetCore中使用了组件SoapCore来使用Soap协议。
支持以下框架：</p>
<ul>
<li>.NET 5.0（使用 ASP.NET Core 5.0）</li>
<li>.NET Core 3.1（使用 ASP.NET Core 3.1）</li>
<li>.NET Core 2.1（使用 ASP.NET Core 2.1）</li>
<li>.NET Standard 2.0（使用 ASP.NET Core 2.1）</li>
</ul>`,r:{minutes:3.41,words:1023},t:"dotnet之SoapCore简单使用",y:"a"}}],["/dotnet/api/webservice/qingqiushili.html",{loader:()=>a(()=>import("./qingqiushili.html-CrUpsUXv.js"),__vite__mapDeps([713,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Postman</h2>
<blockquote>
<p>选择请求方式为POST ，设置headers为：Content-Type text/xml;charset=utf-8</p>
</blockquote>
<p>示例一：代码中只需要一个参数
请求url:<a href="http://localhost:5000/FileWebService.asmx" target="_blank" rel="noopener noreferrer">http://localhost:5000/FileWebService.asmx</a></p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span><span class="token class-name">Envelope</span> xmlns<span class="token punctuation">:</span>soapenv<span class="token operator">=</span><span class="token string">"http://schemas.xmlsoap.org/soap/envelope/"</span> xmlns<span class="token punctuation">:</span>tem<span class="token operator">=</span><span class="token string">"http://tempuri.org/"</span><span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">/</span><span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>tem<span class="token punctuation">:</span>GetFileUrl<span class="token operator">&gt;</span>
         <span class="token operator">&lt;</span>tem<span class="token punctuation">:</span>fileId<span class="token operator">&gt;</span>805a9826<span class="token operator">-</span>afb7<span class="token operator">-</span><span class="token number">4375</span><span class="token operator">-</span>aec6<span class="token operator">-</span>0e7c91a8faa9<span class="token operator">&lt;</span><span class="token operator">/</span>tem<span class="token punctuation">:</span>fileId<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>tem<span class="token punctuation">:</span>GetFileUrl<span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Envelope<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.85,words:554},t:"请求示例",y:"a"}}],["/dotnet/api/webservice/",{loader:()=>a(()=>import("./index.html-BGl_sjHn.js"),__vite__mapDeps([714,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>资料</h2>
<p>C#使用Refit对接WebService接口：<a href="https://mp.weixin.qq.com/s/pynYWwRRHDKgoQOuN19kSw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/pynYWwRRHDKgoQOuN19kSw</a>
<a href="https://www.cnblogs.com/happycat1988/p/3741874.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/happycat1988/p/3741874.html</a> | C## .NET 动态调用webservice的三种方式 - happycat1988 - 博客园
soapUi调用WebService服务：<a href="https://apifox.com/apiskills/does-soapui-provide-webservice/" target="_blank" rel="noopener noreferrer">https://apifox.com/apiskills/does-soapui-provide-webservice/</a></p>`,r:{minutes:.26,words:79},t:"说明",y:"a"}}],["/dotnet/avalonia/projects/mqttTool.html",{loader:()=>a(()=>import("./mqttTool.html-DjPgCIFy.js"),__vite__mapDeps([715,1])),meta:{a:"azrng",d:17008704e5,l:"2023年11月25日",c:["dotNET"],g:["项目"],o:!0,e:`<h2>概述</h2>
<p>Ava.MqttTool是使用.Net7编写的，并使用Avalonia框架和MQTTnet库的一个简单的mqtt服务端和客户端通信的客户端程序。</p>
<blockquote>
<p>Avalonia：是一个使用.Net创建跨平台应用程序的框架</p>
<p>官网地址：https://www.avaloniaui.net/</p>
</blockquote>
<h2>界面预览</h2>
<p>拉取后默认启动起来的窗口是服务端</p>
<figure><img src="/common/image-20230730201426376.png" alt="image-20230730201426376" tabindex="0" loading="lazy"><figcaption>image-20230730201426376</figcaption></figure>`,r:{minutes:1.21,words:364},t:"Ava.MqttTool",y:"a"}}],["/dotnet/avalonia/projects/socketTool.html",{loader:()=>a(()=>import("./socketTool.html-CcNC1NsY.js"),__vite__mapDeps([716,1])),meta:{a:"azrng",d:17008704e5,l:"2023年11月25日",c:["dotNET"],g:["项目"],o:!0,e:`<h2>概述</h2>
<p>Ava.SocketTool是使用.Net7编写的，并使用Avalonia框架和SuperSocket库的一个模仿 SocketTool软件 的Socket调试工具。</p>
<blockquote>
<p>Avalonia：是一个使用.Net创建跨平台应用程序的框架</p>
<p>官网地址：https://www.avaloniaui.net/</p>
</blockquote>
<h2>界面预览</h2>
<p>拉取项目后启动起来默认界面是这个样子，在头部可以设置编码和调整工具主题颜色</p>
<figure><img src="/common/image-20230730203541260.png" alt="image-20230730203541260" tabindex="0" loading="lazy"><figcaption>image-20230730203541260</figcaption></figure>`,r:{minutes:1.09,words:327},t:"Ava.SocketTool",y:"a"}}],["/dotnet/base/huancun/cache.html",{loader:()=>a(()=>import("./cache.html-BzZKTx4D.js"),__vite__mapDeps([717,1])),meta:{a:"azrng",d:1611792e6,l:"2021年1月28日",c:["dotNET"],g:["无"],o:!0,e:`<h3>Cache 是怎么样工作的?</h3>
<p>Cache 是分配在服务器上的一个公共的内存片。
所谓公共指的cache只要一创建是任何一个客户端浏览器都可以通过后台代码访问到它，它面向的是所有用户，相对而言session也是服务器上的一 段内存，但他面向的是单个用户。它是服务器的一段内存块，也就是说每个cache一经创建就占用了服务器资源的。所以从这点来说我们就可以说：并不是 cache越多越好。
cache 是有时间限制的，超过了服务器设定的过期时间，它就会被服务器回收。
cache 可以存放任何对象</p>
<h3>创建cache</h3>
<p>_Cache.Insert(string key,object o)_方法创建。
其中key 代表cache的ID,o代表存到cache里的对象。</p>`,r:{minutes:1.73,words:519},t:"Cache",y:"a"}}],["/dotnet/base/huancun/changjiangainian.html",{loader:()=>a(()=>import("./changjiangainian.html-M9HbL2vb.js"),__vite__mapDeps([718,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>缓存穿透</h2>
<h3>描述</h3>
<p>大并发查询不存在的key，导致每一次请求数据都从缓存中获取不到，结果请求到了数据库服务器，可是数据库服务器也没有数据，这就导致每次请求都会到数据库服务器。如果在高并发场景下，会导致数据库服务器压力增大，最终系统可能崩溃。
<img src="/common/1614502329036-0e01cbf5-313b-46c5-ae32-0b8c26ba1a6a.png" alt="" loading="lazy"></p>
<blockquote>
<p>绿色块代表有缓存数据，粉色块代表缓存中没有数据；绿色箭头代表直接从缓存中获取数据，黄色箭头代表穿过缓存从数据库中获取数据，但是不一定有。</p>
</blockquote>`,r:{minutes:5.02,words:1507},t:"常见概念",y:"a"}}],["/dotnet/base/huancun/commonNuget.html",{loader:()=>a(()=>import("./commonNuget.html-SyxmSycl.js"),__vite__mapDeps([719,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>FusionCache</h2>
<p>FusionCache 是一款易于使用、快速且强大的缓存，具有高级弹性功能和可选的分布式第二级缓存。</p>
<p>它是在处理各种不同类型的缓存多年后诞生的：内存缓存、分布式缓存、http 缓存、CDN、浏览器缓存、离线缓存，应有尽有。</p>
<p>仓库地址：https://github.com/ZiggyCreatures/FusionCache</p>
<h2>EasyCaching</h2>
<p>EasyCaching 是一个开源的缓存库，包含了缓存的基本用法和一些高级用法，可以帮助我们更轻松的处理缓存！</p>
<p>仓库地址：<a href="https://github.com/dotnetcore/EasyCaching" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/EasyCaching</a></p>`,r:{minutes:1.72,words:517},t:"开源Nuget包",y:"a"}}],["/dotnet/base/huancun/fenbushihuancun.html",{loader:()=>a(()=>import("./fenbushihuancun.html-D8OA1qKC.js"),__vite__mapDeps([720,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>分布式缓存用于提高应用程序的性能和可伸缩性，通常分布式缓存被多个应用服务器共享，在分布式缓存中，缓存的数据不会存储在个别的web服务器内存找那个，这些缓存采用集中化存储的，这样子多个应用服务器都可以直接使用。好处在于，如果任意一个服务器宕机或者停止响应，其他的应用服务器仍然能够检索缓存的数据。另一个优点是存储的数据在服务器重启后仍然存在。</p>
<h2>使用</h2>
<p>通过实现微软官方的Microsoft.Extensions.Caching里面的IDistributedCache接口实现缓存集成到ASPNETCore中。
IDistributedCache骨架代码</p>`,r:{minutes:3.17,words:952},t:"分布式缓存",y:"a"}}],["/dotnet/base/huancun/fuwuqihuancunoutputcache.html",{loader:()=>a(()=>import("./fuwuqihuancunoutputcache.html-56qpuE9R.js"),__vite__mapDeps([721,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>该方案是在.Net7以及之上版本才有的一种缓存方式</p>
<h2>操作</h2>
<h3>内存缓存</h3>
<p>可以直接注册输出缓存服务，以及使用服务等</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add services to the container.</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOutputCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 使用过</span>
app<span class="token punctuation">.</span><span class="token function">UseOutputCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>`,r:{minutes:2.33,words:699},t:"服务器缓存OutputCache",y:"a"}}],["/dotnet/base/huancun/fuwuqihuancunresponsecaching.html",{loader:()=>a(()=>import("./fuwuqihuancunresponsecaching.html-DKpU_-RM.js"),__vite__mapDeps([722,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>服务端缓存，将东西存储在服务器，如果服务器缓存中有，那么就直接返回结果，并不会重新访问Action的内容。</p>
<p>可以对来自不同客户端的相同请求或者不支持客户端缓存的客户端进行处理，能降级服务器端的压力。</p>
<h2>操作</h2>
<p>ConfigureServices使用</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddResponseCaching</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>MaximumBodySize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">//用于指定单个缓存项的最大尺寸，默认65mb</span>
    options<span class="token punctuation">.</span>UseCaseSensitivePaths <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//指定response cache是否对缓存key区分大小写</span>
    <span class="token comment">//options.SizeLimit = 1024 * 100;//用户指定response cache的最大缓存尺寸，默认是100mb</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.98,words:595},t:"服务器缓存ResponseCaching",y:"a"}}],["/dotnet/base/huancun/kehuduanhuancun.html",{loader:()=>a(()=>import("./kehuduanhuancun.html-C_wUzW3Z.js"),__vite__mapDeps([723,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>这里我们实现禁用浏览器客户端缓存(在响应头增加配置)</p>
<h2>NetF操作</h2>
<p>通过在过滤器中使用Cache配置来操作浏览器缓存</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCacheAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnResultExecuting</span><span class="token punctuation">(</span><span class="token class-name">ResultExecutingContext</span> filterContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        filterContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">SetExpires</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">SetValidUntilExpires</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">SetRevalidation</span><span class="token punctuation">(</span>HttpCacheRevalidation<span class="token punctuation">.</span>AllCaches<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">SetCacheability</span><span class="token punctuation">(</span>HttpCacheability<span class="token punctuation">.</span>NoCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">SetNoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnResultExecuting</span><span class="token punctuation">(</span>filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.11,words:334},t:"客户端缓存",y:"a"}}],["/dotnet/base/huancun/neicunhuancunmemorycahe.html",{loader:()=>a(()=>import("./neicunhuancunmemorycahe.html-VkAwx_nr.js"),__vite__mapDeps([724,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. MemoryCahe</h2>
<p>NetCore中的缓存和System.Runtime.Caching很相似，但是在功能上做了增强，缓存的key支持object类型，提供了泛型支持；可以读缓存和单个缓存项的大小做限定，可以设置缓存的压缩比例。</p>
<h3>1.1 简单入门</h3>
<p>netcore中缓存相关的类库都在&nbsp;Microsoft.Extensions.Caching&nbsp;，使用MemoryCache首先安装包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Caching.Memory"</span> Version<span class="token operator">=</span><span class="token string">"5.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:6.3,words:1891},t:"内存缓存MemoryCahe",y:"a"}}],["/dotnet/base/huancun/",{loader:()=>a(()=>import("./index.html-BiIt3zXB.js"),__vite__mapDeps([725,1])),meta:{a:"azrng",d:16924896e5,l:"2023年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>从内存中直接读取的叫做一级缓存(内存缓存)，从硬盘读取的叫做二级缓存(redis等)，先去一级缓存中找，找不到再去二级缓存中找。</p>
<h2>缓存分类</h2>
<figure><img src="/common/1609838190560-cc3dd912-8337-494c-9a23-f09e44ca901b.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h3>客户端缓存</h3>
<p>这点大家都有直观的印象。比如你去一个新的网站，第一次可能要花一阵子时间才能载入整个页面。而以后再去呢，时间就会大大的缩短，原因就在于这个客户端缓 存。现在的浏览器都比较智能，它会在客户机器的硬盘上保留许多静态的文件，比如各种gif,jpeg文件等等。等以后再去的时候，它会尽量使用本地缓存里 面的文件。只有服务器端的文件更新了，或是缓存里面的文件过期了，它才会再次从服务器端下载这些东西。很多时候是IE替我们做了这件事情。</p>`,r:{minutes:3.89,words:1168},t:"说明",y:"a"}}],["/dotnet/base/huancun/statichuancun.html",{loader:()=>a(()=>import("./statichuancun.html-29QcDbVd.js"),__vite__mapDeps([726,1])),meta:{a:"azrng",d:16491168e5,l:"2022年4月5日",c:["dotNET"],g:["无"],o:!0,e:`<p>static变量做一个进程级别缓存，从而提高程序性能，这个也是一个非常好的一级缓存。
&nbsp;
&nbsp;
普通的static变量</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static Dictionary&lt;int, string&gt; cachedDict = new Dictionary&lt;int, string&gt;();
</code></pre></div><p>这是一个进程级别缓存，多个线程共享一个数据，所以在多线程的环境下，你需要注意同步的情况，要么使用锁，要么使用 ConcurrentDictionary。
&nbsp;
线程级别缓存
使用ThreadStstic标记static变量</p>`,r:{minutes:.73,words:219},t:"Static缓存",y:"a"}}],["/dotnet/base/jiankangjiancha/jiankangjiancha.html",{loader:()=>a(()=>import("./jiankangjiancha.html-CaTIUew-.js"),__vite__mapDeps([727,1])),meta:{a:"azrng",d:16853184e5,l:"2023年5月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. 介绍</h2>
<p>在开发AspNet Core应用的时候，我们经常会为该应用公布一个特殊的<strong>检测接口</strong>出来。该接口的目的很简单，告诉外界程序当前程序现在是可以访问或者不能访问的，便于外界做出相应的操作，比如监控报警，页面通知用户稍作等待等。</p>
<p>官网文档：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-8.0" target="_blank" rel="noopener noreferrer">此处</a></p>`,r:{minutes:3.63,words:1090},t:"健康检查",y:"a"}}],["/dotnet/base/jiankangjiancha/yingyongzhuangtai.html",{loader:()=>a(()=>import("./yingyongzhuangtai.html-CJJvhYBr.js"),__vite__mapDeps([728,1])),meta:{a:"azrng",d:1650672e6,l:"2022年4月23日",c:["dotNET"],g:["无"],o:!0,e:`<h3>健康检查</h3>
<p>新增一个Health控制器，里面包含一个check方法，通过不间断调用该方法来判断程序运行是否正常。</p>
<h3>状态和统计</h3>
<h4>操作方法</h4>
<p>新增类继承IDashboardAuthorizationFilter类，实现Authorize&nbsp;方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenVerification</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDashboardAuthorizationFilter</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Authorize</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">"Token"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"Token"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.76,words:229},t:"应用状态",y:"a"}}],["/dotnet/base/jingtaiwenjian/jiangjingtaiwenjiandabao.html",{loader:()=>a(()=>import("./jiangjingtaiwenjiandabao.html-Cvso-xVu.js"),__vite__mapDeps([729,1])),meta:{a:"azrng",d:16948224e5,l:"2023年9月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>虽然.net项目可以执行单文件发布，但是不能将前端静态文件包含到里面，如何将wwwroot目录下的静态文件打包到exe文件内？</p>
<h2>思路</h2>
<p>默认情况下，FileProvider 是读取本地物理文件。
如果改成从 EXE 文件中读取静态文件的 FileProvider，不就实现了我们的目的了吗？！
而实际上，.NET 已经提供了这样一个 FileProvider：ManifestEmbeddedFileProvider，用于访问嵌入在程序集中的文件。</p>
<h2>实现</h2>
<ol>
<li>将 Microsoft.Extensions.FileProviders.Embedded NuGet 包添加到 Web API 项目。</li>
<li>修改项目文件，将 GenerateEmbeddedFilesManifest 属性设置为 true，并指定嵌入的文件来源：</li>
</ol>`,r:{minutes:1.01,words:304},t:"将静态文件打包",y:"a"}}],["/dotnet/base/jingtaiwenjian/jingtaiwangzhanneironggengxin.html",{loader:()=>a(()=>import("./jingtaiwangzhanneironggengxin.html-BpZ8uD92.js"),__vite__mapDeps([730,1])),meta:{a:"azrng",d:16633728e5,l:"2022年9月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>我们的应用一个版本可以对应一个部署槽，通过部署槽我们就基本可以无缝地从一个版本切换到另外一个版本。（通过配置显示当下静态网站使用哪个目录下的文件。）</p>
<h2>操作</h2>
<h3>FileProvider</h3>
<p>ASP.NET Core 里静态文件的托管是允许自定义一个 IFileProvider 的，默认会使用物理路径文件， ASP.NET Core 默认使用 wwroot 目录下作为默认的静态文件来源。
对于静态文件而言我们简单地使用两个目录来模拟两个部署槽，当需要的时候通过修改配置来动态修改生效的部署槽，基于 IOptionMonitor 和 PhysicalFileProvider 来实现一个简单的 DynamicFileProvider，实现代码如下：</p>`,r:{minutes:2.17,words:651},t:"静态网站内容更新",y:"a"}}],["/dotnet/base/jingtaiwenjian/",{loader:()=>a(()=>import("./index.html-3Qk3rlKM.js"),__vite__mapDeps([731,1])),meta:{a:"azrng",d:16948224e5,l:"2023年9月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>默认操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.77,words:231},t:"说明",y:"a"}}],["/dotnet/base/logOperator/ilogger.html",{loader:()=>a(()=>import("./ilogger.html-dmWpWtct.js"),__vite__mapDeps([732,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>这是asp.net core中内置的一个通用日志接口组件。</p>
<h2>日志级别</h2>
<p><strong>日志级别说明</strong>：每一个日志都有指定的日志级别值，日志级别判断指示严重性或重要性。使用日志等级可以很好的过滤想要的日志，记录日志记录问题的同时，甚至为我们提供非常详细的日志信息。
<strong>LogLevel 严重性：Trace &lt; Debug &lt; Information &lt; Warning &lt; Error &lt; Critical &lt; None。</strong></p>
<table>
<thead>
<tr>
<th><strong>日志级别</strong></th>
<th><strong>常用场景</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Trace = 0</strong></td>
<td>记录一些对程序员调试问题有帮助的信息,   其中可能包含一些敏感信息, 所以应该避免在 生产环境中启用Trace日志，因此不应该用于生产环境。默认应禁用。</td>
</tr>
<tr>
<td><strong>Debug = 1</strong></td>
<td>记录一些在开发和调试阶段有用的短时变   量(Short-term usefulness), 所以除非为了临时排除生产环境的   故障，开发人员应该尽量避免在生产环境中启用Debug日志，默认情况下这是最详细的日志。</td>
</tr>
<tr>
<td><strong>Information = 2</strong></td>
<td>记录跟踪应用程序的一些流程,   例如，记录当前api请求的url。</td>
</tr>
<tr>
<td><strong>Warning = 3</strong></td>
<td>记录应用程序中发生出现错误或其它导致程序停止的流程异常信息。   这些信息中可能包含错误消息或者错误产生的条件, 可供后续调查，例如, 文件未找到</td>
</tr>
<tr>
<td><strong>Error = 4</strong></td>
<td>记录应用程序中某个操作产生的错误和异常信息。这些消息应该指明当前活动或操作（比如当前的   HTTP 请求），而不是应用程序范围的故障。</td>
</tr>
<tr>
<td><strong>Critical = 5</strong></td>
<td>记录一些需要立刻修复，急需被关注的问题，应当记录关键级别的日志。例如数据丢失，磁盘空间不足等。</td>
</tr>
</tbody>
</table>`,r:{minutes:6.07,words:1822},t:"ILogger",y:"a"}}],["/dotnet/base/logOperator/nlog.html",{loader:()=>a(()=>import("./nlog.html-x8N2zmum.js"),__vite__mapDeps([733,1])),meta:{a:"azrng",d:16782336e5,l:"2023年3月8日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. 介绍</h2>
<p>NLog是适用于各种.NET平台（包括.NET标准）的灵活，免费的日志记录平台，支持数据库、文件、控制台。</p>
<h2>2. 输入到文件</h2>
<h3>2.1 引用nuget包</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"NLog"</span> Version<span class="token operator">=</span><span class="token string">"4.7.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"NLog.Web.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"4.9.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.42,words:425},t:"Nlog",y:"a"}}],["/dotnet/base/logOperator/",{loader:()=>a(()=>import("./index.html-tlckXJDC.js"),__vite__mapDeps([734,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通常情况下，日志氛围三种：请求、业务处理、数据库操作
在实际采集日志的时候，关注【特定日志场景】</p>
<blockquote>
<p>提供给第三方调用的API日志
核心流程业务
数据库操作日志
应用内部发起的HTTP请求日志
warn、error、fatal级别日志</p>
</blockquote>
<h2>日志框架</h2>
<ul>
<li>Serilog</li>
<li>Nlog</li>
<li>logback</li>
<li>log4net</li>
<li>自带的Ilogger</li>
<li>Loki+grafana</li>
</ul>`,r:{minutes:3.55,words:1065},t:"说明",y:"a"}}],["/dotnet/base/logOperator/serilog.html",{loader:()=>a(()=>import("./serilog.html-sApmxPVO.js"),__vite__mapDeps([735,1])),meta:{a:"azrng",d:16962048e5,l:"2023年10月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. 概述</h2>
<p>与.NET的许多其他库一样，Serilog也提供对文件，控制台和<a href="https://github.com/serilog/serilog/wiki/Provided-Sinks" target="_blank" rel="noopener noreferrer">&nbsp;其他地方的</a>诊断日志记录&nbsp;。它易于设置，具有简洁的API，并且可以在最新的.NET平台之间移植。还在构建时考虑了强大的结构化事件数据。</p>
<blockquote>
<p>官网：<a href="https://serilog.net/" target="_blank" rel="noopener noreferrer">https://serilog.net/</a>
GitHub：<a href="https://github.com/serilog/serilog" target="_blank" rel="noopener noreferrer">https://github.com/serilog/serilog</a></p>
</blockquote>`,r:{minutes:5.86,words:1759},t:"Serilog",y:"a"}}],["/dotnet/base/logOperator/structLog.html",{loader:()=>a(()=>import("./structLog.html-bpyxUom_.js"),__vite__mapDeps([736,1])),meta:{a:"azrng",d:16442784e5,l:"2022年2月8日",c:["dotNET"],g:["无"],o:!0,e:`<h2>场景</h2>
<ul>
<li>实现日志告警</li>
<li>实现上下文的关联</li>
<li>实现追踪系统集成</li>
</ul>
<h2>好处</h2>
<ul>
<li>易于检索</li>
<li>易于分析统计</li>
</ul>
<h2>记录内容</h2>
<p>标准化日志事件属性使您能够充分利用日志搜索和分析工具。在适用的情况下使用以下属性：</p>
<table>
<thead>
<tr>
<th>ApplicationName</th>
<th>生成日志事件的应用程序的名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClientIP</td>
<td>发出请求的客户端的 IP 地址</td>
</tr>
<tr>
<td>CorrelationId</td>
<td>可用于跨多个应用程序边界跟踪请求的 ID</td>
</tr>
<tr>
<td>Elapsed</td>
<td>操作完成所用的时间（以毫秒为单位）</td>
</tr>
<tr>
<td>EventType</td>
<td>用于确定消息类型的消息模板的哈希值</td>
</tr>
<tr>
<td>MachineName</td>
<td>运行应用程序的机器的名称</td>
</tr>
<tr>
<td>Outcome</td>
<td>手术的结果</td>
</tr>
<tr>
<td>RequestMethod</td>
<td>HTTP 请求方法，例如 POST</td>
</tr>
<tr>
<td>RequestPath</td>
<td>HTTP 请求路径</td>
</tr>
<tr>
<td>SourceContext</td>
<td>日志源自的组件/类的名称</td>
</tr>
<tr>
<td>StatusCode</td>
<td>HTTP 响应状态码</td>
</tr>
<tr>
<td>UserAgent</td>
<td>HTTP 用户代理</td>
</tr>
<tr>
<td>Version</td>
<td>正在运行的应用程序的版本</td>
</tr>
</tbody>
</table>`,r:{minutes:1.06,words:318},t:"结构化日志",y:"a"}}],["/dotnet/base/luyou/duandianluyou.html",{loader:()=>a(()=>import("./duandianluyou.html-D9SBOzG8.js"),__vite__mapDeps([737,1])),meta:{a:"azrng",d:16755552e5,l:"2023年2月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>MapControllerRoute</h2>
<h5>约定路由(conventional routing), 通常用在MVC项目中；</h5>
<p>需要传参name  pattern defaults  constraints dataTokens；
你可以在项目中这样写：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>endpoints<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>
  <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span><span class="token string">"default"</span><span class="token punctuation">,</span>
  <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span><span class="token string">"{controller=Home}/{action=index}/{id?}"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.09,words:328},t:"端点路由",y:"a"}}],["/dotnet/base/luyou/luyou.html",{loader:()=>a(()=>import("./luyou.html-DGkt7MOh.js"),__vite__mapDeps([738,1])),meta:{a:"azrng",d:16814304e5,l:"2023年4月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>路由注册方式</h2>
<ul>
<li>路由模板的方式</li>
<li>RouteAttribute方式</li>
</ul>
<h2>路由约束</h2>
<table>
<thead>
<tr>
<th>约束</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>{id:int}</code></td>
<td>匹配任何整数</td>
</tr>
<tr>
<td><code>bool</code></td>
<td><code>{active:bool}</code></td>
<td>匹配 <code>true</code></td>
</tr>
<tr>
<td>或 <code>false</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>。 不区分大小写</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>datetime</code></td>
<td><code>{dob:datetime}</code></td>
<td>在固定区域性中匹配有效的 <code>DateTime</code></td>
</tr>
<tr>
<td>值。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>decimal</code></td>
<td><code>{price:decimal}</code></td>
<td>在固定区域性中匹配有效的 <code>decimal</code></td>
</tr>
<tr>
<td>值。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>{weight:double}</code></td>
<td>在固定区域性中匹配有效的 <code>double</code></td>
</tr>
<tr>
<td>值。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>{weight:float}</code></td>
<td>在固定区域性中匹配有效的 <code>float</code></td>
</tr>
<tr>
<td>值。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>guid</code></td>
<td><code>{id:guid}</code></td>
<td>匹配有效的 <code>Guid</code></td>
</tr>
<tr>
<td>值</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>{ticks:long}</code></td>
<td>匹配有效的 <code>long</code></td>
</tr>
<tr>
<td>值</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>minlength(value)</code></td>
<td><code>{username:minlength(4)}</code></td>
<td>字符串必须至少为 4 个字符</td>
</tr>
<tr>
<td><code>maxlength(value)</code></td>
<td><code>{filename:maxlength(8)}</code></td>
<td>字符串不得超过 8 个字符</td>
</tr>
<tr>
<td><code>length(length)</code></td>
<td><code>{filename:length(12)}</code></td>
<td>字符串必须正好为 12 个字符</td>
</tr>
<tr>
<td><code>length(min,max)</code></td>
<td><code>{filename:length(8,16)}</code></td>
<td>字符串必须至少为 8 个字符，且不得超过 16 个字符</td>
</tr>
<tr>
<td><code>min(value)</code></td>
<td><code>{age:min(18)}</code></td>
<td>整数值必须至少为 18</td>
</tr>
<tr>
<td><code>max(value)</code></td>
<td><code>{age:max(120)}</code></td>
<td>整数值不得超过 120</td>
</tr>
<tr>
<td><code>range(min,max)</code></td>
<td><code>{age:range(18,120)}</code></td>
<td>整数值必须至少为 18，且不得超过 120</td>
</tr>
<tr>
<td><code>alpha</code></td>
<td><code>{name:alpha}</code></td>
<td>字符串必须由一个或多个字母字符组成，<code>a</code></td>
</tr>
<tr>
<td>-<code>z</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>，并区分大小写。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>regex(expression)</code></td>
<td><code>{ssn:regex(^\\\\\\\\d{{3}}-\\\\\\\\d{{2}}-\\\\\\\\d{{4}}$)}</code></td>
<td>字符串必须与正则表达式匹配。 请参阅有关定义正则表达式的提示。</td>
</tr>
<tr>
<td><code>required</code></td>
<td><code>{name:required}</code></td>
<td>用于强制在 URL 生成过程中存在非参数值</td>
</tr>
</tbody>
</table>`,r:{minutes:4.2,words:1260},t:"路由",y:"a"}}],["/dotnet/base/peizhikuangjia/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-CuNMndjA.js"),__vite__mapDeps([739,1])),meta:{a:"azrng",d:16530912e5,l:"2022年5月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>配置系统支持丰富的配置源，包括文件(json\\xml\\ini等)、注册表、环境配置、命令行、Azure等，还可以配置自定义配置源。可以跟踪配置的改变，可以按照优先级覆盖。</p>
<h2>常见环境</h2>
<p>Development（开发环境） Production（生产环境） Staging（分阶段环境，测试环境）</p>
`,r:{minutes:.38,words:113},t:"概述",y:"a"}}],["/dotnet/base/peizhikuangjia/huanjingbianliangpeizhi.html",{loader:()=>a(()=>import("./huanjingbianliangpeizhi.html-CqWlhiw4.js"),__vite__mapDeps([740,1])),meta:{a:"azrng",d:16795296e5,l:"2023年3月23日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过环境变量来配置应用程序，同一个程序不同环境使用不同的配置信息。
特点：</p>
<ul>
<li>对于配置的分层键：使用双下划线：“__”代替“:”</li>
<li>支持根据前缀加载</li>
</ul>
<h2>操作</h2>
<h3>简单获取</h3>
<h4>控制台获取</h4>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Configuration"</span> Version<span class="token operator">=</span><span class="token string">"5.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Configuration.Abstractions"</span> Version<span class="token operator">=</span><span class="token string">"5.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Configuration.EnvironmentVariables"</span> Version<span class="token operator">=</span><span class="token string">"5.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.19,words:657},t:"环境变量配置",y:"a"}}],["/dotnet/base/peizhikuangjia/jimiguanliqi.html",{loader:()=>a(()=>import("./jimiguanliqi.html-Cx4qNW8a.js"),__vite__mapDeps([741,1])),meta:{a:"azrng",d:16464384e5,l:"2022年3月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>ASP.NET Core 机密管理器工具提供了开发过程中在源代码外部保存机密的另一种方法 。若要使用机密管理器工具，请在项目文件中安装包 Microsoft.Extensions.Configuration.SecretManager 。如果该依赖项存在并且已还原，则可以使用 dotnet user-secrets 命令来通过命令行设置机密的值。这些机密将存储在用户配置文件目录中的 JSON 文件中（详细信息随操作系统而异），与源代码无关。
机密管理器工具设置的机密是由使用机密的项目的 UserSecretsId 属性组织的。因此，必须确保在项目文件中设置 UserSecretsId 属性，如下面的代码片段所示。默认值是 Visual Studio 分配的 GUID，但实际字符串并不重要，只要它在计算机中是唯一的。</p>`,r:{minutes:2.12,words:635},t:"机密管理器",y:"a"}}],["/dotnet/base/peizhikuangjia/minglinghangpeizhi.html",{loader:()=>a(()=>import("./minglinghangpeizhi.html-s_qIhpBT.js"),__vite__mapDeps([742,1])),meta:{a:"azrng",d:16426368e5,l:"2022年1月20日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文为学习笔记</p>
</blockquote>
<h2>介绍</h2>
<p>通过命令行配置应用程序
格式</p>
<ul>
<li>无前缀的key=value模式</li>
<li>双横线模式：--key=value 或 --key vlaue</li>
<li>正斜线模式 /key=value  或  /key value</li>
</ul>
<blockquote>
<p>注意：等号分隔符和空格分隔符不能混用。</p>
</blockquote>
<p>命令替换</p>
<ul>
<li>必须以单划线(-)或者双划线(--)开头</li>
<li>映射的字典不能包含重复的key</li>
</ul>`,r:{minutes:1.26,words:378},t:"命令行配置",y:"a"}}],["/dotnet/base/peizhikuangjia/peizhidouqu.html",{loader:()=>a(()=>import("./peizhidouqu.html-BzzoSYa3.js"),__vite__mapDeps([743,1])),meta:{a:"azrng",d:16911072e5,l:"2023年8月4日",c:["dotNET"],g:["无"],o:!0,e:`<h3>1. 说明</h3>
<p>默认情况下读取配置Configuration的默认优先级：ConfigureAppConfiguration(自定义读取)&gt;CommandLine(命令行参数)&gt;Environment(环境变量)&gt;appsetting.json(默认配置文件)&gt;UseSetting的顺序</p>
<blockquote>
<p>原因：读取配置的顺序是后来者居上模式，后来注册的会优先被读取到，具有覆盖性，可覆盖配置读取器。</p>
</blockquote>
<p>默认环境：Development、Production</p>
<h3>2. 获取配置</h3>`,r:{minutes:5.18,words:1554},t:"配置读取",y:"a"}}],["/dotnet/base/peizhikuangjia/peizhijianchanjiami.html",{loader:()=>a(()=>import("./peizhijianchanjiami.html-DyAuPssb.js"),__vite__mapDeps([744,1])),meta:{a:"azrng",d:16444512e5,l:"2022年2月10日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>现在我们应该都是将配置写入到appsettings中，那么我想写入密文来保护隐私，那么我如何实现对appsettings的内容进行自动化解密？</p>
<h2>操作</h2>
<blockquote>
<p>示例代码环境：vs2022、.Net6</p>
</blockquote>
<h3>其他操作</h3>
<p>继承并实现 ConfigurationProvider, IConfigurationSource</p>
<h3>本文操作</h3>
<p>重写 JsonConfigurationProvider 方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfigurationProvider2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonConfigurationProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">JsonConfigurationProvider2</span><span class="token punctuation">(</span><span class="token class-name">JsonConfigurationSource2</span> source<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Let the base class do the heavy lifting.</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//自动解密信息，以Password为例</span>
        Data<span class="token punctuation">[</span><span class="token string">"Password"</span><span class="token punctuation">]</span> <span class="token operator">=</span> DESDEncrypt<span class="token punctuation">.</span><span class="token function">DesDecrypt</span><span class="token punctuation">(</span>Data<span class="token punctuation">[</span><span class="token string">"Password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// But you have to make your own MyEncryptionLibrary, not included here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfigurationSource2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonConfigurationSource</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">IConfigurationProvider</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">EnsureDefaults</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonConfigurationProvider2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonConfigurationExtensions2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IConfigurationBuilder</span> <span class="token function">AddJsonFile2</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> optional<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">bool</span></span> reloadOnChange<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>builder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"File path must be a non-empty string."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonConfigurationSource2</span>
        <span class="token punctuation">{</span>
            FileProvider <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            Path <span class="token operator">=</span> path<span class="token punctuation">,</span>
            Optional <span class="token operator">=</span> optional<span class="token punctuation">,</span>
            ReloadOnChange <span class="token operator">=</span> reloadOnChange
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        source<span class="token punctuation">.</span><span class="token function">ResolveFileProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.11,words:333},t:"配置简单加密",y:"a"}}],["/dotnet/base/peizhikuangjia/shuaxiangoption.html",{loader:()=>a(()=>import("./shuaxiangoption.html-5x67CIAz.js"),__vite__mapDeps([745,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>选项是配置的升级版，一般情况下是把一个范围内的配置包装成类型以供使用，通过选项框架来处理服务和配置的关系
特性</p>
<ul>
<li>支持单例模式读取配置</li>
<li>支持快照</li>
<li>支持配置变更通知</li>
<li>支持运行时动态修改选项的值</li>
</ul>
<p>选项类别：
<code>IOption&lt;XXXOptions&gt;</code>(普通选项)、不会读取到新的值
<code>IOptionsSnapshot&lt;XXXOptions&gt;</code>(热更新)、会在同一个范围内保持一致。
<code>IOptionsMonitor&lt;XXXOption&gt;</code>（监控选项）</p>`,r:{minutes:7.43,words:2229},t:"选项Option",y:"a"}}],["/dotnet/base/peizhikuangjia/wenjianpeizhi.html",{loader:()=>a(()=>import("./wenjianpeizhi.html-BV4ZphE3.js"),__vite__mapDeps([746,1])),meta:{a:"azrng",d:16530912e5,l:"2022年5月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过文件(json、xml、ini)作为配置提供程序
特性：</p>
<ul>
<li>指定文件是否可选、必选</li>
<li>指定是否监视文件变更</li>
</ul>
<h2>操作</h2>
<p>可能需要安装包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration
Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Json
Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Ini
Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Xml
</code></pre></div>`,r:{minutes:1.83,words:549},t:"文件配置",y:"a"}}],["/dotnet/base/serialize/",{loader:()=>a(()=>import("./index.html-D_IulKHr.js"),__vite__mapDeps([747,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>序列化：将对象的状态信息以及类型信息，转换为一种易于传输或者存储形式(流，即字节序列)的过程。
序列化整理流程(图片来自微软官网)
<img src="/common/1643209935836-5d34426a-c9d4-469b-ae24-35b3cbf8f3f3.gif" alt="" loading="lazy">
该对象被序列化为携带数据的流。该流还可能包含有关对象类型的信息，例如其版本、文化和程序集名称。从该流中，对象可以存储在数据库、文件或内存中。
反序列化：与序列化相反，将流转换为对象的过程。</p>
<h2>常见的序列化格式和方法</h2>
<p>在.net中，常见的序列化格式主要有json，二进制和xml，总结如图：</p>`,r:{minutes:1.73,words:520},t:"说明",y:"a"}}],["/dotnet/base/serialize/xmlxuliehua.html",{loader:()=>a(()=>import("./xmlxuliehua.html-BMg5-LQm.js"),__vite__mapDeps([748,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>xml path：<a href="https://www.freeformatter.com/xpath-tester.html#before-output" target="_blank" rel="noopener noreferrer">https://www.freeformatter.com/xpath-tester.html#before-output</a></p>
<h2>概念</h2>
<h3>xmlns</h3>
<p>在XML文档中，xmlns属性是用来定义命名空间的。命名空间是一种将不同XML元素分组的机制，以避免命名冲突。它允许在XML文档中使用相同名称的元素，而不会产生冲突。</p>`,r:{minutes:2.18,words:655},t:"XML序列化",y:"a"}}],["/dotnet/base/pipeline/",{loader:()=>a(()=>import("./index.html-DUCJ4gVD.js"),__vite__mapDeps([749,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET Core管道是一种服务器端处理程序请求的方法。它以指定的顺序将Kestrel（ASP.NET Core的应用服务器）中的请求发送到服务器的中间件，每个中间件都可以选择性地处理请求或将其传递到下一个中间件。例如，一个中间件可以负责认证用户，另一个中间件可以填充查询字符串，而另一个中间件可以处理所有请求并返回响应。这使得.NET Core应用程序可以对来自用户的每个请求做出不同的反应，而不需要繁琐的代码。</p>
<h2>实现</h2>
<p>管道是一种概念，这个概念下面有多种实现方案。</p>
<p>方案一
ASP.NET Core中间件
方案二
ASP.NET Core过滤器
方案三
借助MediatR提供的Behaviors概念来实现，通过继承自IPipelineBehavior可以实现对请求的处理和响应。Request(请求)在管道中传递，依次经过管道中每个处理，实现管道模式后可以实现对请求和响应的处理。</p>`,r:{minutes:2.11,words:632},t:"管道模式",y:"a"}}],["/dotnet/base/yilaizhuru/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-Bvte5voO.js"),__vite__mapDeps([750,1])),meta:{a:"azrng",d:16689024e5,l:"2022年11月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>依赖注入是一种具体的编码技巧(是控制反转思想的一种重要的实现方式)，英文翻译是Dependency Injection，缩写DI。</p>
<p>不要依赖于具体的实现，应该依赖于抽象，高层模块不应该依赖于底层模块，二者应该依赖于抽象。简单的说就是为了更好的解耦。而控制反转(Ioc)就是这样的原则的其中一个<strong>实现思想</strong>, 这个思路的其中一种实现方式就是依赖注入(DI)。只要是用过new实例化的都是存在依赖的。</p>
<p>不用过new()的方式在类的内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递(或者注入)给类使用。</p>`,r:{minutes:5.71,words:1713},t:"概述",y:"a"}}],["/dotnet/base/yilaizhuru/huoqusuoyouzhurudefuwu.html",{loader:()=>a(()=>import("./huoqusuoyouzhurudefuwu.html-d-3h4SoS.js"),__vite__mapDeps([751,1])),meta:{a:"azrng",d:16965504e5,l:"2023年10月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过手动编写中间件输出所有的服务以及对应的生命周期，或者直接使用nuget包Ardalis.ListStartupServices</p>
<h2>.NetCore 3.1</h2>
<p>在strartup中注入服务IServiceCollection</p>
<div class="language-plsql" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">private</span> IServiceCollection _services<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> ConfigureServices<span class="token punctuation">(</span>IServiceCollection services<span class="token punctuation">)</span>
{
    _services <span class="token operator">=</span> services<span class="token punctuation">;</span>
}
</code></pre></div>`,r:{minutes:1.7,words:509},t:"获取所有注入的服务",y:"a"}}],["/dotnet/base/yilaizhuru/xunhuanyilai.html",{loader:()=>a(()=>import("./xunhuanyilai.html-pwbvXDY8.js"),__vite__mapDeps([752,1])),meta:{a:"azrng",d:1666656e6,l:"2022年10月25日",c:["dotNET"],g:["无"],o:!0,e:`<p>在构建应用程序时候，良好的设计应该避免服务之间的循环依赖，循环依赖之某些组件直接或者间接的相互依赖，例如下图
<img src="/common/1610415080566-ae69a588-027c-4bbe-a9db-02d9784ee7f7.png" alt="image.png" loading="lazy">
比如A服务依赖B，B服务依赖C服务，C服务依赖A服务，这样子就造成了循环依赖的场景。</p>
<p>这个时候更推荐的方法当然是重构项目，来解决循环依赖的问题，当然我们这里先采用其他办法解决这个问题。</p>
<h3>方法一</h3>
<p>通过IServiceProvider 去获取某一个服务</p>`,r:{minutes:1.25,words:374},t:"循环依赖",y:"a"}}],["/dotnet/buildAndRelease/release/dockerReleaseNetCore.html",{loader:()=>a(()=>import("./dockerReleaseNetCore.html-C-HBgo41.js"),__vite__mapDeps([753,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。</p>
<blockquote>
<p>本次示例环境：vs2019、net5、docker、postman</p>
</blockquote>
<h2>创建项目</h2>
<p>本次事例代码是用过vs2019创建的ASP.NET Core Web API项目
<img src="/common/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png" alt="image.png" loading="lazy">
目标框架是.Net5，无需身份验证，不配置HTTPS(根据个人需求勾选)，启动Docker(我习惯于后期添加)，启用OpenAPI支持(添加swagger文档)
<img src="/common/1620113847152-b27a4e87-8ccf-4527-94a9-de6786468dde.png" alt="image.png" loading="lazy"></p>`,r:{minutes:3.05,words:914},t:"docker部署netcore全流程",y:"a"}}],["/dotnet/buildAndRelease/release/optimizeFolder.html",{loader:()=>a(()=>import("./optimizeFolder.html-DhlvCgT9.js"),__vite__mapDeps([754,1])),meta:{a:"azrng",d:16922304e5,l:"2023年8月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>NetCoreBeauty</h2>
<p>NetCoreBeauty 会将 .NET Core 软件的运行时组件和依赖移动到一个子目录中，让发布文件看起来更简洁漂亮。
github：<a href="https://github.com/nulastudio/NetCoreBeauty" target="_blank" rel="noopener noreferrer">https://github.com/nulastudio/NetCoreBeauty</a></p>
<blockquote>
<p>NetCoreBeauty 只适用于独立部署发布模式的程序，不要勾选生成单个文件</p>
</blockquote>`,r:{minutes:2.94,words:882},t:"优化部署目录结构",y:"a"}}],["/dotnet/buildAndRelease/release/",{loader:()=>a(()=>import("./index.html-D-9yyUUA.js"),__vite__mapDeps([755,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>自动更新示例：<a href="https://www.cnblogs.com/wdw984/p/16426163.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wdw984/p/16426163.html</a></p>
<p>https://mp.weixin.qq.com/s/oY4vl4IUI6IQ5XKekWTB9A | .net6 在中标麒麟下的安装和部署过程</p>
<p>https://mp.weixin.qq.com/s/52ZZbxTMzEaB90KhhDhtRg | Packaging.DebUOS 专门为 dotnet 应用制作 UOS 安装包</p>`,r:{minutes:.23,words:70},t:"说明",y:"a"}}],["/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/dotnetcoreplugins.html",{loader:()=>a(()=>import("./dotnetcoreplugins.html-DIn2GGPF.js"),__vite__mapDeps([756,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>此项目提供了用于动态加载 .NET 程序集、执行这些程序集作为主应用程序的扩展以及查找插件的依赖项并将其与主应用程序隔离的 API。它允许对程序集隔离和类型共享进行细粒度控制。
star：1.4k(2023年6月21日14:20:21)</p>
<p>文档介绍：<a href="https://www.cnblogs.com/dotnet-box/p/17360983.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/dotnet-box/p/17360983.html</a>
仓库地址：<a href="https://github.com/natemcmaster/DotNetCorePlugins" target="_blank" rel="noopener noreferrer">https://github.com/natemcmaster/DotNetCorePlugins</a></p>`,r:{minutes:.44,words:133},t:"DotNetCorePlugins",y:"a"}}],["/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/jianchandedongtaijiazaishili.html",{loader:()=>a(()=>import("./jianchandedongtaijiazaishili.html-DmlknIWt.js"),__vite__mapDeps([757,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>实现一个可以动态加载，动态更新服务的插件需求。插件的好处是什么？我们可以编写代码来动态去替换或者增加现有服务，使用得当的情况下风险小、操作方便。</p>
<h2>AssemblyLoadContext</h2>
<p>AssemblyLoadContext 类是在 .NET Core 中引入的，在 .NET Framework 中不可用。在.Net5+和.NetCore的应用程序中均隐式使用它，它是运行时的提供程序，用来定位和加载依赖项，只要加载了依赖项，就会调用它的示例来定位该依赖项目。
卸载程序集：<a href="https://learn.microsoft.com/zh-cn/dotnet/standard/assembly/unloadability#use-a-custom-collectible-assemblyloadcontext" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/standard/assembly/unloadability#use-a-custom-collectible-assemblyloadcontext</a></p>`,r:{minutes:10.12,words:3035},t:"简单的动态加载示例",y:"a"}}],["/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/plugincore.html",{loader:()=>a(()=>import("./plugincore.html-DnMkB5wa.js"),__vite__mapDeps([758,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>PluginCore 是一个适用于 ASP.NET Core 的轻量级插件框架，由国人开发并开源。有一些插件的项目是基于配置的形式管理插件， 而这个项目提供了一个插件管理页面，对使用者非常友好。
仓库地址：<a href="https://github.com/yiyungent/PluginCore" target="_blank" rel="noopener noreferrer">https://github.com/yiyungent/PluginCore</a>
star：305(2023年6月21日14:21:50)</p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/C4fgjFYf0wAT2CZCcJ86fA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/C4fgjFYf0wAT2CZCcJ86fA</a> | 开源的 .NET 轻量级可视化插件框架！</p>`,r:{minutes:.45,words:135},t:"PluginCore",y:"a"}}],["/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/",{loader:()=>a(()=>import("./index.html-IJ5JPF4R.js"),__vite__mapDeps([759,1])),meta:{a:"azrng",d:16917984e5,l:"2023年8月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过动态加载dll，实现插件的功能。</p>
<h2>文章推荐</h2>
<p><a href="https://www.yuque.com/docs/share/b8446863-5d7b-4adc-a852-45c87aea51e8?view=doc_embed" target="_blank" rel="noopener noreferrer">反射加载dll</a></p>
`,r:{minutes:.2,words:59},t:"说明",y:"a"}}],["/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/rebachadll.html",{loader:()=>a(()=>import("./rebachadll.html-DKppZ5Ok.js"),__vite__mapDeps([760,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>场景</h2>
<p>主要运用到宿主与插件这个场景或者动态任务的场景上（假设你现在业务服务已经运行，但是，需要新增加新的业务功能，就可以用这种方式）。</p>
<h2>思路</h2>
<p>主要是根据 AssemblyLoadContext 这个系统提供的API来实现的，已经实现了对DLL程序集的加载和卸载。
之前AppDomain是通过程序域（隔离的环境）的概念进行隔离的，而 AssemblyLoadContext 的话，提供了程序集加载隔离，它允许在单个进程中加载同一程序集的多个版本。
它替换.NET Framework中多个AppDomain实例提供的隔离机制，其中AssemblyLoadContext.Default 表示运行时的默认上下文，该上下文用于应用程序主程序集及其静态依赖项，那么，其他的上下文，就是插件DLL的上下文了。
从概念上讲，加载上下文会创建一个用于加载、解析和可能卸载一组程序集的范围。
这里就根据 AssemblyLoadContext 加载，卸载，来实现热插播逻辑的实现.</p>`,r:{minutes:2.62,words:786},t:"热拔插DLL",y:"a"}}],["/dotnet/chengxujicaozuo/sourcegenerator/sourcegenerator.html",{loader:()=>a(()=>import("./sourcegenerator.html-BuBWHkUe.js"),__vite__mapDeps([761,1])),meta:{a:"azrng",d:16928352e5,l:"2023年8月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>微软在.Net5中引入Source Generator(源码生成器)新特性，通过Source Generator可以实现在应用编译的期间根据当前编译信息动态生成代码，而且可以在我们的c#代码汇总直接引用动态生成代码。
源代码生成器(Source Generators) 是一段在编译过程中运行的代码，可以根据程序中的代码来生成其他文件，这些文件可以与其余代码一起编译。</p>
<p>官网：<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/roslyn-sdk/source-generators-overview" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/csharp/roslyn-sdk/source-generators-overview</a></p>`,r:{minutes:1.85,words:556},t:"说明",y:"a"}}],["/dotnet/chengxujicaozuo/sourcegenerator/zidongshengchengjiekoushixianlei.html",{loader:()=>a(()=>import("./zidongshengchengjiekoushixianlei.html-WBsHZIz6.js"),__vite__mapDeps([762,1])),meta:{a:"azrng",d:16429824e5,l:"2022年1月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>.NET SourceGenerators 根据 HTTPAPI 接口自动生成实现类：<a href="https://www.cnblogs.com/huiyuanai709/p/source-generators-httpclient.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/huiyuanai709/p/source-generators-httpclient.html</a>
Github：<a href="https://github.com/huiyuanai709/SourceGeneratorPower" target="_blank" rel="noopener noreferrer">https://github.com/huiyuanai709/SourceGeneratorPower</a></p>`,r:{minutes:.21,words:62},t:"自动生成接口实现类",y:"a"}}],["/dotnet/commonMethod/encrypt/aes.html",{loader:()=>a(()=>import("./aes.html--nlMW-Jm.js"),__vite__mapDeps([763,1])),meta:{a:"azrng",d:16730496e5,l:"2023年1月7日",c:["dotNET"],g:["无"],o:!0,e:`<p>安全架构-加密算法-AES加密.NET C#实现</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AESHelper</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// AES加密(有向量) cbc</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>明文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密钥(必须32位否则报错)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>向量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> iv<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> toEncryptArray <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">RijndaelManaged</span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RijndaelManaged</span>
        <span class="token punctuation">{</span>
            Mode <span class="token operator">=</span> CipherMode<span class="token punctuation">.</span>CBC<span class="token punctuation">,</span>
            Padding <span class="token operator">=</span> PaddingMode<span class="token punctuation">.</span>PKCS7<span class="token punctuation">,</span>
            KeySize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>
            BlockSize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>
            Key <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
            IV <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">ICryptoTransform</span> cTransform <span class="token operator">=</span> rm<span class="token punctuation">.</span><span class="token function">CreateEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resultArray <span class="token operator">=</span> cTransform<span class="token punctuation">.</span><span class="token function">TransformFinalBlock</span><span class="token punctuation">(</span>toEncryptArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> toEncryptArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>resultArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> resultArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///  AES解密(有向量) cbc</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>明文（待解密）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密文(必须32位否则报错)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>向量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> iv<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> toEncryptArray <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">RijndaelManaged</span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RijndaelManaged</span>
        <span class="token punctuation">{</span>
            Mode <span class="token operator">=</span> CipherMode<span class="token punctuation">.</span>CBC<span class="token punctuation">,</span>
            Padding <span class="token operator">=</span> PaddingMode<span class="token punctuation">.</span>PKCS7<span class="token punctuation">,</span>
            KeySize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>
            BlockSize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>
            Key <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
            IV <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">using</span> <span class="token class-name">ICryptoTransform</span> cTransform <span class="token operator">=</span> rm<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resultArray <span class="token operator">=</span> cTransform<span class="token punctuation">.</span><span class="token function">TransformFinalBlock</span><span class="token punctuation">(</span>toEncryptArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> toEncryptArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>resultArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// AES加密(无向量) ecb</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>明文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密钥(必须32位否则报错)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> toEncryptArray <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">RijndaelManaged</span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RijndaelManaged</span>
        <span class="token punctuation">{</span>
            Key <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Mode <span class="token operator">=</span> CipherMode<span class="token punctuation">.</span>ECB<span class="token punctuation">,</span>
            Padding <span class="token operator">=</span> PaddingMode<span class="token punctuation">.</span>PKCS7<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">ICryptoTransform</span> cTransform <span class="token operator">=</span> rm<span class="token punctuation">.</span><span class="token function">CreateEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resultArray <span class="token operator">=</span> cTransform<span class="token punctuation">.</span><span class="token function">TransformFinalBlock</span><span class="token punctuation">(</span>toEncryptArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> toEncryptArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>resultArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> resultArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///  AES解密(无向量) ecb</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>明文（待解密）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密文(必须32位否则报错)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> toEncryptArray <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">RijndaelManaged</span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RijndaelManaged</span>
        <span class="token punctuation">{</span>
            Key <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Mode <span class="token operator">=</span> CipherMode<span class="token punctuation">.</span>ECB<span class="token punctuation">,</span>
            Padding <span class="token operator">=</span> PaddingMode<span class="token punctuation">.</span>PKCS7
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">using</span> <span class="token class-name">ICryptoTransform</span> cTransform <span class="token operator">=</span> rm<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resultArray <span class="token operator">=</span> cTransform<span class="token punctuation">.</span><span class="token function">TransformFinalBlock</span><span class="token punctuation">(</span>toEncryptArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> toEncryptArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>resultArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.34,words:402},t:"AES",y:"a"}}],["/dotnet/commonMethod/encrypt/chinaEncrypt.html",{loader:()=>a(()=>import("./chinaEncrypt.html-CFYP2hns.js"),__vite__mapDeps([764,1])),meta:{a:"runliuv",d:1691712e6,l:"2023年8月11日",c:["dotNet"],g:["国密","加密"],o:!0,e:`<h2>概述</h2>
<p>国密算法包括SM1、SM2、SM3、SM4、SM7、SM9、祖冲之密码算法（ZUC) 等。</p>
<h2>SM2</h2>
<h3>方案一</h3>
<p>根据字符串配置去嘉兴加解密，引用nuget包：BouncyCastle.Cryptography</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// 生成 SM2 密钥对，密钥对使用 Base64 进行编码
/// &lt;/summary&gt;
/// &lt;param name="privateKey"&gt;&lt;/param&gt;
/// &lt;param name="publicKey"&gt;&lt;/param&gt;
public static void GenerateSM2KeyPair(out string privateKey, out string publicKey)
{
    // 获取 SM2 曲线参数
    X9ECParameters curve = ECNamedCurveTable.GetByName("sm2p256v1");
    KeyGenerationParameters parameters = new ECKeyGenerationParameters(new ECDomainParameters(curve), new SecureRandom());

    // 创建 SM2 密钥对生成器
    ECKeyPairGenerator generator = new ECKeyPairGenerator();
    generator.Init(parameters);

    // 创建密钥对
    var keyPair = generator.GenerateKeyPair();

    // 私钥
    ECPrivateKeyParameters privateKeyParameters = (ECPrivateKeyParameters)keyPair.Private;
    privateKey = Base64.ToBase64String(privateKeyParameters.D.ToByteArrayUnsigned());

    // 公钥
    ECPublicKeyParameters publicKeyParameters = (ECPublicKeyParameters)keyPair.Public;
    publicKey = Base64.ToBase64String(publicKeyParameters.Q.GetEncoded());
}

/// &lt;summary&gt;
/// SM2 公钥加密
/// &lt;/summary&gt;
/// &lt;param name="message"&gt;&lt;/param&gt;
/// &lt;param name="key"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string Encrypt(string message, string key)
{
    // 获取 SM2 曲线参数
    X9ECParameters curve = ECNamedCurveTable.GetByName("sm2p256v1");

    ECPoint q = curve.Curve.DecodePoint(Base64.Decode(key));
    ECDomainParameters domain = new ECDomainParameters(curve);
    ECPublicKeyParameters pubk = new ECPublicKeyParameters("EC", q, domain);

    // 创建SM2加密器
    SM2Engine sm2Engine = new SM2Engine();
    sm2Engine.Init(true, new ParametersWithRandom(pubk, new SecureRandom()));

    // 将原始数据转换为字节数组
    byte[] dataBytes = Encoding.UTF8.GetBytes(message);

    // 执行加密操作
    byte[] encryptedData = sm2Engine.ProcessBlock(dataBytes, 0, dataBytes.Length);

    // 将加密结果转换为 Base64 字符串
    return Base64.ToBase64String(encryptedData);
}

/// &lt;summary&gt;
/// SM2 私钥解密
/// &lt;/summary&gt;
/// &lt;param name="message"&gt;&lt;/param&gt;
/// &lt;param name="key"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string Decrypt(string message, string key)
{
    // 获取 SM2 曲线参数
    X9ECParameters curve = ECNamedCurveTable.GetByName("sm2p256v1");

    ECDomainParameters domain = new ECDomainParameters(curve);
    BigInteger d = new BigInteger(1, Base64.Decode(key));
    ECPrivateKeyParameters prik = new ECPrivateKeyParameters(d, domain);

    // 创建SM2加密器
    SM2Engine sm2Engine = new SM2Engine();
    sm2Engine.Init(false, prik);

    byte[] encryptedData = Base64.Decode(message);

    // 执行解密操作
    byte[] decryptedData = sm2Engine.ProcessBlock(encryptedData, 0, encryptedData.Length);

    // 将解密结果转换为字符串
    return Encoding.UTF8.GetString(decryptedData);
}
</code></pre></div>`,r:{minutes:40.34,words:12102},t:"国密算法",y:"a"}}],["/dotnet/commonMethod/encrypt/",{loader:()=>a(()=>import("./index.html-eZWedOIf.js"),__vite__mapDeps([765,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>密码学中应用最为广泛的的三类算法：
1、对称算法（分组密码算法）代表分组密码算法(DES和SM4)；
2、非对称算法（<a href="https://so.csdn.net/so/search?q=%E5%85%AC%E9%92%A5&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">公钥</a>密码算法）代表公钥密码算法(RSA和SM2)；
3、杂凑算法（摘要算法）代表摘要算法(HAS-256系列和SM3)；</p>
<h2>开源组件</h2>
<h3>BouncyCastle</h3>`,r:{minutes:2.14,words:641},t:"说明",y:"a"}}],["/dotnet/commonMethod/encrypt/rsajiajiemi.html",{loader:()=>a(()=>import("./rsajiajiemi.html-BetidndZ.js"),__vite__mapDeps([766,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["dotNET"],g:["无"],o:!0,e:`<h2>密钥区别</h2>
<p>RSA生成的密钥可以以不同的格式进行表示，常见的包括字符串（PEM/Base64）和XML。</p>
<ol>
<li>字符串格式（PEM/Base64）: 这种格式通常用于在文本文件中存储和传输密钥。它将密钥转换为可读的字符串形式，经过Base64编码，并采用一定的标记和格式进行表示，例如以"-----BEGIN RSA PRIVATE KEY-----"开始和"-----END RSA PRIVATE KEY-----"结束。</li>
<li>XML格式: 这种格式使用XML标记语言表示密钥。公钥和私钥分别包含在<code>&lt;RSAKeyValue&gt;</code>元素中，并使用子元素来表示其中的参数，如模数（Modulus）、指数（Exponent）等。</li>
</ol>`,r:{minutes:4.09,words:1227},t:"RSA加解密",y:"a"}}],["/dotnet/commonMethod/encrypt/sha.html",{loader:()=>a(()=>import("./sha.html-DQVVhOzm.js"),__vite__mapDeps([767,1])),meta:{a:"azrng",d:16619904e5,l:"2022年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>散列法提供了一种<strong>单向加密</strong>的方式。</li>
<li>适合于在数据库中存储密码，因为我们无需提供解密的信息。</li>
</ul>
<h2>常用散列算法</h2>
<p>以升序按照安全等级列出常用散列算法</p>
<p>MD5(16)-&gt;SHA1(20)-&gt;SHA256(32)-&gt;SHA384(48)-&gt;SHA512(64)</p>
<p>算法长度越短运算的速度越快。</p>
<p>存储密码或者其他高安全等级的敏感数据，请至少使用SHA256。</p>
<h2>操作汇总</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// SHA哈希</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SHAHelper</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 获取字符串MD5值</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetMd5Hash</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> md5 <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> hashResult <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 获取文件mdm值</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFileMd5Hash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> md5 <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenRead</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLowerInvariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 获取字符串sha1值</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArgumentNullException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSHA1Hash</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> sha1 <span class="token operator">=</span> SHA1<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> hashResult <span class="token operator">=</span> sha1<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 获取字符串sha256值</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArgumentNullException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSHA256Hash</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> sha1 <span class="token operator">=</span> SHA256<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> hashResult <span class="token operator">=</span> sha1<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 获取字符串sha512值</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArgumentNullException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSHA512Hash</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> sha1 <span class="token operator">=</span> SHA512<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> hashResult <span class="token operator">=</span> sha1<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashResult<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.75,words:526},t:"SHA",y:"a"}}],["/dotnet/commonNuget/duixiangyingshe/automapper.html",{loader:()=>a(()=>import("./automapper.html-C6cWbu5V.js"),__vite__mapDeps([768,1])),meta:{a:"azrng",d:16970688e5,l:"2023年10月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>是一个基于约定的对象-对象映射器。通俗地讲就是将一对象转换为另一个对象，前提是我们需要在这两个对象之间建立约定。支持框架：.Net 4.6.1+ 、.Net Standard 2.0+</p>
<blockquote>
<p>官网：<a href="https://docs.automapper.org/" target="_blank" rel="noopener noreferrer">https://docs.automapper.org/</a></p>
</blockquote>
<h2>使用</h2>
<blockquote>
<p>本次示例环境：vs2019、.net5</p>
</blockquote>`,r:{minutes:7.47,words:2242},t:"AutoMapper",y:"a"}}],["/dotnet/commonNuget/duixiangyingshe/automapperdotnetf.html",{loader:()=>a(()=>import("./automapperdotnetf.html-DV7znSQO.js"),__vite__mapDeps([769,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>配置应仅发生一次每个应用程序域。这意味着放置配置代码的最佳位置是在应用程序启动中，例如用于 ASP.NET 应用程序的 Global.asax 文件。通常，配置引导器类位于自己的类中，此引导器类从启动方法中调用。引导器类应构建一个对象来配置类型映射。</p>
<h2>操作</h2>
<h3>Initialize</h3>
<p>Initialize方法是Mapper的初始化，里面可以写上CreateMap表达式,具体是谁和谁进行匹配。在之后就可以直接进行一个获取值的过程了，非常的简单。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    Mapper<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">,</span> Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mapper的初始化，里面写上createmap表达式</span>
    <span class="token class-name">Source</span> source <span class="token operator">=</span> Mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>InfoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.56,words:468},t:"AutoMapperdotNetF",y:"a"}}],["/dotnet/commonNuget/duixiangyingshe/emitmapper.html",{loader:()=>a(()=>import("./emitmapper.html-BpzmVdTi.js"),__vite__mapDeps([770,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>EmitMapper</p>
`,r:{minutes:.09,words:28},t:"EmitMapper",y:"a"}}],["/dotnet/commonNuget/duixiangyingshe/mapster.html",{loader:()=>a(()=>import("./mapster.html-CeFols6S.js"),__vite__mapDeps([771,1])),meta:{a:"azrng",d:1647216e6,l:"2022年3月14日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"Mapster",y:"a"}}],["/dotnet/commonNuget/duixiangyingshe/tinymapper.html",{loader:()=>a(()=>import("./tinymapper.html-BxJB7NFx.js"),__vite__mapDeps([772,1])),meta:{a:"azrng",d:1695168e6,l:"2023年9月20日",c:["dotNET"],g:["无"],o:!0,e:`<p><a href="https://www.nuget.org/packages/TinyMapper#readme-body-tab" target="_blank" rel="noopener noreferrer">https://www.nuget.org/packages/TinyMapper#readme-body-tab</a></p>
`,r:{minutes:.12,words:35},t:"TinyMapper",y:"a"}}],["/dotnet/commonNuget/xianliu/dotnetratelimiter.html",{loader:()=>a(()=>import("./dotnetratelimiter.html-Dxshrp2E.js"),__vite__mapDeps([773,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>在构建 .NET API 时，您可能希望控制用户请求的频率以防止恶意攻击。换句话说，您可能希望限制短时间内来自某个 IP 地址的请求数量，以减轻拒绝服务攻击，这也称为限流。有很多 Nuget 包使用中间件来处理用户请求，但中间件存在一个问题，那就是它们会影响所有传入请求！但是，如果您只想控制一些关键的接口，有没有简单的方案， 当然有，使用 DotNetRateLimiter 就可以实现！</p>
<p>仓库地址：<a href="https://github.com/sa-es-ir/DotNet.RateLimit" target="_blank" rel="noopener noreferrer">https://github.com/sa-es-ir/DotNet.RateLimit</a></p>`,r:{minutes:1.63,words:490},t:"DotNetRateLimiter",y:"a"}}],["/dotnet/commonNuget/yarp/",{loader:()=>a(()=>import("./index.html-DvKvBMZJ.js"),__vite__mapDeps([774,1])),meta:{a:"azrng",d:16941312e5,l:"2023年9月8日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>YARP（Yet Another Reverse Proxy）是一个开源的、高性能的反向代理库，由Microsoft开发，使用C#语言编写。它旨在作为.NET平台上构建反向代理服务器的基础。YARP主要针对.NET 5及以上版本，允许开发者在.NET应用程序中轻松地实现反向代理的功能。</p>
<h2>功能和特点</h2>
<ol>
<li><strong>模块化和可扩展性：</strong> YARP设计成高度模块化的，这意味着可以根据需要替换或扩展内部组件，如HTTP请求路由、负载均衡、健康检查等。</li>
<li><strong>性能：</strong> YARP针对高性能进行了优化，利用了.NET的异步编程模型和高效的IO操作，以处理大量并发连接。</li>
<li><strong>配置驱动：</strong> YARP的行为可以通过配置来控制，支持从文件、数据库或其他来源动态加载配置。</li>
<li><strong>路由：</strong> 可以基于各种参数（如路径、头部、查询参数）配置请求路由规则。</li>
<li><strong>负载均衡：</strong> 内置多种负载均衡策略，如轮询、最少连接、随机选择等，并且可以自定义负载均衡策略。</li>
<li><strong>健康检查：</strong> 支持后端服务的健康检查，以确保请求只会被转发到健康的后端服务实例。</li>
<li><strong>转换器：</strong> 允许对请求和响应进行转换，如修改头部、路径或查询参数。</li>
<li><strong>会话亲和性：</strong> 支持会话亲和性（Session Affinity），确保来自同一客户端的请求被发送到相同的后端服务实例。</li>
</ol>`,r:{minutes:2.79,words:838},t:"说明",y:"a"}}],["/dotnet/console/jiemian/jiemiangui_cs.html",{loader:()=>a(()=>import("./jiemiangui_cs.html-CAbws_8l.js"),__vite__mapDeps([775,1])),meta:{a:"azrng",d:16913664e5,l:"2023年8月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>GUI.CS是一个非常棒的控制台UI工具包。它提供了一个功能完善的工具箱，开发人员可以使用它构建早期控制台常见的一种用户界面。</p>
<h2>空间</h2>
<p>提供了以下控件</p>
<ul>
<li>Buttons</li>
<li>Labels</li>
<li>Text Entry</li>
<li>Text View</li>
<li>User Inputs</li>
<li>Windows</li>
<li>Menus</li>
<li>ScrollBars</li>
</ul>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Terminal<span class="token punctuation">.</span>Gui</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> Main <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span>Init <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> top <span class="token operator">=</span> Application<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>

    <span class="token comment">// 创建顶级窗体</span>
        <span class="token class-name"><span class="token keyword">var</span></span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Window</span> <span class="token punctuation">(</span><span class="token string">"MyApp"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        Y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 预留菜单行</span>

        <span class="token comment">// 使用Dim.Fill(), 它可以自动调整窗体大小，实现自适应，而无需手动敢于</span>
        Width <span class="token operator">=</span> Dim<span class="token punctuation">.</span>Fill <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Height <span class="token operator">=</span> Dim<span class="token punctuation">.</span>Fill <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
        top<span class="token punctuation">.</span>Add <span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个菜单</span>
        <span class="token class-name"><span class="token keyword">var</span></span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuBar</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuBarItem <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuBarItem</span> <span class="token punctuation">(</span><span class="token string">"_File"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"_New"</span><span class="token punctuation">,</span> <span class="token string">"Creates new file"</span><span class="token punctuation">,</span> NewFile<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"_Close"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Close <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"_Quit"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Quit <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> top<span class="token punctuation">.</span>Running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuBarItem</span> <span class="token punctuation">(</span><span class="token string">"_Edit"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"_Copy"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"C_ut"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MenuItem</span> <span class="token punctuation">(</span><span class="token string">"_Paste"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        top<span class="token punctuation">.</span>Add <span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">(</span><span class="token string">"Login: "</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> X <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> Y <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">(</span><span class="token string">"Password: "</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Left <span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">,</span>
        Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Top <span class="token punctuation">(</span>login<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> loginText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextField</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Right <span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>
                Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Top <span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">,</span>
                Width <span class="token operator">=</span> <span class="token number">40</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> passText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextField</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Secret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Left <span class="token punctuation">(</span>loginText<span class="token punctuation">)</span><span class="token punctuation">,</span>
                Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Top <span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span>
                Width <span class="token operator">=</span> Dim<span class="token punctuation">.</span>Width <span class="token punctuation">(</span>loginText<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 添加一些其他控件</span>
    win<span class="token punctuation">.</span>Add <span class="token punctuation">(</span>
        <span class="token comment">// 这是我最喜欢的布局</span>
          login<span class="token punctuation">,</span> password<span class="token punctuation">,</span> loginText<span class="token punctuation">,</span> passText<span class="token punctuation">,</span>

        <span class="token comment">// 这里使用了绝对定位</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CheckBox</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Remember me"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RadioGroup</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"_Personal"</span><span class="token punctuation">,</span> <span class="token string">"_Company"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"Ok"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"Cancel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Press F9 or ESC plus 9 to activate the menubar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Application<span class="token punctuation">.</span>Run <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.2,words:361},t:"界面GUI.CS",y:"a"}}],["/dotnet/console/jiemian/terminal_gui.html",{loader:()=>a(()=>import("./terminal_gui.html-CIY5TDiF.js"),__vite__mapDeps([776,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Terminal.Gui 是一个使用 C## 开发的基于控制台的工具库。这个框架的设计目的是， 在单色终端和支持鼠标的现代彩色终端上， 开发人员也可以非常轻松地进行开发并运行程序。
Terminal.Gui 是跨平台的, 它适用于 Windows、Linux 和 MacOS。</p>
<p>仓库地址：<a href="https://github.com/gui-cs/Terminal.Gui" target="_blank" rel="noopener noreferrer">https://github.com/gui-cs/Terminal.Gui</a></p>`,r:{minutes:1.64,words:491},t:"Terminal.Gui",y:"a"}}],["/dotnet/console/xiaoshili/xiazaituchuangtupian.html",{loader:()=>a(()=>import("./xiazaituchuangtupian.html-Dt_pIl3_.js"),__vite__mapDeps([777,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>针对网络上的那些访问一个URL然后就可以随机访问一个图片的链接，批量下载图片内容</p>
<h2>操作</h2>
<p>新建控制台项目，然后项目文件如下</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Project <span class="token assign-left variable">Sdk</span><span class="token operator">=</span><span class="token string">"Microsoft.NET.Sdk"</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>OutputType<span class="token operator">&gt;</span>Exe<span class="token operator">&lt;</span>/OutputType<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>net8.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/TargetFramework<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>ImplicitUsings<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span>/ImplicitUsings<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>Nullable<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span>/Nullable<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>/PropertyGroup<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/Project<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.18,words:355},t:"下载图床图片",y:"a"}}],["/dotnet/console/yangshinugetbao/biaogeconsoletables.html",{loader:()=>a(()=>import("./biaogeconsoletables.html-DIS8RpYm.js"),__vite__mapDeps([778,1])),meta:{a:"azrng",d:16483392e5,l:"2022年3月27日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.09,words:27},t:"表格ConsoleTables",y:"a"}}],["/dotnet/console/yangshinugetbao/jindutiaoshellprogressbar.html",{loader:()=>a(()=>import("./jindutiaoshellprogressbar.html-Be9GP2XM.js"),__vite__mapDeps([779,1])),meta:{a:"azrng",d:16913664e5,l:"2023年8月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>和需要其他应用程序一样，控制台程序也可以执行长时任务。ShellProgressBar是一个非常棒的库，使用它，你可以在控制台输出一些非常惊艳的进度条。而且，ShellProgressBar是可以实现进度条的嵌套使用。
仓库地址：<a href="https://github.com/Mpdreamz/shellprogressbar" target="_blank" rel="noopener noreferrer">https://github.com/Mpdreamz/shellprogressbar</a></p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> totalTicks <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProgressBarOptions</span>
<span class="token punctuation">{</span>
    ProgressCharacter <span class="token operator">=</span> <span class="token char">'─'</span><span class="token punctuation">,</span>
    ProgressBarOnBottom <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pbar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProgressBar</span><span class="token punctuation">(</span>totalTicks<span class="token punctuation">,</span> <span class="token string">"Initial message"</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pbar<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//will advance pbar to 1 out of 10.</span>
    <span class="token comment">//we can also advance and update the progressbar text</span>
    pbar<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token string">"Step 2 of 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.52,words:156},t:"进度条ShellProgressBar",y:"a"}}],["/dotnet/console/yangshinugetbao/spectreconsole.html",{loader:()=>a(()=>import("./spectreconsole.html-BLjLHxgF.js"),__vite__mapDeps([780,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Spectre.Console 是一个.NET库，可以更轻松地创建漂亮的控制台应用程序。
官网文档：<a href="https://spectreconsole.net/" target="_blank" rel="noopener noreferrer">https://spectreconsole.net/</a>
仓库地址：<a href="https://github.com/spectreconsole/spectre.console" target="_blank" rel="noopener noreferrer">https://github.com/spectreconsole/spectre.console</a></p>`,r:{minutes:.84,words:253},t:"SpectreConsole",y:"a"}}],["/dotnet/console/yangshinugetbao/xiazaiqi.html",{loader:()=>a(()=>import("./xiazaiqi.html-Df-8eFow.js"),__vite__mapDeps([781,1])),meta:{a:"azrng",d:16940448e5,l:"2023年9月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Downloader</h2>
<p>快速、跨平台和可靠的多部分下载器，支持 🚀 .Net Core</p>
<p>仓库地址：<a href="https://github.com/bezzad/Downloader" target="_blank" rel="noopener noreferrer">https://github.com/bezzad/Downloader</a></p>
`,r:{minutes:.18,words:55},t:"下载器",y:"a"}}],["/dotnet/console/yangshinugetbao/yansecolorful_console.html",{loader:()=>a(()=>import("./yansecolorful_console.html-Yleecw1M.js"),__vite__mapDeps([782,1])),meta:{a:"azrng",d:16589664e5,l:"2022年7月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Colorful.Console是一个Nuget包，它可以增强我们对控制台输出文字样式的控制。我们可以使用System.Drawing.Color中定义的颜色来定义控制台程序的配色方案。
Colorful.Console: http://colorfulconsole.com/</p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Colorful.Console"</span> Version<span class="token operator">=</span><span class="token string">"1.2.15"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.58,words:173},t:"颜色Colorful.Console",y:"a"}}],["/dotnet/console/yangshinugetbao/zhizuojiaohuchengxusharprompt.html",{loader:()=>a(()=>import("./zhizuojiaohuchengxusharprompt.html-CD2iTIxd.js"),__vite__mapDeps([783,1])),meta:{a:"azrng",d:16913664e5,l:"2023年8月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Sharprompt是一个基于C#的交互式命令行应用框架，具有如下特点：</p>
<ul>
<li>多平台支持</li>
<li>支持常用的提示方式（普通输入/密码/选择项等）</li>
<li>支持基于模型的提示（预览中）</li>
<li>输入值的验证</li>
<li>使用枚举值自动生成数据源</li>
<li>可定制的符号和颜色模式</li>
<li>Unicode 支持（多字节字符和表情符号😀🎉）</li>
</ul>
<h2>常用API</h2>
<p>Prompt.Input
简单的输入提示，返回指定类型数据
Prompt.Password
输入密码提示
Prompt.Confirm
确认提示，返回bool值
Prompt.Select
单选提示
Prompt.ColorSchema
指定配色方案</p>`,r:{minutes:.9,words:269},t:"制作交互程序Sharprompt",y:"a"}}],["/dotnet/csharp/dingzhishujujiegou/xingnengheshishixingchuli.html",{loader:()=>a(()=>import("./xingnengheshishixingchuli.html-CwC4aqZI.js"),__vite__mapDeps([784,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>当我们遇到这种数据处理场景：我们需要一个组件实时性收集外部给它的数据，并且将它交给另外一个程序进行处理。考虑到性能，它会将数据存储到本地缓冲区，然后等累积到一定数量的时候最后统一打包发送，并且考虑到实时性，数据不能再缓冲区保存太长的时间，必须设置一个延时时间，一旦超过这个时间，缓冲的数据就必须立即发送出去。</p>
<p>这种还不同于使用MQ、Channel这种用来进行削锋的操作，上面的场景实时性没有那么高，但是又不想数据发送的那么频繁。</p>
<p>要做到上面的哪种需求，如果要综合考虑性能、线程安全、内存分配，要实现起来还真有点麻烦，不过蒋老师的文章已经给出来了实现方案，本文是对老师文章的一种学习汇总。</p>`,r:{minutes:1.33,words:398},t:"性能和实时性处理",y:"a"}}],["/dotnet/csharp/duixiangheleixing/attribute.html",{loader:()=>a(()=>import("./attribute.html-BBfQNSnh.js"),__vite__mapDeps([785,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<blockquote>
<p>最近更新：2021年12月24日 09:43:04</p>
</blockquote>
<h2>开篇语</h2>
<p>本文开始之前，首先我想问下大家对于属性和特性知道多少？属性和特性又有何区别？
<img src="/common/1619859754610-fc47148b-04d3-4314-b49a-3219448ed593.png" alt="image.png" loading="lazy">
对于该单词，我更想把它称之为：特性。对于属性和特性就是名称上有纠葛(不知道你们迷不迷，反正我写本文之前我是迷了)，什么是属性？属性是面向对象编程的基本概念，提供了对私有字段的访问封装，在C#中以get和set访问器方法实现对可读可写属性的操作，提供了安全和灵活的数据访问封装。什么是特性？下面内容就说明下：</p>`,r:{minutes:6.89,words:2066},t:"特性[Attribute]",y:"a"}}],["/dotnet/csharp/duixiangheleixing/changyongdeshujujiegou.html",{loader:()=>a(()=>import("./changyongdeshujujiegou.html-CTAZttOk.js"),__vite__mapDeps([786,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyStructure</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Array/ArrayList/List/LinkedList/Queue/Stack/HastSet/SortedSet/Hashtable/SortedList/Dictionary/SortedDictionary</span>
    <span class="token doc-comment comment">/// IEnumerable、ICollection、IList、IQueryable</span>
    <span class="token doc-comment comment">/// 接口是标识功能的，不同的接口拆开就是为接口隔离，虽然我们接口内容也可能重复。</span>
    <span class="token doc-comment comment">/// </span>
    <span class="token doc-comment comment">/// IEnumerable 任何数据集合都实现了的，为不同的数据结构提供了统一的数据访问方式，这个就是迭代器模式。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CollectionDemo</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//1 内存连续存储，节约空间，可以索引访问，读取快，增删慢。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> Array、ArrayList、List&lt;T&gt;</span>

            <span class="token comment">//Array</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Array：在内存上连续分配的，而且元素类型是一样的</span>
                <span class="token comment">//可以坐标访问  读取快--增删慢，长度不变</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************Array***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> stringArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"234"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//ArrayList</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//ArrayList：不定长度的，连续分配的；</span>
                <span class="token comment">//元素没有类型限制，任何元素都是当成object处理，如果是值类型，会有装箱操作</span>
                <span class="token comment">//读取快--增删慢</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************ArrayList***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ArrayList</span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"TianYa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Add增加长度</span>
                <span class="token comment">//删除数据</span>
                <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> arrayList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">"TianYa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//List&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//List：也是Array，内存上都是连续摆放、不定长、泛型，保证类型安全，避免装箱拆箱</span>
                <span class="token comment">//读取快--增删慢</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************List&lt;T&gt;***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//stringList[0] = "123"; //异常的</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intList<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> Array、ArrayList、List&lt;T&gt;</span>

            <span class="token comment">//2 非连续摆放，存储数据+地址，找数据的话就只能顺序查找，读取慢，增删快。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>

            <span class="token comment">//LinkedList&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//LinkedList：链表，泛型的特点，元素不连续分配，每个元素都有记录前后节点。</span>
                <span class="token comment">//节点值可以重复</span>
                <span class="token comment">//能不能下标访问？不能，找元素就只能遍历  查找不方便</span>
                <span class="token comment">//增删 就比较方便</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************LinkedList&lt;T&gt;***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddFirst</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddLast</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name"><span class="token keyword">bool</span></span> isContain <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">LinkedListNode<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> node123 <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//元素123的位置  从头查找</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddBefore</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddBefore</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddAfter</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                linkedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>node123<span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">RemoveFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">RemoveLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Queue&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Queue队列： 就是链表  先进先出  放任务延迟执行；A不断写入日志任务，B不断获取任务去执行。</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************Queue&lt;T&gt;***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//入队</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> numbers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Dequeuing '</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出队</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Peek at next item to dequeue: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> numbers<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Dequeuing '</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> queueCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> queueCopy<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"queueCopy.Contains(\\"four\\") = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">queueCopy<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                queueCopy<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"queueCopy.Count = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">queueCopy<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Stack&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Stack栈：就是链表  先进后出  解析表达式目录树的时候，先产生的数据后使用。</span>
                <span class="token comment">//操作记录为命令，撤销的时候是倒序的</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************Stack&lt;T&gt;******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放进去 入栈</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> numbers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Pop '</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取并移除 出栈</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Peek at next item to dequeue: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> numbers<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取不移除</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Pop '</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stackCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> stackCopy<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"stackCopy.Contains(\\"four\\") = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stackCopy<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stackCopy<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"stackCopy.Count = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stackCopy<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>

            <span class="token comment">//3 Set纯粹的集合，容器，东西丢进去，唯一性，无序的。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>

            <span class="token comment">//HashSet&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//集合：hash分布，元素间没关系，动态增加容量  去重</span>
                <span class="token comment">//统计用户IP；IP投票；交叉并补---二次好友/间接关注/粉丝合集</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************HashSet&lt;T&gt;***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"689"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> hashSet<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token punctuation">{</span>
                    <span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> hashSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"689"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">SymmetricExceptWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//补</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">ExceptWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">IntersectWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交</span>
                <span class="token punctuation">}</span>
                hashSet<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedSet&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//排序的集合：去重  而且排序  </span>
                <span class="token comment">//统计排名--每统计一个就丢进去集合</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************SortedSet&lt;T&gt;***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//IComparer&lt;T&gt; comparer  自定义对象要排序，就用这个指定</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"689"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> sortedSet<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"689"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"12435"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">SymmetricExceptWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//补</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">ExceptWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">IntersectWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交</span>
                <span class="token punctuation">}</span>

                sortedSet<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>

            <span class="token comment">//读取&amp;增删都快？ 有 hash散列 字典</span>
            <span class="token comment">//key-value，一段连续有限空间放value(开辟的空间比用到的多，hash是用空间换性能)，基于key散列计算得到地址索引，这样读取快</span>
            <span class="token comment">//增删也快，删除时也是计算位置，增加也不影响别人</span>
            <span class="token comment">//肯定会出现2个key(散列冲突)，散列结果一致时可以让第二次的+1</span>
            <span class="token comment">//可能会造成效率的降低，尤其是数据量大的情况下，以前测试过Dictionary在3w条左右性能就开始下降的厉害</span>

            <span class="token preprocessor property">#<span class="token directive keyword">region</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>

            <span class="token comment">//Hashtable</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Hashtable：key-value  体积可以动态增加，拿着key计算一个地址，然后放入key - value</span>
                <span class="token comment">//object-装箱拆箱  如果不同的key得到相同的地址，第二个在前面地址上 + 1</span>
                <span class="token comment">//查找的时候，如果地址对应数据的key不对，那就 + 1查找。。</span>
                <span class="token comment">//浪费了空间，Hashtable是基于数组实现</span>
                <span class="token comment">//查找个数据  一次定位；增删 一次定位；增删改查 都很快</span>
                <span class="token comment">//浪费空间，数据太多，重复定位，效率就下去了</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************Hashtable***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                table<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">567</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4562</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token string">"TianYa"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">DictionaryEntry</span> objDE <span class="token keyword">in</span> table<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>objDE<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>objDE<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//线程安全</span>
                Hashtable<span class="token punctuation">.</span><span class="token function">Synchronized</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有一个线程写  多个线程读</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Dictionary</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//字典：泛型，key - value，增删改查 都很快，有序的</span>
                <span class="token comment">//字典不是线程安全 ConcurrentDictionary</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************Dictionary***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"HaHa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"HoHo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"HeHe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"HiHi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"HuHu1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"HuHu"</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"HuHu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">, Value:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedDictionary</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//排序字典</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************SortedDictionary***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"HaHa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"HoHo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"HeHe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"HiHi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"HuHu1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"HuHu"</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"HuHu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">, Value:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedList</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//"a".GetHashCode();</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"***************SortedList***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedList</span> sortedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IComparer</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"First"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Second"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Third"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                sortedList<span class="token punctuation">[</span><span class="token string">"Third"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"~~"</span><span class="token punctuation">;</span><span class="token comment">//</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Fourth"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Fourth"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重复的Key Add会错</span>
                sortedList<span class="token punctuation">[</span><span class="token string">"Fourth"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"!!!"</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> keyList <span class="token operator">=</span> sortedList<span class="token punctuation">.</span><span class="token function">GetKeyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> valueList <span class="token operator">=</span> sortedList<span class="token punctuation">.</span><span class="token function">GetValueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                sortedList<span class="token punctuation">.</span><span class="token function">TrimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于最小化集合的内存开销</span>

                sortedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">"Third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>

            <span class="token punctuation">{</span>
                <span class="token comment">//ConcurrentQueue 线程安全版本的Queue</span>
                <span class="token comment">//ConcurrentStack 线程安全版本的Stack</span>
                <span class="token comment">//ConcurrentBag 线程安全版本的对象集合</span>
                <span class="token comment">//ConcurrentDictionary 线程安全版本的Dictionary</span>
                <span class="token comment">//BlockingCollection</span>
            <span class="token punctuation">}</span>

            <span class="token punctuation">{</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"passionfruit"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span><span class="token punctuation">,</span>
                    <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"blueberry"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">,</span> <span class="token string">"strawberry"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>fruit <span class="token operator">=&gt;</span> fruit<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> query<span class="token punctuation">)</span><span class="token comment">//遍历才会去查询比较  迭代器yield</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>

                <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> queryable <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AsQueryable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> queryable<span class="token punctuation">)</span><span class="token comment">//表达式目录树的解析，延迟到遍历的时候才去执行  EF的延迟查询</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.7,words:1711},t:"常用的数据结构",y:"a"}}],["/dotnet/csharp/duixiangheleixing/chouxianglei.html",{loader:()=>a(()=>import("./chouxianglei.html-o6XIRZGq.js"),__vite__mapDeps([787,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>基类一般使用抽象类，目的是不让基类实例对象。
当多个类出现相同的功能，但是功能主题不同，这是可以向上抽取的。</p>
<p>特点</p>
<ul>
<li>不允许被实例化，只能被继承。</li>
<li>可以包含属性和方法。方法既可以包含代码的实现，也可以不包含代码的实现，不包含代码实现的叫做抽象方法。</li>
<li>子类继承抽象类，必须实现抽象类的所有抽象方法。貌似有点像虚方法一样，子类实现的时候是override。</li>
<li>不能使用partial，类和接口可以</li>
</ul>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 抽象动物类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 包含实现的方法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 抽象方法，不包含方法实现</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.96,words:587},t:"抽象类",y:"a"}}],["/dotnet/csharp/duixiangheleixing/closure.html",{loader:()=>a(()=>import("./closure.html-CYKr3RYx.js"),__vite__mapDeps([788,1])),meta:{a:"azrng",d:1700352e6,l:"2023年11月19日",c:["csharp"],g:["闭包"],o:!0,e:`<h2>概述</h2>
<p>闭包的概念主要是由直线函数以及函数相关的上下文环境组合而成的实体。通过闭包，函数与其上下文变量之间建立关联关系，然后上下文变量的状态可以在函数的多次调用过程中持久保持。从作用域的角度而言，私有变量的生存期被延长，函数调用所生成的值在下次调用的时候仍被保持。</p>
<h2>优点和缺点</h2>
<h3>优点</h3>
<ul>
<li>代码简化，应用闭包可以实现一定程度的模块化复用，大大简化了代码的执行逻辑</li>
<li>数据共享与延迟</li>
<li>安全性。闭包的场合，有利于上下文信息的封闭性，实现了一定程序的信息隐蔽。</li>
</ul>
<h3>缺点</h3>`,r:{minutes:1.44,words:433},t:"闭包",y:"a"}}],["/dotnet/csharp/duixiangheleixing/fangwenxiushifu.html",{loader:()=>a(()=>import("./fangwenxiushifu.html-ZnNoldzE.js"),__vite__mapDeps([789,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>为了提高封装性，类型或者类型成员可以在声明中添加以下五个访问权限修饰符来限定其他类型和其他程序集的对它的访问。</p>
<p>通过下面的实例来进行操作
新建两个控制台程序和一个类库程序，类库程序里面有一个类为User，控制台下有一个类为Animal</p>
<h3>public</h3>
<p>完全访问权限。枚举类型成员或者接口成员默认的可访问性。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Model</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置该类的访问修饰符为public，默认是internal</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> 
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//User类可以在其他程序集下访问</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.11,words:633},t:"访问修饰符",y:"a"}}],["/dotnet/csharp/duixiangheleixing/fanxing.html",{loader:()=>a(()=>import("./fanxing.html-0Be87s7M.js"),__vite__mapDeps([790,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>泛型(geberic)，单词意思是通用的，它可以代表任意的数据类型，使类型参数化，从而达到只实现一个方法就可以操作多种数据类型的目的。</p>
<h2>操作</h2>
<h3>List</h3>
<p>线程不安全泛型集合</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//使用int作为实际参数来初始化泛型类型</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//往int列表添加元素3</span>
intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//用string作为实际参数来初始化泛型类型</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//从string列表添加元素</span>
stringList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"learninghard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.89,words:567},t:"泛型",y:"a"}}],["/dotnet/csharp/duixiangheleixing/haxi.html",{loader:()=>a(()=>import("./haxi.html-DO6eZ1CU.js"),__vite__mapDeps([791,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>HashSet</h2>
<p>*&nbsp;如果想判断某一个元素是否在HastSet内，建议使用Contains进行判断。
*&nbsp;如果箱HashSet中插入重复的元素，它的内部会忽视这次操作而不会抛出异常。
*&nbsp;移除元素：从HastSet中删除某一个元素可以调用Remove方法。
*&nbsp;set集合方法</p>
<blockquote>
<p>IsProperSubsetOf&nbsp;用于判断&nbsp;HashSet&nbsp;是否为某一个集合的完全子集</p>
</blockquote>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> setA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> setB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"X"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> setC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>setA<span class="token punctuation">.</span><span class="token function">IsProperSubsetOf</span><span class="token punctuation">(</span>setC<span class="token punctuation">)</span><span class="token punctuation">)</span>
   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"setC contains all elements of setA."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>setA<span class="token punctuation">.</span><span class="token function">IsProperSubsetOf</span><span class="token punctuation">(</span>setB<span class="token punctuation">)</span><span class="token punctuation">)</span>
   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"setB does not contains all elements of setA."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果：</span>
<span class="token comment">//setC contains all elements of setA</span>
<span class="token comment">//setB does not contains all elements of setA</span>
</code></pre></div>`,r:{minutes:2.02,words:607},t:"哈希",y:"a"}}],["/dotnet/csharp/duixiangheleixing/jiegouti.html",{loader:()=>a(()=>import("./jiegouti.html-bLsob8hN.js"),__vite__mapDeps([792,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>和类相似不过和类不同的是，结构体是值类型，而类是引用类型，不支持继承(除了隐式派生自object类型)，结构体可以包含类的所有成员，除了后面这些：无参数的构造器、字段初始化器、终结器、虚成员。
当表示一个值类型语义时候，应该推荐使用结构体。</p>
<h2>结构体构造</h2>
<p>不隐式包含一个无法重写的无参数构造函数，不能重写。
在使用构造函数的时候，必须为每个字段进行赋值操作。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">//错误：在控制方法返回调用方之前，自定实现的属性“UserInfo。Age”必须完全赋值</span>
    <span class="token keyword">public</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token comment">//Age = age;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//错误：virtual对该项无效</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Birthday <span class="token operator">=&gt;</span> <span class="token string">"2021-07-16"</span><span class="token punctuation">;</span>
    <span class="token comment">//错误：结构中不能实例化属性或者字段初始值设定项</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Creater <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.27,words:381},t:"结构体",y:"a"}}],["/dotnet/csharp/duixiangheleixing/jiekou.html",{loader:()=>a(()=>import("./jiekou.html-DCTO8Bz6.js"),__vite__mapDeps([793,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>接口和类相似，都可以从多个接口继承，继承接口的类都必须实现接口的所有成员。不同点如下</p>
<ul>
<li>接口成员都是隐式抽象的，相反，类可以包含抽象成员也和有具体实现的成员。(接口在c#8后也可以包含实现，但是不能被继承类使用。)</li>
<li>一个类可以实现多个接口，而一个类只能继承一个类</li>
<li>接口只能包含方法、属性、索引器、事件。而这些正是类中可以定义为抽象的成员类型。</li>
<li>接口也可以在不同的源文件之间进行拆分，叫做部分接口。</li>
</ul>
<p>接口定义的是房子的框架，里面的东西都需要继承的类来实现，也就是我只给你写标题，内容你自己填充。</p>`,r:{minutes:3.98,words:1194},t:"接口",y:"a"}}],["/dotnet/csharp/duixiangheleixing/kuozhanfangfa.html",{loader:()=>a(()=>import("./kuozhanfangfa.html-C6dyQWSz.js"),__vite__mapDeps([794,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<p>内容待补充</p>
`,r:{minutes:.11,words:33},t:"扩展方法",y:"a"}}],["/dotnet/csharp/duixiangheleixing/lei.html",{loader:()=>a(()=>import("./lei.html-DjJnCzw7.js"),__vite__mapDeps([795,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文是读书笔记</p>
<h2>概述</h2>
<p>类是最常见的一种引用类型，最简单的声明如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       
</code></pre></div>`,r:{minutes:9.18,words:2755},t:"类",y:"a"}}],["/dotnet/csharp/duixiangheleixing/meiju.html",{loader:()=>a(()=>import("./meiju.html-DDfI5qKV.js"),__vite__mapDeps([796,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["enum"],o:!0,e:`<h2>概述</h2>
<p>枚举是一种特殊的值类型，可以在枚举类型中定义一组命令的数组常量。适合存储状态、类型等场景，比如性别、支付状态。</p>
<h2>操作</h2>
<h3>常见操作</h3>
<p>c#枚举成员的类型模式是int类型，通过集成可以声明枚举成员为其它类型</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 枚举转字符串</span>
<span class="token class-name"><span class="token keyword">string</span></span> foo <span class="token operator">=</span> Days<span class="token punctuation">.</span>Saturday<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Saturday"</span>
<span class="token class-name"><span class="token keyword">string</span></span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Saturday"</span>

<span class="token comment">// 字符串转枚举</span>
Enum<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Days</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, bar = Days.Tuesday</span>
<span class="token punctuation">(</span>Days<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Days.Tuesday</span>

<span class="token comment">// 枚举转数字</span>
<span class="token class-name"><span class="token keyword">byte</span></span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>Days<span class="token punctuation">.</span>Monday<span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 数字转枚举</span>
<span class="token class-name">Days</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Days.Tuesday</span>

<span class="token comment">// 获取枚举所属的数字类型</span>
<span class="token class-name">Type</span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetUnderlyingType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// System.Byte</span>

<span class="token comment">// 获取所有的枚举成员</span>
<span class="token class-name">Array</span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyEnum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有枚举成员的字段名</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetNames</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.36,words:1608},t:"枚举",y:"a"}}],["/dotnet/csharp/duixiangheleixing/nibianxiebian.html",{loader:()=>a(()=>import("./nibianxiebian.html-DG-zg0Ik.js"),__vite__mapDeps([797,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>逆变和协变的表现形式
逆变(in): I&lt;子类&gt; = I&lt;父类&gt;
协变(out): I&lt;父类&gt; = I&lt;子类&gt;</p>
<h2>操作</h2>
<h3>协变</h3>
<p>不能使用的示例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IFace<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Face<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFace<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name">T</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Face<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFace<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name">T</span> input<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.64,words:793},t:"逆变协变",y:"a"}}],["/dotnet/csharp/duixiangheleixing/nimingleixing.html",{loader:()=>a(()=>import("./nimingleixing.html-DnPZaCKJ.js"),__vite__mapDeps([798,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h3>修改匿名类型值</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateAnonymousValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> myAnonInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"Anonymous"</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myAnonInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    myAnonInstance<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"Anonymous 测试"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myAnonInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.79,words:237},t:"匿名类型",y:"a"}}],["/dotnet/csharp/duixiangheleixing/shujuleixing.html",{loader:()=>a(()=>import("./shujuleixing.html-Bk54ITA3.js"),__vite__mapDeps([799,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>值类型和引用类型
值类型：struct、enum、int、float、char、bool、decimal
引用类型：class、delegate、interface、array、object、string</p>
<h3>值类型</h3>
<p>值类型包含大多数的内置类型(所有的数值类型、char类型和bool类型)以及自定义的struct类型和enum类型。值类型的变量或常量的内容仅仅是一个值。例如，内置的int类型的内容是32位的数据。值类型比引用类型更高效，因为它没有指针引用，不用分配在托管堆中，也不用被 GC 回收。</p>
<p>通过struct关键字定义自定义值类型
<img src="/common/1622735518261-499fa3a9-679d-41cd-8032-a17dc2f7c0ac.png" alt="image.png" loading="lazy"></p>`,r:{minutes:11.2,words:3360},t:"数据类型",y:"a"}}],["/dotnet/csharp/fanshe/dynamic.html",{loader:()=>a(()=>import("./dynamic.html-BJJsVzWv.js"),__vite__mapDeps([800,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>动态类型语言是指在运行时执行类型检查的语言。如果您不知道您将获得或需要分配的值的类型，则在此情况下，类型是在运行时定义的。</p>
<h2>操作</h2>
<h3>扩充对象</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//实例化对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicTestUserInfo</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">"bb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//将对象转动态类型</span>
<span class="token class-name"><span class="token keyword">dynamic</span></span> cc <span class="token operator">=</span> stu<span class="token punctuation">.</span><span class="token function">ToExpandoObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//给对象赋值 扩充对象</span>
cc<span class="token punctuation">.</span>cehi <span class="token operator">=</span> <span class="token string">"dd"</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>cehi<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.71,words:214},t:"dynamic",y:"a"}}],["/dotnet/csharp/fanshe/fangfa.html",{loader:()=>a(()=>import("./fangfa.html-CPkkGCAv.js"),__vite__mapDeps([801,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>IsAssignableFrom</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">bool</span></span> res <span class="token operator">=</span> <span class="token punctuation">{</span>TypeA<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TypeB<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
如果TypeA和TypeB类型一样则返回<span class="token boolean">true</span>；
如果TypeA是TypeB的父类则返回<span class="token boolean">true</span><span class="token punctuation">;</span>
如果TypeB实现了接口TypeA则返回<span class="token boolean">true</span><span class="token punctuation">;</span>

A<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>
确定一个类<span class="token punctuation">(</span>B<span class="token punctuation">)</span>是不是继承来自于另一个父类<span class="token punctuation">(</span>A<span class="token punctuation">)</span>
一个接口<span class="token punctuation">(</span>A<span class="token punctuation">)</span>是不是实现了另外一个接口<span class="token punctuation">(</span>B<span class="token punctuation">)</span>或两个类相同
</code></pre></div>`,r:{minutes:1.15,words:346},t:"方法",y:"a"}}],["/dotnet/csharp/fanshe/fanshe.html",{loader:()=>a(()=>import("./fanshe.html-BaCaK3N2.js"),__vite__mapDeps([802,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>反射是一项很基础的技术，它将编译期间的静态绑定转换为延迟到运行期间的动态绑定。程序集包含模块，而模块又包括类型，类型下有成员，反射就是管理程序集、模块、类型的对象，它能够动态的创建类型的实例，设置现有对象的类型或者获取现有对象的类型，能调用类型的方法和访问类型的字段属性。它是在运行时创建和使用类型实例。</p>
<h2>反射分类</h2>
<h3>type comparison</h3>
<p>类型判断，主要包括 is 和 typeof 两个操作符及对象实例上的 GetType 调用。这是最轻型的消耗，可以无需考虑优化问题。注意 typeof 运算符比对象实例上的 GetType 方法要快，只要可能则优先使用 typeof 运算符。</p>`,r:{minutes:2.85,words:855},t:"反射",y:"a"}}],["/dotnet/csharp/fanshe/fanshejiazaidll.html",{loader:()=>a(()=>import("./fanshejiazaidll.html-B_AI3Xcj.js"),__vite__mapDeps([803,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>操作</h2>
<p>Assembly.LoadFile()只会加载指定的一个程序集；
Assembly.LoadFrom 会加载一个程序集，然后自动加载此程序集依赖的其它程序集。</p>
<h3>NetF</h3>
<p>Assembly.LoadFile只载入相应的dll文件，比如Assembly.LoadFile("a.dll")，则载入a.dll，假如a.dll中引用了b.dll的话，b.dll并不会被载入。
Assembly.LoadFrom则不一样，它会载入dll文件及其引用的其他dll，比如上面的例子，b.dll也会被载入。
示例：
我们先创建一个类库，里面包含一个方法</p>`,r:{minutes:3.51,words:1054},t:"反射加载dll",y:"a"}}],["/dotnet/csharp/fanshe/fanshexiangjie.html",{loader:()=>a(()=>import("./fanshexiangjie.html-DbJzPdsv.js"),__vite__mapDeps([804,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<h3>1. 基本了解</h3>
<h4>1.1 反射概述</h4>
<p>文字说明
审查元数据并收集关于它的类型信息的能力称为反射，其中元数据（编译以后的最基本数据单元）就是一大堆的表，当编译程序集或者模块时，编译器会创建一个类定义表，一个字段定义表，和一个方法定义表等
反射提供了封装程序集、模块和类型的对象（Type 类型），可以使用反射动态创建类型的实例，将类型绑定到现有对象，或从现有对象获取类型并调用其方法或访问其字段和属性。如果代码中使用了属性，可以利用反射对它们进行访问
实际上
反射是微软封装的一个帮助类库：using System.Reflection;</p>
<h4>1.2 反射用途</h4>`,r:{minutes:17.16,words:5148},t:"反射详解",y:"a"}}],["/dotnet/csharp/fanshe/newbe_objectvisitor.html",{loader:()=>a(()=>import("./newbe_objectvisitor.html-C3drXoMS.js"),__vite__mapDeps([805,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>通过表达式树的的形式，拥有比直接使用反射快的性能，代码写起来更可读。</p>
<blockquote>
<p>仓库：<a href="https://github.com/newbe36524/Newbe.ObjectVisitor" target="_blank" rel="noopener noreferrer">https://github.com/newbe36524/Newbe.ObjectVisitor</a></p>
</blockquote>
`,r:{minutes:.21,words:62},t:"Newbe.ObjectVisitor",y:"a"}}],["/dotnet/csharp/gaojizhuti/biaodashishu.html",{loader:()=>a(()=>import("./biaodashishu.html-B0Yn1CiC.js"),__vite__mapDeps([806,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>表达式树是用树形数据结构来表示代码逻辑运算的技术，它让我们可以在运行时访问逻辑运算的结构。</p>
<h2>和委托关系</h2>
<p>表达式树其实与委托已经没什么关系了，非要扯上关系，那就这么说吧，表达式树是存放委托的容器。
要用Lambda表达式的时候，直接从表达式中获取出来，Compile()就可以直接用了。如下代码：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> fun <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:9.1,words:2729},t:"表达式树",y:"a"}}],["/dotnet/csharp/gaojizhuti/shijian.html",{loader:()=>a(()=>import("./shijian.html-BRCg6eJV.js"),__vite__mapDeps([807,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>在某件时间发生的时候，一个对象可以通过事件去通知另一个对象。关键点就是什么时候，让谁去做。
事件的关键字是event，事件是一种特殊的委托，它是委托组。</p>
<h2>操作</h2>
<h3>简单示例</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp3</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 委托</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/*  第一步执行  */</span>
            <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 关联事件方法，相当于寻找到了委托人 */</span>
            t<span class="token punctuation">.</span>ProcessEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProcessDelegate</span><span class="token punctuation">(</span>t_ProcessEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 进入Process方法 */</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">t_ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>Test<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>
            t<span class="token punctuation">.</span>S1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
            t<span class="token punctuation">.</span>S2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> S1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> S2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 事件</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">ProcessDelegate</span> ProcessEvent<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessAction</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ProcessEvent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>

                ProcessEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProcessDelegate</span><span class="token punctuation">(</span>t_ProcessEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">ProcessEvent</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果没有自己指定关联方法，将会调用该方法抛出错误</span>
        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">t_ProcessEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"The method or operation is not implemented."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">ProcessAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventArgs<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">OnProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> S1 <span class="token operator">+</span> S2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.47,words:741},t:"事件",y:"a"}}],["/dotnet/csharp/gaojizhuti/weituo.html",{loader:()=>a(()=>import("./weituo.html-DjqKDsG2.js"),__vite__mapDeps([808,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<h3>描述</h3>
<p>委托(Delegate)由来，早在c/c++中，有一个概念叫做函数的指针，其实就是一个内存指针，指向一个函数，想去调用函数的时候，只要调用函数指针就可以了，至于函数本身的实现，可以放在其他地方，也可以后实现。到了net中，没有指针的概念，但是这种方法保存了下来，形成了现在的委托Delegate。委托本身也是一种引用类型，它保存的是托管堆中对象的引用，只不过这个引用是对方法的引用。</p>
<blockquote>
<p>自己理解：委托可以保存好多同种方法(入参和出参的类型相同)的调用方式，当你去调用委托的时候，委托去代替你调用指定的方法。</p>
</blockquote>`,r:{minutes:8.16,words:2448},t:"委托",y:"a"}}],["/dotnet/csharp/garbageCollection/",{loader:()=>a(()=>import("./index.html-B1HFs75_.js"),__vite__mapDeps([809,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>内存是有效的，不可能无止境分配空间，因此就产生了GC的需求。</p>
<h2>Gc</h2>
<p>.NET GC (Garbage Collection) 是自动内存管理的一种方式，可以帮助开发者避免手动释放内存而导致的许多问题。在 .NET 环境下，GC 会定期扫描程序中的堆（heap）对象，标记出已经不再使用的对象并将其回收。</p>
<p>漫画解释GC原理：<a href="https://blog.kitlau.dev/posts/cartoon-dotnet-garbage-collection/" target="_blank" rel="noopener noreferrer">https://blog.kitlau.dev/posts/cartoon-dotnet-garbage-collection/</a></p>`,r:{minutes:11.08,words:3323},t:"说明",y:"a"}}],["/dotnet/csharp/garbageCollection/workingMethod.html",{loader:()=>a(()=>import("./workingMethod.html-Cukg4aUA.js"),__vite__mapDeps([810,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>1. 概述</h2>
<p>标准CLR使用<strong>分代式标记-压缩GC</strong>对托管堆上的对象进行自动内存管理，这是追踪型垃圾回收器，不会干涉每一次对象的访问，而是会直接激活并追踪存储在托管堆上的对象引用图，来决定哪些对象应该作为垃圾进行回收。</p>
<h3>什么时候开始垃圾回收？</h3>
<p>当内存分配量超过特定的阈值，或者需要降低应用程序内存使用量时候，垃圾回收器就会在进行内存分配时(通过new关键字)触发一次垃圾回收，这个过程还可以通过System.GC.Collect方法来手动触发。在垃圾回收的时候，所有线程都可能冻结。</p>
<h3>如何回收？</h3>`,r:{minutes:4.45,words:1334},t:"垃圾回收器工作方式",y:"a"}}],["/dotnet/csharp/hexincsharp/byte.html",{loader:()=>a(()=>import("./byte.html-m_-DeedO.js"),__vite__mapDeps([811,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>二进制转换十六进制</h3>
<p>二进制转十六进制，下面的几个方法实现效果是一样的，有些是大小写不同</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> encrypted <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这里Hex来自于包：BouncyCastle.NetCore</span>
<span class="token class-name"><span class="token keyword">var</span></span> hexString <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> hexString2 <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">ToHexString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString2<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> hexString1 <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString1<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 还有这个方法也可以</span>
<span class="token comment">// var stringBuilder = new StringBuilder();</span>
<span class="token comment">// for (var index = 0; index &lt; bytes.Length; ++index)</span>
<span class="token comment">//     stringBuilder.Append(bytes[index].ToString("X2"));</span>
<span class="token comment">// return stringBuilder.ToString();</span>

<span class="token comment">// 输出效果</span>
<span class="token comment">//abcdef</span>
<span class="token comment">//abcdef</span>
<span class="token comment">//ABCDEF</span>
</code></pre></div>`,r:{minutes:.79,words:237},t:"byte",y:"a"}}],["/dotnet/csharp/hexincsharp/dynamic.html",{loader:()=>a(()=>import("./dynamic.html-D8hrWy1k.js"),__vite__mapDeps([812,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">dynamic</span></span> dynemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExpandoObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dynemo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李思"</span><span class="token punctuation">;</span>
dynemo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
dynemo<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dynemo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dynemo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dynemo<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.17,words:50},t:"dynamic",y:"a"}}],["/dotnet/csharp/hexincsharp/paixu.html",{loader:()=>a(()=>import("./paixu.html-4uN1raGm.js"),__vite__mapDeps([813,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>学习C#中排序的简单用法</p>
<h2>操作</h2>
<h3>英文排序</h3>
<p>按照ASCII排序</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"没有排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> chars <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token char">'['</span><span class="token punctuation">,</span> <span class="token char">']'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> chars<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">c</span><span class="token punctuation">}</span></span><span class="token string">：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c</span><span class="token punctuation">}</span></span><span class="token string"> =&gt; "</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a：97 =&gt; A：65 =&gt; [：91 =&gt; ]：93 =&gt;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"默认排序后  是按照ASCII排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chars <span class="token operator">=</span> chars<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> chars<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">c</span><span class="token punctuation">}</span></span><span class="token string">：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c</span><span class="token punctuation">}</span></span><span class="token string"> =&gt; "</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A：65 =&gt; [：91 =&gt; ]：93 =&gt; a：97 =&gt;</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.46,words:1038},t:"排序",y:"a"}}],["/dotnet/csharp/hexincsharp/qiyuan.html",{loader:()=>a(()=>import("./qiyuan.html-DyfJMXgl.js"),__vite__mapDeps([814,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h4>介绍</h4>
<p>在 C## 7.0 中，弃元的使用场景主要有下面四种：
元组和对象的解构
使用 is 和 switch 的模式匹配
对具有 out 参数的方法的调用
作用域内独立使用场景</p>
<h4>场景一：元组/对象的解构</h4>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">var</span></span> fifth<span class="token punctuation">)</span> <span class="token operator">=</span> tuple<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.33,words:398},t:"弃元",y:"a"}}],["/dotnet/csharp/hexincsharp/rijiheshijian.html",{loader:()=>a(()=>import("./rijiheshijian.html-C_l7IjVJ.js"),__vite__mapDeps([815,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<blockquote>
<p>常用时间格式&nbsp; ： yyyy-MM-dd HH:mm:ss.fff</p>
</blockquote>
<h2>时间</h2>
<h3>TimeSpan</h3>
<h4>定义</h4>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property">## 声明变量</span>
<span class="token class-name"><span class="token keyword">var</span></span> timespan <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {09:00:00}</span>

<span class="token preprocessor property">## 获取当前时间戳</span>
DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// utc</span>
</code></pre></div>`,r:{minutes:7.4,words:2221},t:"日期和时间",y:"a"}}],["/dotnet/csharp/hexincsharp/shuzhi.html",{loader:()=>a(()=>import("./shuzhi.html-r9izNw_8.js"),__vite__mapDeps([816,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>随机数</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> randowm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result0 <span class="token operator">=</span> randowm<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span>BitConverter<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.88,words:264},t:"数值",y:"a"}}],["/dotnet/csharp/hexincsharp/shuzu.html",{loader:()=>a(()=>import("./shuzu.html-U1DHeuIq.js"),__vite__mapDeps([817,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<p>数组适用于循环处理
数组拥有随机访问特性
数据适用于按顺序存放数据、查找数据
因为其在内存中是连续存储的，所以他的索引速度是非常快的，而且赋值与修改元素也很简单， &nbsp;
例如</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token comment">//赋值</span>
   s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"c"</span><span class="token punctuation">;</span>
   <span class="token comment">//修改</span>
   s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"b1"</span><span class="token punctuation">;</span>

如何判断数组中是否包含重复数据
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsRepeat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> yourValue<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Hashtable</span> ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> yourValue<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
           ht<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> yourValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.21,words:1862},t:"数组",y:"a"}}],["/dotnet/csharp/hexincsharp/string.html",{loader:()=>a(()=>import("./string.html-CRIlvEDF.js"),__vite__mapDeps([818,1])),meta:{a:"azrng",d:1698624e6,l:"2023年10月30日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>字符串是一个引用类型，但是经常和值类型一起出现，比如作为类的属性等，默认值为null。</p>
<h2>字符串null值处理</h2>
<p>在c#11 的时候引入了可为null的声明符号也就是问号?，启用之后IDE会给没有处理但是可能为null的情况提示警告，如果你就是想允许为null值，那么就需要声明为比如string?类型，然后在你使用的时候比如ToUpper的时候会有警告提示。</p>
<p>当你认为有个东西属性肯定不为null的时候，你可以通过使用关键字Required来处理，例如</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> required <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> required <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:23.08,words:6925},t:"string",y:"a"}}],["/dotnet/csharp/hexincsharp/yuanzu.html",{loader:()=>a(()=>import("./yuanzu.html-63pOHByQ.js"),__vite__mapDeps([819,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h4>Tuple</h4>
<p>元组是一种数据结构，具有特定数量和元素序列。比如设计一个三元组数据结构用于存储学生信息，一共包含三个元素，第一个是名字，第二个是年龄，第三个是身高。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tuple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.38,words:714},t:"元组",y:"a"}}],["/dotnet/csharp/hexincsharp/yuchulizhiling.html",{loader:()=>a(()=>import("./yuchulizhiling.html-DjcsB-7x.js"),__vite__mapDeps([820,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>C#还有许多名为“预处理器指令”的命令。这些命令从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编写提供调试信息的代码时，也可以使用预处理器指令。</p>
<h2>操作</h2>
<h3><code>#define</code> 和 <code>#undef</code></h3>
<p>在C#中，<code>#define</code>指令用于定义一个符号（Symbol）。这个符号实际上是一个标识符，它不代表任何具体的值，只是一个占位符，用于条件编译中的判断。当你使用<code>#define</code>指令定义了一个符号，编译器会将这个符号视为已经定义，然后你可以在代码中使用条件编译指令来根据是否定义了这个符号来包含或排除某些代码块。例如：</p>`,r:{minutes:2.09,words:626},t:"预处理指令",y:"a"}}],["/dotnet/csharp/hexincsharp/yudingyileixing.html",{loader:()=>a(()=>import("./yudingyileixing.html-B3D6eQLR.js"),__vite__mapDeps([821,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文是读书笔记</p>
<h2>值类型</h2>
<p>占用空间：byte ：1字节  bool：1  chat：2 &nbsp; short：2 &nbsp; int：4  float：4  double：8&nbsp; long ：8</p>
<h3>整型</h3>
<p>C#支持8个预定义的整型类型，如下表所示：</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>.NET struct</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sbyte</td>
<td>System.SByte</td>
<td>8位有符号整数</td>
</tr>
<tr>
<td>short</td>
<td>System.Int16</td>
<td>16位有符号整数</td>
</tr>
<tr>
<td>int</td>
<td>System.Int32</td>
<td>32位有符号整数</td>
</tr>
<tr>
<td>long</td>
<td>System.Int64</td>
<td>64位有符号整数</td>
</tr>
<tr>
<td>byte</td>
<td>System.Byte</td>
<td>8位无符号整数</td>
</tr>
<tr>
<td>ushort</td>
<td>System.Int16</td>
<td>16位无符号整数</td>
</tr>
<tr>
<td>uint</td>
<td>System.Int32</td>
<td>32位无符号整数</td>
</tr>
<tr>
<td>ulong</td>
<td>System.Int64</td>
<td>64位无符号整数</td>
</tr>
</tbody>
</table>`,r:{minutes:2.84,words:851},t:"预定义类型",y:"a"}}],["/dotnet/csharp/jigecaozuo/diedaiqi.html",{loader:()=>a(()=>import("./diedaiqi.html-BQOkoeG9.js"),__vite__mapDeps([822,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>迭代器就是可以返回相同类型的值的有序序列的一段代码，可以做维护方法、运算符或者get访问器的代码体、迭代器代码使用yield return依次返回每个元素，yield break语句将终止迭代。</p>
<h2>操作</h2>
<p>在 C## 代码中，尤其是基础库的 API 中，我们经常可以看到很多方法返回的是 <code>IEnumerable&lt;T&gt;</code> 类型，为什么要返回 <code>IEnumerable&lt;T&gt;</code> 而不是 <code>IList&lt;T&gt;</code>、<code>ICollection&lt;T&gt;</code> 等类型呢？从字面上理解，<code>IEnumerable&lt;T&gt;</code> 表示该集合中的元素可以被遍历。要完全理解 <code>IEnumerable&lt;T&gt;</code> 类型对象如何被遍历，就要先理解 yield 关键字。
在 C## 中，大多数方法都是通过 return 语句把计算得到的结果返回给调用者，同时把控制权交回给调用者。比如下面这样一个获取斐波那契数列的方法：</p>`,r:{minutes:4.34,words:1301},t:"迭代器",y:"a"}}],["/dotnet/csharp/jigecaozuo/ienumerable.html",{loader:()=>a(()=>import("./ienumerable.html-6o8b3wg5.js"),__vite__mapDeps([823,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>IEnumerable</h2>
<p>最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该<code>IEnumerable&lt;T&gt;</code>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。
设置默认值</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>AddTimePeriodDto<span class="token punctuation">&gt;</span></span> TimePeriod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AddTimePeriodDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.88,words:865},t:"IEnumerable",y:"a"}}],["/dotnet/csharp/jigecaozuo/jigecaozuo.html",{loader:()=>a(()=>import("./jigecaozuo.html-BJeInFrM.js"),__vite__mapDeps([824,1])),meta:{a:"azrng",d:1699488e6,l:"2023年11月9日",c:["csharp"],g:["无"],o:!0,e:`<h4>Group&nbsp;by分组</h4>
<p>测试数据：</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code> var studentList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工一班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康巴一"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工一班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康巴二"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工一班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康巴三"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工二班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康定一"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工二班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康定二"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                new Student <span class="token punctuation">{</span>ClassName <span class="token operator">=</span> <span class="token string">"软工二班"</span><span class="token punctuation">,</span> StudentName <span class="token operator">=</span> <span class="token string">"康定三"</span><span class="token punctuation">,</span> StuId <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            var aa <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>ClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            var bb <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>ClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            var cc <span class="token operator">=</span> studentList<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>ClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.51,words:452},t:"集合操作",y:"a"}}],["/dotnet/csharp/jigecaozuo/",{loader:()=>a(()=>import("./index.html-ST42to-w.js"),__vite__mapDeps([825,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>Dictionary</h2>
<h3>资料</h3>
<p><a href="https://www.cnblogs.com/zhaolaosan/p/16244067.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhaolaosan/p/16244067.html</a> | C# 之Dictionary（字典）底层源码解析 - 赵不灰 - 博客园
C#中 Dictionary&lt;TKey, TValue&gt;的存储结构分析https://www.cnblogs.com/pengze0902/p/17830689.html</p>`,r:{minutes:.24,words:73},t:"说明",y:"a"}}],["/dotnet/csharp/jigecaozuo/shuzu.html",{loader:()=>a(()=>import("./shuzu.html-Dr3Bqsa7.js"),__vite__mapDeps([826,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>常见操作</h2>
<h3>基本操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建数组</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> pallets <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"B14"</span><span class="token punctuation">,</span> <span class="token string">"A11"</span><span class="token punctuation">,</span> <span class="token string">"B12"</span><span class="token punctuation">,</span> <span class="token string">"A13"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 数组排序</span>
Array<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>pallets<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//数组反转</span>
Array<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>pallets<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//清理数组的项(从索引0开始清理1个元素)</span>
Array<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span>pallets<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//清理全部 </span>
<span class="token comment">//Array.Clear(pallets);</span>

<span class="token comment">//调整数组大小来赋值更多元素  也可以用来删除元素</span>
Array<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span><span class="token keyword">ref</span> pallets<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pallets<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"测试"</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pallets<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试</span>

<span class="token comment">//反向编码字符串</span>
<span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> valueArray <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//join 将数组连接成字符串</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> valueArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a b c 1 2 3</span>

<span class="token comment">// split 将字符串拆分为字符串数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> arrStr <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> str <span class="token operator">=</span> english<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span> StringSplitOptions<span class="token punctuation">.</span>RemoveEmptyEntries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去掉空字符串</span>
</code></pre></div>`,r:{minutes:1.32,words:396},t:"数组",y:"a"}}],["/dotnet/csharp/jigecaozuo/stack.html",{loader:()=>a(()=>import("./stack.html-6cBCLBLt.js"),__vite__mapDeps([827,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>借助Stack实现递归优化</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个树形结构</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeNode</span> node6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        root<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node3<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>node6<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">IterativeTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IterativeTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//定义一个栈，存放所有的树节点</span>
        <span class="token class-name"><span class="token keyword">var</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把根节点压栈</span>
        stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//遍历完父节点后，将子节点压栈</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> node<span class="token punctuation">.</span>Children<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">&gt;</span></span> Children <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        Children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>TreeNode<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:.7,words:210},t:"Stack",y:"a"}}],["/dotnet/csharp/jigecaozuo/suoyinqi.html",{loader:()=>a(()=>import("./suoyinqi.html-CUObJ2d5.js"),__vite__mapDeps([828,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>索引器（Indexer） 允许一个对象可以像数组一样使用下标的方式来访问。</p>
<p>当您为类定义一个索引器时，该类的行为就会像一个 虚拟数组（virtual array） 一样。您可以使用数组访问运算符 [ ] 来访问该类的的成员。</p>
<h2>语法</h2>
<p>一维索引器的语法如下：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>element<span class="token operator">-</span><span class="token return-type class-name">type</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
   <span class="token comment">// get 访问器</span>
   <span class="token keyword">get</span>
   <span class="token punctuation">{</span>
      <span class="token comment">// 返回 index 指定的值</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// set 访问器</span>
   <span class="token keyword">set</span>
   <span class="token punctuation">{</span>
      <span class="token comment">// 设置 index 指定的值</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.52,words:755},t:"索引器",y:"a"}}],["/dotnet/csharp/linq/jiaojiebingji.html",{loader:()=>a(()=>import("./jiaojiebingji.html-RZ2SfwB8.js"),__vite__mapDeps([829,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>Distinct、Union、Concat、Intersect、Except、Skip、Take、SkipWhile、TakeWhile、Single、SingleOrDefault、Reverse、SelectMany,Aggregate()</p>
<p>Distinct - 过滤集合中的相同项；</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>  List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };
  var newlist=list.Distinct();
</code></pre></div>`,r:{minutes:1.62,words:487},t:"交接并集",y:"a"}}],["/dotnet/csharp/linq/lambda.html",{loader:()=>a(()=>import("./lambda.html-37g2xHzj.js"),__vite__mapDeps([830,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>所有Lambda表达式都使用Lambda运算符=&gt;，该运算符读作"goes to"。Lambda运算符的左边是输入参数(如果有)，右边是表达式或语句块。Lambda表达式x =&gt; x * x读作"x goes to x times x"。Lambda本质就是方法(匿名方法)。</p>
<blockquote>
<p>注：(左边)输入参数为1个时可以省略小括号，(右边)表达式只有一句时可以省略大括号和return语句</p>
</blockquote>
<h2>场景</h2>
<ul>
<li>当函数体比较简单，只有几个语句，不值得去定义一个函数的时候，使用Lambda表达式</li>
<li>Lambda表达式不用定义函数名，直接可以使用参数列表加函数体。</li>
<li>防止函数名对命名空间的污染。</li>
</ul>`,r:{minutes:1.57,words:472},t:"Lambda",y:"a"}}],["/dotnet/csharp/linq/linqExtension.html",{loader:()=>a(()=>import("./linqExtension.html-0wpH2WEk.js"),__vite__mapDeps([831,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>SimdLinq</h2>
<p>SimdLinq 是 SIMD 对 LINQ 聚合操作（Sum、Average、Min、Max）的直接替代，速度非常快</p>
<p>仓库地址：https://github.com/Cysharp/SimdLinq</p>
<h2>System.Linq.Dynamic.Core</h2>
<p>使用此动态 LINQ 库，我们可以执行以下操作：</p>
<ul>
<li>通过 LINQ 提供程序进行的基于字符串的动态查询。</li>
<li>动态分析字符串以生成表达式树，例如ParseLambda和Parse方法。</li>
<li>使用CreateType方法动态创建数据类。</li>
</ul>`,r:{minutes:1.25,words:375},t:"LINQ扩展",y:"a"}}],["/dotnet/csharp/linq/linqhelambdaduibi.html",{loader:()=>a(()=>import("./linqhelambdaduibi.html-DDItH0FT.js"),__vite__mapDeps([832,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文内容大多转载自博客园的作者：农码一生 ，文章已授权。</p>
<h2>介绍</h2>
<p>LINQ(语言集成查询)是一系列直接将查询功能集成到c#语言的技术统称。
Lambda表达式是一个匿名函数，c#中的表达式都使用lambda运算法=&gt;,用在基于方法的linq查询中，作为类似where和where等标准查询运算符方法的参数。</p>
<p><img src="/common/1624418893458-a4e8fab5-f0bb-4fbb-8d5d-461e1f7345e5.png" alt="" loading="lazy">
由此可见Linq表达式和Lambda表达式并没有什么可比性。
那与Lambda表达式相关的整条语句称作什么呢？在微软并没有给出官方的命名，在《深入理解C#》中称为点标记。
<img src="/common/1624418907711-415efac6-f678-453e-98a7-806a68ab9d74.png" alt="" loading="lazy"></p>`,r:{minutes:3.66,words:1097},t:"Linq和Lambda对比",y:"a"}}],["/dotnet/csharp/linq/selectmany.html",{loader:()=>a(()=>import("./selectmany.html-DvcJSCN_.js"),__vite__mapDeps([833,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneNumber</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Number <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>PhoneNumber<span class="token punctuation">&gt;</span></span> PhoneNumbers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> PhoneNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PhoneNumber<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneNumber</span> <span class="token punctuation">{</span> Number <span class="token operator">=</span> <span class="token string">"11"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneNumber</span> <span class="token punctuation">{</span> Number <span class="token operator">=</span> <span class="token string">"22"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
people<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> PhoneNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PhoneNumber<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneNumber</span> <span class="token punctuation">{</span> Number <span class="token operator">=</span> <span class="token string">"33"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhoneNumber</span> <span class="token punctuation">{</span> Number <span class="token operator">=</span> <span class="token string">"44"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Select</span>
<span class="token class-name"><span class="token keyword">var</span></span> phoneLists <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>PhoneNumbers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[[{"Number":"11"},{"Number":"22"}],[{"Number":"33"},{"Number":"44"}]]</span>
<span class="token comment">// SelectMany</span>
<span class="token class-name"><span class="token keyword">var</span></span> phoneNumbers <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>PhoneNumbers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[{"Number":"11"},{"Number":"22"},{"Number":"33"},{"Number":"44"}]</span>
<span class="token class-name"><span class="token keyword">var</span></span> directory <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>PhoneNumbers<span class="token punctuation">,</span> <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> parent<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> child<span class="token punctuation">.</span>Number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[{"Name":"张三","Number":"11"},{"Name":"张三","Number":"22"},{"Name":"李四","Number":"33"},{"Name":"李四","Number":"44"}]            </span>
</code></pre></div>`,r:{minutes:1.08,words:325},t:"Select/SelectMany",y:"a"}}],["/dotnet/csharp/linq/yunsuanfu.html",{loader:()=>a(()=>import("./yunsuanfu.html-C4I1V16q.js"),__vite__mapDeps([834,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文是对Linq用法的一次复习，里面包含的部分源码涉及删减。</p>
<blockquote>
<p>本文示例代码环境：VS2022、.Net6、C#10</p>
</blockquote>
<h2>Linq库</h2>
<p>https://github.com/morelinq/MoreLINQ
https://githubub.com/viceroypenguin/SuperLinq</p>
<h2>1 概述</h2>
<p>标准查询运算符分为三类</p>
<ul>
<li>输入是序列，输出是序列（序列对序列）</li>
<li>输入是集合，输出是单个元素或者标量值</li>
<li>没有输入，输出是序列（生成方法）</li>
</ul>`,r:{minutes:27.33,words:8199},t:"运算符",y:"a"}}],["/dotnet/csharp/objectDestruction/",{loader:()=>a(()=>import("./index.html-B4iKy2fM.js"),__vite__mapDeps([835,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>资源管理(尤其是内存回收)曾经是程序员的噩梦，不过在<code>.Net</code>平台中这个已经好多了，因为CLR在后台为垃圾回收做了很多事情<code>C#</code>语言中的每一个类型都代表一种资源，而这些资源又分为两类：托管资源和非托管资源。</p>
<h3>托管资源</h3>
<p>托管资源一般是指被CLR控制的内存资源，这些资源的管理可以由CLR来控制，例如程序中分配的对象，作用域内的变量等，大部分都是托管资源。由CLR管理分配和释放的资源。该类型的资源通过<strong>GC来进行自动回收</strong>。</p>
<h3>非托管资源</h3>`,r:{minutes:11.72,words:3515},t:"说明",y:"a"}}],["/dotnet/csharp/queue/channel.html",{loader:()=>a(()=>import("./channel.html-CCPJbv2s.js"),__vite__mapDeps([836,1])),meta:{a:"azrng",d:16985376e5,l:"2023年10月29日",c:["csharp"],g:["channel"],o:!0,e:`<h2>概述</h2>
<p>Channel是在.Net Core 3.0后推出的一个新的集合类型，具备异步API、高性能、线程安全的队列，支持在生产者和消费者之间传递数据。</p>
<p>Channel只是一种数据结构，用于存储生成的数据让消费者消费，还可以在拥有多个消费者。</p>
<p>利用Channel，通过发布和订阅，可以将生产者和消费者分开。生产者Producer负责接收请求，并写入Channel，而消费者Consumer为每个进入Channel的数据执行处理。这样做，一方面可以使生产者和消费者并行工作来提高性能，另一方面，可以通过创建更多的生产者或消费者来提高应用的吞吐量。</p>`,r:{minutes:6.76,words:2028},t:"Channel",y:"a"}}],["/dotnet/csharp/queue/priorityqueue.html",{loader:()=>a(()=>import("./priorityqueue.html-CeWuIP0d.js"),__vite__mapDeps([837,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>支持设置权重的队列</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PriorityQueue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//入队 添加元素</span>
    queue<span class="token punctuation">.</span><span class="token function">EnqueueDequeue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//返回第一个元素，如果不存在报错</span>
    <span class="token class-name"><span class="token keyword">var</span></span> lookIeam <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 出队 获取最小的元素</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//出队  尝试获取最小的元素，如果不存在返回null</span>
    <span class="token comment">//queue.TryDequeue(out var cc, out var dd);</span>

    <span class="token comment">//设置队列最小容量 如果超出直接2倍扩容</span>
    <span class="token class-name"><span class="token keyword">var</span></span> aa <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">EnsureCapacity</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.52,words:156},t:"PriorityQueue",y:"a"}}],["/dotnet/csharp/queue/queue.html",{loader:()=>a(()=>import("./queue.html-liMVKH7z.js"),__vite__mapDeps([838,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>对象的先进先出集合。</p>
<h3>存值取值</h3>
<p>简单的存值取值</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BasicOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//new Queue&lt;int&gt;(10);//设置初始容量大小</span>

    <span class="token comment">//设置队列最小容量 如果超出直接2倍扩容</span>
    <span class="token class-name"><span class="token keyword">var</span></span> capacity <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">EnsureCapacity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"capacity:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">capacity</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//在尾部添加元素</span>
        queue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取队列元素个数</span>
    <span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"count:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//看一下第一个元素，不移除  如果队列为空会抛出异常</span>
    <span class="token class-name"><span class="token keyword">var</span></span> lookItem <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//移除并返回第一位元素</span>
    <span class="token class-name"><span class="token keyword">var</span></span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//是否包含这个元素</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exist <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.02,words:307},t:"Queue",y:"a"}}],["/dotnet/csharp/roslyn/codeanalysis.html",{loader:()=>a(()=>import("./codeanalysis.html-v4i3ND_D.js"),__vite__mapDeps([839,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Microsoft.CodeAnalysis.CSharp is a package that provides support for C## in the .NET Compiler Platform ("Roslyn").</p>
<h2>安装</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.CodeAnalysis.CSharp"</span> Version<span class="token operator">=</span><span class="token string">"4.5.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.08,words:325},t:"CodeAnalysis",y:"a"}}],["/dotnet/csharp/roslyn/natasha.html",{loader:()=>a(()=>import("./natasha.html-aLrDq_6J.js"),__vite__mapDeps([840,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>该项目是基于Roslyn的C#动态程序集构建库，使用该库允许开发者动态运行C#代码，方便动态的新增和升级模块和代码，该项目还集成了域管理、插件管理等功能，可以很好的实现隔离，并且提供了完整的错误提示，方便开发者开发与调试。</p>
<p>仓库地址：<a href="https://github.com/dotnetcore/Natasha" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/Natasha</a></p>
<h2>参考资料</h2>
<p>提高程序灵活性和效率的利器：Natasha动态编译库【.Net】：<a href="https://mp.weixin.qq.com/s/0SESUTqF5fN1Y1DoeR9Bag" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/0SESUTqF5fN1Y1DoeR9Bag</a></p>`,r:{minutes:.53,words:159},t:"Natasha",y:"a"}}],["/dotnet/csharp/roslyn/",{loader:()=>a(()=>import("./index.html-5GZKMJ4P.js"),__vite__mapDeps([841,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.Net的开源编译器平台 - Roslyn</p>
<h2>功能</h2>
<ol>
<li>提供了一组丰富的 API，允许开发人员在运行时动态地生成、编译和执行代码。这些 API 分为两类：编译 API 和工作空间 API。编译 API 用于分析和生成代码，工作空间 API 用于与集成开发环境（IDE）进行交互。通过这些 API，开发人员可以构建强大的代码分析和重构工具。</li>
<li>支持对源代码进行静态分析，以便在编译期间检测潜在的代码问题。也支持编写自定义诊断和代码修复，这使得开发人员可以根据自己的需求创建特定的诊断和修复工具。</li>
<li>Roslyn 支持 C## 和 VB.NET 两种编程语言。它提供了一组通用 API，这样两种语言之间共享代码就变得容易。</li>
<li>Roslyn 与 Visual Studio、Visual Studio Code 和其他支持 C## 和 VB.NET 的 IDE 集成很好。</li>
</ol>`,r:{minutes:1.28,words:384},t:"说明",y:"a"}}],["/dotnet/csharp/roslyn/scripting.html",{loader:()=>a(()=>import("./scripting.html-DCMz8vFr.js"),__vite__mapDeps([842,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>有些情况下，需要在程序运行期间动态执行C#代码，比如，将某些经常改变的算法保存在配置文件中，在运行期间从配置文件中读取并执行运算。这时可以使用C#脚本来完成这些工作。</p>
<h2>示例</h2>
<p>使用C#脚本需要引用库Microsoft.CodeAnalysis.CSharp.Scripting</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.CodeAnalysis.CSharp.Scripting"</span> Version<span class="token operator">=</span><span class="token string">"4.5.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.79,words:537},t:"C#脚本库Scripting",y:"a"}}],["/dotnet/csharp/renwutongbu/",{loader:()=>a(()=>import("./index.html-CJl_ymL-.js"),__vite__mapDeps([843,1])),meta:{a:"azrng",d:1698192e6,l:"2023年10月25日",c:["csharp"],g:["无"],o:!0,e:`<h2>技术点</h2>
<ul>
<li>Interlocked</li>
<li>Monitor</li>
<li>SpinLock</li>
<li>WaitHandler</li>
<li>Mutex</li>
<li>Sempaphore</li>
<li>Events</li>
<li>Barrier</li>
<li>ReaderWriterLockSlim</li>
<li>Timer</li>
</ul>
<h2>自旋锁</h2>
<p><a href="https://mp.weixin.qq.com/s/5lh-fhimV0HQv8SX3tInAA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/5lh-fhimV0HQv8SX3tInAA</a> | 自旋锁</p>`,r:{minutes:.31,words:93},t:"说明",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/bendecunchu.html",{loader:()=>a(()=>import("./bendecunchu.html-DTs4seJO.js"),__vite__mapDeps([844,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>AsyncLocal是一个在异步环境中存储和传递状态的类型。它允许你在线程或任务之间共享数据，而不会受到异步上下文切换的影响,用于提供异步操作间的数据共享。在多线程或异步环境中，每个线程或任务可以拥有自己的副本，而不会相互干扰。</p>
<h2>操作</h2>
<h3>进程共享值</h3>
<p>将需要共享的变量放在某一个类的静态属性上</p>
<h3>线程共享值</h3>
<p>使用ThreadStatic来实现一个线程上值的存储。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ThreadStatic</span></span><span class="token punctuation">]</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> _value<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.9,words:1170},t:"本地存储",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/concurrency.html",{loader:()=>a(()=>import("./concurrency.html-B-gpbyxg.js"),__vite__mapDeps([845,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["thread"],o:!0,e:`<h2>介绍</h2>
<p>并发指的是同时执行多个任务或进程，这些任务可能交替进行，每个任务只占用少量时间片。在单个处理器上，实现并发通常采用分时操作系统或者线程技术。在并发环境中，可以同时处理多个任务，不论是通过时间片轮转还在单核处理器上还是在多核处理器上。</p>
<h2>场景</h2>
<ul>
<li>编写快速响应的用户界面：需要并发执行耗时的任务以保证用户界面的响应性</li>
<li>可以处理同时出现的请求：客户端请求并发到达，必须并行处理。</li>
<li>并行编程：将负载划分到多个核心上，可以提高密集计算代码的执行速度。</li>
</ul>
<h2>对比</h2>
<h3>并行和并发</h3>`,r:{minutes:1.24,words:371},t:"并发操作",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/limitingConcurrency.html",{loader:()=>a(()=>import("./limitingConcurrency.html-Dj_lvK1S.js"),__vite__mapDeps([846,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>前言</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// let's say there is a list of 1000+ URLs</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> urls <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"http://google.com"</span><span class="token punctuation">,</span> <span class="token string">"http://yahoo.com"</span><span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// now let's send HTTP requests to each of these URLs in parallel</span>
urls<span class="token punctuation">.</span><span class="token function">AsParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForAll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.75,words:525},t:"限制并发",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/parallel.html",{loader:()=>a(()=>import("./parallel.html-CMgxlJCL.js"),__vite__mapDeps([847,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["thread","plinq","parallel"],o:!0,e:`<h2>概述</h2>
<p>通过编程发挥多核或者多处理器优势来同时执行多个独立的任务的方式称为并行编程，它是多线程这个更宽泛概念下的一个子集，是一种特殊的多线程编程，</p>
<p>在单核计算机上，操作系统会为每个线程时间片(windows系统是20毫秒)来模拟并发执行。在多核计算机上，两个线程可以并行执行(会和机器上其他执行的进程进行竞争)。</p>
<h2>并行场景</h2>
<p>.NET引入的Task Parallel Library(任务并行库，TPL)，动态地扩展并发度，以最有效的方式使用所有可用的处理器。
TPL支持分区工作、支持基于ThreadPool调度、支持取消异步操作、支持状态管理，也支持数据并行、任务并行和流水线Dataflow。</p>`,r:{minutes:9.08,words:2725},t:"并行操作",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/",{loader:()=>a(()=>import("./index.html-CnORlaO8.js"),__vite__mapDeps([848,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["thread"],o:!0,e:`<h2>什么是线程</h2>
<p>线程（Thread）是操作系统能够进行运算调度的最小单位，也是程序中能够并发执行的一段序列。它是进程中的实际运作单位，一个进程中可以包含多个线程，每条线程并行执行不同的任务，这些线程共享进程的资源。严格意义上来说，同一时间可以并行运行的线程数取决于 CPU 的核数。</p>
<p>单线程应用：在进程的独立环境里面只能跑一个新线程，所以该线程拥有独占权。</p>
<h2>什么是多线程</h2>
<p>多线程编程是指使用多个线程同时执行任务。这些线程可能是由操作系统调度的，也可以由开发人员手动创建和管理。在多线程编程中，我们通常需要考虑许多问题，如线程同步、死锁、竞态条件等等</p>`,r:{minutes:29.85,words:8956},t:"说明",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/sharedMemory.html",{loader:()=>a(()=>import("./sharedMemory.html-M9UA6Hn4.js"),__vite__mapDeps([849,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>共享内存</h2>
<p>面向对象编程中，万物都是对象，数据+行为=对象；
多核时代，可并行多个线程，但是受限于资源对象，线程之间存在对共享内存的抢占/等待，实质是多线程调用对象的行为方法，这涉及线程安全线程同步。
假如现在有一个任务，找100000以内的素数的个数，如果用共享内存的方法，代码如下：</p>
<p>可以看到，这些线程共享了sum变量，对sum做sum++操作时必须上锁。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Paralleler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">object</span></span> syncObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Stopwatch</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"共享内存并发模型耗时：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>Elapsed</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShareMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 被[2,x/2]任一数字整除，就不是质数</span>
                        f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">lock</span><span class="token punctuation">(</span>syncObj<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        sum<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// 共享了sum对象，“++”就是调用sum对象的成员方法</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"1-100000内质数的个数是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sum</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.69,words:806},t:"共享内存&Actor",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/sisuo.html",{loader:()=>a(()=>import("./sisuo.html-Dq2lDy9D.js"),__vite__mapDeps([850,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>什么是死锁</h2>
<p>多线程编程的时候，如果涉及到同时读写共享资源数据，就容易产生因争夺系统资源而产生相互等待的现象。</p>
<h2>原理</h2>
<p>当一组进程中的每个进程都在等待某个事件发生，而只有这组进程中的其他进程才能触发该事件，这就称这组进程发生了死锁。</p>
<h2>本质原因</h2>
<ul>
<li>系统资源有限</li>
<li>进程推进顺序不合理</li>
</ul>
<h2>必要条件</h2>
<ul>
<li>互斥： 某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程，其他进程就不能再访问，直到该进程访问结束。</li>
<li>占有且等待： 一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源。</li>
<li>不可抢占： 别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。</li>
<li>循环等待： 存在一个进程链，使得每个进程都占有下一个进程所需的至少一种资源。</li>
</ul>`,r:{minutes:12.61,words:3784},t:"死锁和活锁的发生以及避免",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/threadPool.html",{loader:()=>a(()=>import("./threadPool.html-CVpAntXl.js"),__vite__mapDeps([851,1])),meta:{a:"azrng",d:16996608e5,l:"2023年11月11日",c:["csharp"],g:["thread"],o:!0,e:`<h2>概述</h2>
<p>线程池就是一组预先创建的线程(或者理解为租赁公司，但是并不会在程序启动的时候就创建好所有线程)，可以被重复使用用来执行多个任务，它提供了一些基本方法，如：设置pool中最小/最大线程数量、把要执行的方法排入队列等等。因为线程的创建和销毁需要很大的性能开销，所以线程池可以避免频繁创建和销毁线程，从而减少线程创建和销毁的开销，提高了系统的性能和效率，在windows nt 内核的操作系统中，每个进程都会包含一个线程池，而在net中，也有自己的线程池，是由clr负责管理的。<strong>异步编程默认使用线程池</strong></p>
<p>线程池<strong>初始化是没有线程</strong>的，当应用程序需要一个新的线程时候，就可以从线程池中直接获取一个已经存在的线程，若此处线程池中没有空闲的线程，那么就根据内部算法创建新的线程来处理任务，同样当一个线程使用完毕后并不会立即被销毁，而是放入线程池中等待下一次使用，当线程池内的线程数量达到其预设的最大值，而所有线程都在忙碌，新提交的任务就会被放在任务队列中等待执行，直到有线程完成任务并返回到线程池。</p>`,r:{minutes:17.82,words:5347},t:"线程池",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/threadSync.html",{loader:()=>a(()=>import("./threadSync.html-DB82YesK.js"),__vite__mapDeps([852,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>线程安全</h2>
<p>多个线程访问共享资源的时候，对共享资源的访问会导致数据不一致或者达不到预期的结果。</p>
<h2>同步机制</h2>
<ul>
<li>用于协调和控制多个线程之间执行顺序和互斥访问共享资源</li>
<li>确保线程按照特定顺序执行，避免竟态条件和数据不一致的问题</li>
<li>解决方案：可以使用锁、信号量去解决</li>
</ul>
<h2>原子操作</h2>
<ul>
<li>在执行的过程中不会被中断的操作。不可分割，要不完全执行，要不完全不会执行，没有中间状态</li>
<li>在多线程的环境下，原子操作能够保证数据的一致性和可靠性，避免出现竟态条件和数据竞争问题</li>
</ul>`,r:{minutes:11.9,words:3570},t:"线程安全与同步机制",y:"a"}}],["/dotnet/csharp/wenjianheliu/dotnetliu.html",{loader:()=>a(()=>import("./dotnetliu.html-Dr6zXL3u.js"),__vite__mapDeps([853,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>.Net流的架构主要包含三个概念：后台存储、装饰器以及流适配器。
<ul>
<li>后台存储流和装饰器流仅支持字节处理，适配器提供了处理更高层次的数据，例如文本或者xml</li>
<li>适配器和装饰器都对流进行了封装，但是装饰器是一个流，而适配器本身不是一个流。</li>
</ul>
</li>
<li>流和数组不同，流并不会直接就将数据存储到内存中，流会以每个字节或者每次一块数据的方式按照序列处理数据，所以无论后台存储大小如何，流都只会占用很少的内存。</li>
<li>流不是线程安全的，可以使用静态的SyncChronized方法，该方法接受任何类型的流，并返回一个线程安全的包装器，这个包装器会使用排他锁保证每一次读、写或者查找操作只能有一个线程执行。</li>
</ul>`,r:{minutes:6.49,words:1946},t:"dotNet流",y:"a"}}],["/dotnet/csharp/wenjianheliu/iomoxing.html",{loader:()=>a(()=>import("./iomoxing.html-CIzYjx2O.js"),__vite__mapDeps([854,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>I/O的全称就是input/output
&nbsp;
阻塞io:应用程序中进行在发起io调用后至内核执行io操作返回结果之前，若系统调用的线程一直处于等待状态，则此次io操作为阻塞io。阻塞io简称bio
&nbsp;
非阻塞io：用户进程在发起系统调用时指定为非阻塞，内核接收到请求后，就会立即返回，然后用户进程通过轮询的方式来拉取处理结果。则此次io操作为io模型，非阻塞io简称nio。</p>
`,r:{minutes:.57,words:170},t:"IO模型",y:"a"}}],["/dotnet/csharp/wenjianheliu/lujingwenti.html",{loader:()=>a(()=>import("./lujingwenti.html-VLBQ1X1g.js"),__vite__mapDeps([855,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h4>物理路径</h4>
<p>物理路径的英文全称是：Physical path，它就是指硬盘上文件的路径，比如下面的文件位置表示方法：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>d<span class="token punctuation">:</span>\\wwwroot\\html\\<span class="token class-name">a<span class="token punctuation">.</span>html</span>
d<span class="token punctuation">:</span>\\wwwroot\\html\\photo\\<span class="token class-name">b<span class="token punctuation">.</span>html</span>
d<span class="token punctuation">:</span>\\wwwroot\\html\\photo\\<span class="token class-name">c<span class="token punctuation">.</span>html</span>
d<span class="token punctuation">:</span>\\wwwroot\\html\\photo\\ours\\d<span class="token punctuation">.</span>html
</code></pre></div>`,r:{minutes:2.15,words:645},t:"路径问题",y:"a"}}],["/dotnet/csharp/wenjianheliu/streamkuozhanlei.html",{loader:()=>a(()=>import("./streamkuozhanlei.html-C6MIa9Ph.js"),__vite__mapDeps([856,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 文件流扩展</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StreamExtension</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 文件格式</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _fileFormats <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                <span class="token string">".gif"</span><span class="token punctuation">,</span>
                <span class="token string">"7173"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".jpg"</span><span class="token punctuation">,</span>
                <span class="token string">"255216"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".jpeg"</span><span class="token punctuation">,</span>
                <span class="token string">"255216"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".png"</span><span class="token punctuation">,</span>
                <span class="token string">"13780"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".bmp"</span><span class="token punctuation">,</span>
                <span class="token string">"6677"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".swf"</span><span class="token punctuation">,</span>
                <span class="token string">"6787"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".flv"</span><span class="token punctuation">,</span>
                <span class="token string">"7076"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".wma"</span><span class="token punctuation">,</span>
                <span class="token string">"4838"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".wav"</span><span class="token punctuation">,</span>
                <span class="token string">"8273"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".amr"</span><span class="token punctuation">,</span>
                <span class="token string">"3533"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".mp4"</span><span class="token punctuation">,</span>
                <span class="token string">"00"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".mp3"</span><span class="token punctuation">,</span>
                <span class="token string">"255251"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".pdf"</span><span class="token punctuation">,</span>
                <span class="token string">"3780"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".txt"</span><span class="token punctuation">,</span>
                <span class="token string">"12334"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".zip"</span><span class="token punctuation">,</span>
                <span class="token string">"8297"</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 内容后缀名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _contentTypeExtensionsMapping <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
                <span class="token string">".gif"</span><span class="token punctuation">,</span>
                <span class="token string">"image/gif"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".jpg"</span><span class="token punctuation">,</span>
                <span class="token string">"image/jpg"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".jpeg"</span><span class="token punctuation">,</span>
                <span class="token string">"image/jpeg"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".png"</span><span class="token punctuation">,</span>
                <span class="token string">"image/png"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".bmp"</span><span class="token punctuation">,</span>
                <span class="token string">"application/x-bmp"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".mp3"</span><span class="token punctuation">,</span>
                <span class="token string">"audio/mp3"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".wma"</span><span class="token punctuation">,</span>
                <span class="token string">"audio/x-ms-wma"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".wav"</span><span class="token punctuation">,</span>
                <span class="token string">"audio/wav"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".amr"</span><span class="token punctuation">,</span>
                <span class="token string">"audio/amr"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".mp4"</span><span class="token punctuation">,</span>
                <span class="token string">"video/mpeg4"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".xlsx"</span><span class="token punctuation">,</span>
                <span class="token string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".pdf"</span><span class="token punctuation">,</span>
                <span class="token string">"application/pdf"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".txt"</span><span class="token punctuation">,</span>
                <span class="token string">"text/plain"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".doc"</span><span class="token punctuation">,</span>
                <span class="token string">"application/msword"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".xls"</span><span class="token punctuation">,</span>
                <span class="token string">"application/vnd.ms-excel"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".zip"</span><span class="token punctuation">,</span>
                <span class="token string">"aplication/zip"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".csv"</span><span class="token punctuation">,</span>
                <span class="token string">"text/csv"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".ppt"</span><span class="token punctuation">,</span>
                <span class="token string">"application/vnd.ms-powerpoint"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".pptx"</span><span class="token punctuation">,</span>
                <span class="token string">"application/vnd.openxmlformats-officedocument.presentationml.presentation"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">".docx"</span><span class="token punctuation">,</span>
                <span class="token string">"application/vnd.openxmlformats-officedocument.wordprocessingml.document"</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取字节数组文件后缀</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字节数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFileSuffix</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileCode <span class="token operator">=</span> <span class="token function">GetFileCode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> _fileFormats<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>fileCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Key<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>_contentTypeExtensionsMapping<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取字节数组内容类型</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字节数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetContentType</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileCode <span class="token operator">=</span> <span class="token function">GetFileCode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> extensions <span class="token operator">=</span> _fileFormats<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>fileCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Key<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>_contentTypeExtensionsMapping<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>extensions<span class="token punctuation">)</span>
            <span class="token punctuation">?</span> <span class="token keyword">null</span>
            <span class="token punctuation">:</span> _contentTypeExtensionsMapping<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Key <span class="token operator">==</span> extensions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取随机文件名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字节数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRandomFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileCode <span class="token operator">=</span> <span class="token function">GetFileCode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">str0</span><span class="token punctuation">:</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">str1</span><span class="token punctuation">:</span> _fileFormats<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>fileCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取文件编码</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字节数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFileCode</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span> <span class="token operator">+</span> bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将字节数组转为流</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字节数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Stream</span> <span class="token function">BytesToStream</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将流转字节数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stream<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">StreamToBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stream <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将流转字节数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stream<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">StreamToBytesAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stream <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> stream<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定文件转流</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Stream</span> <span class="token function">FileToStream</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fileStream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        fileStream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定文件转流</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Stream<span class="token punctuation">&gt;</span></span> <span class="token function">FileToStreamAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fileStream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> fileStream<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定文件转字节数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">FileToByte</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fileStream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        fileStream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定文件转字节数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">FileToByteAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fileStream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> fileStream<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定流保存为文件</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stream<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StreamToFile</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> binaryWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        binaryWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将指定流保存为文件</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stream<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">StreamToFileAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Stream</span> stream<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>stream<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> stream<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> binaryWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        binaryWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 将字节数据保存为文件</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bytes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ByteToFile</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> binaryWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryWriter</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        binaryWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.89,words:867},t:"Stream扩展类",y:"a"}}],["/dotnet/csharp/wenjianheliu/wenjianyumulucaozuo.html",{loader:()=>a(()=>import("./wenjianyumulucaozuo.html-DHI2YiUr.js"),__vite__mapDeps([857,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>System.IO命名空间中有一些可以进行文件和目录操作（例如复制和移动、创建目录，以及设置文件的属性和权限）的实用类型。</p>
<h2>操作</h2>
<h3>File</h3>
<p>获取文件的信息</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">"C:\\\\Users\\\\username\\\\Documents\\\\example.txt"</span><span class="token punctuation">;</span>
<span class="token comment">// 获取文件大小（字节）</span>
<span class="token class-name"><span class="token keyword">long</span></span> fileSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件大小（字节）："</span> <span class="token operator">+</span> fileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件创建时间</span>
<span class="token class-name">DateTime</span> creationTime <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetCreationTime</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件创建时间："</span> <span class="token operator">+</span> creationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件最后修改时间</span>
<span class="token class-name">DateTime</span> lastWriteTime <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetLastWriteTime</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件最后修改时间："</span> <span class="token operator">+</span> lastWriteTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件属性</span>
<span class="token class-name">FileAttributes</span> attributes <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetAttributes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"文件属性："</span> <span class="token operator">+</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.1,words:2430},t:"文件操作",y:"a"}}],["/dotnet/csharp/windowfuwu/netchuangjianwindowsfuwu.html",{loader:()=>a(()=>import("./netchuangjianwindowsfuwu.html-Ccm47rYG.js"),__vite__mapDeps([858,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>以vs2017为例
<img src="/common/1609838962303-46369c25-d013-4428-9458-1f99dc08e0ac.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1609838962309-5ba324a1-e654-4818-9ba0-f9e64defef68.png" alt="image.png" loading="lazy">
Autolog&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是否自动写入系统的日志文件
CanHandlePowerEvent&nbsp;&nbsp;&nbsp;&nbsp;服务时候接受电源事件
CanPauseAndContinue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务是否接受暂停或继续运行的请求
CanShutdown 服务是否在运行它的计算机关闭时收到通知，以便能够调用 OnShutDown 过程
CanStop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务是否接受停止运行的请求
ServiceName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务名称
三、如何编辑myService源码
<img src="/common/1609838962308-99fe951a-7526-41cc-918e-c196d897729f.png" alt="image.png" loading="lazy">
点击代码视图然后添加代码
默认方法：
<img src="/common/1609838962305-3b4f70d9-c959-45dc-8829-30014948830b.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1609838962320-48d0a12d-2766-47c7-b18b-f33ec8fb6009.png" alt="image.png" loading="lazy">
四、安装程序
切换到myService的设计界面，右键选择“添加安装程序”
<img src="/common/1609838962318-60eadfd9-8bad-40ef-9c0e-5fcded0c14bf.png" alt="image.png" loading="lazy">
这时候项目中就会添加一个新类ProjectInstaller.cs和两个组件ServiceProcessInstaller 和 ServiceInstaller。
<img src="/common/1609838962343-68be279e-acbe-473b-af78-699c51571c16.png" alt="image.png" loading="lazy">
&nbsp;
<img src="/common/1609838962339-f90d56bd-af3f-421f-947e-afd749e2e100.png" alt="image.png" loading="lazy">
然后选择项目右键生成项目，不能通过F5直接运行项目
五、安装卸载服务
选择 VS组件 “Visual Studio命令提示(2010)” 工具，并以“管理员身份运行"（win7、win8系统下）。
<strong>注意:这里必须选择“以管理员身份运行”，否则会报错。</strong>
从命令行运行 Installutil.exe 目录 &nbsp;命令，以项目中的已编译可执行文件所在的目录作为参数，安装服务：</p>`,r:{minutes:2.01,words:604},t:"net创建windows服务",y:"a"}}],["/dotnet/csharp/windowfuwu/netcorechuangjianwindowsfuwu.html",{loader:()=>a(()=>import("./netcorechuangjianwindowsfuwu.html-QKHu8m6m.js"),__vite__mapDeps([859,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>使用.NET Core创建Windows服务
使用微软推荐方式
使用Topshelf方式
&nbsp;
&nbsp;
<strong>安装步骤</strong>
这里首先你要确保你已经安装了.NET Core 3.0或以上版本。在我编写这篇文章的时候， .NET Core 3.1刚刚发布，Visual Studio应该会提示你升级到最新版本。但是如果你想要在.NET Core 2.x项目中使用这个方式，应该是行不通的。
如果你喜欢使用命令行创建项目，你就需要使用工作器(worker)类型创建项目：
dotnet new worker
如果你是一个和我一样喜欢使用Visual Studio的开发人员，那么你可以在Visual Studio中使用项目模板完成相同的功能。
<img src="/common/1609838929172-9922ab7a-6416-4f10-8a28-f704b4f495f4.png" alt="image.png" loading="lazy">
这样做将创建出一个包含两个文件的项目。其中Program.cs文件是应用的启动“引导程序”。另外一个文件是worker.cs文件，在这个文件中，你可以编写你的服务逻辑。
这看起来应该是相当的容易，但是为这个程序添加额外的并行后台服务，你还需要添加一个类，并让它继承BackgroundService类:</p>`,r:{minutes:4.65,words:1394},t:"netcore创建windows服务",y:"a"}}],["/dotnet/csharp/windowfuwu/windowfuwu.html",{loader:()=>a(()=>import("./windowfuwu.html-BhVhgi9V.js"),__vite__mapDeps([860,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<p>一、什么是windows服务？
Microsoft Windows 服务（即，以前的 NT服务）使您能够创建在它们自己的 Windows 会话中可长时间运行的可执行应用程序。这些服务可以在计算机启动时自动启动，可以暂停和重新启动而且不显示任何用户界面。这使服务非常适合在服务器上使用，或任何时候，为了不影响在同一台计算机上工作的其他用户，需要长时间运行功能时使用。还可以在不同于登录用户的特定用户帐户或默认计算机帐户的安全上下文中运行服务。
二、现在新建一个服务叫做MyWinService，如何操作这个服务？
&nbsp;安装.bat：
&nbsp;sc create MyWinService binPath= "%~dp0WindowsService.exe" start= auto
net start MyWinService
pause
&nbsp;
&nbsp;启动.bat
net start MyWinService
pause
&nbsp;
&nbsp; 停止.bat
net stop MyWinService
&nbsp; pause
&nbsp;
&nbsp;
&nbsp;&nbsp; 卸载.bat
net stop MyWinService
&nbsp; sc delete MyWinService binPath= "%~dp0JDWindowsService.exe" start= auto
&nbsp;pause
&nbsp;
&nbsp;
&nbsp; 重启.bat
net stop MyWinService
net start MyWinService
&nbsp; pause</p>`,r:{minutes:.91,words:273},t:"Window服务",y:"a"}}],["/dotnet/csharp/yunsuanfuhebiaodashi/diedaiyugou.html",{loader:()=>a(()=>import("./diedaiyugou.html-CXUxI290.js"),__vite__mapDeps([861,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,r:{minutes:.09,words:28},t:"迭代语句",y:"a"}}],["/dotnet/csharp/yunsuanfuhebiaodashi/switch.html",{loader:()=>a(()=>import("./switch.html-RGB5V9Ef.js"),__vite__mapDeps([862,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h3>范围判断</h3>
<p>老版本写法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> num <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name"><span class="token keyword">int</span></span> b <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.3,words:89},t:"switch",y:"a"}}],["/dotnet/csharp/zhenduan/stopwatchlei.html",{loader:()=>a(()=>import("./stopwatchlei.html-BjgxP1VK.js"),__vite__mapDeps([863,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>提供了一种方便的机制来测量运行时间，使用了操作系统和硬件提供的最高分辨率机制，通常少于1毫秒。</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 开始监视代码运行时间</span>
<span class="token comment">//开始计时</span>
Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//终止计时</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回消耗的时间间隔</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"总毫秒数"</span> <span class="token operator">+</span> stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回总毫秒数</span>

<span class="token class-name"><span class="token keyword">var</span></span> elapsed <span class="token operator">=</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">;</span><span class="token comment">//获取当前实例测量得出的总运行时间。</span>
<span class="token class-name"><span class="token keyword">var</span></span> seconds <span class="token operator">=</span> elapsed<span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>  <span class="token comment">//  总秒数</span>
<span class="token class-name"><span class="token keyword">var</span></span> milliseconds <span class="token operator">=</span> elapsed<span class="token punctuation">.</span>TotalMilliseconds<span class="token punctuation">;</span>  <span class="token comment">//  总毫秒数</span>
</code></pre></div>`,r:{minutes:.55,words:164},t:"Stopwatch类",y:"a"}}],["/dotnet/csharp/zhenduan/tiaojianbianyi.html",{loader:()=>a(()=>import("./tiaojianbianyi.html-rEt2jx0p.js"),__vite__mapDeps([864,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>使用C#中的预处理指令可以有条件地编译任意一部分代码。预处理指令是一类特殊的编译器指令，它们都以#符号开头（和其他的C#结构不同，它必须出现在一个独立行中）。预处理指令中和条件编译相关的指令有：#if、#else、#endif和#elif。</p>
<h2>优点</h2>
<p>条件编译有一些静态变量所不具备的应用场景，比如</p>
<ul>
<li>有条件地包含某个属性</li>
<li>改变变量的声明类型</li>
<li>在using指令中切换命名空间或者类型名</li>
</ul>
`,r:{minutes:.6,words:181},t:"条件编译",y:"a"}}],["/dotnet/daimafenxi/daimazhiliangguize/",{loader:()=>a(()=>import("./index.html-OIQbldzG.js"),__vite__mapDeps([865,1])),meta:{a:"azrng",d:169344e7,l:"2023年8月31日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>微软推荐了代码质量规则和.Net API使用规则，包括最重要的FxCop规则，使用.net编译器平台(Roslyn)作为分析器实现。这些分析程序检查代码的安全性、性能和设计等问题。</p>
<h2>规则</h2>
<h3>快速上手</h3>
<p>在解决方案的根目录创建DesktopLint.ruleset文件，然后配置规则，并且还需要在项目文件中配置(.csproj结尾的文件中配置)</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>CodeAnalysisRuleSet<span class="token operator">&gt;</span>$<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MSBuild</span></span><span class="token punctuation">]</span><span class="token punctuation">::</span><span class="token function">GetPathOfFileAbove</span><span class="token punctuation">(</span>'DesktopLint<span class="token punctuation">.</span>ruleset'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>CodeAnalysisRuleSet<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.98,words:293},t:"说明",y:"a"}}],["/dotnet/debugging/jibendiaoshigongju/diyicizhihangmanxingnengfenxi.html",{loader:()=>a(()=>import("./diyicizhihangmanxingnengfenxi.html-CydsJkVc.js"),__vite__mapDeps([866,1])),meta:{a:"azrng",d:1695168e6,l:"2023年9月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>新建一个ASP.NET Core Web API项目，使用命令行方式启动，连续发送多次请求。
第一次执行（116ms）比后面的（2ms）慢了很多。</p>
<h2>示例代码</h2>
<p>为了更好定位Web API执行情况，示例Controller代码如下：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalMilliseconds <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>TraceIdentifier<span class="token punctuation">;</span>

    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.86,words:858},t:"第一次执行慢性能分析",y:"a"}}],["/dotnet/debugging/jibendiaoshigongju/jibendiaoshigongju.html",{loader:()=>a(()=>import("./jibendiaoshigongju.html-DuiHcQoe.js"),__vite__mapDeps([867,1])),meta:{a:"azrng",d:1695168e6,l:"2023年9月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>在调试软件时，工具非常重要。获取正确的工具，然后再调试时提取正确的信息。根据获取的正确的错误信息，可以找到问题的根源所在。找到问题根源所在，你就能够解决该错误了。
你将看到我认为最基本的解决在C## .NET 中错误问题的工具的列表。这些将帮助你找到任何难题的根本原因并加以解决。
除了代码中的常见问题外，一下工具还可以处理各种问题类型，包括：</p>
<ul>
<li>性能问题</li>
<li>内存问题（GC压力和内存泄漏）</li>
<li>第三方引用库问题</li>
<li>生产中的问题</li>
<li>网络问题</li>
</ul>
<p>高级调试，windbg、clrprofiler、dotTrace、dotMemory、dotnet-dump、lldb</p>`,r:{minutes:12.13,words:3639},t:"基本调试工具",y:"a"}}],["/dotnet/debugging/wentifenxi/neicunfenxi.html",{loader:()=>a(()=>import("./neicunfenxi.html-DtqdJDNT.js"),__vite__mapDeps([868,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>dotnet-dump分析死循环</h2>
<p>资料：https://mp.weixin.qq.com/s/RXz5jdFbArHRYcNv1aTWUA</p>
<h2>资料</h2>
<p>内存分析工具dot-Memory：<a href="https://www.cnblogs.com/qinhuan/p/13913460.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/qinhuan/p/13913460.html</a></p>
`,r:{minutes:.18,words:53},t:"内存分析",y:"a"}}],["/dotnet/maui/blazorhybrid/diaoshi.html",{loader:()=>a(()=>import("./diaoshi.html-B6c2W_Rw.js"),__vite__mapDeps([869,1])),meta:{a:"azrng",d:1666656e6,l:"2022年10月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>安卓</h2>
<p>edge://inspect/#devices</p>
`,r:{minutes:.1,words:31},t:"调试",y:"a"}}],["/dotnet/maui/blazorhybrid/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-Ci53ZdaU.js"),__vite__mapDeps([870,1])),meta:{a:"azrng",d:16753824e5,l:"2023年2月3日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Blazor Hybrid 使开发人员能够将桌面和移动本机客户端框架与 .NET 和 Blazor 结合使用。
在 Blazor Hybrid 应用中，Razor 组件在设备上是本机运行的。 这些组件通过本地互操作通道呈现到嵌入式 Web 视图控件。 组件不在浏览器中运行，并且不涉及 WebAssembly。 Razor 组件可快速加载和执行代码，这些组件可通过 .NET 平台完全访问设备的本机功能。</p>
<h2><img src="/common/1666671450961-93b3e30b-f0eb-47e5-8899-58937f66e76e.png" alt="d2ffcb09b4a60cc3f6824d511630fa90_blazor-hybrid.png" loading="lazy">文件介绍</h2>`,r:{minutes:3.09,words:927},t:"介绍",y:"a"}}],["/dotnet/maui/caozuo/quanjuyichangchuli.html",{loader:()=>a(()=>import("./quanjuyichangchuli.html-BYbEFw5u.js"),__vite__mapDeps([871,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2></h2>
<p>同步拦截：<a href="https://mp.weixin.qq.com/s/FEuzwdmM6HcjWw0EsOW--Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/FEuzwdmM6HcjWw0EsOW--Q</a>
异步拦截：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MTcyODU5Mg==&amp;mid=2247483722&amp;idx=1&amp;sn=df9b2db7b2f3e6f01d6ef5f6e49d6d10&amp;chksm=ce13fb75f964726300985f8977370412ce1bf0618f6fd48113a60e4f73625e4d5c1783d2a583&amp;cur_album_id=2809857279531171846&amp;scene=189#wechat_redirect" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=Mzg2MTcyODU5Mg==&amp;mid=2247483722&amp;idx=1&amp;sn=df9b2db7b2f3e6f01d6ef5f6e49d6d10&amp;chksm=ce13fb75f964726300985f8977370412ce1bf0618f6fd48113a60e4f73625e4d5c1783d2a583&amp;cur_album_id=2809857279531171846&amp;scene=189#wechat_redirect</a></p>`,r:{minutes:.26,words:78},t:"全局异常处理",y:"a"}}],["/dotnet/maui/caozuo/shiyongautofac.html",{loader:()=>a(()=>import("./shiyongautofac.html-I5r95LIs.js"),__vite__mapDeps([872,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Autofac 是一个开源的控制反转容器，通过将.NET 程序的控制反转容器替换为 Autofac，可以实现例如属性注入、面向切面编程等功能。</p>
<h2>操作</h2>
<h3>引用包</h3>
<p>从 NuGet 引用 Autofac.Extensions.DependencyInjection包。</p>
<h3>使用容器</h3>
<p>打开MauiProgram.cs文件，在<strong>所有代码最后</strong>、return builder.Build();<strong>之前</strong>，通过ConfigureContainer来使用AutofacServiceProviderFactory来构建使用 Autofac 容器：</p>`,r:{minutes:1.13,words:340},t:"使用Autofac",y:"a"}}],["/dotnet/maui/fabu/anzhuofabu.html",{loader:()=>a(()=>import("./anzhuofabu.html-DIhfpjs4.js"),__vite__mapDeps([873,1])),meta:{a:"azrng",d:16663968e5,l:"2022年10月22日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>将MAUI程序生成apk包来玩。</p>
<blockquote>
<p>切记项目目录不要带中文</p>
</blockquote>
<h2>程序包设置</h2>
<p>每个应用都应该指定唯一的包标识符和版本，配置在项目的.csproj文件中</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 显示名 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>ApplicationTitle<span class="token operator">&gt;</span>MauiAppBlazor<span class="token operator">&lt;</span><span class="token operator">/</span>ApplicationTitle<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> App 标识 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>ApplicationId<span class="token operator">&gt;</span>com<span class="token punctuation">.</span>companyname<span class="token punctuation">.</span>mauiappblazor<span class="token operator">&lt;</span><span class="token operator">/</span>ApplicationId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>ApplicationIdGuid<span class="token operator">&gt;</span>48CF021D<span class="token operator">-</span>51ED<span class="token operator">-</span>47B9<span class="token operator">-</span>B8BC<span class="token operator">-</span>E6005BE37A8A<span class="token operator">&lt;</span><span class="token operator">/</span>ApplicationIdGuid<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 版本 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>ApplicationDisplayVersion<span class="token operator">&gt;</span><span class="token number">1.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>ApplicationDisplayVersion<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>ApplicationVersion<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>ApplicationVersion<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.38,words:714},t:"安卓发布",y:"a"}}],["/dotnet/maui/fabu/pingguobushu.html",{loader:()=>a(()=>import("./pingguobushu.html-CVv_vOKD.js"),__vite__mapDeps([874,1])),meta:{a:"azrng",d:16682112e5,l:"2022年11月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>TestFlight</h2>
<p>使用TestFlight App帮助开发者测试Beta版的App。</p>
`,r:{minutes:.15,words:44},t:"苹果部署",y:"a"}}],["/dotnet/maui/fabu/windowsfabu.html",{loader:()=>a(()=>import("./windowsfabu.html-Di3uWuNy.js"),__vite__mapDeps([875,1])),meta:{a:"azrng",d:1677456e6,l:"2023年2月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>将应用打包到MSIX包中(目前仅允许该方式)。</p>
<h2>创建签名证书</h2>
<blockquote>
<p>用来对MSIX包进行签名</p>
</blockquote>
<p>1.导航到项目目录下，然后使用终端执行命令来生成自签名证书</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>New<span class="token operator">-</span>SelfSignedCertificate <span class="token operator">-</span>Type Custom \` <span class="token operator">-</span>Subject <span class="token string">"CN=azrng"</span> \`  <span class="token operator">-</span>KeyUsage DigitalSignature \`  <span class="token operator">-</span>FriendlyName <span class="token string">"我的临时测试证书"</span> \` <span class="token operator">-</span>CertStoreLocation <span class="token string">"Cert:\\CurrentUser\\My"</span> \` <span class="token operator">-</span>TextExtension @<span class="token punctuation">(</span><span class="token string">"2.5.29.37={text}1.3.6.1.5.5.7.3.3"</span><span class="token punctuation">,</span> <span class="token string">"2.5.29.19={text}"</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:3.18,words:953},t:"Windows发布",y:"a"}}],["/dotnet/maui/fabu/windowsfabuexe.html",{loader:()=>a(()=>import("./windowsfabuexe.html-BSXltLwS.js"),__vite__mapDeps([876,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["dotNET"],g:["无"],o:!0,e:`<p>修改两项设置就可以做到（在主程序的工程文件csproj），增加如下两个配置（使用该配置后就不再支持anycpu编译，所以我们做一个条件编译）：</p>
<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token comment">&lt;!--这个方案可以让你的Maui在Windows下生成的exe做回自己--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span> <span class="token attr-name">Condition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>$(Platform)' != 'AnyCPU' And $(TargetFramework.Contains('-windows'))<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- Unpack : SelfContainedDeployment for winui3 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WindowsPackageType</span><span class="token punctuation">&gt;</span></span>None<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WindowsPackageType</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WindowsAppSDKSelfContained</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WindowsAppSDKSelfContained</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,r:{minutes:.41,words:122},t:"windows发布exe",y:"a"}}],["/dotnet/maui/rumenxuexi/huanjingzhunbei.html",{loader:()=>a(()=>import("./huanjingzhunbei.html--EiaHp10.js"),__vite__mapDeps([877,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>VS准备</h2>
<p>首先确保安装了最新版本的VS，并且安装了Mobile development with .NET工作负载。</p>
<h2>硬件加速</h2>
<p>官网资料：<a href="https://learn.microsoft.com/zh-cn/dotnet/maui/android/emulator/hardware-acceleration" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/maui/android/emulator/hardware-acceleration</a>
启用硬件加速才能最大化 Android 模拟器性能，我们可以启用Hyper-V，在 Windows 搜索框中输入“Windows 功能”，然后在搜索结果中选择“打开或关闭 Windows 功能” 。在“Windows 功能”对话框中，启用“Hyper-V”和“Windows 虚拟机监控程序平台” ：
<img src="/common/1666363963944-d33ef048-7fc4-4002-b620-8a4356a74e98.png" alt="image.png" loading="lazy">
以及
<img src="/common/1666363980533-9c1a33b8-0571-4236-ba59-2d922f76c5e9.png" alt="image.png" loading="lazy">
启用之后，重新启动计算机</p>`,r:{minutes:.97,words:290},t:"环境准备",y:"a"}}],["/dotnet/maui/rumenxuexi/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-C1_Xv4Ah.js"),__vite__mapDeps([878,1])),meta:{a:"azrng",d:16793568e5,l:"2023年3月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>官方文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/maui/user-interface/layouts/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/maui/user-interface/layouts/</a></p>
<h2>基本语法</h2>
<h3>标签(Lable)</h3>
<ul>
<li>Text：设置文本值</li>
<li>FontSize：设置字体大小</li>
<li>VerticalOptions：垂直对其方式</li>
<li>HorizontalOptions：水平对其方式</li>
<li>FontAttributes：设置字体属性，如粗体</li>
</ul>`,r:{minutes:15.52,words:4655},t:"基础知识",y:"a"}}],["/dotnet/maui/rumenxuexi/qiantaichuangjianuihedaimachuangjianui.html",{loader:()=>a(()=>import("./qiantaichuangjianuihedaimachuangjianui.html-78ZlfQ9D.js"),__vite__mapDeps([879,1])),meta:{a:"azrng",d:16789248e5,l:"2023年3月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>关于UI可以通过XAML来创建也可以通过c#代码来创建</p>
<h2>操作</h2>
<h3>代码创建</h3>
<p>在该页面的代码后置文件，比如LoginPage.xaml.cs中编写下面的代码来创建一个登录界面</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">LoginPage</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ContentPage</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Button</span> _loginButton<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">VerticalStackLayout</span> _layout<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//InitializeComponent();</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>BackgroundColor <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">FromArgb</span><span class="token punctuation">(</span><span class="token string">"512bdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        _layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">VerticalStackLayout</span>
        <span class="token punctuation">{</span>
            Margin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thickness</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Padding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thickness</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Children <span class="token operator">=</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> <span class="token string">"请登录"</span><span class="token punctuation">,</span> FontSize <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> TextColor <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">FromRgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> TextColor <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">FromRgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Entry</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span> TextColor <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">FromRgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Entry</span> <span class="token punctuation">{</span> IsPassword <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        _loginButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> <span class="token string">"登录"</span><span class="token punctuation">,</span> BackgroundColor <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">FromRgb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _layout<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_loginButton<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Content <span class="token operator">=</span> _layout<span class="token punctuation">;</span>

        _loginButton<span class="token punctuation">.</span>Clicked <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Clicked !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.35,words:405},t:"前台创建UI和代码创建UI",y:"a"}}],["/dotnet/maui/rumenxuexi/shujubangding.html",{loader:()=>a(()=>import("./shujubangding.html-MwWQPAZY.js"),__vite__mapDeps([880,1])),meta:{a:"azrng",d:16789248e5,l:"2023年3月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>点击按钮绑定数据到文本标签</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Label</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span>
    HorizontalTextAlignment<span class="token operator">=</span><span class="token string">"Center"</span>
    Text<span class="token operator">=</span><span class="token string">"{Binding ShiCiContent}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Label<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">Button</span> Text<span class="token operator">=</span><span class="token string">"加载诗词"</span> Command<span class="token operator">=</span><span class="token string">"{Binding LoadShiCiCommand}"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.83,words:249},t:"数据绑定",y:"a"}}],["/dotnet/maui/rumenxuexi/xiangmukuangjiajieshao.html",{loader:()=>a(()=>import("./xiangmukuangjiajieshao.html-D8N_qBHf.js"),__vite__mapDeps([881,1])),meta:{a:"azrng",d:16789248e5,l:"2023年3月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>MauiProgram.cs文件包含用于创建和配置应用程序对象<strong>的</strong>代码。</li>
<li>提供 UI 资源并为应用程序创建初始窗口的<strong>App.xaml</strong>和App.xaml.cs<strong>文件。</strong></li>
<li>AppShell.xaml和<strong>AppShell.xaml.cs</strong>文件指定应用程序的初始页面并处理导航路由页面的注册**。**</li>
<li>MainPage.xaml和<strong>MainPage.xaml.cs</strong>文件定义默认显示在初始窗口中的页面的布局和 UI 逻辑**。**</li>
</ul>`,r:{minutes:.44,words:131},t:"项目框架介绍",y:"a"}}],["/dotnet/mobanyinqing/razor/microsoft_aspnetcore_mvc_razor.html",{loader:()=>a(()=>import("./microsoft_aspnetcore_mvc_razor.html-CL-nBgq4.js"),__vite__mapDeps([882,1])),meta:{a:"azrng",d:16884288e5,l:"2023年7月4日",c:["dotNET"],g:["无"],o:!0,e:`<p>该包不更新了，更新的是另一个叫做：Microsoft.AspNetCore.Mvc.Razor.Extensions</p>
`,r:{minutes:.14,words:41},t:"Microsoft.AspNetCore.Mvc.Razor",y:"a"}}],["/dotnet/mobanyinqing/razor/razorengine.html",{loader:()=>a(()=>import("./razorengine.html-DbEOmo5I.js"),__vite__mapDeps([883,1])),meta:{a:"azrng",d:16756416e5,l:"2023年2月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>RazorEngine 是基于 Microsoft 的 Razor 解析引擎构建的模板引擎，允许您使用 Razor 语法构建动态模板。</p>
<p><strong>注意：目前该包已经不更新</strong></p>
<h2>原理</h2>
<p>.Net在编译的时候会把.cshtml文件生成一个动态程序集，每次调用，就会每次生成一个不重复的动态程序集，通过设置模板key来实现一次编译，下次会使用缓存，不会生成新的动态程序集。
如果cshtml文件发生了修改，那么还调用缓存的话，那么就不合适了，所以可以将模板key设置为动态的。</p>
<ul>
<li>根据文件名+修改时间</li>
<li>文件的MD5值作为模板key</li>
</ul>`,r:{minutes:3.56,words:1069},t:"RazorEngine",y:"a"}}],["/dotnet/mobanyinqing/razor/razorlight.html",{loader:()=>a(()=>import("./razorlight.html-CghhONge.js"),__vite__mapDeps([884,1])),meta:{a:"azrng",d:16884288e5,l:"2023年7月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>在ASP.NET MVC 之外的 .NET Core使用 Razor 从字符串/文件/嵌入式资源构建模板。</p>
<p>包下载量：9,180,730</p>
<h2>操作</h2>
<blockquote>
<p>本文示例环境：VS2022、.Net6</p>
</blockquote>
<p>每个模板都必须有一个templateKey与之关联的，因此您可以在下次渲染相同的模板而无需重新编译。
引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"RazorLight"</span> Version<span class="token operator">=</span><span class="token string">"2.0.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.6,words:779},t:"RazorLight",y:"a"}}],["/dotnet/mobanyinqing/razor/",{loader:()=>a(()=>import("./index.html-jClqvvOR.js"),__vite__mapDeps([885,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Razor是一个用于将基于.NET的代码嵌入到网页中的标记语法。 Razor语法由 Razor 标记、C#代码 和 HTML 组成。</p>
<h2>常用组件</h2>
<ul>
<li>RazorEngine</li>
<li>RazorEngine.NetCore</li>
<li>Microsoft.AspNetCore.Mvc.Razor</li>
<li>RazorLight</li>
</ul>
<h2>资料</h2>
<p>Razor语法参考：<a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor?view=aspnetcore-6.0</a></p>`,r:{minutes:.31,words:93},t:"说明",y:"a"}}],["/dotnet/nuget/siyoubushu/baoguanlifuwubaget.html",{loader:()=>a(()=>import("./baoguanlifuwubaget.html-wx8V1MvP.js"),__vite__mapDeps([886,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. 介绍</h2>
<p>BaGet是一个轻量级的包管理服务。有些时候公司或者个人不希望某一些包进行公开，那么就需要使用私有的包管理服务程序，该服务是用.netcore进行编写的(感谢开发者为社区做出的共享)</p>
<blockquote>
<p>Github：<a href="https://github.com/loic-sharma/BaGet" target="_blank" rel="noopener noreferrer">https://github.com/loic-sharma/BaGet</a>
官网：<a href="https://loic-sharma.github.io/BaGet/" target="_blank" rel="noopener noreferrer">https://loic-sharma.github.io/BaGet/</a></p>
</blockquote>`,r:{minutes:1.72,words:515},t:"包管理服务BaGet",y:"a"}}],["/dotnet/nuget/siyoubushu/",{loader:()=>a(()=>import("./index.html-CvOy_SXD.js"),__vite__mapDeps([887,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Nexus</h2>
<p>Nexus oss仓库管理平台搭建 Nexus是一款仓库管理工具,支持Npm,bower,maven,nuget,apt,yum甚至docker,helm等各种仓库</p>
<p>搭建过程文章：<a href="http://www.taodudu.cc/news/show-1745525.html" target="_blank" rel="noopener noreferrer">http://www.taodudu.cc/news/show-1745525.html</a></p>
<p>Nexus下建nuget私有库：https://www.cnblogs.com/fzxk/articles/17040309.html</p>`,r:{minutes:.4,words:120},t:"说明",y:"a"}}],["/dotnet/server/diagnostics/caozuo.html",{loader:()=>a(()=>import("./caozuo.html-DfljOfSN.js"),__vite__mapDeps([888,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>ActivityTraceId</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 生成可能唯一的traceid</span>
<span class="token class-name"><span class="token keyword">var</span></span> traceId <span class="token operator">=</span> ActivityTraceId<span class="token punctuation">.</span><span class="token function">CreateRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToHexString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.14,words:41},t:"操作",y:"a"}}],["/dotnet/server/diagnostics/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-AT3GAGqz.js"),__vite__mapDeps([889,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>关于DiagnosticSource它本身是一个基于发布订阅模式的工作模式，由于它本身的实现方式是异步的，所以不仅仅可以把它用到日志上，还可以用它实现异步操作，或者用它简化实现发布订阅的功能。DiagnosticSource本身是一个抽象类，我们最常用到的是它的子类DiagnosticListener，通过DiagnosticSource的Write方法实现发布一条有具体名称的消息，然后通过IObserver去订阅消息。DiagnosticListener可以实现不同的实例，每个实例可以有自己的名称，每个实例还可以发布不同名称的消息，好比一个在写代码的时候我们可以定义多个程序集，一个程序集下面可以包含多个命名空间。</p>`,r:{minutes:6.88,words:2063},t:"概述",y:"a"}}],["/dotnet/server/kestrel/cuowuchuli.html",{loader:()=>a(()=>import("./cuowuchuli.html-Ca-sA8aM.js"),__vite__mapDeps([890,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["dotNET"],g:["无"],o:!0,e:`<h3>BadHttpRequestException: Request body too large</h3>
<p>提示这错误是因为请求头大小超出了限制，这个时候需要设置kestrel的请求体大小</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
           Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
               <span class="token punctuation">{</span>
                   webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureKestrel</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                   <span class="token punctuation">{</span>
                       <span class="token comment">//设置应用服务器Kestrel请求体最大为50MB</span>
                       options<span class="token punctuation">.</span>Limits<span class="token punctuation">.</span>MaxRequestBodySize <span class="token operator">=</span> <span class="token number">52428800</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                   webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>`,r:{minutes:.33,words:100},t:"错误处理",y:"a"}}],["/dotnet/server/kestrel/kestrel.html",{loader:()=>a(()=>import("./kestrel.html-BtDXXpcc.js"),__vite__mapDeps([891,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Kestrel是一个跨平台的Web服务器，支持在windows、masos、linux等操作系统中运行。主要由两种使用模式：
1.直接作为Web服务器，直接接受并处理各类Http请求：
<img src="/common/1614391550541-1b0048ad-8301-4c84-bc12-a3d9f11e2c1e.png" alt="image.png" loading="lazy">
2.与各类反向代理服务器（例如Nginx、Apache、IIS）配合使用，反向代理服务器接受Http请求，将这些请求转发到Kestrel Web服务器
<img src="/common/1614391550544-8d3fc256-5b15-422c-afbf-9d0392c6cf4a.png" alt="image.png" loading="lazy">
优点：
对外暴露有限的HTTP服务器
反向代理服务器做了一层过滤、防护和转发
通过反向代理服务器实现负载均衡和动态请求分发路由
减少域名使用，降低WAF防火墙防护成本
安全通讯配置，HTTPS转HTTP，仅反向代理服务器需要证书，并且该服务器内部可以使用普通的HTTP协议与内部网络的应用服务器通信。</p>`,r:{minutes:4.62,words:1385},t:"Kestrel",y:"a"}}],["/dotnet/webyingyong/mvc/changyongpeizhi.html",{loader:()=>a(()=>import("./changyongpeizhi.html-CIsBT8LG.js"),__vite__mapDeps([892,1])),meta:{a:"azrng",d:16952544e5,l:"2023年9月21日",c:["dotNET"],g:["无"],o:!0,e:`<h3>视图实时预览</h3>
<p>需要在nuget上安装<strong>Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation组件</strong>
然后需要再在service中注册</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddRazorPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRazorRuntimeCompilation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.8,words:241},t:"常用配置",y:"a"}}],["/dotnet/webyingyong/mvc/jichuzhishi.html",{loader:()=>a(()=>import("./jichuzhishi.html-BlovTF0E.js"),__vite__mapDeps([893,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>布局</h2>
<p><a href="https://mp.weixin.qq.com/s/PfNYIrZVpLig_lYo7pI3kw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/PfNYIrZVpLig_lYo7pI3kw</a> | ASP.NET Core MVC 从入门到精通之布局</p>
`,r:{minutes:.15,words:46},t:"基础知识",y:"a"}}],["/dotnet/webyingyong/mvc/razorshitu.html",{loader:()=>a(()=>import("./razorshitu.html-DDoawd7x.js"),__vite__mapDeps([894,1])),meta:{a:"azrng",d:16952544e5,l:"2023年9月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>默认控件</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@Html<span class="token punctuation">.</span><span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">,</span> <span class="token string">"Order"</span><span class="token punctuation">)</span>

@Html<span class="token punctuation">.</span><span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token string">"带控制器"</span><span class="token punctuation">,</span> <span class="token string">"action名称"</span><span class="token punctuation">,</span> <span class="token string">"控制器名称"</span><span class="token punctuation">)</span>

@Html<span class="token punctuation">.</span><span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token string">"带路由器信息"</span><span class="token punctuation">,</span> <span class="token string">"action名称"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"李思"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"/Html/Action/1?name=1&amp;height=5"</span><span class="token operator">&gt;</span>带路由信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

@Html<span class="token punctuation">.</span><span class="token function">RouteLink</span><span class="token punctuation">(</span><span class="token string">"LinkText"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> action <span class="token operator">=</span> <span class="token string">"ActionName"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

@Html<span class="token punctuation">.</span><span class="token function">RouteLink</span><span class="token punctuation">(</span><span class="token string">"LinkText"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> controller <span class="token operator">=</span> <span class="token string">"Order"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

@Html<span class="token punctuation">.</span><span class="token function">RouteLink</span><span class="token punctuation">(</span><span class="token string">"LinkText"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:3.09,words:928},t:"Razor视图",y:"a"}}],["/dotnet/webyingyong/mvc/shitubianyi.html",{loader:()=>a(()=>import("./shitubianyi.html-BLSQE1BD.js"),__vite__mapDeps([895,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>类型</h2>
<h3>预编译</h3>
<p>预编译是ASP.Net Core 5.0 的默认方式。在发布时，默认会将系统中的所有Razor视图进行预编译。编译好的视图DLL统一命名为 xxx.Views.dll</p>
<h3>动态编译</h3>
<p>将项目整个配置成动态编译很简单，仅需3步：
1、在 NuGet 中添加包“Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation”
2、修改代码文件“Startup.cs”中的方法“ ConfigureServices ”，调用方法“ AddRazorRuntimeCompilation ”以支持动态编译 .cshtml 文件</p>`,r:{minutes:1.38,words:413},t:"视图编译",y:"a"}}],["/dotnet/webyingyong/mvc/taghelpers.html",{loader:()=>a(()=>import("./taghelpers.html-Dp9D3Gv8.js"),__vite__mapDeps([896,1])),meta:{a:"azrng",d:16892928e5,l:"2023年7月14日",c:["dotNET"],g:["无"],o:!0,e:`<p>Tag Helpers提供了在视图中更改和增强现有html元素的功能。将他们添加到视图中，回经过一个Razor模板引擎处理并创建一个html，之后再返回给浏览器，有一些tag helpers，其实作为元素或者实际的标签。
&nbsp;
Img</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;img src="" asp-append-version="true"&gt;a&lt;a&gt;
</code></pre></div><p>枚举绑定</p>`,r:{minutes:.63,words:189},t:"TagHelpers",y:"a"}}],["/dotnet/webyingyong/webform/aspxjieshoupostmanchuandejsonduixiang.html",{loader:()=>a(()=>import("./aspxjieshoupostmanchuandejsonduixiang.html-U4_n6QfG.js"),__vite__mapDeps([897,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>通过postman的post方式调用aspx页面，传输数据</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>StreamReader</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>InputStream<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">String</span> xmlData <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                         <span class="token comment">//业务处理</span>
             <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.22,words:67},t:"aspx接受postman传的json对象",y:"a"}}],["/dotnet/webyingyong/webform/webformhuancunchuli.html",{loader:()=>a(()=>import("./webformhuancunchuli.html-DCna-dkU.js"),__vite__mapDeps([898,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>第一种缓存：
服务器端缓存&nbsp; 在ASP.NET中页面缓存的使用方法非常的简单，只需要在aspx页的顶部加这样一句声明即可：
&nbsp;&nbsp;&nbsp; &lt;%@ OutputCache Duration="60" VaryByParam="none" %&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Duration：缓存时间，单位是s；
&nbsp;&nbsp;&nbsp;&nbsp; VaryByParam：分号分隔的字符串列表，用于使输出缓存发生变化。默认情况下，这些字符串对应于使用 GET 方法特性发送的查询字符串值，或者使用 POST 方法发送的参数。将该特性设置为多个参数时，对于每个指定参数组合，输出缓存都包含一个不同版本的请求文档。
<strong>varyByParam="none"</strong>&nbsp;当&nbsp;VaryByParam 设置为&nbsp;none 时，将不考虑任何参数；无论提供什么附加参数，都将向所有用户发送相同的页：
&nbsp;**VaryByParam =“*”**对于每个唯一的请求参数组合，将缓存一个唯一页
第二种缓存
客户端缓存 从cache中获取</p>`,r:{minutes:1.14,words:341},t:"WebForm缓存处理",y:"a"}}],["/dotnet/webyingyong/webform/websocketyuxiaoxituisong.html",{loader:()=>a(()=>import("./websocketyuxiaoxituisong.html-DlIFC61a.js"),__vite__mapDeps([899,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p><strong>目录</strong></p>
<ul>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label0" target="_blank" rel="noopener noreferrer">一、Socket简介</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label1" target="_blank" rel="noopener noreferrer">二、WebSocket简介与消息推送</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label2" target="_blank" rel="noopener noreferrer">三、WebSocket客户端</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label3" target="_blank" rel="noopener noreferrer">四、WebSocket服务器端</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label4" target="_blank" rel="noopener noreferrer">五、测试运行</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label5" target="_blank" rel="noopener noreferrer">六、小结与消息推送框架</a>
<ul>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_lab2_5_0" target="_blank" rel="noopener noreferrer">6.1、开源Java消息推送框架Pushlet</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_lab2_5_1" target="_blank" rel="noopener noreferrer">6.2、开源DotNet消息推送框架SignalR</a></li>
</ul>
</li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_label6" target="_blank" rel="noopener noreferrer">七、代码下载</a>
<ul>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_lab2_6_0" target="_blank" rel="noopener noreferrer">7.1、Java实现的服务器端代码与客户端代码下载</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_lab2_6_1" target="_blank" rel="noopener noreferrer">7.2、DotNet服务器端手动连接实现代码下载</a></li>
<li><a href="https://www.cnblogs.com/best/p/5695570.html#_lab2_6_2" target="_blank" rel="noopener noreferrer">7.3、DotNet下使用SuperWebSocket三方库实现代码下载</a></li>
</ul>
</li>
</ul>`,r:{minutes:9.08,words:2725},t:"WebSocket与消息推送",y:"a"}}],["/dotnet/zhuomianchengxu/dabaobushu/clickoncebushu.html",{loader:()=>a(()=>import("./clickoncebushu.html-ekeiwse8.js"),__vite__mapDeps([900,1])),meta:{a:"azrng",d:16682112e5,l:"2022年11月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>使用clickOnce部署方案进行部署。</p>
<h2>参考文档</h2>
<p>快速创建软件安装包ClickOnce：<a href="https://mp.weixin.qq.com/s/zcO1J-AqiK7LkU52MRwmqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zcO1J-AqiK7LkU52MRwmqw</a></p>
`,r:{minutes:.2,words:60},t:"ClickOnce部署",y:"a"}}],["/dotnet/zhuomianchengxu/dabaobushu/costura_fody.html",{loader:()=>a(()=>import("./costura_fody.html-C1l30Jpn.js"),__vite__mapDeps([901,1])),meta:{a:"azrng",d:16600896e5,l:"2022年8月10日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个nuget包，安装后再生成项目，就会在debug目录下生成一个可以独立运行的exe文件。</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Costura.Fody"</span> Version<span class="token operator">=</span><span class="token string">"5.7.0"</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>PrivateAssets<span class="token operator">&gt;</span>all<span class="token operator">&lt;</span><span class="token operator">/</span>PrivateAssets<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>IncludeAssets<span class="token operator">&gt;</span>runtime<span class="token punctuation">;</span> build<span class="token punctuation">;</span> native<span class="token punctuation">;</span> contentfiles<span class="token punctuation">;</span> analyzers<span class="token punctuation">;</span> buildtransitive<span class="token operator">&lt;</span><span class="token operator">/</span>IncludeAssets<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>PackageReference<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.28,words:84},t:"Costura.Fody",y:"a"}}],["/dotnet/zhuomianchengxu/dabaobushu/gengxin.html",{loader:()=>a(()=>import("./gengxin.html-Bd6guGFe.js"),__vite__mapDeps([902,1])),meta:{a:"azrng",d:16931808e5,l:"2023年8月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Winform自动更新之AutoUpdater.NET设置必须强制更新</p>
<h2>资料</h2>
<p>https://mp.weixin.qq.com/s/5bnWGMSrpCX2IiAaqvrxMw：3k Star，开源的 .NET 程序自动化更新神器</p>
`,r:{minutes:.21,words:64},t:"自动更新",y:"a"}}],["/dotnet/zhuomianchengxu/dabaobushu/InnoSetupBuild.html",{loader:()=>a(()=>import("./InnoSetupBuild.html-vFxJBWuP.js"),__vite__mapDeps([903,1])),meta:{a:"azrng",d:1690848e6,l:"2023年8月1日",c:["dotNet"],g:["InnoSetup","打包"],o:!0,e:`<h2>摘要</h2>
<p>很多C/S开发领域的同学或多或少都可能会遇到需要制作安装包的场景，打包的工具也是五花八门，例如有NSIS、InstallShield、Wix Toolset、ClickOnce等等，这里以Inno Setup为例简单演示下如何构建安装包，以及在Visual Studio中编译程序时自动去构建这个安装包。</p>
<h2>操作演示</h2>
<p>Tips：如果是想自动化构建，建议先从文章尾部开始看起，前面只是简单演示如何手动构建</p>
<p>1、去官网下载Inno Setup打包工具 <a href="https://jrsoftware.org/isdl.php" target="_blank" rel="noopener noreferrer">Inno Setup Downloads</a></p>`,r:{minutes:4.8,words:1441},t:"利用InnoSetup在VS编译时自动构建安装包",y:"a"}}],["/dotnet/zhuomianchengxu/dabaobushu/",{loader:()=>a(()=>import("./index.html-Bj3aurm_.js"),__vite__mapDeps([904,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>将项目打包安装</p>
<h2>工具</h2>
<p>Advanced Installer
Advanced Installer是一个功能强大且易于使用的打包工具，具有直观的用户界面和许多高级功能。它支持创建Windows Installer（MSI）和EXE文件，并提供先进的自定义选项、脚本编写等功能。此外，它还支持远程部署和更新，以及在不同平台上构建和管理多语言安装程序。
官网：<a href="https://www.advancedinstaller.com/" target="_blank" rel="noopener noreferrer">https://www.advancedinstaller.com/</a>
资料：<a href="https://blog.csdn.net/qq_34845394/article/details/107488406" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_34845394/article/details/107488406</a>
<a href="https://mp.weixin.qq.com/s/Yswaqp3zT1gjTDeYND_X1A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yswaqp3zT1gjTDeYND_X1A</a> | 专业的软件安装包可以这样做！</p>`,r:{minutes:1.36,words:407},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/fangzhichongfuqidong.html",{loader:()=>a(()=>import("./fangzhichongfuqidong.html--GrJ9UrS.js"),__vite__mapDeps([905,1])),meta:{a:"azrng",d:16162848e5,l:"2021年3月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>不想让一个exe文件重复启动多次，防止程序被多次运行。</p>
<h2>实现思路</h2>
<p>程序只能运行一次，意思也就是该程序进程只能是唯一的，所以就要保证程序进程只有一个，我们要判断下该程序进程是否已经在自己的操作系统上运行了，如果已经存在一个进程，那么我们不是再开启该程序进程，而是弹框提示用户该程序已经运行，然后退出。</p>
<h2>操作</h2>
<h3>使用互斥量Mutex</h3>
<p>为该程序进程创建一个互斥量Mutex对象变量，当运行该程序时候，该程序进程就具有了这个互斥的Mutex变量，如果再次运行就检测该变量是否存在</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">OnlyInstanceRunning</span>
<span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
  <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 应用程序的主入口点。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>STAThread<span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token preprocessor property">#<span class="token directive keyword">region</span> 方法一:使用互斥量</span>
      <span class="token class-name"><span class="token keyword">bool</span></span> createNew<span class="token punctuation">;</span>

      <span class="token comment">// createdNew:</span>
      <span class="token comment">// 在此方法返回时，如果创建了局部互斥体（即，如果 name 为 null 或空字符串）或指定的命名系统互斥体，则包含布尔值 true；</span>
      <span class="token comment">// 如果指定的命名系统互斥体已存在，则为false</span>
      <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Mutex</span> mutex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mutex</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Application<span class="token punctuation">.</span>ProductName<span class="token punctuation">,</span> <span class="token keyword">out</span> createNew<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>createNew<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          Application<span class="token punctuation">.</span><span class="token function">EnableVisualStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          Application<span class="token punctuation">.</span><span class="token function">SetCompatibleTextRenderingDefault</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 程序已经运行的情况，则弹出消息提示并终止此次运行</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
          MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"应用程序已经在运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 终止此进程并为基础操作系统提供指定的退出代码。</span>
          System<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:6.3,words:1889},t:"防止重复启动",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/jitongcaozuo.html",{loader:()=>a(()=>import("./jitongcaozuo.html-DLXmR9oI.js"),__vite__mapDeps([906,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["dotNET"],g:["无"],o:!0,e:`<h2>判断当前程序是否有管理员权限</h2>
<p>windows系统</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"shell32.dll"</span><span class="token punctuation">,</span>EntryPoint <span class="token operator">=</span><span class="token string">"#680"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.56,words:1067},t:"常用操作",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/qidongcaozuo.html",{loader:()=>a(()=>import("./qidongcaozuo.html-DHfXKmkD.js"),__vite__mapDeps([907,1])),meta:{a:"azrng",d:169128e7,l:"2023年8月6日",c:["dotNET"],g:["无"],o:!0,e:`<h3>程序开机自启</h3>
<p>通过写入注册表实现开机自启</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Win32</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Autostart</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Key <span class="token operator">=</span> <span class="token string">"EarthLiveSharp"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> enabled<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">RegistryKey</span> runKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            runKey <span class="token operator">=</span> Registry<span class="token punctuation">.</span>CurrentUser<span class="token punctuation">.</span><span class="token function">OpenSubKey</span><span class="token punctuation">(</span><span class="token string">@"Software\\Microsoft\\Windows\\CurrentVersion\\Run"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                runKey<span class="token punctuation">?.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> Application<span class="token punctuation">.</span>ExecutablePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                runKey<span class="token punctuation">?.</span><span class="token function">DeleteValue</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            runKey<span class="token punctuation">?.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.69,words:206},t:"启动操作",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/rejian.html",{loader:()=>a(()=>import("./rejian.html-C9qr9r6d.js"),__vite__mapDeps([908,1])),meta:{a:"azrng",d:16868736e5,l:"2023年6月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过代码来注册热键和取消热键</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 系统 api</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">WindowsAPI</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置指定窗口的显示状态</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nCmdShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 注册热键</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要定义热键的窗口的句柄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>定义热键ID（不能与其它ID重复）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fsModifiers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标识热键是否在按Alt、Ctrl、Shift、Windows等键时才会生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vk<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>定义热键的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">return</span><span class="token punctuation">:</span> <span class="token class-name">MarshalAs</span><span class="token attribute-arguments"><span class="token punctuation">(</span>UnmanagedType<span class="token punctuation">.</span>Bool<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RegisterHotKey</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">HotkeyModifiers</span> fsModifiers<span class="token punctuation">,</span> <span class="token class-name">Keys</span> vk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 释放热键</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要取消热键的窗口的句柄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要取消热键的ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">UnregisterHotKey</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 组合控制键</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">HotkeyModifiers</span>
<span class="token punctuation">{</span>
    MOD_ALT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    MOD_CONTROL<span class="token punctuation">,</span>
    MOD_SHIFT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MOD_WIN <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Ctrl+ALT</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    MOD_CONTROL_ALT <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.92,words:276},t:"热键",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/windowsapi.html",{loader:()=>a(()=>import("./windowsapi.html-Dldpo18T.js"),__vite__mapDeps([909,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>PInvoke</h2>
<p>包含所有 P/Invoke 代码的库，因此您不必每次都导入它。维护和更新以支持最新的 Windows 操作系统。
仓库地址：<a href="https://github.com/dotnet/pinvoke" target="_blank" rel="noopener noreferrer">https://github.com/dotnet/pinvoke</a></p>
<p>nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>PInvoke<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Core
</code></pre></div>`,r:{minutes:.32,words:96},t:"windows API",y:"a"}}],["/dotnet/zhuomianchengxu/kuozhan/qidongexemojiemianfangan.html",{loader:()=>a(()=>import("./qidongexemojiemianfangan.html-Cv5W9myA.js"),__vite__mapDeps([910,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>彻底解决【从Windows服务启动程序exe，程序无界面】问题</p>
<h2>实现过程</h2>
<p>实现过程即任务计划实现过程，C#有3种方法，其实就是2种，一种是使用API创建任务，这个方法其实，可以通过系统调用现有dll库实现，最后一种是使用开源库。建议用开源库方式。
调用系统的dll，这dll就是C:\\Windows\\System32\\taskschd.dll，在C#里直接引用就行，它实现API的C#封装，很简单。使用TaskSchedulerClass类连接、创建修改任务计划，很简单，我这不是主推方法，不贴代码，但源码地址里有。
使用开源库TaskScheduler，可以实现，命名空间为Microsoft.Win32.TaskScheduler，下载地址为：<a href="https://github.com/dahall/TaskScheduler" target="_blank" rel="noopener noreferrer">https://github.com/dahall/TaskScheduler</a>。例子为：<a href="https://github.com/dahall/TaskScheduler/wiki/Examples" target="_blank" rel="noopener noreferrer">https://github.com/dahall/TaskScheduler/wiki/Examples</a></p>`,r:{minutes:1.97,words:591},t:"启动exe无界面方案",y:"a"}}],["/dotnet/zhuomianchengxu/kaiyuanzujian/dotnetty.html",{loader:()=>a(()=>import("./dotnetty.html-BGSOPa5f.js"),__vite__mapDeps([911,1])),meta:{a:"azrng",d:16952544e5,l:"2023年9月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>DotNetty是一个高性能的基于.Net 平台开发的网络通信框架，其底层基于Netty框架，可以用于开发TCP、UDP、HTTP、WebSocket等应用程序。
DotNetty的主要特点包括：
高性能：采用了异步 I/O 模型和零拷贝技术，极大的提高了程序的性能。
易用性：提供丰富的API，用户可以方便的进行网络编程。
可扩展性：支持自定义解码器、编码器、处理器和协议。
支持多种协议：支持TCP、UDP、HTTP、WebSocket等协议。</p>
<h3>适用场景</h3>
<p>DotNetty适用于高性能的网络编程场景，特别是需要高并发、低延迟的场景。以下是几个可能使用DotNetty的场景：
实时通信：如果您正在构建实时通信应用程序，例如聊天应用、实时协作平台等，DotNetty可以提供高性能、低延迟的基础设施，并支持自定义协议和消息格式。
游戏服务器：游戏服务器需要处理大量并发连接，而且需要快速响应玩家的操作。DotNetty可以提供高效的处理器和优化的消息传递，以保证游戏体验的流畅性和可扩展性。
IoT应用程序：IoT应用程序需要处理大量传感器和设备的数据，而且需要在较短的时间内对数据进行处理和分析。DotNetty可以提供高效的编解码器和处理器，以便更有效地处理传感器和设备数据。
大规模分布式系统：在大规模分布式系统中，节点之间需要进行高频的通信和数据传输。DotNetty可以提供高效的网络通信框架，以便更快地传输数据和执行操作。
举个例子，如果您正在构建一个远程存储系统，该系统需要处理大量同时连接和数据传输，那么DotNetty可能是一个很好的选择。通过使用DotNetty，您可以实现高性能、低延迟的数据传输，并可以自定义协议和消息格式来适应特定的应用场景。</p>`,r:{minutes:2.41,words:722},t:"DotNetty",y:"a"}}],["/dotnet/zhuomianchengxu/kaiyuanzujian/ui.html",{loader:()=>a(()=>import("./ui.html-By_WbzyU.js"),__vite__mapDeps([912,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><a href="https://mp.weixin.qq.com/s/_JDBx1BbBh1F9-92GcFPjA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_JDBx1BbBh1F9-92GcFPjA</a> | 超全的开源Winform UI库，满足你的一切桌面开发需求！
&nbsp;
HZHControls控件库，c#的winform自定义控件，对触屏具有更好的操作支持，项目是基于framework4.0，完全原生控件开发
<a href="https://gitee.com/kwwwvagaa/net_winform_custom_control" target="_blank" rel="noopener noreferrer">https://gitee.com/kwwwvagaa/net_winform_custom_control</a></p>`,r:{minutes:1.4,words:419},t:"UI",y:"a"}}],["/dotnet/zhuomianchengxu/kaiyuanzujian/netnanoframework.html",{loader:()=>a(()=>import("./netnanoframework.html-GB7JQ7TT.js"),__vite__mapDeps([913,1])),meta:{a:"azrng",d:1686528e6,l:"2023年6月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>.NET nanoFramework是一个免费且开源的平台，可以用于编写针对受限嵌入式设备的托管代码应用程序。它适用于多种类型的项目，包括物联网传感器、可穿戴设备、学术概念验证、机器人技术、爱好者/创客创作甚至复杂的工业设备。它通过为嵌入式开发人员提供桌面应用程序开发人员使用的现代技术和工具，使这些平台的开发更加简单、快速和成本更低。
文档地址：<a href="https://nanoframework.gitee.io/" target="_blank" rel="noopener noreferrer">https://nanoframework.gitee.io/</a></p>`,r:{minutes:.59,words:177},t:".NET nanoFramework",y:"a"}}],["/dotnet/zhuomianchengxu/winform/changyongkongjian.html",{loader:()=>a(()=>import("./changyongkongjian.html-CK8wyN9O.js"),__vite__mapDeps([914,1])),meta:{a:"azrng",d:16652736e5,l:"2022年10月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>公共控件</h2>
<h3>ComboBox</h3>
<p>下拉列表控件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>cmbleixing<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> movieTypeList<span class="token punctuation">;</span>
cmbleixing<span class="token punctuation">.</span>DisplayMember <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>
cmbleixing<span class="token punctuation">.</span>ValueMember <span class="token operator">=</span> <span class="token string">"Id"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.74,words:221},t:"常用控件",y:"a"}}],["/dotnet/zhuomianchengxu/winform/changyongzujian.html",{loader:()=>a(()=>import("./changyongzujian.html-ekIoZ5Oa.js"),__vite__mapDeps([915,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>SunnyUI</h2>
<p>SunnyUI.Net, 基于 C## .Net WinForm 开源控件库、工具类库、扩展类库、多页面开发框架
<a href="https://gitee.com/yhuse/SunnyUI" target="_blank" rel="noopener noreferrer">https://gitee.com/yhuse/SunnyUI</a></p>
`,r:{minutes:.2,words:59},t:"常用组件",y:"a"}}],["/dotnet/zhuomianchengxu/winform/",{loader:()=>a(()=>import("./index.html-BArsSoWE.js"),__vite__mapDeps([916,1])),meta:{a:"azrng",d:16823808e5,l:"2023年4月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>winform说明</p>
<h2>资料</h2>
<p>https://www.cnblogs.com/easywebfactory/p/17790016.html  winform跨平台</p>
`,r:{minutes:.13,words:39},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/winform/scoket.html",{loader:()=>a(()=>import("./scoket.html-DqTjj4CG.js"),__vite__mapDeps([917,1])),meta:{a:"azrng",d:16504992e5,l:"2022年4月21日",c:["dotNET"],g:["无"],o:!0,e:`<p>scoket是winform端使用的东西，webscoket可以在web端使用也可以cs端使用，主要是看服务端使用的是scoket还是websocket
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
supersocket中文文档：<a href="https://docs.supersocket.net/v2-0/zh-CN" target="_blank" rel="noopener noreferrer">https://docs.supersocket.net/v2-0/zh-CN</a></p>
`,r:{minutes:.26,words:77},t:"Scoket",y:"a"}}],["/dotnet/zhuomianchengxu/winform/tupiangeshizhuaihuan.html",{loader:()=>a(()=>import("./tupiangeshizhuaihuan.html-BaZKBRCF.js"),__vite__mapDeps([918,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h3>bmp压缩成jpg</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Bitmap</span> source <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span>Image<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span><span class="token string">"source.bmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"target.jpg"</span><span class="token punctuation">,</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Jpeg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.15,words:44},t:"图片格式转换",y:"a"}}],["/dotnet/zhuomianchengxu/winform/winformscominterop.html",{loader:()=>a(()=>import("./winformscominterop.html-BnPFh9gW.js"),__vite__mapDeps([919,1])),meta:{a:"azrng",d:16854048e5,l:"2023年5月30日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>这个存储库有 WinForms 的 ComWrappers 实现。除此之外，它还允许将 WinForms 和 NativeAOT 以及 R2R 与修剪一起使用。</p>
<p>仓库地址：<a href="https://github.com/kant2002/WinFormsComInterop" target="_blank" rel="noopener noreferrer">https://github.com/kant2002/WinFormsComInterop</a></p>
`,r:{minutes:.23,words:68},t:"WinFormsComInterop",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/changwenwenti.html",{loader:()=>a(()=>import("./changwenwenti.html-CrZU2bKX.js"),__vite__mapDeps([920,1])),meta:{a:"azrng",d:16897248e5,l:"2023年7月19日",c:["dotNET"],g:["无"],o:!0,e:`<ol>
<li>WPF Window 的生命周期顺序如下：
<ul>
<li>构造函数 (Constructor)：创建 Window 实例并初始化。</li>
<li>Loaded 事件：窗口已加载到视觉树中，准备显示。</li>
<li>Activated 事件：窗口被激活，获得焦点并可与用户交互。</li>
<li>Deactivated 事件：窗口失去焦点，无法与用户交互。</li>
<li>Closing 事件：窗口关闭前触发，可以取消窗口的关闭操作。</li>
<li>Closed 事件：窗口已经关闭。</li>
</ul>
</li>
<li>WPF 的线程是属于前台线程。UI 线程是一个单线程，并且负责处理用户界面的操作。所有 UI 元素的访问必须在 UI 线程上进行，以避免线程安全问题。</li>
<li>在 WPF 中，可以通过设置控件的 DataContext 属性来指定其他控件作为数据源。例如，可以将一个控件的 DataContext 设置为另一个控件的实例，然后在 XAML 中使用绑定表达式绑定到该控件的属性。</li>
<li>若绑定的数据源是枚举类型，有以下几种绑定方案：
<ul>
<li>将枚举值列表作为数据源，可以使用 ObjectDataProvider 或者在 ViewModel 中暴露枚举值列表。</li>
<li>使用 Binding 枚举转换器（EnumConverter），将枚举转换为字符串或其他类型。</li>
<li>使用枚举值的名字作为显示文本，在 XAML 中通过绑定和转换器来实现。</li>
</ul>
</li>
<li>如果想要每次按键都触发响应，可以使用 TextBox 控件的 TextInput 事件。在 XAML 中，可以将该事件与命令绑定，然后在 ViewModel 中实现对应的命令处理逻辑。</li>
<li>触发器分为三种：
<ul>
<li>Property Trigger（属性触发器）：当属性的值满足指定条件时触发。</li>
<li>Data Trigger（数据触发器）：当数据满足指定条件时触发。</li>
<li>Event Trigger（事件触发器）：当指定的事件发生时触发。</li>
</ul>
</li>
<li>触发器的绑定内容可以指定为属性、数据或事件。对应的触发器类别是 Property Trigger、Data Trigger 和 Event Trigger。</li>
<li>WPF 的动画都派生于抽象基类 AnimationClock。</li>
<li>WPF 的动画对 UI 的影响包括改变元素的位置、大小、透明度等。如果动画不正确地配置或处理不当，可能会导致性能问题或视觉错误。解决方案包括优化动画性能、避免过多复杂的动画、合理使用持续时间和缓动函数等。</li>
<li>WPF 的模板主要作用于控件的外观和布局。可以通过自定义控件模板来改变控件的外观和交互方式。</li>
<li>ContentControl 主要用于包装其他元素，并且可以通过 Content 属性来设置包装的内容。它常用于场景如下：</li>
</ol>`,r:{minutes:4.03,words:1210},t:"常问问题",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/kaiyuanzujian.html",{loader:()=>a(()=>import("./kaiyuanzujian.html-Vde-WnNP.js"),__vite__mapDeps([921,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>模块化框架</h2>
<ol>
<li>
<p>Prism：Prism 是一个用于构建模块化、可扩展和可测试的WPF应用程序的开源框架。它提供了一组用于实现MVVM（Model-View-ViewModel）模式的工具和模块化开发的支持。你可以在 Prism 的官方网站上找到更多信息和示例。</p>
</li>
<li>
<p>Caliburn.Micro：Caliburn.Micro 是一个轻量级的WPF开源框架，用于实现MVVM模式。它提供了通过约定自动绑定视图和视图模型的功能，并且容易上手和使用。你可以在 Caliburn.Micro 的 GitHub 仓库上找到更多信息和示例。</p>
</li>
<li>
<p>PropertyChanged.Fody：PropertyChanged.Fody 是一个用于自动实现INotifyPropertyChanged接口的开源库。通过简单的配置，它可以自动为你的属性生成属性更改通知代码，减少了样板代码的编写。你可以在 PropertyChanged.Fody 的 GitHub 仓库上找到更多信息和示例。</p>
</li>
</ol>`,r:{minutes:3.23,words:970},t:"开源组件",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/",{loader:()=>a(()=>import("./index.html-BPw-654w.js"),__vite__mapDeps([922,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>WPF核心是一个与分辨率无关的基于矢量的呈现引擎，目的在于充分利用现场图形硬件。通过一套完善的应用程序开发工鞥对该核心进行扩展，这些功能包括可扩展应用程序编辑语言(XAML)、控件、数据绑定、二维和三维图形、动画、样式、模板、文档、媒体、文本和板式。WPF属于.NET，因此可以生成整合.Net API其他元素的应用程序。</p>
<p>官网文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/overview/?view=netdesktop-7.0" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/overview/?view=netdesktop-7.0</a></p>`,r:{minutes:1.54,words:461},t:"说明",y:"a"}}],["/orm/dapper/splitDbTable/coreData.html",{loader:()=>a(()=>import("./coreData.html-BmzMIU8S.js"),__vite__mapDeps([923,1])),meta:{a:"azrng",d:16874784e5,l:"2023年6月23日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>分库分表操作
仓库源码：<a href="https://github.com/e-jlion/NetCoreDemo" target="_blank" rel="noopener noreferrer">https://github.com/e-jlion/NetCoreDemo</a></p>
<h2>资料</h2>
<p><a href="https://www.cnblogs.com/lhxsoft/p/15985850.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/lhxsoft/p/15985850.html</a></p>`,r:{minutes:.17,words:51},t:"core-data",y:"a"}}],["/orm/dapper/splitDbTable/lnskyDB.html",{loader:()=>a(()=>import("./lnskyDB.html-C-A5G_mG.js"),__vite__mapDeps([924,1])),meta:{a:"azrng",d:16706304e5,l:"2022年12月10日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>LnskyDB是基于Dapper的Lambda扩展,支持按时间分库分表,也可以自定义分库分表方法.而且可以T4生成实体类免去手写实体类的烦恼.</p>
<blockquote>
<p>文档地址: <a href="https://liningit.github.io/Dapper.LnskyDB/" target="_blank" rel="noopener noreferrer">https://liningit.github.io/Dapper.LnskyDB/</a>
开源地址: <a href="https://github.com/liningit/Dapper.LnskyDB" target="_blank" rel="noopener noreferrer">https://github.com/liningit/Dapper.LnskyDB</a>
nuget地址: <a href="https://www.nuget.org/packages/LnskyDB/" target="_blank" rel="noopener noreferrer">https://www.nuget.org/packages/LnskyDB/</a></p>
</blockquote>`,r:{minutes:4.74,words:1423},t:"Dapper扩展LnskyDB",y:"a"}}],["/orm/efcore/changyongzujian/autohistory.html",{loader:()=>a(()=>import("./autohistory.html-DfkIYTOi.js"),__vite__mapDeps([925,1])),meta:{a:"azrng",d:16840224e5,l:"2023年5月14日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Microsoft.EntityFrameworkCore的一个插件，支持自动记录数据更改历史记录。
仓库地址：<a href="https://github.com/Arch/AutoHistory" target="_blank" rel="noopener noreferrer">https://github.com/Arch/AutoHistory</a></p>
`,r:{minutes:.18,words:55},t:"AutoHistory",y:"a"}}],["/orm/efcore/changyongzujian/efcore_namingconventions.html",{loader:()=>a(()=>import("./efcore_namingconventions.html-D8TlmNWv.js"),__vite__mapDeps([926,1])),meta:{a:"azrng",d:16568928e5,l:"2022年7月4日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>实体框架表和列的命名约定。</p>
<p>注意</p>
<ul>
<li>适用于任何数据库提供程序，并且与 PostgreSQL 或 Npgsql 没有任何关系。</li>
<li>执行此操作时要非常小心（该过程目前涉及删除和重新创建主键）</li>
<li>是一个社区维护的插件</li>
</ul>
<h2>命名约定</h2>
<ul>
<li>UseSnakeCaseNamingConvention: FullName becomes full_name</li>
<li>UseLowerCaseNamingConvention: FullName becomes fullname</li>
<li>UseCamelCaseNamingConvention: FullName becomes fullName</li>
<li>UseUpperCaseNamingConvention: FullName becomes FULLNAME</li>
<li>UseUpperSnakeCaseNamingConvention: FullName becomes FULL_NAME</li>
</ul>`,r:{minutes:.5,words:151},t:"EFCore.NamingConventions",y:"a"}}],["/orm/efcore/changyongzujian/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-B4JUwz8W.js"),__vite__mapDeps([927,1])),meta:{a:"azrng",d:16840224e5,l:"2023年5月14日",c:["orm"],g:["无"],o:!0,e:`<h2>工具和扩展</h2>
<p>工具和扩展为 Entity Framework Core 提供了额外功能。
文档地址：<a href="https://learn.microsoft.com/zh-cn/ef/core/extensions/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/ef/core/extensions/</a></p>
`,r:{minutes:.19,words:57},t:"说明",y:"a"}}],["/orm/efcore/changyongzujian/unitofwork.html",{loader:()=>a(()=>import("./unitofwork.html-CcItQ-ht.js"),__vite__mapDeps([928,1])),meta:{a:"azrng",d:16840224e5,l:"2023年5月14日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Microsoft.EntityFrameworkCore 的插件，用于支持存储库、工作单元模式和支持分布式事务的多个数据库。
仓库地址：<a href="https://github.com/Arch/UnitOfWork" target="_blank" rel="noopener noreferrer">https://github.com/Arch/UnitOfWork</a></p>
<h3>支持MySQL多库多表分片</h3>
<blockquote>
<p>在 MySQL 中，从物理上讲，模式与数据库同义。您可以在 MySQL SQL 语法中替换关键字 SCHEMA 而不是 DATABASE，例如使用 CREATE SCHEMA 而不是 CREATE DATABASE。其他一些数据库产品也有区别。例如，在 Oracle 数据库产品中，模式仅代表数据库的一部分：单个用户拥有的表和其他对象。</p>
</blockquote>`,r:{minutes:1.33,words:398},t:"UnitOfWork",y:"a"}}],["/orm/efcore/changyongzujian/zack_efcore_batch.html",{loader:()=>a(()=>import("./zack_efcore_batch.html-90Ozu6yG.js"),__vite__mapDeps([929,1])),meta:{a:"azrng",d:1652832e6,l:"2022年5月18日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Entity Framework Core用户可以使用LINQ语句删除或者更新多条数据库记录，操作一条SQL语句并且不需要首先执行把对象加载到内存中。</p>
<h2>支持的数据库</h2>
<p>SQLServer: Install-Package Zack.EFCore.Batch.MSSQL_NET6
MySQL: Install-Package Zack.EFCore.Batch.MySQL.Pomelo_NET6
Postgresql: Install-Package Zack.EFCore.Batch.Npgsql_NET6
Sqlite: Install-Package Zack.EFCore.Batch.Sqlite_NET6
Oracle: Install-Package Zack.EFCore.Batch.Oracle_NET6
In Memory(内存数据库)：Install-Package Zack.EFCore.Batch.InMemory_NET6</p>`,r:{minutes:.4,words:120},t:"Zack.EFCore.Batch",y:"a"}}],["/orm/efcore/erjihuancun/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-BNRP2pKW.js"),__vite__mapDeps([930,1])),meta:{a:"azrng",d:165888e7,l:"2022年7月27日",c:["orm"],g:["无"],o:!0,e:`<p>二级缓存是一个查询缓存。EF命令的结果将存储在缓存中,这相同的EF命令将从缓存中检索数据,而不是执行它们对数据库了。</p>
<p>各种包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>cnblogs<span class="token punctuation">.</span>com<span class="token operator">/</span>louby<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">6232646</span><span class="token punctuation">.</span>html
<span class="token class-name">EFSecondLevelCache</span>


https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>VahidN<span class="token operator">/</span>EFCoreSecondLevelCacheInterceptor
Install<span class="token operator">-</span>Package EFCoreSecondLevelCacheInterceptor <span class="token operator">-</span>Version <span class="token number">3.6</span><span class="token number">.2</span>
    
    
    Install<span class="token operator">-</span>Package EntityFrameworkCore<span class="token punctuation">.</span>NCache <span class="token operator">-</span>Version <span class="token number">5.3</span><span class="token number">.0</span>
    
    
    
    Install<span class="token operator">-</span>Package EntityFrameworkCore<span class="token punctuation">.</span>Cacheable <span class="token operator">-</span>Version <span class="token number">2.0</span><span class="token number">.1</span>
</code></pre></div>`,r:{minutes:.37,words:110},t:"说明",y:"a"}}],["/orm/efcore/extract/entityFrameworkEarlier.html",{loader:()=>a(()=>import("./entityFrameworkEarlier.html-CBFZS2Vr.js"),__vite__mapDeps([931,1])),meta:{a:"Tim Deschryver",d:16902432e5,l:"2023年7月25日",c:["orm"],g:["EFCore"],o:!0,e:`<h2>前言</h2>
<p>作为开发者，我们可以让很多代码运行起来。但这是否意味着我们以"正确的方式"来做呢？有时候是正确的，但其他时候可能存在更好的方法。而当有更好的方法时，我们往往并不知道。这其中有很多原因。时间紧迫、心情不好、新功能、复制粘贴解决方案（或如今由AI生成的代码）、缺乏知识以及其他因素，都可能导致非理想的解决方案。</p>
<p>这篇博文是关于我之前不了解Entity Framework提供的所有功能，这是我希望早点知道的。我在阅读别人的文章或演讲时，或者朋友指引我，或者通过阅读文档时偶然发现了这些功能。甚至通过撰写这篇博文，我也发现了一些额外的方法。</p>
<p>我希望这篇博文能帮助你以推荐/官方的方式完成任务，而不是使用那些常常引入一些陷阱的变通方法。</p>`,r:{minutes:9.43,words:2829},t:"我希望早点知道的实体框架功能",y:"a"}}],["/orm/efcore/jichuzhishi/baseOperation.html",{loader:()=>a(()=>import("./baseOperation.html-Dt8vwJro.js"),__vite__mapDeps([932,1])),meta:{a:"azrng",d:1681344e6,l:"2023年4月13日",c:["orm"],g:["efcore"],o:!0,e:`<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>本文示例环境：vs2022、.Net6及以上、MySQL、pgsql</p>
<p>本文适合有一点EFCore基础的人阅读，如果你没有基础，那么请转到<a href="https://learn.microsoft.com/zh-cn/ef/core/get-started/overview/first-app" target="_blank" rel="noopener noreferrer">此处</a></p>
</div>
<h2>准备</h2>`,r:{minutes:19.82,words:5946},t:"基础操作",y:"a"}}],["/orm/efcore/jichuzhishi/iqueryable.html",{loader:()=>a(()=>import("./iqueryable.html-BhW2M1ZG.js"),__vite__mapDeps([933,1])),meta:{a:"azrng",d:16537824e5,l:"2022年5月29日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>IQueryable代表一个“可以放到数据库服务器去执行的查询”，它没有立即执行，只是可以被执行。
对IQueryable接扣调用非终结方法的时候不会执行查询，而是在调用终结方法(遍历、ToArray、ToList、Min、Max、Count等)的时候才能立即执行查询。
非终结方法：GroupBy、OrderBy、InClude、Skip、Take等。
IEnumerable是用来操作内存，在客户端执行</p>
<blockquote>
<p>如果想使用筛选或者使用聚合函数，应该使用IEnumerable，节约数据库计算的压力。</p>
</blockquote>`,r:{minutes:1.25,words:376},t:"IQueryable",y:"a"}}],["/orm/efcore/jichuzhishi/jiazaifangshi.html",{loader:()=>a(()=>import("./jiazaifangshi.html-CXNmPbwb.js"),__vite__mapDeps([934,1])),meta:{a:"azrng",d:16689024e5,l:"2022年11月20日",c:["orm"],g:["无"],o:!0,e:`<h2>前言</h2>
<ul>
<li>延迟加载(懒加载)，默认不支持延迟加载</li>
<li>预先加载(贪婪加载、饥饿加载)</li>
</ul>
<h2>贪婪加载</h2>
<p>贪婪加载也叫预先加载。
所谓贪婪加载，就是在查询结果中包含导航关系，而这就需要明确的要求。
比如这个示例中，User拥有Group导航属性</p>
<blockquote>
<p>导航关系有一对一和一对多</p>
</blockquote>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DataEntity</span></span>
<span class="token punctuation">{</span>
    xxx

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Group</span> Group <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.86,words:1457},t:"加载方式",y:"a"}}],["/orm/efcore/jichuzhishi/piliangcaozuo.html",{loader:()=>a(()=>import("./piliangcaozuo.html-BZjwZnjj.js"),__vite__mapDeps([935,1])),meta:{a:"azrng",d:16531776e5,l:"2022年5月22日",c:["orm"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>默认情况下，EFCore中批量添加、更新和删除数据都是先查询实体，然后对数据操作，最后SaveChanges保存到数据库，生成的SQL都是一条一条的SQL执行的。</p>
<p>如果批量操作的数据量比较大，那么会很影响性能的。</p>
<blockquote>
<p>起初EF Core 的开发团队认为，这样做会导致 EF Core 的对象状态跟踪混乱，但是在.Net7以及之后，已经可以实现批量更新、批量删除等的操作了</p>
</blockquote>
<h2>原生的实现</h2>
<p>每个关系型数据库的最佳实现利用以下不同的数据库特定实现：</p>
<ul>
<li><strong>PostgreSQL</strong> - 通过 Npgsql 的<a href="https://www.npgsql.org/doc/copy.html" target="_blank" rel="noopener noreferrer">二进制复制</a>导入使用 PostgreSQL 的 <a href="https://www.postgresql.org/docs/current/sql-copy.html" target="_blank" rel="noopener noreferrer">COPY</a> 命令，使用<a href="https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT" target="_blank" rel="noopener noreferrer">ON CONFLICT</a> 进行更新</li>
<li><strong>MySql</strong> - 使用 <a href="https://dev.mysql.com/doc/connector-net/en/connector-net-programming-bulk-loader.html" target="_blank" rel="noopener noreferrer">MySqlBulkLoader</a> 功能，将数据写入由<code>MySqlBulkLoader</code></li>
<li>MySqlConnector - 使用 <a href="https://mysqlconnector.net/api/mysqlconnector/mysqlbulkloadertype/" target="_blank" rel="noopener noreferrer">MySqlConnector 的 MySqlBulkLoader</a> 实现，该实现利用其功能避免写入临时文件<code>SourceStream</code></li>
<li>SQL Server - 使用 <strong>SQL Server</strong> 的功能，该功能导入写入内存中的数据<code>SqlBulkCopy </code>  <code>DataTable</code></li>
<li><strong>SQLite - SQLite</strong> 没有特定的导入功能，而是使用<a href="https://www.tutorialscampus.com/sql/insert-multiple-rows.htm" target="_blank" rel="noopener noreferrer">批量多行</a>插入执行批量插入，以将 I/O 调用减少到可配置的批大小</li>
</ul>`,r:{minutes:3.29,words:987},t:"批量操作",y:"a"}}],["/orm/efcore/jichuzhishi/savechanges.html",{loader:()=>a(()=>import("./savechanges.html-BQYbZb9r.js"),__vite__mapDeps([936,1])),meta:{a:"azrng",d:16486848e5,l:"2022年3月31日",c:["orm"],g:["无"],o:!1,e:`<h2>前言</h2>
<p>本文来简单了解一下EFCore中的SaveChanges方法。</p>
<h2>概述</h2>
<p>从字面意思看是保存状态，也就是最终将数据保存到数据库的时候，它直接关系到数据持久性和一致性(当存在多个实体的时候会自动开启事务)。官网对其描述为保留数据库的所有更新，并在对象上下文中重置更改跟踪。</p>
<p>SaveChanges有以下关键点</p>
<ul>
<li>
<p>数据提交和事务性操作：SaveChanges是将对数据上下文所做的更改保存到数据库的方法。它其实是一个事务性操作，数据要么所有更改都成功提交到数据库，要么它们都会回滚。这样保证了数据的一致性，如果在保存期间发生错误，数据库不会处于部分更改的状态。</p>
</li>
<li>
<p>更改跟踪：在EF中，对实体对象的更改首先保存在内存中的一个缓冲区中，也就是所谓的更改跟踪。当我调用SaveChanges时，EF会检查这个缓冲区，将更改保存到数据库中的相应实体。</p>
</li>
<li>
<p>异常处理：SaveChanges方法可能会引发各种异常，如数据库约束违规、连接问题等。因此，在实际应用中，需要编写相应的异常处理代码，以确保系统能够发现这些潜在问题，并记录错误日志，可以给解决错误提供帮助。</p>
</li>
<li>
<p>性能优化：EF有时会将多个更改批量提交到数据库，以提高性能。不过，根据应用程序的需求，我们可以调整EF的跟踪状态，以满足特定的性能要求。</p>
</li>
<li>
<p>返回值：SaveChanges通常返回一个整数，表示成功保存到数据库的实体数量。这代表数据是否插入成功。</p>
</li>
</ul>`,r:{minutes:3.78,words:1134},t:"SaveChanges",y:"a"}}],["/orm/efcore/jichuzhishi/shengchengsqlyugou.html",{loader:()=>a(()=>import("./shengchengsqlyugou.html-ZAqt8rzd.js"),__vite__mapDeps([937,1])),meta:{a:"azrng",d:16883424e5,l:"2023年7月3日",c:["orm"],g:["无"],o:!0,e:`<h2>标准日志</h2>
<p>新建一个API项目，然后默认使用的ILogger日志框架，在配置EFCore好的基础上，日志的默认的配置如下</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"Logging"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"LogLevel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"Default"</span><span class="token operator">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>
      <span class="token property">"Microsoft"</span><span class="token operator">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>
      <span class="token property">"Microsoft.Hosting.Lifetime"</span><span class="token operator">:</span> <span class="token string">"Information"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.6,words:779},t:"生成SQL语句",y:"a"}}],["/orm/efcore/jichuzhishi/shitijianguanji.html",{loader:()=>a(()=>import("./shitijianguanji.html-DWVQ60Bm.js"),__vite__mapDeps([938,1])),meta:{a:"azrng",d:16537824e5,l:"2022年5月29日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>数据库表之间的关系：一对一、一对多、多对多。</p>
<h2>操作</h2>
<p>三部曲：实体类中配置关系属性；FluentAPI关系配置；使用关系操作。
一对一：HasOne(xxx).WithOne(xxx);
一对多：HasOne(xxx).WithMany(xxx);
多对多：HasMany(xxx).WithMany(xxx);</p>
<h3>基础配置</h3>
<p>配置基础类和约定配置</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class EntityTypeConfiguration<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> : IEntityTypeConfiguration<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token keyword">where</span> T : DataEntity
{
    <span class="token keyword">public</span> virtual void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        <span class="token keyword">Type</span> genericType <span class="token operator">=</span> typeof<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>HasKey<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">"主键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>ToTable<span class="token punctuation">(</span>genericType<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>ToLower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        var convertDateTime <span class="token operator">=</span> new ValueConverter<span class="token operator">&lt;</span><span class="token keyword">DateTime</span><span class="token punctuation">,</span> <span class="token keyword">DateTime</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">&gt;</span> v<span class="token punctuation">.</span>ToUniversalTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span><span class="token operator">&gt;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasConversion<span class="token punctuation">(</span>convertDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">"创建时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>ModifyTime<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasConversion<span class="token punctuation">(</span>convertDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">"修改时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}

<span class="token keyword">public</span> abstract class DataEntity
{
    <span class="token keyword">public</span> long Id { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> new Snowflake<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NewId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个生成雪花id的公共类</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 创建时间</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">DateTime</span> CreateTime { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> <span class="token keyword">DateTime</span><span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 创建时间</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">DateTime</span> ModifyTime { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> <span class="token keyword">DateTime</span><span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
}
</code></pre></div>`,r:{minutes:6.34,words:1901},t:"实体间关系",y:"a"}}],["/orm/efcore/jichuzhishi/shitileipeizhi.html",{loader:()=>a(()=>import("./shitileipeizhi.html-Cw4eEprR.js"),__vite__mapDeps([939,1])),meta:{a:"azrng",d:1683504e6,l:"2023年5月8日",c:["orm"],g:["无"],o:!0,e:`<h2>实体类状态</h2>
<p>EFCoreState：通过状态跟踪，任何一个增删改查的操作都会记录一个状态在内存中，增删改的状态一旦SaveChanges就根据状态落实到数据库中的。</p>
<ul>
<li>Detached(0)：游离状态，与数据库并没有啥关系，上下文(DbContext)未跟踪该实体，比如new一个实体，状态就是Detached。</li>
<li>Added(4)：已添加，实体正在被上下文(DbContext)跟踪，但是在数据库中尚不存在。</li>
<li>Unchanged(1)：未改变状态，DbContext正在跟踪此实体，该实体存在于数据库中，属性值和数据库内容相比未发生变化。从数据库刚查询出来的对象就是该状态。</li>
<li>Modified(3)：已修改状态，实体被上下文跟踪并且存在于数据库中，并且部署属性或者它的所有属性值已经被修改；</li>
<li>Deleded(2)：实体正在被上下文跟踪，并且存在于数据库中，但是已经被标记为从数据库中删除。</li>
</ul>`,r:{minutes:11.81,words:3543},t:"实体类配置",y:"a"}}],["/orm/efcore/jichuzhishi/shiwu.html",{loader:()=>a(()=>import("./shiwu.html-COPkBEuA.js"),__vite__mapDeps([940,1])),meta:{a:"azrng",d:16531776e5,l:"2022年5月22日",c:["orm"],g:["无"],o:!0,e:`<h2>SaveChanges事务</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//默认事务是SaveChanges，它可以确保要么成功保存，要么在发生错误不对数据库做任何操作。</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">EFDB01Context</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EFDB01Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    db<span class="token punctuation">.</span>T_RoleInfor<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T_RoleInfor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> roleName <span class="token operator">=</span> <span class="token string">"管理员1"</span><span class="token punctuation">,</span> addTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    db<span class="token punctuation">.</span>T_RoleInfor<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T_RoleInfor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> roleName <span class="token operator">=</span> <span class="token string">"管理员2"</span><span class="token punctuation">,</span> addTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//关闭默认事务：context.Database.AutoTransactionsEnabled = false;</span>
</code></pre></div>`,r:{minutes:1.83,words:548},t:"事务操作",y:"a"}}],["/orm/efcore/jichuzhishi/shujukuhanshu.html",{loader:()=>a(()=>import("./shujukuhanshu.html-Ba1kieuh.js"),__vite__mapDeps([941,1])),meta:{a:"azrng",d:16897248e5,l:"2023年7月19日",c:["orm"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>有些数据库的函数在.Net中有对应的函数映射，但是其中一些是没有的，这样子做是为了保持实体框架API在不同的数据库提供程序之间保持一致。</p>
<p>但是你可以编写代码来补充，通过注册函数，可以在EFCore中来使用数据库的函数。</p>
<h2>EF.Functions</h2>
<h3>公共函数</h3>
<h4>Like</h4>
<p>EF.Functions.Like ：支持通配符% 、_、[]、[^]</p>
<blockquote>
<p>使用 EF.Functions.Like进行模糊查询要比 StartsWith、Contains 和 EndsWith 方法生成的SQL语句性能更优。</p>
</blockquote>`,r:{minutes:4.47,words:1340},t:"数据库函数",y:"a"}}],["/orm/efcore/jichuzhishi/shujukuqudong.html",{loader:()=>a(()=>import("./shujukuqudong.html-BqsGlP6B.js"),__vite__mapDeps([942,1])),meta:{a:"azrng",d:16681248e5,l:"2022年11月11日",c:["orm"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Entity Framework Core 可通过名为数据库提供程序的插件库访问许多不同的数据库。</p>
<p>网址：https://learn.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli</p>
<h2>MySQL</h2>
<p>引用组件：Pomelo.EntityFrameworkCore.MySql
使用方法：.UseInMemoryDatabase(databaseName)
连接字符串：Server=192.168.100.104;database=azrngblog;uid=root;pwd=123456;SslMode=None;
Server=localhost;Database=test;Port=3306;charset=utf8;uid=root;pwd=123456;</p>`,r:{minutes:5.59,words:1677},t:"数据库驱动",y:"a"}}],["/orm/efcore/jinjie/douxiefenli.html",{loader:()=>a(()=>import("./douxiefenli.html-CsEDNnBN.js"),__vite__mapDeps([943,1])),meta:{a:"azrng",d:1685664e6,l:"2023年6月2日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>20%操作是增删改，80%操作是查询。
一个主库对应多个从库，配置主库复制数据到从库，有延迟、很小、毫秒级，降低数据库服务器压力。</p>
<h2>原理</h2>
<p>SQLServer中主库修改，然后发布配置，从库订阅修改。
<img src="/common/1644724929405-e72eeae5-c496-4fd1-b666-de439c3fccbf.png" alt="image.png" loading="lazy"></p>
<h2>操作</h2>
<ul>
<li>多个数据库多个Context</li>
<li>单个Context多个连接数据库</li>
</ul>`,r:{minutes:.55,words:164},t:"读写分离",y:"a"}}],["/orm/efcore/jinjie/efcoreConcurrency.html",{loader:()=>a(()=>import("./efcoreConcurrency.html-CTHucqZJ.js"),__vite__mapDeps([944,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["orm"],g:["锁","efcore"],o:!0,e:`<h2>概述</h2>
<p>在大多数情况下，数据库由多个应用程序实例并发使用，每个实例对数据分别执行修改。 在同一时间修改相同的数据时，可能会出现不一致和数据损坏，例如，当两个客户端修改同一行中以某种方式关联的不同列时。 本文来讨论确保数据在发生此类并发更改时保持一致的机制。</p>
<p>EFCore不直接提供悲观锁。如果想使用悲观锁，需要开发人员自己编写原生SQL语句来使用悲观并发控制。</p>
<h2>目的</h2>
<p>避免多个用户同时操作资源造成的并发冲突问题。举例：统计点击量</p>
<p>最好的解决方案：非数据库解决方案
数据库层面的两种策略：悲观、乐观。</p>
<p>悲观并发和乐观并发
1)悲观并发：比如有两个用户a,b,同时登陆一个系统操作一个文档，如果a先进去修改，系统就把该文档锁住，b就没办法打开了，只有等a修改完，完全退出之后b才能进入修改。
2)乐观开发:a,b两个用户同时登录，如果a先进去修改紧接着b也进入修改了，a修改文档的同时b也在修改，如果a保存之后b在保存他的修改，此时系统检测到数据库中的文档记录和b刚进入时候的不一致，b保存时候会抛出异常，修改失败。</p>`,r:{minutes:7.38,words:2215},t:"EFCore并发处理",y:"a"}}],["/orm/efcore/jinjie/expressionTree.html",{loader:()=>a(()=>import("./expressionTree.html-DMokXLhQ.js"),__vite__mapDeps([945,1])),meta:{a:"azrng",d:16918848e5,l:"2023年8月13日",c:["orm"],g:["表达式树","efcore"],o:!0,e:`<h2>查看表达式树的Ast</h2>
<p>借助组件ExpressionTreeToString可以查看表达式树生成的AST</p>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>Expression&lt;Func&lt;Book, bool&gt;&gt;e=b =&gt;b.AuthorName.Contains("测试")||b.Price&gt;30;Console.WriteLine(e.ToString("Object notation","C#"));
</code></pre></div>`,r:{minutes:.29,words:87},t:"表达式树",y:"a"}}],["/orm/efcore/jinjie/fenkufenbiao.html",{loader:()=>a(()=>import("./fenkufenbiao.html-DMM6TN4p.js"),__vite__mapDeps([946,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["orm"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>配置动态Schema</h3>
<p>首先在EfCore在指定表名的时候，是可以顺带指定schema的，例如</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span>genericType<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.12,words:335},t:"分库分表",y:"a"}}],["/orm/efcore/jinjie/xianshibianyichaxun.html",{loader:()=>a(()=>import("./xianshibianyichaxun.html-DKBN3jLQ.js"),__vite__mapDeps([947,1])),meta:{a:"azrng",d:16531776e5,l:"2022年5月22日",c:["orm"],g:["无"],o:!0,e:`<p>简单来说，就是在查询数据时，预先编译好查询语句，便于在请求数据时能够立即响应。
EF Core 本身使用了查询表达式的散列，来实现自动编译和缓存查询，当我们的代码需要重用以前执行的查询时，EF Core 会使用散列查找，从缓存中返回已编译的查询语句。
但有时候我们可能更希望直接使用编译结果查询，绕过散列计算和缓存查找。
显式编译查询就为我们提供了进一步提高查询性能的可能。
比如我们通过主键查询 Blog，同时使用贪婪加载文章的集合列表，代码如下：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BloggingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> blog <span class="token operator">=</span> context<span class="token punctuation">.</span>Blogs
    <span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Posts<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.26,words:677},t:"显式编译查询",y:"a"}}],["/orm/efcore/qianyishuju/daimayouxian.html",{loader:()=>a(()=>import("./daimayouxian.html-1op4IbH3.js"),__vite__mapDeps([948,1])),meta:{a:"azrng",d:16894656e5,l:"2023年7月16日",c:["orm"],g:["无"],o:!0,e:`<p>根据项目里面的对象上下文和对象实体类生成数据库，通过程序包管理控制器操作</p>
<h2>安装组件</h2>
<ul>
<li>Microsoft.EntityFrameworkCore.Tools</li>
</ul>
<p>另外不同的数据库还需要安装不同的组件进行迁移数据库的操作
MySQL：Pomelo.EntityFrameworkCore.MySql
Sql Server：Microsoft.EntityFrameworkCore.SqlServer
sqlite：Microsoft.EntityFrameworkCore.Sqlite
pgsql：Npgsql.EntityFrameworkCore.PostgreSQL</p>`,r:{minutes:3.42,words:1027},t:"代码优先",y:"a"}}],["/orm/efcore/qianyishuju/efcorezhiminglinghanggongju.html",{loader:()=>a(()=>import("./efcorezhiminglinghanggongju.html-PU2QdDVS.js"),__vite__mapDeps([949,1])),meta:{a:"azrng",d:16883424e5,l:"2023年7月3日",c:["orm"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>EFCore工具可帮助完成设计数据库时候的开发任务，主要用于通过对数据库架构进行反向工程来管理迁移和搭建DbContext和实体类型。EFCore .NET命令行工具是对跨平台.NET Core CLI工具的扩展，该工具执行需要具有.NET Core SDK(具有&nbsp;Sdk="Microsoft.NET.Sdk"&nbsp;的项目或项目文件中的相似项目)的项目，优点是适用于所有平台。</p>
<h2>安装工具</h2>
<p>使用终端工具执行在任意目录执行下面命令，可以尝试下<a href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener noreferrer">Terminal</a>终端工具。</p>`,r:{minutes:7.26,words:2179},t:"EFCore之命令行工具",y:"a"}}],["/orm/efcore/qianyishuju/migratorPackage.html",{loader:()=>a(()=>import("./migratorPackage.html-DRmj1-Ax.js"),__vite__mapDeps([950,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["orm"],g:["无"],o:!0,e:`<h2>FluentMigrator</h2>
<p>数据库迁移的组件</p>
<h2>Evolve</h2>
<p>适用于 .NET 和 .NET Core 项目的数据库迁移工具</p>
<p>文档：https://evolve-db.netlify.app/</p>
<p>仓库地址：https://github.com/lecaillon/Evolve</p>
<p>https://mp.weixin.qq.com/s/j5lJOH8PqQxW-0dLYaao3Q | .NET的数据库版本管理工具 Evolve</p>
`,r:{minutes:.27,words:81},t:"迁移组件",y:"a"}}],["/orm/efcore/qianyishuju/qianyijiyinjiqiao.html",{loader:()=>a(()=>import("./qianyijiyinjiqiao.html-CsSZDC4c.js"),__vite__mapDeps([951,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["orm"],g:["无"],o:!0,e:`<h2>迁移和生成数据库确认</h2>
<p>如果你本机代码连接了多个数据库，就增加了一层迁移生成数据库前的确认操作，防止执行到不该执行的数据库</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 迁移前的确认</span>
<span class="token doc-comment comment">/// 该文件逻辑会在命令上生成迁移文件或者更新数据库前的时候被触发</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remarks</span><span class="token punctuation">&gt;</span></span>https://dev.to/vanenshi/how-i-saved-my-production-database-with-one-simple-console-message-4fjm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remarks</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationDbContextFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDesignTimeDbContextFactory<span class="token punctuation">&lt;</span>OpenDbContext<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">OpenDbContext</span> <span class="token function">CreateDbContext</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token string">"Host=localhost;Username=postgres;Password=123456;Database=azrng"</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dbBuild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DbContextOptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dbBuild<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ... Some code to generate dbContextBuilder</span>
        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span>dbBuild<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// This is where magic happends</span>
        <span class="token class-name"><span class="token keyword">var</span></span> pendingMigrations <span class="token operator">=</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">GetPendingMigrations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"*********************************************\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"该命令将使用以下详细信息应用迁移"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"连接字符串: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Yellow<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ResetColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"迁移:\\n\\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Yellow<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">"\\n\\t"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">:</span> pendingMigrations<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ResetColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"*********************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"你确认吗? (Y/N)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> userInput <span class="token operator">=</span> <span class="token punctuation">(</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInput <span class="token keyword">is</span> <span class="token string">"Y"</span> <span class="token keyword">or</span> <span class="token string">"y"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> context<span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span>ForegroundColor <span class="token operator">=</span> ConsoleColor<span class="token punctuation">.</span>Red<span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Environment<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.13,words:638},t:"迁移奇淫技巧",y:"a"}}],["/orm/efcore/qianyishuju/shujukuyouxian.html",{loader:()=>a(()=>import("./shujukuyouxian.html-gIzQU75J.js"),__vite__mapDeps([952,1])),meta:{a:"azrng",d:16883424e5,l:"2023年7月3日",c:["orm"],g:["无"],o:!0,e:`<h2>基础组件</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>EntityFrameworkCore
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Design
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Tools
</code></pre></div>`,r:{minutes:1.05,words:316},t:"数据库优先",y:"a"}}],["/orm/sqlsugar/wentihuizong/parametercountmismatch.html",{loader:()=>a(()=>import("./parametercountmismatch.html-Bu1TabIr.js"),__vite__mapDeps([953,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["orm"],g:["无"],o:!0,e:`<p>通过反射添加的时候提示Parameter count mismatch错误，需要将传入的T限制约束为class,new()</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">HandleAdd</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span>TOut<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> IsGuobaOne <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">TIn</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IdentityEntityBase</span></span>
            <span class="token keyword">where</span> <span class="token class-name">TOut</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> page <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetPageNumber</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TIn<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>IsGuobaOne<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> page<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>TOut<span class="token operator">&gt;</span><span class="token punctuation">)</span>func<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> youluDb<span class="token punctuation">.</span><span class="token function">Insertable</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"导入</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result <span class="token operator">&gt;</span> <span class="token number">0</span></span><span class="token punctuation">}</span></span><span class="token string">成功:失败"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.37,words:112},t:"Parameter count mismatch",y:"a"}}],["/orm/sqlsugar/wentihuizong/wentihuizong.html",{loader:()=>a(()=>import("./wentihuizong.html-c-WLXMu9.js"),__vite__mapDeps([954,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["orm"],g:["无"],o:!0,e:`<h4>连接数据库时候提示需要安装Oracle.ManagedDataAccess</h4>
<p>解决办法：先安装Oracle.ManagedDataAccess，然后再安装sqlsugar</p>
`,r:{minutes:.19,words:56},t:"问题汇总",y:"a"}}],["/otherLanguage/python/disanfangku/changyongbao.html",{loader:()=>a(()=>import("./changyongbao.html-NI7xVedv.js"),__vite__mapDeps([955,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p><strong>文本</strong>
string：通用字符串操作
re：正则表达式操作
difflib：差异计算工具
textwrap：文本填充
unicodedata：Unicode字符数据库
stringprep：互联网字符串准备工具
readline：GNU按行读取接口
rlcompleter：GNU按行读取的实现函数
struct：将字节解析为打包的二进制数据
codecs：注册表与基类的编解码器
<strong>数据类型</strong>
datetime：基于日期与时间工具
calendar：通用月份函数
collections：容器数据类型
collections.abc：容器虚基类
heapq：堆队列算法
bisect：数组二分算法
array：高效数值数组
weakref：弱引用
types：内置类型的动态创建与命名
copy：浅拷贝与深拷贝
pprint：格式化输出
reprlib：交替repr()的实现
<strong>数学</strong>
numbers：数值的虚基类
math：数学函数
cmath：复数的数学函数
decimal：定点数与浮点数计算
fractions：有理数
random：生成伪随机数
<strong>函数式编程</strong>
itertools：为高效循环生成迭代器
functools：可调用对象上的高阶函数与操作
operator：针对函数的标准操作
<strong>文件与目录</strong>
os.path：通用路径名控制
fileinput：从多输入流中遍历行
stat：解释stat()的结果
filecmp：文件与目录的比较函数
tempfile：生成临时文件与目录
glob：Unix风格路径名格式的扩展
fnmatch：Unix风格路径名格式的比对
linecache：文本行的随机存储
shutil：高级文件操作
macpath：MacOS 9路径控制函数
<strong>持久化</strong>
pickle：Python对象序列化
copyreg：注册机对pickle的支持函数
在公众号Python人工智能技术后台回复“面试”，获取腾讯Python面试题和答案。
shelve：Python对象持久化
marshal：内部Python对象序列化
dbm：Unix“数据库”接口
sqlite3：针对SQLite数据库的API2.0
<strong>压缩</strong>
zlib：兼容gzip的压缩
gzip：对gzip文件的支持
bz2：对bzip2压缩的支持
lzma：使用LZMA算法的压缩
zipfile：操作ZIP存档
tarfile：读写tar存档文件
<strong>加密</strong>
hashlib：安全散列与消息摘要
hmac：针对消息认证的键散列
<strong>操作系统工具</strong>
os：多方面的操作系统接口
io：流核心工具
time：时间的查询与转化
argparser：命令行选项、参数和子命令的解析器
optparser：命令行选项解析器
getopt：C风格的命令行选项解析器
logging：Python日志工具
logging.config：日志配置
logging.handlers：日志处理器
getpass：简易密码输入
curses：字符显示的终端处理
curses.textpad：curses程序的文本输入域
curses.ascii：ASCII字符集工具
curses.panel：curses的控件栈扩展
platform：访问底层平台认证数据
errno：标准错误记号
ctypes：Python外部函数库
<strong>并发</strong>
threading：基于线程的并行
multiprocessing：基于进程的并行
concurrent：并发包
concurrent.futures：启动并行任务
subprocess：子进程管理
sched：事件调度
queue：同步队列
select：等待I / O完成
dummy_threading：threading模块的替代（当_thread不可用时）
_thread：底层的线程API（threading基于其上）
_dummy_thread：_thread模块的替代（当_thread不可用时）
<strong>进程间通信</strong>
socket：底层网络接口
ssl：socket对象的TLS / SSL填充器
asyncore：异步套接字处理器
asynchat：异步套接字命令 / 响应处理器
signal：异步事务信号处理器
mmap：内存映射文件支持
<strong>互联网</strong>
email：邮件与MIME处理包
json：JSON编码与解码
mailcap：mailcap文件处理
mailbox：多种格式控制邮箱
mimetypes：文件名与MIME类型映射
base64：RFC3548：Base16、Base32、Base64编码
binhex：binhex4文件编码与解码
binascii：二进制码与ASCII码间的转化
quopri：MIMEquoted - printable数据的编码与解码
uu：uuencode文件的编码与解码</p>`,r:{minutes:3.17,words:951},t:"常用包",y:"a"}}],["/otherLanguage/python/disanfangku/disanfangku.html",{loader:()=>a(()=>import("./disanfangku.html-CDveNZ9p.js"),__vite__mapDeps([956,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>通过一个文本文件写入需要引用的包，文本文件名称是：requirements.txt</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>certifi<span class="token operator">==</span><span class="token number">2020.4</span><span class="token number">.5</span><span class="token number">.1</span>
chardet<span class="token operator">==</span><span class="token number">3.0</span><span class="token number">.4</span>
idna<span class="token operator">==</span><span class="token number">2.9</span>
lxml<span class="token operator">==</span><span class="token number">4.5</span><span class="token number">.1</span>
requests<span class="token operator">==</span><span class="token number">2.23</span><span class="token number">.0</span>
urllib3<span class="token operator">==</span><span class="token number">1.25</span><span class="token number">.9</span>

</code></pre></div>`,r:{minutes:.75,words:224},t:"第三方库",y:"a"}}],["/otherLanguage/python/jibenshiyong/dabaoexe.html",{loader:()=>a(()=>import("./dabaoexe.html-DkXRQ0tg.js"),__vite__mapDeps([957,1])),meta:{a:"azrng",d:16274304e5,l:"2021年7月28日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>下载包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>pip install pyinstaller
</code></pre></div><p>在文件存放地址下执行cmd命令
默认图标</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>pyinstaller <span class="token operator">-</span>F xxx<span class="token punctuation">.</span>py
</code></pre></div>`,r:{minutes:.86,words:258},t:"打包exe",y:"a"}}],["/otherLanguage/python/jibenshiyong/jibenshiyong.html",{loader:()=>a(()=>import("./jibenshiyong.html-BpOTd6yL.js"),__vite__mapDeps([958,1])),meta:{a:"azrng",d:16767648e5,l:"2023年2月19日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>一、脚本语言的第一行，目的就是指出，你想要你的这个文件中的代码用什么可执行程序去运行它，就这么简单。
<strong>#!/usr/bin/python</strong> : 是告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器；
<strong>#!/usr/bin/env python</strong>(推荐）: 这种用法是为了防止操作系统用户没有将 python 装在默认的 /usr/bin 路径里。当系统看到这一行的时候，首先会到 env 设置里查找 python 的安装路径，再调用对应路径下的解释器程序完成操作。
<strong>#!/usr/bin/python</strong> 相当于写死了python路径;
<strong>#!/usr/bin/env python</strong> 会去环境设置寻找 python 目录,<strong>推荐这种写法</strong>
<strong>二、脚本语言的第二行需要指明文件默认使用utf-8编码，这样子的话才可以正常解析中文（python 3.x默认就是，所以不用写）</strong>
**&nbsp;**
&nbsp;
<strong>安装并使用说明：</strong>
1.&nbsp;安装python环境&nbsp;&nbsp;
&nbsp;&nbsp;1.1&nbsp;记得安装时候添加环境变量 &nbsp;
&nbsp;&nbsp;1.2&nbsp;选择自定义安装到其他盘符
2.&nbsp;在vscode软件里面安装插件
&nbsp;&nbsp;&nbsp;&nbsp;&gt;python
3.&nbsp;新建一个hello文件，输入
&nbsp;&nbsp;&nbsp;&nbsp;<code>python &nbsp;&nbsp;&nbsp;&nbsp;print("hello&nbsp;world"); &nbsp;&nbsp;&nbsp;&nbsp;</code>
&nbsp;&nbsp;&nbsp; 点击调试，使用语言python，调试控制台会出来hello&nbsp;world字样。 &nbsp;
4.&nbsp;包的管理&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;4.1&nbsp;配置pip源，不配置的话下载很慢 &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;windows:在当前用户根目录(我的当前用户名为xanwidtf)下，创建pip文件夹，然后在里面新建一个文件(pip.in)&nbsp;里面的内容为</p>`,r:{minutes:1.6,words:481},t:"基本使用",y:"a"}}],["/otherLanguage/python/jibenshiyong/kuaijiejian.html",{loader:()=>a(()=>import("./kuaijiejian.html-nlQxt1cP.js"),__vite__mapDeps([959,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>PyCharm Default Keymap
<strong>1、编辑（Editing）</strong>
Ctrl + Space&nbsp;&nbsp;&nbsp; 基本的代码完成（类、方法、属性）
Ctrl + Alt + Space&nbsp; 快速导入任意类
Ctrl + Shift + Enter&nbsp;&nbsp;&nbsp; 语句完成
Ctrl + P&nbsp;&nbsp;&nbsp; 参数信息（在方法中调用参数）
Ctrl + Q&nbsp;&nbsp;&nbsp; 快速查看文档
F1&nbsp;&nbsp; 外部文档
<strong>Shift + F1&nbsp;&nbsp;&nbsp; 外部文档，进入web文档主页</strong>
<strong>Ctrl + Shift + Z --&gt; Redo 重做</strong>
<strong>Ctrl + 悬浮/单击鼠标左键 &nbsp;&nbsp; 简介/进入代码定义</strong>
Ctrl + F1&nbsp;&nbsp;&nbsp; 显示错误描述或警告信息
Alt + Insert&nbsp;&nbsp;&nbsp; 自动生成代码
Ctrl + O&nbsp;&nbsp;&nbsp; 重新方法
Ctrl + Alt + T&nbsp;&nbsp;&nbsp; 选中
<strong>Ctrl + /&nbsp;&nbsp;&nbsp; 行注释/取消行注释</strong>
<strong>Ctrl + Shift + /&nbsp;&nbsp;&nbsp; 块注释</strong>
Ctrl + W&nbsp;&nbsp;&nbsp; 选中增加的代码块
Ctrl + Shift + W&nbsp;&nbsp;&nbsp; 回到之前状态
Ctrl + Shift + ]/[&nbsp;&nbsp;&nbsp;&nbsp; 选定代码块结束、开始
<strong>Alt + Enter&nbsp;&nbsp;&nbsp; 快速修正</strong>
<strong>Ctrl + Alt + L&nbsp;&nbsp;&nbsp;&nbsp; 代码格式化</strong>
Ctrl + Alt + O&nbsp;&nbsp;&nbsp; 优化导入
Ctrl + Alt + I&nbsp;&nbsp;&nbsp; 自动缩进
Tab / Shift + Tab&nbsp; 缩进、不缩进当前行
Ctrl+X/Shift+Delete&nbsp;&nbsp;&nbsp; 剪切当前行或选定的代码块到剪贴板
Ctrl+C/Ctrl+Insert&nbsp;&nbsp;&nbsp; 复制当前行或选定的代码块到剪贴板
Ctrl+V/Shift+Insert&nbsp;&nbsp;&nbsp; 从剪贴板粘贴
Ctrl + Shift + V&nbsp;&nbsp;&nbsp; 从最近的缓冲区粘贴
Ctrl + D&nbsp; 复制选定的区域或行
Ctrl + Y&nbsp;&nbsp;&nbsp; 删除选定的行
Ctrl + Shift + J&nbsp; 添加智能线
Ctrl + Enter&nbsp;&nbsp; 智能线切割
Shift + Enter&nbsp;&nbsp;&nbsp; 另起一行
Ctrl + Shift + U&nbsp; 在选定的区域或代码块间切换
Ctrl + Delete&nbsp;&nbsp; 删除到字符结束
Ctrl + Backspace&nbsp;&nbsp; 删除到字符开始
<strong>Ctrl + Numpad+/-&nbsp;&nbsp; 展开/折叠代码块</strong>（当前位置的：函数，注释等）
<strong>Ctrl + shift + Numpad+/-&nbsp;&nbsp; 展开/折叠所有代码块</strong>
Ctrl + F4&nbsp;&nbsp; 关闭运行的选项卡
**&nbsp;2、查找/替换(Search/Replace)**
F3&nbsp;&nbsp; 下一个
Shift + F3&nbsp;&nbsp; 前一个
<strong>Ctrl + R&nbsp;&nbsp; 替换</strong>
<strong 可以在整个项目中查找某个字符串什么的，如查找某个函数名字符串看之前是怎么使用这个函数的="">Ctrl + Shift + F&nbsp; 或者连续2次敲击shift &nbsp; 全局查找</strong>
Ctrl + Shift + R&nbsp;&nbsp; 全局替换
**&nbsp;3、运行(Running)**
Alt + Shift + F10&nbsp;&nbsp; 运行模式配置
Alt + Shift + F9&nbsp;&nbsp;&nbsp; 调试模式配置
<strong>Shift + F10&nbsp;&nbsp;&nbsp; 运行</strong>
Shift + F9&nbsp;&nbsp; 调试
Ctrl + Shift + F10&nbsp;&nbsp; 运行编辑器配置
Ctrl + Alt + R&nbsp;&nbsp; 运行manage.py任务
**&nbsp;4、调试(Debugging)**
F8&nbsp;&nbsp; 跳过
F7&nbsp;&nbsp; 进入
Shift + F8&nbsp;&nbsp; 退出
Alt + F9&nbsp;&nbsp;&nbsp; 运行游标
Alt + F8&nbsp;&nbsp;&nbsp; 验证表达式
Ctrl + Alt + F8&nbsp;&nbsp; 快速验证表达式
F9&nbsp;&nbsp;&nbsp; 恢复程序
Ctrl + F8&nbsp;&nbsp; 断点开关
Ctrl + Shift + F8&nbsp;&nbsp; 查看断点
**&nbsp;5、导航(Navigation)**
Ctrl + N&nbsp;&nbsp;&nbsp; 跳转到类
Ctrl + Shift + N&nbsp;&nbsp;&nbsp; 跳转到符号
<strong>Alt + Right/Left&nbsp;&nbsp;&nbsp; 跳转到下一个、前一个编辑的选项卡（代码文件）</strong>
<strong>Alt + Up/Down跳转到上一个、下一个方法</strong>
F12&nbsp;&nbsp;&nbsp; 回到先前的工具窗口
Esc&nbsp;&nbsp;&nbsp; 从工具窗口回到编辑窗口
Shift + Esc&nbsp;&nbsp; 隐藏运行的、最近运行的窗口
Ctrl + Shift + F4&nbsp;&nbsp; 关闭主动运行的选项卡
Ctrl + G&nbsp;&nbsp;&nbsp; 查看当前行号、字符号
<strong>Ctrl + E&nbsp;&nbsp; 当前文件弹出，打开最近使用的文件列表</strong>
Ctrl+Alt+Left/Right&nbsp;&nbsp; 后退、前进
<strong>Ctrl+Shift+Backspace&nbsp;&nbsp;&nbsp; 导航到最近编辑区域 {差不多就是返回上次编辑的位置}</strong>
Alt + F1&nbsp;&nbsp; 查找当前文件或标识
Ctrl+B / Ctrl+Click&nbsp;&nbsp;&nbsp; 跳转到声明
Ctrl + Alt + B&nbsp;&nbsp;&nbsp; 跳转到实现
Ctrl + Shift + I查看快速定义
Ctrl + Shift + B跳转到类型声明
Ctrl + U跳转到父方法、父类
Ctrl + ]/[跳转到代码块结束、开始
Ctrl + F12弹出文件结构
Ctrl + H类型层次结构
Ctrl + Shift + H方法层次结构
Ctrl + Alt + H调用层次结构
F2 / Shift + F2下一条、前一条高亮的错误
F4 / Ctrl + Enter编辑资源、查看资源
Alt + Home显示导航条F11书签开关
Ctrl + Shift + F11书签助记开关
Ctrl + #[0-9]跳转到标识的书签
Shift + F11显示书签
**&nbsp;6、搜索相关(Usage Search)**
Alt + F7/Ctrl + F7文件中查询用法
Ctrl + Shift + F7文件中用法高亮显示
Ctrl + Alt + F7显示用法
**&nbsp;7、重构(Refactoring)**
F5复制F6剪切
Alt + Delete安全删除
<strong>Shift + F6重命名</strong>
Ctrl + F6更改签名
Ctrl + Alt + N内联
Ctrl + Alt + M提取方法
Ctrl + Alt + V提取属性
Ctrl + Alt + F提取字段
Ctrl + Alt + C提取常量
Ctrl + Alt + P提取参数
**&nbsp;8、控制VCS/Local History**
Ctrl + K提交项目
Ctrl + T更新项目
Alt + Shift + C查看最近的变化
Alt + BackQuote(’)VCS快速弹出
**&nbsp;9、模版(Live Templates)**
Ctrl + Alt + J当前行使用模版
Ctrl +Ｊ插入模版
**&nbsp;10、基本(General)**
Alt + #[0-9]打开相应的工具窗口
Ctrl + Alt + Y同步
Ctrl + Shift + F12最大化编辑开关
Alt + Shift + F添加到最喜欢
Alt + Shift + I根据配置检查当前文件
Ctrl + BackQuote(’)快速切换当前计划
Ctrl + Alt + S　打开设置页
Ctrl + Shift + A查找编辑器里所有的动作
Ctrl + Tab在窗口间进行切换</p>`,r:{minutes:4,words:1201},t:"快捷键",y:"a"}}],["/otherLanguage/python/jibenshiyong/qiehuanyuan.html",{loader:()=>a(()=>import("./qiehuanyuan.html-B-jcDI3G.js"),__vite__mapDeps([960,1])),meta:{a:"azrng",d:16767648e5,l:"2023年2月19日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>国内镜像源
清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener noreferrer">https://pypi.tuna.tsinghua.edu.cn/simple</a>
阿里云：https://mirrors.aliyun.com/pypi/simple/
中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener noreferrer">https://pypi.mirrors.ustc.edu.cn/simple/</a>
华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener noreferrer">http://pypi.hustunique.com/</a>
山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener noreferrer">http://pypi.sdutlinux.org/</a>&nbsp;
豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener noreferrer">http://pypi.douban.com/simple/</a>
&nbsp;
使用方法：下载包的时候加上参数-I （不加也可以）
pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener noreferrer">https://pypi.tuna.tsinghua.edu.cn/simple</a>pyspider
&nbsp;
&nbsp;
&nbsp;
&nbsp;
修改配置的方法：
linux
修改 ~/.pip/pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)</p>`,r:{minutes:.75,words:224},t:"切换源",y:"a"}}],["/otherLanguage/python/jichuyufa/dailiip.html",{loader:()=>a(()=>import("./dailiip.html-DU1td1PI.js"),__vite__mapDeps([961,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>通过访问<a href="http://httpbin.org/get" target="_blank" rel="noopener noreferrer">http://httpbin.org/get</a>网站判断代理ip是否设置成功
&nbsp;
{
&nbsp; "args": {},
&nbsp; "headers": {
&nbsp;&nbsp;&nbsp; "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3",
&nbsp;&nbsp;&nbsp; "Accept-Encoding": "gzip, deflate",
&nbsp;&nbsp;&nbsp; "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8",
&nbsp;&nbsp;&nbsp; "Host": "httpbin.org",
&nbsp;&nbsp;&nbsp; "Referer": "<a href="https://blog.csdn.net/xiongzaiabc/article/details/84030849" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/xiongzaiabc/article/details/84030849</a>",
&nbsp;&nbsp;&nbsp;"Upgrade-Insecure-Requests": "1",
&nbsp;&nbsp;&nbsp; "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36",
&nbsp;&nbsp;&nbsp; "X-Amzn-Trace-Id": "Root=1-5f8ef15a-17a52ec94839a15d0e4f5358"
&nbsp; },
&nbsp; "origin": "223.88.62.197",
&nbsp; "url": "<a href="http://httpbin.org/get" target="_blank" rel="noopener noreferrer">http://httpbin.org/get</a>"
}</p>`,r:{minutes:.4,words:119},t:"代理ip",y:"a"}}],["/otherLanguage/python/jichuyufa/jibenshujuleixing.html",{loader:()=>a(()=>import("./jibenshujuleixing.html-kBNblYeA.js"),__vite__mapDeps([962,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>1、多个变量赋值
A=b=c=1;
或者
A,b,c=1,2,"1545";
2、有六个标准的数据类型
number（数字）
string（字符串）
list（列表）
tuple（元组）
set（集合）
dictionary（字典）
3、number（数字）
python3支持int float bool complex
Isinstance（a，int）；用来判断a是否是一个int类型
4、字符串
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
2、字符串可以用+运算符连接在一起，用*运算符重复。
3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字符串不能改变。
5、list
1、List写在方括号之间，元素用逗号隔开。
2、和字符串一样，list可以被索引和切片。
3、List可以使用+操作符进行拼接。
4、List中的元素是可以改变的。
5、元素
1、与字符串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含0或1个元素的元组的特殊语法规则。
4、元组也可以使用+操作符进行拼接。
&nbsp;
&nbsp;
文档：<a href="https://www.runoob.com/python3/python3-data-type.html" target="_blank" rel="noopener noreferrer">https://www.runoob.com/python3/python3-data-type.html</a></p>`,r:{minutes:1.13,words:338},t:"基本数据类型",y:"a"}}],["/otherLanguage/python/jichuyufa/jichuyufa.html",{loader:()=>a(()=>import("./jichuyufa.html-DQT_SMBB.js"),__vite__mapDeps([963,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>**&nbsp;标识符**
标识符由字母、数字、下划线组成。
在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。
Python 中的标识符是区分大小写的。
以下划线开头的标识符是有特殊意义的。以单下划线开头 <strong>_foo</strong> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 **from xxx import *** 而导入；
以双下划线开头的 <strong>__foo</strong> 代表类的私有成员；以双下划线开头和结尾的 <strong><strong>foo</strong></strong> 代表 Python 里特殊方法专用的标识，如 <strong><strong>init</strong>()</strong> 代表类的构造函数。
Python 可以同一行显示多条语句，方法是用分号 <strong>;</strong>
<strong>保留字</strong>
import&nbsp;keyword
keyword.kwlist
<strong>多行语句</strong>
<strong>使用斜杠（\\）将一行的语句分为多行显示，如下面</strong>
total = item_one + <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item_two + <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; item_three
<strong>语句中包含[],{}或()括号就不需要使用多行连接符。</strong>
days = ['Monday', 'Tuesday', 'Wednesday',
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Thursday', 'Friday']
<strong>引号</strong>
Python 可以使用引号( <strong>'</strong> )、双引号( <strong>"</strong> )、三引号( <strong>'''</strong> 或 <strong>"""</strong> ) 来表示字符串，引号的开始与结束必须的相同类型的。
其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。
word = 'word'
sentence = "这是一个句子。"
paragraph = """这是一个段落。
包含了多个语句"""
<strong>注释</strong>
单行注释采用#开头
#我是注释
多行注释使用三个单引号(''')或三个双引号(""")。
'''
我是注释
'''</p>`,r:{minutes:1.38,words:415},t:"基础语法",y:"a"}}],["/otherLanguage/python/jichuyufa/neizhihanshu.html",{loader:()=>a(()=>import("./neizhihanshu.html-CphVVrjx.js"),__vite__mapDeps([964,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">setattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">divmod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token builtin">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">ascii</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">staticmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     ﬁlter<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">issubclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         ﬂoat<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token builtin">property</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">classmethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token builtin">delattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">memoryview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:9.18,words:2753},t:"内置函数",y:"a"}}],["/otherLanguage/python/jichuyufa/qingqiutou.html",{loader:()=>a(()=>import("./qingqiutou.html-Cky90z61.js"),__vite__mapDeps([965,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>需要引入
import&nbsp;random
&nbsp;
&nbsp;
user_agent_list&nbsp;=&nbsp;["Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;10.0;&nbsp;WOW64)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/78.0.3904.108&nbsp;Safari/537.36",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;10.0;&nbsp;WOW64)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/81.0.4044.138&nbsp;Safari/537.36"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;10.0;&nbsp;WOW64;&nbsp;Trident/7.0;&nbsp;rv:11.0)&nbsp;like&nbsp;Gecko",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/5.0&nbsp;(X11;&nbsp;Linux&nbsp;x86_64)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/62.0.3202.62&nbsp;Safari/537.36",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/45.0.2454.101&nbsp;Safari/537.36",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/4.0&nbsp;(compatible;&nbsp;MSIE&nbsp;7.0;&nbsp;Wjindows&nbsp;NT&nbsp;6.0)",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Mozilla/5.0&nbsp;(Macintosh;&nbsp;U;&nbsp;PPC&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10.5;&nbsp;en-US;&nbsp;rv:1.9.2.15)&nbsp;Gecko/20110303&nbsp;Firefox/3.6.15",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]
headers&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;"user-agent":&nbsp;random.choice(user_agent_list)
}</p>`,r:{minutes:.38,words:113},t:"请求头",y:"a"}}],["/otherLanguage/python/jichuyufa/wenjiancaozuo.html",{loader:()=>a(()=>import("./wenjiancaozuo.html-DebwbZzo.js"),__vite__mapDeps([966,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<h3>1.显示当前目录</h3>
<p>当我们想知道当前的工作目录是什么的时候，我们可以简单地使用<code>os</code>模块的<code>getcwd()</code>功能，或者使用<code>pathlib</code>的<code>cwd()</code>，如下所示。</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment">## 第一种方法：显示当前目录</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> os
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前工作目录:"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
Current Work Directory<span class="token punctuation">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>ycui1<span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>Medium_Python_Tutorials

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment">## 第二种方法：或者我们也可以使用 pathlib</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前工作目录:"</span><span class="token punctuation">,</span> Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
Current Work Directory<span class="token punctuation">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>ycui1<span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>Medium_Python_Tutorials
</code></pre></div>`,r:{minutes:8.12,words:2435},t:"文件操作",y:"a"}}],["/otherLanguage/python/jichuyufa/xiazai.html",{loader:()=>a(()=>import("./xiazai.html-AVzXwFSR.js"),__vite__mapDeps([967,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p><strong>1、使用requests</strong>
&nbsp;
你可以使用requests模块从一个URL下载文件。
&nbsp;
考虑以下代码:
&nbsp;
<img src="/common/1610778343725-08b61218-c2e9-45c2-b225-eafaf64cace2.png" alt="image.png" loading="lazy">
&nbsp;
你只需使用<strong>requests模块的get方法获取URL，<strong>并将结果存储到一个名为“myfile”的变量中。然后，将这个变量的内容写入文件。
&nbsp;
&nbsp;
<strong>2、使用wget</strong>
<img src="/common/1610778343748-09faf52c-5312-43c3-82d9-6677c180a7a6.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
你还可以</strong>使用Python的wget模块从一个URL下载文件。<strong>你可以使用pip按以下命令安装wget模块:
&nbsp;
考虑以下代码，我们将使用它下载Python的logo图像。
<img src="/common/1610778343765-fd191451-9692-48ec-a739-dd607e54d341.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
在这段代码中，URL和路径(图像将存储在其中)被传递给</strong>wget模块的download方法。</strong>
&nbsp;
&nbsp;
&nbsp;
<strong>3、下载重定向的文件</strong>
&nbsp;
在本节中，你将学习如何**使用requests从一个URL下载文件，**该URL会被重定向到另一个带有一个.pdf文件的URL。该URL看起来如下:
<img src="/common/1610778343759-e7297c57-e2bd-428f-a484-0c5e82c9dac4.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
<strong>要下载这个pdf文件，请使用以下代码:</strong>
&nbsp;
<img src="/common/1610778343761-59dedd43-16ec-4099-b54d-51dc0c68e60b.png" alt="image.png" loading="lazy">
&nbsp;
在这段代码中，我们第一步指定的是URL。然后，**我们使用request模块的get方法来获取该URL。<strong>在get方法中，我们将allow_redirects设置为True，这将允许</strong>URL中的重定向，<strong>并且重定向后的内容将被分配给变量myfile。
&nbsp;
最后，我们打开一个文件来写入获取的内容。
&nbsp;
&nbsp;
&nbsp;
<strong>4、分块下载大文件</strong>
&nbsp;
<strong>考虑下面的代码:</strong>
&nbsp;
<img src="/common/1610778343776-b9e10022-f89e-4033-949a-b06c00fa774f.png" alt="image.png" loading="lazy">
&nbsp;
首先，我们像以前一样使用requests模块的get方法，但是这一次，<strong>我们将把stream属性设置为True。</strong>
&nbsp;
接着，我们在当前工作目录中创建一个名为PythonBook.pdf的文件，并打开它进行写入。
&nbsp;
然后，我们指定每次要下载的块大小。<strong>我们已经将其设置为1024字节，接着遍历每个块，<strong>并在文件中写入这些块，直到块结束。
&nbsp;
不漂亮吗?不要担心，稍后我们将显示一个下载过程的进度条。
&nbsp;
&nbsp;
&nbsp;
<strong>5、下载多个文件(并行/批量下载)</strong>
&nbsp;
<strong>要同时下载多个文件，请导入以下模块:</strong>
<img src="/common/1610778343765-3184ea7d-819d-45ed-8d0d-17037b22e2fe.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
我们导入了</strong>os和time</strong>模块来检查下载文件需要多少时间。ThreadPool模块允许你使用池运行多个线程或进程。
&nbsp;
让我们创建一个简单的函数，将响应分块发送到一个文件:
&nbsp;
<img src="/common/1610778343763-b3c4f856-fa3b-4959-ac25-0fefd35876a6.png" alt="image.png" loading="lazy">
&nbsp;
<strong>这个URL是一个二维数组，它指定了你要下载的页面的路径和URL。</strong>
<img src="/common/1610778343822-444327e9-4732-4c51-a93f-32428e973543.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
就像在前一节中所做的那样，我们将这个</strong>URL传递给requests.get。**最后，我们打开文件(URL中指定的路径)并写入页面内容。
&nbsp;
现在，我们可以分别为每个URL调用这个函数，我们也可以同时为所有URL调用这个函数。<strong>让我们在for循环中分别为每个URL调用这个函数，<strong>注意计时器:
&nbsp;
<img src="/common/1610778343778-62ab95e4-75f8-4325-86bb-7597318cf883.png" alt="image.png" loading="lazy">
&nbsp;
<strong>现在，使用以下代码行替换for循环：</strong>
&nbsp;
<img src="/common/1610778343762-b1946719-292a-44d3-861d-37e7b3645284.png" alt="image.png" loading="lazy">
&nbsp;
运行该脚本。
&nbsp;
&nbsp;
&nbsp;
<strong>6、使用进度条进行下载</strong>
&nbsp;
进度条是clint模块的一个UI组件。输入以下命令来安装clint模块：
&nbsp;
<img src="/common/1610778343766-aacb2c5a-eb96-42ac-ba31-feb0ac5f1364.png" alt="image.png" loading="lazy">
&nbsp;
<strong>考虑以下代码:</strong>
&nbsp;
<img src="/common/1610778343828-06ea2c0f-b88c-4a5f-b1d7-7e0fd38c97bf.png" alt="image.png" loading="lazy">
&nbsp;
在这段代码中，我们首先导入了requests模块，然后，我们从clint.textui导入了进度组件。唯一的区别是</strong>在for循环中。<strong>在将内容写入文件时，我们使用了进度条模块的bar方法。
&nbsp;
&nbsp;
&nbsp;
<strong>7、使用urllib下载网页</strong>
&nbsp;
在本节中，我们将使用urllib下载一个网页。
&nbsp;
urllib库是Python的标准库，因此你不需要安装它。
&nbsp;
<strong>以下代码行可以轻松地下载一个网页:</strong>
&nbsp;
<img src="/common/1610778343816-d5247770-85b2-40d8-9cd4-061bf247de00.png" alt="image.png" loading="lazy">
&nbsp;
在这里指定</strong>你想将文件保存为什么以及你想将它存储在哪里的URL。</strong>
&nbsp;
<img src="/common/1610778343797-c4102459-5225-4477-9863-d9bb0e54ecc9.png" alt="image.png" loading="lazy">
&nbsp;
在这段代码中，我们使用了urlretrieve方法并传递了文件的URL，以及保存文件的路径。文件扩展名将是.html。
&nbsp;
&nbsp;
&nbsp;
<strong>8、通过代理下载</strong>
&nbsp;
如果你需要使用代理下载你的文件，你可以使用urllib模块的ProxyHandler。<strong>请看以下代码：</strong>
&nbsp;
<img src="/common/1610778343798-a02a5a5c-40c4-4016-826c-94b6dfbe74e5.png" alt="image.png" loading="lazy">
&nbsp;
在这段代码中，我们创建了代理对象，**并通过调用urllib的build_opener方法来打开该代理，<strong>并传入该代理对象。然后，我们创建请求来获取页面。
&nbsp;
此外，你还可以按照官方文档的介绍来使用requests模块:
&nbsp;
<img src="/common/1610778343798-6e09b8c7-791b-4333-9a94-f44baa9f073c.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
你只需要</strong>导入requests模块并创建你的代理对象。**然后，你就可以获取文件了。
&nbsp;
&nbsp;
<strong>9、使用urllib3</strong>
&nbsp;
urllib3是urllib模块的改进版本。你可以使用pip下载并安装它:
<img src="/common/1610778343803-f9b3c073-9ff0-4d3a-b589-848f141dfb0a.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
我们将通过使用urllib3来获取一个网页并将它存储在一个文本文件中。
&nbsp;
<strong>导入以下模块:</strong>
&nbsp;
<img src="/common/1610778343801-8030c639-fe75-479d-a45b-30d77db3919e.png" alt="image.png" loading="lazy">
&nbsp;
在处理文件时，我们使用了shutil模块。
&nbsp;
<strong>现在，我们像这样来初始化URL字符串变量：</strong>
&nbsp;
<img src="/common/1610778343802-cf65bb92-45b9-4007-8615-f1a0aea05918.png" alt="image.png" loading="lazy">
&nbsp;
然后，我们使用了urllib3的PoolManager ，<strong>它会跟踪必要的连接池。</strong>
&nbsp;
<img src="/common/1610778343800-9d46b51b-b9d4-4a6b-a8ef-47ed2f7bc4fc.png" alt="image.png" loading="lazy">
&nbsp;
<strong>创建一个文件:</strong>
&nbsp;
filename="test.text";
&nbsp;
最后，我们发送一个GET请求来获取该URL并打开一个文件，接着将响应写入该文件:
&nbsp;
<img src="/common/1610778343804-e15e0642-718b-4706-9e14-4af07b3925f5.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
&nbsp;
<strong>10、使用Boto3从S3下载文件</strong>
&nbsp;
要从Amazon S3下载文件，你可以使用Python boto3模块。
&nbsp;
<strong>在开始之前，你需要使用pip安装awscli模块:</strong>
<img src="/common/1610778343813-f9046baa-e834-43d1-b616-1e5672676d87.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
<strong>对于AWS配置，请运行以下命令：</strong>
&nbsp;
<img src="/common/1610778343809-1738c160-3a47-4447-9f18-fcb516f013dd.png" alt="image.png" loading="lazy">
&nbsp;
<strong>现在，按以下命令输入你的详细信息：</strong>
&nbsp;
<img src="/common/1610778343808-f8c180a4-c861-48a8-a4bd-03310d63193f.png" alt="image.png" loading="lazy">
&nbsp;
要从Amazon S3下载文件，你需要导入boto3和botocore。Boto3是一个Amazon SDK，**它允许Python访问Amazon web服务(如S3)。**Botocore提供了与Amazon web服务进行交互的命令行服务。
&nbsp;
Botocore自带了awscli。要安装boto3，请运行以下命令:
&nbsp;
<img src="/common/1610778343804-907b74c5-cea9-41ce-8f6e-ccaf91b9889d.png" alt="image.png" loading="lazy">
&nbsp;
<strong>现在，导入这两个模块：</strong>
&nbsp;
<img src="/common/1610778343820-27b66d11-d25f-4f16-8476-79c62aa5f8ca.png" alt="image.png" loading="lazy">
&nbsp;
<strong>在从Amazon下载文件时，我们需要三个参数</strong>：
Bucket名称
你需要下载的文件名称
文件下载之后的名称
&nbsp;
<strong>初始化变量：</strong>
&nbsp;
<img src="/common/1610778343804-9fefbd38-d739-4e4a-812f-6dad2eb4d119.png" alt="image.png" loading="lazy">
&nbsp;
现在，**我们初始化一个变量来使用会话的资源。<strong>为此，我们将调用boto3的resource()方法并传入服务，即s3:
&nbsp;
<img src="/common/1610778343809-0d275af9-4c2b-4280-ae0f-90d31cf4925e.png" alt="image.png" loading="lazy">
&nbsp;
最后，使用download_file方法下载文件并传入变量:
&nbsp;
<img src="/common/1610778343806-4858e468-a9ee-4b76-afad-aab3c7b95011.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
<strong>11、使用asyncio</strong>
&nbsp;
asyncio模块</strong>主要用于处理系统事件。**它围绕一个事件循环进行工作，该事件循环会等待事件发生，然后对该事件作出反应。这个反应可以是调用另一个函数。这个过程称为事件处理。asyncio模块使用协同程序进行事件处理。
&nbsp;
要使用asyncio事件处理和协同功能，我们将导入asyncio模块:
<img src="/common/1610778343806-9e25b252-5855-4f0c-aba1-1dfa3956af4a.png" alt="image.png" loading="lazy">
&nbsp;
&nbsp;
<strong>现在，像这样定义asyncio协同方法：</strong>
&nbsp;
<img src="/common/1610778343815-e10c9d64-c6f5-49b1-9fa0-35bd547a066e.png" alt="image.png" loading="lazy">
&nbsp;
关键字async表示这是一个原生asyncio协同程序。在协同程序的内部，我们有一个await关键字，它会返回一个特定的值。我们也可以使用return关键字。
&nbsp;
现在，让我们使用协同创建一段代码来从网站下载一个文件:
&nbsp;
<img src="/common/1610778343889-1cd8b70b-9e4f-43b4-b4cd-384824ab1e4c.png" alt="image.png" loading="lazy">
&nbsp;
在这段代码中，<strong>我们创建了一个异步协同函数，它会下载我们的文件并返回一条消息。</strong>
&nbsp;
然后，我们使用另一个异步协同程序调用main_func，**它会等待URL并将所有URL组成一个队列。**asyncio的wait函数会等待协同程序完成。
&nbsp;
现在，为了启动协同程序，我们必须使用asyncio的get_event_loop()方法将协同程序放入事件循环中，最后，我们使用asyncio的run_until_complete()方法执行该事件循环。</p>`,r:{minutes:6.93,words:2079},t:"下载",y:"a"}}],["/otherLanguage/python/jichuyufa/xpath.html",{loader:()=>a(()=>import("./xpath.html-CcFcvx-x.js"),__vite__mapDeps([968,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>XPath(XML Path Language) 是一门在XML和HTML文档中查找信息的语言，可以用来在XML和HTML文档中对元素和属性进行遍历
<strong>选取节点</strong>
XPath使用路径表达式来选取XML文档中的节点或者节点集，这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似</p>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td>bookstore</td>
<td>选取bookstore下所有的子节点</td>
</tr>
<tr>
<td>/</td>
<td>如果是在最前面，代表从根节点选取，否则选择某节点下的某个节点</td>
<td>/bookstore</td>
<td>选取根元素下所有的bookstore节点</td>
</tr>
<tr>
<td>//</td>
<td>从全局节点中选择节点，随意在哪个位置</td>
<td>//book</td>
<td>从全局节点中找到所有的book节点</td>
</tr>
<tr>
<td>@</td>
<td>选取某个节点的属性</td>
<td>//book[@price]</td>
<td>选择所有拥有price属性的book节点</td>
</tr>
<tr>
<td>.</td>
<td>当前节点</td>
<td>./a</td>
<td>选取当前节点下的a标签</td>
</tr>
</tbody>
</table>`,r:{minutes:1.8,words:540},t:"xpath",y:"a"}}],["/otherLanguage/xml/caozuoxml/caozuoxml.html",{loader:()=>a(()=>import("./caozuoxml.html-Cufo5vpY.js"),__vite__mapDeps([969,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<h2>前台</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>  var xmlhttp<span class="token punctuation">;</span>
        <span class="token keyword">function</span> loadXMLDoc<span class="token punctuation">(</span>url<span class="token punctuation">)</span> {
            xmlhttp <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> {
                <span class="token comment">// code for all new browsers</span>
                xmlhttp <span class="token operator">=</span> new XMLHttpRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            } <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> {
                <span class="token comment">// code for IE5 and IE6</span>
                xmlhttp <span class="token operator">=</span> new ActiveXObject<span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            }
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp <span class="token operator">!=</span> <span class="token boolean">null</span><span class="token punctuation">)</span> {
                xmlhttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> state_Change<span class="token punctuation">;</span>
                xmlhttp<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true的意思是 Async=true</span>
                xmlhttp<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            } <span class="token keyword">else</span> {
                alert<span class="token punctuation">(</span><span class="token string">"您的浏览器不支持XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            }
        }
        <span class="token keyword">function</span> state_Change<span class="token punctuation">(</span><span class="token punctuation">)</span> {
 
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> {
                <span class="token comment">//获取指定节点</span>
                var b <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span><span class="token comment">//获取xml文档所有信息</span>
                var c <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseXML<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">"School"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取父节点</span>
                var d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token comment">//获取属性值</span>
                x <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseXML<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>getElementsByTagName<span class="token punctuation">(</span><span class="token string">"BOOK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                $<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>each<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>si<span class="token punctuation">,</span> sv<span class="token punctuation">)</span> {
                    var a <span class="token operator">=</span> sv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token comment">//获取id属性值</span>
                }<span class="token punctuation">)</span><span class="token punctuation">;</span>
            }
        }
</code></pre></div>`,r:{minutes:3.24,words:972},t:"操作XML",y:"a"}}],["/otherLanguage/xml/caozuoxml/douquxml.html",{loader:()=>a(()=>import("./douquxml.html-BZJf_dcs.js"),__vite__mapDeps([970,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> xml <span class="token operator">=</span> "<span class="token operator">&lt;</span>ROWID<span class="token operator">&gt;</span>
　　　　　　　　　　<span class="token operator">&lt;</span>row<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>patName<span class="token operator">&gt;</span>刘XX<span class="token operator">&lt;</span><span class="token operator">/</span>patName<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>sex<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>sex<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>age<span class="token operator">&gt;</span><span class="token number">50</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>examId<span class="token operator">&gt;</span><span class="token number">16377042</span><span class="token operator">||</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>examId<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>patientId<span class="token operator">&gt;</span><span class="token number">16543990</span><span class="token operator">&lt;</span><span class="token operator">/</span>patientId<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>lodgeDept<span class="token operator">&gt;</span>消化内科<span class="token operator">&lt;</span><span class="token operator">/</span>lodgeDept<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>lodgeDoctor<span class="token operator">&gt;</span>陆XX<span class="token operator">&lt;</span><span class="token operator">/</span>lodgeDoctor<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>bedNo<span class="token operator">&gt;</span><span class="token operator">+</span><span class="token number">28</span><span class="token operator">&lt;</span><span class="token operator">/</span>bedNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>outHosNo<span class="token operator">&gt;</span>OP0013927016<span class="token operator">&lt;</span><span class="token operator">/</span>outHosNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>inHosNo<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>inHosNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>birthday<span class="token operator">&gt;</span><span class="token number">1968</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>birthday<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>clinicDiag<span class="token operator">&gt;</span>测试临床诊断<span class="token operator">&lt;</span><span class="token operator">/</span>clinicDiag<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>OEORIDate<span class="token operator">&gt;</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>OEORIDate<span class="token operator">&gt;</span>
　　　　　　　　　　<span class="token operator">&lt;</span><span class="token operator">/</span>row<span class="token operator">&gt;</span>
　　　　　　　　　　<span class="token operator">&lt;</span>row<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>patName<span class="token operator">&gt;</span>刘XX<span class="token operator">&lt;</span><span class="token operator">/</span>patName<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>sex<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>sex<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>age<span class="token operator">&gt;</span><span class="token number">50</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>examId<span class="token operator">&gt;</span><span class="token number">16377042</span><span class="token operator">||</span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>examId<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>patientId<span class="token operator">&gt;</span><span class="token number">16543990</span><span class="token operator">&lt;</span><span class="token operator">/</span>patientId<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>lodgeDept<span class="token operator">&gt;</span>消化内科<span class="token operator">&lt;</span><span class="token operator">/</span>lodgeDept<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>lodgeDoctor<span class="token operator">&gt;</span>陆XX<span class="token operator">&lt;</span><span class="token operator">/</span>lodgeDoctor<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>bedNo<span class="token operator">&gt;</span>无床号<span class="token operator">&lt;</span><span class="token operator">/</span>bedNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>outHosNo<span class="token operator">&gt;</span>OP0013927016<span class="token operator">&lt;</span><span class="token operator">/</span>outHosNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>inHosNo<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>inHosNo<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>birthday<span class="token operator">&gt;</span><span class="token number">1968</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>birthday<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>clinicDiag<span class="token operator">&gt;</span>慢性胃炎；肠道功能紊乱<span class="token operator">&lt;</span><span class="token operator">/</span>clinicDiag<span class="token operator">&gt;</span>
　　　　　　　　　　　　<span class="token operator">&lt;</span>OEORIDate<span class="token operator">&gt;</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">&lt;</span><span class="token operator">/</span>OEORIDate<span class="token operator">&gt;</span>
　　　　　　　　　　<span class="token operator">&lt;</span><span class="token operator">/</span>row<span class="token operator">&gt;</span>
　　　　　　　　<span class="token operator">&lt;</span><span class="token operator">/</span>ROWID<span class="token operator">&gt;</span>"<span class="token punctuation">;</span>



			<span class="token class-name">XmlDocument</span> xmldoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            xmldoc<span class="token punctuation">.</span><span class="token function">LoadXml</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DateTime</span> date <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span><span class="token string">"2018-01-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XmlNodeList</span> PatInfo <span class="token operator">=</span> xmldoc<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">"ROWID//row"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">XmlElement</span> element <span class="token keyword">in</span> PatInfo<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">DateTime</span> dt <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"OEORIDate"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dt<span class="token operator">&gt;</span>date<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    date <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"OEORIDate"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    textBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"patientId"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>

                    textBox2<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"patName"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox3<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox4<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox12<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"examId"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox6<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"inHosNo"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>

                    textBox5<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>

                    textBox7<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"outHosNo"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox8<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"bedNo"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox9<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"clinicDiag"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
           	         textBox10<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"lodgeDept"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                    textBox11<span class="token punctuation">.</span>Text <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">GetElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"lodgeDoctor"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>              
            <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.82,words:247},t:"读取xml",y:"a"}}],["/otherLanguage/xml/caozuoxml/xmlkuzhongchazhaoshuju.html",{loader:()=>a(()=>import("./xmlkuzhongchazhaoshuju.html-Sl1Llku9.js"),__vite__mapDeps([971,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["otherLanguage"],g:["无"],o:!0,e:`<p>已知一个xml文件，格式如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token punctuation">?</span><span class="token class-name">xml</span> version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> <span class="token punctuation">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>root<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">city</span> name<span class="token operator">=</span><span class="token string">"410xxxxx"</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Issuing<span class="token operator">&gt;</span>aaaaa<span class="token operator">&lt;</span><span class="token operator">/</span>Issuing<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Issuing<span class="token operator">&gt;</span>bbbbb<span class="token operator">&lt;</span><span class="token operator">/</span>Issuing<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>city<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.73,words:218},t:"xml库中查找数据",y:"a"}}],["/middleware/authorize/identityserver4/chijiuhuabiaoshuiming.html",{loader:()=>a(()=>import("./chijiuhuabiaoshuiming.html-Dj6cjrd8.js"),__vite__mapDeps([972,1])),meta:{a:"azrng",d:16514496e5,l:"2022年5月2日",c:["middleware"],g:["无"],o:!0,e:`<p>多个上下文：有两种类型的数据需要持久化到数据库中</p>
<h4>官方自带上下文</h4>
<h5>ConfigurationDbContext</h5>
<p>配置数据(资源、客户端、身份)
<img src="/common/1620442383916-8bb2f13d-a760-4c42-93cd-182f68a9ef45.png" alt="image.png" loading="lazy">
生成迁移文件</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">add-migration</span> InitialIdentityServerConfigurationDbMigration <span class="token operator">-</span>c ConfigurationDbContext <span class="token operator">-</span>o <span class="token keyword">Data</span><span class="token operator">/</span>Migrations/IdentityServer/ConfigurationDb
</code></pre></div>`,r:{minutes:.61,words:183},t:"持久化表说明",y:"a"}}],["/middleware/authorize/identityserver4/issue.html",{loader:()=>a(()=>import("./issue.html-D8wC-Ht1.js"),__vite__mapDeps([973,1])),meta:{a:"azrng",d:16438464e5,l:"2022年2月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>User is not authenticated</h2>
<p>ids4登录不上，显示的错误日志是:Showing login: User is not authenticated</p>
<p>原因：
由于最新版的Chrome的Cookie策略导致写Cookie失败,从而导致用户认证的失败.
SameSite=strict:对于来自不同于源站的站点发出的请求，不发送cookie,为了防止CSRF攻击。
SameSite=lax:类似于strict，但是当用户有意地通过单击链接或发送表单启动请求时，就会发送cookies。不会在脚本请求时发送。
SameSite=none:无论请求来自哪里都可以(但是需要https)。</p>`,r:{minutes:.71,words:214},t:"问题",y:"a"}}],["/middleware/authorize/identityserver4/kuaisudajianxiangmu.html",{loader:()=>a(()=>import("./kuaisudajianxiangmu.html-DoV_LLr_.js"),__vite__mapDeps([974,1])),meta:{a:"azrng",d:16767648e5,l:"2023年2月19日",c:["middleware"],g:["无"],o:!0,e:`<blockquote>
<p>以下的项目示例都是基于IdentityServer4 「4.x」版本以上进行说明。
示例环境：VS2022+.Net6
本文内容模仿自：公众号【元说技术】</p>
</blockquote>
<h2>1. 快速搭建项目</h2>
<h3>1.1 创建项目</h3>
<p>建立一个空的Asp.Net Core项目(AuthCenterInMemory) ，使用Empty空模板
<img src="/common/1651303351185-79194594-6ce2-4469-96b7-43151af5237e.png" alt="image.png" loading="lazy"></p>`,r:{minutes:10.11,words:3033},t:"快速搭建项目",y:"a"}}],["/middleware/authorize/identityserver4/",{loader:()=>a(()=>import("./index.html-BXRujQ8P.js"),__vite__mapDeps([975,1])),meta:{a:"azrng",d:1651536e6,l:"2022年5月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><code>IdentityServer4</code>是一个用于<code>ASP.NET Core</code>的<code>OpenID Connect</code>和<code>OAuth 2.0</code>框架，可以做的功能有SSO（单点登陆功能）、Api访问控制、身份认证服务等。它实现了OpenID Connect和OAuth 2.0协议。</p>
<h2>特点</h2>
<p>认证服务
适用于所有应用程序（web, native, mobile, services）的集中登录逻辑和工作流程。IdentityServer是OpenID Connect 认证的实现。
单点登录/注销
多个应用程序单点登录和注销操作。
接口访问控制
为各种类型的客户端颁发API的访问令牌，例如服务器到服务器、Web应用程序，SPA、本地应用和移动应用程序。
联合网关
支持Azure Active Directory，Google，Facebook等外部身份提供商。这可以保护您的应用程序免受如何连接到这些外部提供商的详细信息的影响。
专注于定制
最重要的部分 - IdentityServer的许多方面都可以根据您的需求进行定制。由于IdentityServer是一个框架而不是现成的产品或SaaS，因此您可以编写代码以使系统适应您的方案。
成熟的开源
IdentityServer使用的Apache 2开源协议，允许在其上构建商业产品。它也是.NET Foundation的一部分，它提供治理和法律支持。</p>`,r:{minutes:8.83,words:2650},t:"说明",y:"a"}}],["/middleware/authorize/identityserver4/shujuchijiuhua.html",{loader:()=>a(()=>import("./shujuchijiuhua.html-BRD9aQfi.js"),__vite__mapDeps([976,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>前面的篇章介绍中，一些基础配置如API资源、客户端资源等数据以及使用过程中发放的令牌等操作数据，我们都是通过将操作数据和配置数据存储在内存中进行实现的，而在实际开发生产中，我们需要考虑如何处理数据持久化呢？
这时「IdentityServer4」具有良好的扩展性，其中一个可扩展点是用于「IdentityServer」所需数据的存储机制，进行持久化操作。
下面将如何配置「IdentityServer」以使用「EntityFramework」（EF）作为此数据的存储机制把这些数据存储到「MySql」数据库， 这样更符合我们实际生产环境的需求。</p>
<h2>8. 数据持久化</h2>`,r:{minutes:4.51,words:1352},t:"数据持久化",y:"a"}}],["/middleware/authorize/identityserver4/ui.html",{loader:()=>a(()=>import("./ui.html-NW9kBQcg.js"),__vite__mapDeps([977,1])),meta:{a:"azrng",d:16514496e5,l:"2022年5月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>官方模板</h2>
<p>官方为我们提供了一个快速启动的UI界面，我们只需要下载下来即可，这里有两个方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token number">1</span>、直接从这个地址下来下载，拷贝到项目中，一共三个文件夹；<span class="token comment">// https://github.com/IdentityServer/IdentityServer4.Quickstart.UI</span>

<span class="token number">2</span>、在当前文件夹中执行命令，自动下载；

iex <span class="token punctuation">(</span><span class="token punctuation">(</span>New<span class="token operator">-</span>Object System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DownloadString</span><span class="token punctuation">(</span>'https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>IdentityServer<span class="token operator">/</span>IdentityServer4<span class="token punctuation">.</span>Quickstart<span class="token punctuation">.</span>UI<span class="token operator">/</span>master<span class="token operator">/</span>getmaster<span class="token punctuation">.</span>ps1'<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:1.27,words:381},t:"可视化界面",y:"a"}}],["/middleware/authorize/identityserver4/ziyuanfuwurenzheng.html",{loader:()=>a(()=>import("./ziyuanfuwurenzheng.html-BiWs0Xej.js"),__vite__mapDeps([978,1])),meta:{a:"azrng",d:16514496e5,l:"2022年5月2日",c:["middleware"],g:["无"],o:!0,e:`<p>通过组件JwtBearer</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Authentication.JwtBearer"</span> Version<span class="token operator">=</span><span class="token string">"5.0.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.53,words:458},t:"资源服务认证",y:"a"}}],["/middleware/authorize/oauth/",{loader:()=>a(()=>import("./index.html-DNSK7QI8.js"),__vite__mapDeps([979,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>OAuth2.0是授权的行业标准协议，是一种授权机制、委托协议。可以让拥有资源的用户允许某一个应用程序代表他们来访问控制的资源，这个应用从资源所有者哪里获取授权(Authorization)和access_token，随后通过access_token代替密码来访问资源。</p>
<p>OAuth解决是Authorization问题，并不关心Authentication。
为了安全，OAuth2.0引入了两个措施</p>
<blockquote>
<p>1，Oauth2.0 要求，refresh token 一定是保存在客户端的服务器上的，而绝不能存放在狭义的客户端（例如移动 app、PC端软件） 上。调用 refresh 接口的时候，一定是从服务器到服务器的访问；
2，Oauth2.0 引入了 client_secret 机制。即每一个 client_id 都对应一个 client_secret。这个 client_secret 会在客户端申请 client_id 时，随 client_id 一起分配给客户端。客户端必须把 client_secret 妥善保管在服务器上，决不能泄露。刷新 access token 时，需要验证这个 client_secret。</p>
</blockquote>`,r:{minutes:7.95,words:2384},t:"概述",y:"a"}}],["/middleware/authorize/oauth/sample.html",{loader:()=>a(()=>import("./sample.html-CwvrpCAi.js"),__vite__mapDeps([980,1])),meta:{a:"azrng",d:16403904e5,l:"2021年12月25日",c:["middleware"],g:["无"],o:!0,e:`<p>OAuth 2.0授权流程
<img src="/common/1609839082992-3b30b76c-6dbd-4423-8e46-4d86b5f64667.png" alt="image.png" loading="lazy">
模拟场景：用户听落网，但需要登录才能收藏期刊，然后用快捷登录方式，使用微博的账号和密码登录后，落网就可以访问到微博的账号信息等，并且在落网也已登录，最后用户就可以收藏期刊了。
结合上面的场景，详细说下 OAuth 2.0 的运行流程：</p>
<ul>
<li>(A) 用户登录落网，落网询求用户的登录授权（真实操作是用户在落网登录）。</li>
<li>(B) 用户同意登录授权（真实操作是用户打开了快捷登录，用户输入了微博的账号和密码）。</li>
<li>(C) 由落网跳转到微博的授权页面，并请求授权（微博账号和密码在这里需要）。</li>
<li>(D) 微博验证用户输入的账号和密码，如果成功，则将     access_token 返回给落网。</li>
<li>(E) 落网拿到返回的     access_token，请求微博。</li>
<li>(F) 微博验证落网提供的     access_token，如果成功，则将微博的账户信息返回给落网。</li>
</ul>`,r:{minutes:9.36,words:2807},t:"举例",y:"a"}}],["/middleware/authorize/oauth/sichongshouquanmoshi.html",{loader:()=>a(()=>import("./sichongshouquanmoshi.html-DxjLpELw.js"),__vite__mapDeps([981,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>OAuth2.0 定义了四种授权模式：
Implicit：简化模式；直接通过浏览器的链接跳转申请令牌。
Client Credentials：客户端凭证模式；该方法通常用于服务器之间的通讯；该模式仅发生在Client与Identity Server之间。
Resource Owner Password Credentials：密码模式
Authorization Code：授权码模式；（推荐）</p>
<h3>Client Credentials 客户端凭证模式</h3>
<p><img src="/common/1614393600194-ec343716-6367-41fd-b3cf-36681a045873.png" alt="image.png" loading="lazy">
&nbsp;
客户端凭证模式，是最简单的授权模式，因为授权的流程仅发生在Client与Identity Server之间。
该模式的适用场景为<strong>服务器与服务器之间的通信</strong>。比如对于一个电子商务网站，将订单和物流系统分拆为两个服务分别部署。订单系统需要访问物流系统进行物流信息的跟踪，物流系统需要访问订单系统的快递单号信息进行物流信息的定时刷新。而这两个系统之间服务的授权就可以通过这种模式来实现。
这种模式直接根据client的id和密钥即可获取token，无需用户参与
这种模式比较适合消费api的后端服务，比如拉取一组用户信息等
不支持refresh token，主要是没有必要
请求参数：请求头添加上 client_id和client_secret的basic编码，请求体添加grant_type必须设置为client_credentials
<img src="/common/1556768624749-6acd7f83-4f8e-4238-8aa9-abb45b0f8807.png" alt="" loading="lazy"></p>`,r:{minutes:4.56,words:1368},t:"四种授权模式",y:"a"}}],["/middleware/authorize/openiddict/",{loader:()=>a(()=>import("./index.html-DfG-4RXA.js"),__vite__mapDeps([982,1])),meta:{a:"azrng",d:16599168e5,l:"2022年8月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>官网：<a href="https://documentation.openiddict.com/" target="_blank" rel="noopener noreferrer">https://documentation.openiddict.com/</a>
登录以及详细流程：<a href="https://www.cnblogs.com/liyouming/p/15772403.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/liyouming/p/15772403.html</a></p>`,r:{minutes:.15,words:46},t:"说明",y:"a"}}],["/middleware/fullTextSearch/elasticsearch/install.html",{loader:()=>a(()=>import("./install.html-DEg61pcp.js"),__vite__mapDeps([983,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["middleware"],g:["install","es"],o:!0,e:`<h2>概述</h2>
<p>在使用ES的时候，Elasticsearch 和 Kibana 这两个容器会一起使用。Elasticsearch 用于存储和处理数据，而 Kibana 则负责可视化和分析这些数据，提供更直观和易于理解的数据呈现方式。</p>
<h2>安装方案</h2>
<h3>docker</h3>
<p>创建elasticsearch.yml文件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cluster.name: <span class="token string">"docker-cluster"</span>
<span class="token comment">## http.host: 0.0.0.0</span>

<span class="token comment">## 网络绑定</span>
network.host: <span class="token number">0.0</span>.0.0

<span class="token comment">## 以单一节点模式启动</span>
discovery.type: single-node

<span class="token comment">## 跨域</span>
http.cors.enabled:  <span class="token boolean">true</span> 
http.cors.allow-origin:  <span class="token string">"*"</span>
</code></pre></div>`,r:{minutes:3.07,words:922},t:"安装",y:"a"}}],["/middleware/fullTextSearch/elasticsearch/operator.html",{loader:()=>a(()=>import("./operator.html-CZV3oM89.js"),__vite__mapDeps([984,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["middleware"],g:["es","operator"],o:!0,e:`<h2>准备</h2>
<p>需要提前安装好es环境</p>
<h2>组件</h2>
<p>创建项目安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"NEST"</span> Version<span class="token operator">=</span><span class="token string">"7.16.0"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.72,words:516},t:"操作",y:"a"}}],["/middleware/fullTextSearch/elasticsearch/",{loader:()=>a(()=>import("./index.html-nq3VpyKV.js"),__vite__mapDeps([985,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["es","readme"],o:!0,e:`<h2>前言</h2>
<p>关系型数据库不适合检索，因为会导致索引失效，另外全表扫描效率低，并且还不能分词、联想，得到的不是期望的结果。</p>
<h2>概述</h2>
<p>Elasticsearch：<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener noreferrer">https://www.elastic.co/cn/products/elasticsearch</a><br>
elasticsearch中文社区：<a href="https://elasticsearch.cn/" target="_blank" rel="noopener noreferrer">https://elasticsearch.cn/</a></p>`,r:{minutes:10.93,words:3278},t:"说明",y:"a"}}],["/middleware/fullTextSearch/elasticsearch/struct.html",{loader:()=>a(()=>import("./struct.html-DELNR6MS.js"),__vite__mapDeps([986,1])),meta:{a:"azrng",d:17066592e5,l:"2024年1月31日",c:["middleware"],g:["es","struct"],o:!0,e:`<h2>数据结构</h2>
<p>以数据库为对比，比较数据库和es的结构</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>ElasticSearch</th>
</tr>
</thead>
<tbody>
<tr>
<td>database 库</td>
<td>index 索引</td>
</tr>
<tr>
<td>table 表</td>
<td>type 类型(7.x版本Type名称固定且默认为_doc)</td>
</tr>
<tr>
<td>row 行</td>
<td>document 文档(Json格式)</td>
</tr>
<tr>
<td>column 列</td>
<td>field 字段</td>
</tr>
<tr>
<td>chema 表结构</td>
<td>mapping 映射</td>
</tr>
<tr>
<td>SQL</td>
<td>DSL</td>
</tr>
<tr>
<td>select</td>
<td>GET</td>
</tr>
<tr>
<td>update</td>
<td>PUT</td>
</tr>
<tr>
<td>delete</td>
<td>delete</td>
</tr>
</tbody>
</table>`,r:{minutes:.5,words:151},t:"数据结构",y:"a"}}],["/middleware/fullTextSearch/lucene/lucene-searchextensions.html",{loader:()=>a(()=>import("./lucene-searchextensions.html-DS2CbDSO.js"),__vite__mapDeps([987,1])),meta:{a:"azrng",d:16654464e5,l:"2022年10月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>使用勤快哥封装的第三方全文检索包SearchExtensions，该包基于EntityFrameworkCore和Lucene.NET实现的全文检索搜索引擎，可轻松实现高性能的全文检索。可以轻松应用于任何基于EntityFrameworkCore的实体框架数据库。</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>PM<span class="token operator">&gt;</span> Install<span class="token operator">-</span>Package Masuit<span class="token punctuation">.</span>LuceneEFCore<span class="token punctuation">.</span>SearchEngine_int
PM<span class="token operator">&gt;</span> Install<span class="token operator">-</span>Package Masuit<span class="token punctuation">.</span>LuceneEFCore<span class="token punctuation">.</span>SearchEngine_long
PM<span class="token operator">&gt;</span> Install<span class="token operator">-</span>Package Masuit<span class="token punctuation">.</span>LuceneEFCore<span class="token punctuation">.</span>SearchEngine_string
PM<span class="token operator">&gt;</span> Install<span class="token operator">-</span>Package Masuit<span class="token punctuation">.</span>LuceneEFCore<span class="token punctuation">.</span>SearchEngine_Guid
<span class="token preprocessor property">#根据你的项目情况，选择对应的后缀版本，提供了4个主键版本的库，后缀为int的代表主键是基于int自增类型的，后缀为Guid的代表主键是基于Guid类型的...</span>
</code></pre></div>`,r:{minutes:3.77,words:1131},t:"Lucene-SearchExtensions",y:"a"}}],["/middleware/fullTextSearch/lucene/lucene_net.html",{loader:()=>a(()=>import("./lucene_net.html-DfgKDoPI.js"),__vite__mapDeps([988,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Lucene是apache软件基金会发布的一个开放源代码的全文检索引擎工具包，是一个全文检索引擎架构，提供了完整的创建索引和查询索引，以及部分文本分析的引擎。Lucene.net是Apache软件基金会赞助的开源项目，基于Apache License协议。</p>
<p>Lucene是根据关健字来搜索的文本搜索工具，只能在某个网站内部搜索文本内容，不能跨网站搜索。</p>
<p>Lucene.net并不是一个爬行搜索引擎，也不会自动地索引内容。我们得先将要索引的文档中的文本抽取出来，然后再将其加到Lucene.net索引中。标准的步骤是先初始化一个Analyzer、打开一个IndexWriter、然后再将文档一个接一个地加进去。一旦完成这些步骤，索引就可以在关闭前得到优化，同时所做的改变也会生效。这个过程可能比开发者习惯的方式更加手工化一些，但却在数据的索引上给予你更多的灵活性，而且其效率也很高。</p>`,r:{minutes:4.44,words:1332},t:"Lucene.net",y:"a"}}],["/middleware/fullTextSearch/solr/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-BGAb0qqc.js"),__vite__mapDeps([989,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Solr它是一种开放源码的、基于 Lucene Java 的搜索服务器，易于加入到 Web 应用程序中。</p>
<h2>Nuget包</h2>
<p>.Net的Solr库： <a href="https://github.com/SolrNet/SolrNet" target="_blank" rel="noopener noreferrer">https://github.com/SolrNet/SolrNet</a></p>
`,r:{minutes:.23,words:69},t:"介绍",y:"a"}}],["/middleware/fullTextSearch/meilisearch/",{loader:()=>a(()=>import("./index.html-p-4Kt1mg.js"),__vite__mapDeps([990,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>轻量美丽的搜索引擎——MeiliSearch：<a href="https://mp.weixin.qq.com/s/pCHT2cgXIFVdB2dVJ88d3g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/pCHT2cgXIFVdB2dVJ88d3g</a></p>
`,r:{minutes:.14,words:42},t:"说明",y:"a"}}],["/middleware/grpc/bushu/kaifabushu.html",{loader:()=>a(()=>import("./kaifabushu.html-DEVQCaef.js"),__vite__mapDeps([991,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<p>学习去打包证书并且部署：<a href="https://mp.weixin.qq.com/s/JHusf-4jCev-V9dCqsBt3A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/JHusf-4jCev-V9dCqsBt3A</a></p>
`,r:{minutes:.16,words:47},t:"开发部署",y:"a"}}],["/middleware/grpc/rpckuangjia/dotnetcorerpc.html",{loader:()=>a(()=>import("./dotnetcorerpc.html-BfJ5X6zM.js"),__vite__mapDeps([992,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一念大佬RPC框架：<a href="https://github.com/softlgl/DotNetCoreRpc" target="_blank" rel="noopener noreferrer">https://github.com/softlgl/DotNetCoreRpc</a></p>
`,r:{minutes:.13,words:38},t:"DotNetCoreRpc",y:"a"}}],["/middleware/office/csv/csvfile.html",{loader:()=>a(()=>import("./csvfile.html-BaqEvJJj.js"),__vite__mapDeps([993,1])),meta:{a:"azrng",d:16562016e5,l:"2022年6月26日",c:["middleware"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp4</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// CSV文件读写工具类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsvFile</span>
    <span class="token punctuation">{</span>
        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 写CSV文件</span>
        <span class="token comment">//字段数组转为CSV记录行</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fields <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            fields <span class="token operator">=</span> fields<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>field <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>field <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> field <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token comment">//所有字段都加双引号</span>
                field <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"\\"{0}\\""</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"\\""</span><span class="token punctuation">,</span> <span class="token string">"\\"\\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//不简化</span>
                <span class="token comment">//field = field.Replace("\\"", "\\"\\"");</span>
                <span class="token comment">//if (field.IndexOfAny(new char[] { ',', '"', ' ', '\\r' }) != -1)</span>
                <span class="token comment">//{</span>
                <span class="token comment">//    field = string.Format("\\"{0}\\"", field);</span>
                <span class="token comment">//}</span>
                <span class="token keyword">return</span> field<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}{1}"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> line<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//默认的字段转换方法</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetObjFields</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTitle<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTitle<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> fields<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 写CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>数据列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>append<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>追加记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>func<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字段转换方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Write</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">bool</span></span> append<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultEncoding <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                defaultEncoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                func <span class="token operator">=</span> GetObjFields<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">||</span> <span class="token operator">!</span>append<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> title <span class="token operator">=</span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> title<span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>obj <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读CSV文件（使用TextFieldParser）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 读CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>func<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字段解析规则<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultEncoding <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                defaultEncoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">TextFieldParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFieldParser</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                parser<span class="token punctuation">.</span>TextFieldType <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Delimited<span class="token punctuation">;</span>
                <span class="token comment">//设定逗号分隔符</span>
                parser<span class="token punctuation">.</span><span class="token function">SetDelimiters</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//设定不忽略字段前后的空格</span>
                parser<span class="token punctuation">.</span>TrimWhiteSpace <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">bool</span></span> isLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span>EndOfData<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fields <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">ReadFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLine<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token comment">//忽略标题行业</span>
                        isLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读CSV文件（使用正则表达式）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 读CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>T<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>func<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>字段解析规则<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Read_Regex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> lineReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">"\\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> fieldReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">"\\\\G(?:^|,)(?:\\"((?&gt;[^\\"]*)(?&gt;\\"\\"[^\\"]*)*)\\"|([^\\",]*))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> quotesReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">"\\"\\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">bool</span></span> isLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">ReadLine</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//一个完整的CSV记录行，它的双引号一定是偶数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lineReg<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLine<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">ParseCsvLine</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldReg<span class="token punctuation">,</span> quotesReg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            <span class="token comment">//忽略标题行业</span>
                            isLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        sbr<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>                   
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//有解析失败的字符串，报错或忽略</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//重写ReadLine方法，只有\\r\\n才是正确的一行</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> cInt<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>cInt <span class="token operator">=</span>sr<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>cInt<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'\\n'</span> <span class="token operator">&amp;&amp;</span> sbr<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sbr<span class="token punctuation">[</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\\r'</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> 
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sbr<span class="token punctuation">.</span>Length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">?</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">ParseCsvLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> line<span class="token punctuation">,</span> <span class="token class-name">Regex</span> fieldReg<span class="token punctuation">,</span> <span class="token class-name">Regex</span> quotesReg<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> fieldMath <span class="token operator">=</span> fieldReg<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> field<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    field <span class="token operator">=</span> quotesReg<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">"\\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    field <span class="token operator">=</span> fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                fields<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>
                fieldMath <span class="token operator">=</span> fieldMath<span class="token punctuation">.</span><span class="token function">NextMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> fields<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.84,words:853},t:"CsvFile",y:"a"}}],["/middleware/office/csv/csvhelper.html",{loader:()=>a(()=>import("./csvhelper.html-BdLWtKX9.js"),__vite__mapDeps([994,1])),meta:{a:"azrng",d:16562016e5,l:"2022年6月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>CsvHelper 是用于读取和写入 CSV 文件的库，支持自定义类对象的读写。</p>
<h2>操作</h2>
<p>安装nuget包CsvHelper</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token comment">//写CSV文件</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> csv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CsvWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    csv<span class="token punctuation">.</span><span class="token function">WriteRecords</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> csv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CsvWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//追加</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token keyword">record</span> <span class="token class-name"><span class="token keyword">in</span></span> records<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        csv<span class="token punctuation">.</span><span class="token function">WriteRecord</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//读CSV文件</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> csv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CsvReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    records <span class="token operator">=</span> csv<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRecords</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Test<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//逐行读取</span>
    <span class="token comment">//records.Add(csv.GetRecord&lt;Test&gt;());</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.45,words:134},t:"CsvHelper",y:"a"}}],["/middleware/office/csv/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-D94MDCYm.js"),__vite__mapDeps([995,1])),meta:{a:"azrng",d:16562016e5,l:"2022年6月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>.csv是一种逗号分隔值文件格式，其文件以纯文本形式存储表格数据（数字和文本）。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。通常，所有记录都有完全相同的字段序列。通常都是纯文本文件。</p>
<blockquote>
<p>优点：可存储大量数据，耗时少，易操作，可被Office可打开</p>
</blockquote>
<h2>操作</h2>
<h3>c#导入导出</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ExportCsv</span><span class="token punctuation">(</span><span class="token class-name">DataTable</span> dt<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> strFilePath<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> strBufferLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token class-name">StreamWriter</span> strmWriterObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>strFilePath<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        strBufferLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                strBufferLine <span class="token operator">+=</span> <span class="token string">","</span><span class="token punctuation">;</span>
            strBufferLine <span class="token operator">+=</span> dt<span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">j</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        strmWriterObj<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strBufferLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    strmWriterObj<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    strmWriterObj<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DataTable</span> <span class="token function">Csv2Dt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span> <span class="token class-name">DataTable</span> dt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">StreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DataRow</span> dr<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> split <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dr <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">NewRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DBNull<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>dr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.06,words:319},t:"概述",y:"a"}}],["/middleware/office/ip/ip2region.html",{loader:()=>a(()=>import("./ip2region.html-Nz4LP72t.js"),__vite__mapDeps([996,1])),meta:{a:"azrng",d:16555104e5,l:"2022年6月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>ip2region - 准确率99.9%的<strong>离线IP</strong>地址定位库，0.0x毫秒级查询，ip2region.db数据库只有数MB，提供了java,php,c,python,nodejs,golang,c#等查询绑定和Binary,B树,内存三种查询算法。每条ip数据段都固定了格式：</p>
<ul>
<li>城市Id|国家|区域|省份|城市|ISP_</li>
</ul>
<p>github地址:https://github.com/lionsoul2014/ip2region</p>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"IP2Region"</span> Version<span class="token operator">=</span><span class="token string">"1.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.58,words:175},t:"ip2region",y:"a"}}],["/middleware/office/ip/maxmind.html",{loader:()=>a(()=>import("./maxmind.html-B45_LDPs.js"),__vite__mapDeps([997,1])),meta:{a:"azrng",d:16920576e5,l:"2023年8月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>仓库地址：<a href="https://github.com/maxmind/GeoIP2-dotnet" target="_blank" rel="noopener noreferrer">https://github.com/maxmind/GeoIP2-dotnet</a>
Nuget：<a href="https://www.nuget.org/packages/MaxMind" target="_blank" rel="noopener noreferrer">https://www.nuget.org/packages/MaxMind</a></p>`,r:{minutes:.14,words:42},t:"maxmind",y:"a"}}],["/middleware/office/markdown/markdig.html",{loader:()=>a(()=>import("./markdig.html-BPvJfU9E.js"),__vite__mapDeps([998,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Markdig 是一款快速、功能强大、符合 <a href="http://commonmark.org/" target="_blank" rel="noopener noreferrer">CommonMark</a> 标准、可扩展的 Markdown 处理器，适用于 .NET。</p>
<p>下载量：10M 最后更新时间：12天前</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Markdig"</span> Version<span class="token operator">=</span><span class="token string">"0.30.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.95,words:586},t:"Markdig",y:"a"}}],["/middleware/office/markdown/markdownsharp.html",{loader:()=>a(()=>import("./markdownsharp.html-BY2PjJKq.js"),__vite__mapDeps([999,1])),meta:{a:"azrng",d:166104e7,l:"2022年8月21日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Markdown 处理器的开源 C## 实现，如 Stack Overflow 所示。</p>
<p>下载量：2.7M  最后更新时间：2018/10/28</p>
<h2>操作</h2>
<blockquote>
<p>既然该包好久没更新了，那就只简单介绍吧</p>
</blockquote>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"MarkdownSharp"</span> Version<span class="token operator">=</span><span class="token string">"2.0.5"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.46,words:137},t:"MarkdownSharp",y:"a"}}],["/middleware/office/npoi/npoi.html",{loader:()=>a(()=>import("./npoi.html-Kf-1qCuX.js"),__vite__mapDeps([1000,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>转HTML</h3>
<p>资料：<a href="https://www.cnblogs.com/liwenyan/p/11768230.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/liwenyan/p/11768230.html</a>
github：<a href="https://github.com/ToolsByXLG/NPOI.Word2Html" target="_blank" rel="noopener noreferrer">https://github.com/ToolsByXLG/NPOI.Word2Html</a></p>`,r:{minutes:.2,words:60},t:"NPOI",y:"a"}}],["/middleware/office/npoi/npoicaozuoexcel.html",{loader:()=>a(()=>import("./npoicaozuoexcel.html-DF-RpJtp.js"),__vite__mapDeps([1001,1])),meta:{a:"azrng",d:1691712e6,l:"2023年8月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>NPOI中N指代的是.Net，POI是一个完全开源的Java写成的库， 能够在没有安装微软Office或者相应环境的情况下读写Excel、Word等微软OLE2组件文档，几乎支持所有的Office97~Office2007的文件格式。所以NPOI就是POI项目的.Net版本。</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"NPOI"</span> Version<span class="token operator">=</span><span class="token string">"2.5.5"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:6.39,words:1916},t:"NPOI操作Excel",y:"a"}}],["/middleware/office/npoi/npoipeizhi.html",{loader:()=>a(()=>import("./npoipeizhi.html-m5IKM-I0.js"),__vite__mapDeps([1002,1])),meta:{a:"azrng",d:16483392e5,l:"2022年3月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作方法</h2>
<h3>创建工作簿</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">CreateSheet</span><span class="token punctuation">(</span><span class="token string">"人才培训课程表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:6.69,words:2006},t:"NPOI配置",y:"a"}}],["/middleware/office/npoi/npoiyiwen.html",{loader:()=>a(()=>import("./npoiyiwen.html-CQdsDGA3.js"),__vite__mapDeps([1003,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> workBook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sheet <span class="token operator">=</span> workBook<span class="token punctuation">.</span><span class="token function">CreateSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sheet<span class="token punctuation">.</span>DefaultRowHeight <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token comment">//设置默认行高 40</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">CreateRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    row<span class="token punctuation">.</span><span class="token function">CreateCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetCellValue</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"测试 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        row<span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">GetRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 600 800 800 ..  但是当我导出的时候行高不是这样子的</span>
<span class="token punctuation">}</span>


<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> outStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"d:\\\\docs\\\\</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>ddHHmmss</span><span class="token punctuation">}</span></span><span class="token string">.xlsx"</span></span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>
workBook<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>outStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
workBook<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//如果在循环的时候给其中一行设置行高，那么原始的默认行高度就不再生效了</span>
<span class="token comment">//示例：上面我给设置默认行高是40，然后我在循环的时候给第一行设置为30，那么出来的excel第一行是30，其他行都是14+</span>
<span class="token comment">//如果我将第一行高度设置为30的代码注释，那么导出的excel每行都是40</span>
</code></pre></div>`,r:{minutes:.77,words:232},t:"NPOI疑问",y:"a"}}],["/middleware/office/pdf/aspose_pdf.html",{loader:()=>a(()=>import("./aspose_pdf.html-Dekhgjw8.js"),__vite__mapDeps([1004,1])),meta:{a:"azrng",d:16538688e5,l:"2022年5月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<h3>PDF转常见格式</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> <span class="token string">"d:\\\\VS2015常用快捷键总结.pdf"</span><span class="token punctuation">;</span>
<span class="token comment">// load the file to be converted</span>
<span class="token class-name"><span class="token keyword">var</span></span> pfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Aspose<span class="token punctuation">.</span>Pdf<span class="token punctuation">.</span>Document</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// save in different formats</span>
pfile<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"d:\\\\output.doc"</span><span class="token punctuation">,</span> Aspose<span class="token punctuation">.</span>Pdf<span class="token punctuation">.</span>SaveFormat<span class="token punctuation">.</span>Doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
pfile<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"d:\\\\output.pptx"</span><span class="token punctuation">,</span> Aspose<span class="token punctuation">.</span>Pdf<span class="token punctuation">.</span>SaveFormat<span class="token punctuation">.</span>Pptx<span class="token punctuation">)</span><span class="token punctuation">;</span>
pfile<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token string">"d:\\\\output.html"</span><span class="token punctuation">,</span> Aspose<span class="token punctuation">.</span>Pdf<span class="token punctuation">.</span>SaveFormat<span class="token punctuation">.</span>Html<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.69,words:207},t:"Aspose.PDF",y:"a"}}],["/middleware/office/pdf/dinkToPdf.html",{loader:()=>a(()=>import("./dinkToPdf.html-DJJ9fI_s.js"),__vite__mapDeps([1005,1])),meta:{a:"azrng",d:16300224e5,l:"2021年8月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<p>生成pdf文档</p>
<p>需要先加载本机库，地址：<a href="https://raw.githubusercontent.com/rdvojmoc/DinkToPdf/master/v0.12.4" target="_blank" rel="noopener noreferrer">https://raw.githubusercontent.com/rdvojmoc/DinkToPdf/master/v0.12.4</a></p>
<h2>资料</h2>
<p>参考文档：<a href="https://mp.weixin.qq.com/s/dYcWVz4d4kwBOUpRPXrHaQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/dYcWVz4d4kwBOUpRPXrHaQ</a>
GitHub：<a href="https://github.com/rdvojmoc/DinkToPdf" target="_blank" rel="noopener noreferrer">https://github.com/rdvojmoc/DinkToPdf</a></p>`,r:{minutes:.2,words:61},t:"DinkToPdf",y:"a"}}],["/middleware/office/pdf/haukcode_wkhtmltopdfdotnet.html",{loader:()=>a(()=>import("./haukcode_wkhtmltopdfdotnet.html-BSb8QpDf.js"),__vite__mapDeps([1006,1])),meta:{a:"azrng",d:1654128e6,l:"2022年6月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>准备</h2>
<p>安装组件包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Haukcode.WkHtmlToPdfDotNet"</span> Version<span class="token operator">=</span><span class="token string">"1.5.68"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.05,words:315},t:"Haukcode.WkHtmlToPdfDotNet",y:"a"}}],["/middleware/office/pdf/ironpdf.html",{loader:()=>a(()=>import("./ironpdf.html-CGHDHxIf.js"),__vite__mapDeps([1007,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>IronPDF帮助c#软件工程师在。net项目中创建、编辑和提取PDF内容。
官网：<a href="https://ironpdf.com/" target="_blank" rel="noopener noreferrer">https://ironpdf.com/</a></p>
<p>最近更新：2023.06.10
下载量：6.28(2023年6月24日)</p>
<h2>操作</h2>
<h3>html转pdf基础操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 使用IronPDF将HTML字符串转换为PDF</span>
<span class="token class-name"><span class="token keyword">var</span></span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HtmlToPdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span>PrintOptions<span class="token punctuation">.</span>MarginTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span>PrintOptions<span class="token punctuation">.</span>MarginBottom <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span>PrintOptions<span class="token punctuation">.</span>MarginLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span>PrintOptions<span class="token punctuation">.</span>MarginRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> pdf <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">RenderHtmlAsPdf</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存PDF文件</span>
pdf<span class="token punctuation">.</span><span class="token function">SaveAs</span><span class="token punctuation">(</span><span class="token string">"d://temp//11.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.49,words:146},t:"IronPdf",y:"a"}}],["/middleware/office/pdf/itext7.html",{loader:()=>a(()=>import("./itext7.html-OqtRgjTy.js"),__vite__mapDeps([1008,1])),meta:{a:"azrng",d:16568064e5,l:"2022年7月3日",c:["middleware"],g:["无"],o:!0,e:`<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"itext7"</span> Version<span class="token operator">=</span><span class="token string">"7.2.2"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.41,words:122},t:"itext7",y:"a"}}],["/middleware/office/pdf/itextsharp.html",{loader:()=>a(()=>import("./itextsharp.html-CHzFo4pW.js"),__vite__mapDeps([1009,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"itextsharp.pdfa"</span> Version<span class="token operator">=</span><span class="token string">"5.5.13.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.82,words:847},t:"iTextSharp",y:"a"}}],["/middleware/office/pdf/magick_net.html",{loader:()=>a(()=>import("./magick_net.html-CxGGF16A.js"),__vite__mapDeps([1010,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>将pdf文件转成其他格式的文件</p>
<p>最近更新：2023.06.5
下载量：12.1M(2023年6月24日)</p>
<h2>操作</h2>
<h3>准备</h3>
<p>需要在电脑安装ghostscript</p>
<blockquote>
<p>自行百度下载软件</p>
</blockquote>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Magick.NET-Q16-AnyCPU"</span> Version<span class="token operator">=</span><span class="token string">"8.4.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.51,words:153},t:"Magick.NET",y:"a"}}],["/middleware/office/pdf/pdfSample.html",{loader:()=>a(()=>import("./pdfSample.html-CwP5sxrE.js"),__vite__mapDeps([1011,1])),meta:{a:"azrng",d:17140032e5,l:"2024年4月25日",c:["dotNet"],g:["pdf"],o:!0,e:`<h2>Microsoft.Office.Interop.Word</h2>
<p>引用nuget包，该包依赖本机的office程序</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;PackageReference Include="Microsoft.Office.Interop.Word" Version="15.0.4797.1004" /&gt;
</code></pre></div><p>此程序集可用于 Microsoft 生成和签名的 Word 2013/2016/2019 COM 互操作。这是完全不受支持的，并且没有许可证，因为它是 Office 程序集的重新打包。</p>`,r:{minutes:1.17,words:352},t:"PDF示例",y:"a"}}],["/middleware/office/pdf/pdfsharp.html",{loader:()=>a(()=>import("./pdfsharp.html-Kg54qRsi.js"),__vite__mapDeps([1012,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>PDFsharp是个.net类库，用于在C#、VB.NET等.net编程语言中以编程方式操作Adobe PDF文档。PDFsharp为PDF文档中的每种对象都创建了类，因此在程序中不需要直接操作对象ID或者引用。
最近更新：2019年
下载量：17.8M(2023年6月24日16:38:05)</p>
<h2>功能</h2>
<ul>
<li>使用任意.net 编程语言实时创建pdf文档；</li>
<li>可以从不同数据源中导入数据，例如XML文件或其它数据接口（任意可在.net中使用的数据源）；</li>
<li>在pdf页面中使用的绘图代码同样适用于窗口或打印机；</li>
<li>能够编辑、合并、拆分现有pdf文档；</li>
<li>具有透明度的图像(彩色掩模、单色掩模、α掩模)；</li>
<li>使用C#语言重写PDFsharp代码；</li>
<li>PDFsharp中的图形类与.net很匹配。</li>
</ul>`,r:{minutes:.8,words:241},t:"PDFsharp",y:"a"}}],["/middleware/office/pdf/questpdf.html",{loader:()=>a(()=>import("./questpdf.html-UjocpXoj.js"),__vite__mapDeps([1013,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>QuestPDF 是一个现代化的开源 .NET 库，用于生成PDF文档。它提供了一套强大的 API，使开发人员能够使用 C#语言来创建、编辑和处理 PDF 文件。QuestPDF 提供了丰富的功能，包括布局引擎、多平台支持、高级语言支持、文本样式控制、图像插入、表格和列表、链接和书签、字体和颜色管理、PDF 文件合并和拆分等。
最近更新：2023.05.03
下载量：1.71M(2023年6月24日)</p>
<h2>为什么使用</h2>
<ul>
<li>强有力的布局引擎：Quest PDF 提供了专为文档生成设计的布局引擎，提供完整的分页支持，内容的高度控制。</li>
<li>支持多个平台：Quest PDF 支持多个平台，包括 Windows、Linux、macOS，以及通过 WebAssembly 运行。</li>
<li>Fluent API：Quest采用了 FluentAPI 代码风格，使代码更简洁易懂。</li>
<li>代码复用：在布局过程中可以实现代码复用。</li>
<li>维护便利性：使用纯C#代码来实现，而不依赖于二进制格式或复杂 HTML。</li>
<li>热加载：无需重新编译代码即可实时预览。</li>
<li>高性能：Quest PDF 具有高性能和使用资源比较低特性，每核每分钟生成高达1000个 PDF 文件，整个处理过程是线程安全。</li>
</ul>`,r:{minutes:4.62,words:1387},t:"QuestPDF",y:"a"}}],["/middleware/office/pdf/spire_pdf.html",{loader:()=>a(()=>import("./spire_pdf.html-B1kNSDTs.js"),__vite__mapDeps([1014,1])),meta:{a:"azrng",d:1647216e6,l:"2022年3月14日",c:["middleware"],g:["无"],o:!0,e:`<p>PDF转图片</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name">PdfDocument</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PdfDocument</span><span class="token punctuation">(</span>picBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//convert to pdf file.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> doc<span class="token punctuation">.</span>Pages<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> image <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">SaveAsImage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到图片流</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">    截取为图片   "</span></span> <span class="token operator">+</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> fileOperation<span class="token punctuation">.</span><span class="token function">UploadFileStreamAsync</span><span class="token punctuation">(</span><span class="token string">"pacs"</span><span class="token punctuation">,</span> <span class="token string">"test/"</span> <span class="token operator">+</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> image<span class="token punctuation">,</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">   上传图片结束  "</span></span> <span class="token operator">+</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.56,words:169},t:"Spire.PDF",y:"a"}}],["/middleware/office/ppt/shapeCrawler.html",{loader:()=>a(()=>import("./shapeCrawler.html-jFgO9wnM.js"),__vite__mapDeps([1015,1])),meta:{a:"azrng",d:17099424e5,l:"2024年3月9日",c:["middleware"],g:["ppt"],o:!0,e:`<h2>概述</h2>
<p>ShapeCrawler 是一个专为处理 PowerPoint 演示文稿而设计的 .NET 库。这个库为开发者提供了一组简单易用的 API，以便操作 PowerPoint (.pptx) 文件中的各种元素。</p>
<p>ShapeCrawler 库的特点包括：</p>
<p>**1、无需安装 Microsoft Office：**是一个独立的库，不需要在开发或运行环境中安装 Microsoft Office。</p>
<p>**2、基于 Open XML SDK：**基于 Open XML SDK 的基础上，封装的提供更高层次的抽象。Open XML SDK 是一个开源库，提供了Office 文件格式（如 .docx、.xlsx、.pptx 等）的底层API操作。</p>`,r:{minutes:1.5,words:451},t:"ShapeCrawler",y:"a"}}],["/middleware/office/wenbenduibi/diffplex.html",{loader:()=>a(()=>import("./diffplex.html-D80iyY8_.js"),__vite__mapDeps([1016,1])),meta:{a:"azrng",d:16889472e5,l:"2023年7月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>DiffPlex 是一个使用 C## 开发的开源文本差异对比组件，支持在控制台、Web、Winform、WPF 项目中使用。
项目地址：<a href="https://github.com/mmanela/diffplex" target="_blank" rel="noopener noreferrer">https://github.com/mmanela/diffplex</a></p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"DiffPlex"</span> Version<span class="token operator">=</span><span class="token string">"1.7.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.56,words:169},t:"DiffPlex",y:"a"}}],["/middleware/office/wenbenduibi/htmldiff_net.html",{loader:()=>a(()=>import("./htmldiff_net.html-BNwzAyt6.js"),__vite__mapDeps([1017,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个基于.Net 4.5开发的对比Html文件、片段效果差异的项目。两份Html效果不一样的地方会通过颜色、删除线、背景色分别标记出来。
仓库地址：<a href="https://github.com/Rohland/htmldiff.net" target="_blank" rel="noopener noreferrer">https://github.com/Rohland/htmldiff.net</a></p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"htmldiff.net"</span> Version<span class="token operator">=</span><span class="token string">"1.4.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.59,words:178},t:"htmldiff.net",y:"a"}}],["/middleware/office/yapi/neiwangbushu.html",{loader:()=>a(()=>import("./neiwangbushu.html-CJ7mLsdp.js"),__vite__mapDeps([1018,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文为内网部署，并且不使用docker方式。</p>
<blockquote>
<p>GitHub：<a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener noreferrer">https://github.com/YMFE/yapi</a></p>
</blockquote>
<p>先了解一下官方部署的方法：
官方文档：<a href="https://hellosean1025.github.io/yapi/devops/index.html" target="_blank" rel="noopener noreferrer">https://hellosean1025.github.io/yapi/devops/index.html</a>
码云Gitee：<a href="https://gitee.com/mirrors/YApi" target="_blank" rel="noopener noreferrer">https://gitee.com/mirrors/YApi</a></p>`,r:{minutes:.89,words:268},t:"内网部署",y:"a"}}],["/middleware/office/yapi/",{loader:()=>a(()=>import("./index.html-DiU8zMmP.js"),__vite__mapDeps([1019,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>YApi 是<strong>高效</strong>、<strong>易用</strong>、<strong>功能强大</strong>的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p>
<p>当下稍微正式一点的公司都会要求前后端联调要求编写接口文档，比如说要求word或者excel等了，这个时候你要说那么我们可以使用swagger，但是领导又会说swagger不能留档，并且显得不太正式，结果就强制要求使用word，奈何太浪费时间，通过yapi，它可以直接导出文件进行存档，并且接口内容也可以通过swagger定时同步。</p>`,r:{minutes:3.17,words:950},t:"说明",y:"a"}}],["/middleware/office/youjian/fluentemail.html",{loader:()=>a(()=>import("./fluentemail.html-rGnE98bU.js"),__vite__mapDeps([1020,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"FluentEmail",y:"a"}}],["/middleware/office/youjian/mailkit.html",{loader:()=>a(()=>import("./mailkit.html-C1oWdy_K.js"),__vite__mapDeps([1021,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>使用 MimeKit 强大的 MIME 解析器解析任何消息。正确处理任何字符编码。
官网地址：<a href="http://www.mimekit.net/" target="_blank" rel="noopener noreferrer">http://www.mimekit.net/</a>
仓库地址：<a href="https://github.com/jstedfast/MimeKit" target="_blank" rel="noopener noreferrer">https://github.com/jstedfast/MimeKit</a></p>`,r:{minutes:5.56,words:1668},t:"MailKit",y:"a"}}],["/middleware/printPlugin/frontPrint/default.html",{loader:()=>a(()=>import("./default.html-DI04ZBZg.js"),__vite__mapDeps([1022,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>这种打印是需要弹出打印预览的框 
<span class="token return-type class-name">function</span> <span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> bdhtml<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sprnstr<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> eprnstr<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> prnhtml<span class="token punctuation">;</span>
            bdhtml <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token comment">//获取当前页的html代码</span>
            sprnstr <span class="token operator">=</span> <span class="token string">"&lt;!--startprint--&gt;"</span><span class="token punctuation">;</span><span class="token comment">//标记打印开始的地方</span>
            eprnstr <span class="token operator">=</span> <span class="token string">"&lt;!--endprint--&gt;"</span><span class="token punctuation">;</span><span class="token comment">//标记打印结束的地方</span>
            prnhtml <span class="token operator">=</span> bdhtml<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>bdhtml<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sprnstr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从开始代码向后取html</span>
            prnhtml <span class="token operator">=</span> prnhtml<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prnhtml<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>eprnstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从结束代码向前取html</span>
            window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> prnhtml<span class="token punctuation">;</span><span class="token comment">//获得需要打印的内容</span>
            window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始打印</span>
        <span class="token punctuation">}</span>
上面代码不需要更改，只用把需要打印的内容开头放上<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>startprint<span class="token operator">--</span><span class="token operator">&gt;</span>
结束放上<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>endprint<span class="token operator">--</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.57,words:170},t:"原生浏览器打印",y:"a"}}],["/middleware/printPlugin/frontPrint/httpprinter.html",{loader:()=>a(()=>import("./httpprinter.html--GoH7AYf.js"),__vite__mapDeps([1023,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>未注册版本: 1.显示我们公司logo,联系方式 2.启动后允许打印50份,重启插件后,可以继续使用.
已注册版本（也叫OEM版，全功能版）: 1.显示您的公司logo,联系方式,2.没有任何限制(例如ip地址,客户端数,打印次数等) 3.限时特惠 500 元人民币</p>
<h2>特点</h2>
<ol>
<li>无插件,只要一句js即可；</li>
<li>拖拽即可完成设计,支持 fastreport, reportmachine, gridreport</li>
<li>强大的报表功能,管它什么报表, 交叉的,嵌套的,还是二维码,图片等等,都支持.</li>
<li>打印机：只要是能用的打印机,都支持,针式打印机、激光打印机、小票打印机,证卡打印机等等,都不在话下,而且当有多个打印机时可以指定打印机；</li>
<li>支持各种语言,java php js delphi python ios andriod firemonkey unigui C#</li>
<li>支持web拍照.</li>
<li>支持读取身份证设备 ( 普天 新中新 神思 精伦 ).</li>
<li>支持mqtt广域网打印</li>
<li>支持pdf静默打印</li>
<li>支持作为pdf服务器使用</li>
<li>支持图片打印</li>
<li>多语言支持:中文简体,中文繁体,英语,法语,德语,意大利语,日语,韩语,葡萄牙语,俄语,西班牙语.</li>
</ol>`,r:{minutes:1.2,words:360},t:"HttpPrinter",y:"a"}}],["/middleware/printPlugin/frontPrint/jcp.html",{loader:()=>a(()=>import("./jcp.html-C6nSBJQr.js"),__vite__mapDeps([1024,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>免费插件可以直接打印，也没有水印，只不过免费版不能判断是否已经打印成功</p>
<blockquote>
<p>官网地址：<a href="http://printfree.jatools.com/" target="_blank" rel="noopener noreferrer">http://printfree.jatools.com/</a></p>
</blockquote>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>页面加载的时候调用方法 onload<span class="token operator">=</span><span class="token string">"doPrint()"</span> 
  <span class="token return-type class-name">function</span> <span class="token function">doPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span>  myDoc <span class="token operator">=</span> <span class="token punctuation">{</span>
                            print_settings<span class="token punctuation">:</span> <span class="token punctuation">{</span> paperName<span class="token punctuation">:</span> 'a4'<span class="token punctuation">,</span>
                                  <span class="token named-parameter punctuation">orientation</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                  <span class="token named-parameter punctuation">topMargin</span><span class="token punctuation">:</span> <span class="token number">195</span><span class="token punctuation">,</span>
                                  <span class="token named-parameter punctuation">leftMargin</span><span class="token punctuation">:</span> <span class="token number">195</span><span class="token punctuation">,</span>
                                  <span class="token named-parameter punctuation">bottomMargin</span><span class="token punctuation">:</span> <span class="token number">195</span><span class="token punctuation">,</span>
                                  <span class="token named-parameter punctuation">rightMargin</span><span class="token punctuation">:</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token comment">// 设置上下左距页边距为10毫米，注意，单位是 1/10毫米</span>
                                  printer<span class="token punctuation">:</span> 'HP LaserJet <span class="token number">1020</span>'<span class="token comment">//设置到打印机 'OKi5530'</span>
                              <span class="token punctuation">}</span><span class="token punctuation">,</span>  
                              <span class="token named-parameter punctuation">documents</span><span class="token punctuation">:</span> document<span class="token punctuation">,</span>
                              <span class="token named-parameter punctuation">copyrights</span><span class="token punctuation">:</span> '杰创软件拥有版权  www<span class="token punctuation">.</span>jatools<span class="token punctuation">.</span>com' <span class="token comment">// 版权声明,必须   </span>
                          <span class="token punctuation">}</span><span class="token punctuation">;</span>
                          <span class="token class-name"><span class="token keyword">var</span></span> jatoolsPrinter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"jatoolsPrinter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         
                          jatoolsPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>myDoc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接打印，弹出打印机设置对话框</span>
                          <span class="token comment">//document.getElementById("jatoolsPrinter").print(myDoc, false); // 直接打印，不弹出打印机设置对话框</span>
	 <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.66,words:197},t:"JCP",y:"a"}}],["/middleware/printPlugin/frontPrint/lodop.html",{loader:()=>a(()=>import("./lodop.html-DSKfZ9Fb.js"),__vite__mapDeps([1025,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>需要安装一个插件和引用一个LodopFuncs.js就可以使用</p>
<blockquote>
<p>官网：<a href="http://www.c-lodop.com/index.html" target="_blank" rel="noopener noreferrer">http://www.c-lodop.com/index.html</a></p>
</blockquote>
<h2>操作</h2>
<h3>常用命令</h3>
<h4>LODOP.PRINT_INIT("打印初始化");</h4>
<p>设定打印任务名。</p>
<h4>SET_PRINT_PAGESIZE(intOrient, PageWidth,PageHeight,strPageName)</h4>`,r:{minutes:1.69,words:508},t:"Lodop",y:"a"}}],["/middleware/renwudiaodu/quartz/gzy_quartz_mui.html",{loader:()=>a(()=>import("./gzy_quartz_mui.html-Cl9Aozmh.js"),__vite__mapDeps([1026,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>基于Quartz的轻量级,注入化的UI组件</p>
<p>中文使用方法请参考: <a href="https://www.cnblogs.com/GuZhenYin/p/15411316.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/GuZhenYin/p/15411316.html</a>
仓库地址：<a href="https://github.com/l2999019/GZY.Quartz.MUI" target="_blank" rel="noopener noreferrer">https://github.com/l2999019/GZY.Quartz.MUI</a></p>`,r:{minutes:.24,words:72},t:"GZY.Quartz.MUI",y:"a"}}],["/middleware/renwudiaodu/quartz/netfshiyong.html",{loader:()=>a(()=>import("./netfshiyong.html-CKkB7pXN.js"),__vite__mapDeps([1027,1])),meta:{a:"azrng",d:16668288e5,l:"2022年10月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>控制台</h2>
<p>安装2.6版本的的quartz
首先继承自IJob接口</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobDemo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 这里是作业调度每次定时执行方法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.06,words:619},t:"NetF使用",y:"a"}}],["/middleware/renwudiaodu/quartz/quartz.html",{loader:()=>a(()=>import("./quartz.html-BkWL0q74.js"),__vite__mapDeps([1028,1])),meta:{a:"azrng",d:1648944e6,l:"2022年4月3日",c:["middleware"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"Quartz",y:"a"}}],["/middleware/reverseProxy/nginx/dongjingfenli.html",{loader:()=>a(()=>import("./dongjingfenli.html-ktfYeQCj.js"),__vite__mapDeps([1029,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>动态跟静态请求分开，不能理解成只是单纯把动态页面和静态页面物理分离。严格意义上应该是动态请求跟静态请求分开，可以理解成使用nginx处理静态页面，其他服务器处理动态页面。</p>
<h2>实现方式</h2>
<p>1.纯碎把静态文件(js、css)单独成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。
2.将动态跟静态文件混合在一起发布，通过nginx来分开。</p>
<h2>localhost配置</h2>
<h3>动态资源代理</h3>
<p>配置文件增加</p>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">localhost</span> /</span><span class="token punctuation">{</span>
		<span class="token directive"><span class="token keyword">proxy_pass</span> www.baidu.com</span><span class="token punctuation">;</span><span class="token comment">#转发地址</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.93,words:278},t:"动静分离",y:"a"}}],["/middleware/reverseProxy/nginx/gaokeyong.html",{loader:()=>a(()=>import("./gaokeyong.html-BJoRSHwQ.js"),__vite__mapDeps([1030,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h3>准备工作</h3>
<ul>
<li>需要两台nginx服务器</li>
<li>需要安装keepalived</li>
</ul>
<p>命令：yum install keepalived -y
安装后目录是在etc里面生成一个目录keepalived，里面有一个文件叫做keepalived.conf</p>
<ul>
<li>需要虚拟ip</li>
</ul>
`,r:{minutes:.27,words:82},t:"高可用",y:"a"}}],["/middleware/reverseProxy/nginx/issue.html",{loader:()=>a(()=>import("./issue.html-D4eb1OKr.js"),__vite__mapDeps([1031,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>502Bad Gateway</h2>
<p><img src="/common/1609382953604-5371870e-2405-4eed-90aa-d1c137af069f.png" alt="image.png" loading="lazy">
原因是由于SELinux保护机制所导致，我们需要将nginx添加至SELinux的白名单。接下来我们通过一些命令解决这个问题。
运行下面的命令
yum install policycoreutils-python</p>
<p>sudo cat /var/log/audit/audit.log | grep nginx | grep denied | audit2allow -M mynginx</p>`,r:{minutes:1.11,words:334},t:"Issue",y:"a"}}],["/middleware/reverseProxy/nginx/localhostyingshelujing.html",{loader:()=>a(()=>import("./localhostyingshelujing.html-DlOmD8qA.js"),__vite__mapDeps([1032,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>优先级关系</h2>
<p>(localhost =)&gt;(localhost /xxx/yyy/zzz)&gt;(localhost ^~)&gt;(localhost ~)&gt;
(localhost <sub>,</sub>*)&gt;(localhost /起始路径)&gt;(localhost /)
&nbsp;
精确匹配&gt;优先匹配&gt;通用匹配</p>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token comment">#1 =匹配</span>
<span class="token directive"><span class="token keyword">localhost</span> =/</span> <span class="token punctuation">{</span>
    <span class="token comment">#精准匹配，主机名后面不能带任何字符串</span>
<span class="token punctuation">}</span>
<span class="token comment">#2.通用匹配</span>
<span class="token directive"><span class="token keyword">localhost</span> /xxx</span> <span class="token punctuation">{</span>
    <span class="token comment">#匹配所有以/xxx开头的路径</span>
<span class="token punctuation">}</span>
<span class="token comment">#3 正则匹配</span>
<span class="token directive"><span class="token keyword">localhost</span> ~ /xxx</span> <span class="token punctuation">{</span>
    <span class="token comment">#匹配所有以/xxx开头的路径</span>
<span class="token punctuation">}</span>
<span class="token comment">#4匹配开头路径</span>
<span class="token directive"><span class="token keyword">localhost</span> ^~ /images/</span> <span class="token punctuation">{</span>
    <span class="token comment">#匹配所有以/imaegs开头的路径</span>
<span class="token punctuation">}</span>
<span class="token comment">#5.匹配以指定内容结尾</span>
<span class="token directive"><span class="token keyword">localhost</span> ~* \\. (gif|jpg|png)$</span> <span class="token punctuation">{</span>
    <span class="token comment">#匹配以gif或者jpg或者png结尾的内容</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.59,words:176},t:"localhost映射路径",y:"a"}}],["/middleware/reverseProxy/nginx/nginx.html",{loader:()=>a(()=>import("./nginx.html-BF0tabM6.js"),__vite__mapDeps([1033,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>nginx是一个轻量级高性能的Web服务器软件。这是一个比 Apache HTTP Server 更加灵活和轻量级的程序。</p>
<h3>优点</h3>
<p>并发能力强、内存消耗少、配置简单、成本低</p>
<h2>在线测试地址</h2>
<p>https://nginx-playground.wizardzines.com/</p>
<h2>功能</h2>
<h3>正向代理和反向代理</h3>
<p><img src="/common/1609075441479-59bbdd19-50d9-4207-807a-02acad3cc249.png" alt="image.png" loading="lazy">
<img src="/common/1615520085892-816a08cb-645f-422a-a4f2-4fa6ff71c4ad.webp" alt="" loading="lazy"></p>`,r:{minutes:3.64,words:1093},t:"说明",y:"a"}}],["/middleware/reverseProxy/nginx/nginxpeizhinetcore.html",{loader:()=>a(()=>import("./nginxpeizhinetcore.html-DbJWwiOk.js"),__vite__mapDeps([1034,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>准备</h2>
<p>首先需要安装好指定的nginx环境</p>
<h2>服务配置</h2>
<p>要获取Nginx转发前的配置信息，不仅仅在nginx中需要使用proxy_set_header，并且后端代码也需要使用ForwardedHeaders中间件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 注册服务</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ForwardedHeadersOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>ForwardedHeaders <span class="token operator">=</span> ForwardedHeaders<span class="token punctuation">.</span>All<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启用中间件</span>
app<span class="token punctuation">.</span><span class="token function">UseForwardedHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.65,words:194},t:"nginx配置netcore",y:"a"}}],["/middleware/reverseProxy/nginx/peizhiwenjian.html",{loader:()=>a(()=>import("./peizhiwenjian.html-CY5MmoNh.js"),__vite__mapDeps([1035,1])),meta:{a:"azrng",d:16962048e5,l:"2023年10月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>linux里面的配置文件所在的位置：/user/local/nginx/conf/nginx.conf</p>
<h2>三部分组成</h2>
<p>1.全局块
设置影响nginx服务器整体运行的配置指令
2.events块
影响nginx服务器与用户的网络连接
3.http全局块
包括：http全局块和server块</p>
<h2>默认配置</h2>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.72,words:1417},t:"配置文件",y:"a"}}],["/middleware/reverseProxy/nginx/shiyonggongneng.html",{loader:()=>a(()=>import("./shiyonggongneng.html-CGMRoYtX.js"),__vite__mapDeps([1036,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>健康检查</h2>
<p>如果后端某一个应用节点挂了，请求就不会再转发给这个节点，不影响线上功能。</p>
<div class="language-nginx" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> backend1.example.com weight=5</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8080       max_fails=3 fail_timeout=30s</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> unix:/tmp/backend3</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">server</span> backup1.example.com  backup</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.57,words:171},t:"实用功能",y:"a"}}],["/middleware/smallService/cuowuzhuizonghexingnengjiankong/sentry.html",{loader:()=>a(()=>import("./sentry.html-BtbhvTPV.js"),__vite__mapDeps([1037,1])),meta:{a:"azrng",d:1675296e6,l:"2023年2月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Sentry 是开发人员优先的错误跟踪和性能监控平台，可帮助开发人员了解真正重要的事情、更快地解决问题并不断了解他们的应用程序。
仓库地址：<a href="https://github.com/getsentry/sentry" target="_blank" rel="noopener noreferrer">https://github.com/getsentry/sentry</a>
官网：<a href="https://sentry.io/welcome/" target="_blank" rel="noopener noreferrer">https://sentry.io/welcome/</a></p>`,r:{minutes:.43,words:130},t:"sentry",y:"a"}}],["/middleware/smallService/fenbushishiwu/fenbushishiwu-zuizhongyizhixingcap.html",{loader:()=>a(()=>import("./fenbushishiwu-zuizhongyizhixingcap.html-CgeQ28Jv.js"),__vite__mapDeps([1038,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>可以实现非实时、异步场景下的最终一致性分布式事务。</p>
<h2>操作</h2>
<p>首先需要引用的组件：
基础组件：DotNetCore.CAP.RabbitMQ
不同的数据库再使用不同的数据库组件
DotNetCore.CAP.MySql
DotNetCore.CAP.SqlServer
DotNetCore.CAP.PostgreSql
DotNetCore.CAP.MongoDB
Cap支持mssql，postgresql，mysql，mongodb用户存储操作记录
&nbsp;
&nbsp;
&nbsp;
appsettings.json中进行配置参数</p>`,r:{minutes:1.1,words:329},t:"分布式事务-最终一致性Cap",y:"a"}}],["/middleware/smallService/fenbushishiwu/fenbushishiwu.html",{loader:()=>a(()=>import("./fenbushishiwu.html-BBGaSsyX.js"),__vite__mapDeps([1039,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Rabbitmq.cap只能算分布式应用框架，实现了本地消息表模式，dtm才是纯粹的分布式事务框架</p>
<h2>场景</h2>
<p>一个项目对应一个数据库，这种单机业务是平时处理的比较多的；这里主要归纳一下会出现分布式事务的场景。</p>
<h3>一个项目对个数据库</h3>
<p>在一个下纲目中，同时连接了两个数据库，分别操作两个数据库，并且确保两次操作要不都成功，要不都失败，这就需要分布式事务进行处理。</p>
<h3>多个项目一个数据库</h3>
<p>有些系统需要将业务分开开发和部署，便于代码管理和后期维护，在数据库资源允许的情况下可以共用一个数据库，在这种情况下如果有事务操作，同样需要分布式事务进行处理。</p>`,r:{minutes:4.63,words:1390},t:"分布式事务",y:"a"}}],["/middleware/smallService/fenbushisuo/fenbushisuo.html",{loader:()=>a(()=>import("./fenbushisuo.html-C5WTzgwj.js"),__vite__mapDeps([1040,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>分布式锁也可以理解为跨主机的线程同步。</p>
<table>
<thead>
<tr>
<th>进程内</th>
<th>跨进程</th>
<th>跨主机</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lock/Monitor、SemaphoreSlim</td>
<td>Metux、Semaphore</td>
<td>分布式锁</td>
</tr>
<tr>
<td>用户态线程安全</td>
<td>内核态线程安全</td>
<td></td>
</tr>
</tbody>
</table>
<p>单机服务器可以通过共享堆内存来标记上锁/解锁，线程同步是建立在单击操作系统的用户态、内核态对共享内存的访问控制。</p>`,r:{minutes:3.52,words:1057},t:"分布式锁",y:"a"}}],["/middleware/smallService/fenbushisuo/redisfenbushisuo.html",{loader:()=>a(()=>import("./redisfenbushisuo.html-DbbCBTkn.js"),__vite__mapDeps([1041,1])),meta:{a:"azrng",d:16963776e5,l:"2023年10月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>实现原理</h2>
<h3>基础实现</h3>
<p>Redis 本身可以被多个客户端共享访问，正好就是一个共享存储系统，可以用来保存分布式锁，而且 Redis 的读写性能高，可以应对高并发的锁操作场景。
Redis 的 SET 命令有个 NX 参数可以实现「key不存在才插入」，所以可以用它来实现分布式锁：</p>
<ul>
<li>如果 key 不存在，则显示插入成功，可以用来表示加锁成功；</li>
<li>如果 key 存在，则会显示插入失败，可以用来表示加锁失败。</li>
</ul>
<p>SET lock_keyunique_value NX PX 10000</p>
<ul>
<li>lock_key 就是 key 键；</li>
<li>unique_value 是客户端生成的唯一的标识，区分来自不同客户端的锁操作；</li>
<li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li>
<li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li>
</ul>`,r:{minutes:5.82,words:1745},t:"Redis分布式锁",y:"a"}}],["/middleware/smallService/fenbushisuo/shujukufenbushisuo.html",{loader:()=>a(()=>import("./shujukufenbushisuo.html-BKiJi9gl.js"),__vite__mapDeps([1042,1])),meta:{a:"azrng",d:16481664e5,l:"2022年3月25日",c:["middleware"],g:["无"],o:!0,e:`<h2>实现原理</h2>
<p>可以借助sql语句中有添加数据，如果数据存在就返回false来判断是否获取到锁</p>
`,r:{minutes:.22,words:67},t:"数据库分布式锁",y:"a"}}],["/middleware/smallService/fuwuzhuceyufaxian/consul.html",{loader:()=>a(()=>import("./consul.html-CTAc8JA7.js"),__vite__mapDeps([1043,1])),meta:{a:"azrng",d:16663104e5,l:"2022年10月21日",c:["middleware"],g:["无"],o:!0,e:`<blockquote>
<p>理解：将一些服务注册到consul里面，然后后期想使用，需要根据指定的接口去获取服务地址和端口（多个负载的情况下会返回一个），然后再去调用我们想调用的服务</p>
</blockquote>
<h2>描述</h2>
<p>一个服务管理(服务注册与发现)软件。支持多数据中心下，分布式高可用的服务发现和配置共享。支持健康检查允许存储键值对。</p>
<p>在consul方案汇总中，每个提供服务的节点都要部署和运行consul的client agent，所有运行consul agent节点的集合构成consul cluster。Consul agent有两种运行方式：server和client。这里的server和client只是consul集群层面的区分，与搭建在cluster的应用服务无关。以server模式运行的consul agent节点用于维护consul集群的状态，官方建议每个consl cluster至少有3个或者以上的运行在server mode的agent，client节点不限。</p>`,r:{minutes:5.1,words:1530},t:"Consul",y:"a"}}],["/middleware/smallService/fuwuzhuceyufaxian/eureka.html",{loader:()=>a(()=>import("./eureka.html-CzMq29Rm.js"),__vite__mapDeps([1044,1])),meta:{a:"azrng",d:16663104e5,l:"2022年10月21日",c:["middleware"],g:["无"],o:!0,e:`<p>首先先安装nuget组件：Steeltoe.Discovery.ClientCore</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//然后在ConfigureServices中进行注入</span>
services<span class="token punctuation">.</span><span class="token function">AddDiscoveryClient</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
Configure中引用
app<span class="token punctuation">.</span><span class="token function">UseDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 
Appsettings中编写
<span class="token punctuation">{</span>
  <span class="token string">"Logging"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"IncludeScopes"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>
    <span class="token string">"Pivotal"</span><span class="token punctuation">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>
      <span class="token string">"Steeltoe"</span><span class="token punctuation">:</span> <span class="token string">"Debug"</span>
 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"spring"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"application"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"order-service"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"eureka"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"client"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"serviceUrl"</span><span class="token punctuation">:</span> <span class="token string">"http://192.168.130.132:8761/eureka/"</span><span class="token punctuation">,</span>
      <span class="token string">"shouldRegisterWithEureka"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//默认值是true</span>
     <span class="token string">"shouldFetchRegistry"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//设置指示客户端不要获取注册表，因为该应用无需发现服务。它只想注册服务</span>
      <span class="token string">"validate_certificates"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">"instance"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token string">"hostName"</span><span class="token punctuation">:</span> <span class="token string">"192.168.130.148"</span><span class="token punctuation">,</span><span class="token comment">//默认是在运行时自动确认的  不加上这个的话网关找不到服务</span>
      <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token number">14802</span><span class="token punctuation">,</span><span class="token comment">//设置该服务中注册的端口</span>
     <span class="token string">"leaseRenewalIntervalInSeconds"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
     <span class="token string">"leaseExpirationDurationInSeconds"</span><span class="token punctuation">:</span> <span class="token number">90</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.57,words:170},t:"Eureka",y:"a"}}],["/middleware/smallService/fuwuzhuceyufaxian/fuwuzhuceyufaxian.html",{loader:()=>a(()=>import("./fuwuzhuceyufaxian.html-CEqVaQpJ.js"),__vite__mapDeps([1045,1])),meta:{a:"azrng",d:16663104e5,l:"2022年10月21日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>服务提供者消费者都要注册到注册中心，然后就实现服务提供者、服务消费者的隔离。</p>
<h2>实现方案</h2>
<ul>
<li>Consul</li>
<li>Eureka</li>
<li>ServiceDiscovery</li>
</ul>
<h2>文档</h2>
<p>https://mp.weixin.qq.com/s/tmtqtpFulbgMJ1O8OH7ejw | .NET 中的服务发现</p>
`,r:{minutes:.29,words:86},t:"服务注册与发现",y:"a"}}],["/middleware/smallService/tongyipeizhiguanli/agileconfig.html",{loader:()=>a(()=>import("./agileconfig.html-EvS2udYv.js"),__vite__mapDeps([1046,1])),meta:{a:"azrng",d:16564608e5,l:"2022年6月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>基于NetCore开发的轻量级配置中心，部署简单、配置简单，使用简单，可以根据个人或者公司需求采用。</p>
<ul>
<li>部署简答，最少只需要一个数据节点，支持docker部署</li>
<li>支持多节点分布式部署来保证高可用</li>
<li>配置支持按照应用隔离，应用内配置支持分组隔离</li>
<li>使用长链接技术，配置信息实时推送到客户端</li>
<li>支持IConfiguration、IOptions模式读取配置，原程序几乎不用改造</li>
<li>配置修改支持版本记录，随时回滚配置</li>
<li>所有所有节点都故障，客户端支持从本地缓存读取配置</li>
</ul>`,r:{minutes:4.63,words:1390},t:"AgileConfig",y:"a"}}],["/middleware/smallService/tongyipeizhiguanli/apollo.html",{loader:()=>a(()=>import("./apollo.html-BxicH_VB.js"),__vite__mapDeps([1047,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>Apollo是携程框架部门研发的配置管理平台，能够集中化管理应用不同的环境，不同集群的配置，配置修改后能够实时推送到应用端，并且具有规范的权限、流程治理等特性。
&nbsp;
目前有针对Java和.Net的两个客户端供使用：
Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有额外支持。
.Net客户端不依赖任何框架，能够运行于所有.Net运行时环境。
&nbsp;
Apollo有一个核心的概念：Namespace。
Namespace是配置项的集合，类似于一个配置文件的概念。
Namespace类型有三种：私有类型、公共类型、关联类型（继承类型）。
Namespace的获取权限分为两种：private （私有的）、public （公共的）
&nbsp;
配置文件格式：prperties xml yml yaml json
&nbsp;
Apollo默认暴露了两个端口：8080(spring eureka服务注册中心)和8070(apollo配置中心管理界面)
&nbsp;
net使用需要使用组件：Com.Ctrip.Framework.Apollo.Configuration</p>`,r:{minutes:1.02,words:305},t:"Apollo",y:"a"}}],["/middleware/smallService/tongyipeizhiguanli/nacos.html",{loader:()=>a(()=>import("./nacos.html-AUxe9T0K.js"),__vite__mapDeps([1048,1])),meta:{a:"azrng",d:16873056e5,l:"2023年6月21日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>NET使用nacos配置，手把手教你分布式配置中心
<a href="https://www.cnblogs.com/raok/p/17348508.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/raok/p/17348508.html</a>
Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。
这么优秀的分布式服务管理平台，怎么能不接入呢？
nacos的安装和使用这里就不细说了，可以参考网上教程和官方文档。<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener noreferrer">https://nacos.io/zh-cn/docs/quick-start.html</a>
我们以创建一个webapi项目为例手把手教你使用Nacos进行配置管理和服务注册</p>`,r:{minutes:.69,words:208},t:"Nacos",y:"a"}}],["/middleware/smallService/tongyipeizhiguanli/zookeeper.html",{loader:()=>a(()=>import("./zookeeper.html-B-CjRAfA.js"),__vite__mapDeps([1049,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<p>分布式应用程序协调服务，为分布式应用程序提供一致性服务的软件，提供的功能包括:配置维护、域名服务、分布式同步、组服务等</p>
<p>系列教程：<a href="https://www.cnblogs.com/shanfeng1000/tag/Zookeeper/" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/shanfeng1000/tag/Zookeeper/</a></p>
`,r:{minutes:.29,words:86},t:"Zookeeper",y:"a"}}],["/middleware/smallService/wangguan/wangguan-kong.html",{loader:()=>a(()=>import("./wangguan-kong.html-aKmOh56G.js"),__vite__mapDeps([1050,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>kong是一个clould-native、快速的、可扩展的、分布式的微服务抽象层（也称为API网关、API中间件或在某些情况下称为服务网格）框架。更确切地说，Kong是一个在Nginx中运行的Lua应用程序，并且可以通过<a href="https://github.com/openresty/lua-nginx-module" target="_blank" rel="noopener noreferrer">lua-nginx模块实现</a>。Kong不是用这个模块编译Nginx，而是与<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>一起发布，<a href="https://openresty.org/" target="_blank" rel="noopener noreferrer">OpenResty</a>已经包含了lua-nginx-module。OpenResty&nbsp;不是&nbsp;Nginx的分支，而是一组扩展其功能的模块。</p>`,r:{minutes:2.21,words:663},t:"网关-kong",y:"a"}}],["/middleware/smallService/wangguan/wangguan-ocelot.html",{loader:()=>a(()=>import("./wangguan-ocelot.html-CMycWdN_.js"),__vite__mapDeps([1051,1])),meta:{a:"azrng",d:16629408e5,l:"2022年9月12日",c:["middleware"],g:["无"],o:!0,e:`<p>网关配置：</p>
<table>
<thead>
<tr>
<th><strong>key</strong></th>
<th><strong>value</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ReRoutes</td>
<td>告诉Ocelot如何处理上游的请求。</td>
</tr>
<tr>
<td>DownstreamPathTemplate</td>
<td>下游的路由模板，即真实处理请求的路径模板如：/api/...</td>
</tr>
<tr>
<td>DownstreamScheme</td>
<td>请求的方式，如：http,htttps</td>
</tr>
<tr>
<td>DownstreamHostAndPorts</td>
<td>下游的IP以及端口,可以有多个(如果使用负载均衡)，方便实现负载均衡，当然你也可以使用服务发现，实现下游服务的自动注册与发现，这篇文章不会讲解。</td>
</tr>
<tr>
<td>UpstreamPathTemplate</td>
<td>上游请求的模板，即用户真实请求的链接</td>
</tr>
<tr>
<td>UpstreamHttpMethod</td>
<td>上游请求的http方法，是个数组，你可以写多个。</td>
</tr>
<tr>
<td>GlobalConfiguration</td>
<td>顾名思义就是全局配置，此节点的配置允许覆盖ReRoutes里面的配置，你可以在这里进行通用的一些配置信息。</td>
</tr>
</tbody>
</table>`,r:{minutes:4.46,words:1338},t:"网关-Ocelot",y:"a"}}],["/middleware/smallService/wangguan/wangguan-yarp.html",{loader:()=>a(()=>import("./wangguan-yarp.html-vh-pBWCz.js"),__vite__mapDeps([1052,1])),meta:{a:"azrng",d:1656288e6,l:"2022年6月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一个反向代理的库</p>
<p>文档地址：<a href="https://microsoft.github.io/reverse-proxy/articles/getting-started.html" target="_blank" rel="noopener noreferrer">https://microsoft.github.io/reverse-proxy/articles/getting-started.html</a></p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/Yx0fNV7a1LcvLgs2u9DDbQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yx0fNV7a1LcvLgs2u9DDbQ</a> | C## 开源一个基于 yarp 的 API 网关 Demo，支持绑定 Kubernetes Service
本地保存地址：\\开发\\docs\\C## 开源一个基于 yarp 的 API 网关 Demo，支持绑定 Kubernetes Servi.png</p>`,r:{minutes:.38,words:113},t:"网关-yarp",y:"a"}}],["/middleware/smallService/wangguan/wangguan.html",{loader:()=>a(()=>import("./wangguan.html-Yc3fRVBG.js"),__vite__mapDeps([1053,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>API网关是微服务架构中的唯一入口，它提供一个单独且统一的API入口用于访问内部一个或多个API。它可以具有身份验证，监控，负载均衡，缓存，请求分片与管理，静态响应处理等。API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。
Ocelot是用.net Core实现的一款开源的网关,Ocelot其实就是一组按照顺序排列的.net core中间件。它接受到请求之后用request builder构建一个HttpRequestMessage对象并发送到下游服务，当下游请求返回到Ocelot管道时再由一个中间件将HttpRequestMessage映射到HttpResponse上返回客户端。</p>`,r:{minutes:2.78,words:834},t:"网关",y:"a"}}],["/middleware/tuxiangchuli/ocr/paddleocrsharp.html",{loader:()=>a(()=>import("./paddleocrsharp.html-BXorecs-.js"),__vite__mapDeps([1054,1])),meta:{a:"azrng",d:1691712e6,l:"2023年8月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>PaddleOCRSharp 是一个基于百度飞桨<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fpaddlepaddle%2FPaddleOCR" target="_blank" rel="noopener noreferrer">PaddleOCR</a>的.NET版本OCR工具类库。项目核心组件PaddleOCR.dll,由C++编写，根据百度飞桨<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fpaddlepaddle%2FPaddleOCR" target="_blank" rel="noopener noreferrer">PaddleOCR</a>的C++代码修改并优化而成。目前已经支持C++、.NET、Python、Golang、Rust等开发语言的直接API接口调用。项目包含文本识别、文本检测、表格识别功能。本项目针对小图识别不准的情况下做了优化，比飞桨原代码识别准确率有所提高。包含总模型仅8.6M的超轻量级中文OCR，单模型支持中英文数字组合识别、竖排文本识别、长文本识别。同时支持中英文、纯英文以及多种语言文本检测识别。</p>`,r:{minutes:1.03,words:310},t:"PaddleOCRSharp",y:"a"}}],["/middleware/tuxiangchuli/ocr/rapidocr.html",{loader:()=>a(()=>import("./rapidocr.html-hucOP2Yj.js"),__vite__mapDeps([1055,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>完全开源免费并支持离线快速部署的多平台多语言OCR，同样基于PaddleOCR</p>
<h2>资料</h2>
<p><a href="https://github.com/RapidAI/RapidOCR/blob/main/docs/README_zh.md" target="_blank" rel="noopener noreferrer">https://github.com/RapidAI/RapidOCR/blob/main/docs/README_zh.md</a> | RapidOCR/docs/README_zh.md at main · RapidAI/RapidOCR</p>`,r:{minutes:.22,words:65},t:"RapidOCR",y:"a"}}],["/middleware/tuxiangchuli/opencv/emgu_cv.html",{loader:()=>a(()=>import("./emgu_cv.html-D4jUfvCF.js"),__vite__mapDeps([1056,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Emgu.CV是一个基于OpenCV（开源计算机视觉库）的.NET封装库，开源使用，提供了丰富的图像处理和计算机视觉功能。
它提供了对OpenCV的高效访问和易于使用的接口，适用于图像处理、计算机视觉和机器学习等应用领域。
文档：<a href="https://emgu.com/wiki/index.php/Main_Page" target="_blank" rel="noopener noreferrer">https://emgu.com/wiki/index.php/Main_Page</a></p>
<h2>功能概述</h2>
<p>图像加载和保存：读取和保存各种图像格式。
图像处理：包括滤波、边缘检测、形态学操作等图像处理操作。
特征提取：提取图像的特征点、描述符等。
目标检测：提供多种目标检测算法，如人脸检测、目标跟踪等。
图像分割：实现图像分割和对象提取。</p>`,r:{minutes:.93,words:279},t:"Emgu.CV",y:"a"}}],["/middleware/tuxiangchuli/opencv/opencvsharp.html",{loader:()=>a(()=>import("./opencvsharp.html-DT9rXOTg.js"),__vite__mapDeps([1057,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>OpenCvSharp是一个基于OpenCV（开源计算机视觉库）的C#封装库，提供了丰富的图像处理和计算机视觉功能。它包括图像加载、处理、特征提取、目标检测、图像分割等功能，适用于图像处理、计算机视觉和机器学习等应用领域。</p>
<p>文档：<a href="http://github.com/shimat/opencvsharp" target="_blank" rel="noopener noreferrer">http://github.com/shimat/opencvsharp</a>
开源，非商业使用免费</p>
<h2>功能概述</h2>
<p>图像加载和保存：读取和保存各种图像格式。
图像处理：包括滤波、边缘检测、色彩转换等图像处理操作。
特征提取：提取图像的特征点、轮廓等。
目标检测：提供多种目标检测算法，如人脸检测、目标跟踪等。
图像分割：实现图像分割和对象提取。
OpenCvSharp是在C#中使用OpenCV功能的强大工具，可以方便地开发图像处理和计算机视觉应用。它提供了易于使用的API和示例代码，使开发者能够快速集成和使用OpenCV的功能。</p>`,r:{minutes:.97,words:291},t:"OpenCvSharp",y:"a"}}],["/middleware/tuxiangchuli/opencv/opencvsharp4.html",{loader:()=>a(()=>import("./opencvsharp4.html-Dn5bjFSC.js"),__vite__mapDeps([1058,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>适用于 .NET 的 OpenCV 包装器
仓库地址：<a href="https://github.com/shimat/opencvsharp" target="_blank" rel="noopener noreferrer">https://github.com/shimat/opencvsharp</a></p>
<h2>操作</h2>
<h2>直方图算法比较图片相似度</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 直方图相关性 </span>
<span class="token doc-comment comment">/// 结果越接近1 则越相似</span>
<span class="token doc-comment comment">/// 图片相似度识别（精度不高，速度较快，可用于以图搜图）</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgFile1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgFile2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Compare_Hist</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> imgFile1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> imgFile2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> matA <span class="token operator">=</span> Cv2<span class="token punctuation">.</span><span class="token function">ImRead</span><span class="token punctuation">(</span>imgFile1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> matB <span class="token operator">=</span> Cv2<span class="token punctuation">.</span><span class="token function">ImRead</span><span class="token punctuation">(</span>imgFile2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 拆分通道</span>
    Cv2<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>matA<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Mat<span class="token punctuation">[</span><span class="token punctuation">]</span></span> matA_S<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Cv2<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>matB<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Mat<span class="token punctuation">[</span><span class="token punctuation">]</span></span> matB_S<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//直方图的像素范围   </span>
    <span class="token class-name">Rangef<span class="token punctuation">[</span><span class="token punctuation">]</span></span> histRange <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rangef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//直方图数组大小</span>
    <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> histSize <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">256</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//直方图输出数组</span>
    <span class="token class-name">Mat</span> hist_A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Mat</span> hist_B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">bool</span></span> uniform <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> accumulate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    Cv2<span class="token punctuation">.</span><span class="token function">CalcHist</span><span class="token punctuation">(</span>matA_S<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hist_A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> histSize<span class="token punctuation">,</span> histRange<span class="token punctuation">,</span> uniform<span class="token punctuation">,</span> accumulate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Cv2<span class="token punctuation">.</span><span class="token function">CalcHist</span><span class="token punctuation">(</span>matB_S<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hist_B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> histSize<span class="token punctuation">,</span> histRange<span class="token punctuation">,</span> uniform<span class="token punctuation">,</span> accumulate<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//归一化，排除图像分辨率不一致的影响</span>
    Cv2<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span>hist_A<span class="token punctuation">,</span> hist_A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> NormTypes<span class="token punctuation">.</span>MinMax<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Cv2<span class="token punctuation">.</span><span class="token function">Normalize</span><span class="token punctuation">(</span>hist_B<span class="token punctuation">,</span> hist_B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> NormTypes<span class="token punctuation">.</span>MinMax<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//相关性比较</span>
    <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> Cv2<span class="token punctuation">.</span><span class="token function">CompareHist</span><span class="token punctuation">(</span>hist_A<span class="token punctuation">,</span> hist_B<span class="token punctuation">,</span> HistCompMethods<span class="token punctuation">.</span>Correl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.03,words:309},t:"OpenCVSharp4",y:"a"}}],["/middleware/tuxiangchuli/opencv/openVino.html",{loader:()=>a(()=>import("./openVino.html-CYLqUHIG.js"),__vite__mapDeps([1059,1])),meta:{a:"azrng",d:16983648e5,l:"2023年10月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Intel开发的OpenVINO工具包（Open Visual Inference and Neural network Optimization）就是这样一款强大的工具。作为一个开源的工具包，OpenVINO为开发者提供了强大的深度学习模型优化和推理功能，支持跨不同的Intel硬件平台进行部署，包括CPU, 集成GPU, Intel Movidius VPU, 和FPGAs。该工具包的初衷就是实现一处编码后，能在任何地方部署的机器学习推理的解决方案。</p>
<h2>功能</h2>
<ul>
<li>人脸识别</li>
<li>物体识别</li>
<li>物体分类</li>
<li>等</li>
</ul>`,r:{minutes:.58,words:173},t:"OpenVINO",y:"a"}}],["/middleware/tuxiangchuli/renlianshibie/arcsoft.html",{loader:()=>a(()=>import("./arcsoft.html-CYr8hjki.js"),__vite__mapDeps([1060,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>虹软（arcsoft）是一个国产人脸识别组件，它提供了.NET的API，可以供.NET开发调用。虹软人脸识别技术广泛应用于公安安防、金融行业、社交媒体、智能门禁等领域。目前SDK支持的图片格式有jpg，jpeg，png，bmp等。<br>
官网：<a href="https://ai.arcsoft.com.cn/index.htm" target="_blank" rel="noopener noreferrer">https://ai.arcsoft.com.cn/index.htm</a></p>
<p>商业软件，有免费试用次数</p>
<h2>功能概述</h2>`,r:{minutes:.97,words:292},t:"Arcsoft",y:"a"}}],["/middleware/tuxiangchuli/renlianshibie/facerecognitiondotnet.html",{loader:()=>a(()=>import("./facerecognitiondotnet.html-YvrT8rdV.js"),__vite__mapDeps([1061,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>面部识别 API</p>
<p>仓库地址：<a href="https://github.com/takuya-takeuchi/FaceRecognitionDotNet" target="_blank" rel="noopener noreferrer">https://github.com/takuya-takeuchi/FaceRecognitionDotNet</a>
在线文档：<a href="https://taktak.jp/FaceRecognitionDotNet/" target="_blank" rel="noopener noreferrer">https://taktak.jp/FaceRecognitionDotNet/</a></p>`,r:{minutes:.2,words:59},t:"FaceRecognitionDotNet",y:"a"}}],["/middleware/tuxiangchuli/renlianshibie/luxandfacesdk.html",{loader:()=>a(()=>import("./luxandfacesdk.html-Ct8XpSPE.js"),__vite__mapDeps([1062,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Luxand FaceSDK是一个商业人脸识别库，提供了高性能的人脸检测、识别和分析功能。
它的功能包括人脸检测、人脸比对、活体检测、情绪分析、性别年龄识别等，适用于人脸识别、身份验证、情感分析、面部表情分析等应用。
功能概述
人脸检测：快速准确地检测图像或视频中的人脸。
人脸比对：比较两个人脸的相似度，并返回相似度评分。
活体检测：判断人脸是否为真实的、活体的，以防止欺骗攻击。
情绪分析：识别人脸的情绪状态，如快乐、悲伤、愤怒等。
性别年龄识别：识别人脸的性别和年龄范围。
文档：<a href="https://luxand.com/facesdk/" target="_blank" rel="noopener noreferrer">https://luxand.com/facesdk/</a>
商业软件，但是有免费的试用次数</p>`,r:{minutes:.8,words:240},t:"Luxand FaceSDK",y:"a"}}],["/middleware/tuxiangchuli/renlianshibie/viewfacecore.html",{loader:()=>a(()=>import("./viewfacecore.html-DMhFvPsO.js"),__vite__mapDeps([1063,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>一个基于 SeetaFace6 的 .NET 人脸识别解决方案</li>
<li>本项目受到了 SeetaFaceEngine.Net 的启发</li>
<li>开源、免费、跨平台 (win/linux)</li>
</ul>
<p>仓库地址：<a href="https://github.com/ViewFaceCore/ViewFaceCore" target="_blank" rel="noopener noreferrer">https://github.com/ViewFaceCore/ViewFaceCore</a></p>
<h2>操作</h2>`,r:{minutes:.63,words:188},t:"ViewFaceCore",y:"a"}}],["/middleware/tuxiangchuli/shoushishibie/mediapipe_net.html",{loader:()=>a(()=>import("./mediapipe_net.html-Cz22iDvG.js"),__vite__mapDeps([1064,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>将MediaPipe的精华带入.NET生态系统！基于<a href="https://kgithub.com/homuler/MediaPipeUnityPlugin" target="_blank" rel="noopener noreferrer">MediaPipeUnity</a>，MediaPipe.NET 将<a href="https://mediapipe.dev/" target="_blank" rel="noopener noreferrer">Google的MediaPipe</a>完全带入.NET生态系统。</p>
<p>仓库地址：<a href="https://github.com/vignetteapp/MediaPipe.NET" target="_blank" rel="noopener noreferrer">https://github.com/vignetteapp/MediaPipe.NET</a></p>`,r:{minutes:.39,words:116},t:"MediaPipe.NET",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/chumoyanzhengmasimcaptcha.html",{loader:()=>a(()=>import("./chumoyanzhengmasimcaptcha.html-Bq1iZJRN.js"),__vite__mapDeps([1065,1])),meta:{a:"azrng",d:16837632e5,l:"2023年5月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>SimCaptcha 是一个简单易用的触摸验证码，包含了前端与后端。一个简单易用的触摸验证码促进你的开发。
仓库地址：<a href="https://github.com/yiyungent/SimCaptcha" target="_blank" rel="noopener noreferrer">https://github.com/yiyungent/SimCaptcha</a></p>
<h2>操作</h2>
<p>使用 Nuget 安装 SimCaptcha.AspNetCore
验证码注册</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Startup.cs </span>
<span class="token comment">// 注意: 省略了部分代码, 只保留主要部分, 详见示例(/examples/EasyAspNetCoreService)</span>
<span class="token comment">// 仅适用于 SimCaptcha.AspNetCore v0.3.0+</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.重要: 注册验证码配置</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimCaptchaOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>SimCaptchaOptions<span class="token punctuation">.</span>SimCaptcha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.添加 SimCaptcha</span>
    services<span class="token punctuation">.</span><span class="token function">AddSimCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 3.启用 SimCaptcha 中间件</span>
    app<span class="token punctuation">.</span><span class="token function">UseSimCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 现在</span>
    <span class="token comment">// "https://yourdomain.com/api/SimCaptcha/Img", "https://yourdomain.com/api/SimCaptcha/Check", "https://yourdomain.com/api/SimCaptcha/TicketVerify"</span>
    <span class="token comment">// 将开始工作</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.67,words:200},t:"触摸验证码SimCaptcha",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/huakuaiyanzhengmalazyslidecaptcha.html",{loader:()=>a(()=>import("./huakuaiyanzhengmalazyslidecaptcha.html-cSKDOBDc.js"),__vite__mapDeps([1066,1])),meta:{a:"azrng",d:16798752e5,l:"2023年3月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>LazySlideCaptcha是基于.Net Standard 2.1的滑动验证码模块。
仓库地址：<a href="https://gitee.com/pojianbing/lazy-slide-captcha" target="_blank" rel="noopener noreferrer">https://gitee.com/pojianbing/lazy-slide-captcha</a></p>
<h2>操作</h2>
<p>组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Lazy<span class="token punctuation">.</span>SlideCaptcha<span class="token punctuation">.</span>Core
</code></pre></div>`,r:{minutes:.28,words:84},t:"滑块验证码LazySlideCaptcha",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/huakuaiyanzhengmaverificationcode.html",{loader:()=>a(()=>import("./huakuaiyanzhengmaverificationcode.html-CI9VyQLU.js"),__vite__mapDeps([1067,1])),meta:{a:"azrng",d:1651968e6,l:"2022年5月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>用户拖动滑块完成时完成校验，支持PC端及移动端。并在后台保存用户校验过程的时间、精度、滑动轨迹等信息。
仓库地址：<a href="https://github.com/eatage/VerificationCode" target="_blank" rel="noopener noreferrer">https://github.com/eatage/VerificationCode</a></p>
<h2>操作</h2>
<p>输出的验证码为JSON格式，其中大图片是将原图裁剪成横向10份纵向2分共20张图片随机混淆拼接而成的，原图通过在前端移位还原，混淆信息带在JSON上
JSON格式说明：
errcode：状态码
y：裁剪的小图相对左上角的y轴坐标
array：验证码图片混淆规律
imgx：验证码图片宽度
imgy：验证码图片高度
small：裁剪的小图片
normal：验证码混淆后的图片
兼容信息：兼容主流浏览器，iPhone端的Safari、QQ内置浏览器、微信内置浏览器、Android端主流浏览器</p>`,r:{minutes:1.05,words:314},t:"滑块验证码VerificationCode",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/",{loader:()=>a(()=>import("./index.html-BlNtIP-y.js"),__vite__mapDeps([1068,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/rEtS6aHGGVEKaWDcypzuUw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/rEtS6aHGGVEKaWDcypzuUw</a> | 图形验证码+短信验证码实战</p>
`,r:{minutes:.15,words:44},t:"说明",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/tuxingyanzhengmaimagesharp.html",{loader:()=>a(()=>import("./tuxingyanzhengmaimagesharp.html-CBGhFIWK.js"),__vite__mapDeps([1069,1])),meta:{a:"azrng",d:16650144e5,l:"2022年10月6日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>借助跨平台库ImageSharp来实现生成验证码。</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>Fonts</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Processing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp<span class="token punctuation">.</span>PixelFormats</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">SixLabors<span class="token punctuation">.</span>ImageSharp<span class="token punctuation">.</span>Processing</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">CommonCollect</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptchaHelper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> _letters <span class="token operator">=</span> <span class="token string">"1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,J,K,L,M,N,P,Q,R,S,T,U,V,W,X,Y,Z"</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 生成验证码随机值</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codeLength<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GenerateRandomCaptchaAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> codeLength <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> _letters<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token char">','</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> temp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> captcheCode <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> codeLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span>i <span class="token operator">*</span> temp <span class="token operator">*</span> <span class="token keyword">unchecked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> index<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">GenerateRandomCaptchaAsync</span><span class="token punctuation">(</span>codeLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

            temp <span class="token operator">=</span> index<span class="token punctuation">;</span>
            captcheCode <span class="token operator">+=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>captcheCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 生成验证码及图片</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captchaCode<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token punctuation">(</span><span class="token keyword">string</span> code<span class="token punctuation">,</span> MemoryStream ms<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> <span class="token function">GenerateCaptchaImageAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> captchaCode<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> height <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//验证码颜色集合</span>
        <span class="token class-name">Color<span class="token punctuation">[</span><span class="token punctuation">]</span></span> colors <span class="token operator">=</span> <span class="token punctuation">{</span> Color<span class="token punctuation">.</span>Black<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>DarkBlue<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Orange<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Brown<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>DarkCyan<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Purple <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//验证码字体集合</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fonts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Verdana"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft Sans Serif"</span><span class="token punctuation">,</span> <span class="token string">"Comic Sans MS"</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> width <span class="token operator">=</span> captchaCode<span class="token punctuation">.</span>Length <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">//定义图像的大小，生成图像的实例</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Image<span class="token punctuation">&lt;</span>Rgba32<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 字体</span>
        <span class="token class-name"><span class="token keyword">var</span></span> font <span class="token operator">=</span> SystemFonts<span class="token punctuation">.</span><span class="token function">CreateFont</span><span class="token punctuation">(</span>SystemFonts<span class="token punctuation">.</span>Families<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> FontStyle<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span><span class="token punctuation">;</span>

        image<span class="token punctuation">.</span><span class="token function">Mutate</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 白底背景</span>
            ctx<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 画验证码</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> captchaCode<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span><span class="token function">DrawText</span><span class="token punctuation">(</span>captchaCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">,</span> font
                    <span class="token punctuation">,</span> colors<span class="token punctuation">[</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>
                    <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 画干扰线</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> pen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                ctx<span class="token punctuation">.</span><span class="token function">DrawLines</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 画噪点</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> pen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Pen</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PointF</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>X <span class="token operator">+</span> <span class="token number">1f</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                ctx<span class="token punctuation">.</span><span class="token function">DrawLines</span><span class="token punctuation">(</span>pen<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// gif 格式</span>
        image<span class="token punctuation">.</span><span class="token function">SaveAsGif</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span>captchaCode<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.62,words:486},t:"图形验证码ImageSharp",y:"a"}}],["/middleware/tuxiangchuli/yanzhengma/tuxingyanzhengmalazycaptcha.html",{loader:()=>a(()=>import("./tuxingyanzhengmalazycaptcha.html-BH7wv1Fi.js"),__vite__mapDeps([1070,1])),meta:{a:"azrng",d:16644096e5,l:"2022年9月29日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>LazyCaptcha是仿EasyCaptcha和SimpleCaptcha基于.NET Standard 2.1的图形验证码模块。</p>
<h3>项目地址</h3>
<p>Gitee：https://gitee.com/pojianbing/lazy-captcha
LazyCaptcha：https://gitee.com/pojianbing/lazy-captcha
EasyCaptcha：https://gitee.com/ele-admin/EasyCaptcha
SimpleCaptcha：https://github.com/1992w/SimpleCaptcha</p>`,r:{minutes:1.23,words:370},t:"图形验证码LazyCaptcha",y:"a"}}],["/middleware/testMange/duandaoduanceshi/",{loader:()=>a(()=>import("./index.html-CkEWfnH1.js"),__vite__mapDeps([1071,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>测试框架</h2>
<ul>
<li>Playwright</li>
<li><a href="https://www.automatetheplanet.com/webdriver-dotnetcore2/" target="_blank" rel="noopener noreferrer">Selenium</a></li>
<li><a href="https://github.com/kblok/puppeteer-sharp" target="_blank" rel="noopener noreferrer">Puppeteer-Sharp</a></li>
</ul>
`,r:{minutes:.13,words:40},t:"说明",y:"a"}}],["/middleware/testMange/fuzaiceshi/k6.html",{loader:()=>a(()=>import("./k6.html-DG1ryhmY.js"),__vite__mapDeps([1072,1])),meta:{a:"azrng",d:1687824e6,l:"2023年6月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>k6 是一个负载测试工具，可用于测量API 应用程序的性能和可扩展性。它支持用 JavaScript 编写测试，可用于模拟大量虚拟用户向您的 API 发出请求。k6 最适合您想要模拟大量并发用户并测量 API 在负载下的性能的负载测试场景。为开发人员的幸福而构建的现代负载测试工具。
官网：<a href="https://k6.io/open-source/" target="_blank" rel="noopener noreferrer">https://k6.io/open-source/</a>
文档：<a href="https://k6.io/docs/get-started/installation/" target="_blank" rel="noopener noreferrer">https://k6.io/docs/get-started/installation/</a></p>`,r:{minutes:3.46,words:1038},t:"K6",y:"a"}}],["/middleware/testMange/fuzaiceshi/",{loader:()=>a(()=>import("./index.html-B-7EUDYf.js"),__vite__mapDeps([1073,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>文档</h2>
<p>使用 k6 对 .NET 程序进行性能测试：<a href="https://mp.weixin.qq.com/s/jUoDSHrZKgHu08B1U3j7dw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/jUoDSHrZKgHu08B1U3j7dw</a></p>
`,r:{minutes:.15,words:45},t:"说明",y:"a"}}],["/middleware/testMange/jichengceshi/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-CP15HvRE.js"),__vite__mapDeps([1074,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>集成测试，顾名思义就是在单元测试的基础上，将所有的模块组装成子系统或者系统，然后再进行联合测试。与<a href="https://learn.microsoft.com/zh-cn/dotnet/core/testing/" target="_blank" rel="noopener noreferrer">单元测试</a>相比，集成测试可在更广泛的级别上评估应用的组件。 单元测试用于测试独立软件组件，如单独的类方法。 集成测试确认两个或更多应用组件一起工作以生成预期结果，可能包括完整处理请求所需的每个组件。</p>
<p>常用于测试应用的基础结构和整个框架，包括以下组件</p>`,r:{minutes:1.22,words:367},t:"概述",y:"a"}}],["/middleware/testMange/jichengceshi/testserver.html",{loader:()=>a(()=>import("./testserver.html-BJxf0FCL.js"),__vite__mapDeps([1075,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>为了方便 ASP.NET Core 中 API 的测试，微软提供了 <a href="https://docs.microsoft.com/ZH-CN/dotnet/api/microsoft.aspnetcore.testhost.testserver?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">TestServer</a>，它可以让我们在没有 IIS 或者任何外部事物的情况下对 Web 应用进行测试，使用 <code>TestServer</code> 的好处在于它是基于内存进行交互的没有真正的 HTTP 请求和 TCP 链接，会非常的高效，而且也不会监听某一个端口，所以不会有端口权限的问题。<code>TestServer</code> 的使用主要有两步，首先是服务的注册，可以使用 <code>IHostBuilder</code> 或 <code>IWebHostBuilder</code> 的 <code>UseTestServer</code> 扩展方法注册 <code>TestServer</code>，可以使用 <code>IHost</code> 的 <code>GetTestClient</code> 扩展方法来注册和 <code>TestServer</code> 进行交互的 <code>HttpClient</code>。</p>`,r:{minutes:4.87,words:1461},t:"TestServer",y:"a"}}],["/middleware/testMange/jizhunceshi/benchmarkdotnet.html",{loader:()=>a(()=>import("./benchmarkdotnet.html-Cf47UHpV.js"),__vite__mapDeps([1076,1])),meta:{a:"azrng",d:16876512e5,l:"2023年6月25日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>BenchmarkDotNet是一个用于对C#代码进行基准测试的.NET工具包。它可以将你的方法转化为基准，并提供一些测试报告，可以帮助你进行基准、性能测试。
官网：<a href="https://benchmarkdotnet.org/index.html" target="_blank" rel="noopener noreferrer">https://benchmarkdotnet.org/index.html</a>
文档：<a href="https://benchmarkdotnet.org/articles/overview.html" target="_blank" rel="noopener noreferrer">https://benchmarkdotnet.org/articles/overview.html</a></p>`,r:{minutes:4.01,words:1202},t:"BenchmarkDotNet",y:"a"}}],["/middleware/testMange/mohuceshi/sharpfuzz.html",{loader:()=>a(()=>import("./sharpfuzz.html-bT1TIViX.js"),__vite__mapDeps([1077,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>SharpFuzz是一个将<a href="http://lcamtuf.coredump.cx/afl/" target="_blank" rel="noopener noreferrer">afl-fuzz</a>的强大功能带到.NET平台的工具。如果您想了解有关模糊测试的更多信息， 我写SharpFuzz的动机，错误的类型 它可以找到，或关于如何 与 afl-fuzz 的集成工作，请阅读我的博客文章 <a href="https://mijailovic.net/2019/01/03/sharpfuzz/" target="_blank" rel="noopener noreferrer">SharpFuzz：将 afl-fuzz 的强大功能带到 .NET 平台</a>。</p>`,r:{minutes:.51,words:152},t:"SharpFuzz",y:"a"}}],["/middleware/testMange/pressureTest/jmeter.html",{loader:()=>a(()=>import("./jmeter.html-BNXoxroI.js"),__vite__mapDeps([1078,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Apache JMeter 可用于测试静态和动态资源、Web 动态应用程序的性能。
它可用于模拟服务器、服务器组、网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。</p>
<h2>安装</h2>
<p>安装Java JDK，下载地址：<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/downloads/</a>
JMeter官网下载：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener noreferrer">https://jmeter.apache.org/download_jmeter.cgi</a></p>`,r:{minutes:5.5,words:1649},t:"JMeter",y:"a"}}],["/middleware/testMange/pressureTest/nbomberyace.html",{loader:()=>a(()=>import("./nbomberyace.html-CznD6GN4.js"),__vite__mapDeps([1079,1])),meta:{a:"azrng",d:16797888e5,l:"2023年3月26日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>NBomber是一个开源的 .NET 框架，开源协议是Apache 2.0， NBomber 用于对多种服务进行负载测试，包括 Web、消息队列、数据库等。  今年5月份发布了 NBomber 2.0版本。NBomber 类似于JMeter，但是和JMeter 不一样的地方是， NBomber 是通过F#/C#/JSON 代码来表达测试场景。</p>
<ol>
<li>NBomber 背后的主要原因是为编写负载测试提供了一个<strong>轻量级</strong>框架，您可以使用它来测试<strong>任何</strong>系统并模拟<strong>任何</strong>生产工作负载。我们只想提供一些抽象，以便我们可以描述任何类型的负载，并且仍然有一个简单、直观的 API。</li>
<li>另一个目标是提供构建块，通过应用任何复杂的负载分布来验证您的 POC（概念验证）项目。</li>
<li>使用 NBomber，您可以测试任何 PULL 或 PUSH 系统（HTTP、WebSockets、GraphQl、gRPC、SQL Databse、MongoDb、Redis 等）。</li>
<li>使用 NBomber，<strong>您可以轻松地将一些集成测试转换为负载测试</strong>。</li>
</ol>`,r:{minutes:1.71,words:512},t:"NBomber压测",y:"a"}}],["/middleware/testMange/pressureTest/",{loader:()=>a(()=>import("./index.html-BqGIICzd.js"),__vite__mapDeps([1080,1])),meta:{a:"azrng",d:1649808e6,l:"2022年4月13日",c:["middleware"],g:["无"],o:!0,e:`<h2>测试工具</h2>
<ul>
<li>httpd压测</li>
<li>dotnet-httpie压测</li>
<li>LoadTestToolbox
<ul>
<li>https://mp.weixin.qq.com/s/2XQ_-iLCPRvF7CjjLDqe-g | 推荐一个使用 C# 开发的轻量级压测工具</li>
</ul>
</li>
<li>WebApiBenchmark</li>
<li>WebBenchmark</li>
</ul>
`,r:{minutes:.2,words:61},t:"说明",y:"a"}}],["/middleware/testMange/pressureTest/webapibenchmark.html",{loader:()=>a(()=>import("./webapibenchmark.html-BfdgsyB_.js"),__vite__mapDeps([1081,1])),meta:{a:"azrng",d:16592256e5,l:"2022年7月31日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>WebApi管理和测试工具
项目地址：<a href="https://github.com/IKende/WebApiBenchmark" target="_blank" rel="noopener noreferrer">https://github.com/IKende/WebApiBenchmark</a>
windows平台运行方式</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code>dotnet BeetleX.WebApiBenchmarks.dll
</code></pre></div>`,r:{minutes:.25,words:76},t:"WebApiBenchmark",y:"a"}}],["/middleware/testMange/unitTest/cliTest.html",{loader:()=>a(()=>import("./cliTest.html-BJZtNX6G.js"),__vite__mapDeps([1082,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过命令行来运行测试任务</p>
<h2>操作</h2>
<p>在单元测试目录下运行下面命令</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 执行所有测试任务</span>
dotnet <span class="token builtin class-name">test</span>

<span class="token comment">## 运行指定名字任务</span>
dotnet <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> TestMethod1
dotnet <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> Name~TestMethod1

<span class="token comment">## 排除某个方法</span>
dotnet <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> FullyQualifiedName<span class="token operator">!=</span>Walterlv.Demo.Tests.FooTest.TestMethod1

<span class="token comment">## 执行某一个类下的测试任务</span>
dotnet <span class="token builtin class-name">test</span> <span class="token parameter variable">--filter</span> <span class="token assign-left variable">ClassName</span><span class="token operator">=</span>Walterlv.Demo.Tests.FooTest

</code></pre></div>`,r:{minutes:.7,words:210},t:"命令行",y:"a"}}],["/middleware/testMange/unitTest/msTest.html",{loader:()=>a(()=>import("./msTest.html-DUHIMNM8.js"),__vite__mapDeps([1083,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["middleware"],g:["test"],o:!0,e:`<h2>操作</h2>
<h3>快速上手</h3>
<p>如果想使用MSTest框架，那么只需要在需要进行测试的方法上面点击右键，创建单元测试
<img src="/common/1631862845735-4fe85e55-66aa-4aaa-873a-74e90a0a6c5c.png" alt="image.png" loading="lazy">
点击确定后将会为我们创建一个单元测试的应用程序，关于User控制器的单元测试我们就写在这个里面
<img src="/common/1631862921441-56d5230b-68c0-4353-a4f1-8e971331f5f1.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.39,words:117},t:"MsTest",y:"a"}}],["/middleware/testMange/unitTest/",{loader:()=>a(()=>import("./index.html-0z3Q4M5T.js"),__vite__mapDeps([1084,1])),meta:{a:"azrng",d:16937856e5,l:"2023年9月4日",c:["middleware"],g:["无"],o:!0,e:`<h2>Intro</h2>
<blockquote>
<p>“不会写单元测试的程序员不是合格的程序员，不写单元测试的程序员不是优秀的工程师。”
—— 一只想要成为一个优秀程序员的渣逼程序猿。</p>
</blockquote>
<p>那么问题来了，什么是单元测试，如何做单元测试。</p>
<h2>单元测试</h2>
<h3>单元测试的定义</h3>
<p>对程序员自己编写的代码中的方法或者函数进行测试，并非是端到端的集成测试，不需要依赖外部系统的逻辑正确性。
按照维基百科上的说法，单元测试（Unit Testing）又称为模块测试, 是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。 程序单元是应用的最小可测试部件。在面向对象编程中，最小单元就是方法，包括基类、抽象类、或者派生类（子类）中的方法。 按照通俗的理解，一个单元测试判断某个特定场条件下某个特定方法的行为，如斐波那契数列算法，冒泡排序算法。</p>`,r:{minutes:9.74,words:2923},t:"说明",y:"a"}}],["/middleware/testMange/unitTest/testSpecification.html",{loader:()=>a(()=>import("./testSpecification.html--WJeGdWH.js"),__vite__mapDeps([1085,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>最佳实践</h2>
<p>编写单元测试的时候，尽量不要引入基础结构依赖项，依赖项会降低测试的速度，使测试更脆弱，该方式应该在集成测试的时候使用。</p>
<p>将单元测试项目保存在单独的项目中，和集成测试相互分割，这样子可以确保单元测试项目没有引用或者依赖基础结构包。</p>
<h2>优质单元测试的特征</h2>
<ul>
<li>快速：对成熟项目进行数千次单元测试，这很常见。 单元测试应该只需很少的时间即可运行。 几毫秒。</li>
<li>独立：单元测试是独立的，可以单独运行，并且不依赖文件系统或数据库等任何外部因素。</li>
<li>可重复：运行单元测试的结果应该保持一致，也就是说，如果在运行期间不更改任何内容，总是返回相同的结果。</li>
<li>自检查：测试应该能够在没有任何人工交互的情况下自动检测测试是否通过。</li>
<li>适时：与要测试的代码相比，编写单元测试不应花费过多不必要的时间。 如果发现测试代码与编写代码相比需要花费大量的时间，请考虑一种更易测试的设计。</li>
</ul>`,r:{minutes:2.54,words:762},t:"单元测试规范",y:"a"}}],["/middleware/testMange/unitTest/xunitDependencyInjection.html",{loader:()=>a(()=>import("./xunitDependencyInjection.html-BQcAgj_s.js"),__vite__mapDeps([1086,1])),meta:{a:"azrng",d:16972416e5,l:"2023年10月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个用来简化xUnit编写单元测试和集成测试的包
仓库地址：<a href="https://github.com/pengweiqhca/Xunit.DependencyInjection" target="_blank" rel="noopener noreferrer">https://github.com/pengweiqhca/Xunit.DependencyInjection</a></p>
<h2>工作流程</h2>
<p>首先会去尝试寻找项目中的 Startup ，这个 Startup 很类似于 asp.net core 中的 Startup，只是有一点不同， Startup 不支持依赖注入，不能像 asp.net core 中那样注入一个 IConfiguration 对象来获取配置，除此之外，和 asp.net core 的 Startup 有着一样的体验，如果找不到这样的 Startup 就会认为没有需要依赖注入的服务和特殊的配置，直接使用 Xunit 原有的 XunitTestFrameworkExecutor，如果找到了 Startup 就从 Startup 约定的方法中配置 Host，注册服务以及初始化配置流程，最后使用 DependencyInjectionTestFrameworkExecutor 执行我们的 test case.</p>`,r:{minutes:6.48,words:1945},t:"Xunit.DependencyInjection",y:"a"}}],["/middleware/testMange/unitTest/xunitTest.html",{loader:()=>a(()=>import("./xunitTest.html-BlGpf-Ad.js"),__vite__mapDeps([1087,1])),meta:{a:"azrng",d:16975872e5,l:"2023年10月18日",c:["middleware"],g:["test"],o:!0,e:`<h2>概述</h2>
<p>xUnit 是一个针对 .NET 平台的开源单元测试框架，用于编写和执行自动化单元测试，常用来测试指定的方法。
官网：<a href="https://xunit.net/" target="_blank" rel="noopener noreferrer">https://xunit.net/</a></p>
<h2>操作</h2>
<h3>快速上手</h3>
<h4>创建单元测试项目</h4>
<p>本次文章还在原来项目的基础上进行操作(<a href="https://gitee.com/AZRNG/my-example" target="_blank" rel="noopener noreferrer">https://gitee.com/AZRNG/my-example</a>)，右键解决方案添加单元测试项目
<img src="/common/1676439707756-ba969083-a7ab-48bf-bea7-8aa4ed63738d.png" alt="image.png" loading="lazy">
点击下一步
<img src="/common/1631872707111-5bc7e39a-e7c5-484d-88e3-2687849ea4a9.png" alt="image.png" loading="lazy">
选择框架版本为.Net 5.0
<img src="/common/1631872791679-fd470686-fef4-4c00-b540-f7a6e27c2019.png" alt="image.png" loading="lazy">
单元测试项目创建完成。然后引用我们的包</p>`,r:{minutes:6.17,words:1851},t:"xUnit",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/aspnetcore_rabbitmq.html",{loader:()=>a(()=>import("./aspnetcore_rabbitmq.html-Dw8303rJ.js"),__vite__mapDeps([1088,1])),meta:{a:"azrng",d:16930944e5,l:"2023年8月27日",c:["middleware"],g:["无"],o:!0,e:`<h3>1.日志记录</h3>
<p>生产者</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddRabbitLogger</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token comment">//添加日志相关的服务，数据以json形式发送到rabbitmq中</span>
        <span class="token punctuation">{</span>
            options<span class="token punctuation">.</span>Hosts <span class="token operator">=</span> hosts<span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>Password <span class="token operator">=</span> password<span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>Port <span class="token operator">=</span> port<span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>UserName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>VirtualHost <span class="token operator">=</span> virtualHost<span class="token punctuation">;</span>

            options<span class="token punctuation">.</span>Arguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>Durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>AutoDelete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

            options<span class="token punctuation">.</span>Category <span class="token operator">=</span> <span class="token string">"Home"</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>MinLevel <span class="token operator">=</span> LogLevel<span class="token punctuation">.</span>Warning<span class="token punctuation">;</span>

            <span class="token comment">//队列模式</span>
            options<span class="token punctuation">.</span>Queue <span class="token operator">=</span> <span class="token string">"queue.logger"</span><span class="token punctuation">;</span>

            <span class="token comment">//交换机模式</span>
            <span class="token comment">//options.Exchange = "exchange.logger"; </span>
            <span class="token comment">//options.RouteQueues = new RouteQueue[] { new RouteQueue() { Queue = "queue.logger", Route = "#" } };</span>
            <span class="token comment">//options.Type = RabbitExchangeType.Topic;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.78,words:233},t:"AspNetCore.Rabbitmq",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/easynetq.html",{loader:()=>a(()=>import("./easynetq.html-r-0jScLV.js"),__vite__mapDeps([1089,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<h3>介绍</h3>
<p>作者在核心的IBus接口中尽量避免暴露AMQP中的交换机、队列、绑定这些概念，使用者即时不去了解这些概念，也能完成消息的发送接收，但是在某些应用场景下，我们还是需要自定义交换机、队列、绑定这些信息，这个时候通过IAdvanceBus接口实现。</p>
<h3>连接字符串</h3>
<p>host&nbsp;&nbsp;这个字段是必选的。如要具体指定你要连接服务器端口，你用标准格式 host:port。假如你省略了端口号，AMQP默认端口是5672。如果连接到RabbitMQ集群，需要指定每一个集群节点用逗号（.）分隔
&nbsp;&nbsp;&nbsp; virtualhost&nbsp;&nbsp; 默认虚拟主机是'/'
&nbsp;&nbsp;&nbsp; username&nbsp;&nbsp;默认是'guest'
&nbsp;&nbsp;&nbsp; password&nbsp;&nbsp;默认为'guest'
&nbsp;&nbsp;&nbsp; requestedHearbeat&nbsp;&nbsp; 默认为10秒钟。没有心跳设置为0
&nbsp;&nbsp;&nbsp; prefetchcount&nbsp;&nbsp;默认为50.这个值是在EasyNetQ发送ack之前发送给RabbitMQ的消息数。不限制设置为0（不推荐）. 为了在消费者之间保持公平和平衡设置为1.
&nbsp;&nbsp;&nbsp; persistentMessages&nbsp;&nbsp;默认为true。这个决定了在发送消息时采用什么样的delivery_mode。设置为true，RabbitMQ将会把消息持久化到磁盘，并且在服务器重启后仍会存在。设置为false可以提高性能收益。
&nbsp;&nbsp;&nbsp; timeout&nbsp;&nbsp;模式值为10秒。不限制超时时间设置为0.当超时事时抛出System.TimeoutException.
完整字符串：host=47.104.255.61;virtualHost=/;username=admin;password=123456;timeout=60</p>`,r:{minutes:1.72,words:517},t:"EasyNetQ",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/kongzhiqishiyongrabbitmq.html",{loader:()=>a(()=>import("./kongzhiqishiyongrabbitmq.html-Cr0zcQLD.js"),__vite__mapDeps([1090,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["middleware"],g:["无"],o:!0,e:`<p>发送消息</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//Send.cs </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//1.1.实例化连接工厂</span>
    <span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> HostName <span class="token operator">=</span> <span class="token string">"localhost"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 建立连接</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//3. 创建信道</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//4. 申明队列</span>
            channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">exclusive</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoDelete</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//5. 构建byte消息数据包</span>
            <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> args<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"Hello RabbitMQ!"</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//6. 发送数据包</span>
            channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" [x] Sent {0}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.9,words:270},t:"控制器使用rabbitmq",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/rabbitmq.html",{loader:()=>a(()=>import("./rabbitmq.html-BE4gmBEU.js"),__vite__mapDeps([1091,1])),meta:{a:"azrng",d:16930944e5,l:"2023年8月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>实现了高级消息队列协议(AMQP)的开源消息代码软件，由以高性能、健壮以及伸缩性出名的Erlang语言写成。</p>
<h2>主要的端口</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token number">4369</span> <span class="token operator">--</span> erlang发现口
<span class="token number">5672</span> <span class="token operator">--</span>client端通信口
<span class="token number">15672</span> <span class="token operator">--</span> 管理界面ui端口
<span class="token number">25672</span> <span class="token operator">--</span> server间内部通信口

如何我们要访问rabbitmq管理界面就需要访问：
http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">15672</span><span class="token operator">/</span>
 
我们需要连接rabbitmq就需要client端通信端口：
server<span class="token punctuation">:</span> amqp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>guest<span class="token punctuation">:</span>guest@localhost<span class="token punctuation">:</span><span class="token number">5672</span><span class="token operator">/</span>
</code></pre></div>`,r:{minutes:5.1,words:1531},t:"说明",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/rabbitmqmoshi.html",{loader:()=>a(()=>import("./rabbitmqmoshi.html-B5ILpg0W.js"),__vite__mapDeps([1092,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["middleware"],g:["无"],o:!0,e:`<h2>接收者角度分为三种模式</h2>
<p>一对一、一对多、发布订阅</p>
<blockquote>
<p>一对一：简单队列模式
一对多：worker模式(并不是发布订阅，而是一个发布者对应多个消费者，但是一个消息只能有一个消费者)
发布订阅包括发布订阅模式、路由模式、通配符模式，因为这三种模式都是使用交换机，只不过类型不同而已。</p>
</blockquote>
<table>
<thead>
<tr>
<th>模式名</th>
<th>模式说明</th>
<th>一个消息是否可以多个消费者消费</th>
</tr>
</thead>
<tbody>
<tr>
<td>简单队列模式</td>
<td>路由键直接和队列进行绑定</td>
<td>不支持</td>
</tr>
<tr>
<td>worker模式</td>
<td>和简单队列模式一样，不过接收者变为多个，多个消费者依次接收</td>
<td>同一个队列中只会有一个消费，多个队列会依次消费</td>
</tr>
<tr>
<td>fanout(广播模式)</td>
<td>没有路由键，绑定到该交换机的队列都收到消息</td>
<td>同一个队列中只会有一个消费，多个队列会有同时消费</td>
</tr>
<tr>
<td>direct(路由模式)</td>
<td>交换机和队列的路由键需要完全匹配，则转发到对应的队列中</td>
<td>同一个队列中只会有一个消费，多个队列会有同时消费</td>
</tr>
<tr>
<td>topic(通配符模式)</td>
<td>交换机和队列的路由键进行模式匹配</td>
<td>同一个队列中只会有一个消费，多个队列会有同时消费</td>
</tr>
</tbody>
</table>`,r:{minutes:6.14,words:1843},t:"RabbitMQ模式",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/rabbitmqtuli.html",{loader:()=>a(()=>import("./rabbitmqtuli.html-BsfRIbmQ.js"),__vite__mapDeps([1093,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<p><img src="/common/1609400262296-95dbc05d-da59-4ccd-9cef-143fcd0c9067.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
&nbsp;
消息从生产=&gt;消息的整个流程
<img src="/common/1609400262008-2904c994-035a-4957-9029-f4e39d86d350.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
Note：首先这个过程走分三个部分，1、客户端（生产消息队列），2、RabbitMQ服务端（负责路由规则的绑定与消息的分发），3、客户端（消费消息队列中的消息）
<img src="/common/1609400262016-2d013322-70ec-43b0-b671-8bcc4045b388.jpeg" alt="image.jpeg" loading="lazy">
&nbsp;
Note:由图可以看出，一个消息可以走一次网络却被分发到不同的消息队列中，然后被多个的客户端消费，那么这个过程就是RabbitMQ的核心机制，RabbitMQ的路由类型与消费模式</p>`,r:{minutes:.61,words:184},t:"Rabbitmq图例",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/shiyongzongjie.html",{loader:()=>a(()=>import("./shiyongzongjie.html-DBbII-FS.js"),__vite__mapDeps([1094,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>持久化</h2>
<div class="language-c#" data-ext="c#" data-title="c#"><pre class="language-c#"><code>channel.QueueDeclare(queue: "task_queue", durable: true, exclusive: false, autoDelete: false, arguments: null);
</code></pre></div><p>设置是否持久化，如果设置为false，那么关闭服务再打开服务，那么队列会消息，如果设置了持久化，那么关闭服务开启服务，甚至电脑关机该队列都存在。</p>`,r:{minutes:.52,words:155},t:"使用总结",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/xianzhixunhuanxiaofei.html",{loader:()=>a(()=>import("./xianzhixunhuanxiaofei.html-CuJFouKn.js"),__vite__mapDeps([1095,1])),meta:{a:"azrng",d:16682112e5,l:"2022年11月12日",c:["middleware"],g:["无"],o:!0,e:`<h2>参考文档</h2>
<p>限制循环消费：<a href="https://mp.weixin.qq.com/s/x6CdKe10YTYt3frBEFy9ow" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/x6CdKe10YTYt3frBEFy9ow</a></p>
`,r:{minutes:.15,words:44},t:"限制循环消费",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/xiaoxiquerenmoshi.html",{loader:()=>a(()=>import("./xiaoxiquerenmoshi.html-D5FBEax5.js"),__vite__mapDeps([1096,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["middleware"],g:["无"],o:!0,e:`<h3>自动确认</h3>
<p>只要消息从队列中取出，无论消费者获取到消息后是否成功消费，都认为是消息成功消费。</p>
<h3>手动确认</h3>
<p>消息从队列中获取到消息后，服务器会将该消息处于不可用状态，等待消费者反馈
修改消息确认模式改为手动即可</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>consumer<span class="token punctuation">.</span>Received <span class="token operator">+=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                    <span class="token punctuation">{</span>
                        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待1秒,</span>
                        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> message <span class="token operator">=</span> ea<span class="token punctuation">.</span>Body<span class="token punctuation">;</span><span class="token comment">//接收到的消息</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"接收到信息为:"</span> <span class="token operator">+</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">//返回消息确认</span>
                        channel<span class="token punctuation">.</span><span class="token function">BasicAck</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>DeliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">;</span>
                    <span class="token comment">//消费者开启监听</span>
                    <span class="token comment">//将autoAck设置false 关闭自动确认</span>
                    channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">consumer</span><span class="token punctuation">:</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.63,words:190},t:"消息确认模式",y:"a"}}],["/middleware/xiaoxiduilie/rocketmq/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-gRlBxITQ.js"),__vite__mapDeps([1097,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>参考资料</h2>
<p><a href="https://mp.weixin.qq.com/s/PFcV0Q_bSCYv69kaWGJlSA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/PFcV0Q_bSCYv69kaWGJlSA</a> | .Net中使用 RocketMQ队列详解</p>
`,r:{minutes:.14,words:43},t:"概述",y:"a"}}],["/middleware/yinpinshipin/ffmpeg/ffmpeg_autogen.html",{loader:()=>a(()=>import("./ffmpeg_autogen.html-CVcWJJsa.js"),__vite__mapDeps([1098,1])),meta:{a:"azrng",d:16863552e5,l:"2023年6月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>仓库地址：<a href="https://github.com/Ruslan-B/FFmpeg.AutoGen" target="_blank" rel="noopener noreferrer">https://github.com/Ruslan-B/FFmpeg.AutoGen</a></p>
`,r:{minutes:.12,words:37},t:"FFmpeg.AutoGen",y:"a"}}],["/middleware/yinpinshipin/ffmpeg/jichujieshao.html",{loader:()=>a(()=>import("./jichujieshao.html-De_qZqtB.js"),__vite__mapDeps([1099,1])),meta:{a:"azrng",d:16870464e5,l:"2023年6月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>FFmpeg是一个自由软件，可以运行音频和视频多种格式的录影、转换、流功能，包含了libavcodec——这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。</p>
<p>Github地址：https://github.com/FFmpeg/FFmpeg
官网地址：https://www.ffmpeg.org/
下载地址：<a href="http://www.ffmpeg.org/download.html" target="_blank" rel="noopener noreferrer">http://www.ffmpeg.org/download.html</a></p>`,r:{minutes:.57,words:172},t:"基础介绍",y:"a"}}],["/middleware/yinpinshipin/ffmpeg/sdcb_ffmpeg.html",{loader:()=>a(()=>import("./sdcb_ffmpeg.html-BDwKJQWN.js"),__vite__mapDeps([1100,1])),meta:{a:"azrng",d:16914528e5,l:"2023年8月8日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<ul>
<li>
<p>Sdcb.FFmpeg</p>
</li>
<li>
<p>Sdcb.FFmpeg.runtime.windows-x64</p>
</li>
</ul>
<p>Sdcb.FFmpeg是高质量的FFmpeg C API .NET封装，可以不通过命令行——以进程内的方式实现FFmpeg音频视频操作</p>
<p>仓库地址：<a href="https://github.com/sdcb/Sdcb.FFmpeg" target="_blank" rel="noopener noreferrer">https://github.com/sdcb/Sdcb.FFmpeg</a></p>`,r:{minutes:.31,words:92},t:"Sdcb.FFmpeg",y:"a"}}],["/middleware/yinpinshipin/ffmpeg/shipinjietu.html",{loader:()=>a(()=>import("./shipinjietu.html-CjgKJX_n.js"),__vite__mapDeps([1101,1])),meta:{a:"azrng",d:16870464e5,l:"2023年6月18日",c:["middleware"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>一般在界面显示的时候，是需要对视频有个预览的效果，就是显示某一帧视频的画面。</p>
<h2>参数</h2>
<p>主要参数
-i——设置输入档名。
-f——设置输出格式。
-y——若输出文件已存在时则覆盖文件。
-fs——超过指定的文件大小时则结束转换。
-t——指定输出文件的持续时间，以秒为单位。
-ss——从指定时间开始转换，以秒为单位。
-t从-ss时间开始转换（如-ss 00:00:01.00 -t 00:00:10.00即从00:00:01.00开始到00:00:11.00）。
-title——设置标题。
-timestamp——设置时间戳。
-vsync——增减Frame使影音同步。
-c——指定输出文件的编码。
-metadata——更改输出文件的元数据。
-help——查看帮助信息。</p>`,r:{minutes:1.6,words:481},t:"视频截图",y:"a"}}],["/middleware/yinpinshipin/liumeitifuwu/",{loader:()=>a(()=>import("./index.html-DLOF4me6.js"),__vite__mapDeps([1102,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>srs  or zlmediakit</p>
<p><a href="https://zhuanlan.zhihu.com/p/565183227" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/565183227</a> | SRS、EasyDarwin、ZLMediaKit、Monibuca对比分析 - 知乎</p>
`,r:{minutes:.15,words:45},t:"说明",y:"a"}}],["/middleware/yinpinshipin/liumeitifuwu/zlmediakit.html",{loader:()=>a(()=>import("./zlmediakit.html-DWprHYN-.js"),__vite__mapDeps([1103,1])),meta:{a:"azrng",d:1685232e6,l:"2023年5月28日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><strong>ZLMediaKit</strong>是一套高性能的流媒体服务框架，目前支持rtmp、rtsp、hls、http-flv等流媒体协议，支持linux、macos、windows三大PC平台和ios、android两大移动端平台。</p>
`,r:{minutes:.26,words:77},t:"ZLMediaKit",y:"a"}}],["/soft/devTools/dbTools/dbchm.html",{loader:()=>a(()=>import("./dbchm.html-Dc6PVamV.js"),__vite__mapDeps([1104,1])),meta:{a:"azrng",d:1679616e6,l:"2023年3月24日",c:["soft"],o:!0,e:`<h2>概述</h2>
<p>DBHCM 是一个对数据库文档生成工具！ 该工具从最初支持chm文档格式开始，通过开源，大家集思广益，不断改进，又陆续支持word、excel、pdf、html、xml、markdown等文档格式的导出。本项目力求做最简单、最实用的数据库文档(字典)生成工具！</p>
<p>支持的数据库：sqlsever、mysql、oracle、postgresql、db2、sqlite</p>
<p>Gitee：https://gitee.com/dotnetchina/DBCHM</p>
<h2>使用场景</h2>
<p>之前时候公司为了保存项目文档，防止后续新入职员工看不懂项目，就要求保存文档，比如数据库，就要求对数据库进行存档，保存成word或者excel(对于那个一个一个赋值真是心有余悸)，偶尔有一次发现了该开源项目，可以通过该项目一键生成常用的文档格式。是不是可以少加会班了。</p>`,r:{minutes:1.08,words:323},t:"DBCHM",y:"a"}}],["/soft/devTools/dbTools/navicat.html",{loader:()=>a(()=>import("./navicat.html-yqQszUc0.js"),__vite__mapDeps([1105,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Navicat"],g:["无"],e:`<h2>Issue</h2>
<h3>连接sqlserver报错</h3>
<p>1、未发现数据源名称并且未指定默认驱动程序</p>
<figure><img src="/common/1619574274261-d2044620-55b1-41cc-a657-59da802eed34.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<p>原因是navicat没有安装sqlserver驱动，需要在navicat的安装目录下运行指定文件安装</p>
<figure><img src="/common/1619574452414-c8cfd415-a207-459f-b710-bf0fd86ba9d4.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,r:{minutes:.35,words:104},t:"Navicat",O:1,y:"a"}}],["/soft/devTools/dbTools/",{loader:()=>a(()=>import("./index.html-B9_bavW7.js"),__vite__mapDeps([1106,1])),meta:{a:"azrng",d:17039808e5,l:"2023年12月31日",c:["soft"],o:!0,e:`<h2>数据库管理工具</h2>
<ul>
<li><a href="https://www.jetbrains.com/zh-cn/datagrip/" target="_blank" rel="noopener noreferrer">DataGrip</a></li>
<li><a href="https://navicat.com.cn/" target="_blank" rel="noopener noreferrer">Navicat</a></li>
<li><a href="https://dbeaver.io/" target="_blank" rel="noopener noreferrer">dbeaver</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/azure-data-studio/what-is-azure-data-studio" target="_blank" rel="noopener noreferrer">Azure Data Studio</a></li>
</ul>`,r:{minutes:.19,words:58},t:"说明",y:"a"}}],["/soft/devTools/JetBrains/datagrip.html",{loader:()=>a(()=>import("./datagrip.html-1GLG2GJl.js"),__vite__mapDeps([1107,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>数据库管理工具</p>
<h2>驱动程序</h2>
<p>JDBC驱动程序下载地址：<a href="https://www.jetbrains.com.cn/datagrip/jdbc-drivers/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com.cn/datagrip/jdbc-drivers/</a></p>
`,r:{minutes:.16,words:49},t:"DataGrip",O:1,y:"a"}}],["/soft/devTools/JetBrains/dotmemery.html",{loader:()=>a(()=>import("./dotmemery.html-DhhfMbhD.js"),__vite__mapDeps([1108,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>.NET 内存分析器</p>
`,r:{minutes:.1,words:29},t:"dotMemery",O:2,y:"a"}}],["/soft/devTools/JetBrains/dotpeek.html",{loader:()=>a(()=>import("./dotpeek.html-CAHKERtD.js"),__vite__mapDeps([1109,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>dotPeek 是 JetBrains 开发的一款.Net反编译工具，是.Net工具套件中的一个，而且免费使用。
下载地址：<a href="https://www.jetbrains.com.cn/en-us/decompiler/download/#section=web-installer" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com.cn/en-us/decompiler/download/#section=web-installer</a></p>
`,r:{minutes:.23,words:69},t:"dotPeek",O:3,y:"a"}}],["/soft/devTools/JetBrains/dottrace.html",{loader:()=>a(()=>import("./dottrace.html-CupHWyIM.js"),__vite__mapDeps([1110,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>.NET 性能分析器</p>
`,r:{minutes:.1,words:29},t:"dotTrace",O:4,y:"a"}}],["/soft/devTools/JetBrains/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-CQXQRPvB.js"),__vite__mapDeps([1111,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>ReSharper - 适用于.NET开发者的Visual Studio扩展 [12]
dotCover - .NET 单元测试运行程序和代码覆盖率工具 [13]
dotMemory - .NET 内存分析器 [14]
dotPeek - 免费 .NET 反编译器和程序集浏览器 [15]
dotTrace - .NET 性能分析器 [16]</p>
<h2>汉化</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在新版本中直接安装中文插件即可</p>
</div>`,r:{minutes:1.42,words:426},t:"概述",O:6,y:"a"}}],["/soft/devTools/JetBrains/rider.html",{loader:()=>a(()=>import("./rider.html-Bq6dz4us.js"),__vite__mapDeps([1112,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["JetBrains"],g:["无"],e:`<h2>概述</h2>
<p>.Net开发工具</p>
<p>最新版下载地址：<a href="https://www.jetbrains.com/rider/download/#section=windows" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/rider/download/#section=windows</a></p>
<h2>功能</h2>
<h3>动态程序分析(DPA)</h3>
<p><a href="https://www.jetbrains.com/help/rider/Dynamic_Program_Analysis.html" target="_blank" rel="noopener noreferrer">说明</a></p>`,r:{minutes:.88,words:265},t:"Rider",O:1,y:"a"}}],["/soft/devTools/projectManage/chandao.html",{loader:()=>a(()=>import("./chandao.html-gqTRUPUv.js"),__vite__mapDeps([1113,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["项目管理"],g:["无"],e:`<p>1.下载地址：<a href="http://www.zentao.net/download/80081.html" target="_blank" rel="noopener noreferrer">http://www.zentao.net/download/80081.html</a>  下载一键安装包根据本机系统下载
<strong>2、解压完打开文件夹xampp，点击start.exe</strong>
<img src="/common/1609895382582-e37ad0ff-59db-4b1f-945a-cc50ea91a113.png" alt="image.png" loading="lazy">
3.启动禅道
<img src="/common/1609895382672-af7d725d-d9f6-44c1-bd92-fc2f6e57632f.png" alt="image.png" loading="lazy">
4.  在这里改端口号，点击服务，点击配置端口
<img src="/common/1609895382677-6f0df650-23e6-43a7-ac61-20a8d0db9f78.png" alt="image.png" loading="lazy">
<img src="/common/1609895382673-f0a0c8d6-b518-49d5-a64c-f2bb69610b2b.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.56,words:167},t:"禅道",O:2,y:"a"}}],["/soft/devTools/projectManage/communityserver.html",{loader:()=>a(()=>import("./communityserver.html-BO9HBl7H.js"),__vite__mapDeps([1114,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["项目管理"],g:["无"],e:`<h2>概述</h2>
<p>免费的开源办公套件，带有业务生产力工具：文档和项目管理、CRM、邮件聚合器。</p>
<p>仓库地址：<a href="https://github.com/ONLYOFFICE/CommunityServer" target="_blank" rel="noopener noreferrer">https://github.com/ONLYOFFICE/CommunityServer</a></p>
`,r:{minutes:.22,words:65},t:"CommunityServer",O:1,y:"a"}}],["/soft/devTools/Postman/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-D7r8T407.js"),__vite__mapDeps([1115,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Postman"],g:["无"],e:`<h2>介绍</h2>
<p>一个接口调试工具</p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/y-UETu7tJiiAevTWprdhbA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/y-UETu7tJiiAevTWprdhbA</a></p>
`,r:{minutes:.13,words:40},t:"介绍",O:1,y:"a"}}],["/soft/devTools/Postman/postman.html",{loader:()=>a(()=>import("./postman.html-BPDRFje1.js"),__vite__mapDeps([1116,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["接口调用"],o:!1,e:`<h2>Postman使用教程</h2>
<p>postman是一款支持http协议的接口调试与测试工具，其主要特点就是功能强大，使用简单且易用性好 。</p>
<p>无论是开发人员进行接口调试，还是测试人员做接口测试，postman都是我们的首选工具之一 。</p>
<p>那么接下来就介绍下postman到底有哪些功能，它们分别都能干些什么 。下面先通过一张图来直观的来看下postman中所包含的功能 。</p>
<figure><img src="/common/202212101422519.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>`,r:{minutes:20.74,words:6221},t:"Postman使用教程",y:"a"}}],["/soft/devTools/Postman/xiangshideruanjian.html",{loader:()=>a(()=>import("./xiangshideruanjian.html-BBlJv6r2.js"),__vite__mapDeps([1117,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Postman"],g:["无"],e:`<h2>apifox</h2>
<p>支持接口文档、调试、Mock、自动化测试等</p>
<blockquote>
<p>官网地址：<a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">https://www.apifox.cn/</a></p>
</blockquote>
<h2>postcat</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>开源协议：<a href="https://github.com/Postcatlab/postcat/blob/main/LICENSE" target="_blank" rel="noopener noreferrer">Apache-2.0 license</a></p>
</div>`,r:{minutes:.89,words:267},t:"相似的软件",O:2,y:"a"}}],["/soft/devTools/sourceCodeManage/codeRepository.html",{loader:()=>a(()=>import("./codeRepository.html-B6D9-m_G.js"),__vite__mapDeps([1118,1])),meta:{a:"azrng",d:1694304e6,l:"2023年9月10日",c:["Git"],g:["仓库"],e:`<h2>GitHub</h2>
<p>全球最大的代码托管网站</p>
<p>网址：https://github.com/</p>
<h3>访问加速</h3>
<p>借助镜像来实现访问加速效果</p>
<ul>
<li>https://521github.com/</li>
</ul>
<h2>GitLab</h2>
<p>国内 IT 公司对 GitLab 的私有库有非常大的使用量。有较强集成 ci/cd 功能。对私有库完全免费</p>
<p>国内用户可以访问Gitlab的Saas版本<a href="https://gitlab.cn/" target="_blank" rel="noopener noreferrer">极狐</a></p>`,r:{minutes:.43,words:128},t:"代码仓库",y:"a"}}],["/soft/devTools/sourceCodeManage/commonOperator.html",{loader:()=>a(()=>import("./commonOperator.html-BDhYUfAD.js"),__vite__mapDeps([1119,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>本地仓库拉取远程仓库代码</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/xxxx.git
<span class="token function">git</span> pull
</code></pre></div>`,r:{minutes:1.4,words:420},t:"常用操作",O:1,y:"a"}}],["/soft/devTools/sourceCodeManage/gitea.html",{loader:()=>a(()=>import("./gitea.html-D2cdCdEM.js"),__vite__mapDeps([1120,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>介绍</h2>
<p>一款极易搭建的自助 Git 服务，是在 Gogs 的基础上新开一个发行分支。</p>
<blockquote>
<p>官方地址：<a href="https://gitea.com/" target="_blank" rel="noopener noreferrer">https://gitea.com/</a></p>
</blockquote>
<h2>安装方式</h2>
<p>docker方式</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>gitea <span class="token parameter variable">-p</span> <span class="token number">10022</span>:22 <span class="token parameter variable">-p</span> <span class="token number">9004</span>:3000 <span class="token parameter variable">-v</span> /var/lib/gitea:/data gitea/gitea

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">--name</span><span class="token operator">=</span>gitea <span class="token parameter variable">-p</span> <span class="token number">10022</span>:22 <span class="token parameter variable">-p</span> <span class="token number">9004</span>:3000 <span class="token parameter variable">-v</span> /var/lib/gitea:/data gitea/gitea
</code></pre></div>`,r:{minutes:.94,words:282},t:"gitea",O:2,y:"a"}}],["/soft/devTools/sourceCodeManage/gitFile.html",{loader:()=>a(()=>import("./gitFile.html-BazcZt2S.js"),__vite__mapDeps([1121,1])),meta:{t:".git目录下有什么"}}],["/soft/devTools/sourceCodeManage/gitjichucaozuo.html",{loader:()=>a(()=>import("./gitjichucaozuo.html-71Ipko0B.js"),__vite__mapDeps([1122,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>基本流程</h2>
<h3>创建仓库</h3>
<p>可以创建本地仓库或者拉取远程创建好的仓库</p>
<h4>创建本地仓库</h4>
<p>将本地一个文件夹变为Git可以管理的仓库，并且添加远程地址，然后拉取项目</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre></div><h4>拉取远程仓库</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://用户名:密码@仓库地址

<span class="token comment">## 拉取某一分支</span>
<span class="token function">git</span> clone <span class="token parameter variable">-b</span> 分支名 https://gitee.com/AZRNG/event-bus.git
</code></pre></div>`,r:{minutes:3.84,words:1152},t:"Git基础操作",O:3,y:"a"}}],["/soft/devTools/sourceCodeManage/gogs.html",{loader:()=>a(()=>import("./gogs.html-XAVCZst4.js"),__vite__mapDeps([1123,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>介绍</h2>
<p>Gogs&nbsp;是一款极易搭建的自助 Git 服务。 开发目的&nbsp;Gogs&nbsp;的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。</p>
<h2>安装方式</h2>
<h3>docker方式</h3>
<p>docker-compose脚本</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mygogs</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mygogs
    <span class="token key atrule">image</span><span class="token punctuation">:</span> gogs/gogs<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"10022:22"</span>
      <span class="token punctuation">-</span> <span class="token string">"10080:3000"</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data/docker/gogs
</code></pre></div>`,r:{minutes:.43,words:130},t:"gogs",O:4,y:"a"}}],["/soft/devTools/sourceCodeManage/pagesHost.html",{loader:()=>a(()=>import("./pagesHost.html-CymwaNFD.js"),__vite__mapDeps([1124,1])),meta:{a:"xxyopen",d:1694304e6,l:"2023年9月10日",c:["Git"],g:["pages"],e:`<h2>Gitee Pages</h2>
<p>简介：国内最大的代码托管平台。</p>
<p>优点：稳定性强，由于服务器位于上海，国内访问速度非常快。</p>
<p>缺点：仓库的最大容量和单个文件大小有限制，对仓库内容非常敏感，需要实名认证，自定义域名和自动部署都需要收费。</p>
<p>个人观点：Gitee Pages 非常适合不需要自定义域名并且网站内容少、内容几乎不变的场景，例如<a href="https://xiongxyang.gitee.io/" target="_blank" rel="noopener noreferrer">小说精品屋官网</a>。由于 Gitee Pages 对仓库内容非常敏感，每次部署前都会对仓库内容进行检查，部署博客的话会经常遇到部署失败的情况，而且内容校验规则也会发生变化，如果网站内容比较多，有时候排查整改起来会比较麻烦，所以建博客我现在几乎不考虑使用 Gitee Pages 了。</p>`,r:{minutes:2.47,words:740},t:"静态托管网站",y:"a"}}],["/soft/devTools/sourceCodeManage/",{loader:()=>a(()=>import("./index.html-D9TkNEIn.js"),__vite__mapDeps([1125,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>说明</h2>
<p>集中式的版本控制：版本库是集中存放在中央服务器的，需要首先去中央服务器取得最新的版本，然后每次编辑完以后在推送到中央服务器，最大的缺点就是必须联网才可以使用，如果是局域网的话宽带大，如果是在互联网上，网速慢的情况，提交非常慢。
分布式版本控制：没有中央服务器，每一个人的电脑上都是一个完整的版本库，推送的时候是两个人吧各自的修改推送给对方，然后就可以看到对方的修改。分布式安全性更高，因为每个人的电脑里面都存在完整的版本库。但是实际上，分布式版本控制也有一个电脑充当与中央服务器，它是用来方便“交换”大家的修改。</p>
<h2>加速克隆</h2>
<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code>git clone https://gitclone.com/github.com/xxx 加速克隆
</code></pre></div>`,r:{minutes:2.92,words:877},t:"说明",y:"a"}}],["/soft/devTools/VisualStudio/chajianjieshao.html",{loader:()=>a(()=>import("./chajianjieshao.html-DcZ_vgww.js"),__vite__mapDeps([1126,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["VisualStudio"],g:["插件"],e:`<h2>主题</h2>
<h3>Visual Studio Theme Pack</h3>
<p>Visual Studio流行主题集</p>
<p>https://marketplace.visualstudio.com/items?itemName=idex.vsthemepack</p>
<h3>Dracula Official</h3>
<p>插件地址：https://marketplace.visualstudio.com/items?itemName=dracula-theme.dracula</p>
<h3>GodotTheme</h3>
<p>样式如图</p>
<figure><img src="/common/image-20230817103341233.png" alt="image-20230817103341233" tabindex="0" loading="lazy"><figcaption>image-20230817103341233</figcaption></figure>`,r:{minutes:5.77,words:1731},t:"插件推荐",O:5,y:"a"}}],["/soft/devTools/VisualStudio/editorconfig.html",{loader:()=>a(()=>import("./editorconfig.html-DsnZPSnT.js"),__vite__mapDeps([1127,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>介绍</h2>
<p>EditorConfig 是帮助跨多个编辑器和 IDE 的从事同一项目的多个开发人员保持一致性编码风格的一个文本文件。EditorConfig 文件可以设置诸如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE。向项目添加 EditorConfig 文件，可以强制对使用该项目的所有人员实施一致的编码风格。EditorConfig 设置优先于全局 Visual Studio 文本编辑器设置。由于这些设置包含在基本代码的文件中，因此能与基本代码一起移动。只要在 EditorConfig 兼容的编辑器中打开代码文件，就能实现文本编辑器设置。有关 EditorConfig 文件的详细信息，请参阅 EditorConfig.org(https://editorconfig.org/) 网站。</p>`,r:{minutes:4.83,words:1450},t:"EditorConfig",O:1,y:"a"}}],["/soft/devTools/VisualStudio/environmentConfig.html",{loader:()=>a(()=>import("./environmentConfig.html-C7RTaAMy.js"),__vite__mapDeps([1128,1])),meta:{a:"azrng",d:16708032e5,l:"2022年12月12日",c:["VisualStudio","环境","soft"],o:!1,e:`<h2>Server2012r2安装net4.6.1</h2>
<p>下载好net 4.6后提示需要安装对应的KB2919355 更新后才可以继续安装</p>
<p>所以我们现在开始下载更新包：https://www.microsoft.com/zh-CN/download/details.aspx?id=42334</p>
<p>下载时候要选择中文，要看安装说明</p>
<ol>
<li>
<ol>
<li>若要开始下载，请单击“下载”按钮，然后执行以下操作之一，或者从“更改语言”中选择另一种语言，然后单击“更改”。</li>
</ol>
</li>
</ol>
<ul>
<li>
<ul>
<li>单击“运行”立即开始安装。</li>
<li>单击“保存”将下载文件复制到您的计算机上供以后安装。</li>
</ul>
</li>
</ul>`,r:{minutes:2.05,words:614},t:"环境配置",y:"a"}}],["/soft/devTools/VisualStudio/geshihuashezhi.html",{loader:()=>a(()=>import("./geshihuashezhi.html-DNAo5-Jx.js"),__vite__mapDeps([1129,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>前言</h2>
<p>群里朋友说.Net8出来预览版了，让我更新一下Vs到最新版(预览版 17.6.0 Preview 1.0)，尝鲜.Net8的功能，然后突然就发现格式化的样式变化了(和VS有关)，很不习惯，经过摸索后改了回去，下面来简单操作介绍如何还原回去(有点想吐槽)。</p>
<h2>操作</h2>
<p>在预览版最新版本的Vs中，格式化一个类是这样子的</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">ClassLibrary</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class1</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.94,words:283},t:"格式化设置",O:6,y:"a"}}],["/soft/devTools/VisualStudio/offLineInstall.html",{loader:()=>a(()=>import("./offLineInstall.html-BCi-UAxE.js"),__vite__mapDeps([1130,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>命令行创建本地布局</h2>
<p>下载所需 Visual Studio 版本的引导程序，并将其复制到要用作本地布局源位置的目录中。 创建布局后，可以使用它安装 Visual Studio。 引导程序是用于创建、更新和执行其他 Visual Stusio 安装操作的可执行文件。 必须建立 Internet 连接才能完成此操作。</p>
<h3>下载引导程序</h3>
<table>
<thead>
<tr>
<th>版本</th>
<th>引导程序</th>
</tr>
</thead>
<tbody>
<tr>
<td>Visual Studio 2022 Community</td>
<td><a href="https://aka.ms/vs/17/release/vs_community.exe" target="_blank" rel="noopener noreferrer">vs_community.exe</a></td>
</tr>
<tr>
<td>Visual Studio 2022 Professional</td>
<td><a href="https://aka.ms/vs/17/release/vs_professional.exe" target="_blank" rel="noopener noreferrer">vs_professional.exe</a></td>
</tr>
<tr>
<td>Visual Studio 2022 Enterprise</td>
<td><a href="https://aka.ms/vs/17/release/vs_enterprise.exe" target="_blank" rel="noopener noreferrer">vs_enterprise.exe</a></td>
</tr>
<tr>
<td>Visual Studio 2022 生成工具</td>
<td><a href="https://aka.ms/vs/17/release/vs_buildtools.exe" target="_blank" rel="noopener noreferrer">vs_buildtools.exe</a></td>
</tr>
</tbody>
</table>`,r:{minutes:1.89,words:566},t:"离线版本安装教程",O:"008",y:"a"}}],["/soft/devTools/VisualStudio/",{loader:()=>a(()=>import("./index.html-BjhF80eA.js"),__vite__mapDeps([1131,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>个性化</h2>
<h3>字体和大小</h3>
<p>字体：Consolas  字号：10
字体：Cascadia Code 程序员字体</p>
<h3>背景色修改</h3>
<p>修改代码框颜色</p>
<p>工具=》选项=》字体和颜色=》项背景=》自定义</p>
<figure><img src="/common/1610978071325-ebc6bfc6-ce36-430b-975e-041c87301b9c.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,r:{minutes:1.51,words:452},t:"说明",y:"a"}}],["/soft/devTools/VisualStudio/shengchanlidisheng.html",{loader:()=>a(()=>import("./shengchanlidisheng.html-DbbBGOrS.js"),__vite__mapDeps([1132,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["快捷键","效率"],e:`<h2>Sticky Scroll</h2>
<p>Sticky Scroll使相关的标题保持可见，从而更容易导航和理解您的代码库。现在，您可以在处理长类和方法时维护代码中的上下文</p>
<p>开启方式：通过选中“在编辑器顶部滚动期间显示嵌套的当前范围”复选框，在工具 &gt; 选项 &gt; 文本编辑器 &gt; 常规 &gt; 粘性滚动中启用它</p>
<p>效果可以参考下面的文章：<a href="https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/" target="_blank" rel="noopener noreferrer">https://devblogs.microsoft.com/visualstudio/sticky-scroll-now-in-preview/</a></p>`,r:{minutes:2.51,words:754},t:"生产力提升",O:7,y:"a"}}],["/soft/devTools/VisualStudio/shezhimingmingguifan.html",{loader:()=>a(()=>import("./shezhimingmingguifan.html-B-WNjeP3.js"),__vite__mapDeps([1133,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>私有变量下划线</h2>
<p>设置私有成员变量以下划线开头<br>&nbsp;<br><img src="/common/1610978089080-21641009-aa5e-4864-95d0-16d2d47b54fd.png" alt="image.png" loading="lazy"><br>&nbsp;首先管理命名格式，增加以_开头<br>&nbsp;<img src="/common/1619146005383-64a21b1f-01dc-4b8b-8c94-76844ab89efb.png" alt="image.png" loading="lazy"><br>然后添加<br><img src="/common/1610978089090-fc590fea-f770-45dd-a3f5-4d73890a6eff.png" alt="image.png" loading="lazy"></p>`,r:{minutes:.45,words:134},t:"设置命名规范",O:"009",y:"a"}}],["/soft/devTools/VisualStudio/slngenLoading.html",{loader:()=>a(()=>import("./slngenLoading.html-F8VOvvCe.js"),__vite__mapDeps([1134,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>前言</h2>
<p>当你一个解决方案中项目太多的时候，导致加载等非常慢，所以就可以考虑一次只加载部分项目，那么就使用到了这个slngen，SlnGen 是一个 Visual Studio 解决方案文件生成器，读取一个给定项目的项目引用，按需创建一个 Visual Studio 解决方案。例如，你可以针对一个单元测试项目运行 SlnGen，并呈现一个包含单元测试项目及其所有项目引用的 Visual Studio 解决方案。你也可以针对一个有根的文件夹中的遍历项目运行 SlnGen，打开一个包含你的项目树的那个视图的 Visual Studio 解决方案。</p>
<h2>操作</h2>`,r:{minutes:1.83,words:549},t:"通过Slngen加载指定项目树",O:8,y:"a"}}],["/soft/devTools/VisualStudio/useSkill.html",{loader:()=>a(()=>import("./useSkill.html-JUonRqOf.js"),__vite__mapDeps([1135,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["VS"],o:!1,e:`<h2>Visual Studio调试效率技巧</h2>
<p>在这篇文章中，我们假定读者了解<code>VS</code>基本的调试知识，如：</p>
<ul>
<li><strong>F5</strong> 开始使用调试器运行程序</li>
<li><strong>F9</strong> 在当前行设置断点</li>
<li><strong>F10</strong> 运行到下一个断点处</li>
<li><strong>F5</strong> 从被调试的已停止程序恢复执行</li>
<li><strong>F11</strong> 步进到函数内（如果当前程序指针指向一个函数）</li>
<li><strong>F10</strong> 步过函数（如果当前程序指针指向一个函数）</li>
<li><strong>Shift+F11</strong> 步出执行的函数</li>
<li>暂停执行</li>
<li>附加到进程</li>
<li>鼠标悬停时快速查看源代码中的元素</li>
<li>调试窗口：局部变量、监视、即时窗口、模块、调用堆栈、异常设置</li>
</ul>`,r:{minutes:8.4,words:2519},t:"调试效率技巧",y:"a"}}],["/soft/devTools/VisualStudio/vs2019Install.html",{loader:()=>a(()=>import("./vs2019Install.html-BNy3lgQ3.js"),__vite__mapDeps([1136,1])),meta:{a:"azrng",d:1613952e6,l:"2021年2月22日",c:["soft"],g:["VS"],o:!0,e:`
<p>Visual Studio是最流行的windows平台应用程序集成开发环境，本文示例的版本为<strong>VS2019</strong>版本，后续的版本多少会有一些差异。</p>
<h1>下载</h1>
<p>官网地址：https://visualstudio.microsoft.com/zh-hans/vs/</p>
<p>分为：社区版、专业版、旗舰版。</p>
<h1>安装</h1>
<p>从官网下载VS2019安装包，双击打开安装包，要求同意许可条款和隐私条款，选择继续</p>
<figure><img src="https://cdn.jsdelivr.net/gh/azrng/file/blog202212122220584.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:1.21,words:363},t:"安装VS2019",y:"a"}}],["/soft/devTools/VisualStudio/zhongwentishi.html",{loader:()=>a(()=>import("./zhongwentishi.html-DaygubZ3.js"),__vite__mapDeps([1137,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Visual Studio"],g:["无"],e:`<h2>开篇语</h2>
<p>IntelliSense 是一种代码完成辅助工具，可以在不同的集成开发环境 (IDE) 中使用，例如 Visual Studio。 默认情况下，在开发 .NET 项目时，SDK 仅包含英语版本的 IntelliSense 文件。虽然推荐使用英文，可以熟悉和学习英文，不过我还是偷懒改成了提示语为中文，首先看下不设置语言包时候的样子
<img src="/common/1626705376387-d2a0f950-3c77-4e50-8088-c712c2192602.png" alt="image.png" loading="lazy"></p>
<h2>操作</h2>`,r:{minutes:1.4,words:420},t:"VisualStudio配置中文提示",O:3,y:"a"}}],["/soft/Linux/Centos/centos.html",{loader:()=>a(()=>import("./centos.html-jS948ZOI.js"),__vite__mapDeps([1138,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>配置</h2>
<p>创建好连接上linux系统
然后我们需要先添加yum源
命令：rpm -Uvh <a href="https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm" target="_blank" rel="noopener noreferrer">https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</a>
然后升级所有包的同时也升级软件和系统内核
命令：yum update
或者命令：yum upgrade</p>`,r:{minutes:.44,words:132},t:"说明",O:1,y:"a"}}],["/soft/Linux/Centos/mingling.html",{loader:()=>a(()=>import("./mingling.html-CIKmtgAI.js"),__vite__mapDeps([1139,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>文件</h2>
<h3>目录</h3>
<h4>ls</h4>
<p>查看目录下文件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>-- 查看当前目录文件
<span class="token function">ls</span>

-- 查看指定目录文件
<span class="token function">ls</span>  /var/tmp
</code></pre></div><h4>mkdir</h4>
<p>创建目录</p>
`,r:{minutes:1.67,words:502},t:"命令",O:3,y:"a"}}],["/soft/Linux/Ubuntu/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-yU0FyZBS.js"),__vite__mapDeps([1140,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>概述</h2>
<p>一个linux操作系统发行版</p>
<h2>镜像源</h2>
<p>镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/" target="_blank" rel="noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></p>
<p>阿里云镜像源：http://mirrors.aliyun.com/ubuntu/</p>
<h2>操作命令</h2>
<h3>系统命令</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//查询发行版本号
lsb_release <span class="token parameter variable">-a</span>

// 检查系统更新
<span class="token function">apt-get</span> update
</code></pre></div>`,r:{minutes:3.29,words:987},t:"概述",O:1,y:"a"}}],["/soft/Linux/Install/centos7anzhuangjavahuanjing.html",{loader:()=>a(()=>import("./centos7anzhuangjavahuanjing.html-CbuqFKRz.js"),__vite__mapDeps([1141,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>1. 下载jdk</h2>
<p>官网：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br>通过wget下载</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz?AuthParam<span class="token operator">=</span>1531155951_4e06a4d17c6c1dbfb8440352e19dd2ae
</code></pre></div>`,r:{minutes:.82,words:246},t:"centos7安装java环境",O:1,y:"a"}}],["/soft/Linux/Install/hypervanzhuangcentos7.html",{loader:()=>a(()=>import("./hypervanzhuangcentos7.html-SzzVWd_3.js"),__vite__mapDeps([1142,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["install"],e:`<h2>说明</h2>
<p>可以让你在你的电脑上以虚拟机的形式运行多个操作系统(至于为什么选择这个，主要是系统已经自带了，所以能不装其他我就先不装其他试试)
Hyper-V 可用于 64 位 Windows 10 专业版、企业版和教育版。 它无法用于家庭版。</p>
<h2>准备</h2>
<h3>下载系统镜像</h3>
<p>去阿里云下载系统：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener noreferrer">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a>
<img src="/common/1688296642451-be196d43-9060-42db-bfc0-629af2d8ed34.png" alt="image.png" loading="lazy">
建议下载这个版本，900M最小安装。DVD版本较大，但是里面会有很多东西。</p>`,r:{minutes:5.03,words:1510},t:"Hyper-v安装centos7",O:2,y:"a"}}],["/soft/Linux/Install/hypervInstallUbuntu.html",{loader:()=>a(()=>import("./hypervInstallUbuntu.html-zamchEaV.js"),__vite__mapDeps([1143,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["install"],e:`<h2>前言</h2>
<p>关于Hyper-V的配置等操作就不提及了，可以看之前的文档或者百度。</p>
<h2>下载镜像</h2>
<p>清华源下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/#" target="_blank" rel="noopener noreferrer">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
<figure><img src="/soft/image-20240228222754079.png" alt="image-20240228222754079" tabindex="0" loading="lazy"><figcaption>image-20240228222754079</figcaption></figure>`,r:{minutes:1.78,words:533},t:"Hyper-v安装ubuntu-20.04.6",O:2,y:"a"}}],["/soft/Linux/Install/multipass.html",{loader:()=>a(()=>import("./multipass.html-SKQAZ4ER.js"),__vite__mapDeps([1144,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Linux"],g:["无"],e:`<h2>概述</h2>
<p>Multipass 是一个轻量级 VM 管理器，支持 Linux、Windows 与 macOS，这是为希望使用单个命令提供全新 Ubuntu 环境的开发人员而设计的。使用 Linux 上的 KVM、Windows 上的 Hyper-V 和 macOS 上的 HyperKit 来以最小的开销运行 VM，同时它还可以在 Windows 和 macOS 上使用 VirtualBox。
官网：<a href="https://multipass.run/" target="_blank" rel="noopener noreferrer">https://multipass.run/</a></p>`,r:{minutes:.38,words:113},t:"multipass",O:3,y:"a"}}],["/softwareDesign/domainDrivenDesign/commonConcept/dddzhishiti.html",{loader:()=>a(()=>import("./dddzhishiti.html-Bzb59L2T.js"),__vite__mapDeps([1145,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h3>概述</h3>
<p>本文将介绍领域驱动设计（DDD）战术模式中另一个常见且非常重要的概念 - 实体。相对战术模式中其他的一些概念（例如 值对象、领域服务等）来说，实体应该比较容易让人理解和运用。但是我们如何去发现所在领域中的实体呢？如何保证建立的实体是富含行为的？实体运用时又有那些注意的细节呢？本文将从不同的角度来带大家重新认识一下“实体”这个概念，并且给出相应的代码片段（本教程的代码片段都使用的是C#,后期的实战项目也是基于 DotNet Core 平台）。</p>
<h3>何为实体</h3>
<p>按照国际惯例呢，我们先吹牛。直接来看看原著<a href="https://book.douban.com/subject/5344973/" target="_blank" rel="noopener noreferrer">《领域驱动设计:软件核心复杂性应对之道》</a> 中对实体的解释：</p>`,r:{minutes:12.82,words:3846},t:"DDD之实体",y:"a"}}],["/softwareDesign/domainDrivenDesign/commonConcept/dddzhizhiduixiang.html",{loader:()=>a(()=>import("./dddzhizhiduixiang.html-Bjm1pxLl.js"),__vite__mapDeps([1146,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h3>概述</h3>
<p>作为领域驱动设计战术模式中最为核心的一个部分-值对象。一直是被大多数愿意尝试或者正在使用DDD的开发者提及最多的概念之一。但是在学习过程中，大家会因为受到传统开发模式的影响，往往很难去运用值对象这一概念，以及在对值对象进行持久化时感到非常的迷惑。本篇文章会从值对象的概念出发，解释什么是值对象以及怎么运用值对象，并且给出相应的代码片段（本教程的代码片段都使用的是C#,后期的实战项目也是基于 DotNet Core 平台）。</p>
<h3>何为值对象</h3>
<p>首先让我们来看一看原著 <a href="https://book.douban.com/subject/5344973/" target="_blank" rel="noopener noreferrer">《领域驱动设计:软件核心复杂性应对之道》</a> 对值对象的解释：</p>`,r:{minutes:13.64,words:4092},t:"DDD之值对象",y:"a"}}],["/softwareDesign/domainDrivenDesign/commonConcept/modelDesignMode.html",{loader:()=>a(()=>import("./modelDesignMode.html-47iwjkbJ.js"),__vite__mapDeps([1147,1])),meta:{a:"azrng",d:16928352e5,l:"2023年8月24日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>贫血模型：一个类里面只有属性或者成员变量，没有方法
充血模式：一个类既有属性也有成员变量，也有方法</p>
<p>贫血模式缺点以及充血模式需要注意的点
业务泄露：对于对象的操作，应该通过对象自身来完成，不应该将操作泄露到对象的外部
增加调用者负担：当调用对象的方法的时候，应该将对象当为一个黑盒状态，不需要去使用对象的内部细节(需要先调用a方法后调用b方法)
难以维护：当后期业务需求发生变成，需要去修改操作该对象的所有方法，这样子难以维护</p>
<h2>贫血模型</h2>
<p>就将后端项目分为 Repository 层、Service 层、Controller 层。其 中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接 口。
UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层。 从代码中，我们可以发现，UserBo 是一个纯粹的数据结构，只包含数据，不包含任何业务 逻辑。业务逻辑集中在 UserService 中。我们通过 UserService 来操作 UserBo。换句话 说，Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类中。像 UserBo 这样， 只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）</p>`,r:{minutes:2.7,words:809},t:"贫血充血和充血模式",y:"a"}}],["/softwareDesign/domainDrivenDesign/commonConcept/",{loader:()=>a(()=>import("./index.html-BScZufwx.js"),__vite__mapDeps([1148,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["软件设计"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>长久以来，我们程序员都是很好的技术型思考者，我们总是擅长从技术的角度来解决项目问题。但是，一个软件系统是否真正可用是通过它所提供的业务价值体现出来的。因此，与其每天钻在那些永远也学不完的技术中，何不将我们的关注点向软件系统所提供的业务价值方向思考思考，这也正是DDD所试图解决的问题。</p>
<figure><img src="/common/fad9fada-f1fc-44cb-8ad2-a6827b9bd714.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:23.89,words:7166},t:"常用概念",y:"a"}}],["/softwareDesign/highQualityCode/designMode/overview.html",{loader:()=>a(()=>import("./overview.html-CroPupmM.js"),__vite__mapDeps([1149,1])),meta:{a:"azrng",d:16759008e5,l:"2023年2月9日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。</p>
<ul>
<li>相对设计原则来讲，没有那么抽象，大部分不难理解。</li>
<li>难点是了解他们能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。</li>
</ul>
<p>可以从更好层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化，避免烂代码。</p>
<p>设计模式要干的事情就是解耦。
创建型是将创建和使用代码解耦，结构型是将不同的功能代码解耦，行为型模式是将不同的行为代码解耦。</p>
<p>设计原则和思想比设计模式更加朴实和重要。</p>`,r:{minutes:1.99,words:597},t:"设计模式",y:"a"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/bianmaguifan.html",{loader:()=>a(()=>import("./bianmaguifan.html-xhCRSPA0.js"),__vite__mapDeps([1150,1])),meta:{a:"azrng",d:16549056e5,l:"2022年6月11日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>编码规范主要解决的是代码的可读性问题。相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但是你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等。</p>
<h2>命名</h2>
<p>项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名。</p>
<h3>命名长度</h3>
<p>在足够表达其含义的情况下，命名越短越好。对于一些默认的、大家都比较熟知的词，更推荐使用缩写。</p>
<p>对于作用于比较大的，更推荐使用长的命名方式，比如类名。</p>`,r:{minutes:4.3,words:1289},t:"编码规范",y:"a"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/chonggougaishu.html",{loader:()=>a(()=>import("./chonggougaishu.html-BD04Cmfi.js"),__vite__mapDeps([1151,1])),meta:{a:"azrng",d:16893792e5,l:"2023年7月15日",c:["软件设计"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>重构时候需要注意：重构的目的(why)、对象(what)、时机(when)、方法(how)
保证重构不出错的技术手段：单元测试和代码的可测试性。
不同规模的重构，重点讲解大规模高层次(比如系统、模块、代码结构、类与类之间的交互等重构)和小规模低层次重构(类、函数、变量等的重构)。</p>
<p>重构需要你能够洞察代码存在的坏味道或者设计上的不足，并且能够合理、熟练地利用设计思想、原则、模式、编程规范等理论知识解决这些问题。</p>
<h2>操作</h2>
<h3>目的</h3>
<blockquote>
<p>为什么要重构(why)？</p>
</blockquote>`,r:{minutes:4.15,words:1244},t:"重构概述",y:"a"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/chucuodefanhuizhi.html",{loader:()=>a(()=>import("./chucuodefanhuizhi.html-BFx_2tc_.js"),__vite__mapDeps([1152,1])),meta:{a:"azrng",d:16561152e5,l:"2022年6月25日",c:["软件设计"],g:["无"],o:!0,e:`<h2>返回啥？</h2>
<p>一般常见的四种错误返回情况：错误码、null值、空对象、异常对象。</p>
<h3>返回错误码</h3>
<p>一种是直接将错误码给返回类，正常返回错误信息。
另一种是将错误码定义为全局变量，函数执行出错的时候，函数调用者通过这个全局变量来获取错误信息。</p>
<h3>返回NULL值</h3>
<p>如果返回null值，我们在使用的时候一定要做null值判断，否则就会抛出空指针异常。</p>
<p>针对查询等，查询不到应该返回null值(或者说是查看项目中其他类似的接口是如何返回的，只要整个项目遵从统一的约定即可)，如果是修改添加等操作更推荐抛出异常。</p>`,r:{minutes:1.67,words:501},t:"出错的返回值",y:"a"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/jieou.html",{loader:()=>a(()=>import("./jieou.html-D6Cchex6.js"),__vite__mapDeps([1153,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>利用解耦是保证代码不至于复杂到无法控制的有效手段。</p>
<p>代码高内聚低耦合，也就意味着：代码结构清洗、分层和模块化合理、依赖关系简单、模块或者类之间耦合小，那代码整体的质量就不会差。</p>
<h2>如何衡量</h2>
<p>如何判断系统是否需要解耦重构？
比如看代码会不会牵一发而动全身。比如把模块和模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构，比如依赖关系复杂、混乱，那就说明可读性和可维护性不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清洗、简单。</p>
<h2>如何解耦</h2>
<h3>封装和抽象</h3>`,r:{minutes:1.63,words:488},t:"解耦",y:"a"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/mingmingfangfa.html",{loader:()=>a(()=>import("./mingmingfangfa.html-CA9aQMsq.js"),__vite__mapDeps([1154,1])),meta:{a:"azrng",d:16462656e5,l:"2022年3月3日",c:["软件设计"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>常见的命名方法</p>
<ul>
<li>蛇形命名法（snake case）
<ul>
<li>使用下划线，一般小写，也叫做下划线命名法</li>
<li>示例：user_info、user_name</li>
</ul>
</li>
<li>驼峰命名法（camel case）
<ul>
<li>首字母区分大小写
<ul>
<li>大驼峰命名法</li>
<li>小驼峰命名法</li>
</ul>
</li>
<li>示例：UserInfo、userName</li>
</ul>
</li>
<li>匈牙利命名法（HN case）
<ul>
<li>格式：属性+类型+描述</li>
<li>示例：nLength、hwnd</li>
</ul>
</li>
<li>帕斯卡命名法（Pascal case）
<ul>
<li>全部字母大写，等同于大驼峰命名法</li>
<li>示例：UserInfo、userName</li>
</ul>
</li>
<li>脊柱命名法（spinal case）
<ul>
<li>使用中划线，又称为：kebad case、train case</li>
<li>示例：user-info、user-name</li>
</ul>
</li>
<li>自由命名法（studly caps）
<ul>
<li>大小写混杂、无简明规则，又名：sticky caps</li>
<li>示例：UserINFO、UserName</li>
</ul>
</li>
<li>驼峰蛇形命名法
<ul>
<li>结合驼峰和蛇形命名法</li>
<li>示例：User_Info、User_Name</li>
</ul>
</li>
</ul>`,r:{minutes:.77,words:232},t:"命名方法",y:"a"}}],["/softwareDesign/highQualityCode/mianxiangduixiang/leizhijiandeguanji.html",{loader:()=>a(()=>import("./leizhijiandeguanji.html-TUgK0Q0y.js"),__vite__mapDeps([1155,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>泛化</h2>
<p>比如鸟和动物，动物就是鸟的泛化，鸟是动物的特化，也成为鸟继承自动物</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 动物</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 生命</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Life <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 鸟</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 羽毛</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Feather <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.91,words:573},t:"类之间的关系",y:"a"}}],["/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiang.html",{loader:()=>a(()=>import("./mianxiangduixiang.html-CuDU8Uwx.js"),__vite__mapDeps([1156,1])),meta:{a:"azrng",d:16562016e5,l:"2022年6月26日",c:["软件设计"],g:["无"],o:!0,e:`<h2>面向对象(OOP)</h2>
<p>面向对象是现在最主流编程风格，英文缩写是OOP。
三大特性：封装、继承、多态。
面向对象编程是一种编程范式或者编程风格，它以类或者对象作为组织代码的基本单元，并且将封装、继承、多态三个特性作为代码设计和实现的基石。
面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便第实现面向对象三大特性的编程语言。</p>
<p>相比较面向过程编程的优点：</p>
<ul>
<li>更能应对大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。</li>
<li>具有丰富的特性(封装继承多态)，可以帮助我们编写出来更易扩展、易复用、易维护的代码</li>
<li>从编程语言跟机器打交道方式的演进规律中，可以总结出来：面向对象编程语言比面向过程编程语言，更加人性化、更加高级、更加智能。</li>
</ul>`,r:{minutes:6.29,words:1888},t:"说明",y:"a"}}],["/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiangfenxi.html",{loader:()=>a(()=>import("./mianxiangduixiangfenxi.html-Bb-hnXw6.js"),__vite__mapDeps([1157,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>面向对象分析就是要搞清楚做什么，面向对象设计就是要搞 清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。</p>
<p>需求不明确
面向对象分析主要的分析对象是需求。
将笼统的需求细化到足够清洗、可执行。
具体需求有哪些 哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑的。</p>
<p>缺乏锻炼
平时很少做一些方面的代码，对某些模块锻炼少。</p>
<p>如何设置一个在各个系统之间的鉴权系统</p>
<p>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算 法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。 微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。 微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果 已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。 如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密 码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进 行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用</p>`,r:{minutes:2.72,words:815},t:"面向对象分析",y:"a"}}],["/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixianghemianxiangguocheng.html",{loader:()=>a(()=>import("./mianxiangduixianghemianxiangguocheng.html-BniLyJHP.js"),__vite__mapDeps([1158,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>下面讲述了一些看似是面向对象，但是实际上是面向过程的操作。</p>
<h2>操作</h2>
<h3>1、滥用get、set方法</h3>
<p>面向过程写法：外部可以随意的修改属性的值，并且会导致和Item属性的值不一致的情况。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCart1</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ItemCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> ToTalPrice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ShoppingCartItem<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.48,words:1043},t:"面向对象和面向过程",y:"a"}}],["/softwareDesign/openSourceFrame/abp/changyongmingling.html",{loader:()=>a(()=>import("./changyongmingling.html-DOad7cgz.js"),__vite__mapDeps([1159,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>安装</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>安装abp cli
dotnet tool install <span class="token operator">-</span>g Volo<span class="token punctuation">.</span>Abp<span class="token punctuation">.</span>Cli

更新最新版本
dotnet tool update <span class="token operator">-</span>g Volo<span class="token punctuation">.</span>Abp<span class="token punctuation">.</span>Cli
</code></pre></div>`,r:{minutes:1.27,words:381},t:"常用命令",y:"a"}}],["/softwareDesign/openSourceFrame/abp/mokuaiheyilai.html",{loader:()=>a(()=>import("./mokuaiheyilai.html-DrLa4hTZ.js"),__vite__mapDeps([1160,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>模块化就是将复杂系统分解为更容易更好的可管理模块的管理方式。
模块化开发就是封装细节、提供接口互不影响，存在的意义就是以更少的代码来实现更多的功能(代码复用)。</p>
<h2>项目依赖</h2>
<figure><img src="/common/1615636138636-b86e46a3-4db9-4400-bf1d-6c3938f24d9d.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h2>模块介绍</h2>
<h5>Domain.Shared 项目</h5>`,r:{minutes:6.44,words:1933},t:"模块和依赖",y:"a"}}],["/softwareDesign/openSourceFrame/abp/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-lZUswsPi.js"),__vite__mapDeps([1161,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>是一个用最佳实践和流程技术开发的现代Web应用程序的新起点，专注于基于Asp.Net Core的Web应用程序开发，但是也支持开发其他类型的应用程序。
ABP(ASP.NET Boilerplate Project)ASP.NET模板项目
ABP.Vnext=netcore+DDD+第三方技术</p>
<p>官网：<a href="https://docs.abp.io/zh-Hans/abp/latest/" target="_blank" rel="noopener noreferrer">https://docs.abp.io/zh-Hans/abp/latest/</a></p>`,r:{minutes:1.79,words:537},t:"说明",y:"a"}}],["/softwareDesign/seeSystem/mesSystem/",{loader:()=>a(()=>import("./index.html-BN-3W_yj.js"),__vite__mapDeps([1162,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["软件设计"],g:["无"],o:!0,e:`<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/4y0psSiQt-SISAzUgiPdAA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/4y0psSiQt-SISAzUgiPdAA</a> | 10分钟了解MES系统的发展历程和标准体系</p>
`,r:{minutes:.18,words:55},t:"说明",y:"a"}}],["/web/blazor/antDesignBlazor/",{loader:()=>a(()=>import("./index.html-CbYWyJSO.js"),__vite__mapDeps([1163,1])),meta:{a:"azrng",d:17053632e5,l:"2024年1月16日",c:["web"],g:["blazor","antBlazor"],o:!0,e:`<h2>概述</h2>
<p>Ant Design 的 Blazor 实现，开发和服务于企业级后台产品。</p>
<p>官网文档：https://antblazor.com/zh-CN/</p>
<p>仓库地址：https://github.com/ant-design-blazor/ant-design-blazor</p>
<ul>
<li>🌈 提炼自企业级中后台产品的交互语言和视觉风格。</li>
<li>📦 开箱即用的高质量 Blazor 组件，可在多种托管方式共享。</li>
<li>💕 支持基于 WebAssembly 的前端和基于 SignalR 的服务端 UI 即时交互。</li>
<li>🎨 支持渐进式 Web 应用（PWA）</li>
<li>🛡 使用 C# 构建，多范式静态语言带来高效的开发体验。</li>
<li>⚙️ 支持 .NET Core 3.1 以上所有版本，可直接引用丰富的 .NET 类库。</li>
<li>🌍 数十个国际化语言支持。</li>
<li>💴 基于 MIT 开源协议，.NET 基金会项目，商业应用免费。</li>
</ul>`,r:{minutes:1.26,words:378},t:"说明",y:"a"}}],["/web/blazor/baseOperator/chuancan.html",{loader:()=>a(()=>import("./chuancan.html-BSOavAPa.js"),__vite__mapDeps([1164,1])),meta:{a:"azrng",d:16525728e5,l:"2022年5月15日",c:["dotNET"],g:["无"],o:!1,e:`<h2>特性传参</h2>
<p>需要在A页面传值给B页，可以在B页面创建属性</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Parameter</span></span><span class="token punctuation">]</span><span class="token comment">//设置参数特性,不设置无法传参</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IncrementAmount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//设置默认值</span>
</code></pre></div>`,r:{minutes:1.67,words:500},t:"传参",y:"a"}}],["/web/blazor/baseOperator/component.html",{loader:()=>a(()=>import("./component.html-CHDgKn1v.js"),__vite__mapDeps([1165,1])),meta:{a:"azrng",d:1702512e6,l:"2023年12月14日",c:["dotNET"],g:["blazor","component"],o:!1,e:`<h2>模板组件</h2>
<p>模板组件可跨多个应用重复使用，为 UI 元素自定义提供经过尝试和测试的布局和逻辑的基础。 模板组件定义常见元素并将其应用于所有页面，从而跨 Web 应用应用标准化设计。 模板可以简化更新（例如品牌重塑），因为只需在中心模板位置进行修改。</p>
<h3>RenderFragment 类型</h3>
<p>模板组件为一个或多个 HTML 标记片段提供布局和逻辑。 HTML 使用模板组件提供的上下文呈现。 模板组件使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.components.renderfragment" target="_blank" rel="noopener noreferrer">RenderFragment</a> 对象作为占位符，在运行时将标记插入其中。</p>`,r:{minutes:1.92,words:575},t:"组件",y:"a"}}],["/web/blazor/baseOperator/configuration.html",{loader:()=>a(()=>import("./configuration.html-D6dUeFx7.js"),__vite__mapDeps([1166,1])),meta:{a:"azrng",d:16706304e5,l:"2022年12月10日",c:["dotNET"],g:["blazor"],o:!1,e:`<h2>配置读取</h2>
<p>客户端安全限制阻止通过用户代码直接访问文件，包括应用配置的设置文件。 若除了 <code>appsettings.json</code>/<code>appsettings.{ENVIRONMENT}.json</code> 之外，还要将 <code>wwwroot</code> 文件夹中的配置文件读入配置，请使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.net.http.httpclient" target="_blank" rel="noopener noreferrer">HttpClient</a>。</p>`,r:{minutes:.61,words:183},t:"配置",y:"a"}}],["/web/blazor/baseOperator/dataBind.html",{loader:()=>a(()=>import("./dataBind.html-B4tP7sHZ.js"),__vite__mapDeps([1167,1])),meta:{a:"azrng",d:1675296e6,l:"2023年2月2日",c:["dotNET"],g:["无"],o:!1,e:`<h2>介绍</h2>
<p>在 Razor 组件中，可以将 HTML 元素数据绑定到 C## 字段、属性和 Razor 表达式值。 数据绑定支持在 HTML 和 Microsoft .NET 之间进行双向同步。
呈现组件时，数据从 HTML 推送到 .NET。 组件在事件处理程序代码执行后呈现自身，这就是为什么在触发事件处理程序后，属性更新会立即反映在 UI 中。
可使用 @bind 标记将 C## 变量绑定到 HTML 对象。 按名称将 C## 变量定义为 HTML 中的字符串。</p>
<h2>操作</h2>
<h3>Bind</h3>
<p>@bind 指令非常智能，并且了解它所使用的控件。 例如，在将值绑定到文本框 <code>&lt;input&gt;</code>时，它将绑定 value 属性。 HTML 复选框 <code>&lt;input&gt;</code> 具有 checked 属性，而不是 value 属性。 @bind 属性将自动改用此 checked 属性。 默认情况下，该控件绑定到 DOM onchange 事件。 例如，请考虑以下页面：</p>`,r:{minutes:2.03,words:610},t:"数据绑定",y:"a"}}],["/web/blazor/baseOperator/event.html",{loader:()=>a(()=>import("./event.html-QZ5NkPe3.js"),__vite__mapDeps([1168,1])),meta:{a:"azrng",d:1675296e6,l:"2023年2月2日",c:["dotNET"],g:["无"],o:!1,e:`<h2>代码隐藏</h2>
<p>在页面包含复杂的逻辑时候，可以添加一个该页面文件名的cs文件类来单独存储应用的逻辑，这个方法叫做代码隐藏。</p>
<p>页面初始化后触发的事件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>protected override async Task <span class="token function-name function">OnInitializedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">\\</span><span class="token punctuation">\\</span> Call the <span class="token function">service</span> here
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.29,words:1888},t:"事件",y:"a"}}],["/web/blazor/baseOperator/form.html",{loader:()=>a(()=>import("./form.html-DgJylhM5.js"),__vite__mapDeps([1169,1])),meta:{a:"azrng",d:17023392e5,l:"2023年12月12日",c:["dotNET","web"],g:["blazor","form"],o:!1,e:`<h2>EditForm</h2>
<p><code>EditForm</code> 是一个 Blazor 组件，它在 Blazor 页面上履行 HTML 表单这一角色。 EditForm 和 HTML 表单之间的主要区别是：</p>
<ul>
<li><strong>数据绑定</strong>：可将对象与 EditForm 关联。 EditForm 的作用类似于用于数据输入和显示的对象视图。</li>
<li><strong>验证</strong>：<code>EditForm</code> 提供了广泛且可扩展的验证功能。 可以向指定验证规则的 <code>EditForm</code> 中的元素添加属性。 <code>EditForm</code> 将自动应用这些规则。</li>
<li><strong>表单提交</strong>：HTML 表单将在提交后向表单处理程序发送一个发布请求。 该表单处理程序应会执行提交过程，然后显示任何结果。 <code>EditForm</code> 遵循 Blazor 事件模型；请指定捕获 <code>OnSubmit</code> 事件的 C# 事件处理程序。 事件处理程序执行提交逻辑。</li>
<li><strong>输入元素</strong>：HTML 表单使用 <code>&lt;input&gt;</code> 控件收集用户输入，并使用 <code>submit</code> 按钮发布表单以供处理。 <code>EditForm</code> 可以使用这些相同的元素，但 Blazor 提供了具有其他功能（例如内置验证和数据绑定）的输入组件库。</li>
</ul>`,r:{minutes:10.62,words:3186},t:"表单",y:"a"}}],["/web/blazor/baseOperator/getStarted.html",{loader:()=>a(()=>import("./getStarted.html-BSz77Zix.js"),__vite__mapDeps([1170,1])),meta:{a:"azrng",d:1702512e6,l:"2023年12月14日",c:["dotNET","web"],g:["blazor","started"],o:!0,e:`<h2>注入说明</h2>
<ul>
<li><code>AddRazorPages()</code>：添加 Razor Pages 支持。Razor Pages 是一种以页面为基础的编程模型，用于创建 Web 应用程序。该方法的调用将向服务集合中添加所需的服务和中间件，以支持 Razor Pages 的使用。</li>
<li><code>AddServerSideBlazor()</code>：添加 Server-Side Blazor 支持。Blazor 是一种使用 .NET 进行 Web 开发的新型框架，Server-Side Blazor 是 Blazor 的一种部署模式，它将应用程序的代码运行在服务器端，然后通过 SignalR 将 UI 更新推送到客户端。该方法的调用将向服务集合中添加所需的服务和组件，以支持 Server-Side Blazor 的使用。</li>
<li><code>AddRazorComponents()</code>：添加 Razor Components 支持。Razor Components 是一种用于开发 Web 组件的编程模型，它与 Razor Pages 有许多相似之处。该方法的调用将向服务集合中添加所需的服务和组件，以支持 Razor Components 的使用。</li>
<li><code>AddInteractiveServerComponents()</code>：添加交互式 Server Components 支持。Server Components 是 Blazor 的一种新型组件，它们是在服务器端运行的 Blazor 组件，可实现更高效的性能和更好的用户体验。该方法的调用将向服务集合中添加所需的服务和组件，以支持交互式 Server Components 的使用。</li>
</ul>`,r:{minutes:1.87,words:561},t:"快速上手",y:"a"}}],["/web/blazor/baseOperator/jsOperator.html",{loader:()=>a(()=>import("./jsOperator.html-af0um2GS.js"),__vite__mapDeps([1171,1])),meta:{a:"azrng",d:17024256e5,l:"2023年12月13日",c:["dotNET","web"],g:["blazor","js"],o:!1,e:`<h2>概述</h2>
<p>Blazor 使用 C# 组件而不是 JavaScript 来创建包含动态内容的网页或 HTML 内容。 但是，可以使用 Blazor JavaScript 互操作性（JS 互操作）调用 Blazor 应用中的 JavaScript 库，并从 实现.NET C# 代码调用 JavaScript 函数。</p>
<h2>加载Js代码</h2>
<p>将 JavaScript 添加到 Blazor 应用的方式与添加到标准 HTML Web 应用的方式相同，方法是使用 HTML <code>&lt;script&gt;</code> 元素。 可以在 Pages/_Host.cshtml 文件或 wwwroot/index.html 文件中的现有 <code>&lt;script src="_framework/blazor.*.js"&gt;&lt;/script&gt;</code> 标记后添加 <code>&lt;script&gt;</code> 标记，具体使用哪种取决于 Blazor 托管模型。请参阅 <a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/hosting-models" target="_blank" rel="noopener noreferrer">ASP.NET Core Blazor 托管模型</a>。</p>`,r:{minutes:4.04,words:1213},t:"Js互操作",y:"a"}}],["/web/blazor/baseOperator/layout.html",{loader:()=>a(()=>import("./layout.html-oLGjXj2Y.js"),__vite__mapDeps([1172,1])),meta:{a:"azrng",d:17022528e5,l:"2023年12月11日",c:["dotNET","web"],g:["blazor","layout"],o:!1,e:`<h2>概述</h2>
<p>在大多数网站中，UI排列的方式在多个页面共享，这个时候我们需要将相同的代码复制粘贴到所有其他页面中，并且如果后期更改了，还需要所有页面都进行重复的更改，所以这个时候就该使用布局组件来简化和重用通用UI元素。</p>
<h2>Blazor中的布局</h2>
<p>布局文件扩展名为<code>.razor</code>，文件通常存放在<code>Shared</code>文件夹中，但是也可以放在其他使用它的文件可以访问的任何位置。</p>
<p>布局组件有两个要求：</p>
<ul>
<li>必须继承 <code>LayoutComponentBase</code> 类。</li>
<li>必须在要呈现发起引用的组件内容的位置包含 <code>@Body</code> 指令</li>
</ul>`,r:{minutes:2.04,words:611},t:"布局",y:"a"}}],["/web/blazor/baseOperator/lifeCycle.html",{loader:()=>a(()=>import("./lifeCycle.html-CP3mmhxx.js"),__vite__mapDeps([1173,1])),meta:{a:"azrng",d:1702512e6,l:"2023年12月14日",c:["dotNET","web"],g:["blazor","life"],o:!1,e:`<h2>概述</h2>
<p>Blazor 组件具有定义完善的生命周期，该生命周期从首次创建时开始，在销毁时结束。 组件生命周期由一组事件控制，这些事件响应特定触发器。 例如组件被初始化、用户与组件交互或组件所在的页面被关闭。</p>
<h2>组件生命周期</h2>
<p>Blazor 组件表示 Blazor 应用中的视图，它们定义布局和 UI 逻辑。 应用运行时，这些组件会生成 HTML 标记。 用户交互事件可以触发自定义代码，并且可以更新组件以重新呈现显示。 页面关闭时，Blazor 会删除组件，并清理所有资源。 当用户返回到页面时，将创建新实例。</p>
<p>下图说明了在组件生命周期内发生的事件，以及可用于处理这些事件的方法。 Blazor 提供每种方法的同步和异步版本，<code>SetParametersAsync</code> 除外。</p>`,r:{minutes:7.4,words:2220},t:"组件生命周期",y:"a"}}],["/web/blazor/baseOperator/loginSample.html",{loader:()=>a(()=>import("./loginSample.html-B5ilQP3Y.js"),__vite__mapDeps([1174,1])),meta:{a:"azrng",d:16673472e5,l:"2022年11月2日",c:["dotNET"],g:["无"],o:!1,e:`<h2>目的</h2>
<p>实现BlazorServer不借助WebApi登录登出效果。</p>
<h2>操作</h2>
<p>新建BlazorServer项目，增加用户信息类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Roles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.25,words:675},t:"登录效果",y:"a"}}],["/web/blazor/baseOperator/navigaton.html",{loader:()=>a(()=>import("./navigaton.html-CS5OEPhA.js"),__vite__mapDeps([1175,1])),meta:{a:"azrng",d:1675296e6,l:"2023年2月2日",c:["dotNET"],g:["无"],o:!1,e:`<h2>说明</h2>
<p>文档地址：https://learn.microsoft.com/zh-cn/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-8.0</p>
<h3>路由模板</h3>
<p>Blazor 使用名为 Router 组件的专用组件路由请求。 它在 App.razor 中配置如下：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Router</span> AppAssembly<span class="token operator">=</span><span class="token string">"@typeof(Program).Assembly"</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token class-name">Found</span> Context<span class="token operator">=</span><span class="token string">"routeData"</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token class-name">RouteView</span> RouteData<span class="token operator">=</span><span class="token string">"@routeData"</span> DefaultLayout<span class="token operator">=</span><span class="token string">"@typeof(MainLayout)"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>Found<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>NotFound<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Sorry<span class="token punctuation">,</span> we haven't found any pizzas here<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>NotFound<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.04,words:912},t:"导航",y:"a"}}],["/web/blazor/baseOperator/yuchengxian.html",{loader:()=>a(()=>import("./yuchengxian.html-Bksbky81.js"),__vite__mapDeps([1176,1])),meta:{a:"azrng",d:16753824e5,l:"2023年2月3日",c:["dotNET"],g:["无"],o:!1,e:`<h2>资料</h2>
<p>预呈现和集成组件：<a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/components/prerendering-and-integration?view=aspnetcore-7.0&amp;pivots=webassembly" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/aspnet/core/blazor/components/prerendering-and-integration?view=aspnetcore-7.0&amp;pivots=webassembly</a></p>`,r:{minutes:.19,words:57},t:"预呈现",y:"a"}}],["/web/blazor/masablazor/commonOperator.html",{loader:()=>a(()=>import("./commonOperator.html-el5qEzhY.js"),__vite__mapDeps([1177,1])),meta:{a:"azrng",d:1682208e6,l:"2023年4月23日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Masa Blazor自定义组件封装：<a href="https://mp.weixin.qq.com/s/qlv11I5qwm2Q91vPXE2YCQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qlv11I5qwm2Q91vPXE2YCQ</a></p>
<h2>基础</h2>
<p>MSheet：最小的组件，类似于div</p>
<h2>排版</h2>
<ul>
<li>MAppBar：总是放在应用顶部，优先级低于 MSystemBar。</li>
<li>MBottomNavigation：总是放在应用底部，优先级高于 MFooter。</li>
<li>MFooter：总是放在应用底部，优先级低于 MBottomNavigation。</li>
<li>MNavigationDrawer：可以放置在应用的左边或右边，并且可以配置在 MAppBar 的旁边或下面。</li>
<li>MSystemBar：总是放在应用顶部，优先级高于 MAppBar。</li>
</ul>`,r:{minutes:2.04,words:612},t:"常用功能",y:"a"}}],["/web/blazor/masablazor/",{loader:()=>a(()=>import("./index.html-ZFJ78LE4.js"),__vite__mapDeps([1178,1])),meta:{a:"azrng",d:16835904e5,l:"2023年5月9日",c:["web"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>基于Material Design和BlazorComponent的交互能力提供标准的基础组件库。提供如布局、弹框标准、Loading、全局异常处理等标准场景的预置组件。
官网：<a href="https://docs.masastack.com/blazor/introduction/why-masa-blazor" target="_blank" rel="noopener noreferrer">https://docs.masastack.com/blazor/introduction/why-masa-blazor</a></p>
<h2>操作</h2>`,r:{minutes:1.66,words:499},t:"概述",y:"a"}}],["/web/blazor/deploy/issue.html",{loader:()=>a(()=>import("./issue.html-D7LcXKiW.js"),__vite__mapDeps([1179,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["dotNET"],g:["无"],o:!0,e:`<h3>禁用完整性检查</h3>
<p>错误描述：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Failed to find a <span class="token class-name">valid</span> digest <span class="token keyword">in</span> the 'integrity' attribute <span class="token keyword">for</span> resource 'https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxxx<span class="token operator">/</span>_framework<span class="token operator">/</span>dotnet<span class="token punctuation">.</span><span class="token number">7.0</span><span class="token number">.2</span><span class="token punctuation">.</span>ugjw1i20xy<span class="token punctuation">.</span>js' with computed SHA<span class="token operator">-</span><span class="token number">256</span> integrity 'DudsybyARYYY5kOlsB1ymRUBqrxe5DvlYrfPhSMlN8M<span class="token operator">=</span>'<span class="token punctuation">.</span> The resource has <span class="token return-type class-name">been</span> blocked<span class="token punctuation">.</span>

Uncaught <span class="token punctuation">(</span><span class="token keyword">in</span> promise<span class="token punctuation">)</span> Error<span class="token punctuation">:</span> Failed to start platform<span class="token punctuation">.</span> Reason<span class="token punctuation">:</span> TypeError<span class="token punctuation">:</span> Failed to fetch dynamically <span class="token class-name">imported</span> module<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xxxx<span class="token operator">/</span>_framework<span class="token operator">/</span>dotnet<span class="token punctuation">.</span><span class="token number">7.0</span><span class="token number">.2</span><span class="token punctuation">.</span>ugjw1i20xy<span class="token punctuation">.</span>js at Object<span class="token punctuation">.</span>Vt <span class="token punctuation">[</span><span class="token keyword">as</span> <span class="token class-name">start</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>blazor<span class="token punctuation">.</span>webassembly<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">62194</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:.52,words:155},t:"问题",y:"a"}}],["/web/blazor/deploy/",{loader:()=>a(()=>import("./index.html-6qiRFqc_.js"),__vite__mapDeps([1180,1])),meta:{a:"azrng",d:16759008e5,l:"2023年2月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>大小优化</h2>
<h3>Nginx压缩</h3>
<p>通过nginx开启gzip压缩，配置如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>http
<span class="token punctuation">{</span>
 <span class="token range operator">..</span><span class="token punctuation">.</span>
   <span class="token preprocessor property">#是否启动gzip压缩,on代表启动,off代表开启</span>
    <span class="token class-name">gzip</span> <span class="token keyword">on</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#如果文件大于1k就启动压缩</span>
    gzip_min_length  1k<span class="token punctuation">;</span>
   <span class="token preprocessor property">#以16k为单位,按照原始数据的大小以4倍的方式申请内存空间,一般此项不要修改</span>
    gzip_buffers     <span class="token number">4</span> 16k<span class="token punctuation">;</span>
    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#压缩的等级,数字选择范围是1-9,数字越小压缩的速度越快,消耗cpu就越大</span>
    gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#需要压缩的常见静态资源</span>
    gzip_types     text<span class="token operator">/</span>plain application<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>
    <span class="token class-name">gzip_vary</span> <span class="token keyword">on</span><span class="token punctuation">;</span>
    gzip_proxied   expired no<span class="token operator">-</span>cache no<span class="token operator">-</span>store <span class="token keyword">private</span> auth<span class="token punctuation">;</span>
   <span class="token preprocessor property">#由于nginx的压缩发生在浏览器端而微软的ie6很坑爹,会导致压缩后图片看不见所以该选项是禁止ie6发生压缩</span>
    gzip_disable   <span class="token string">"MSIE [1-6]\\."</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.87,words:562},t:"说明",y:"a"}}],["/web/blazor/nugets/blazormarkdown.html",{loader:()=>a(()=>import("./blazormarkdown.html-DfPM7a4P.js"),__vite__mapDeps([1181,1])),meta:{a:"azrng",d:16458336e5,l:"2022年2月26日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一个<a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" target="_blank" rel="noopener noreferrer">Blazor</a> Markdown 组件，使你能够在服务器端 Blazor 应用中包含 Markdown 文件。
GitHub：<a href="https://github.com/georgemathieson/blazor-markdown" target="_blank" rel="noopener noreferrer">https://github.com/georgemathieson/blazor-markdown</a></p>`,r:{minutes:.2,words:61},t:"BlazorMarkdown",y:"a"}}],["/web/blazor/nugets/markdig.html",{loader:()=>a(()=>import("./markdig.html-B8DJCl3J.js"),__vite__mapDeps([1182,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Markdig 是一个快速、强大、符合CommonMark标准、可扩展的 .NET Markdown 处理器。</p>
<h2>操作</h2>
<p>安装包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Markdig"</span> Version<span class="token operator">=</span><span class="token string">"0.27.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.94,words:581},t:"Markdig",y:"a"}}],["/web/blazor/nugets/openSourceComponent.html",{loader:()=>a(()=>import("./openSourceComponent.html-Bp3iDgtE.js"),__vite__mapDeps([1183,1])),meta:{a:"azrng",d:16931808e5,l:"2023年8月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开源框架介绍</h2>
<h3>MvvmBlazor</h3>
<p>MvvmBlazor 是一个用于构建 Blazor WebAssembly 和 Blazor Server 应用程序的小型框架。借助其易于使用的 MVVM 模式，您可以提高开发速度，同时最大限度地减少使其工作所需的工作量。
MVVM框架：<a href="https://github.com/klemmchr/MvvmBlazor" target="_blank" rel="noopener noreferrer">https://github.com/klemmchr/MvvmBlazor</a></p>
<h3>awesome-blazor</h3>`,r:{minutes:1.96,words:587},t:"开源组件",y:"a"}}],["/web/npm/bushu/jiaobenwenjian.html",{loader:()=>a(()=>import("./jiaobenwenjian.html-BbHNbAAy.js"),__vite__mapDeps([1184,1])),meta:{a:"azrng",d:1690848e6,l:"2023年8月1日",c:["web"],g:["无"],o:!0,e:`<h3>创建sh执行</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">FROM</span> node<span class="token punctuation">:</span>latest

WORKDIR <span class="token operator">/</span>
COPY <span class="token punctuation">.</span> <span class="token punctuation">.</span>

<span class="token preprocessor property">## RUN curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@7</span>
<span class="token preprocessor property">## RUN pnpm config set store-dir .pnpm-store</span>

RUN npm install <span class="token operator">-</span>g pnpm
RUN pnpm config <span class="token keyword">set</span> <span class="token class-name">registry</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>

<span class="token preprocessor property">## pnpm docs:build --dest public \\n\\</span>

<span class="token preprocessor property">## RUN echo "#!/bin/sh \\n\\</span>
<span class="token preprocessor property">## echo </span><span class="token string">"npm install"</span> \\n\\
<span class="token preprocessor property">## pnpm install --frozen-lockfile \\n\\</span>
<span class="token preprocessor property">## pnpm run docs:dev  \\n\\</span>
<span class="token preprocessor property">## " &gt;&gt; /usr/local/bin/entrypoint.sh</span>

RUN echo "#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh \\n\\
echo <span class="token string">"pnpm install"</span> \\n\\
pnpm install \\n\\
pnpm <span class="token class-name">run</span> docs<span class="token punctuation">:</span>dev  \\n\\
" <span class="token operator">&gt;&gt;</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>entrypoint<span class="token punctuation">.</span>sh

RUN chmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>entrypoint<span class="token punctuation">.</span>sh
EXPOSE <span class="token number">80</span><span class="token operator">/</span>tcp

ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/usr/local/bin/entrypoint.sh"</span><span class="token punctuation">]</span>

</code></pre></div>`,r:{minutes:.55,words:164},t:"脚本文件",y:"a"}}],["/web/webkaifa/changedaimajiexi/liulanqiqingqiutou.html",{loader:()=>a(()=>import("./liulanqiqingqiutou.html-C1z2dBxt.js"),__vite__mapDeps([1185,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<p>http头域列表与解释之request篇
HTTP 头域是HTTP协议中请求(request)和响应(response)中的头部信息,其实就是HTTP通信的操作参数，告诉web服务器和浏览器怎样处理这个通信。HTTP头从一个请求信息或者响应信息的第二行开始（第一行是请求行或者响应行），以两个CR-LF字符组结束（CR：回车符,\\r，LF：换行符\\n）而每个HTTP头是字符串形式的，用冒号分割的键值对，多个HTTP头之间用CR-LF字符组隔开。
某些http头可以有注释，例如user-agent,server,via。但这些注释会被服务器或者浏览器忽略IETF组织已经将一些核心的HTTP头定义在RFC2616规范中，这些HTTP头是每个基于HTTP协议的软件必须实现的，而其他一些更新和扩展的头域也必须被基于HTTP的软件实现。当然，各个软件也可以定义自己的头域。
另一方面，RFC2616规范中并没有限制每个HTTP头的长度，或者限制HTTP头的数量，但出于性能和安全的考虑，多数服务器都会自己作规定，例如apache2.3 就规定每个HTTP头不能超过8190个字节，每个请求不能超过100个HTTP头。
以下来看看发送一个请求(request)时候，可能包含的各个HTTP头和它的解释。
1.标准请求头
Accept : 浏览器（或者其他基于HTTP的客户端程序）可以接收的内容类型（Content-types）,例如 Accept: text/plain
&nbsp;
Accept-Charset：浏览器能识别的字符集，例如 Accept-Charset: utf-8
&nbsp;
Accept-Encoding：浏览器可以处理的编码方式，注意这里的编码方式有别于字符集，这里的编码方式通常指gzip,deflate等。例如 Accept-Encoding: gzip, deflate
&nbsp;
Accept-Language：浏览器接收的语言，其实也就是用户在什么语言地区，例如简体中文的就是 Accept-Language: zh-CN
&nbsp;
Accept-Datetime：（这个暂时没搞清楚什么意思）
&nbsp;
Authorization：在HTTP中，服务器可以对一些资源进行认证保护，如果你要访问这些资源，就要提供用户名和密码，这个用户名和密码就是在Authorization头中附带的，格式是“username:password”字符串的base64编码，例如：Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ<mark>中，basic指使用basic认证方式，　QWxhZGRpbjpvcGVuIHNlc2FtZQ</mark>使用base64解码就是Aladdin:open sesame
&nbsp;
Cache-Control：这个指令在request和response中都有，用来指示缓存系统（服务器上的，或者浏览器上的）应该怎样处理缓存，因为这个头域比较重要，特别是希望使用缓　存改善性能的时候，内容也较多，所以我想在下一篇博文中主要介绍一下。
&nbsp;
Connection：告诉服务器这个user agent（通常就是浏览器）想要使用怎样的连接方式。值有keep-alive和close。http1.1默认是keep-alive。keep-alive就是浏览器和服务器　的通信连接会被持续保存，不会马上关闭，而close就会在response后马上关闭。但这里要注意一点，我们说HTTP是无状态的，跟这个是否keep-alive没有关系，不要认为keep-alive是对HTTP无状态的特性的改进。
&nbsp;
Cookie：浏览器向服务器发送请求时发送cookie，或者服务器向浏览器附加cookie，就是将cookie附近在这里的。例如：Cookie:user=admin
&nbsp;
Content-Length：一个请求的请求体的内存长度，单位为字节(byte)。请求体是指在HTTP头结束后，两个CR-LF字符组之后的内容，常见的有POST提交的表单数据，这个Content-Length并不包含请求行和HTTP头的数据长度。
&nbsp;
Content-MD5：使用base64进行了编码的请求体的MD5校验和。例如：Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==
&nbsp;
Content-Type：请求体中的内容的mime类型。通常只会用在POST和PUT方法的请求中。例如：Content-Type: application/x-www-form-urlencoded
&nbsp;
Date：发送请求时的GMT时间。例如：Date: Tue, 15 Nov 1994 08:12:31 GMT
&nbsp;
Expect：指示需要使用服务器某些特殊的功能。（这个我不是很清楚）
&nbsp;
From：发送这个请求的用户的email地址。例如：From: user@example.com
&nbsp;
Host：被服务器的域名或IP地址，如果不是通用端口，还包含该端口号，例如：Host: www.some.com:182
&nbsp;
If-Match :通常用在使用PUT方法对服务器资源进行更新的请求中，意思就是，询问服务器，现在正在请求的资源的tag和这个If-Match的tag相不相同，如果相同，则证明服务器上的这个资源还是旧的，现在可以被更新，如果不相同，则证明该资源被更新过，现在就不用再更新了（否则有可能覆盖掉其他人所做的更改）。
&nbsp;
If-Modified-Since：询问服务器现在正在请求的资源在某个时间以来有没有被修改过，如果没有，服务器则返回304状态来告诉浏览器使用浏览器自己本地的缓存，如果有修改过，则返回200，并发送新的资源（当然如果资源不存在，则返回404。）
&nbsp;
If-None-Match：和If-Modified-Since用意差不多，不过不是根据时间来确定，而是根据一个叫ETag的东西来确定。关于etag我想在下一篇博客介绍一下。
&nbsp;
If-Range：告诉服务器如果这个资源没有更改过(根据If-Range后面给出的Etag判断)，就发送这个资源中在浏览器缺少了的某些部分给浏览器，如果该资源以及被修改过，则将整个资源重新发送一份给浏览器。
&nbsp;
If-Unmodified-Since：询问服务器现在正在请求的资源在某个时刻以来是否没有被修改过。
&nbsp;
Max-Forwards：限制请求信息在代理服务器或网关中向前传递的次数。
&nbsp;
Pragma：好像只有一个值，就是:no-cache。Pragma:no-cache 与cache-control:no-cache相同，只不过cache-control:no-cache是http1.1专门指定的，而Pragma:no-cache可以在http1.0和1.1中使用
&nbsp;
Proxy-Authorization：连接到某个代理时使用的身份认证信息，跟Authorization头差不多。例如：Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
&nbsp;
Range：在HTTP头中，”Range”字眼都表示“资源的byte形式数据的顺序排列，并且取其某一段数据”的意思。Range头就是表示请求资源的从某个数值到某个数值间的数据，例如：Range: bytes=500-999 就是表示请求资源从500到999byte的数据。数据的分段下载和多线程下载就是利用这个实现的。
&nbsp;
Referer：指当前请求的URL是在什么地址引用的。例如在www.a.com/index.html页面中点击一个指向www.b.com的超链接，那么，这个www.b.com的请求中的Referer就是www.a.com/index.html。通常我们见到的图片防盗链就是用这个实现的。
&nbsp;
Upgrade：请求服务器更新至另外一个协议，例如：Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
&nbsp;
User-Agent：通常就是用户的浏览器相关信息。例如：User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/12.0
&nbsp;
Via：用来记录一个请求经过了哪些代理或网关才被送到目标服务器上。例如一个请求从浏览器出发(假设使用http/1.0)，发送给名为 SomeProxy的内部代理，然后被转发至www.somenet.com的公共代理（使用http/1.1），最后被转发至目标服务器www.someweb.com，那么在someweb.com中收到的via 头应该是：via:1.0 someProxy 1.1 [www.someweb.com(apache](http://www.someweb.com(apache) 1.1)
&nbsp;
Warning：记录一些警告信息。
2.通用但是并非标准的http头
X-Requested-With：主要是用来识别ajax请求，很多javascript框架会发送这个头域（值为XMLHttpRequest）
&nbsp;
DNT : DO NOT TRACK的缩写，要求服务器程序不要跟踪记录用户信息。DNT: 1 (开启DNT) DNT: 0 (关闭DNT)火狐，safari,IE9都支持这个头域，并且于2011年3月7日被提交至IETF组织实现标准化
&nbsp;
X-Forwarded-For : 记录一个请求从客户端出发到目标服务器过程中经历的代理，或者负载平衡设备的IP。
&nbsp;
X-Forwarded-Proto：记录一个请求一个请求最初从浏览器发出时候，是使用什么协议。因为有可能当一个请求最初和反向代理通信时，是使用https，但反向代理和服务器通信时改变成http协议，这个时候，X-Forwarded-Proto的值应该是https
&nbsp;
Front-End-Https：微软使用与其负载平衡的一个头域。</p>`,r:{minutes:7.38,words:2213},t:"浏览器请求头",y:"a"}}],["/web/webkaifa/changedaimajiexi/sousuoyinqingjiqiao.html",{loader:()=>a(()=>import("./sousuoyinqingjiqiao.html-B3WAdS_B.js"),__vite__mapDeps([1186,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["web"],g:["无"],o:!0,e:`<p>1.搜索指定网址的关键信息site
比如想搜索某个人在博客园的文章，需要输入：Azrng&nbsp; site:cnblogs
2.完全匹配关键字 “”
使用双引号“ ”，可以完全匹配某个关键字，而不是模糊搜索
示例：&nbsp; "dotnet全栈开发"
3.限定标题包含关键字intitle:&nbsp; ，这个是搜索指定人物发表的一些文章
示例： &nbsp; intitle:张善友 netcore
4.包含视频法，在查询词后面加上inurl:video
示例：&nbsp; inurl:video&nbsp; .netcore
5.限定格式法，在查询词后面输入filetype:geshi (pdf/xls…)
示例：filetype:pdf netcore
6.特定查询词法，在想要搜索的词前面加上加号+
加号前面要有空格，加号后面不要有空格。
搜索张善友关于xamarin的文章
示例： 张善友 +xamarin csdn</p>`,r:{minutes:.78,words:235},t:"搜索引擎技巧",y:"a"}}],["/web/webkaifa/changedaimajiexi/url.html",{loader:()=>a(()=>import("./url.html-C49hj_02.js"),__vite__mapDeps([1187,1])),meta:{a:"azrng",d:16924032e5,l:"2023年8月19日",c:["web"],g:["无"],o:!0,e:`<h2>属性介绍</h2>
<p>假设当前页完整地址是：<a href="http://www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli" target="_blank" rel="noopener noreferrer">http://www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli</a>
"http://"是协议名
"<a href="http://www.test.com" target="_blank" rel="noopener noreferrer">www.test.com</a>"是域名
"aaa"是站点名
"bbb.aspx"是页面名（文件名）
"id=5&amp;name=kelli"是参数
【1】获取 完整url （协议名+域名+站点名+文件名+参数）
string url=Request.Url.ToString();
url=&nbsp;<a href="http://www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli" target="_blank" rel="noopener noreferrer">http://www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli</a>
【2】获取 站点名+页面名+参数：
string url=Request.RawUrl;
(或 string url=Request.Url.PathAndQuery;)
url=&nbsp;/aaa/bbb.aspx?id=5&amp;name=kelli
【3】获取 站点名+页面名：
string url=HttpContext.Current.Request.Url.AbsolutePath;
(或 string url= HttpContext.Current.Request.Path;)
url=&nbsp;aaa/bbb.aspx
【4】获取 域名：
string url=HttpContext.Current.Request.Url.Host;
url=&nbsp;<a href="http://www.test.com" target="_blank" rel="noopener noreferrer">www.test.com</a>
【5】获取 参数：
string url= HttpContext.Current.Request.Url.Query;
url=&nbsp;?id=5&amp;name=kelli</p>`,r:{minutes:.93,words:280},t:"URL",y:"a"}}],["/dataBase/redis/zujian/stackexchange/redishelper.html",{loader:()=>a(()=>import("./redishelper.html-BjWbl1oJ.js"),__vite__mapDeps([1188,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dataBase"],g:["无"],o:!0,e:`<p>操作方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">RedisHelper</span> redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisHelper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//redis.StringSet("aaaa", "123456");</span>

<span class="token class-name"><span class="token keyword">var</span></span> r <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">StringGet</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:11.1,words:3331},t:"RedisHelper",y:"a"}}],["/dataBase/redis/zujian/stackexchange/shuiming.html",{loader:()=>a(()=>import("./shuiming.html-CBhAnhtm.js"),__vite__mapDeps([1189,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dataBase"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>StackExchange.Redis通过使用异步方法和IO多路复用等技术，提高了Redis访问的性能和并发性。它还提供了丰富的功能和选项，如连接池、管道、事务、发布/订阅、Lua脚本等，支持多种序列化和压缩方式，可以轻松地与其他.NET应用程序集成。
StackExchange.Redis还支持Redis Sentinel和Redis Cluster等高可用性和集群方案，使得应用程序可以更容易地管理和扩展Redis实例。因此，它是.NET平台上访问Redis的首选客户端库之一。</p>
<h2>调优</h2>
<p>解决改为异步处理后执行速度有点慢的情况。
StackExchange.Redis 2.0已经从重构了异步队列，使用管道方式解决异步慢的问题。如果发现还有问题，可以试试添加如下代码：</p>`,r:{minutes:1.48,words:443},t:"说明",y:"a"}}],["/dataBase/redis/zujian/stackexchange/stackexchange_redis.html",{loader:()=>a(()=>import("./stackexchange_redis.html-BwC-s7I2.js"),__vite__mapDeps([1190,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dataBase"],g:["无"],o:!0,e:`<p>连接字符串</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>localhost<span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">,</span>defaultDatabase<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token number">123456</span>
</code></pre></div>`,r:{minutes:5.26,words:1579},t:"StackExchange.Redis",y:"a"}}],["/cloud/ciAndCd/jenkins/install/dockerInstall.html",{loader:()=>a(()=>import("./dockerInstall.html-Bh0MMnQW.js"),__vite__mapDeps([1191,1192,1])),meta:{a:"azrng",d:16844544e5,l:"2023年5月19日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>该方法部署的jenkins里面不包含netcore环境，下面包含通过docker部署netcore步骤</p>
</blockquote>
<h2>1. 部署jenkins</h2>
<h3>1.1 创建jenkins的工作目录</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//创建工作目录 
<span class="token function">mkdir</span> /var/jenkins_home

//赋予权限 
<span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span> /var/jenkins_home
</code></pre></div>`,r:{minutes:2.08,words:623},t:"docker安装jenkins",y:"a"}}],["/cloud/ciAndCd/jenkins/install/dockerInstallContainsDotNet.html",{loader:()=>a(()=>import("./dockerInstallContainsDotNet.html-Buf83oao.js"),__vite__mapDeps([1193,1192,1])),meta:{a:"azrng",d:16606944e5,l:"2022年8月17日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>该方法部署的jenkins包含netcore环境，并且包含如何部署netcore</p>
</blockquote>
<h3>1. 更新系统</h3>
<blockquote>
<p>yum update</p>
</blockquote>
<h3>2. 安装docker</h3>
<p>这里就不安装了</p>
<h3>3. 安装jenkins</h3>
<h4>3.1 检索jenkins镜像</h4>
<blockquote>
<p>docker search jenkins</p>
</blockquote>
<h4>3.2制作包含dotnet环境的jenkins的docker的容器</h4>`,r:{minutes:2.26,words:679},t:"docker部署包含net环境jenkins",y:"a"}}],["/cloud/ciAndCd/jenkins/install/installIssue.html",{loader:()=>a(()=>import("./installIssue.html-B_3u-VY5.js"),__vite__mapDeps([1194,1])),meta:{a:"azrng",d:16212096e5,l:"2021年5月17日",c:["cloud"],g:["无"],o:!0,e:`<h3>权限被拒绝</h3>
<h4>错误详情</h4>
<p>Got permission denied while trying to connect to the Docker daemon socket</p>
<h4>错误原因</h4>
<p>docker进程使用 Unix Socket 而不是 TCP 端口。而默认情况下，Unix socket 属于 root 用户，因此需要&nbsp;<strong>root权限</strong>&nbsp;才能访问，这种情况是当前登录用户不是root的时候需要注意。</p>
<h4>解决方法</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>          <span class="token comment">#添加docker用户组</span>
<span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> <span class="token variable">$XXX</span> <span class="token function">docker</span>   <span class="token comment">#检测当前用户是否已经在docker用户组中，其中XXX为用户名，例如我的，liangll</span>
<span class="token function">sudo</span> gpasswd <span class="token parameter variable">-a</span> <span class="token environment constant">$USER</span> <span class="token function">docker</span>  <span class="token comment">#将当前用户添加至docker用户组</span>
newgrp <span class="token function">docker</span>                 <span class="token comment">#更新docker用户组</span>
</code></pre></div>`,r:{minutes:.61,words:183},t:"安装问题",y:"a"}}],["/cloud/ciAndCd/jenkins/install/linuxInstall.html",{loader:()=>a(()=>import("./linuxInstall.html-NkjRnOMi.js"),__vite__mapDeps([1195,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["cloud"],g:["Jenkins","ci/cd"],o:!0,e:`<h2>1.需要先安装java环境</h2>
<p>该文章再linux目录下有讲解。</p>
<h2>2. 安装jenkins</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins　-y
</code></pre></div>`,r:{minutes:1.75,words:524},t:"Linux安装jenkins",y:"a"}}],["/cloud/ciAndCd/jenkins/install/windowsInstall.html",{loader:()=>a(()=>import("./windowsInstall.html-pbeU8biO.js"),__vite__mapDeps([1196,1])),meta:{a:"azrng",d:16633728e5,l:"2022年9月17日",c:["cloud"],g:["无"],o:!0,e:`<h2>部署脚本</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code>docker run <span class="token comment">--rm -u root -d -p 8010:8080 -v /E/Test/jenkins/jenkins_home:/var/jenkins_home  jenkinsci/blueocean</span>
</code></pre></div><p>参考文档：<a href="https://www.jenkins.io/zh/doc/tutorials/build-a-java-app-with-maven/" target="_blank" rel="noopener noreferrer">https://www.jenkins.io/zh/doc/tutorials/build-a-java-app-with-maven/</a>
下载地址：<a href="https://jenkins.io/download/" target="_blank" rel="noopener noreferrer">https://jenkins.io/download/</a></p>`,r:{minutes:.25,words:74},t:"windows下docker安装jenkins",y:"a"}}],["/cloud/ciAndCd/jenkins/release/freeStyle.html",{loader:()=>a(()=>import("./freeStyle.html-DBD6yG4C.js"),__vite__mapDeps([1197,1198,1])),meta:{a:"azrng",d:1624752e6,l:"2021年6月27日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>实现目的：通过jenkins在服务器部署一个简单的.Net程序</p>
</blockquote>
<h2>1. 登录并创建任务</h2>
<p>输入任务名称并选择构建一个自由风格的任务
<img src="/common/1624730955330-564e6e0f-b89e-4720-a4cd-43136753aec8.png" alt="image.png" loading="lazy"></p>
<h2>2. 配置</h2>
<h3>2.1 常规</h3>
<p>设置描述和丢弃规则
<img src="/common/1624731269367-be668e6d-0e82-480e-94de-9442020693bd.png" alt="image.png" loading="lazy"></p>`,r:{minutes:2.17,words:651},t:"构建自由风格任务",y:"a"}}],["/cloud/ciAndCd/jenkins/release/goujianliushuixianxiangmu.html",{loader:()=>a(()=>import("./goujianliushuixianxiangmu.html-JbMQkRc8.js"),__vite__mapDeps([1199,1198,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["cloud"],g:["无"],o:!0,e:`<blockquote>
<p>实现目的：通过jenkins在服务器部署一个简单的.Net程序</p>
</blockquote>
<h2>介绍</h2>
<p>一套运行在jenkins上的工作流框架，将原来独立的运行于单个或多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化工作。</p>
<h2>1. 登录并创建任务</h2>
<p>输入任务名称并选择构建一个流水线任务
<img src="/common/1624779022530-15ecf7ab-9d53-4143-994b-c12595f6a666.png" alt="image.png" loading="lazy"></p>`,r:{minutes:1.87,words:560},t:"构建流水线项目",y:"a"}}],["/cloud/ciAndCd/jenkins/release/tongguogouzizidongfabu.html",{loader:()=>a(()=>import("./tongguogouzizidongfabu.html-l1OGC3cu.js"),__vite__mapDeps([1200,1])),meta:{a:"azrng",d:16252704e5,l:"2021年7月3日",c:["cloud"],g:["无"],o:!0,e:`<h2>Gitea</h2>
<p>点击仓库高级设置，添加web钩子
<img src="/common/1625328199627-55c4fde7-79bf-44ab-9158-8c8086b9f513.png" alt="image.png" loading="lazy">
<img src="/common/1625328339509-6c380c70-94e9-48c6-a012-639b8a824ecf.png" alt="image.png" loading="lazy"></p>
<h3>参考文档</h3>
<blockquote>
<p><a href="https://www.cnblogs.com/linhuiy/p/14943788.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/linhuiy/p/14943788.html</a></p>
</blockquote>`,r:{minutes:.23,words:68},t:"通过钩子自动发布",y:"a"}}],["/cloud/container/docker/install/linuxInstall.html",{loader:()=>a(()=>import("./linuxInstall.html-BI57qGuI.js"),__vite__mapDeps([1201,1])),meta:{a:"azrng",d:16955136e5,l:"2023年9月24日",c:["cloud"],g:["无"],o:!0,e:`<h2>Centos安装Docker</h2>
<h3>安装条件</h3>
<p>在centos 7安装docker要求系统64位，系统内核版本3.10以上，可以使用命令查看</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">uname</span> <span class="token parameter variable">-r</span>
</code></pre></div><blockquote>
<p><strong>注意</strong>：要不就是开放指定的端口，要不直接就在安装之前将服务器防火墙关闭</p>
</blockquote>`,r:{minutes:4.27,words:1280},t:"Linux安装Docker",y:"a"}}],["/cloud/container/docker/install/windowsInstall.html",{loader:()=>a(()=>import("./windowsInstall.html-DGwwd5PH.js"),__vite__mapDeps([1202,1])),meta:{a:"azrng",d:1688256e6,l:"2023年7月2日",c:["cloud"],g:["无"],o:!0,e:`<h2>启用Hyper-V</h2>
<p>打开控制面板 - 程序和功能 - 启用或关闭Windows功能，勾选Hyper-V，然后点击确定即可，如图：
<img src="/common/1688295946469-a0a6824d-cd03-4b47-9bac-9ae88eb7c1e5.png" alt="image.png" loading="lazy">
点击确定后，启用完毕会提示重启系统，我们可以稍后再重启。</p>
<h2>安装Docker</h2>
<p>Docker下载地址为：<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener noreferrer">https://www.docker.com/products/docker-desktop</a> 点击如图处即可下载安装包：
<img src="/common/1688295946463-2b451aef-cf4d-48a4-93eb-43b3d73a6829.png" alt="image.png" loading="lazy">
下载完成后运行安装包，安装完成后界面如图：
<img src="/common/1688295946463-40d42edd-5748-45fb-9335-acc9cbb768bd.png" alt="image.png" loading="lazy">
单击Close and log out，这个时候我们重启一次电脑。</p>`,r:{minutes:2.26,words:677},t:"windows安装docker",y:"a"}}],["/cloud/container/docker/jiaoben/daorudaochujiaoben.html",{loader:()=>a(()=>import("./daorudaochujiaoben.html-vG5IuQsO.js"),__vite__mapDeps([1203,1])),meta:{a:"azrng",d:16859232e5,l:"2023年6月5日",c:["cloud"],g:["无"],o:!0,e:`<h2>导出脚本</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>


<span class="token comment">## 获取到 "image:tag" 格式的镜像名</span>
<span class="token assign-left variable">IMG_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> TAG <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1":"$2}'</span><span class="token variable">\`</span></span>
<span class="token comment">## echo $IMG_NAME | awk '{gsub(/ /,"\\n",$0)} {print $0}'</span>

<span class="token comment">## 如果原本镜像名中存在 "/" 是需要去掉的</span>

<span class="token comment">## 定义镜像存放目录</span>
<span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token string">"/data/docker/image_tar"</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$DIR</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[34m<span class="token variable">\${DIR}</span><span class="token entity" title="\\033">\\033</span>[0m 不存在"</span>
  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$DIR</span>"</span>
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[34m<span class="token variable">\${DIR}</span><span class="token entity" title="\\033">\\033</span>[0m 已创建"</span>
<span class="token keyword">else</span>
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\\033">\\033</span>[34m<span class="token variable">\${DIR}</span><span class="token entity" title="\\033">\\033</span>[0m 已存在"</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> <span class="token string">""</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">IMAGE</span> <span class="token keyword">in</span> <span class="token variable">$IMG_NAME</span>
<span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"正在保存 <span class="token entity" title="\\033">\\033</span>[33m<span class="token variable">\${IMAGE}</span><span class="token entity" title="\\033">\\033</span>[0m"</span>
  <span class="token assign-left variable">SAVE_NAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $IMAGE <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print $1"_"$2}'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\\//_/g'</span><span class="token variable">\`</span></span>
  <span class="token function">docker</span> save <span class="token variable">$IMAGE</span> <span class="token parameter variable">-o</span> <span class="token variable">\${DIR}</span>/<span class="token variable">\${SAVE_NAME}</span>.tar
  <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"已保存到 <span class="token entity" title="\\033">\\033</span>[34m<span class="token variable">\${DIR}</span>/<span class="token entity" title="\\033">\\033</span>[31m<span class="token variable">\${SAVE_NAME}</span>.tar<span class="token entity" title="\\033">\\033</span>[0m"</span>
  <span class="token builtin class-name">echo</span> <span class="token string">""</span>
<span class="token keyword">done</span>
</code></pre></div>`,r:{minutes:.84,words:251},t:"导入导出脚本",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/cookieshenfenrenzheng.html",{loader:()=>a(()=>import("./cookieshenfenrenzheng.html-D_vjfGAc.js"),__vite__mapDeps([1204,1])),meta:{a:"azrng",d:16510176e5,l:"2022年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h3>介绍</h3>
<p>cookie是一个保存在客户机的简单文本文件，这个文件与特定的web文档关联在一起，保存了该客户机访这个web文档时的信息，当客户机再次访问这个web文档时候这些信息可供该文档使用。</p>
<ul>
<li>会话Cookie
<ul>
<li>不包含过期时间，会在浏览器窗口关闭时候被永久删除。</li>
</ul>
</li>
<li>持久Cookie
<ul>
<li>关闭浏览器窗口后不会被删除，通常有一个到期时间，会在到期后被删除。</li>
</ul>
</li>
</ul>
<h3>操作</h3>
<h4>1.1 信息保存</h4>
<p>登录后用户的信息存入cookie中</p>`,r:{minutes:2.29,words:688},t:"Cookie身份认证",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/netfcookie.html",{loader:()=>a(()=>import("./netfcookie.html-BmfBnor0.js"),__vite__mapDeps([1205,1])),meta:{a:"azrng",d:1642032e6,l:"2022年1月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过cookie实现认证功能</p>
<blockquote>
<p>本文示例环境：.Net Framework 4.6</p>
</blockquote>
<h2>操作</h2>
<p>流程： 一个检测用户是否已经登录的过滤器，如果用户已经登录，那么就跳转去登录，登录时候把用户的信息存储到HttpCookie中</p>
<h3>登录流程</h3>
<p>登录方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>Account <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span>PassWord <span class="token operator">==</span> <span class="token string">"123456"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">HttpCookie</span> username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpCookie</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpCookie</span> pwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpCookie</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Cookies<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.91,words:272},t:"NetFCookie",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/jieshao.html",{loader:()=>a(()=>import("./jieshao.html-BkgX1qS-.js"),__vite__mapDeps([1206,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>是一个API，支持用户登录界面等功能，可以管理用户、密码、配置文件数据、角色等。</p>
<h2>要解决的问题</h2>
<p>以下就是我针对此次任务给你提出来的需求。
<strong>身份系统</strong></p>
<ul>
<li>可以同时被所有的ASP.NET 框架使用（Web MVC，Web Forms，Web Api，SignalR）</li>
<li>可以应用于构建 Web, 手机，存储，或者混合应用。</li>
</ul>
<p><strong>能够对用户资料（User Profile）很方便的扩展</strong></p>
<ul>
<li>可以针对用户资料进行扩展。</li>
</ul>`,r:{minutes:2.97,words:891},t:"介绍",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/shenru.html",{loader:()=>a(()=>import("./shenru.html-ePkbnKVh.js"),__vite__mapDeps([1207,1])),meta:{a:"azrng",d:16619904e5,l:"2022年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<p>修改密码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPasswordHasher<span class="token punctuation">&lt;</span>TUser<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">TUser</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
</code></pre></div>`,r:{minutes:.13,words:38},t:"深入",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/gaishu.html",{loader:()=>a(()=>import("./gaishu.html-DRxnvqhP.js"),__vite__mapDeps([1208,1])),meta:{a:"azrng",d:16648416e5,l:"2022年10月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>本文内容参考多位大佬的文章编写而成。</p>
<h2>介绍</h2>
<p>JWT是一个基于json的、用于在网络上声明某种主张的令牌，他是一种双方之间传递安全信息的表述性声明规范。主要用于集群分布式中。</p>
<blockquote>
<p>作用：可以做权限验证的使用，是一种标准化的数据传输规范，但是目的不是为了数据加密和保护。</p>
</blockquote>
<p>Jwt通常是用三部分组成：<strong>头信息，消息体，签名</strong>。</p>
<ul>
<li>Header(头信息)：Json对象，alg表示签名的算法，默认是HS256(HMAC SHA256)，type表示令牌的类型，统一是JWT.</li>
<li>Payload(载荷)：Json对象，存放实际需要传递的数据，只建议存储不重要的信息。</li>
<li>Signature(签名)：值是将前两部分的进行base64编码后使用指定算法签名生成的。</li>
</ul>`,r:{minutes:7.95,words:2384},t:"概述",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jianchancaozuojwttoken.html",{loader:()=>a(()=>import("./jianchancaozuojwttoken.html-AndWNMMm.js"),__vite__mapDeps([1209,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>示例环境：vs2022、.net5  框架：WebAPI
<img src="/common/1614697643706-a618f2c1-ea39-4d6a-8cf8-75078edbf5af.png" alt="image.png" loading="lazy"></p>
<h2>引用组件</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Authentication.JwtBearer"</span> Version<span class="token operator">=</span><span class="token string">"5.0.7"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.97,words:892},t:"简单操作JWT Token",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jiangzhixiaxian.html",{loader:()=>a(()=>import("./jiangzhixiaxian.html-KfI9c92x.js"),__vite__mapDeps([1210,1])),meta:{a:"azrng",d:16616448e5,l:"2022年8月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>方案一</h2>
<ul>
<li>jwt验证人设置为动态的，每个用户都有自己自己的验证人，如果让用户强制下线，那么就修改该用户的验证人</li>
<li>生成token的时候，验证用户信息，然后根据user表的验证人去生成jwt</li>
<li>验证jwt的时候通过AudienceValidator方法去校验该验证人是否在数据库中存在数据，如果存在数据，那么说明验证通过。</li>
</ul>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code>var db <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GetService<span class="token operator">&lt;</span>IBaseQuery<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Db<span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token comment">//认证</span>
<span class="token punctuation">{</span>
	o<span class="token punctuation">.</span>Challenge <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
	o<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> false<span class="token punctuation">;</span>
	o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> new TokenValidationParameters
	<span class="token punctuation">{</span>
		<span class="token comment">//3+2</span>

		<span class="token comment">// 是否开启签名认证</span>
		ValidateIssuerSigningKey <span class="token operator">=</span> true<span class="token punctuation">,</span>
		IssuerSigningKey <span class="token operator">=</span> new <span class="token function">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>JwtSecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token comment">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>

		ValidateIssuer <span class="token operator">=</span> true<span class="token punctuation">,</span>
		ValidIssuer <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtIssuer<span class="token punctuation">,</span><span class="token comment">//发行人</span>

		<span class="token comment">// 接收人验证</span>
		ValidateAudience <span class="token operator">=</span> true<span class="token punctuation">,</span>
		<span class="token comment">//ValidAudience = config.JwtAudience,//验证人</span>
		<span class="token comment">//或者</span>
		AudienceValidator <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
		<span class="token punctuation">{</span>
			var bbb <span class="token operator">=</span> new <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//m:Audience集合  n:解析后的jwt  z: token验证参数</span>
			<span class="token keyword">return</span> m <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bbb<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>

		RequireExpirationTime <span class="token operator">=</span> true<span class="token punctuation">,</span>
		ValidateLifetime <span class="token operator">=</span> true<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>
	o<span class="token punctuation">.</span>Events <span class="token operator">=</span> new JwtBearerEvents
	<span class="token punctuation">{</span>
		OnAuthenticationFailed <span class="token operator">=</span> content <span class="token operator">=</span><span class="token operator">&gt;</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>SecurityTokenExpiredException<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				content<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Token-Expired"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.03,words:608},t:"强制下线",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/kuozhanzidingyishouquan.html",{loader:()=>a(()=>import("./kuozhanzidingyishouquan.html-D6DdUuKO.js"),__vite__mapDeps([1211,1])),meta:{a:"azrng",d:16510176e5,l:"2022年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>阅读前提</h2>
<p>本文需要掌握一定的.NetCore认证知识的前提下阅读。
本文的代码需要在已经实现JWT认证的项目中使用。</p>
<h2>目的</h2>
<p>默认的授权方案只有根据角色授权或者组装角色成为策略授权，但是我能否实现动态授权那？比如我查询数据库然后判断该用户是否有操作该权限的方法那？并且还使用JWT进行认证的方式。</p>
<h2>定义自定义策略</h2>
<p>原来的策略授权方案配置</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"deleteRolePolicy"</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">"deleteRole"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//必须角色为admin 和user才可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"adminanduser"</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//必须角色为admin并且是user才可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AdminAndUser"</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//角色为admin或者user都可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"AdminOrUser"</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">"edit"</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span>
        policy<span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>cliaim <span class="token operator">=&gt;</span> cliaim<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">"edit role"</span> <span class="token operator">&amp;&amp;</span> cliaim<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">"super admin"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.17,words:1550},t:"扩展自定义授权",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/peizhijwtrenzhengpeizhi.html",{loader:()=>a(()=>import("./peizhijwtrenzhengpeizhi.html-Lz-E81A0.js"),__vite__mapDeps([1212,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span><span class="token comment">//认证</span>
<span class="token punctuation">{</span>
    o<span class="token punctuation">.</span>Challenge <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//3+2</span>

        <span class="token comment">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>
        <span class="token comment">//是否验证发行人</span>
        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidIssuer <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtIssuer<span class="token punctuation">,</span><span class="token comment">//发行人</span>

        <span class="token comment">// 是否验证接收人</span>
        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidAudience <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtAudience<span class="token punctuation">,</span><span class="token comment">//验证人</span>
        <span class="token comment">//或者</span>
        <span class="token comment">//AudienceValidator = (m, n, z) =&gt;</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    //m:Audience集合  n:解析后的jwt  z: token验证参数</span>
        <span class="token comment">//    return m != null &amp;&amp; (m.FirstOrDefault()?.Equals(config.JwtAudience, StringComparison.Ordinal) ?? false);</span>
        <span class="token comment">//},</span>

        <span class="token comment">// 是否开启密钥去验证token</span>
        ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>JwtSecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        RequireExpirationTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">//是否验证token有效期，使用当前时间与token 的claim中的notbefore和expires对比</span>
        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span><span class="token comment">//校验时间是否过期时， token验证间隔默认是300s验证一次   TimeSpan.Zero代表是0间隔</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>
    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtBearerEvents</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//如果jwt过期  那么就先走这个失败的方法，再走OnChallenge</span>
        OnAuthenticationFailed <span class="token operator">=</span> content <span class="token operator">=&gt;</span><span class="token comment">//过期时候的场景，会给返回头增加标识</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SecurityTokenExpiredException</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Token-Expired"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//验证失败自定义返回类</span>
        OnChallenge <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 跳过默认的处理逻辑，返回下面的模型数据</span>
            context<span class="token punctuation">.</span><span class="token function">HandleResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status401Unauthorized<span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
            <span class="token punctuation">{</span>
                IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                Message <span class="token operator">=</span> <span class="token string">"UnAuthorized"</span><span class="token punctuation">,</span>
                Code <span class="token operator">=</span> <span class="token string">"401"</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//实例化返回类</span>
            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//当消息被收到时候  实现目的可能是如果是signalr请求的，那么就把请求参数里面的token放到正常的token上进行处理</span>
        <span class="token comment">//OnMessageReceived = context =&gt;</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    var accessToken = context.Request.Query["access_token"];</span>

        <span class="token comment">//    //如果请求的是signalr</span>
        <span class="token comment">//    var path = context.HttpContext.Request.Path;</span>
        <span class="token comment">//    if (!string.IsNullOrEmpty(accessToken) &amp;&amp; (path.StartsWithSegments("/api/xxxhub")))</span>
        <span class="token comment">//    {</span>
        <span class="token comment">//        //从查询字符串中读取令牌</span>
        <span class="token comment">//        context.Token = accessToken;</span>
        <span class="token comment">//    }</span>
        <span class="token comment">//    return Task.CompletedTask;</span>
        <span class="token comment">//}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.52,words:455},t:"配置Jwt认证配置",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/jiyuyonghujiaosedefangwenquanxiankongzhi.html",{loader:()=>a(()=>import("./jiyuyonghujiaosedefangwenquanxiankongzhi.html-BdGinNf4.js"),__vite__mapDeps([1213,1])),meta:{a:"azrng",d:16685568e5,l:"2022年11月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个开箱即用的框架封装</p>
<h2>操作</h2>
<p>代办</p>
<p>TODO  需要将该文章补充完整，并弄出来一个例子使用。</p>
<h2>参考文档</h2>
<p>使用.Net实现基于用户角色的访问权限控制：<a href="https://mp.weixin.qq.com/s/Rq8cuQoQ6oZF9dxaZ5fKjA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Rq8cuQoQ6oZF9dxaZ5fKjA</a></p>
`,r:{minutes:.34,words:101},t:"基于用户角色的访问权限控制",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyiapikeyrenzheng.html",{loader:()=>a(()=>import("./zidingyiapikeyrenzheng.html-KyxmWn5R.js"),__vite__mapDeps([1214,1])),meta:{a:"azrng",d:16760736e5,l:"2023年2月11日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>APIKey支持两种模式认证Spatialmap、CRS、OC、AI服务：</p>
<ul>
<li>Token认证：通过HTTP头部传递直接认证。Web用户推荐这种，避免secret写进javascript客户端。</li>
<li>signature签名认证：参数传递apikey以及对参数和密钥计算SHA256摘要的签名认证。</li>
</ul>
<h2>操作</h2>
<p>下面的操作来演示一下token认证的方案</p>
<p>编写配置常量类用于存储认证方式</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ApiKeyAuthenticationDefaults</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 认证schema名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> AuthenticationSchema <span class="token operator">=</span> <span class="token string">"ApiKey"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.33,words:700},t:"自定义ApiKey认证",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyibasicrenzhengyushouquan.html",{loader:()=>a(()=>import("./zidingyibasicrenzhengyushouquan.html-B1gzhJCt.js"),__vite__mapDeps([1215,1])),meta:{a:"azrng",d:16911072e5,l:"2023年8月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>文章内容基于陈晴阳老师的一篇文章，在原来基础上增加一些自己的见解与代码拓展。</p>
<blockquote>
<p>本文示例环境：VS2022+.Net6</p>
</blockquote>
<h2>概述</h2>
<p>ASP.NET Core的认证与授权已经不是什么新鲜事了，微软官方的文档对于如何在ASP.NET Core中实现认证与授权有着非常详细深入的介绍。但有时候在开发过程中，我们也往往会感觉无从下手，或者由于一开始没有进行认证授权机制的设计与规划，使得后期出现一些混乱的情况。这里我就尝试结合一个实际的例子，从0到1来介绍ASP.NET Core中如何实现自己的认证与授权机制。
当我们使用Visual Studio自带的ASP.NET Core Web API项目模板新建一个项目的时候，Visual Studio会问我们是否需要启用认证机制，如果你选择了启用，那么Visual Studio会在项目创建的时候，加入一些辅助依赖和一些辅助类，比如加入对Entity Framework以及ASP.NET Identity的依赖，以帮助你实现基于Entity Framework和ASP.NET Identity的身份认证。如果你还没有了解过ASP.NET Core的认证与授权的一些基础内容，那么当你打开这个由Visual Studio自动创建的项目的时候，肯定会一头雾水，不知从何开始，你甚至会怀疑自动创建的项目中，真的是所有的类或者方法都是必须的吗？所以，为了让本文更加简单易懂，我们还是选择不启用身份认证，直接创建一个最简单的ASP.NET Core Web API应用程序，以便后续的介绍。</p>`,r:{minutes:14.61,words:4384},t:"自定义Basic认证与授权",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/session.html",{loader:()=>a(()=>import("./session.html-BK9ZKl1-.js"),__vite__mapDeps([1216,1])),meta:{a:"azrng",d:16819488e5,l:"2023年4月20日",c:["dotNET"],g:["无"],o:!0,e:`<h3>1. 简单使用</h3>
<p>ConfigureServices中使用</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddDistributedMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.17,words:651},t:"Session",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/sessiongongxiang.html",{loader:()=>a(()=>import("./sessiongongxiang.html-CXN4oYUk.js"),__vite__mapDeps([1217,1])),meta:{a:"azrng",d:1642032e6,l:"2022年1月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>服务器集群环境下，要求实现session数据共享，让每台机器都可以读取session。</p>
<h2>方案</h2>
<ul>
<li>使用分布式缓存：可以将Session数据存储在分布式缓存中，如Redis或Memcached。这样，多个服务器可以共享同一个缓存，从而实现Session数据的共享。</li>
<li>使用数据库：可以将Session数据存储在数据库中，每个服务器在需要时从数据库中读取Session数据。这种方法需要在服务器之间共享数据库连接。</li>
<li>使用Cookie：可以将Session数据存储在客户端的Cookie中，每个服务器在需要时从客户端的Cookie中读取Session数据。这种方法可以实现跨服务器的Session数据共享，但会增加客户端的负载。</li>
<li>使用负载均衡器：可以使用负载均衡器将Session数据在多个服务器之间进行分发和共享。这种方法需要在负载均衡器上配置Session亲和性，以确保同一个用户的请求始终被转发到同一个服务器上。</li>
</ul>`,r:{minutes:1.04,words:312},t:"Session共享",y:"a"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/sessionyuanma.html",{loader:()=>a(()=>import("./sessionyuanma.html-OyZheK3r.js"),__vite__mapDeps([1218,1])),meta:{a:"azrng",d:1649808e6,l:"2022年4月13日",c:["dotNET"],g:["无"],o:!0,e:`<p>注册</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddDistributedMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddSession</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    option<span class="token punctuation">.</span>IdleTimeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过期时间</span>
    option<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>HttpOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//是否允许js访问</span>
    option<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>IsEssential <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//为true则绕过策略检查</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.8,words:841},t:"Session源码",y:"a"}}],["/dotnet/api/controllerApi/extensions/dongtaiapizhipanda_dynamicwebapi.html",{loader:()=>a(()=>import("./dongtaiapizhipanda_dynamicwebapi.html-D_hSXGml.js"),__vite__mapDeps([1219,1])),meta:{a:"azrng",d:1696464e6,l:"2023年10月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>源自于ABP的一个可独立使用的，可自动为你的业务逻辑层生成 ASP.NET Core WebApi 层的开源组件。它生成的API符合Restful风格，可以根据符合条件的类来生成WebApi，由MVC框架直接调用逻辑，无性能问题，完美兼容Swagger来构建API说明文档。
仓库地址：<a href="https://github.com/dotnetauth/Panda.DynamicWebApi" target="_blank" rel="noopener noreferrer">https://github.com/dotnetauth/Panda.DynamicWebApi</a></p>`,r:{minutes:.95,words:285},t:"动态API之Panda.DynamicWebApi",y:"a"}}],["/dotnet/api/controllerApi/extensions/dongtaiapizhiplus_autoapi.html",{loader:()=>a(()=>import("./dongtaiapizhiplus_autoapi.html-zq6_yl28.js"),__vite__mapDeps([1220,1])),meta:{a:"azrng",d:16928352e5,l:"2023年8月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>介绍一个组件 Plus.AutoApi 可以用它来动态生成 Restful 风格的 WebApi，不用写 Controller。
地址：<a href="https://github.com/Meowv/Plus.AutoApi" target="_blank" rel="noopener noreferrer">https://github.com/Meowv/Plus.AutoApi</a></p>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Plus<span class="token punctuation">.</span>AutoApi
</code></pre></div>`,r:{minutes:1.46,words:438},t:"动态API之Plus.AutoApi",y:"a"}}],["/dotnet/api/controllerApi/extensions/gaojichaxun.html",{loader:()=>a(()=>import("./gaojichaxun.html-RGzfkksM.js"),__vite__mapDeps([1221,1])),meta:{a:"azrng",d:16853184e5,l:"2023年5月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>AutoFilterer</h2>
<p>在业务开发中，一个常用的功能就是“高级查询”，就是客户可以根据自己的需要设置查询条件查找数据，类似下图：
<img src="/common/1647351202528-27db7cf5-7a43-4f9b-a919-1544347ebcf5.png" alt="image.png" loading="lazy">
通常，我们需要为每个“高级查询”定制Dto类，用于传输条件，并要根据条件组合成查询语句执行数据库查询操作，费时费力。
现在，使用AutoFilterer.Generators可以轻松实现上述功能。</p>
<h3>示例</h3>
<p>引用组件</p>`,r:{minutes:2.29,words:687},t:"高级查询",y:"a"}}],["/dotnet/api/controllerApi/extensions/leikuyunhangwebapi.html",{loader:()=>a(()=>import("./leikuyunhangwebapi.html-Bqy6IhBx.js"),__vite__mapDeps([1222,1])),meta:{a:"azrng",d:16875648e5,l:"2023年6月24日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>有些场景需要我们使用类库来运行WebApi(例如加载dll创建控制器)。</p>
<h2>操作</h2>
<p>创建一个控制台项目作为主程序，然后我们创建一个Embed.WebApi的类库来运行WebApi项目。我们在该类库中创建下面的接口，并实现相关的方法来运行WebApi</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            endpoints<span class="token punctuation">.</span><span class="token function">MapDefaultControllerRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInitTest</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 初始化服务</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.15,words:1245},t:"类库运行WebApi",y:"a"}}],["/dotnet/api/controllerApi/extensions/poolAPI.html",{loader:()=>a(()=>import("./poolAPI.html-By8Z89ER.js"),__vite__mapDeps([1223,1])),meta:{a:"azrng",d:16982784e5,l:"2023年10月26日",c:["article"],g:["log"],o:!1,e:`<h2>使用场景</h2>
<p>当你需要执行一个比较耗时的操作，然后这个时候我们一般需要编写好几个接口，比如一个提交操作的接口，一个定时获取状态的接口以及一个获取结果的接口，每次都需要写多麻烦，这个时候就用到本文介绍的组件了</p>
<h2>效果图</h2>
<p>当配置完成后，可以在swagger界面查看到多出来下面几个接口，然后分别是用来提交、获取状态、获取错误信息、获取结果、删除等操作</p>
<figure><img src="/common/image-20231026222547431.png" alt="image-20231026222547431" tabindex="0" loading="lazy"><figcaption>image-20231026222547431</figcaption></figure>`,r:{minutes:1.3,words:391},t:"轮询API",y:"a"}}],["/dotnet/api/controllerApi/idempotent/fangzhichongfudijiao.html",{loader:()=>a(()=>import("./fangzhichongfudijiao.html-BNvmmxjS.js"),__vite__mapDeps([1224,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["dotNET"],g:["无"],o:!0,e:`<h2>简介</h2>
<p>在平常开发中，我们常常会遇到防止重复请求的问题。当用户因为网络不佳或者其他问题的情况下，会多次点击，导致重复提交，重复提交的后果在交易系统、售后维权，以及支付系统中尤其严重。</p>
<h2>解决方案</h2>
<h3>前端-按钮禁用</h3>
<p>当用户第一次点击按钮提交后，修改按钮的状态为禁用状态，防止用户重复提交。</p>
<h3>后端-redis缓存</h3>
<p>当用户第一次点击按钮提交后，然后存储一个redis值，key是UserId+方法名称，值随意，时间不能太长也不能太短，然后在逻辑处理结束后将该值删除，当第一次请求没有结束的时候，用户第二次请求过来，然后去redis获取值，发现值已经存在，这个时候直接返回，防止重复提交。</p>`,r:{minutes:1.63,words:488},t:"防止重复提交",y:"a"}}],["/dotnet/api/controllerApi/idempotent/midengxing.html",{loader:()=>a(()=>import("./midengxing.html-Bl3Nj5J0.js"),__vite__mapDeps([1225,1])),meta:{a:"azrng",d:16405632e5,l:"2021年12月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>幂等（Idempotence）是一个数学和计算科学概念，简单的来说就是一个操作多次执行产生的结果与一次执行产生的结果一致。
&nbsp;
为什么需要幂等性？
在计算机应用中，可能遇到网络抖动，临时故障，或者服务调用失败，尤其是分布式系统中，接口调用失败更为常见。为了保证服务的完整性，我们可能会发起接口的重试调用，如果接口不处理幂等，可能对系统造成很大的影响，因此接口的幂等设计尤其更为重要。
&nbsp;在订单的支付中，如果没有幂等性，接口的重试可能造成重复支付。
&nbsp;
&nbsp;
对于HTTP请求的POST、GET、PUT和DELETE，按照HTTP方法的定义，PUT、GET和DELETE都是幂等的。
PUT：用于创建或者更新一个资源，如果资源存在就更新资源，如果资源不存在就创建资源。我们常用的方式为PUT /xxxx/id，指定了一个id，更新或者创建都是针对这个id的，因此PUT属于幂等的。GET：用于获取一个资源，这个方法无需过多解释，方法肯定属于幂等的。DELETE：删除一个资源，删除资源是需要指定ID，例如：DELTE /xxxx/id，这种方式删除一个资源执行多次结果是相同的。影响以属于幂等的。POST：创建一个资源，提交请求中的实体到服务端，用于创建需要的资源。常用格式为POST /XXXX/Order，无需指定资源的ID。明显此方法属于非幂等的。以上是按照HTTP方法的定义来说的，可能有人会说，我用的GET就不是幂等，你也可以这样用，协议没有限制不让这么做，这是一个非强制性契约。</p>`,r:{minutes:2.03,words:609},t:"幂等性",y:"a"}}],["/dotnet/api/controllerApi/idempotent/monitorTryEnter.html",{loader:()=>a(()=>import("./monitorTryEnter.html-CRcFtciy.js"),__vite__mapDeps([1226,1])),meta:{a:"azrng",d:164592e7,l:"2022年2月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>防止事件重复触发。</p>
<h2>介绍</h2>
<p>通过 Monitor.TryEnter 我们可以尝试获取指定对象的排他锁：</p>
<ul>
<li>若对象尚未被加锁，Monitor 就成功对该对象进行加锁，并返回 True</li>
<li>若对象已被加锁，Monitor 就无法再加锁，返回 False</li>
</ul>
<h2>操作</h2>
<p>它整体的逻辑很适合来防止事件重复触发，示例代码如下：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormHexagonPosition_KeyDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 如果 _lock 已被加锁就直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Monitor<span class="token punctuation">.</span><span class="token function">TryEnter</span><span class="token punctuation">(</span>_lock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 业务逻辑代码</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> 
    <span class="token punctuation">{</span>
        Monitor<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.55,words:165},t:"Monitor.TryEnter",y:"a"}}],["/dotnet/api/controllerApi/safe/aspNetCoreRateLimit.html",{loader:()=>a(()=>import("./aspNetCoreRateLimit.html-DyvU7c92.js"),__vite__mapDeps([1227,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>描述</h2>
<p>是一个.NetCore访问速率限制的解决方案，基于IP地址和客户端Id用于控制WebApi客户端访问速率。
包含了IpRateLimitMiddleware and a ClientRateLimitMiddleware两个中间件，用这两个中间件你根据不同的场景能设置几种不同的限制，比如限制一个客户端或者一个ip在几秒或者15分钟内访问最大限制。您可以定义这些限制来处理对某个API的所有请求，也可以将这些限制限定在指定范围的每个API URL或HTTP请求路径上。</p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet <span class="token keyword">add</span> package AspNetCoreRateLimit <span class="token operator">--</span>version <span class="token number">5.0</span><span class="token number">.0</span>
</code></pre></div>`,r:{minutes:1.24,words:372},t:"请求限制AspNetCoreRateLimit",y:"a"}}],["/dotnet/api/controllerApi/safe/ddosAttack.html",{loader:()=>a(()=>import("./ddosAttack.html-DW9RoNd0.js"),__vite__mapDeps([1228,1])),meta:{a:"azrng",d:16879104e5,l:"2023年6月28日",c:["dotNET"],g:["无"],o:!0,e:`<p>DDOS攻击在网上很常见，这种攻击简单有效，可以让一个网站瞬间开始并长时间无法响应。通常来说，网站可以通过多种节流方法来避免这种情况。
下面我们换一种方式，用中间件MiddleWare来限制特定客户端IP的请求数量。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DosAttackMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">&gt;</span></span> _IpAdresses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _Banned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Timer</span> _Timer <span class="token operator">=</span> <span class="token function">CreateTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Timer</span> _BannedTimer <span class="token operator">=</span> <span class="token function">CreateBanningTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BANNED_REQUESTS <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> REDUCTION_INTERVAL <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 1 second    </span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> RELEASE_INTERVAL <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 5 minutes    </span>
    <span class="token keyword">private</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">DosAttackMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
 	<span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> ip <span class="token operator">=</span> httpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>_Banned<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">CheckIpAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckIpAddress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> ip<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_IpAdresses<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _IpAdresses<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_IpAdresses<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token operator">==</span> BANNED_REQUESTS<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _Banned<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _IpAdresses<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            _IpAdresses<span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Timer</span> <span class="token function">CreateTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token function">GetTimer</span><span class="token punctuation">(</span>REDUCTION_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ElapsedEventHandler</span><span class="token punctuation">(</span>TimerElapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> timer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Timer</span> <span class="token function">CreateBanningTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token function">GetTimer</span><span class="token punctuation">(</span>RELEASE_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> <span class="token keyword">delegate</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_Banned<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> _Banned<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> timer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Timer</span> <span class="token function">GetTimer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> interval<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> interval<span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> timer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TimerElapsed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key <span class="token keyword">in</span> _IpAdresses<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _IpAdresses<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_IpAdresses<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> _IpAdresses<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.13,words:340},t:"DDOS攻击",y:"a"}}],["/dotnet/api/controllerApi/safe/refenceCheck.html",{loader:()=>a(()=>import("./refenceCheck.html-CTo6SCOk.js"),__vite__mapDeps([1229,1])),meta:{a:"azrng",d:16759872e5,l:"2023年2月10日",c:["dotNET"],g:["无"],o:!0,e:`<p>对API请求引用头进行检查可以防止API滥用，以及跨站点请求伪造（CSRF）攻击</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateReferrerAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">IConfiguration</span> _configuration<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _configuration <span class="token operator">=</span> <span class="token punctuation">(</span>IConfiguration<span class="token punctuation">)</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IConfiguration</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsValidRequest</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentResult</span>
            <span class="token punctuation">{</span>
                Content <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Invalid referer header"</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>ExpectationFailed<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValidRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span>
 	<span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> referrerURL <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            referrerURL <span class="token operator">=</span> request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"Referer"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>referrerURL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> allowedUrls <span class="token operator">=</span> _configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"CorsOrigin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">Select</span><span class="token punctuation">(</span>url <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>Authority<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">bool</span></span> isValidClient <span class="token operator">=</span> allowedUrls<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>referrerURL<span class="token punctuation">)</span><span class="token punctuation">.</span>Authority<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> isValidClient<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.6,words:181},t:"引用头检查",y:"a"}}],["/dotnet/api/controllerApi/safe/tokenSecret.html",{loader:()=>a(()=>import("./tokenSecret.html-CGTAXarL.js"),__vite__mapDeps([1230,1])),meta:{a:"azrng",d:16639776e5,l:"2022年9月24日",c:["dotNET"],g:["无"],o:!0,e:`<p>原理:</p>
<h3>1.认证服务</h3>
<p>做一个认证服务，提供一个认证的webapi，用法先访问它获取对应的token（比如说利用传过去的id去生成了一个token，然后可以把这个token去存储到HttpRuntime.Cache缓存中，然后去请求接口的时候，去这个里获取token，如果不同或者找不到说明失败）
例子：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token comment">//插入缓存</span>
            <span class="token class-name">Tokens</span> token <span class="token operator">=</span> <span class="token punctuation">(</span>Tokens<span class="token punctuation">)</span>HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>StaffId <span class="token operator">=</span> ID<span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>SignToken <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>ExpireTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>StaffId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>ExpireTime<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:4.52,words:1356},t:"后台接口-Token+参数签名",y:"a"}}],["/dotnet/api/swagger/tazhan/dajianswaggerhub.html",{loader:()=>a(()=>import("./dajianswaggerhub.html-BtyfWBHy.js"),__vite__mapDeps([1231,1])),meta:{a:"azrng",d:16812576e5,l:"2023年4月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>就是将多个系统的swagger集成到一块，成为swagger中心。</p>
<h2>操作</h2>
<p>在NetCore的世界里, 我们可以使用 <a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="noopener noreferrer">Swashbuckle.AspNetCore</a>来构建一个我们自己的SwaggerHub. 而且特别简单, 我们仅需要一行代码即可</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> swaggerUIOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SwaggerUIOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
swaggerUIOptions<span class="token punctuation">.</span>ConfigObject<span class="token punctuation">.</span>Urls <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UrlDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> <span class="token string">"swagger name"</span><span class="token punctuation">,</span>
        Url<span class="token operator">=</span> <span class="token string">"swagger.json"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>swaggerUIOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.75,words:825},t:"搭建SwaggerHub",y:"a"}}],["/dotnet/api/swagger/tazhan/daochuwenjian.html",{loader:()=>a(()=>import("./daochuwenjian.html-OcJoxoM8.js"),__vite__mapDeps([1232,1])),meta:{a:"azrng",d:16956864e5,l:"2023年9月26日",c:["dotNET"],g:["无"],o:!0,e:`<h2>导出MD文件</h2>
<p>安装nuget包，仓库地址：<a href="https://github.com/liuweichaox/SwaggerDoc" target="_blank" rel="noopener noreferrer">https://github.com/liuweichaox/SwaggerDoc</a></p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"SwaggerDoc"</span> Version<span class="token operator">=</span><span class="token string">"1.0.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.5,words:151},t:"导出文件",y:"a"}}],["/dotnet/api/swagger/tazhan/fanhuileimingchenyingshe.html",{loader:()=>a(()=>import("./fanhuileimingchenyingshe.html-CTd8-viU.js"),__vite__mapDeps([1233,1])),meta:{a:"azrng",d:16812576e5,l:"2023年4月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>在给其他团队的同事提供接口的时候，因为接口返回参数是他们定义的，但是他们定义的成员名称我又不习惯，这个时候我只能去修改成员的名称。修改后发现swagger显示的信息和返回的不一致，这我都懵逼了。</p>
<h2>操作</h2>
<p>我的测试代码如下，使用的是Newtonsoft.Json的Json解析器
ConfigureServices代码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.25,words:376},t:"返回类名称映射",y:"a"}}],["/dotnet/api/swagger/tazhan/jingtaiswagger_jsonwenjian.html",{loader:()=>a(()=>import("./jingtaiswagger_jsonwenjian.html-DYNOSral.js"),__vite__mapDeps([1234,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>说明</h2>
<p>ASP.NET Core Web API默认集成了Swashbuckle，可以在运行时显示Swagger UI：
而Swagger UI实际上是解析的动态生成的swagger.json：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">"/swagger/v1/swagger.json"</span><span class="token punctuation">,</span> <span class="token string">"WebApplication3 v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.97,words:290},t:"静态swagger.json文件",y:"a"}}],["/dotnet/api/swagger/tazhan/miniapishangchuanwenjianxianshiyichang.html",{loader:()=>a(()=>import("./miniapishangchuanwenjianxianshiyichang.html-D-UiEnPm.js"),__vite__mapDeps([1235,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>该方法的目的是：在miniapi中上传文件使用HttpRequest不支持swagger显示，所以提供该方法让swagger显示</p>
<h2>操作</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 文件上传操作过滤器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadOperationFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IOperationFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//在 OpenAPI 3.0 中，文件上传的请求可以用下列结构描述（https://swagger.io/docs/specification/describing-request-body/file-upload/）</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///该方法的目的是：在miniapi中上传文件使用HttpRequest不支持swagger显示，所以提供该方法让swagger显示</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NotImplementedException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Apply</span><span class="token punctuation">(</span><span class="token class-name">OpenApiOperation</span> operation<span class="token punctuation">,</span> <span class="token class-name">OperationFilterContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> FileUploadContentType <span class="token operator">=</span> <span class="token string">"multipart/form-data"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>operation<span class="token punctuation">.</span>RequestBody <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
            <span class="token operator">!</span>operation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>FileUploadContentType<span class="token punctuation">,</span> StringComparison<span class="token punctuation">.</span>InvariantCultureIgnoreCase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ApiDescription<span class="token punctuation">.</span>ParameterDescriptions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Type <span class="token operator">!=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        operation<span class="token punctuation">.</span>RequestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiRequestBody</span>
        <span class="token punctuation">{</span>
            Description <span class="token operator">=</span> <span class="token string">"HttpRequest"</span><span class="token punctuation">,</span>
            Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> OpenApiMediaType<span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    <span class="token punctuation">{</span>
                        FileUploadContentType<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiMediaType</span>
                        <span class="token punctuation">{</span>
                            Schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSchema</span>
                            <span class="token punctuation">{</span>
                                Type <span class="token operator">=</span> <span class="token string">"object"</span><span class="token punctuation">,</span>
                                Required <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token string">"file"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                Properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> OpenApiSchema<span class="token punctuation">&gt;</span></span>
                                <span class="token punctuation">{</span>
                                    <span class="token punctuation">{</span>
                                        <span class="token string">"file"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                        <span class="token punctuation">{</span>
                                            Type <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">,</span>
                                            Format <span class="token operator">=</span> <span class="token string">"binary"</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.85,words:256},t:"MiniApi上传文件显示异常",y:"a"}}],["/dotnet/api/swagger/tazhan/zhuti.html",{loader:()=>a(()=>import("./zhuti.html-DeU9hZA5.js"),__vite__mapDeps([1236,1])),meta:{a:"azrng",d:16777152e5,l:"2023年3月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>IGeekFan.AspNetCore.Knife4jUI</h2>
<p>仓库地址：<a href="https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI</a></p>
`,r:{minutes:.12,words:35},t:"主题",y:"a"}}],["/dotnet/base/logOperator/compomemt/jackremotelog.html",{loader:()=>a(()=>import("./jackremotelog.html-BKSW_jjp.js"),__vite__mapDeps([1237,1])),meta:{a:"azrng",d:16825536e5,l:"2023年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>JackRemoteLog 是一个基于.Net，支持全文检索的远程日志组件
Jack.RemoteLog.WebApi 是服务器端。
仓库地址：<a href="https://github.com/simpleway2016/JackRemoteLog" target="_blank" rel="noopener noreferrer">https://github.com/simpleway2016/JackRemoteLog</a></p>
<h2>资料</h2>
<p><a href="https://mp.weixin.qq.com/s/sZ-HgVeHlUXjL73Q6dqlXw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/sZ-HgVeHlUXjL73Q6dqlXw</a></p>`,r:{minutes:.23,words:69},t:"JackRemoteLog",y:"a"}}],["/dotnet/base/logOperator/compomemt/keshihualogdashboard.html",{loader:()=>a(()=>import("./keshihualogdashboard.html-B6stQW1s.js"),__vite__mapDeps([1238,1])),meta:{a:"azrng",d:16962048e5,l:"2023年10月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p><code>LogDashboard</code>是在github上开源的aspnetcore项目, 它旨在帮助开发人员排查项目运行中出现错误时快速查看日志排查问题。</p>
<blockquote>
<p>官网地址：<a href="https://doc.logdashboard.net/" target="_blank" rel="noopener noreferrer">https://doc.logdashboard.net/</a>
GitHub：<a href="https://github.com/realLiangshiwei/LogDashboard" target="_blank" rel="noopener noreferrer">https://github.com/realLiangshiwei/LogDashboard</a></p>
</blockquote>`,r:{minutes:1.22,words:367},t:"可视化LogDashboard",y:"a"}}],["/dotnet/base/logOperator/compomemt/loki.html",{loader:()=>a(()=>import("./loki.html-CPiL8zRL.js"),__vite__mapDeps([1239,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Loki 是一个受Prometheus启发的水平可扩展、高可用性、多租户日志聚合系统。它的设计非常具有成本效益且易于操作。它不索引日志的内容，而是为每个日志流设置一组标签。
与其他日志聚合系统相比，Loki：</p>
<ul>
<li>不对日志进行全文索引。通过存储压缩的非结构化日志和仅索引元数据，Loki 操作更简单，运行成本更低。</li>
<li>使用已在 Prometheus 中使用的相同标签对日志流进行索引和分组，使您能够使用已在 Prometheus 中使用的相同标签在指标和日志之间无缝切换。</li>
<li>特别适合存储Kubernetes Pod 日志。Pod 标签等元数据会被自动抓取和索引。</li>
<li>在 Grafana 中有原生支持（需要 Grafana v6.0）。</li>
</ul>`,r:{minutes:1.08,words:325},t:"Loki",y:"a"}}],["/dotnet/base/logOperator/compomemt/sejil.html",{loader:()=>a(()=>import("./sejil.html-C8O3qA3g.js"),__vite__mapDeps([1240,1])),meta:{a:"azrng",d:16936128e5,l:"2023年9月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Sejil 是一个 .NET 组件库，使您能够直接从应用程序捕获、查看和过滤 ASP.net Core 应用程序的日志事件。它支持结构化日志记录、查询以及保存日志事件查询。
Sejil 的特点是，轻量级，开箱即用，带管理界面，非常适合在小型项目中使用。</p>
<blockquote>
<p>现在已经不更新了</p>
</blockquote>
<p>仓库地址：<a href="https://github.com/alaatm/Sejil" target="_blank" rel="noopener noreferrer">https://github.com/alaatm/Sejil</a></p>`,r:{minutes:.87,words:260},t:"Sejil",y:"a"}}],["/dotnet/base/logOperator/compomemt/watchdog.html",{loader:()=>a(()=>import("./watchdog.html-uthgC2m6.js"),__vite__mapDeps([1241,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>WatchDog 是一个使用 C## 开发的开源的轻量监控工具，它可以记录和查看 ASP.Net Core Web 和 WebApi 的实时消息、事件、异常、 Http 请求响应等。
它使用了 SignalR 技术进行实时监控，在开发环境中，使用了 LiteDb 单文件数据库进行存储。当然，根据您的需要，也可以选择外部的 MSSQL、MySQL 或 Postgres 数据库。
仓库地址：https://github.com/IzyPro/WatchDog</p>
<h2>功能特性</h2>
<p>• 实时 HTTP 请求和响应记录
• 实时异常记录
• 代码内消息和事件记录
• 用户友好的查询页面
• 身份验证
• 数据定期清除</p>`,r:{minutes:.96,words:287},t:"WatchDog",y:"a"}}],["/dotnet/base/logOperator/log4net/netFrameworkUse.html",{loader:()=>a(()=>import("./netFrameworkUse.html-CSvb66ds.js"),__vite__mapDeps([1242,1])),meta:{a:"azrng",d:16825536e5,l:"2023年4月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。</p>
<h2>使用</h2>
<h3>方案一</h3>
<p>第一步：使用Nuget安装log4net.dll的引用
第二步：在Global.asax.cs中的Application_Start方法中添加：
log4net.Config.XmlConfigurator.Configure();
第三步：修改配置文件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>configSections<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>log4net日志使用<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">section</span> name<span class="token operator">=</span><span class="token string">"log4net"</span> type<span class="token operator">=</span><span class="token string">"log4net.Config.Log4NetConfigurationSectionHandler, log4net"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>configSections<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>log4net开始<span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>log4net<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>root<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token class-name">level</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"WARN"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>appender<span class="token operator">-</span><span class="token keyword">ref</span> <span class="token keyword">ref</span><span class="token operator">=</span><span class="token string">"LogFileAppender"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>appender<span class="token operator">-</span><span class="token keyword">ref</span> <span class="token keyword">ref</span><span class="token operator">=</span><span class="token string">"ConsoleAppender"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">logger</span> name<span class="token operator">=</span><span class="token string">"testLogging"</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token class-name">level</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"DEBUG"</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>logger<span class="token operator">&gt;</span>
 
    <span class="token operator">&lt;</span><span class="token class-name">appender</span> name<span class="token operator">=</span><span class="token string">"LogFileAppender"</span> type<span class="token operator">=</span><span class="token string">"log4net.Appender.FileAppender"</span> <span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>日志写入的目录<span class="token operator">--</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"File"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"log-file.txt"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"AppendToFile"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
 
      <span class="token operator">&lt;</span><span class="token class-name">layout</span> type<span class="token operator">=</span><span class="token string">"log4net.Layout.PatternLayout"</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"Header"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"[Header] "</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"Footer"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"[Footer] "</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"ConversionPattern"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"%d [%t] %-5p %c [%x]  - %m%n"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>layout<span class="token operator">&gt;</span>
 
      <span class="token operator">&lt;</span><span class="token class-name">filter</span> type<span class="token operator">=</span><span class="token string">"log4net.Filter.LevelRangeFilter"</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"LevelMin"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"DEBUG"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"LevelMax"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"WARN"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">&gt;</span>
 
    <span class="token operator">&lt;</span><span class="token class-name">appender</span> name<span class="token operator">=</span><span class="token string">"ConsoleAppender"</span> type<span class="token operator">=</span><span class="token string">"log4net.Appender.ConsoleAppender"</span> <span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token class-name">layout</span> type<span class="token operator">=</span><span class="token string">"log4net.Layout.PatternLayout"</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">param</span> name<span class="token operator">=</span><span class="token string">"ConversionPattern"</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token string">"%d [%t] %-5p %c [%x] - %m%n"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>layout<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>log4net<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>log4net结束<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:5.05,words:1514},t:"dotFramework使用Log4net",y:"a"}}],["/dotnet/base/logOperator/log4net/",{loader:()=>a(()=>import("./index.html-D4ehP6UU.js"),__vite__mapDeps([1243,1])),meta:{a:"azrng",d:16825536e5,l:"2023年4月27日",c:["dotNET"],g:["log"],o:!0,e:`<h2>概述</h2>
<p>log4net是.Net下一个非常优秀的开源日志记录组件。log4net记录日志的功能非常强大。它可以将日志分不同的等级，以不同的格式，输出到不同的媒介。包括到追加文本文件，sqlite数据库，mysql数据库和windows日志中。</p>
<h2>操作</h2>
<h3>快速上手</h3>
<p>新建.Net5的Api服务，引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"log4net"</span> Version<span class="token operator">=</span><span class="token string">"2.0.12"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Logging.Log4Net.AspNetCore"</span> Version<span class="token operator">=</span><span class="token string">"5.0.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:7.88,words:2363},t:"说明",y:"a"}}],["/dotnet/base/peizhikuangjia/peizhikaiguan/dipeibanfeatureflag.html",{loader:()=>a(()=>import("./dipeibanfeatureflag.html-Bwv80OhJ.js"),__vite__mapDeps([1244,1])),meta:{a:"azrng",d:16436736e5,l:"2022年2月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>在我们的应用中，可能有一些配置开关的需求，某些功能是否启用使用一个配置开关，用的时候就打开，不用的时候就关掉，于是基于 .NET Core 的里配置体系写了一个简单的 FeatureFlag，类似于之前的 AppSetting 的扩展 <a href="http://mp.weixin.qq.com/s?__biz=MzAxMjE2NTMxMw==&amp;mid=2456605994&amp;idx=1&amp;sn=5258154acdc235c71b3193aada599fc7&amp;chksm=8c2e7c84bb59f5925ab575ca3c28c4d263c16ada9bc674dd5e7dc968ae1f09d4a4a1d3c579e7&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">给 IConfiguration 写一个 GetAppSetting 扩展方法</a></p>`,r:{minutes:1.87,words:560},t:"低配版FeatureFlag",y:"a"}}],["/dotnet/base/peizhikuangjia/peizhikaiguan/featuremanagement.html",{loader:()=>a(()=>import("./featuremanagement.html-Cza1PJpf.js"),__vite__mapDeps([1245,1])),meta:{a:"azrng",d:16911072e5,l:"2023年8月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>通过一些简单的配置文件配置来决定某一个功能是否开启，方便快捷。</p>
<blockquote>
<p>示例环境：vs2019、net5</p>
</blockquote>
<h2>引用组件包</h2>
<blockquote>
<p>Microsoft.FeatureManagement.AspNetCore</p>
</blockquote>
<h3>简单使用</h3>
<h4>配置文件</h4>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">"Logging"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"LogLevel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"Default"</span><span class="token punctuation">:</span> <span class="token string">"Information"</span><span class="token punctuation">,</span>
      <span class="token string">"Microsoft"</span><span class="token punctuation">:</span> <span class="token string">"Warning"</span><span class="token punctuation">,</span>
      <span class="token string">"Microsoft.Hosting.Lifetime"</span><span class="token punctuation">:</span> <span class="token string">"Information"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"FeatureManagement"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"ActiveStatus"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"AllowedHosts"</span><span class="token punctuation">:</span> <span class="token string">"*"</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:1.46,words:439},t:"FeatureManagement",y:"a"}}],["/dotnet/base/peizhikuangjia/peizhikaiguan/ifeaturefilter.html",{loader:()=>a(()=>import("./ifeaturefilter.html-BUEJbCwb.js"),__vite__mapDeps([1246,1])),meta:{a:"azrng",d:1647216e6,l:"2022年3月14日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.08,words:25},t:"IFeatureFilter",y:"a"}}],["/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/jsonwenjianpeizhiyuan.html",{loader:()=>a(()=>import("./jsonwenjianpeizhiyuan.html-CBmg1FjW.js"),__vite__mapDeps([1247,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>前文获取配置文件的时候，是获取默认的appsettings.json配置文件的配置，下面说明下如何进行自定义获取配置</p>
</blockquote>
<h2>Json Provider</h2>
<h3>构建独立的IConfiguration</h3>
<p>编写方法</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IConfigurationRoot</span> <span class="token function">LoadSettings</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"common.json"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"appsettings.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">env<span class="token punctuation">.</span>EnvironmentName</span><span class="token punctuation">}</span></span><span class="token string">.json"</span></span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.45,words:734},t:"Json文件配置源",y:"a"}}],["/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/neicunshujuyuanpeizhi.html",{loader:()=>a(()=>import("./neicunshujuyuanpeizhi.html-B9uLk_eN.js"),__vite__mapDeps([1248,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文为学习笔记</p>
</blockquote>
<h2>介绍</h2>
<ul>
<li>以kevy-value字符串键值对的方式存储配置</li>
<li>支持从各种不同的数据源读取配置信息</li>
</ul>
<p>四个核心接口：IConfiguration、IConfigurationRoot、IConfigurationSection、IConfigurationBuilder
扩展点(注入我们自己的配置源):IConfigurationSource、IConfigurationPrivider</p>
<h2>操作</h2>
<h3>配置创建和读取</h3>`,r:{minutes:2.44,words:733},t:"内存数据源配置",y:"a"}}],["/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/",{loader:()=>a(()=>import("./index.html-BvmbQ0RV.js"),__vite__mapDeps([1249,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开发步骤</h2>
<p>1.开发一个直接或者间接实现Configurationprovider接口的类XXXconfigurationProvider，一般继承自ConfigurationProvider。如果是从文件读取，可以继承自FileConfigProvider。重写load方法，把扁平化数据设置到Data属性即可。
2.再开发给实现了IConfigurationSource接口的类XXXConfigurationSource，如果是文件读取，可以继承自FileConfigurationSource。在Build方法中返回上面的ConfigurationPrvider对象。
3.然后使用即可，configurationBuild.Add(new ConfigruarionSource())即可。为了简化使用，一般听过一个IConfugrationBuilder的扩展方法。</p>`,r:{minutes:1.41,words:424},t:"说明",y:"a"}}],["/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyipeizhishujuyuan.html",{loader:()=>a(()=>import("./zidingyipeizhishujuyuan.html-BNphgW9Z.js"),__vite__mapDeps([1250,1])),meta:{a:"azrng",d:16956e8,l:"2023年9月25日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>本文为学习笔记</p>
</blockquote>
<h2>需求</h2>
<p>自定义数据源来扩展我们的配置框架，需要实现 IConfigurationProvider 接口。在实现过程中，需要重写 Load() 方法从数据源加载配置信息，并将其转换为键值对集合。另外，还可以根据需要实现其他方法，如 Set(), TryGet(), 和 GetChildKeys() 等。
步骤：</p>
<ul>
<li>实现IConfigurationSource</li>
<li>实现IConfigurationProvider</li>
<li>实现AddXXX扩展方法</li>
</ul>`,r:{minutes:1.99,words:598},t:"自定义配置数据源",y:"a"}}],["/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyishujukupeizhiyuan.html",{loader:()=>a(()=>import("./zidingyishujukupeizhiyuan.html-QQ1yFZfQ.js"),__vite__mapDeps([1251,1])),meta:{a:"azrng",d:16790976e5,l:"2023年3月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>创建一个自定义配置提供程序，从数据库读取我们的配置</p>
<h2>操作</h2>
<h3>初始化数据库</h3>
<p>在我们开始之前，我们需要先安装两个 Nuget 包：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer <span class="token operator">-</span>v <span class="token number">3.1</span><span class="token number">.7</span>
</code></pre></div>`,r:{minutes:3.97,words:1192},t:"自定义数据库配置源",y:"a"}}],["/dotnet/base/serialize/erjinzhi/binaryformatter.html",{loader:()=>a(()=>import("./binaryformatter.html-B1MbaPZ9.js"),__vite__mapDeps([1252,1])),meta:{a:"azrng",d:16940448e5,l:"2023年9月7日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>二进制序列化</p>
<p>注意：BinaryFormatter已经弃用，因为包含安全漏洞，资料：<a href="https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide#binaryformatter-security-vulnerabilities" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide#binaryformatter-security-vulnerabilities</a></p>`,r:{minutes:1.14,words:343},t:"BinaryFormatter",y:"a"}}],["/dotnet/base/serialize/erjinzhi/binarywriter.html",{loader:()=>a(()=>import("./binarywriter.html-BtkPUuD4.js"),__vite__mapDeps([1253,1])),meta:{a:"azrng",d:16937856e5,l:"2023年9月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader" target="_blank" rel="noopener noreferrer">BinaryReader</a> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter" target="_blank" rel="noopener noreferrer">BinaryWriter</a>，适用于 XML 和 JSON。</p>`,r:{minutes:1.03,words:308},t:"BinaryWriter",y:"a"}}],["/dotnet/base/serialize/erjinzhi/memorypack.html",{loader:()=>a(()=>import("./memorypack.html-qvxK8lVD.js"),__vite__mapDeps([1254,1])),meta:{a:"azrng",d:16935264e5,l:"2023年9月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>如果要兼顾序列化后大小和性能的话我们应该要选择MemoryPackBrotli，它序列化以后的结果最小，而且兼顾了性能。
注意：需要.NET7 版本</p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>&lt;PackageReference Include=<span class="token string">"MemoryPack"</span> Version=<span class="token string">"1.4.4"</span> <span class="token operator">/</span>&gt;
</code></pre></div>`,r:{minutes:.92,words:275},t:"MemoryPack",y:"a"}}],["/dotnet/base/serialize/erjinzhi/messagepack.html",{loader:()=>a(()=>import("./messagepack.html-D8l-Z7gO.js"),__vite__mapDeps([1255,1])),meta:{a:"azrng",d:16937856e5,l:"2023年9月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>MessagePack for C＃（MessagePack-CSharp）是用于C＃的极速MessagePack序列化程序，比MsgPack-Cli快10倍，与其他所有C＃序列化程序相比，具有最好的性能。 MessagePack for C＃具有内置的LZ4压缩功能，可以实现超快速序列化和二进制占用空间小。 性能永远是重要的！ 可用于游戏，分布式计算，微服务，数据存储到Redis等。支持.NET, .NET Core, Unity, Xamarin。MessagePack比json序列化快并且小。</p>
<h2>操作</h2>
<p>引用nuget包</p>
`,r:{minutes:2.2,words:660},t:"MessagePack",y:"a"}}],["/dotnet/base/serialize/json/datacontractjsonserializer.html",{loader:()=>a(()=>import("./datacontractjsonserializer.html-C5VsJroK.js"),__vite__mapDeps([1256,1])),meta:{a:"azrng",d:16432416e5,l:"2022年1月27日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年1月27日16:31:45</p>
</blockquote>
<h2>概述</h2>
<p>在.NetF中使用一种序列化方法。</p>
<h2>操作</h2>
<blockquote>
<p>示例环境：.NetF4.7</p>
</blockquote>
<p>引用组件</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>System.Runtime.Serialization
</code></pre></div>`,r:{minutes:.57,words:172},t:"DataContractJsonSerializer",y:"a"}}],["/dotnet/base/serialize/json/dynamic_json.html",{loader:()=>a(()=>import("./dynamic_json.html-DkTE-5BK.js"),__vite__mapDeps([1257,1])),meta:{a:"azrng",d:16609536e5,l:"2022年8月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>用于基于新的System.Text.Json提供轻量级动态包装器。
github：<a href="https://github.com/Groxan/Dynamic.Json" target="_blank" rel="noopener noreferrer">https://github.com/Groxan/Dynamic.Json</a></p>
<h2>操作</h2>
<h2>实例化动态Json</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// parse json from string/stream/etc, for example</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> DJson<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">@"
{
    ""versionNumber"": 1,
    ""product_name"": ""qwerty"",
    ""items"": [ 1, 2, 3 ],
    ""settings"": {
        ""enabled"": false
    }
}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or read json from file</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> DJson<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token string">"file.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or get json from HTTP</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> DJson<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">"https://api.com/endpoint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or use HttpClient extension</span>
<span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetJsonAsync</span><span class="token punctuation">(</span><span class="token string">"https://api.com/endpoint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.46,words:137},t:"Dynamic.Json",y:"a"}}],["/dotnet/base/serialize/json/javascriptserializer.html",{loader:()=>a(()=>import("./javascriptserializer.html-BHaMWB7n.js"),__vite__mapDeps([1258,1])),meta:{a:"azrng",d:16432416e5,l:"2022年1月27日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>最后更新时间：2022年1月27日16:28:19</p>
</blockquote>
<h2>概述</h2>
<p>在.NetF中使用一种序列化方法。</p>
<h2>操作</h2>
<blockquote>
<p>示例环境：.NetF4.7</p>
</blockquote>
<p>引用组件</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>System.Web.Extensions
</code></pre></div>`,r:{minutes:.55,words:164},t:"JavaScriptSerializer",y:"a"}}],["/dotnet/base/serialize/json/json.html",{loader:()=>a(()=>import("./json.html-BTLepkYi.js"),__vite__mapDeps([1259,1])),meta:{a:"azrng",d:16965504e5,l:"2023年10月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一种数据格式</p>
<p>将 Newtonsoft.Json 与 System.Text.Json 比较，并迁移到 System.Text.Json：<a href="https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft?pivots=dotnet-7-0" target="_blank" rel="noopener noreferrer">文章</a></p>
<h2>在线工具</h2>
<p>jsonPath在线测试网站：<a href="http://jsonpath.com/" target="_blank" rel="noopener noreferrer">http://jsonpath.com/</a>
jsonSchema在线验证网站：<a href="https://www.jsonschemavalidator.net/" target="_blank" rel="noopener noreferrer">https://www.jsonschemavalidator.net/</a>
jsonSchema在线生成网站：<a href="https://jsonformatter.org/json-to-jsonschema" target="_blank" rel="noopener noreferrer">https://jsonformatter.org/json-to-jsonschema</a> 国内版本：<a href="https://tooltt.com/json2schema/" target="_blank" rel="noopener noreferrer">https://tooltt.com/json2schema/</a></p>`,r:{minutes:4.34,words:1303},t:"说明",y:"a"}}],["/dotnet/base/serialize/json/jsoncons_jsonpath.html",{loader:()=>a(()=>import("./jsoncons_jsonpath.html-BE3iGlXY.js"),__vite__mapDeps([1260,1])),meta:{a:"azrng",d:16775424e5,l:"2023年2月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>JsonPath查询可通过第三方包实现</p>
<h2>安装</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"JsonCons.JsonPath"</span> Version<span class="token operator">=</span><span class="token string">"1.1.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.16,words:48},t:"JsonCons.JsonPath",y:"a"}}],["/dotnet/base/serialize/json/newtonsoft_json.html",{loader:()=>a(()=>import("./newtonsoft_json.html-Bt5o4Ipl.js"),__vite__mapDeps([1261,1])),meta:{a:"azrng",d:16944768e5,l:"2023年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Json.NET是目前最流行的.Net中的Json支持包。
官网文档：</p>
<h3>优点</h3>
<ul>
<li>灵活的 JSON 序列化器，用于在 .NET 对象和 JSON 之间进行转换</li>
<li>LINQ to JSON 用于手动读写 JSON</li>
<li>高性能：比 .NET 的内置 JSON 序列化器更快(.NetF)</li>
<li>编写缩进的、易于阅读的 JSON</li>
<li>将 JSON 与 XML 相互转换</li>
<li>支持.NET Standard 2.0、.NET 2、.NET 3.5、.NET 4、.NET 4.5、Silverlight、Windows Phone 和 Windows 8 Store</li>
</ul>`,r:{minutes:12.76,words:3828},t:"Newtonsoft.Json",y:"a"}}],["/dotnet/base/serialize/json/system_text_json.html",{loader:()=>a(()=>import("./system_text_json.html-CjYYYtsT.js"),__vite__mapDeps([1262,1])),meta:{a:"azrng",d:1693872e6,l:"2023年9月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一个默认的高性能、低内存的处理Json的工具。</p>
<ul>
<li>将对象序列化为Json文本以及将Json文本反序列化为对象(支持UTF-8)</li>
<li>可以读取和写入编码为UTF-8的Json文本</li>
<li>创建内存中文档对象模型，以及访问元素的内容。</li>
</ul>
<h2>对象</h2>
<p>在 System.Text.Json 中，有几个重量级的对象，所有的JSON互操作，都是围绕这几个对象进行，只要理解了他们各自的用途用法，就基本上掌握了JSON和实体对象的互操作。
<strong>JsonDocument</strong>
提供用于检查 JSON 值的结构内容，而不自动实例化数据值的机制。JsonDocument 有一个属性 RootElement，提供对JSON文档根元素的访问，RootElement是一个JsonElement对象。
<strong>JsonElement</strong>
提供对JSON值的访问，在System.Text.Json 中，大到一个对象、数组，小到一个属性、值，都可以通过 JsonElement 进行互操作
<strong>JsonProperty</strong>
JSON中最小的单元，提供对属性、值的访问
<strong>JsonSerializer</strong>
提供JSON互操作的静态类，提供了一系列 Serializer/Deserialize 的互操作的方法，其中还有一些异步/流式操作方法。
<strong>JsonSerializerOptions</strong>
与上面的 JsonSerializer 配合使用，提供自定义的个性化互操作选项，包括命名、枚举转换、字符转义、注释规则、自定义转换器等等操作选项。
<strong>Utf8JsonWriter/Utf8JsonReader</strong>
这两个对象是整个 System.Text.Json 的核心对象，所有的JSON互操作几乎都是通过这两个对象进行，他们提供的高性能的底层读写操作。</p>`,r:{minutes:9.08,words:2724},t:"System.Text.Json",y:"a"}}],["/dotnet/base/pipeline/filter/filterfangchong.html",{loader:()=>a(()=>import("./filterfangchong.html-D3EOeXm4.js"),__vite__mapDeps([1263,1])),meta:{a:"azrng",d:16892064e5,l:"2023年7月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>对一些业务接口增加防重功能，即时短时间收到多个相同的请求，也只处理一个，其他的不处理，避免产生脏数据。</p>
<h2>操作</h2>
<h3>基础操作</h3>
<p>通过请求地址作为key，搭配内存缓存，实现幂等性校验。因为本文使用到了IMemoryCache，所以还需要注入该服务</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.47,words:1040},t:"过滤器实现-防重",y:"a"}}],["/dotnet/base/pipeline/filter/filterfanhuileichuli.html",{loader:()=>a(()=>import("./filterfanhuileichuli.html-DxXlh7gp.js"),__vite__mapDeps([1264,1])),meta:{a:"azrng",d:16945632e5,l:"2023年9月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过返回过滤器实现返回类的处理，在最外层包一层公共返回类。</p>
<h2>操作</h2>
<h3>准备</h3>
<p>里面的ResultModel使用的是nuget的东西</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"AzrngCommon"</span> Version<span class="token operator">=</span><span class="token string">"1.2.4"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.44,words:433},t:"过滤器实现-返回类处理",y:"a"}}],["/dotnet/base/pipeline/filter/filterzhucefangshi.html",{loader:()=>a(()=>import("./filterzhucefangshi.html-BXUERKvu.js"),__vite__mapDeps([1265,1])),meta:{a:"azrng",d:16581888e5,l:"2022年7月19日",c:["dotNET"],g:["无"],o:!0,e:`<p>过滤器的注册方式有：Action、Controller、全局</p>
<h2>Action注册方式</h2>
<p>局部注册方式，针对控制器中的某个方法上标注特性的方式进行注册，代码如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AuthonizationFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.26,words:679},t:"过滤器注册方式",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-jiyuipqingqiuxianzhi.html",{loader:()=>a(()=>import("./guolvqishixian-jiyuipqingqiuxianzhi.html-25qqEsDt.js"),__vite__mapDeps([1266,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>场景一</h2>
<h3>使用场景</h3>
<p>限制每一个ip客户端对于指定的接口每次请求多少次之后需要停止指定的时间缓冲，防止恶意攻击。</p>
<h3>操作</h3>
<p>增加请求限制过滤器</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 根据ip接口请求限制(请求次数达到指定次数的时候，会停止访问多少秒)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Method<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestLimitFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> LimitRequestNum <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Seconds <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">MemoryCache</span> Cache <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCache</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 请求限制属性</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>key<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>limitRequestNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>限制的次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seconds<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>限制时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">RequestLimitFilter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> limitRequestNum <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> seconds <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        LimitRequestNum <span class="token operator">=</span> limitRequestNum<span class="token punctuation">;</span>
        Seconds <span class="token operator">=</span> seconds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ipAddress <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ipAddress</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> prevReqCount <span class="token operator">=</span> Cache<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevReqCount <span class="token operator">&gt;=</span> LimitRequestNum<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentResult</span>
            <span class="token punctuation">{</span>
                Content <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"Request limit is exceeded. Try again in </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Seconds</span><span class="token punctuation">}</span></span><span class="token string"> seconds."</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>TooManyRequests<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>prevReqCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span>Seconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.72,words:515},t:"过滤器实现-基于IP请求限制",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-niminghuachuli.html",{loader:()=>a(()=>import("./guolvqishixian-niminghuachuli.html-D22L8Jl0.js"),__vite__mapDeps([1267,1])),meta:{a:"azrng",d:16581888e5,l:"2022年7月19日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过返回过滤器实现对返回结果匿名化的实现。</p>
<h2>操作</h2>
<p>引用辅助包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"AzrngCommon"</span> Version<span class="token operator">=</span><span class="token string">"1.2.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.41,words:123},t:"过滤器实现-匿名化处理",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-rizhijilu.html",{loader:()=>a(()=>import("./guolvqishixian-rizhijilu.html-BZruv2n5.js"),__vite__mapDeps([1268,1])),meta:{a:"azrng",d:16581888e5,l:"2022年7月19日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过Action过滤器实现对请求日志的记录。</p>
<h2>操作</h2>
<p>编写过滤器</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 日志记录</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestParamRecordFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//目的：记录请求的消息</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RequestParamRecordFilter</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//设置可以多次读取</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span>  sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$"Time:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string"> requestUrl:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string">  Method:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">}</span></span><span class="token string">  requestBodyData: "</span></span> <span class="token operator">+</span>
            data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Host: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Host</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Client IP: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.01,words:303},t:"过滤器实现-日志记录",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-rucanjiaoyan.html",{loader:()=>a(()=>import("./guolvqishixian-rucanjiaoyan.html-CzzYLHrY.js"),__vite__mapDeps([1269,1])),meta:{a:"azrng",d:16948224e5,l:"2023年9月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>通过Action过滤器实现对一些常见的请求入参的校验。比如我们的接口中经常有患者ID字段，我们可以全局对该字段进行限制。</p>
<h2>操作</h2>
<p>编写过滤器</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 对模型验证过滤器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelValidationFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//实现目的：比如接口中的常用参数有患者ID，我们可以写过滤器统一校验患者ID是否有效</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ModelValidationFilter</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>ModelState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">"patientId"</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">StringValues</span> patientIdValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>patientIdValue<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> patientId<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>patientId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    _logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string"> 患者标识无效"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span><span class="token string">"患者标识无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"POST"</span> <span class="token operator">||</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
            <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> body <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JObject</span> jobject <span class="token operator">=</span> JObject<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>jobject<span class="token punctuation">[</span><span class="token string">"patientId"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> patientId<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>patientId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    _logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string"> 患者标识无效"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BadRequestObjectResult</span><span class="token punctuation">(</span><span class="token string">"患者标识无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.26,words:377},t:"过滤器实现-入参校验",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-yichangchuli.html",{loader:()=>a(()=>import("./guolvqishixian-yichangchuli.html-0E57_613.js"),__vite__mapDeps([1270,1])),meta:{a:"azrng",d:16913664e5,l:"2023年8月7日",c:["dotNET"],g:["无"],o:!0,e:`<blockquote>
<p>更新时间：2022年8月14日14:17:22</p>
</blockquote>
<h2>目的</h2>
<p>通过异常过滤器实现业务异常捕捉，并且将异常信息进行记录并返回统一的响应报文(比如在开发环境返回具体的异常堆栈，在其他环境返回统一错误信息)。</p>
<h2>操作</h2>
<p>引用辅助包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"AzrngCommon"</span> Version<span class="token operator">=</span><span class="token string">"1.2.6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.09,words:327},t:"过滤器实现-异常处理",y:"a"}}],["/dotnet/base/pipeline/filter/guolvqishixian-zidongshiwuchuli.html",{loader:()=>a(()=>import("./guolvqishixian-zidongshiwuchuli.html-DMl2llvY.js"),__vite__mapDeps([1271,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>因为我们操作数据都是要开启事务的，那么我们每次都写有点麻烦，不如直接使用一个Action过滤器来实现AOP自动开启事务。</p>
<p>关于TransactionScope的简单说明：
当一段代码使用EFCore进行数据操作的代码放到TransactionScope声明的范围中的时候，这段代码会自动被标记为“支持事务”。
TransactionScope实现了一个IDisposable接口，如果一个TransactionScope的对象没有调用Complete()就执行了Dispose()方法，则事务会被回滚，否则事务会就被提交。并且TransactionScope还支持嵌套式事务。</p>`,r:{minutes:1.34,words:401},t:"过滤器实现-自动事务处理",y:"a"}}],["/dotnet/base/pipeline/filter/netfguolvqishili.html",{loader:()=>a(()=>import("./netfguolvqishili.html-Dax0mzj4.js"),__vite__mapDeps([1272,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>授权过滤器</h2>
<p>我们不一定要用MVC默认的Authorize授权验证规则，规则可以自己来定，自定义授权过滤器可以继承AuthorizeAttribute这个类，这个类里面有两个方法是要重写的bool AuthorizeCore(HttpContextBase httpContext)：这里主要是授权验证的逻辑处理，返回true的则是通过授权，返回了false则不是。void HandleUnauthorizedRequest(AuthorizationContext filterContext)：这个方法是处理授权失败的事情。
这里就定义了一个比较奇偶数的授权处理器，当请求的时候刚好是偶数分钟的，就通过可以获得授权，反之则不通过。当授权失败的时候，就会跳转到登陆页面了。</p>`,r:{minutes:1.1,words:329},t:"NetF过滤器示例",y:"a"}}],["/dotnet/base/pipeline/filter/",{loader:()=>a(()=>import("./index.html-BS71p_6B.js"),__vite__mapDeps([1273,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>过滤器就是对目标对象(程序集、类、方法等)进行扩展，使得在运行时可以获取到被扩展对象的额外的信息，通过额外的信息来影响目标对象的行为。</p>
<p>ASP.NET Core 有以下五种Filter 可以使用：
<img src="/common/1642519363735-1190ff23-6482-48c4-b121-eec954526d33.png" alt="image.png" loading="lazy">
<strong>中间件和过滤器的功能类似，区别就是关注点是不同的，所要处理的职责不同，过滤器是更贴合业务的，关注应用程序本身</strong>（可以对你请求的数据或者返回的结果进行处理操作，中间件是没有这个能力的），中间件都可以在请求之前和之后进行操作。请求完成之后传递给下一个请求，可以完成很多相似的功能，比如异常处理、限流处理。</p>`,r:{minutes:12.02,words:3606},t:"说明",y:"a"}}],["/dotnet/base/yilaizhuru/autofac/autofac.html",{loader:()=>a(()=>import("./autofac.html-C2QAp7ni.js"),__vite__mapDeps([1274,1])),meta:{a:"azrng",d:16650144e5,l:"2022年10月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Autofac是一个第三方的IOC容器，管理类之间的依赖关系，使得应用程序随着大小和复杂性的增长而保持易于更改的状态。</p>
<h2>基础配置</h2>
<h3>老版本(.net6前)</h3>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Autofac"</span> Version<span class="token operator">=</span><span class="token string">"6.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Autofac.Extensions.DependencyInjection"</span> Version<span class="token operator">=</span><span class="token string">"7.1.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:5.26,words:1579},t:"Autofac",y:"a"}}],["/dotnet/base/yilaizhuru/autofac/shengmingzhouji.html",{loader:()=>a(()=>import("./shengmingzhouji.html-BFzOcA31.js"),__vite__mapDeps([1275,1])),meta:{a:"azrng",d:16616448e5,l:"2022年8月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>瞬时生命周期</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//每次获取对象都是一个全新的实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> containerBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContainerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
containerBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> containerBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> serviceA <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取服务</span>
<span class="token class-name"><span class="token keyword">var</span></span> serviceB <span class="token operator">=</span> container<span class="token punctuation">.</span>Resoq
</code></pre></div>`,r:{minutes:1.3,words:389},t:"生命周期",y:"a"}}],["/dotnet/base/yilaizhuru/autofac/zhichiaop.html",{loader:()=>a(()=>import("./zhichiaop.html-BinxghbT.js"),__vite__mapDeps([1276,1])),meta:{a:"azrng",d:16240608e5,l:"2021年6月19日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>在不用修改之前代码的基础上，可以动态在某一动作之前加上一些操作，动态在某一个动作之后做一些操作</p>
<ul>
<li>引用包Autofac.Extras.DynamicProxy</li>
<li>在服务上标记[Intercept(typeof(CustomAutofacAop))]</li>
<li>注册支持Aop的扩展类
<ul>
<li>containerBuilder.RegisterType(typeof(CustomAutofacAop));</li>
</ul>
</li>
</ul>
<h2>通过接口实现Aop</h2>
<h3>创建接口</h3>`,r:{minutes:1.31,words:393},t:"支持AOP",y:"a"}}],["/dotnet/base/pipeline/middleware/",{loader:()=>a(()=>import("./index.html-D6Qi2GQF.js"),__vite__mapDeps([1277,1])),meta:{a:"azrng",d:16811712e5,l:"2023年4月11日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>注入到应用程序中处理请求和响应的组件，是通过多个委托来嵌套成型的一个俄罗斯套娃，也想一层层的“滤网”，过滤所有的请求和响应。
1.选择是否将http请求传递给管道中的下个组件。
2.可以在管道中的下个组件之前和之后执行工作。
在ASP.NET Core 中一个中间件组件只做一个特定的事情。
直观的感觉：中间件是http请求管道中的一层层的AOP扩展。</p>
<p>整个HTTP Request请求跟HTTP Response返回结果之间的处理流程是一个<strong>请求管道（request pipeline）</strong>。而**中间件(middleware)**则是一种装配到请求管道以处理请求和响应的组件。每个组件：<br>
●<strong>可选择是否将请求传递到管道中的下一个组件。</strong><br>
●<strong>可在管道中的下一个组件前后执行工作。</strong><br>
中间件（middleware）处理流程如下图所示：<br>
<img src="/common/1610504420615-46cb846d-a818-4cee-a6b3-b2c5d49bfb41.png" alt="image.png" loading="lazy"><br>
每个请求委托（中间件）都可以在下一个请求委托（中间件)之前和之后执行操作。中间件中的异常处理委托应该在管道的早起被处理，这样子就可以捕捉在管道后期发生的异常。</p>`,r:{minutes:4.11,words:1233},t:"说明",y:"a"}}],["/dotnet/base/pipeline/middleware/shuchuzhihangzhongjianjian.html",{loader:()=>a(()=>import("./shuchuzhihangzhongjianjian.html-BsTLaB4z.js"),__vite__mapDeps([1278,1])),meta:{a:"azrng",d:1687824e6,l:"2023年6月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>输出都执行了哪些中间件</p>
<h2>操作</h2>
<h3>安装nuget包</h3>
<p>需要添加两个Nuget包分别是：Microsoft.AspNetCore.MiddlewareAnalysis和Microsoft.Extensions.DiagnosticAdapter，前者是分析记录中间件核心代码实现后者是用来接收日志输出的，由于是用的DiagnosticSource方式记录日志，所以需要使用DiagnosticListener对象的SubscribeWithAdapter方法来订阅。</p>
<h3>实现分析诊断适配器</h3>
<p>这个适配器是为了方便我们把从DiagnosticSource接收到的日志对象输出到控制台，具体代码实现如下</p>`,r:{minutes:1.51,words:452},t:"输出执行中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/zhongjianjiandiaoyongshunxuhepiliangzhuce.html",{loader:()=>a(()=>import("./zhongjianjiandiaoyongshunxuhepiliangzhuce.html-BcMbhzYH.js"),__vite__mapDeps([1279,1])),meta:{a:"azrng",d:16811712e5,l:"2023年4月11日",c:["dotNET"],g:["无"],o:!0,e:`<h2>开篇语</h2>
<p>ASP.NET Core 请求管道包含一系列请求委托，依次调用。而调用顺序实际上就是我们在Startup.cs中注册（使用UseMiddlewareExtensions.UseMiddleware方法）它们的顺序。不过如果直接频繁去修改Startup类，那么使得代码比较凌乱，可读性比较差。</p>
<h2>操作</h2>
<p>通过反射获取指定的中间件然后实现有序批量注册</p>
<h3>编写自定义特性</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareRegisterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 注册顺序</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Sort <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.16,words:648},t:"中间件调用顺序和批量注册",y:"a"}}],["/dotnet/base/yilaizhuru/iockongzhifanzhuai/iockongzhifanzhuai.html",{loader:()=>a(()=>import("./iockongzhifanzhuai.html-DOF2kK-E.js"),__vite__mapDeps([1280,1])),meta:{a:"azrng",d:16689024e5,l:"2022年11月20日",c:["dotNET"],g:["无"],o:!0,e:`<h2>什么是IOC？</h2>
<p>控制反转英文翻译是Inversion Of Control缩写为IOC，<strong>控制反转是一种笼统的思想</strong>，并不是一种具体的实现技巧，调用方通过依赖接口或者抽象类，减少耦合将控制权交给服务容器，由容器维护注册项，并将具体的实现动态注入到调用方，而依赖注入是一种设计模式。<strong>通过工厂去创建对象</strong>。</p>
<p>“控制”：对程序执行流程的控制。
“反转”：流程的控制权发生了反转，比如在没有使用框架之前，程序员自己控制整个程序的执行，在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p>`,r:{minutes:1.72,words:517},t:"IOC控制反转",y:"a"}}],["/dotnet/base/yilaizhuru/iockongzhifanzhuai/iocrongqiyuanma.html",{loader:()=>a(()=>import("./iocrongqiyuanma.html-BNaDu-jp.js"),__vite__mapDeps([1281,1])),meta:{a:"azrng",d:16975008e5,l:"2023年10月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>创建IOC工厂</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 创建一个ioc工厂</span>
<span class="token doc-comment comment">/// 1.创建对象</span>
<span class="token doc-comment comment">/// 2.存储对象</span>
<span class="token doc-comment comment">/// 3.对象属性赋值</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultIOCFactory</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// ioc容器（存储对象）</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> _iocContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不用list的原因是性能不如dictionary</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// ico type容器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> _iocTypeContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 创建ioc容器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token function">DefaultIOCFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//1.加载项目中的所有类型(反射类型的集合)</span>
		<span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"ConsoleApp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//2.通过反射从程序集获取对象类型</span>
		<span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//存储type</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> types<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> iocService <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOCService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>iocService <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				_iocTypeContainer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//3.创建对象  改为需要的时候再创建</span>

		<span class="token preprocessor property">#<span class="token directive keyword">region</span> 老方法</span>

		<span class="token comment">//foreach (var type in types)</span>
		<span class="token comment">//{</span>
		<span class="token comment">//    object _object = Activator.CreateInstance(type);//创建对象</span>

		<span class="token comment">//    //3.1 对象属性赋值</span>
		<span class="token comment">//    var propertyInfos = type.GetProperties();</span>
		<span class="token comment">//    foreach (var propertyInfo in propertyInfos)</span>
		<span class="token comment">//    {</span>
		<span class="token comment">//        foreach (var type1 in types)</span>
		<span class="token comment">//        {</span>
		<span class="token comment">//            if (type1.Name.Equals(propertyInfo.Name))</span>
		<span class="token comment">//            {</span>
		<span class="token comment">//                object _objectValue = Activator.CreateInstance(type1);</span>
		<span class="token comment">//                propertyInfo.SetValue(_object, _objectValue);</span>

		<span class="token comment">//                //到这一步正常的流程已经结束，但是如果属性里面这个类里面还有属性，那么就需要接着查找，所以这个时候应该使用递归方法</span>
		<span class="token comment">//            }</span>
		<span class="token comment">//        }</span>
		<span class="token comment">//    }</span>

		<span class="token comment">//    //3.2 存储对象</span>
		<span class="token comment">//    _iocContainer.Add(type.Name, _object);</span>
		<span class="token comment">//}</span>

		<span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

		<span class="token comment">//因为涉及到类里面用到了其他类，其他类又用到了其他类，所以这个时候需要递归去创建</span>
		<span class="token comment">//foreach (var type in types)</span>
		<span class="token comment">//{</span>
		<span class="token comment">//    //递归创建</span>
		<span class="token comment">//    object _object = CreateObject(type);</span>
		<span class="token comment">//    //存储对象</span>
		<span class="token comment">//    _iocContainer.Add(type.Name, _object);</span>
		<span class="token comment">//}</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 使用对象的时候创建对象</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>serviceName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> serviceName<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> _iocTypeContainer<span class="token punctuation">[</span>serviceName<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">//3.1 递归创建</span>
		<span class="token class-name"><span class="token keyword">object</span></span> _object <span class="token operator">=</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//3.2 存储对象</span>
		_iocContainer<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> _object<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> _object<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token preprocessor property">#<span class="token directive keyword">region</span> 私有方法</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 两个工具</span>
	<span class="token doc-comment comment">/// 1.抽取代码里面通用的逻辑</span>
	<span class="token doc-comment comment">/// 2.在通用的代码逻辑里面抽取通用的参数</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>types<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>_iocContainer<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> _iocContainer<span class="token punctuation">[</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//创建对象</span>
		<span class="token class-name"><span class="token keyword">object</span></span> _object <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>

		<span class="token comment">//3.1 对象属性赋值</span>
		<span class="token class-name"><span class="token keyword">var</span></span> propertyInfos <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> propertyInfo <span class="token keyword">in</span> propertyInfos<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//foreach (var type1 in types)</span>
			<span class="token comment">//{</span>
			<span class="token comment">//    if (type1.Name.Equals(propertyInfo.Name))</span>
			<span class="token comment">//    {</span>
			<span class="token comment">//        var _objectValue = CreateService(type1, types);</span>
			<span class="token comment">//        propertyInfo.SetValue(_object, _objectValue);</span>
			<span class="token comment">//    }</span>
			<span class="token comment">//}</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>propertyInfo<span class="token punctuation">.</span>PropertyType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>

			<span class="token class-name"><span class="token keyword">var</span></span> type1 <span class="token operator">=</span> _iocTypeContainer<span class="token punctuation">[</span>propertyInfo<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>Name<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> _objectValue <span class="token operator">=</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>
			propertyInfo<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>_object<span class="token punctuation">,</span> _objectValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> _object<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>
</code></pre></div>`,r:{minutes:2.6,words:779},t:"IOC容器源码",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/morenyilaizhuru.html",{loader:()=>a(()=>import("./morenyilaizhuru.html-D-qppOyM.js"),__vite__mapDeps([1282,1])),meta:{a:"azrng",d:16970688e5,l:"2023年10月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>不应该依赖于具体的实现，应该依赖于抽象，高层模块不应该依赖于底层模块，二者应该依赖于抽象(否则业务变更，改动比较大)。简单的说就是为了更好的解耦。而控制反转(Ioc)就是这样的原则的其中一个实现思路, 这个思路的其中一种实现方式就是依赖注入(DI)。(官方原话：依赖注入(DI)这是一种在类和依赖项之间实现控制反转(Ioc)的技术)，
dotNet内置有对依赖注入(DI)的支持，提供了一个内置的服务容器IServiceProvider，程序在启动时候我们预先将服务注册不同生命周期到ServiceCollection，然后利用ServiceCollection来创建ServiceProvider，利用后者提供服务实例，将服务注入到使用到它的类的构造函数中。</p>`,r:{minutes:8.75,words:2624},t:"默认依赖注入",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html",{loader:()=>a(()=>import("./shengmingzhoujiceshi.html-B5GTMG1z.js"),__vite__mapDeps([1283,1])),meta:{a:"azrng",d:16660512e5,l:"2022年10月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<ul>
<li>依赖注入只负责由其创建的对象实例</li>
<li>容器或者子容器释放的时候，会释放由其创建的对象实例。</li>
</ul>
<p>推荐使用容器来来管理我们的对象的创建和释放。</p>
<table>
<thead>
<tr>
<th><strong>--</strong></th>
<th><strong>---</strong></th>
<th><strong>---</strong></th>
<th><strong>---</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Singleton</td>
<td>单例</td>
<td>服务容器首次请求会创建，后续都使用同一实例</td>
<td>AddSingleton</td>
</tr>
<tr>
<td>Scoped</td>
<td>特定范围</td>
<td>在一个请求(连接)时被创建一次实例，生命周期横贯整次请求</td>
<td>AddScoped</td>
</tr>
<tr>
<td>Transient</td>
<td>瞬时</td>
<td>服务容器每次请求，都会创建一个实例，适合轻量级、无状态服务</td>
<td>AddTransient</td>
</tr>
</tbody>
</table>`,r:{minutes:4.36,words:1309},t:"生命周期测试",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/zhuceduogeshixian.html",{loader:()=>a(()=>import("./zhuceduogeshixian.html-DuHoOh8o.js"),__vite__mapDeps([1284,1])),meta:{a:"azrng",d:16970688e5,l:"2023年10月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>基础配置</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"aaaaa"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceB</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"bbbbbb"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.68,words:204},t:"注册多个实现",y:"a"}}],["/dotnet/buildAndRelease/release/iis/errorCode.html",{loader:()=>a(()=>import("./errorCode.html-B6qJ5otS.js"),__vite__mapDeps([1285,1])),meta:{a:"azrng",d:16821216e5,l:"2023年4月22日",c:["dotNET"],g:["无"],o:!0,e:`<h3>500</h3>
<p><img src="/common/1609562546531-edab0ee4-2749-46d6-8b47-a9b8282f40bf.png" alt="image.png" loading="lazy">
应用池高级配置 - 启动32位应用程序 - 设置为True
方法2：
web.config&nbsp;
&nbsp;&lt;aspNetCore processPath="%LAUNCHER_PATH%" arguments="%LAUNCHER_ARGS%" stdoutLogEnabled="false" stdoutLogFile=".\\logs\\stdout" forwardWindowsAuthToken="false" startupTimeLimit="3600" requestTimeout="23:00:00" <strong>hostingModel="InProcess"</strong>&gt;
删除&nbsp;hostingModel="InProcess"</p>`,r:{minutes:1.26,words:377},t:"错误码",y:"a"}}],["/dotnet/buildAndRelease/release/iis/iisReleaseNet5.html",{loader:()=>a(()=>import("./iisReleaseNet5.html-Bp5zAGk2.js"),__vite__mapDeps([1286,1])),meta:{a:"azrng",d:16821216e5,l:"2023年4月22日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Internet Information Services (IIS) 是一种灵活、安全且可管理的 Web 服务器，用于托管 Web 应用（包括 ASP.NET Core）。虽然我们的程序可以跨平台了，不过还是有些服务是部署在windows服务器下的，下面我们就从头开始部署下我们的程序到IIS.</p>
<blockquote>
<p>本次示例环境：Windows Server 2012 R2 、vs2019、MySQL、.net5</p>
</blockquote>
<h2>安装环境</h2>
<h3>支持平台</h3>
<ul>
<li>Windows 7 或更高版本</li>
<li>Windows Server 2012 R2 或更高版本</li>
</ul>`,r:{minutes:3.72,words:1116},t:"IIS部署.Net5",y:"a"}}],["/dotnet/buildAndRelease/release/iis/issue.html",{loader:()=>a(()=>import("./issue.html-tSF0x3kc.js"),__vite__mapDeps([1287,1])),meta:{a:"azrng",d:16095456e5,l:"2021年1月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>部署</h2>
<p>托管方式：
进程外：IIS工作进程(w3wp.exe)托管
进程内：自托管web服务器(Kestrel)</p>
<figure><img src="/common/1609562353775-e3df218a-3e64-4a54-b05c-a4189cf8c036.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<figure><img src="/common/1609562353796-5e1ff8cd-3401-4ca7-83d0-284daabbbc8b.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,r:{minutes:1.76,words:529},t:"问题",y:"a"}}],["/dotnet/buildAndRelease/release/iis/serverRelease.html",{loader:()=>a(()=>import("./serverRelease.html-B24NRLxh.js"),__vite__mapDeps([1288,1])),meta:{a:"azrng",d:16425504e5,l:"2022年1月19日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>不用iis，仅仅将程序以服务的形式部署，那么我们需要安装Microsoft.AspNetCore.Hosting.WindowsServices组件</p>
<h2>文档</h2>
<p><a href="https://www.cnblogs.com/yaopengfei/p/10733772.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/yaopengfei/p/10733772.html</a></p>
`,r:{minutes:.22,words:65},t:"服务形式部署",y:"a"}}],["/dotnet/buildAndRelease/release/linux/anzhuanghuanjing.html",{loader:()=>a(()=>import("./anzhuanghuanjing.html-D9H0uDVt.js"),__vite__mapDeps([1289,1])),meta:{a:"azrng",d:16397856e5,l:"2021年12月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>添加yum源</h2>
<p>1、如果是新环境，需要我们手动将 Microsoft 包签名密钥添加到受信任密钥列表，并添加 Microsoft 包存储库。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>rpm <span class="token operator">-</span><span class="token class-name">Uvh</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>packages<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>com<span class="token operator">/</span>config<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>rpm
</code></pre></div>`,r:{minutes:.68,words:204},t:"安装环境",y:"a"}}],["/dotnet/buildAndRelease/release/linux/bushujiaoben.html",{loader:()=>a(()=>import("./bushujiaoben.html-DXpYjfOj.js"),__vite__mapDeps([1290,1])),meta:{a:"azrng",d:1651536e6,l:"2022年5月3日",c:["dotNET"],g:["无"],o:!0,e:`<h2>发布脚本</h2>
<p>Blog.IdentityServer.Publish.Linux.sh</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">git</span> pull<span class="token punctuation">;</span>
rm <span class="token operator">-</span>rf <span class="token punctuation">.</span>PublishFiles<span class="token punctuation">;</span>
<span class="token class-name">dotnet</span> build<span class="token punctuation">;</span>
dotnet publish <span class="token operator">-</span>o <span class="token operator">/</span>home<span class="token operator">/</span>Blog<span class="token punctuation">.</span>IdentityServer<span class="token operator">/</span>Blog<span class="token punctuation">.</span>IdentityServer<span class="token operator">/</span>bin<span class="token operator">/</span>Debug<span class="token operator">/</span>netcoreapp3<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">;</span>
cp <span class="token operator">-</span>r <span class="token operator">/</span>home<span class="token operator">/</span>Blog<span class="token punctuation">.</span>IdentityServer<span class="token operator">/</span>Blog<span class="token punctuation">.</span>IdentityServer<span class="token operator">/</span>bin<span class="token operator">/</span>Debug<span class="token operator">/</span>netcoreapp3<span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">.</span>PublishFiles<span class="token punctuation">;</span>
echo <span class="token string">"Successfully!!!! ^ please see the file .PublishFiles"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.44,words:133},t:"部署脚本",y:"a"}}],["/dotnet/buildAndRelease/release/linux/bushuliuchengheshouhujincheng.html",{loader:()=>a(()=>import("./bushuliuchengheshouhujincheng.html-BGSfYBRu.js"),__vite__mapDeps([1291,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>1. 前言</h2>
<p>本文是一个在centos系统部署.Net6的文章，本来内容基本上来源于作者艾三元，目的是对部署流程的一次熟悉以及对守护进程的一次学习。</p>
<blockquote>
<p>本文示例环境：centos7、VS2022、.Net6</p>
</blockquote>
<h2>2. 准备</h2>
<p>Linux服务器：通过Hyper-v启动的虚拟机(已经写有教程了)，系统使用CentOS-7-x86_64-Minimal-2009.iso
dotNet6程序：<a href="https://gitee.com/AZRNG/my-example" target="_blank" rel="noopener noreferrer">https://gitee.com/AZRNG/my-example</a>  master分支
因为我这是一台新的centos7服务器，所以我先手动将 Microsoft 包签名密钥添加到受信任密钥列表，并添加 Microsoft 包存储库。</p>`,r:{minutes:6.33,words:1900},t:"部署流程和守护进程",y:"a"}}],["/dotnet/buildAndRelease/release/linux/centosbushuwebxiangmu.html",{loader:()=>a(()=>import("./centosbushuwebxiangmu.html-DUu3xwMx.js"),__vite__mapDeps([1292,1])),meta:{a:"azrng",d:16605216e5,l:"2022年8月15日",c:["dotNET"],g:["无"],o:!0,e:`<p>首先要安装好netcore运行环境
现在我们已经发布好了项目，并且压缩为tar格式
<img src="/common/1614391773548-22ed7b2d-b418-435d-aae7-869f758788ea.png" alt="image.png" loading="lazy">
创建netcore文件夹
命令：mkdir netcore
上传到netcore目录下，使用rz
<img src="/common/1614391773546-005b786b-9868-41a6-8c8b-888682d943ea.png" alt="image.png" loading="lazy">
然后解压到当前目录
命令：tar -xvf TestNetcore3.tar
<img src="/common/1614391773557-d1bbbcb7-7a90-428c-b22a-cb60c024277c.png" alt="image.png" loading="lazy">
查看目录
<img src="/common/1614391773548-a73efcfc-6865-48ab-85ed-4f35b964f4a4.png" alt="image.png" loading="lazy">
现在我们进入到TestNetcore3文件夹里面去运行项目
<img src="/common/1614391773546-2840406d-3c79-45c0-862a-64d08f60a502.png" alt="image.png" loading="lazy">
或者是
没有错误，但是也没有上面监听的东西
然后去内部访问一下这个端口
<img src="/common/1614391773566-3aa148a5-2cb5-4af5-951f-ad22de23fc2f.png" alt="image.png" loading="lazy">
是我们刚才创建的项目，那么我们外部访问下
访问不同，这个时候我们应该使用Nginx
安装步骤：
第一步：sudo yum install epel-release
第二步：sudo yum install nginx
第三步：启动 sudo systemctl start nginx
设置nginx开始启动：systemctl enable nginx
第一步：sudo yum install epel-release
第二步：sudo yum install nginx
第三步：启动 sudo systemctl start nginx
设置nginx开始启动：systemctl enable nginx
其他命令：
systemctl disable nginx&nbsp;&nbsp; #禁止开机启动
systemctl status nginx&nbsp;&nbsp;&nbsp;&nbsp; #查看运行状态
systemctl restart nginx&nbsp;&nbsp;&nbsp; #重启服务
在浏览器上输入Nginx所在服务器的IP地址，可以看到欢迎页表示安装成功，如果无法访问可以检查下安装Nginx步骤或者防火墙之类的。
If you are running a firewall, run the following commands to allow HTTP and HTTPS traffic:
如果有运行防火墙，那需要允许http和https的通道访问，运行下面三个命令：
sudo firewall-cmd --permanent --zone=public --add-service=http&nbsp;
sudo firewall-cmd --permanent --zone=public --add-service=https
sudo firewall-cmd --reload
<img src="/common/1614391797355-50bc7202-eb28-4d57-85e0-014f7ea5c49c.png" alt="image.png" loading="lazy">
下一步我们需要去监听5000端口
当前我们是在root文件夹下，我们需要进入etc/nginx目录，所以我们需要先访问上层
<img src="/common/1614391797353-a5c7dd32-100a-42af-9311-351b43ed5204.png" alt="image.png" loading="lazy">
然后进入指定的目录文件夹中
命令：cd&nbsp; /etc/nginx
<img src="/common/1614391797355-ec66fd0c-7805-441f-8963-bc353cb06c66.png" alt="image.png" loading="lazy">
进入conf.d
命令：cd conf.d/
<img src="/common/1614391797346-6cc9f8f1-cb7f-4cc6-94f5-689c90784982.png" alt="image.png" loading="lazy">
Netcore.conf是我们的第一个网站，现在我们需要重新创建一个
<img src="/common/1614391797349-745ea01d-2ed4-48da-b58d-2b86e9795887.png" alt="image.png" loading="lazy">
然后编辑netcore2.conf，使用vim编辑，可能需要安装（yum -y install vim）
<img src="/common/1614391797355-8ddba0e0-8a37-4eef-a057-8bf749378524.png" alt="image.png" loading="lazy">
在里面加入：</p>`,r:{minutes:2.47,words:742},t:"Centos部署web项目",y:"a"}}],["/dotnet/buildAndRelease/release/linux/linuxbushu.html",{loader:()=>a(()=>import("./linuxbushu.html-D9kgpnW1.js"),__vite__mapDeps([1293,1])),meta:{a:"azrng",d:16629408e5,l:"2022年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>设置反向代理</h2>
<p>linux中使用nginx反向代理的配置文件：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>server<span class="token punctuation">{</span>
	listen <span class="token number">80</span><span class="token punctuation">;</span>
	<span class="token comment">//server_name   example.com *.example.com;</span>
	location <span class="token operator">/</span> <span class="token punctuation">{</span>
	<span class="token class-name">proxy_pass</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">;</span>
	proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
	proxy_set_header Upgrade $http_upgrade<span class="token punctuation">;</span>
	proxy_set_header Connection keep<span class="token operator">-</span>alive<span class="token punctuation">;</span>
	proxy_set_header Host $host<span class="token punctuation">;</span>
	proxy_cache_bypass $http_upgrade<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.84,words:252},t:"Linux部署",y:"a"}}],["/dotnet/buildAndRelease/release/linux/shouhujincheng.html",{loader:()=>a(()=>import("./shouhujincheng.html-CvKLyHuM.js"),__vite__mapDeps([1294,1])),meta:{a:"azrng",d:16314048e5,l:"2021年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<p>守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端中都显示并且不会被任何终端所干扰。它从被执行的时候开始，结束于系统关闭。
使用目的：为了让我们的程序在异常或者电脑重启的时候仍可以正常访问。
&nbsp;
现在我们将使用supervisor来管理进程，理由就是官方推荐，并且文档全
在linux中操作
安装supervisor
命令：yum install supervisor
安装完成之后，在&nbsp;/ect/supervisor/conf.d/&nbsp;目录下新建一个配置文件（touch HelloWebApp.conf），取名为&nbsp;HelloWebApp.conf
打开HelloWebApp.conf （vim HelloWebApp.conf），写入如下命令
[program:HelloWebApp]
command=dotnet HelloWebApp.dll&nbsp; #要执行的命令
directory=/home/yxd/Workspace/publish #命令执行的目录
environment=ASPNETCORE__ENVIRONMENT=Production #环境变量
user=www-data&nbsp; #进程执行的用户身份
stopsignal=INT
autostart=true #是否自动启动
autorestart=true #是否自动重启
startsecs=1 #自动重启间隔
stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志
stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志
&nbsp;
&nbsp;
配置好以后 (:wq保存退出)，需要重新加载一下配置
&nbsp;
sudo supervisorctl shutdown &amp;&amp; sudo supervisord -c /etc/supervisor/supervisord.conf
&nbsp;
或者你可以直接重启 Supervisor：
&nbsp;
sudo service supervisor stop
sudo service supervisor start
如果启动的时候报错，可以打开位于/etc/log/supervisor/supervisord.log文件来查看具体的日志。
&nbsp;
其中dotnet 命令输出的日志文件分别为位于
&nbsp;
/var/log/HelloWebApp.err.log
/var/log/HelloWebApp.out.log
在这些文件里面你可以查看程序中的异常信息或者是运行信息。
&nbsp;
打开浏览器，输入 <a href="http://localhost:5000" target="_blank" rel="noopener noreferrer">http://localhost:5000</a> 发现已经可以浏览了。
&nbsp;
Supervisor 常用命令
supervisorctl shutdown #关闭所有任务
supervisorctl stop|start program_name
supervisorctl status #查看所有任务状态
&nbsp;
&nbsp;
&nbsp;
文档地址：
<a href="https://www.cnblogs.com/qtiger/p/13853828.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/qtiger/p/13853828.html</a>
<a href="https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html</a></p>`,r:{minutes:1.97,words:590},t:"守护进程",y:"a"}}],["/dotnet/buildAndRelease/release/linux/supervisor.html",{loader:()=>a(()=>import("./supervisor.html-BwipmA99.js"),__vite__mapDeps([1295,1])),meta:{a:"azrng",d:1641168e6,l:"2022年1月3日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Supervisor是一个进程管理工具，当进程中断的时候Supervisor能自动重新启动它。可以运行在各种类unix的机器上，supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</p>
<h2>安装</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> supervisor
</code></pre></div>`,r:{minutes:10.31,words:3093},t:"Supervisor",y:"a"}}],["/dotnet/buildAndRelease/release/linux/ubuntuReleaseNet.html",{loader:()=>a(()=>import("./ubuntuReleaseNet.html-BnOD_jXL.js"),__vite__mapDeps([1296,1])),meta:{a:"azrng",d:16629408e5,l:"2022年9月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>在Ubuntu上部署.Net程序进行测试。</p>
<h2>环境准备</h2>
<h3>安装Ubuntu</h3>
<p>有其他文章介绍</p>
<blockquote>
<p>该服务器需要能外网访问</p>
</blockquote>
<h3>安装.Net环境</h3>
<p>要安装.Net环境就需要运行以下命令将 Microsoft 包签名密钥添加到您的受信任密钥列表中并添加包存储库。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">wget</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>packages<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>com<span class="token operator">/</span>config<span class="token operator">/</span>ubuntu<span class="token operator">/</span><span class="token number">22.04</span><span class="token operator">/</span>packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>deb <span class="token operator">-</span>O packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>deb
sudo dpkg <span class="token operator">-</span>i packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>deb
rm packages<span class="token operator">-</span>microsoft<span class="token operator">-</span>prod<span class="token punctuation">.</span>deb
</code></pre></div>`,r:{minutes:4.01,words:1202},t:"Ubuntu部署.Net以及配置守护进程",y:"a"}}],["/dotnet/buildAndRelease/release/releaseTools/nssm.html",{loader:()=>a(()=>import("./nssm.html-B4xAcvu9.js"),__vite__mapDeps([1297,1])),meta:{a:"azrng",d:16758144e5,l:"2023年2月8日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>nssm是非入侵的这种方式，一个工具，直接把你console或者webapi转为winserver。</p>
`,r:{minutes:.17,words:52},t:"NSSM",y:"a"}}],["/dotnet/commonNuget/xianliu/qingqiuxianzhi/guanfangqingqiuxianzhizhongjianjian.html",{loader:()=>a(()=>import("./guanfangqingqiuxianzhizhongjianjian.html-DcEFlhdX.js"),__vite__mapDeps([1298,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>微软在.Net7中提供了官方的限流中间件</p>
<h2>注册限流策略</h2>
<p>因为是大于等于.Net7版本内置的，所以在这些版本不需要安装nuget包，然后直接可以使用AddRateLimiter扩展方法来注册限流服务并添加限流策略，然后使用UseRateLimiter来启用限流中间件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>limiterOptions <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 配置限流策略</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">"LimitTest"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Limiter"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireRateLimiting</span><span class="token punctuation">(</span><span class="token string">"my_policy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.79,words:836},t:"官方请求限制中间件",y:"a"}}],["/dotnet/commonNuget/xianliu/qingqiuxianzhi/qingqiuxianzhichuangkousuanfa.html",{loader:()=>a(()=>import("./qingqiuxianzhichuangkousuanfa.html-BF9_Mszs.js"),__vite__mapDeps([1299,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>在实际项目中，为了保障服务器的稳定运行，需要对接口的可访问频次进行限流控制，避免因客户端频繁请求导致服务器压力过大。所以我们会进行限制一分钟或者一段时间内只能请求多少次，常见的是固定窗口算法。</p>
<p>也可以直接使用网上开源的组件来实现</p>
<p>令牌桶算法和漏斗算法
<a href="https://www.yuque.com/docs/share/9f6d29ab-4a8a-4aa9-9d41-2b2b5512a4cf?view=doc_embed" target="_blank" rel="noopener noreferrer">限流</a></p>`,r:{minutes:3.82,words:1147},t:"请求限制窗口算法",y:"a"}}],["/dotnet/csharp/jigecaozuo/gonggonglei/fenxiechuli.html",{loader:()=>a(()=>import("./fenxiechuli.html-_I68xZ0f.js"),__vite__mapDeps([1300,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>处理集合分页的情况</p>
<h2>操作</h2>
<h3>公共类</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// List分页处理</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPage<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 页数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PageCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前页码</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CurrPage <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 一页多少条</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PageSize <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 数据源信息</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> DataSource <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取数据源和一页多少</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PageSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">ListPage</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> List<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> PageSize <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> CurrPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        DataSource <span class="token operator">=</span> List<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>PageSize <span class="token operator">=</span> PageSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>PageCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">decimal</span><span class="token punctuation">)</span>DataSource<span class="token punctuation">.</span>Count <span class="token operator">/</span> PageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>CurrPage <span class="token operator">=</span> CurrPage<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">//是否有下一页</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> HasNextPage
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> CurrPage <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PageCount<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 直接获取下一页</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">NextPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> DataSource<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CurrPage<span class="token punctuation">)</span> <span class="token operator">*</span> PageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>PageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CurrPage<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取指定页</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> CurrPage<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> DataSource<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CurrPage<span class="token punctuation">)</span> <span class="token operator">*</span> PageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>PageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.12,words:336},t:"分页处理",y:"a"}}],["/dotnet/csharp/jigecaozuo/gonggonglei/piliangchulijige.html",{loader:()=>a(()=>import("./piliangchulijige.html-Dq4Q-MoG.js"),__vite__mapDeps([1301,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>当需要批量处理一定数量的队列数据，而不是一个一个处理的时候，就需要来通过自定义来实现批量处理。</p>
<h2>操作</h2>
<h3>公共类</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 任务队列接口</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITaskQueue<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 增加一个对象</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取一个分组队列</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否阻塞增加</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsWaitAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前队列完成</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 任务队列</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskQueue<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITaskQueue<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 内置队列</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _taskQueues<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 分区大小</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _partitionSize<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 默认index为0</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _index<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 默认处理偏移</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _offSet<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 内置锁</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">object</span></span> _lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PartitionSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>分区大小，默认分区大小为10 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">TaskQueue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> PartitionSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _taskQueues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_partitionSize <span class="token operator">=</span> PartitionSize<span class="token punctuation">;</span>
        <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _taskQueues<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>_index<span class="token punctuation">,</span> ts<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 增加一个对象</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_taskQueues<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>_index<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> ts<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ts<span class="token punctuation">.</span>Count <span class="token operator">&lt;</span> _partitionSize<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ts<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _taskQueues<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>_index<span class="token punctuation">,</span> ts<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token comment">//超出区域范围，则新建区</span>
                <span class="token punctuation">{</span>
                    _index<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> ts1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
                    <span class="token punctuation">{</span>
                        t
                    <span class="token punctuation">}</span><span class="token punctuation">;</span>
                    _taskQueues<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>_index<span class="token punctuation">,</span> ts1<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ts1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> ts1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    t
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                _taskQueues<span class="token punctuation">.</span><span class="token function">AddOrUpdate</span><span class="token punctuation">(</span>_index<span class="token punctuation">,</span> ts1<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ts1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取一个分组队列</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">GetQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_taskQueues<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>_offSet<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> ts<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>_offSet <span class="token operator">==</span> _index<span class="token punctuation">)</span><span class="token comment">//如果直接获取一个能用的，那就新建区为新区</span>
                <span class="token punctuation">{</span>
                    _index<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> ts<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否阻塞增加</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsWaitAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _offSet <span class="token operator">!=</span> _index<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前队列完成</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _taskQueues<span class="token punctuation">.</span><span class="token function">TryRemove</span><span class="token punctuation">(</span>_offSet<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">IList<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> ts<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_offSet <span class="token operator">&lt;</span> _index<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _offSet<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_taskQueues <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _taskQueues<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _taskQueues <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.81,words:844},t:"批量处理集合",y:"a"}}],["/dotnet/csharp/jigecaozuo/kuozhan/arraypoolMemorypool.html",{loader:()=>a(()=>import("./arraypoolMemorypool.html-DR5CHoeB.js"),__vite__mapDeps([1302,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<blockquote>
<p>参考文档：<a href="https://mp.weixin.qq.com/s/u3Ve-zeR0GymxDKRFQRNZg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/u3Ve-zeR0GymxDKRFQRNZg</a></p>
</blockquote>
<h2>介绍</h2>
<p>对资源的可复用是提升应用程序性能的一个非常重要的手段，比如本篇要分享的 ArrayPool 和 MemoryPool，它们就有效的减少了内存使用和对GC的压力，从而提升应用程序性能。</p>`,r:{minutes:6.55,words:1966},t:"ArrayPool和MemoryPool",y:"a"}}],["/dotnet/csharp/jigecaozuo/kuozhan/dictionaryshixianyuanli.html",{loader:()=>a(()=>import("./dictionaryshixianyuanli.html-CUcG-1cY.js"),__vite__mapDeps([1303,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>一、前言</h2>
<p>对于C#中的Dictionary类相信大家都不陌生，这是一个Collection(集合)类型，可以通过Key/Value(键值对的形式来存放数据；该类最大的优点就是它查找元素的时间复杂度接近O(1)，实际项目中常被用来做一些数据的本地缓存，提升整体效率。
那么是什么样的设计能使得Dictionary类能实现O(1)的时间复杂度呢？那就是本篇文章想和大家讨论的东西；这些都是个人的一些理解和观点，如有表述不清楚、错误之处，请大家批评指正，共同进步。</p>
<h2>二、理论知识</h2>
<p>对于Dictionary的实现原理，其中有两个关键的算法，一个是Hash算法，一个是用于应对Hash碰撞冲突解决算法。</p>`,r:{minutes:17.72,words:5317},t:"Dictionary实现原理",y:"a"}}],["/dotnet/csharp/jigecaozuo/kuozhan/shuazepaixusuanfa.html",{loader:()=>a(()=>import("./shuazepaixusuanfa.html-BG1pUVjQ.js"),__vite__mapDeps([1304,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>原理</h2>
<p>选择排序（Selection Sort）是一种简单的排序算法，其实现原理如下：</p>
<ol>
<li>遍历待排序数组，从第一个元素开始。</li>
<li>假设当前遍历的元素为最小值，将其索引保存为最小值索引（minIndex）。</li>
<li>在剩余的未排序部分中，找到比当前最小值还要小的元素，并更新最小值索引。</li>
<li>在遍历结束后，将找到的最小值与当前遍历位置的元素进行交换。</li>
<li>重复步骤2至4，直到排序完成。</li>
</ol>
<h2>实现</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 选择排序算法</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectionSortAlgorithmMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"原始数组: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">SelectionSortAlgorithm</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"排序后的数组: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectionSortAlgorithm</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 在未排序部分中找到最小元素的索引</span>
		<span class="token class-name"><span class="token keyword">int</span></span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 将最小元素与未排序部分的第一个元素交换位置</span>
		<span class="token class-name"><span class="token keyword">int</span></span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.39,words:416},t:"选择排序算法",y:"a"}}],["/dotnet/csharp/jigecaozuo/kuozhan/zhibiangengtongzhidictionary.html",{loader:()=>a(()=>import("./zhibiangengtongzhidictionary.html-DVJPN-sB.js"),__vite__mapDeps([1305,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>实现字典值变更时候做一些其他操作</p>
<h2>操作</h2>
<p>关键字：变更 通知 字典</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">DAL</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueChangedEventArgs<span class="token punctuation">&lt;</span>TK<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">TK</span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token function">ValueChangedEventArgs</span><span class="token punctuation">(</span><span class="token class-name">TK</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictionaryWapper<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">object</span></span>  objLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
        <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span> _dict<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>ValueChangedEventArgs<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> OnValueChanged<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">DictionaryWapper</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span> dict<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _dict <span class="token operator">=</span> dict<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">TValue</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name">TKey</span> Key<span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">lock</span><span class="token punctuation">(</span>objLock<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">try</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>_dict<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token function">OnValueChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueChangedEventArgs<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"检测值变更或者触发值变更事件，发生未知异常</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">finally</span>
                    <span class="token punctuation">{</span>
                        _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.19,words:358},t:"值变更通知Dictionary",y:"a"}}],["/dotnet/csharp/jigecaozuo/kuozhan/zidingyipaixu.html",{loader:()=>a(()=>import("./zidingyipaixu.html-cZUBLa-v.js"),__vite__mapDeps([1306,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>使用场景</h2>
<p>有时候希望集合可以根据我们想要的顺序排序，这个时候默认的Sort方法就不支持了，那么我们需要重新定义排序规则，通过继承IComparer对象，它主要将定义类型为比较两个对象而实现的方法。</p>
<h2>编写自定义排序</h2>
<p>编写文件名例如“xxx-01”,"1xx01-13"按照数字的大小进行排序的排序规则</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilesNameComparer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">T</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> y <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"Parameters can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//对比文件对象A的文件名</span>
        <span class="token class-name"><span class="token keyword">string</span></span> fileA <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//对比文件对象B的文件名</span>
        <span class="token class-name"><span class="token keyword">string</span></span> fileB <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将文件名里的字符一个个拆成字符数组</span>
        <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr1 <span class="token operator">=</span> fileA<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr2 <span class="token operator">=</span> fileB<span class="token punctuation">.</span><span class="token function">ToCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//逐字符处理</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>Length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>Length <span class="token operator">&amp;&amp;</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    s1 <span class="token operator">+=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>Length <span class="token operator">&amp;&amp;</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    s2 <span class="token operator">+=</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    j<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>Length <span class="token operator">==</span> arr2<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> arr1<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> arr2<span class="token punctuation">.</span>Length <span class="token punctuation">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.35,words:404},t:"自定义排序",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/changetoken.html",{loader:()=>a(()=>import("./changetoken.html-Dmnv35Go.js"),__vite__mapDeps([1307,1])),meta:{a:"azrng",d:17000928e5,l:"2023年11月16日",c:["csharp"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>在上篇文章浅谈C#取消令牌CancellationTokenSource[1]一文中我们讲解了CancellationTokenSource，它的主要功能就是分发一个令牌，当我取消令牌我可以进行一些回调操作或者通过令牌状态得知被取消。在上文的结尾处我们也提到了，默认情况下CancellationTokenSource产生的Token是一次性的，Cancel操作之后就没办法再复用了，只能释放掉了。而微软也很贴心的为我们提供了一个解决方案来解决这问题，那就是我们今天要说的更改令牌ChangeToken，它看起来可以让CancellationTokenSource产生的Token多次触发，本文我们就来讲解ChangeToken相关。</p>`,r:{minutes:23.25,words:6974},t:"ChangeToken",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/",{loader:()=>a(()=>import("./index.html-CNoX_sPk.js"),__vite__mapDeps([1308,1])),meta:{a:"azrng",d:17001792e5,l:"2023年11月17日",c:["csharp"],g:["async"],o:!0,e:`<h2>描述</h2>
<p>不必等待前面所有的代码执行完才开始执行某一段代码，这就是异步。就比如不必要等蒸过米饭才开始炒菜，可以让电饭锅去蒸米饭，然后燃气去炒菜，又或者去饭店吃饭，服务员就是主线程，然后顾客点餐就是具体的任务，当服务员去站到顾客面前等待顾客点餐就是同步方法，当服务员给顾客菜单，顾客点完后再给服务员，服务员在顾客点餐的时候可以去忙其他的事情，这个就是异步方法。“异步点餐”可以让服务员同时服务更多的客人，但是不会使得服务单个客人的时间变短，甚至有的情况下还可能变长。</p>
<h2>已有多线程，为何要异步</h2>
<p>异步和多线程并不是一个同等关系，它俩没有直接的关系，异步是最终目的，多线程只是我们实现异步的一种手段，单线程和多线程都会出现阻塞的情况，这个时候就会用到异步方法去防止阻塞。
<img src="/common/1641029030244-a3a42511-f87c-4e14-9434-4a639caf587d.png" alt="image.png" loading="lazy"></p>`,r:{minutes:30.3,words:9091},t:"说明",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshi.html",{loader:()=>a(()=>import("./tapmoshi.html-D78V0gMq.js"),__vite__mapDeps([1309,1])),meta:{a:"azrng",d:16997472e5,l:"2023年11月12日",c:["csharp"],g:["无"],o:!0,e:`<h2>描述</h2>
<ul>
<li>async和await关键字可以让你写出来和同步代码一样简洁且结构相同的异步代码。</li>
<li>await关键字简化了附加Continuation的过程</li>
<li>async修饰符会让编译器把await当作关键字而不是标识符(c#5以前可能会使用await作为标识符)</li>
<li>async修饰符只能作用于方法(包括lambda表达式)
<ul>
<li>该方法可以返回void、Task、<code>Task&lt;TResult&gt;</code></li>
</ul>
</li>
<li>async修饰符对方法的签名或者public元数据没有影响，它只会影响方法内部
<ul>
<li>在接口内使用async是没有意义的</li>
<li>使用async来重载非async的方法却是合理的(只要方法签名一致)</li>
</ul>
</li>
<li>在C#中只要类包含GetAwaiter() 方法和bool IsCompleted属性，并且GetAwaiter()的返回值包含 GetResult()方法、bool IsCompleted属性和实现了 INotifyCompletion接口，那么这个类的实例就是可以await 的</li>
</ul>`,r:{minutes:18,words:5399},t:"TAP模式",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshiyanhua.html",{loader:()=>a(()=>import("./tapmoshiyanhua.html-BXx7OOG6.js"),__vite__mapDeps([1310,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>看不懂await，async执行流，其实看不懂太正常了，因为你没用过ContinueWith就不知道await,async有多重要，下面我举两个案例佐证一下？</p>
<h2>嵌套下的异步</h2>
<p>写了这么多年的程序，相信大家都知道连接数据库少不了这几个对象，DbConnection，DbCommand，DbDataReader等等。。先来看看ContinueWith在连接数据库时嵌套过深的尴尬。</p>
<h3>1. NetFramework 4.0之前的写法</h3>
<p>这个时期的代码没有什么好说的，都是程式代码，一撸到底，简洁明了。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SyncGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span><span class="token string">"server=xxx.xxx.xxx.xxx;userid=xxx;password=xxx;database=xxx;charset=utf8;port=3306;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">"select count(1) from messages"</span><span class="token punctuation">;</span>

			<span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"记录条数:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>output<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">-</span>

记录条数<span class="token punctuation">:</span><span class="token number">75896</span>
</code></pre></div>`,r:{minutes:4.23,words:1270},t:"TAP模式演化",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/yibushili1.html",{loader:()=>a(()=>import("./yibushili1.html-BL8mI_3F.js"),__vite__mapDeps([1311,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h2>1. 同步和异步</h2>
<p>先说同步。同步概念大家都很熟悉。在异步概念出来之前，我们的代码都是按同步的方式写的。简单来说，就是程序严格按照代码的逻辑次序，一行一行执行。看一段代码：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  start func1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  end func1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  start func2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  end func2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  start func3!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  end func3!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"syc process  done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func1 process - start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func1 process - end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func2 process - start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func2 process - end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func3 process - start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"func3 process - end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:8.97,words:2692},t:"异步示例1",y:"a"}}],["/dotnet/csharp/threadConcurrencyAndAsync/async/yibushili2.html",{loader:()=>a(()=>import("./yibushili2.html-Bz2N_oCE.js"),__vite__mapDeps([1312,1])),meta:{a:"azrng",d:16979328e5,l:"2023年10月22日",c:["csharp"],g:["无"],o:!0,e:`<h3>异步执行</h3>
<p>异步执行，是指在遇到await的时候，才需要等待异步操作完成，然后往下执行；但是不会阻塞当前线程执行其他操作。
代码如下</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> <span class="token function">MakeBreakfastAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">MakeBreakfastAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cup <span class="token operator">=</span> <span class="token function">PourCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"coffee is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> eggs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">FryEggsAsync</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"eggs are ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> bacon <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">FryBaconAsync</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"bacon is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> toast <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ToastBreadAsync</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ApplyButter</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ApplyJam</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"toast is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> oj <span class="token operator">=</span> <span class="token function">PourOJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"oj is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Breakfast is ready!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Toast<span class="token punctuation">&gt;</span></span> <span class="token function">ToastBreadAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> slices<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> slice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> slice <span class="token operator">&lt;</span> slices<span class="token punctuation">;</span> slice<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Putting a slice of bread in the toaster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Start toasting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Remove toast from toaster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Toast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Bacon<span class="token punctuation">&gt;</span></span> <span class="token function">FryBaconAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> slices<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"putting </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">slices</span><span class="token punctuation">}</span></span><span class="token string"> slices of bacon in the pan"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"cooking first side of bacon..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> slice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> slice <span class="token operator">&lt;</span> slices<span class="token punctuation">;</span> slice<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"flipping a slice of bacon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"cooking the second side of bacon..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Put bacon on plate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bacon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Egg<span class="token punctuation">&gt;</span></span> <span class="token function">FryEggsAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> howMany<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Warming the egg pan..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"cracking </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">howMany</span><span class="token punctuation">}</span></span><span class="token string"> eggs"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"cooking the eggs ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Put eggs on plate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Egg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.87,words:861},t:"异步示例2",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/changedaimajiexi.html",{loader:()=>a(()=>import("./changedaimajiexi.html-CuSnjbbX.js"),__vite__mapDeps([1313,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,r:{minutes:.1,words:30},t:"单个代码解析",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/checkboxlist.html",{loader:()=>a(()=>import("./checkboxlist.html-M7nbPGaF.js"),__vite__mapDeps([1314,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>后台让CheckBoxList默认一下选项 选中
&nbsp;string[] reasons = info.h_reason.Split(new char[] { ',' });
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; reasons.Length; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0; j &lt; CheckBoxList1.Items.Count; j++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (reasons[i] == CheckBoxList1.Items[j].Value)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CheckBoxList1.Items[j].Selected = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
后台获取选中项
&nbsp;&nbsp;&nbsp;&nbsp; string reason = ",";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; CheckBoxList1.Items.Count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (CheckBoxList1.Items[i].Selected)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reason = reason + CheckBoxList1.Items[i].Value + ",";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>`,r:{minutes:.3,words:91},t:"CheckBoxList",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/guanyulanya.html",{loader:()=>a(()=>import("./guanyulanya.html-DM7n4mzG.js"),__vite__mapDeps([1315,1])),meta:{a:"azrng",d:16136064e5,l:"2021年2月18日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span>LanYa<span class="token punctuation">&gt;</span></span> lanYaList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>LanYa<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//搜索到的蓝牙的集合</span>
            <span class="token class-name">BluetoothClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BluetoothClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BluetoothRadio</span> radio <span class="token operator">=</span> BluetoothRadio<span class="token punctuation">.</span>PrimaryRadio<span class="token punctuation">;</span> <span class="token comment">//获取蓝牙适配器</span>
            radio<span class="token punctuation">.</span>Mode <span class="token operator">=</span> RadioMode<span class="token punctuation">.</span>Connectable<span class="token punctuation">;</span>
            <span class="token class-name">BluetoothDeviceInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> devices <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">DiscoverDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//搜索蓝牙 10秒钟</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> devices<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                lanYaList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LanYa</span> <span class="token punctuation">{</span> blueName <span class="token operator">=</span> item<span class="token punctuation">.</span>DeviceName<span class="token punctuation">,</span> blueAddress <span class="token operator">=</span> item<span class="token punctuation">.</span>DeviceAddress<span class="token punctuation">,</span> blueClassOfDevice <span class="token operator">=</span> item<span class="token punctuation">.</span>ClassOfDevice<span class="token punctuation">,</span> IsBlueAuth <span class="token operator">=</span> item<span class="token punctuation">.</span>Authenticated<span class="token punctuation">,</span> IsBlueRemembered <span class="token operator">=</span> item<span class="token punctuation">.</span>Remembered<span class="token punctuation">,</span> blueLastSeen <span class="token operator">=</span> item<span class="token punctuation">.</span>LastSeen<span class="token punctuation">,</span> blueLastUsed <span class="token operator">=</span> item<span class="token punctuation">.</span>LastUsed <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把搜索到的蓝牙添加到集合中</span>
            <span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">LanYa</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> blueName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                  <span class="token comment">//l蓝牙名字</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">BluetoothAddress</span> blueAddress <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">//蓝牙的唯一标识符</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ClassOfDevice</span> blueClassOfDevice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token comment">//蓝牙是何种类型</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsBlueAuth <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                  <span class="token comment">//指定设备通过验证</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsBlueRemembered <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token comment">//记住设备</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> blueLastSeen <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> blueLastUsed <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.64,words:192},t:"关于蓝牙",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/huoqufuwuqixinxifangfa.html",{loader:()=>a(()=>import("./huoqufuwuqixinxifangfa.html-BShuufrr.js"),__vite__mapDeps([1316,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>获取服务器信息</h2>
<p>if (!IsPostBack)
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label1.Text = "服务器名称："+Server.MachineName;//服务器名称
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label2.Text = "服务器IP地址：" + Request.ServerVariables["LOCAL_ADDR"];//服务器IP地址
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label3.Text = "服务器域名：" + Request.ServerVariables["SERVER_NAME"];//服务器域名
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label4.Text = ".NET解释引擎版本：" + ".NET CLR" + Environment.Version.Major + "." + Environment.Version.Minor + "." + Environment.Version.Build + "." + Environment.Version.Revision;//.NET解释引擎版本
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label5.Text = "服务器操作系统版本：" + Environment.OSVersion.ToString();//服务器操作系统版本
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label6.Text = "服务器IIS版本：" + Request.ServerVariables["SERVER_SOFTWARE"];//服务器IIS版本
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label7.Text = "HTTP访问端口：" + Request.ServerVariables["SERVER_PORT"];//HTTP访问端口
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label8.Text = "虚拟目录的绝对路径：" + Request.ServerVariables["APPL_RHYSICAL_PATH"];//虚拟目录的绝对路径
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label9.Text = "执行文件的绝对路径：" + Request.ServerVariables["PATH_TRANSLATED"];//执行文件的绝对路径
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label10.Text = "虚拟目录Session总数：" + Session.Contents.Count.ToString();//虚拟目录Session总数
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label11.Text = "虚拟目录Application总数：" + Application.Contents.Count.ToString();//虚拟目录Application总数
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label12.Text = "域名主机：" + Request.ServerVariables["HTTP_HOST"];//域名主机
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label13.Text = "服务器区域语言：" + Request.ServerVariables["HTTP_ACCEPT_LANGUAGE"];//服务器区域语言
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label14.Text = "用户信息：" + Request.ServerVariables["HTTP_USER_AGENT"];
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label14.Text="CPU个数："+Environment.GetEnvironmentVariable("NUMBER_OF_PROCESSORS");//CPU个数
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label15.Text = "CPU类型：" + Environment.GetEnvironmentVariable("PROCESSOR_IDENTIFIER");//CPU类型
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label16.Text = "进程开始时间：" + GetPrStart();//进程开始时间
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label17.Text = "AspNet 内存占用：" + GetAspNetN();//AspNet 内存占用
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label18.Text = "AspNet CPU时间：" + GetAspNetCpu();//AspNet CPU时间
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label19.Text = "FSO 文本文件读写：" + Check("Scripting.FileSystemObject");//FSO 文本文件读写
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Label20.Text = "应用程序占用内存" + GetServerAppN();//应用程序占用内存
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}
&nbsp;
来自 &lt;<a href="http://www.cnblogs.com/top5/archive/2010/04/23/1718943.html" target="_blank" rel="noopener noreferrer">http://www.cnblogs.com/top5/archive/2010/04/23/1718943.html</a>&gt;</p>`,r:{minutes:1.67,words:502},t:"获取服务器信息方法",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/huoqujitongxinxi.html",{loader:()=>a(()=>import("./huoqujitongxinxi.html-BeKGLlOx.js"),__vite__mapDeps([1317,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token doc-comment comment">/// 获取本机用户名、MAC地址、内网IP地址、公网IP地址、硬盘ID、CPU序列号、系统名称、物理内存。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetSystemInfo</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 操作系统的登录用户名</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>系统的登录用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strUserName <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_ComputerSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strUserName <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"UserName"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strUserName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取本机MAC地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>本机MAC地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetMacAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strMac <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_NetworkAdapterConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>mo<span class="token punctuation">[</span><span class="token string">"IPEnabled"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        strMac <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"MacAddress"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strMac<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取本机的物理地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">getMacAddr_Local</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> madAddr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_NetworkAdapterConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc2 <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc2<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToBoolean</span><span class="token punctuation">(</span>mo<span class="token punctuation">[</span><span class="token string">"IPEnabled"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        madAddr <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"MacAddress"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        madAddr <span class="token operator">=</span> madAddr<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token char">':'</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    mo<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>madAddr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> madAddr<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取客户端内网IPv6地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>客户端内网IPv6地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetClientLocalIPv6Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strLocalIP <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">IPHostEntry</span> ipHost <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostEntry</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">IPAddress</span> ipAddress <span class="token operator">=</span> ipHost<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                strLocalIP <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strLocalIP<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取客户端内网IPv4地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>客户端内网IPv4地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetClientLocalIPv4Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strLocalIP <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">IPHostEntry</span> ipHost <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">IPAddress</span> ipAddress <span class="token operator">=</span> ipHost<span class="token punctuation">.</span>AddressList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                strLocalIP <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strLocalIP<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取客户端内网IPv4地址集合</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>返回客户端内网IPv4地址集合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetClientLocalIPv4AddressList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> ipAddressList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">IPHostEntry</span> ipHost <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>Dns<span class="token punctuation">.</span><span class="token function">GetHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IPAddress</span> ipAddress <span class="token keyword">in</span> ipHost<span class="token punctuation">.</span>AddressList<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ipAddressList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                       ipAddressList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
 
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ipAddressList<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取客户端外网IP地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>客户端外网IP地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetClientInternetIPAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> strInternetIPAddress <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strInternetIPAddress <span class="token operator">=</span> webClient<span class="token punctuation">.</span><span class="token function">DownloadString</span><span class="token punctuation">(</span><span class="token string">"http://www.coridc.com/ip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Regex</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">"[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Match</span> mth <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>strInternetIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mth<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        strInternetIPAddress <span class="token operator">=</span> <span class="token function">GetClientInternetIPAddress2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        mth <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>strInternetIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mth<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                           strInternetIPAddress <span class="token operator">=</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">return</span> strInternetIPAddress<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取本机公网IP地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>本机公网IP地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetClientInternetIPAddress2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> tempip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
               <span class="token comment">//http://iframe.ip138.com/ic.asp 返回的是：您的IP是：[220.231.17.99] 来自：北京市 光环新网</span>
                <span class="token class-name">WebRequest</span> wr <span class="token operator">=</span> WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"http://iframe.ip138.com/ic.asp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Stream</span> s <span class="token operator">=</span> wr<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> all <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//读取网站的数据</span>
 
                <span class="token class-name"><span class="token keyword">int</span></span> start <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span></span> end <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tempip <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                sr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> tempip<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取硬盘序号</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>硬盘序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetDiskID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strDiskID <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_DiskDrive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strDiskID <span class="token operator">=</span> mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">"Model"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strDiskID<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取CpuID</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>CpuID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetCpuID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strCpuID <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_Processor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strCpuID <span class="token operator">=</span> mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">"ProcessorId"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strCpuID<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取操作系统类型</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>操作系统类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSystemType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strSystemType <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_ComputerSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strSystemType <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"SystemType"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strSystemType<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取操作系统名称</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>操作系统名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSystemName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strSystemName <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectSearcher</span> mos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span><span class="token string">"root\\\\CIMV2"</span><span class="token punctuation">,</span> <span class="token string">"SELECT PartComponent FROM Win32_SystemOperatingSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> mos<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strSystemName <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"PartComponent"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                mos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementObjectSearcher</span><span class="token punctuation">(</span><span class="token string">"root\\\\CIMV2"</span><span class="token punctuation">,</span> <span class="token string">"SELECT Caption FROM Win32_OperatingSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> mos<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strSystemName <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"Caption"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> strSystemName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取物理内存信息</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>物理内存信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetTotalPhysicalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strTotalPhysicalMemory <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_ComputerSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strTotalPhysicalMemory <span class="token operator">=</span> mo<span class="token punctuation">[</span><span class="token string">"TotalPhysicalMemory"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                moc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                mc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> strTotalPhysicalMemory<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
 
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取主板id</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetMotherBoardID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">ManagementClass</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagementClass</span><span class="token punctuation">(</span><span class="token string">"Win32_BaseBoard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ManagementObjectCollection</span> moc <span class="token operator">=</span> mc<span class="token punctuation">.</span><span class="token function">GetInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strID <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">ManagementObject</span> mo <span class="token keyword">in</span> moc<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    strID <span class="token operator">=</span> mo<span class="token punctuation">.</span>Properties<span class="token punctuation">[</span><span class="token string">"SerialNumber"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> strID<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
 
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取公用桌面路径         </span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetAllUsersDesktopFolderPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">RegistryKey</span> folders<span class="token punctuation">;</span>
            folders <span class="token operator">=</span> <span class="token function">OpenRegistryPath</span><span class="token punctuation">(</span>Registry<span class="token punctuation">.</span>LocalMachine<span class="token punctuation">,</span> <span class="token string">@"/software/microsoft/windows/currentversion/explorer/shell folders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> desktopPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Common Desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> desktopPath<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取公用启动项路径</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetAllUsersStartupFolderPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">RegistryKey</span> folders<span class="token punctuation">;</span>
            folders <span class="token operator">=</span> <span class="token function">OpenRegistryPath</span><span class="token punctuation">(</span>Registry<span class="token punctuation">.</span>LocalMachine<span class="token punctuation">,</span> <span class="token string">@"/software/microsoft/windows/currentversion/explorer/shell folders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> Startup <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Common Startup"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Startup<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">RegistryKey</span> <span class="token function">OpenRegistryPath</span><span class="token punctuation">(</span><span class="token class-name">RegistryKey</span> root<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">@"/"</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">@"/"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">OpenSubKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">@"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">@"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> root<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
 
 
测试数据
 
       <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">RegistryKey</span> folders<span class="token punctuation">;</span>
            folders <span class="token operator">=</span> <span class="token function">OpenRegistryPath</span><span class="token punctuation">(</span>Registry<span class="token punctuation">.</span>LocalMachine<span class="token punctuation">,</span> <span class="token string">@"/software/microsoft/windows/currentversion/explorer/shell folders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户桌面路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> desktopPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Common Desktop"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户字体目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> fontsPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Fonts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户网络邻居路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> nethoodPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Nethood"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户我的文档路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> personalPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Personal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户开始菜单程序路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> programsPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Programs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户存放用户最近访问文档快捷方式的目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> recentPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Recent"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户发送到目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sendtoPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Sendto"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户开始菜单目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> startmenuPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Startmenu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户开始菜单启动项目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> startupPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Startup"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户收藏夹目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> favoritesPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Favorites"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户网页历史目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> historyPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"History"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户Cookies目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> cookiesPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Cookies"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户Cache目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> cachePath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Cache"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户应用程式数据目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> appdataPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Appdata"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Windows用户打印目录路径</span>
            <span class="token class-name"><span class="token keyword">string</span></span> printhoodPath <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">"Printhood"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
 
</code></pre></div>`,r:{minutes:4.3,words:1289},t:"获取系统信息",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/jubushuaxin.html",{loader:()=>a(()=>import("./jubushuaxin.html-Er57qCrH.js"),__vite__mapDeps([1318,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p><strong>局部刷新</strong>
&nbsp;&lt;asp:ScriptManager ID="ScriptManager1" runat="server"&gt;&lt;/asp:ScriptManager&gt;这个直接放在form内就行
使用局部刷新的方法就是把想不让闪的东西套在
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;asp:UpdatePanel ID="UpdatePanel1" runat="server"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/asp:UpdatePanel&gt;里面，然后会发现一些弹窗不能使用，那么就是用其他方法弹框
&nbsp;
在ajax中的UpdatePanel弹出对话窗，可以使用：
ScriptManager.RegisterStartupScript(UpdatePanel1, this.GetType(), "alert", "alert('更新成功!')", true);
修改后跳到另一个页面中去时，可以使用：
ScriptManager.RegisterStartupScript(UpdatePanel1, this.GetType(), "click", "location.replace('UserManger.aspx');", true);
如果跳转前还有提示信息的话，则可以使用：
ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "click", "alert('更新成功!');location.replace('UserManger.aspx');", true);
&nbsp;
例如：ScriptManager.RegisterStartupScript(this.UpdatePanel1,this.GetType(),&nbsp;"提示",&nbsp;"alert('购物车为空,请先购物!')",&nbsp;true);&nbsp;&nbsp;
&nbsp;
&nbsp;protected void UpdatePanelAlert(string&nbsp;str_Message)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScriptManager.RegisterStartupScript(this.UpdatePanel1,&nbsp;this.GetType(),&nbsp;"提示", "alert('" +&nbsp;str_Message+ "')", true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;UpdatePanelAlert("无此代码");
&nbsp;
来自 &lt;<a href="https://blog.csdn.net/weibingbing_net/article/details/48241561" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weibingbing_net/article/details/48241561</a>&gt;</p>`,r:{minutes:.76,words:227},t:"局部刷新",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/shangchuanxianzhi.html",{loader:()=>a(()=>import("./shangchuanxianzhi.html-CuKcotHU.js"),__vite__mapDeps([1319,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>aspx提交或者回发提示超过长度
webconfig里面设置，下面的是允许2g
&lt;system.web&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
`,r:{minutes:.21,words:63},t:"上传限制",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/suijiyanzhengma.html",{loader:()=>a(()=>import("./suijiyanzhengma.html-j7yoOW4D.js"),__vite__mapDeps([1320,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>在需要出来验证码的页面，使用一个图片控件，如下</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>  &lt;asp:Image ID="Image1" runat="server" src="TransmitFileDemo.aspx" Style="cursor: pointer" onclick="this.src=this.src+'?'" align="middle" alt="看不清楚，点击换一张！" /&gt;
</code></pre></div>`,r:{minutes:1.2,words:359},t:"随机验证码",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/tiaozhuaixiemian.html",{loader:()=>a(()=>import("./tiaozhuaixiemian.html-DLU760Qy.js"),__vite__mapDeps([1321,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>返回上一次不用跳转</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;a href="javascript:history.back(-1);" title="返回"&gt;返回&lt;/a&gt;
</code></pre></div><p>input中使用其他标签的值</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;input type='button' onclick="javascript:$('#a').val()"&gt;
</code></pre></div>`,r:{minutes:4.08,words:1225},t:"跳转页面",y:"a"}}],["/dotnet/webyingyong/webform/changedaimajiexi/webconfig.html",{loader:()=>a(()=>import("./webconfig.html-B0lqu57G.js"),__vite__mapDeps([1322,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>webconfig中存储数据
&nbsp; 
获取方法：
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static string GetDirName()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return System.Configuration.ConfigurationManager.AppSettings["uploaddir"];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
错误跳转</p>`,r:{minutes:.27,words:82},t:"webconfig",y:"a"}}],["/dotnet/webyingyong/webform/cunchushuju/cookie.html",{loader:()=>a(()=>import("./cookie.html-jcZBgge8.js"),__vite__mapDeps([1323,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>写入cookie
<strong>HttpCookie&nbsp;cookie=new&nbsp;HttpCookie("MyCook");//初使化并设置Cookie的名称</strong>
<strong>DateTime&nbsp;dt=DateTime.Now;</strong>
<strong>TimeSpan&nbsp;ts&nbsp;=&nbsp;new&nbsp;TimeSpan(0,&nbsp;0,&nbsp;1,0,0);//过期时间为1分钟</strong>
<strong>cookie.Expires&nbsp;=&nbsp;dt.Add(ts);//设置过期时间</strong>
<strong>cookie.Values.Add("userid",&nbsp;"userid_value");</strong>
<strong>cookie.Values.Add("userid2","userid2_value2");</strong>
**Response.AppendCookie(cookie); **
<strong>还有一种添加cookie的方法</strong>
&nbsp;&nbsp; HttpCookie cookie = new HttpCookie("cookieToken", token);
&nbsp;HttpContext.Current.Response.Cookies.Add(cookie);
&nbsp; 取值：string c = Request.Cookies["cookieToken"].Value.ToString();</p>`,r:{minutes:1.29,words:388},t:"cookie",y:"a"}}],["/dotnet/webyingyong/webform/cunchushuju/cunchushuju.html",{loader:()=>a(()=>import("./cunchushuju.html-DKCWLqHT.js"),__vite__mapDeps([1324,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）
&nbsp;
Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。</p>
`,r:{minutes:.4,words:119},t:"存储数据",y:"a"}}],["/dotnet/webyingyong/webform/cunchushuju/session.html",{loader:()=>a(()=>import("./session.html-6TkhggCB.js"),__vite__mapDeps([1325,1])),meta:{a:"azrng",d:16300224e5,l:"2021年8月27日",c:["dotNET"],g:["无"],o:!0,e:`<p>创建session
&nbsp;&nbsp; Session["admin_name"] ="azrng";
删除session
&nbsp;Session.Abandon();
注释：
Session.Clear()就是把Session对象中的所有项目都删除了，
Session对象里面啥都没有。但是Session对象还保留。
Session.Abandon()就是把当前Session对象删除了，下一次就是新的Session了。
&nbsp;
一般处理程序中获取session
先引用using System.Web.SessionState;
然后再：public class FIleShow : IHttpHandler, IRequiresSessionState &nbsp; 继承这个
获取 context.Session["name"].ToString();
&nbsp;
&nbsp;
一个浏览器登录两个不同账号session替换的问题
（可以在登录时候判断下是session是否有值，如果有值直接进去）
&nbsp;
&nbsp;
登录后会创建一个session，这个东西保存在服务器上，那么服务器如何知道是哪一个电脑登录的呢？
创建session时候会创建一个cookie，然后生成一个sessionid，这个东西是用来区分是哪一个电脑登录的
&nbsp;
session和cache区别
&nbsp;
<strong>cookie和session的关系:</strong>
http是无状态的协议&nbsp; session是以cookie或URL重写为基础的， 他是流程化的 ,默认使用cookie来实现,&nbsp;&nbsp; session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，用户在连接服务器时，会由服务器生成一个唯一的SessionID,通过 SessionID来区分不同的客户 并且方便下一次的识别&nbsp; Session是由应用服务器维持的一个服务器端的存储空间，而SessionID这一数据则是用Cookie保存到客户端，用户提交页面时，会将这SessionID提交到服务器端，来存取Session数据。</p>`,r:{minutes:1.43,words:428},t:"session",y:"a"}}],["/dotnet/webyingyong/webform/shujubiao/bianligeleishujujige.html",{loader:()=>a(()=>import("./bianligeleishujujige.html-2lAOthMK.js"),__vite__mapDeps([1326,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p><strong>1.枚举类型</strong>
//遍历枚举类型Sample的各个枚举名称</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>foreach (string sp in Enum.GetNames(typeof(Sample))) 
{ 
ary.Add(sp); 
} 
//遍历枚举类型Sample的各个枚举值 
foreach (string sp in Enum.GetValues(typeof(Sample))) 
{ 
ary.Add(sp); 
} 
</code></pre></div>`,r:{minutes:2.87,words:861},t:"遍历各类数据集合",y:"a"}}],["/dotnet/webyingyong/webform/shujubiao/qiantaibangdinghoutaipinjiedehtml.html",{loader:()=>a(()=>import("./qiantaibangdinghoutaipinjiedehtml.html-BtW5NFHy.js"),__vite__mapDeps([1327,1])),meta:{a:"azrng",d:16347744e5,l:"2021年10月21日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>字符串的内容是创建一个li
 <span class="token operator">&lt;</span><span class="token operator">%=</span>strlist1 <span class="token operator">%</span><span class="token operator">&gt;</span>
后台拼接方法
 <span class="token class-name">StringBuilder</span> jtdaStrHtml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;a href=\\"#\\" &gt;上报数据&lt;/a&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;ul style=\\"display: none;\\"&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;a href=\\"sbData.aspx\\" target=\\"mainFrame\\"&gt;&lt;img src=\\"../images/icon1.png\\" width=\\"16\\" height=\\"16\\" /&gt;上报数据&lt;/a&gt;&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;a href=\\"sbDataList.aspx\\" target=\\"mainFrame\\"&gt;&lt;img src=\\"../images/icon1.png\\" width=\\"16\\" height=\\"16\\" /&gt;上报数据列表&lt;/a&gt;&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;/ul&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                jtdaStrHtml<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                strlist1 <span class="token operator">=</span> jtdaStrHtml<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
经浏览器翻译后为
<span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"#"</span> <span class="token operator">&gt;</span>上报数据<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">ul</span> style<span class="token operator">=</span><span class="token string">"display: none;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"sbData.aspx"</span> target<span class="token operator">=</span><span class="token string">"mainFrame"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">img</span> src<span class="token operator">=</span><span class="token string">"../images/icon1.png"</span> width<span class="token operator">=</span><span class="token string">"16"</span> height<span class="token operator">=</span><span class="token string">"16"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>上报数据<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">"sbDataList.aspx"</span> target<span class="token operator">=</span><span class="token string">"mainFrame"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token class-name">img</span> src<span class="token operator">=</span><span class="token string">"../images/icon1.png"</span> width<span class="token operator">=</span><span class="token string">"16"</span> height<span class="token operator">=</span><span class="token string">"16"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>上报数据列表<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> 




</code></pre></div>`,r:{minutes:.62,words:186},t:"前台绑定后台拼接的html",y:"a"}}],["/dotnet/webyingyong/webform/shujubiao/repeater.html",{loader:()=>a(()=>import("./repeater.html-D7kPmVFC.js"),__vite__mapDeps([1328,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>repeater里面写超链接</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code> &lt;a href='../BackstageWebPage/ShowArticleList.aspx?id=&lt;%#Eval("id")%&gt;'&gt;&lt;%#Eval("title")%&gt;&lt;/a&gt;
</code></pre></div><p>repeater中给button的Text属性绑定两个值：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Text='&lt;%#string.Format("{0}({1})",Eval("a_RealName"),Eval("a_num"))%&gt;'
</code></pre></div>`,r:{minutes:.95,words:286},t:"repeater",y:"a"}}],["/dotnet/webyingyong/webform/shujubiao/xiugaishujudeupdatefangfa.html",{loader:()=>a(()=>import("./xiugaishujudeupdatefangfa.html-CPN7zcmX.js"),__vite__mapDeps([1329,1])),meta:{a:"azrng",d:16347744e5,l:"2021年10月21日",c:["dotNET"],g:["无"],o:!0,e:`<p>有时候修改的语句最后会多一个，
示例</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>q_status <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> model<span class="token punctuation">.</span>q_status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
               strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"q_status=@q_status,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>q_status2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> model<span class="token punctuation">.</span>q_status2 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
               strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"q_status2=@q_status2,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>model<span class="token punctuation">.</span>q_status3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> model<span class="token punctuation">.</span>q_status3 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
               strSql<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"q_status3=@q_status3,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
这种，那么就需要把最后那个“，”截取了
 <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个，所在位置</span>
<span class="token class-name"><span class="token keyword">string</span></span> strSql2 <span class="token operator">=</span> strSql<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or str=str.Remove(i,str.Length-i); </span>
strSql2 <span class="token operator">=</span> strSql2 <span class="token operator">+</span> <span class="token string">" where ID=@ID"</span><span class="token punctuation">;</span>


或者

可以使用trim去除最后一个符号
</code></pre></div>`,r:{minutes:.45,words:134},t:"修改数据的Update方法",y:"a"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/excel.html",{loader:()=>a(()=>import("./excel.html-BBk5QfEe.js"),__vite__mapDeps([1330,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>上传excel并且读取excel(xls)文件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>前台：
            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>只支持xls格式<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>asp<span class="token punctuation">:</span><span class="token class-name">FileUpload</span> ID<span class="token operator">=</span><span class="token string">"FuStud"</span> runat<span class="token operator">=</span><span class="token string">"server"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>asp<span class="token punctuation">:</span><span class="token class-name">Button</span> ID<span class="token operator">=</span><span class="token string">"Button1"</span> runat<span class="token operator">=</span><span class="token string">"server"</span> Text<span class="token operator">=</span><span class="token string">"Button"</span> OnClick<span class="token operator">=</span><span class="token string">"Button1_Click"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
后台：
  <span class="token keyword">if</span> <span class="token punctuation">(</span>FuStud<span class="token punctuation">.</span>PostedFile<span class="token punctuation">.</span>FileName <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//substring里面只有一个参数时候，取这个参数后面的东西，包括这个</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>FuStud<span class="token punctuation">.</span>FileName<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>FuStud<span class="token punctuation">.</span>FileName<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"xls"</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">string</span></span> filename <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyymmdd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToLongTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xls"</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span>
                    <span class="token punctuation">{</span>
                       FuStud<span class="token punctuation">.</span>PostedFile<span class="token punctuation">.</span><span class="token function">SaveAs</span><span class="token punctuation">(</span>@Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span><span class="token string">"~/upload/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">getDs</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HttpException</span> ex<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token comment">// MessageBox.Show(this, ex.Message.ToString());  出错的情况</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
   <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">getDs</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filename<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> connstr <span class="token operator">=</span> <span class="token string">" Provider = Microsoft.Jet.OLEDB.4.0 ; Data Source ="</span> <span class="token operator">+</span> Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span><span class="token string">"~/upload/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">";Extended Properties=Excel 8.0"</span><span class="token punctuation">;</span>
            <span class="token class-name">OleDbConnection</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OleDbConnection</span><span class="token punctuation">(</span>connstr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">"select * from [Sheet1$]"</span><span class="token punctuation">;</span>
            <span class="token class-name">OleDbDataAdapter</span> da <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OleDbDataAdapter</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DataSet</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            da<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> <span class="token string">"[Sheet1$]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> xm<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                xm <span class="token operator">=</span> ds<span class="token punctuation">.</span>Tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"姓名"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环读取excel的数据</span>
              
 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.68,words:204},t:"Excel",y:"a"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/tupiangeshizhuaihuan.html",{loader:()=>a(()=>import("./tupiangeshizhuaihuan.html-CrlxUryD.js"),__vite__mapDeps([1331,1])),meta:{a:"azrng",d:16504128e5,l:"2022年4月20日",c:["dotNET"],g:["无"],o:!0,e:`<p>将blob:http://localhost:6099/1f24c2e7-0e11-49ff-bb94-5786135476fb格式
转换为base64格式</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> oFReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name"><span class="token keyword">var</span></span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>'uploaderInput'<span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//uploaderInput是input file控件的id</span>
   oFReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
   oFReader<span class="token punctuation">.</span>onloadend <span class="token operator">=</span> function <span class="token punctuation">(</span>oFRevent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name"><span class="token keyword">var</span></span> src <span class="token operator">=</span> oFRevent<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
   $<span class="token punctuation">(</span><span class="token string">"#HiddenField1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时已经转换为了base64码</span>

</code></pre></div>`,r:{minutes:1.37,words:412},t:"图片格式转换",y:"a"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/tupianshangchuan.html",{loader:()=>a(()=>import("./tupianshangchuan.html-xA1R7J0H.js"),__vite__mapDeps([1332,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>对input里面的type为file进行限制 &nbsp; accept:'image/*'</p>
`,r:{minutes:.14,words:42},t:"图片上传",y:"a"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/tupianzhuaibase64.html",{loader:()=>a(()=>import("./tupianzhuaibase64.html-D54MrAh7.js"),__vite__mapDeps([1333,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 将图片转换成Base64字符串</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文件路径加名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ImgToBase64String</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//相对路径转换为绝对路径</span>
                <span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//判断图片是否存在</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">Bitmap</span> bmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">int</span></span> newHeight <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Height<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bmp<span class="token punctuation">.</span>Width <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">float</span></span> _w <span class="token operator">=</span> bmp<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token number">2000</span><span class="token punctuation">;</span>
                        newHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bmp<span class="token punctuation">.</span>Height <span class="token operator">/</span> _w<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        bmp <span class="token operator">=</span> <span class="token function">KiResizeImage</span><span class="token punctuation">(</span>bmp<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> newHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片等比例压缩至宽度2000px </span>
                    <span class="token punctuation">}</span>

                    <span class="token class-name">MemoryStream</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    bmp<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span>ImageFormat<span class="token punctuation">.</span>Png<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>ms<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    ms<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    ms<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ms<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ms<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> <span class="token string">"未找到文件"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                LogHelper<span class="token punctuation">.</span><span class="token function">WriteLogTxt</span><span class="token punctuation">(</span><span class="token string">"ImgToBase64String ErrorMessage:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                LogHelper<span class="token punctuation">.</span><span class="token function">WriteLogTxt</span><span class="token punctuation">(</span><span class="token string">"ImgToBase64String error:"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">return</span> <span class="token string">"failure"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token doc-comment comment">/// Resize图片  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>原始Bitmap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newW<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新的宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newH<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>新的高度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>处理以后的Bitmap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span>  </span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Bitmap</span> <span class="token function">KiResizeImage</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span> bmp<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> newW<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> newH<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token class-name">Bitmap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bitmap</span><span class="token punctuation">(</span>newW<span class="token punctuation">,</span> newH<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Graphics</span> g <span class="token operator">=</span> Graphics<span class="token punctuation">.</span><span class="token function">FromImage</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

                g<span class="token punctuation">.</span>InterpolationMode <span class="token operator">=</span> InterpolationMode<span class="token punctuation">.</span>HighQualityBicubic<span class="token punctuation">;</span>

                g<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>bmp<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newW<span class="token punctuation">,</span> newH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bmp<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> bmp<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">,</span> GraphicsUnit<span class="token punctuation">.</span>Pixel<span class="token punctuation">)</span><span class="token punctuation">;</span>
                g<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">return</span> b<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:.88,words:263},t:"图片转base64",y:"a"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/wenjianshangchuan.html",{loader:()=>a(()=>import("./wenjianshangchuan.html-D1WCQMcP.js"),__vite__mapDeps([1334,1])),meta:{a:"azrng",d:16306272e5,l:"2021年9月3日",c:["dotNET"],g:["无"],o:!0,e:`<p>1.fine-uploader上传
可以添加不同的上传样式模板，是一个纯javascript基于浏览器的文件上传库，目前不知道该如何自定义模板。
插件地址：<a href="https://fineuploader.com/" target="_blank" rel="noopener noreferrer">https://fineuploader.com/</a>&nbsp;
2.html5上传
使用jQuery.upload.min.js然后采用base64进行上传，自带的上传不用弄，有bug，所以暂时只能base64上传
3.js上传
页面可能比较简陋
4.原生js压缩图片上传
5.利用KindEditor富文本编辑器自带的上传进行上传图片
6.利用layui的上传接口进行上传
7.webuploader上传，百度团队开发的，兼容ie6&nbsp; 推荐
地址：<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="noopener noreferrer">http://fex.baidu.com/webuploader/</a>
<a href="https://www.cnblogs.com/xiongze520/p/10412693.html" target="_blank" rel="noopener noreferrer">大文件分片上传断网续传秒传</a>
8.利用bootstrap的fileinput上传
插件地址：<a href="https://github.com/kartik-v/bootstrap-fileinput" target="_blank" rel="noopener noreferrer">https://github.com/kartik-v/bootstrap-fileinput</a>
9.Filepond上传图片
没有研究透，还不能用
对于ie方面，要求ie11，并且需要安装<a href="https://github.com/pqina/filepond-polyfill/tree/master/dist" target="_blank" rel="noopener noreferrer">filepond-polyfill</a>文件。
插件地址：<a href="http://f2ex.cn/filepond-javascript-file-upload-library/" target="_blank" rel="noopener noreferrer">http://f2ex.cn/filepond-javascript-file-upload-library/</a>
<a href="https://pqina.nl/filepond/" target="_blank" rel="noopener noreferrer">https://pqina.nl/filepond/</a>
10.ajaxfileupload.js上传图片
参考：<a href="https://www.cnblogs.com/linjiqin/p/3530848.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/linjiqin/p/3530848.html</a>
jQuery图片预览插件imgPreview 、拖拽上传与图像预览插件Dropzone.js
&nbsp;
&nbsp;
一般处理程序</p>`,r:{minutes:1.92,words:575},t:"文件上传",y:"a"}}],["/dotnet/webyingyong/webform/xiancheng/dingshiqi.html",{loader:()=>a(()=>import("./dingshiqi.html-D1MeTpXm.js"),__vite__mapDeps([1335,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>System.Threading.Timer定时器，可以定时循环执行一个任务，是在线程上面执行的，具有很少的安全性。他不建议使用Windows窗体，因为他的回调不会在用户界面线程上发生。
定义一个定时变量器
static System.Threading.Timer timer;
创建一个定时器
timer = new System.Threading.Timer(chang, null, 5000, 2000);
第一个是调用的方法，第三个是多久以后开始调用，第四个是隔多久调用一次
关闭定时器
timer.Dispose();
&nbsp;
System.Windows.Forms.Timer 是使用 Windows 窗体的更好选择。 对于基于服务器的计时器的功能。
&nbsp;
对于基于服务器的计时器的功能，您可以考虑使用 System.Timers.Timer, ，它将引发事件，并具有附加功能。</p>`,r:{minutes:.71,words:212},t:"定时器",y:"a"}}],["/dotnet/webyingyong/webform/xiancheng/jianchandexiancheng.html",{loader:()=>a(()=>import("./jianchandexiancheng.html-rlhyogLi.js"),__vite__mapDeps([1336,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>相互不影响的线程：
&nbsp; Method1();
&nbsp; Method2();
两个一起执行
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static async Task Method1()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; await Task.Run(() =&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 25; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"Method&nbsp;&nbsp;&nbsp;1 + {i} ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void Method2()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 25; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Method&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 +" + i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;
&nbsp;
方法三需要依赖方法一
callMethod();
方法三等待方法一运行结束</p>`,r:{minutes:.61,words:184},t:"简单的线程",y:"a"}}],["/dotnet/webyingyong/webform/xiancheng/xiancheng.html",{loader:()=>a(()=>import("./xiancheng.html-BxiWBrVQ.js"),__vite__mapDeps([1337,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>多线程是.NET开发非常重要的一块，很多开发者对多线程几乎不用/很畏惧/不明所以，写代码的时候，没有考虑到多线程的场景。
<strong>什么是进程？</strong>
计算机概念，程序在服务器运行占据全部计算机资源的综合，是一种虚拟的概念。
当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。
而一个进程又是由多个线程所组成的。
<strong>什么是线程？</strong>
计算机概念，进程在响应操作时最小单位，也包括CPU、内存、网络、硬盘IO。
线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。
&nbsp;
<strong>什么是多线程？</strong>
<strong>计算机概念，一个进程有多个线程同时运行。</strong>
多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。
一个进程会包含很多个线程；线程是隶属于某个进程，进程毁了线程也就没了。
句柄：其实就是个long数字，是操作系统表示应用程序。
C#里面的多线程？
Thread类，是C#语言对线程对象的一个封装。
为什么可以多线程？
1、多个CPU的核可以并行工作，多个模拟线程
四核八线程，这里面的线程值的是模拟核
2、CPU的分片，1S的处理能力分成1000份，操作系统调度着去响应不同的任务。从宏观角度来说，感觉就是多个任务在并发执行；从微观角度来说，一个物理CPU同一时刻，只能为一个任务服务。
<strong>什么时候用多线程？</strong>
1、一个订单表很耗时间，能不能用多线程去优化下性能呢？
答案是不能的，因为这就是一个操作，没法并行。
2、需要查询数据库/调用接口/读硬盘文件/做数据计算，能不能用多线程优化下性能？
这个是可以的。因为多个任务可以并行的，但是多线程并不是越多越好，因为资源有限，而且调度有损耗，多线程尽量避免使用。
&nbsp;
&nbsp;
&nbsp;
参考资料： <a href="https://www.cnblogs.com/taotaozhuanyong/p/11556910.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/taotaozhuanyong/p/11556910.html</a>
<a href="https://www.cnblogs.com/taotaozhuanyong/p/11559834.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/taotaozhuanyong/p/11559834.html</a></p>`,r:{minutes:2.36,words:707},t:"线程",y:"a"}}],["/dotnet/webyingyong/webform/xiancheng/xianchengthreadhetask.html",{loader:()=>a(()=>import("./xianchengthreadhetask.html-DKEivHXF.js"),__vite__mapDeps([1338,1])),meta:{a:"azrng",d:161352e7,l:"2021年2月17日",c:["dotNET"],g:["无"],o:!0,e:`<p>.NET Framework中的线程分为两类：1.前台线程；2.后台线程。
1.前台线程：
class Program
{
&nbsp;&nbsp;&nbsp; static void Main(string[] args)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("=<mark><mark>Thread</mark></mark>=");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TestThread();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("主线程执行完毕");&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; public static void TestThread()
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread thread = new Thread(PrintNum);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thread.Start();
&nbsp;&nbsp;&nbsp; }
&nbsp;
&nbsp;&nbsp;&nbsp; public static void PrintNum()
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.Sleep(3000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(i);
&nbsp;&nbsp;&nbsp; }
}
主线程虽然执行完毕了，但是并没有退出程序，而是等待子线程执行完毕后，退出程序。
<img src="/common/1613566425572-63c08e76-8ab9-4fcb-8dc1-537a925313c3.png" alt="image.png" loading="lazy">
&nbsp;
2.后台线程
class Program
{
&nbsp;&nbsp;&nbsp; static void Main(string[] args)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("=<mark><mark>ThreadPool</mark></mark>=");
&nbsp;&nbsp;&nbsp; 　　ThreadPool.QueueUserWorkItem(new WaitCallback(PrintNum));
&nbsp;&nbsp;&nbsp; 　　Console.WriteLine("主线程执行完毕");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; public static void PrintNum(object obj)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.Sleep(3000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(i);
&nbsp;&nbsp;&nbsp; }
}
<img src="/common/1613566425574-a98ff84d-8a08-49d5-88d6-4f1f7cbd4ef8.png" alt="image.png" loading="lazy">
主线程运行完毕后，就直接退出了程序，没有等待子线程。
总结：
1.前台线程：主线程执行完毕后，会等待所有子线程执行完毕后，才退出程序。
2.后台线程：主线程执行完毕后，直接退出程序，不论子线程是否执行完毕。
3.推荐：多线程的操作，推荐使用线程池线程而非新建线程。因为就算只是单纯的新建一个线程，这个线程什么事情也不做，都大约需要1M的内存空间来存储执行上下文数据结构，并且线程的创建与回收也需要消耗资源，耗费时间。而线程池的优势在于线程池中的线程是根据需要创建与销毁，是最优的存在。但是这也有个问题，那就是线程池线程都是后台线程，主线程执行完毕后，不会等待后台线程而直接结束程序。所以下面就要引出.NET Framework4.0提供的Task，来解决此类问题。
&nbsp;
&nbsp;
如果一个应用程序接收到很多请求，且处理每个请求都非常耗时。在这种情况下，我们就必须指定一个点来结束请求，当有新的请求进入状态时，没有worker 线程可使用，这种现象称为线程饥饿。</p>`,r:{minutes:1.81,words:544},t:"线程thread和 Task",y:"a"}}],["/dotnet/zhuomianchengxu/winform/blazorhybrid/",{loader:()=>a(()=>import("./index.html-BQqOZG43.js"),__vite__mapDeps([1339,1])),meta:{a:"azrng",d:16816032e5,l:"2023年4月16日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>在winform中嵌套razor页面进行展示</p>
<h2>操作</h2>
<p>新建.net6的winform项目WindowsForms
安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.AspNetCore.Components.WebView.WindowsForms"</span> Version<span class="token operator">=</span><span class="token string">"6.0.541"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.42,words:427},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/shili/winformzhucerejianshixianjietuxiaoguo.html",{loader:()=>a(()=>import("./winformzhucerejianshixianjietuxiaoguo.html-DLcvTI-r.js"),__vite__mapDeps([1340,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>需求</h2>
<p>通过在启动的时候注册热键实现截图效果。</p>
<h2>操作</h2>
<h3>创建依赖类</h3>
<p>首先创建系统API类</p>
<blockquote>
<p>注意：该类中的Keys来自：System.Windows.Forms</p>
</blockquote>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 系统 api</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">WindowsAPI</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置指定窗口的显示状态</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nCmdShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 注册热键</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要定义热键的窗口的句柄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>定义热键ID（不能与其它ID重复）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fsModifiers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标识热键是否在按Alt、Ctrl、Shift、Windows等键时才会生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vk<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>定义热键的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">return</span><span class="token punctuation">:</span> <span class="token class-name">MarshalAs</span><span class="token attribute-arguments"><span class="token punctuation">(</span>UnmanagedType<span class="token punctuation">.</span>Bool<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RegisterHotKey</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">HotkeyModifiers</span> fsModifiers<span class="token punctuation">,</span> <span class="token class-name">Keys</span> vk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 释放热键</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hWnd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要取消热键的窗口的句柄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>要取消热键的ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">UnregisterHotKey</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 组合控制键</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">HotkeyModifiers</span>
<span class="token punctuation">{</span>
    MOD_ALT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    MOD_CONTROL<span class="token punctuation">,</span>
    MOD_SHIFT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MOD_WIN <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Ctrl+ALT</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    MOD_CONTROL_ALT <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.73,words:1120},t:"winform注册热键实现截图效果",y:"a"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/shili/wpfzhucerejianshixianjietuxiaoguo.html",{loader:()=>a(()=>import("./wpfzhucerejianshixianjietuxiaoguo.html-D0GdFn4e.js"),__vite__mapDeps([1341,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>参考文档</h2>
<p>wpf注册热键后处理热键消息：<a href="https://www.cnblogs.com/zhuxiaoxiao/p/11420359.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhuxiaoxiao/p/11420359.html</a></p>
`,r:{minutes:.18,words:55},t:"wpf注册热键实现截图效果",y:"a"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/dengluxiaoguo.html",{loader:()=>a(()=>import("./dengluxiaoguo.html-DJEoRnlr.js"),__vite__mapDeps([1342,1])),meta:{a:"azrng",d:16831584e5,l:"2023年5月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>通过一个登录的模态窗体，阻塞后台操作，登录成功继续运行，失败退出进程。登录成功后要保存登录用户信息。</p>
<h2>操作</h2>
<p>在项目里面新建Common静态类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户信息类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户Id</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 登录时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DateTime</span> LoginTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 公共配置</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Common</span>
<span class="token punctuation">{</span>
    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token return-type class-name">User<span class="token punctuation">?</span></span> CurrentUser <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.78,words:234},t:"登录效果",y:"a"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/guanliyuanfangshiqidongbingjudaiquanjulanjie.html",{loader:()=>a(()=>import("./guanliyuanfangshiqidongbingjudaiquanjulanjie.html-BhDm8oSr.js"),__vite__mapDeps([1343,1])),meta:{a:"azrng",d:16832448e5,l:"2023年5月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>包含让程序以管理员的方式启动以及包含全局错误日志拦截</p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Common.Windows.Core"</span> Version<span class="token operator">=</span><span class="token string">"0.0.1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:2.84,words:851},t:"管理员方式启动并且带全局拦截",y:"a"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/jichucaozuo.html",{loader:()=>a(()=>import("./jichucaozuo.html-DOb4z0aE.js"),__vite__mapDeps([1344,1])),meta:{a:"azrng",d:16885152e5,l:"2023年7月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>Main函数</h2>
<h3>入参出参</h3>
<p>在Main方法内接收参数</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">STAThread</span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Main方法中收到的参数：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ApplicationConfiguration<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.39,words:2216},t:"基础操作",y:"a"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/programwenjian.html",{loader:()=>a(()=>import("./programwenjian.html-9y9EUkGQ.js"),__vite__mapDeps([1345,1])),meta:{a:"azrng",d:16823808e5,l:"2023年4月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>文件示例</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///  The main entry point for the application.</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>STAThread<span class="token punctuation">]</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 若要自定义应用程序配置，例如设置高DPI设置或默认字体，</span>
        <span class="token comment">// 看 https://aka.ms/applicationconfiguration.</span>
        ApplicationConfiguration<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.05,words:615},t:"Program文件",y:"a"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/shiyongyilaizhuru.html",{loader:()=>a(()=>import("./shiyongyilaizhuru.html-B77EZj_4.js"),__vite__mapDeps([1346,1])),meta:{a:"azrng",d:16823808e5,l:"2023年4月25日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>关于依赖注入是什么？依赖注入是一种具体的编码技巧，对我来说最明显的就是解决代码的耦合性。</p>
<h2>目的</h2>
<p>ASP.NetCore中本身容器容器已经创建好了，只需要往容器添加服务即可，但是在Winform中默认还是通过new的方式来进行操作的(虽然我已经升级成了.Net6)，最近在把一个开源项目进行增加自用的功能，然后我顺带将原来的NetF升级为NetCore，然后就想用依赖注入方式去试试了。</p>
<blockquote>
<p>C/S代码写的少，如有不对，麻烦指正。</p>
</blockquote>
<h2>操作</h2>
<blockquote>
<p>本文示例环境：VS2022、.Net6</p>
</blockquote>`,r:{minutes:2.48,words:743},t:"使用依赖注入",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichubujushili.html",{loader:()=>a(()=>import("./jichubujushili.html-zMvs0xYq.js"),__vite__mapDeps([1347,1])),meta:{a:"azrng",d:16833312e5,l:"2023年5月6日",c:["dotNET"],g:["无"],o:!0,e:`<h2>示例</h2>
<figure><img src="/common/1682431646958-5fa59a45-3d60-49c7-ab21-76edccb74772.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Window</span>
    x<span class="token punctuation">:</span>Class<span class="token operator">=</span><span class="token string">"WpfApp1.MainWindow"</span>
    xmlns<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
    xmlns<span class="token punctuation">:</span>x<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
    xmlns<span class="token punctuation">:</span>d<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/expression/blend/2008"</span>
    xmlns<span class="token punctuation">:</span>local<span class="token operator">=</span><span class="token string">"clr-namespace:WpfApp1"</span>
    xmlns<span class="token punctuation">:</span>mc<span class="token operator">=</span><span class="token string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
    Title<span class="token operator">=</span><span class="token string">"MainWindow"</span>
    Width<span class="token operator">=</span><span class="token string">"800"</span>
    Height<span class="token operator">=</span><span class="token string">"450"</span>
    mc<span class="token punctuation">:</span>Ignorable<span class="token operator">=</span><span class="token string">"d"</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Grid<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Grid<span class="token punctuation">.</span>RowDefinitions<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">RowDefinition</span> Height<span class="token operator">=</span><span class="token string">"100"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>RowDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token punctuation">.</span>RowDefinitions<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">Border</span> Background<span class="token operator">=</span><span class="token string">"#7372D6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Grid Grid<span class="token punctuation">.</span>Row<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Grid<span class="token punctuation">.</span>ColumnDefinitions<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">ColumnDefinition</span> Width<span class="token operator">=</span><span class="token string">"200"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token punctuation">.</span>ColumnDefinitions<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"0"</span> Background<span class="token operator">=</span><span class="token string">"#0001FC"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Grid Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"1"</span> Margin<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Grid<span class="token punctuation">.</span>ColumnDefinitions<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>ColumnDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token punctuation">.</span>ColumnDefinitions<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Grid<span class="token punctuation">.</span>RowDefinitions<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token class-name">RowDefinition</span> Height<span class="token operator">=</span><span class="token string">"0.8*"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>RowDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>RowDefinition <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token punctuation">.</span>RowDefinitions<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"0"</span> Background<span class="token operator">=</span><span class="token string">"Yellow"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"1"</span> Background<span class="token operator">=</span><span class="token string">"#4D9FCA"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"2"</span> Background<span class="token operator">=</span><span class="token string">"#D470CF"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"3"</span> Background<span class="token operator">=</span><span class="token string">"#5AC2B6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>Border Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"4"</span> Background<span class="token operator">=</span><span class="token string">"#D5717E"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>Border
                    Grid<span class="token punctuation">.</span>Row<span class="token operator">=</span><span class="token string">"1"</span>
                    Grid<span class="token punctuation">.</span>ColumnSpan<span class="token operator">=</span><span class="token string">"3"</span>
                    Background<span class="token operator">=</span><span class="token string">"#8F3B82"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>Border
                    Grid<span class="token punctuation">.</span>Row<span class="token operator">=</span><span class="token string">"1"</span>
                    Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"3"</span>
                    Grid<span class="token punctuation">.</span>ColumnSpan<span class="token operator">=</span><span class="token string">"2"</span>
                    Background<span class="token operator">=</span><span class="token string">"#E6E3E6"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>Border
                    Grid<span class="token punctuation">.</span>Row<span class="token operator">=</span><span class="token string">"2"</span>
                    Grid<span class="token punctuation">.</span>ColumnSpan<span class="token operator">=</span><span class="token string">"3"</span>
                    Background<span class="token operator">=</span><span class="token string">"#2D96BE"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

                <span class="token operator">&lt;</span>Border
                    Grid<span class="token punctuation">.</span>Row<span class="token operator">=</span><span class="token string">"2"</span>
                    Grid<span class="token punctuation">.</span>Column<span class="token operator">=</span><span class="token string">"3"</span>
                    Grid<span class="token punctuation">.</span>ColumnSpan<span class="token operator">=</span><span class="token string">"2"</span>
                    Background<span class="token operator">=</span><span class="token string">"#ADB3E1"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

            <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Grid<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Window<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.7,words:510},t:"基础布局示例",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichucaozuo.html",{loader:()=>a(()=>import("./jichucaozuo.html-DZTKy2OF.js"),__vite__mapDeps([1348,1])),meta:{a:"azrng",d:168912e7,l:"2023年7月12日",c:["dotNET"],g:["无"],o:!0,e:`<h2>布局</h2>
<ul>
<li>布局原则
<ul>
<li>一个窗口只能包含一个布局元素，可以使用布局元素嵌套多个元素</li>
<li>一应该显式设置元素尺寸</li>
<li>不应该使用坐标设置元素的位置</li>
<li>可以嵌套布局容器</li>
</ul>
</li>
</ul>
<h3>Grid</h3>
<p>Grid通过自定义行列来进行布局，类似于表格。通过定义Grid的RowDifinitions和ColumnDifinitions来实现对于表格行和列的定义，元素根据附加属性Grid.Row和Grid.Column确定自己的位置。</p>
<h4>行列定义</h4>`,r:{minutes:14.73,words:4420},t:"基础操作",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichukongjian.html",{loader:()=>a(()=>import("./jichukongjian.html-3p9ttTzg.js"),__vite__mapDeps([1349,1])),meta:{a:"azrng",d:16892064e5,l:"2023年7月13日",c:["dotNET"],g:["无"],o:!0,e:`<h2>内容控件</h2>
<h3>Label</h3>
<p>显示文本</p>
<h3>TextBlock</h3>
<p>不允许编辑的静态文本</p>
<h3>Button</h3>
<p>IsCancel属性设置为true时会绑定键盘ESC，按下ESC键相当于点击该button。
IsDefault获取或设置一个值，该值指示是否 Button 是默认按钮。 用户通过按 ENTER 键时调用的默认按钮。
ToolTip标识提示框的内容，可进行嵌套容器显示图片</p>
<h3>TextBox</h3>
<p>输入/编辑的控件</p>
<h4>属性</h4>
<ul>
<li>TextWrapping：文本换行</li>
<li>AcceptsReturn：接受换行的内容</li>
<li>MinHeight：设置最小高度</li>
</ul>`,r:{minutes:3.22,words:967},t:"基础控件",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/kuozhan/congshipinzhongdiqutupian.html",{loader:()=>a(()=>import("./congshipinzhongdiqutupian.html-DLqcBRZK.js"),__vite__mapDeps([1350,1])),meta:{a:"azrng",d:16888608e5,l:"2023年7月9日",c:["dotNET"],g:["无"],o:!0,e:`<p>c#提供了System.Windows.Media.Imaging命名空间中的类，可以很方便地从视频文件中提取图片，以下是一个示例代码：</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging</span><span class="token punctuation">;</span>


<span class="token keyword">namespace</span> <span class="token namespace">ExtractImageFromVideo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">btnExtract_Click</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 打开视频文件</span>
            <span class="token class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span> dlg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>OpenFileDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dlg<span class="token punctuation">.</span>DefaultExt <span class="token operator">=</span> <span class="token string">".mp4"</span><span class="token punctuation">;</span>
            dlg<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">"视频文件 (*.mp4)|*.mp4|所有文件 (*.*)|*.*"</span><span class="token punctuation">;</span>


            <span class="token class-name">Nullable<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> dlg<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 打开视频文件并获取第1帧</span>
                <span class="token class-name"><span class="token keyword">string</span></span> filename <span class="token operator">=</span> dlg<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>
                <span class="token class-name">VideoFrameExtractor</span> extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">VideoFrameExtractor</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">BitmapSource</span> frame <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">GetFrame</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


                <span class="token comment">// 将帧保存为png文件</span>
                <span class="token class-name">PngBitmapEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PngBitmapEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                encoder<span class="token punctuation">.</span>Frames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>BitmapFrame<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>FileStream</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>FileStream</span><span class="token punctuation">(</span><span class="token string">"frame.png"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    encoder<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>


                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"帧已保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoFrameExtractor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Microsoft<span class="token punctuation">.</span>DirectX<span class="token punctuation">.</span>AudioVideoPlayback<span class="token punctuation">.</span>Video</span> video<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Microsoft<span class="token punctuation">.</span>DirectX<span class="token punctuation">.</span>AudioVideoPlayback<span class="token punctuation">.</span>Audio</span> audio<span class="token punctuation">;</span>


        <span class="token keyword">public</span> <span class="token function">VideoFrameExtractor</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filename<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 打开视频文件并获取视频和音频对象</span>
            video <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>DirectX<span class="token punctuation">.</span>AudioVideoPlayback<span class="token punctuation">.</span>Video</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
            audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>DirectX<span class="token punctuation">.</span>AudioVideoPlayback<span class="token punctuation">.</span>Audio</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token return-type class-name">BitmapSource</span> <span class="token function">GetFrame</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> seconds<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 将视频定位到指定时间</span>
            video<span class="token punctuation">.</span>CurrentPosition <span class="token operator">=</span> seconds<span class="token punctuation">;</span>


            <span class="token comment">// 获取当前帧的图像</span>
            <span class="token class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Bitmap</span> bitmap <span class="token operator">=</span> video<span class="token punctuation">.</span>CurrentFrame<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment">// 将Bitmap对象转换为BitmapSource对象</span>
            <span class="token class-name">BitmapSource</span> source <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Interop<span class="token punctuation">.</span>Imaging<span class="token punctuation">.</span><span class="token function">CreateBitmapSourceFromHBitmap</span><span class="token punctuation">(</span>
                bitmap<span class="token punctuation">.</span><span class="token function">GetHbitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span>
                Int32Rect<span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>
                BitmapSizeOptions<span class="token punctuation">.</span><span class="token function">FromEmptyOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token keyword">return</span> source<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 释放视频和音频对象</span>
            video<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            audio<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.5,words:451},t:"从视频中提取图片",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/mvvmzujian/propertychanged_fody.html",{loader:()=>a(()=>import("./propertychanged_fody.html-B3-rGKWc.js"),__vite__mapDeps([1351,1])),meta:{a:"azrng",d:16840224e5,l:"2023年5月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>将属性通知添加到实现 INotifyPropertyChanged 的所有类。</p>
<p>仓库地址：<a href="https://github.com/Fody/PropertyChanged" target="_blank" rel="noopener noreferrer">https://github.com/Fody/PropertyChanged</a></p>
`,r:{minutes:.17,words:50},t:"PropertyChanged.Fody",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/mvvmzujian/",{loader:()=>a(()=>import("./index.html-9HxTpHJb.js"),__vite__mapDeps([1352,1])),meta:{a:"azrng",d:16832448e5,l:"2023年5月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>框架</h2>
<ul>
<li>Prism</li>
<li>CommunityToolkit.Mvvm</li>
<li>reactiveui：<a href="https://www.reactiveui.net/" target="_blank" rel="noopener noreferrer">https://www.reactiveui.net/</a></li>
</ul>
`,r:{minutes:.12,words:35},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/ui/handycontrol.html",{loader:()=>a(()=>import("./handycontrol.html-4xIR-51G.js"),__vite__mapDeps([1353,1])),meta:{a:"azrng",d:16915392e5,l:"2023年8月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>HandyControl是一套WPF控件库，它几乎重写了所有原生样式，同时包含80余款自定义控件（正逐步增加）。</p>
<p>文档地址：<a href="https://handyorg.gitee.io/handycontrol/quick_start/" target="_blank" rel="noopener noreferrer">https://handyorg.gitee.io/handycontrol/quick_start/</a></p>
`,r:{minutes:.24,words:72},t:"HandyControl",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/ui/materialdesign.html",{loader:()=>a(()=>import("./materialdesign.html-B0ywDYV3.js"),__vite__mapDeps([1354,1])),meta:{a:"azrng",d:16862688e5,l:"2023年6月9日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>适用于 Windows 桌面的全面且易于使用的 Material Design 主题和控件库。
仓库地址：<a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit" target="_blank" rel="noopener noreferrer">https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit</a></p>
<h2>操作</h2>
<h3>基础配置</h3>
<p>安装nuget包</p>`,r:{minutes:.94,words:283},t:"MaterialDesign",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/ui/rubyer.html",{loader:()=>a(()=>import("./rubyer.html-BFYKRyyu.js"),__vite__mapDeps([1355,1])),meta:{a:"azrng",d:16911936e5,l:"2023年8月5日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>一款的 WPF 主题和控件包，免费开源</p>
<p>仓库地址：<a href="https://gitee.com/wuyanxin1028/rubyer-wpf" target="_blank" rel="noopener noreferrer">https://gitee.com/wuyanxin1028/rubyer-wpf</a></p>
<h2>软件架构</h2>
<p>基于 .Net Framework 4.6 和 .Net Core 3.1 和 .Net 6 的 WPF</p>
<h2>参考资料</h2>
<p>WPF主题和控件包：<a href="https://mp.weixin.qq.com/s/PDItZgdXO9AeON6K6Q4K0A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/PDItZgdXO9AeON6K6Q4K0A</a></p>`,r:{minutes:.28,words:84},t:"Rubyer",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/ui/wpfui.html",{loader:()=>a(()=>import("./wpfui.html-d7SNkd4I.js"),__vite__mapDeps([1356,1])),meta:{a:"azrng",d:168264e7,l:"2023年4月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>WPF UI 是一个基于 C## 开发的, 拥有 4k star 的开源 UI 框架。WPF UI 在 WPF 的基础上，提供了更多的现代化，流利的，直观的设计和组件。重要的是，WPF UI 完全免费！
官网：<a href="https://wpfui.lepo.co/" target="_blank" rel="noopener noreferrer">https://wpfui.lepo.co/</a>
文档地址：<a href="https://wpfui.lepo.co/documentation/" target="_blank" rel="noopener noreferrer">https://wpfui.lepo.co/documentation/</a></p>`,r:{minutes:.34,words:101},t:"WPF UI",y:"a"}}],["/middleware/authorize/identityserver4/mode/clientCredentialsMode.html",{loader:()=>a(()=>import("./clientCredentialsMode.html-D3Ney8Rk.js"),__vite__mapDeps([1357,1])),meta:{a:"azrng",d:16512768e5,l:"2022年4月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>3. 客户端凭证模式</h2>
<p>Client Credentials 客户端凭证模式：客户端（Client）请求授权服务器验证，通过验证就发access token，Client直接以用自己的名义去访问Resource server的一些受保护资源。
该方式是给出的令牌是针对第三方应用的(一个第三方应用访问受保护的资源)，不是针对用户的，所以有可能会多个用户共享这一个令牌。</p>
<blockquote>
<p>注意：不涉及用户信息</p>
</blockquote>
<h3>3.1 适用场景</h3>
<p>这种模式一般只用在服务端与服务端之间的认证</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>适用于没有前端的命令行应用，即在命令行请求令牌
</code></pre></div>`,r:{minutes:5.13,words:1540},t:"客户端凭据模式",y:"a"}}],["/middleware/authorize/identityserver4/mode/codeMode.html",{loader:()=>a(()=>import("./codeMode.html-B8NxjZut.js"),__vite__mapDeps([1358,1])),meta:{a:"azrng",d:16767648e5,l:"2023年2月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>关于简化模式中，通过客户端以浏览器的形式请求「IdentityServer」服务获取访问令牌，从而请求获取受保护的资源，但由于token携带在url中，安全性方面不能保证。因此，我们可以考虑通过其他方式来解决这个问题。
我们通过Oauth2.0的「授权码模式」了解，这种模式不同于简化模式，「在于授权码模式不直接返回token，而是先返回一个授权码，然后再根据这个授权码去请求token」。这显得更为安全。
所以在这一篇中，我们将通过多种授权模式中的「授权码」模式进行说明，主要针对介绍「IdentityServer」保护API的资源，「授权码」访问API资源。</p>`,r:{minutes:11.93,words:3580},t:"授权码模式",y:"a"}}],["/middleware/authorize/identityserver4/mode/hybridMode.html",{loader:()=>a(()=>import("./hybridMode.html-Cl-z_ewW.js"),__vite__mapDeps([1359,1])),meta:{a:"azrng",d:16976736e5,l:"2023年10月19日",c:["middleware"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>在上一篇关于授权码模式中， 已经介绍了关于授权码的基本内容，认识到这是一个拥有更为安全的机制,但这个仍然存在局限，虽然在文中我们说到通过后端的方式去获取token,这种由web服务器和授权服务器直接通信，不需要经过用户的浏览器或者其他的地方，但是在这种模式中，授权码仍然是通过前端通道进行传递的，而且在访问资源的中，也会将访问令牌暴露给外界，就仍存在安全隐患。</p>
<p>在几篇关于授权模式篇章中，其中我们也使用了关于OpenID Connect的简化流程，在简化流程中，所有令牌（身份令牌、访问令牌）都通过浏览器传输，这对于<strong>身份令牌（IdentityToken）</strong>「来说是没有问题的，但是如果是」<strong>访问令牌（AccessToken</strong>）直接通过浏览器传输，就增加了一定的安全问题。因为访问令牌比身份令牌更敏感，在非必须的情况下，我们不希望将它们暴露给外界。
所以我们就会考虑增加安全性，在OpenID Connect 包含一个名为“Hybrid（混合）”的流程，它为我们提供了两全其美的优势，身份令牌通过浏览器传输，因此客户端可以在进行任何更多工作之前对其进行验证。如果验证成功，客户端会通过令牌服务的以获取访问令牌。</p>`,r:{minutes:10.74,words:3223},t:"混合模式",y:"a"}}],["/middleware/authorize/identityserver4/mode/implicitMode.html",{loader:()=>a(()=>import("./implicitMode.html-B5Yi0eVg.js"),__vite__mapDeps([1360,1])),meta:{a:"azrng",d:16514496e5,l:"2022年5月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>5. 简化模式</h2>
<blockquote>
<p>有些 Web 应用是纯前端应用，没有后端，必须将令牌储存在前端。RFC 6749 就规定了这种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）"简化"（implicit）。</p>
</blockquote>
<p>「简化模式」（implicit grant type）「不通过第三方应用程序的服务器」，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤(授权码模式后续会说明)。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p>
<blockquote>
<p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>
</blockquote>`,r:{minutes:9.07,words:2720},t:"简化模式",y:"a"}}],["/middleware/authorize/identityserver4/mode/resourceOwnerPasswordMode.html",{loader:()=>a(()=>import("./resourceOwnerPasswordMode.html-lXHko9Qm.js"),__vite__mapDeps([1361,1])),meta:{a:"azrng",d:16512768e5,l:"2022年4月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>4. 资源密码凭据模式</h2>
<p>如果你高度信任某个应用Client，也允许用户把用户名和密码，直接告诉该应用Client。该应用Client就使用你的密码，申请令牌，这种方式称为"密码式"（password）。</p>
<h3>4.1 适用场景</h3>
<p>资源所有者密码凭证授权模式，适用于当资源所有者与客户端具有良好信任关系的场景，比如客户端是设备的操作系统或具备高权限的应用。授权服务器在开放此种授权模式时必须格外小心，并且只有在别的模式不可用时才允许这种模式。</p>
<blockquote>
<p>这种模式下，应用client可能存了用户密码这不安全性问题，所以才需要高可信的应用。
主要适用于用来做遗留项目升级为oauth2的适配授权使用，当然如果client是自家的应用，也是可以的，同时支持refresh token。
例如，A站点 需要添加了 OAuth 2.0 作为对其现有基础架构的一个授权机制。对于现有的客户端转变为这种授权方案，资源所有者密码凭据授权将是最方便的，因为他们只需使用现有的帐户详细信息（比如用户名和密码）来获取访问令牌。</p>
</blockquote>`,r:{minutes:7.08,words:2124},t:"资源密码凭据模式",y:"a"}}],["/middleware/reverseProxy/nginx/anzhuang/dockeranzhuangnginx.html",{loader:()=>a(()=>import("./dockeranzhuangnginx.html-BaAiMwPi.js"),__vite__mapDeps([1362,1])),meta:{a:"azrng",d:16952544e5,l:"2023年9月21日",c:["middleware"],g:["无"],o:!0,e:`<h2>docker安装</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 拉取镜像</span>
<span class="token function">docker</span> pull nginx

<span class="token comment">## 启动nginx容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">--name</span> hellonginx nginx

<span class="token comment">## 进入nginx容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginx <span class="token function">bash</span>
<span class="token comment">## Nginx.conf文件分为http块  events块 server块 </span>
 
<span class="token comment">## 如果nginx容器使用vi或者vim，需要执行命令安装</span>
<span class="token function">apt-get</span> update
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span> 
</code></pre></div>`,r:{minutes:.44,words:131},t:"docker安装nginx",y:"a"}}],["/middleware/reverseProxy/nginx/anzhuang/linuxanzhuangnginx.html",{loader:()=>a(()=>import("./linuxanzhuangnginx.html-MD2qHKYS.js"),__vite__mapDeps([1363,1])),meta:{a:"azrng",d:16410816e5,l:"2022年1月2日",c:["middleware"],g:["无"],o:!0,e:`<p>yum下载nginx
先安装epel
命令：sudo yum -y install epel-release
安装nginx
命令：sudo yum -y install nginx
设置开机自启
命令：sudo systemctl enable nginx
启动服务
命令：sudo systemctl start nginx
禁止开机自启
命令：systemctl disable nginx&nbsp;
查看运行状态
命令：systemctl status nginx&nbsp;&nbsp;&nbsp;&nbsp;
重启服务
命令：systemctl restart nginx&nbsp;
查看nginx进程
命令：ps aux | grep nginx</p>`,r:{minutes:.46,words:137},t:"linux安装Nginx",y:"a"}}],["/middleware/reverseProxy/nginx/anzhuang/windowsanzhuangnginx.html",{loader:()=>a(()=>import("./windowsanzhuangnginx.html-BVWtMJxM.js"),__vite__mapDeps([1364,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>官网下载：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/download.html</a></p>
<p>下载好以后解压到指定盘符，然后在目录下使用cmd执行
命令：start nginx.exe
停止服务
命令：nginx -s stop
重新加载配置
命令：nginx -s  reload</p>
`,r:{minutes:.28,words:85},t:"windows安装Nginx",y:"a"}}],["/middleware/reverseProxy/nginx/webui/nginxconfig.html",{loader:()=>a(()=>import("./nginxconfig.html-BAobeoCV.js"),__vite__mapDeps([1365,1])),meta:{a:"azrng",d:1667088e6,l:"2022年10月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>NginxConfig 是由服务器提供商 DigitalOcean 发布，并且是开源和免费的， NginxConfig 提供了一个友好的前台页面，支持多种语言，点点鼠标就能快速生成一份适合自己的网站的 Nginx 配置，大大提高了效率。
仓库地址：<a href="https://github.com/digitalocean/nginxconfig.io" target="_blank" rel="noopener noreferrer">https://github.com/digitalocean/nginxconfig.io</a></p>
`,r:{minutes:.35,words:105},t:"NginxConfig",y:"a"}}],["/middleware/reverseProxy/nginx/webui/nginxwebui.html",{loader:()=>a(()=>import("./nginxwebui.html-BSHZMRLC.js"),__vite__mapDeps([1366,1])),meta:{a:"azrng",d:16961184e5,l:"2023年10月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>部署</h2>
<p>docker部署</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginxwebui <span class="token punctuation">-</span>itd <span class="token punctuation">-</span>v /root/nginxWebUI<span class="token punctuation">:</span>/home/nginxWebUI <span class="token punctuation">-</span>v /var/net<span class="token punctuation">:</span>/home/nginxWebUI/data <span class="token punctuation">-</span>e BOOT_OPTIONS="<span class="token punctuation">-</span><span class="token punctuation">-</span>server.port=9008" <span class="token punctuation">-</span><span class="token punctuation">-</span>privileged=true <span class="token punctuation">-</span><span class="token punctuation">-</span>net=host  cym1102/nginxwebui<span class="token punctuation">:</span>latest
</code></pre></div>`,r:{minutes:.67,words:200},t:"NginxWebUI",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/efk.html",{loader:()=>a(()=>import("./efk.html-BSZpnfFs.js"),__vite__mapDeps([1367,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<h2>安装</h2>
<p>生成elasticsearch和kibana</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>version<span class="token punctuation">:</span> '<span class="token number">3.1</span>'

services<span class="token punctuation">:</span>

  elasticsearch<span class="token punctuation">:</span>
   container_name<span class="token punctuation">:</span> <span class="token class-name">elasticsearch</span>
   image<span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span><span class="token number">7.6</span><span class="token number">.2</span>
   ports<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token number">9200</span><span class="token punctuation">:</span><span class="token number">9200</span>
   volumes<span class="token punctuation">:</span>
    <span class="token operator">-</span> elasticsearch<span class="token operator">-</span>data<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>elasticsearch<span class="token operator">/</span><span class="token class-name">data</span>
   environment<span class="token punctuation">:</span>
    <span class="token operator">-</span> xpack<span class="token punctuation">.</span>monitoring<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">true</span>
    <span class="token operator">-</span> xpack<span class="token punctuation">.</span>watcher<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">false</span>
    <span class="token operator">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms1g -Xmx1g"</span>
    <span class="token operator">-</span> discovery<span class="token punctuation">.</span>type<span class="token operator">=</span>single<span class="token operator">-</span><span class="token class-name">node</span>
   networks<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token class-name">elastic</span>

  kibana<span class="token punctuation">:</span>
   container_name<span class="token punctuation">:</span> <span class="token class-name">kibana</span>
   image<span class="token punctuation">:</span> kibana<span class="token punctuation">:</span><span class="token number">7.6</span><span class="token number">.2</span>
   ports<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token number">5601</span><span class="token punctuation">:</span><span class="token number">5601</span>
   depends_on<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token class-name">elasticsearch</span>
   environment<span class="token punctuation">:</span>
    <span class="token operator">-</span> ELASTICSEARCH_URL<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9200</span>
   networks<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token class-name">elastic</span>
  
networks<span class="token punctuation">:</span>
  elastic<span class="token punctuation">:</span>
    driver<span class="token punctuation">:</span> bridge
</code></pre></div>`,r:{minutes:.33,words:100},t:"分布式日志-EFK",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/elk.html",{loader:()=>a(()=>import("./elk.html-DhZ_4xnJ.js"),__vite__mapDeps([1368,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>ELK 是Elastic公司提供的一套<strong>完整的日志收集以及展示的解决方案</strong>，是三个产品的首字母缩写，分别是<strong>ElasticSearch</strong>、<strong>Logstash</strong>&nbsp;和&nbsp;<strong>Kibana</strong>。</p>
<ul>
<li>Elasticsearch是实时全文搜索和分析引擎，提供搜集、分析、存储数据三大功能</li>
<li>Logstash是一个用来搜集、分析、过滤日志的工具</li>
<li>Kibana是一个基于Web的图形界面，用于搜索、分析和可视化存储在      Elasticsearch指标中的日志数据</li>
</ul>`,r:{minutes:7.95,words:2385},t:"分布式日志-ELK",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/exceptionless.html",{loader:()=>a(()=>import("./exceptionless.html-C2ciC-Tk.js"),__vite__mapDeps([1369,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>为您提供跟踪错误，日志和事件的工具，同时指导您寻求可行的解决方案。开源的实时的微服务日志收集框架。</p>
<h3>组成</h3>
<ul>
<li>WebUI</li>
<li>WebAPI</li>
<li>BackgroudTask</li>
</ul>
<p>通过这三部分组成，分别是可视化的UI视图，webapi(主要用于程序发送日志和提供WebUI所需要的接口)，后台任务(发送日志到es，跑webhook等)</p>
<h2>使用方式</h2>
<ul>
<li>在官方创建帐号，并新建应用程序以及项目，然后生成apikey</li>
</ul>
<p>参考文档：<a href="https://www.cnblogs.com/Leo_wl/p/11068336.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/Leo_wl/p/11068336.html</a></p>`,r:{minutes:.96,words:288},t:"分布式日志-Exceptionless",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/loki.html",{loader:()=>a(()=>import("./loki.html-CihwLMYJ.js"),__vite__mapDeps([1370,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>一个轻量级的日志系统，受到Prometheus项目的启发，由Grafana团队设计和开发，所以在Grafana中是原生支持的，具有可水平扩展，高度可用等特性，通过存储压缩的、非结构化的日志以及仅索引元数据，更加易于操作并且运行成本更低。</p>
<h2>参考资料</h2>
<p><a href="https://www.cnblogs.com/myshowtime/p/14775585.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/myshowtime/p/14775585.html</a></p>`,r:{minutes:.41,words:123},t:"Loki",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/",{loader:()=>a(()=>import("./index.html-Chr81ma_.js"),__vite__mapDeps([1371,1])),meta:{a:"azrng",d:1702512e6,l:"2023年12月14日",c:["middleware"],g:["logger"],o:!0,e:`<h2>其他日志组件</h2>
<h3>ClickVisual</h3>
<p>轻量级日志查询、分析、报警可视化平台。</p>
<p>地址：https://clickvisual.net/zh/</p>
`,r:{minutes:.16,words:47},t:"说明",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/seq.html",{loader:()=>a(()=>import("./seq.html-DSWHgsim.js"),__vite__mapDeps([1372,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Seq是由 Serilog 的作者创建的免费（供本地使用）日志记录工具。它提供高级搜索和过滤功能以及对结构化日志数据的完全访问。虽然我们的日志记录要求现在超出了 Seq 所能提供的范围，但它仍然是本地测试的一个很好的选择。
官网：<a href="https://datalust.co/seq" target="_blank" rel="noopener noreferrer">https://datalust.co/seq</a>
文档：<a href="https://docs.datalust.co/docs" target="_blank" rel="noopener noreferrer">https://docs.datalust.co/docs</a></p>`,r:{minutes:1.32,words:395},t:"Seq",y:"a"}}],["/middleware/smallService/distributedObservability/distributedLogger/splunk.html",{loader:()=>a(()=>import("./splunk.html-BlZAXWiS.js"),__vite__mapDeps([1373,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<p>一个托管的日志文件管理工具，主要功能有</p>
<ul>
<li>日志聚合功能</li>
<li>搜索功能</li>
<li>提取意义</li>
<li>对结果进行分组，联合，拆分和格式化</li>
<li>可视化功能</li>
<li>电子邮件提醒功能</li>
</ul>
`,r:{minutes:.28,words:85},t:"Splunk",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/czgl_processmetrics.html",{loader:()=>a(()=>import("./czgl_processmetrics.html-BjjA4Xlc.js"),__vite__mapDeps([1374,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>CZGL.ProcessMetrics 是一个 Metrics 库，能够将程序的 GC、CPU、内存、机器网络、磁盘空间等信息记录下来，使用 Prometheus 采集信息，然后使用 Grafana 显示。
地址：<a href="https://github.com/whuanle/CZGL.SystemInfo" target="_blank" rel="noopener noreferrer">https://github.com/whuanle/CZGL.SystemInfo</a></p>
<h2>操作</h2>
<p>引用组件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CZGL<span class="token punctuation">.</span>ProcessMetrics<span class="token punctuation">.</span>ASPNETCore
</code></pre></div>`,r:{minutes:.37,words:110},t:"CZGL.ProcessMetrics",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/grafana.html",{loader:()=>a(()=>import("./grafana.html-D0zTMX0K.js"),__vite__mapDeps([1375,1])),meta:{a:"azrng",d:1690416e6,l:"2023年7月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点：
1、展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；
2、数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等；
3、通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知；
4、混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源；
5、注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记；
6、过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。
官网：<a href="https://grafana.com/docs/grafana/v7.5/getting-started/" target="_blank" rel="noopener noreferrer">https://grafana.com/docs/grafana/v7.5/getting-started/</a></p>`,r:{minutes:3.19,words:958},t:"Grafana",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/jitongjiankonghttpreportsapm.html",{loader:()=>a(()=>import("./jitongjiankonghttpreportsapm.html-4iY0ZgBx.js"),__vite__mapDeps([1376,1])),meta:{a:"azrng",d:16957728e5,l:"2023年9月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>1. 说明</h2>
<p>HttpReports 基于.NET Core 开发的APM监控系统，使用MIT开源协议，主要功能包括，统计, 分析, 可视化， 监控，追踪等，适合在中小项目中使用。</p>
<figure><img src="/common/1614927187309-f9906533-1844-4204-86be-23557f142bc1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>2. 操作</h2>
<h3>2.1 部署</h3>
<h4>2.1.1 部署监控系统</h4>`,r:{minutes:1.35,words:406},t:"系统监控HttpReports APM",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html",{loader:()=>a(()=>import("./opentelemetry.html-BgpHupTJ.js"),__vite__mapDeps([1377,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["OpenTelemetry"],o:!0,e:`<h2>概述</h2>
<p>OpenTelemetry 是一个功能强大的观测性框架。在 OpenTelemetry 中，跟踪信息通过上下文对象传递，这个上下文对象可以被嵌入到各个调用中，从而实现跨服务的跟踪传递。</p>
<p>OpenTelemetry 的自身定位很明确：数据采集和标准规范的统一，对于数据如何去使用、存储、展示、告警，官方是不涉及的。
OpenTelemetry 要解决的是对可观测性的大一统，它提供了一组 API 和 SDK 来标准化遥测数据的采集和传输，OpenTelemetry 并不想对所有的组件都进行重写，而是最大程度复用目前业界在各大领域常用工具，通过提供了一个安全，厂商中立的能用协议、组件，这样就可以按照需要形成 pipeline 将数据发往不同的后端。<br>
官网：<a href="https://opentelemetry.io/" target="_blank" rel="noopener noreferrer">https://opentelemetry.io/</a></p>`,r:{minutes:3.1,words:930},t:"OpenTelemetry说明",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/openTelemetryStartedCombat.html",{loader:()=>a(()=>import("./openTelemetryStartedCombat.html-BwjwtBUB.js"),__vite__mapDeps([1378,1])),meta:{a:"azrng",d:16959456e5,l:"2023年9月29日",c:["middleware"],g:["OpenTelemetry"],o:!0,e:`<h2>工具介绍</h2>
<p>注意：该部分介绍摘抄自：<a href="https://www.aiwanyun.cn/archives/174" target="_blank" rel="noopener noreferrer">https://www.aiwanyun.cn/archives/174</a></p>
<p>Prometheus、Grafana、Node Exporter 和Alertmanager是一组用于监控和可视化系统性能的开源工具。它们通常一起使用，形成一个强大的完整的监控和告警系统。 一般来说，这四个工具一起协作，形成了一个完整的监控和告警系统。Node Exporter用于收集主机级别的指标(本文暂未使用)，Prometheus存储和查询这些指标，Grafana提供可视化界面，而Alertmanager则负责管理和发送告警。整个系统的目标是帮助管理员和开发人员实时了解系统的状态、性能和健康状况，并在必要时采取措施。</p>`,r:{minutes:5.2,words:1561},t:"OpenTelemetry快速开始",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/prometheus.html",{loader:()=>a(()=>import("./prometheus.html-B2ytroaY.js"),__vite__mapDeps([1379,1])),meta:{a:"azrng",d:16957728e5,l:"2023年9月27日",c:["middleware"],g:["监控"],o:!0,e:`<h2>概述</h2>
<p>Prometheus是一个时间序列数据库。但是，它不仅仅是一个时间序列数据库。它涵盖了可以绑定的整个生态系统工具集及其功能。也是一种开源的系统监控和警报工具。它最初由 SoundCloud 开发，并成为 Cloud Native Computing Foundation（CNCF）的一部分。主要用于对基础设施的监控，包括服务器(CPU、MEM等)、数据库(MYSQL、PostgreSQL等)、Web服务等，几乎所有东西都可以通过Prometheus进行监控。而它的数据，则是通过配置，建立与数据源的联系来获取的。</p>
<h2>特点</h2>
<p>Prometheus 具有以下核心特征：</p>`,r:{minutes:3.79,words:1137},t:"Prometheus",y:"a"}}],["/middleware/smallService/distributedObservability/distributedMonitoring/",{loader:()=>a(()=>import("./index.html-DozYCS8p.js"),__vite__mapDeps([1380,1])),meta:{a:"azrng",d:16957728e5,l:"2023年9月27日",c:["middleware"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>应用的各种Metrics是保证应用健康稳定运行的基础。</p>
<h2>其它组件</h2>
<h3>Opserver</h3>
<p>Opserver 是由大名鼎鼎的 Stack Exchange 团队开发的监控系统，它可以独立监控多个系统， 支持提取有关 CPU、内存、网络和硬件的统计数据。</p>
<p>Opserver 支持跨平台部署，包括 Windows，macOS，Linux。</p>
<ul>
<li>多个监控模块支持，包括 SQLServer、Redis、ElasticSearch、HAProxy 等模块的监控。</li>
<li>多服务器监控，支持通过 Dashboard 仪表盘来查看多个服务器的信息。</li>
<li>支持告警通知，支持通过邮件、Slack、自定义等方式进行警报通知。</li>
<li>支持用户灵活自定义，可以根据自己的需求方便地创建新的监控模块。</li>
</ul>`,r:{minutes:1.12,words:335},t:"说明",y:"a"}}],["/middleware/smallService/distributedObservability/distributedTrace/butterfly.html",{loader:()=>a(()=>import("./butterfly.html-C9WLvVth.js"),__vite__mapDeps([1381,1])),meta:{a:"azrng",d:16507584e5,l:"2022年4月24日",c:["middleware"],g:["无"],o:!0,e:`<p>Butterfly是一个使用Open Tracing规范来设计追踪数据的开源追踪组件，作者是Lemon，我们只需要做很少的配置即可对经过网关的所有API服务进行追踪，现在作者已经不维护Butterfly而是推荐使用skywalking来做生产环境的分布式追踪。
安装
下载最新的release：目前最新是0.0.8 <a href="https://github.com/liuhaoyang/butterfly/releases/tag/preview-0.0.8" target="_blank" rel="noopener noreferrer">https://github.com/liuhaoyang/butterfly/releases/tag/preview-0.0.8</a>
解压通过命令启动：<strong>dotnet Butterfly.Web.dll --EnableHttpCollector=true</strong>
&nbsp;
&nbsp;
使用教程：<a href="https://www.cnblogs.com/edisonchou/p/ocelot_and_butterfly_tracing_foundation.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/edisonchou/p/ocelot_and_butterfly_tracing_foundation.html</a></p>`,r:{minutes:.5,words:150},t:"Butterfly",y:"a"}}],["/middleware/smallService/distributedObservability/distributedTrace/jaeger.html",{loader:()=>a(()=>import("./jaeger.html-CyyGCC8m.js"),__vite__mapDeps([1382,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["middleware"],g:["jaeger"],o:!0,e:`<h2>介绍</h2>
<p>Jaeger 是一个分布式跟踪系统，它基于 OpenTracing 规范进行设计和实现。在 Jaeger 中，跟踪信息通过上下文传递，通常使用父 Span 的上下文作为子 Span 的上下文，并随请求一起传递到下一个服务。</p>
<p>通过在MiniAPI项目中引入Jaeger和OpenTracing的库，来向Jaeger推送跟踪数据，然后通过Jaeger来查看跟踪结果。<br>
文档：<a href="https://www.jaegertracing.io/docs/1.32/" target="_blank" rel="noopener noreferrer">https://www.jaegertracing.io/docs/1.32/</a><br>
下载地址：<a href="https://www.jaegertracing.io/download/" target="_blank" rel="noopener noreferrer">https://www.jaegertracing.io/download/</a></p>`,r:{minutes:.56,words:169},t:"Jaeger",y:"a"}}],["/middleware/smallService/distributedObservability/distributedTrace/",{loader:()=>a(()=>import("./index.html-Cs9WlRcy.js"),__vite__mapDeps([1383,1])),meta:{a:"azrng",d:16495488e5,l:"2022年4月10日",c:["middleware"],g:["无"],o:!0,e:`<h2>资料</h2>
<p>DiagnosticSource DiagnosticListener 无侵入式分布式跟踪：https://mp.weixin.qq.com/s/rhlM-P8pziaPoxE1LkH-Ow</p>
`,r:{minutes:.14,words:43},t:"概述",y:"a"}}],["/middleware/smallService/distributedObservability/distributedTrace/skywalking.html",{loader:()=>a(()=>import("./skywalking.html-B1daKuTj.js"),__vite__mapDeps([1384,1])),meta:{a:"azrng",d:1697328e6,l:"2023年10月15日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<h2>架构简析</h2>
<figure><img src="/common/1644416759609-54d3df8b-31b5-43c4-81d1-f7719ebea1b6.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2>核心组件</h2>
<h4>Skywalking OAP Server</h4>
<p>Skywalking收集器，接受写入请求与UI数据查询。</p>
<h4>Skywalking UI</h4>
<p>有调用链路记录、网络拓扑图、性能指标展示等。</p>`,r:{minutes:.61,words:184},t:"Skywalking",y:"a"}}],["/middleware/smallService/distributedObservability/distributedTrace/zipkin.html",{loader:()=>a(()=>import("./zipkin.html-D6BgzYx_.js"),__vite__mapDeps([1385,1])),meta:{a:"azrng",d:16886016e5,l:"2023年7月6日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Zipkin是由Twitter开源的一款基于Java语言开发的分布式实时数据追踪系统(Distributed Tracking System),其主要功能是采集来自各个系统的实时监控数据。该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈。</p>
<p>相对于SkyWalking来说相对轻量级，使用相对来说比较偏原生的方式，而且支持Http的形式查询和提交链路数据。</p>
`,r:{minutes:.59,words:176},t:"Zipkin",y:"a"}}],["/middleware/testMange/duandaoduanceshi/playwright/bushu.html",{loader:()=>a(()=>import("./bushu.html-CbvVMOZ4.js"),__vite__mapDeps([1386,1])),meta:{a:"azrng",d:16801344e5,l:"2023年3月30日",c:["middleware"],g:["无"],o:!0,e:`<h2>拷贝浏览器</h2>
<p>其实 Playwright 默认是到C:\\Users\\用户名\\AppData\\Local\\ms-playwright文件夹下查找依赖的浏览器，我们只需将本机文件夹复制到部署机器的对应文件夹即可。
但更简便的方式，是将浏览器也放到发布文件夹下一起部署。
操作示例</p>
<ul>
<li>修改代码，设置查询依赖浏览器路径的环境变量</li>
</ul>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>Environment.SetEnvironmentVariable(<span class="token string">"PLAYWRIGHT_BROWSERS_PATH"</span><span class="token punctuation">,</span> Path.Combine(AppDomain.CurrentDomain.BaseDirectory<span class="token punctuation">,</span> <span class="token string">"ms-playwright"</span>));
<span class="token comment">//正式执行</span>
using var playwright = await Playwright.CreateAsync();
</code></pre></div>`,r:{minutes:1.54,words:463},t:"部署",y:"a"}}],["/middleware/testMange/duandaoduanceshi/playwright/caozuo.html",{loader:()=>a(()=>import("./caozuo.html-cyS5LM9I.js"),__vite__mapDeps([1387,1])),meta:{a:"azrng",d:16943904e5,l:"2023年9月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>快速上手</h2>
<p>创建一个控制台项目，然后安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Microsoft.Playwright"</span> Version<span class="token operator">=</span><span class="token string">"1.30.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:3.12,words:935},t:"操作",y:"a"}}],["/middleware/testMange/duandaoduanceshi/playwright/",{loader:()=>a(()=>import("./index.html-CAeutHQN.js"),__vite__mapDeps([1388,1])),meta:{a:"azrng",d:16943904e5,l:"2023年9月11日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Playwright 是微软开源的一个基于 Node.js 的工具库，可使用相同的API调用Chromium（Google-Chrome、Microsoft-Edge）、WebKit（Apple-Safari）和Mozilla-Firefox浏览器自动执行任务。
仓库：<a href="https://github.com/microsoft/playwright-dotnet" target="_blank" rel="noopener noreferrer">https://github.com/microsoft/playwright-dotnet</a>
文档：<a href="https://playwright.dev/dotnet/docs/intro" target="_blank" rel="noopener noreferrer">https://playwright.dev/dotnet/docs/intro</a></p>`,r:{minutes:3.76,words:1128},t:"说明",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/anzhuang/dockeranzhuangrabbitmq.html",{loader:()=>a(()=>import("./dockeranzhuangrabbitmq.html-Cj7RJB5K.js"),__vite__mapDeps([1389,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<blockquote>
<p>前提环境是已经安装了docker-comnpose</p>
</blockquote>
<p>新建一个docker-compose文件
内容为：</p>
<div class="language-python" data-ext="py" data-title="py"><pre class="language-python"><code>version<span class="token punctuation">:</span> <span class="token string">'3.4'</span>
 
services<span class="token punctuation">:</span>
  rabbitmq<span class="token punctuation">:</span>
    container_name<span class="token punctuation">:</span> eventbus<span class="token operator">-</span>rabbitmq
    image<span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">-</span>management<span class="token operator">-</span>alpine
    restart<span class="token punctuation">:</span> always
    ports<span class="token punctuation">:</span> 
      <span class="token operator">-</span> <span class="token string">"15672:15672"</span> 
      <span class="token operator">-</span> <span class="token string">"5672:5672"</span>   
    environment<span class="token punctuation">:</span>
      RABBITMQ_DEFAULT_VHOST<span class="token punctuation">:</span> myQueue
      RABBITMQ_DEFAULT_USER<span class="token punctuation">:</span> admin
      RABBITMQ_DEFAULT_PASS<span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre></div>`,r:{minutes:.26,words:78},t:"docker安装rabbitmq",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/anzhuang/linuxanzhuangrabbitmq.html",{loader:()=>a(()=>import("./linuxanzhuangrabbitmq.html-DHL2Lh4-.js"),__vite__mapDeps([1390,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<p>启动RabbitMQ服务
#service rabbitmq-server start
状态查看
#rabbitmqctl status
启用插件
#rabbitmq-plugins enable rabbitmq_management
重启服务
#service rabbitmq-server restart
添加帐号:name 密码:passwd
#rabbitmqctl add_user name passwd
赋予其administrator角色
#rabbitmqctl set_user_tags name administrator
设置权限
#rabbitmqctl set_permissions -p / name ".<em>" ".</em>" ".*"
&nbsp;
教程：<a href="https://www.cnblogs.com/justuntil/p/11126591.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/justuntil/p/11126591.html</a></p>`,r:{minutes:.33,words:99},t:"linux安装rabbitmq",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/anzhuang/windowsanzhuangrabbitmq.html",{loader:()=>a(()=>import("./windowsanzhuangrabbitmq.html-DBgLhVNR.js"),__vite__mapDeps([1391,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<p>1.下载ERLANG和RabbitMQ
注意点：版本不同是不能互相兼容的，博主选的是RabbitMQ3.7.9和ERLANG：20.0.x，具体参考<a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener noreferrer">官网</a>说明
我准备选择rabbitMQ3.7.15加上 ERLANG20.3
下载地址：<a href="https://www.erlang.org/downloads/20.3" target="_blank" rel="noopener noreferrer">https://www.erlang.org/downloads/20.3</a> &nbsp;&nbsp;&nbsp; <a href="https://www.rabbitmq.com/install-windows.html#installer" target="_blank" rel="noopener noreferrer">https://www.rabbitmq.com/install-windows.html#installer</a>
2.ERLANG安装步骤和RabbitMQ的安装步骤可以查看博客，非常简单，一般就是一路下一步
注意：要记住安装的目录
3.安装完成后需要手动设置ERLANG的系统变量
现在用命令创建：set ERLANG_HOME=D:\\Program Files\\erl9.3
测试，使用cmd命令：erl -version 如果可以正常展示版本号就表示安装已经成功
4.然后我们需要激活Rabbit MQ's Management Plugin
使用Rabbit MQ 管理插件，可以更好的可视化方式查看Rabbit MQ 服务器实例的状态，你可以在命令行中使用下面的命令激活。
输入：rabbitmq-plugins.bat&nbsp; enable &nbsp;rabbitmq_management
<img src="/common/1609400058718-d0d6d189-0330-4585-a94b-ced461cd17c3.png" alt="image.png" loading="lazy">
然后现在需要创建用户和密码以及绑定权限
创建管理用户
rabbitmqctl.bat add_user zyp 123456
设置管理员
rabbitmqctl.bat set_user_tags zyp administrator
设置权限
rabbitmqctl.bat set_permissions -p / zyp ".<em>" ".</em>" ".*"
<img src="/common/1609400058743-ff11b27e-f6e6-49af-9efa-d26bbea73827.png" alt="image.png" loading="lazy">
其他常用的命令
a. 查询用户： rabbitmqctl.bat list_users
b. 查询vhosts： rabbitmqctl.bat list_vhosts
c. 启动RabbitMQ服务: net stop RabbitMQ &amp;&amp; net start RabbitMQ
现在我们登陆RabbitMQ的管理后台http://localhost:15672，密码就用刚才创建的账号登陆系统。
Rabbit MQ 管理后台，可以更好的可视化方式查看RabbitMQ服务器实例的状态。
<img src="/common/1609400058773-b11efb28-6853-4082-b158-3fd5a14242b1.png" alt="image.png" loading="lazy"></p>`,r:{minutes:1.41,words:422},t:"windows安装RabbitMQ",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqsixin.html",{loader:()=>a(()=>import("./rabbitmqsixin.html-W5tjO2T4.js"),__vite__mapDeps([1392,1])),meta:{a:"azrng",d:16803072e5,l:"2023年4月1日",c:["middleware"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>没有消费的消息叫做死信队列
生产者   --&gt;  消息 --&gt; 交换机  --&gt; 队列  --&gt; 变成死信  --&gt; DLX交换机 --&gt;队列 --&gt; 消费者</p>
<h2>概念</h2>
<h3>DLX</h3>
<p>Dead Letter Exchange 的缩写
DLX（Dead Letter Exchanges）死信交换，死信队列本身也是一个普通的消息队列，在创建队列的时候，通过设置一些关键参数，可以将一个普通的消息队列设置为死信队列，与其它消息队列不同的是，其入栈的消息根据入栈时指定的过期时间/被拒绝/超出队列长度被移除，依次被转发到指定的消息队列中进行二次处理。这样说法比较拗口，其原理就是死信队列内位于顶部的消息过期时，该消息将被马上发送到另外一个订阅者（消息队列）中。</p>`,r:{minutes:3.32,words:996},t:"RabbitMQ死信",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqxiaoxikekaoxingfenxiheyingyong.html",{loader:()=>a(()=>import("./rabbitmqxiaoxikekaoxingfenxiheyingyong.html-CDMK56_U.js"),__vite__mapDeps([1393,1])),meta:{a:"azrng",d:16209504e5,l:"2021年5月14日",c:["middleware"],g:["无"],o:!0,e:`<p><strong>RabbitMQ流程简介（带Exchange）</strong>
&nbsp; &nbsp; &nbsp; &nbsp;RabbitMQ使用一些机制来保证可靠性，如持久化、消费确认及发布确认等。
&nbsp; &nbsp; &nbsp; &nbsp;先看以下这个图：
<img src="/common/1609400243138-0d995cac-4498-4c03-a0a1-151e3a3dfdd0.png" alt="image.png" loading="lazy">
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;P为生产者，X为中转站（Exchange），红色部分为消息队列，C1、C2为消费者。
&nbsp; &nbsp; &nbsp; &nbsp;整个流程分成三部分：第一，生产者生产消息，发送到中转站；第二，中转站按定义的规则转发消息到消息队列；第三，消费者从消息队列获取消息进行消费（处理）。
<strong>RabbitMQ消息可靠性分析和应用</strong>
&nbsp; &nbsp; &nbsp; &nbsp;应用代码均使用C#客户端代码实现。
<strong>一、发布确认</strong>
&nbsp; &nbsp; &nbsp; &nbsp;生产者生产消息，发送到中转站的过程中，可能会因为网络丢包、网络故障等问题造成消息丢失。为了确保生产者发送的消息不会丢失，RabbitMQ提供了发布确认（Publisher Confirms）机制，从而提高消息的可靠性（注意：发布确认机制不能和事务机制一起使用）。
**&nbsp; &nbsp; &nbsp; &nbsp;单条消息发布确认：**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.ConfirmSelect();//发布确认机制
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string message = "msg";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var body = Encoding.UTF8.GetBytes(message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.BasicPublish(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exchange: "MarkTopicChange",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; routingKey: "MarkRouteKey.one",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicProperties: null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; body: body
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool isPublished = channel.WaitForConfirms();//通道（channel）里消息发送成功返回true
<img src="/common/1609400243132-e36d5f75-f697-4fd9-b953-dcac59c07e29.gif" alt="image.gif" loading="lazy">
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;使用channel.ConfirmSelect，一旦信道进入确认模式，所有在该信道上面发布的消息都会被指派一个唯一的ID（从1开始）。消息被投递到所有匹配的队列之后，RabbitMQ就会发送（Basic.Ack）给生产者（包含消息的唯一ID），生产者从而知道消息发送成功。
**&nbsp; &nbsp; &nbsp; &nbsp;多条消息发布确认：**
<img src="/common/1609400243178-c3424240-5b6a-426c-94e7-7b07d4fc4c84.gif" alt="image.gif" loading="lazy">
&nbsp;&nbsp;channel.ConfirmSelect();//发布确认机制
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var itemMsg in lstMsg)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] sendBytes = Encoding.UTF8.GetBytes(itemMsg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发布消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.BasicPublish(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exchange: "MarkTopicChange",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; routingKey: "MarkRouteKey.one",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicProperties: null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; body: sendBytes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool isAllPublished = channel.WaitForConfirms();//通道（channel）里所有消息均发送才返回true
<img src="/common/1609400243127-262fc79a-4c12-471c-82b3-d86fb77b6423.gif" alt="image.gif" loading="lazy">
&nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;注意：多消息发布确认机制情况下，倘若要发送100条消息，发送90条后，突然网络故障，后面的消息发送失败了，那么isAllPublished返回的是false，而前面90条消息已经发送到消息队列了。我们还不知道哪些消息是发送失败的，所以很多条消息发布确认，建议分几次发送或多通道发送。
&nbsp; &nbsp; &nbsp; &nbsp;此外，需要确保在中转站（Exchange）的消息可以顺利到达消息队列。
&nbsp; &nbsp; &nbsp; &nbsp;（1）首先需要定义匹配的Exchange和Queue，根据Exchange的类型和routingKey确定转发的关系。
&nbsp; &nbsp; &nbsp; &nbsp;（2）确保消息队列有足够内存存储消息。
&nbsp; &nbsp; &nbsp; &nbsp;RabbitMQ默认配置vm_memory_high_watermark为0.4。意思是控制消息占40%内存左右。vm_memory_high_watermark_paging_ratio为0.5，当消息占用内存超过50%，RabbitMQ会把消息转移到磁盘上以释放内存。当磁盘剩余空间小于阀值disk_free_limit（默认为50M），所有生产者阻塞，避免充满磁盘，导致所有的写操作失败。
&nbsp; &nbsp; &nbsp; &nbsp;RabbitMQ配置文件一般在%APPDATA%\\RabbitMQ\\rabbitmq.config.
&nbsp; &nbsp; &nbsp; &nbsp;%APPDATA% 一般为 C:\\Users%USERNAME%\\AppData\\Roaming（Windows环境）
<strong>二、持久化</strong>
&nbsp; &nbsp; &nbsp; &nbsp;消息存放到消息队列后，在不配置消息持久化的情况下，若服务器重启、关闭或宕机等，消息都会丢失。配置持久化可以有效提高消息的可靠性。持久化需要同时配置消息持久化和队列持久化。单配置消息持久化，队列消失了，消息没有地方存放；单配置队列持久化，队列还在，消息没了。
&nbsp; &nbsp; &nbsp; &nbsp;队列持久化在定义队列时候配置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //定义队列
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.QueueDeclare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; queue: "Mark_Queue", //队列名称
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; durable: true, //队列磁盘持久化 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exclusive: false,//是否排他的，false。如果一个队列声明为排他队列，该队列首次声明它的连接可见，并在连接断开时自动删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; autoDelete: false,//是否自动删除，一般设成false
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arguments: null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );
<img src="/common/1609400243149-6462b212-d0c2-4784-81ad-03e214a3b676.gif" alt="image.gif" loading="lazy">
消息持久化在发布消息时候配置
<img src="/common/1609400243134-9bedb472-37e4-4d09-8dc0-a05ea25323ca.gif" alt="image.gif" loading="lazy">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消息持久化，把DeliveryMode设成2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IBasicProperties properties = channel.CreateBasicProperties();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; properties.DeliveryMode = 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //发布消息
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.BasicPublish(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exchange: "MarkTopicChange",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; routingKey: "MarkRouteKey.one",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicProperties: properties,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; body: sendBytes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );
<img src="/common/1609400243137-574d78ca-f4ce-4962-9b04-2d693ec77c32.gif" alt="image.gif" loading="lazy">
&nbsp; &nbsp; &nbsp; &nbsp;如何配置了事务机制或发布确认（publisher confirm）机制，服务端的返回Basic.Ack是在消息落盘之后执行的，进一步的提高了消息的可靠性。
&nbsp; &nbsp; &nbsp; &nbsp;为了防止磁盘损坏带来的消息丢失，可以配置镜像队列，这里不作介绍。
<strong>三、消费确认</strong>
&nbsp; &nbsp; &nbsp; &nbsp;为了确保消息被消费者消费，RabbitMQ提供消费确认模式（consumer Acknowledgements）。自动确认模式，当消费者<strong>成功接收到</strong>消息后，自动通知RabbitMQ，把消息队列中相应消息删除。这很大程度上满足不了我们，假如消费者接收到消息后，服务器宕机，消息还没处理完成，这样就会造成消息丢失。手动确认模式，当消费者<strong>成功处理完</strong>消息后，手动发消息通知RabbitMQ，把消息队列中相应消息删除。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; consumer.Received += (model, ea) =&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var body = ea.Body;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var message = Encoding.UTF8.GetString(body);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var routingKey = ea.RoutingKey;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(" [x] Received '{0}':'{1}'",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;routingKey,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message);
//确认该消息已被消费,发删除消息给RabbitMQ，把消息队列中的消息删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.BasicAck(ea.DeliveryTag, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消费消息失败，拒绝此消息，重回队列，让它可以继续发送到其他消费者
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//channel.BasicReject(ea.DeliveryTag, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //消费消息失败，拒绝多条消息，重回队列，让它们可以继续发送到其他消费者
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//channel.BasicNack(ea.DeliveryTag, true, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //手动确认消息，把autoAck设成false
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.BasicConsume(queue: "Mark_Queue",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;autoAck: false,
&nbsp; &nbsp; &nbsp; &nbsp;这里值得注意的是，消息处理完成后，一定要把处理完成的消息发送到RabbitMQ（channel.BasicAck(ea.DeliveryTag, false)），不然RabbitMQ会一直等待，从而造成内存泄露。若处理消息过程中发生异常，可以使用channel.BasicReject(ea.DeliveryTag, true)来拒绝此消息，让它重回队列。若RabbitMQ收不到消费者任何确认消息的信号（包括确认信号，拒绝信号灯），直到此消费者断开连接，消息才能重回队列，继续发送到其他消费者。
&nbsp; &nbsp; &nbsp; &nbsp;提醒一下，假如消费者消费消息的方法不支持并发（取决于需求），可以限制消费者每次只接收一条消息。
channel.BasicQos(0, 1, false);</p>`,r:{minutes:5.44,words:1631},t:"RabbitMQ消息可靠性分析和应用",y:"a"}}],["/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqyanchiduilie.html",{loader:()=>a(()=>import("./rabbitmqyanchiduilie.html-Ot7a-t82.js"),__vite__mapDeps([1394,1])),meta:{a:"azrng",d:165672e7,l:"2022年7月2日",c:["middleware"],g:["无"],o:!0,e:`<h2>场景</h2>
<p>比如用户下单，多久之后未支付取消订单等延迟处理的场景。</p>
<h2>操作</h2>
<p>Rabbitmq版本：3.10.5  Erlang版本：24.3.4.2</p>
<blockquote>
<p>下面的例子没有进行封装，所以代码仅供参考</p>
</blockquote>
<h3>安装插件</h3>
<p>要使用rabbitmq做延迟是需要安装插件(rabbitmq_delayed_message_exchange)的，下载地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noopener noreferrer">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases</a>
将下载好的插件(d:/Download/rabbitmq_delayed_message_exchange-3.10.2.ez)映射到容器的plugins目录下：</p>`,r:{minutes:3.37,words:1010},t:"RabbitMQ延迟队列",y:"a"}}],["/soft/devTools/sourceCodeManage/install/linuxanzhuanggit.html",{loader:()=>a(()=>import("./linuxanzhuanggit.html-BeKSzBaP.js"),__vite__mapDeps([1395,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<p>使用yum安装
命令：yum -y install git
查询是否安装成功
命令：git --version
yum安装的目录:/usr/libexec/git-core</p>
<p>linux服务器下记住密码</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>git config <span class="token operator">--</span><span class="token keyword">global</span> credential<span class="token punctuation">.</span>helper store
</code></pre></div>`,r:{minutes:.36,words:109},t:"Linux安装Git",O:1,y:"a"}}],["/soft/devTools/sourceCodeManage/install/windowsanzhuanggit.html",{loader:()=>a(()=>import("./windowsanzhuanggit.html-BvDzwIzL.js"),__vite__mapDeps([1396,1])),meta:{a:"azrng",d:1689984e6,l:"2023年7月22日",c:["Git"],g:["无"],e:`<h2>安装Git</h2>
<p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">https://git-scm.com/downloads</a>
安装该软件基本上一路下一步
<img src="/common/1630077415519-9b09a65e-7577-46eb-bf75-6ea5d2a72587.png" alt="image.png" loading="lazy">
选择要安装的路径，这里我选择安装到D盘
<img src="/common/1630077464698-d2541384-cbd5-4476-b8dd-2ea26b356d74.png" alt="image.png" loading="lazy">
直接下一步
<img src="/common/1630077492432-8c0a6cfc-3066-4d04-9e2b-069c3ae48361.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077512196-06e958c8-43fb-4048-9920-cf400f1f46f3.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077532072-29d7c921-eda2-483a-a20e-e5b744c6a177.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077551148-d21324df-246a-40a3-a818-0032e4b51994.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077599180-3f01ba14-f118-40c6-bad5-2a7d121c93fc.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077616707-0a65f392-ad1c-4396-997a-21c540671c4b.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077634403-8d175237-da42-4efd-bde2-47e19fdbc16e.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077692234-ac8b5372-8d24-4c98-97aa-9aa8da2cf1ab.png" alt="image.png" loading="lazy">
下一步
<img src="/common/1630077706317-3cfae8c1-3fbd-425c-8b81-b19c68664bfe.png" alt="image.png" loading="lazy">
等待安装完成
<img src="/common/1630077738443-0b6592ed-83fe-4e90-baf3-cddef7e9f48c.png" alt="image.png" loading="lazy">
完成界面
<img src="/common/1630077782048-b6e8436e-5b64-486d-9288-ba2de5160d48.png" alt="image.png" loading="lazy">
然后可以右键可以看到这两个就成功了
<img src="/common/1630077822843-2baf01b4-7bdb-4b5e-ae42-11cde8e41056.png" alt="image.png" loading="lazy">
下面我们使用Gitee作为源代码仓库作为演示，没有注册的需要去官方(<a href="https://gitee.com/" target="_blank" rel="noopener noreferrer">https://gitee.com/</a>)注册。</p>`,r:{minutes:4.18,words:1254},t:"Windows安装Git",O:2,y:"a"}}],["/softwareDesign/highQualityCode/designMode/chuangjianxing/factoryMode.html",{loader:()=>a(()=>import("./factoryMode.html-DJNGR8Zi.js"),__vite__mapDeps([1397,1])),meta:{a:"azrng",d:16861824e5,l:"2023年6月8日",c:["软件设计"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>细分可以分为：简单工厂、工厂方法和抽象工厂，在GOF的《设计模式》中简单工厂模式看做是工厂方法模式中的一种特例，所以工厂模式就被分为工厂方法和抽象工厂两类。
在三种细分的工厂模式中：简单工厂和工厂方法原理简单使用广泛，抽象工厂原理稍微复杂，也不常用。</p>
<h2>优点</h2>
<h2>操作</h2>
<h3>简单工厂模式</h3>
<p>使用场景：当每个对象创建逻辑都比较简单的时候，将多个对象的创建逻辑放到一个工厂类中。</p>
<p>举例，比如我需要一个许多读取文件的方法，根据不同的类型去使用不同的读取文件的方法，那么我可以创建一个工厂传入不同的类型来返回我想要的读取文件的方法，操作如下，我创建了一个接口定义读取的行为</p>`,r:{minutes:6.3,words:1890},t:"工厂模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/chuangjianxing/jianzaozhemoshi.html",{loader:()=>a(()=>import("./jianzaozhemoshi.html-CizT8Frx.js"),__vite__mapDeps([1398,1])),meta:{a:"azrng",d:16579296e5,l:"2022年7月16日",c:["软件设计"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>创建型设计模式(Builder)模式，也叫做建造者模式或者构建者模式或者生成器模式。</p>
<h2>为什么需要建造者模式</h2>
<p>举例：我们有一个 ResourcePoolConfig  类,里面包含一堆属性，参数赋值我们起初是用过构造函数赋值，并且将不必须的参数传null来处理</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 资源池配置类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourcePoolConfig</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ResourcePoolConfig</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> maxTotal<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> maxIdle<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> minIdle<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Name<span class="token operator">=</span>name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxTotal<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            MaxTotal<span class="token operator">=</span>maxTotal<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdle<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            MaxIdle<span class="token operator">=</span>maxIdle<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdle<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            MinIdle<span class="token operator">=</span>minIdle<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 资源名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 最大总资源数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MaxTotal <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 最大空闲资源数量</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MaxIdle <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 最小空闲资源数量</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MinIdle <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.17,words:1251},t:"建造者模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/chuangjianxing/singletonMode.html",{loader:()=>a(()=>import("./singletonMode.html-DBv03fSH.js"),__vite__mapDeps([1399,1])),meta:{a:"azrng",d:1692576e6,l:"2023年8月21日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>从本质上看，单例模式只允许被自身实例化一次，且向外部提供一个访问该实例的访问点，并且客户程序在调用某一个类时，它是不会考虑这个类是否只能有一个实例等问题的，所以，这应该是类设计者的责任，而不是类使用者的责任。</p>
<p>用途：有些数据在系统中只应该保存一份，就比较适合设计为单例类。比如系统中的配置信息类，还可以通过单例解决资源访问冲突问题。</p>
<p>总体分两类：懒汉式和饿汉式两类
三种：双判断加锁、静态字段实现、静态构造函数实现。</p>
<h2>如何实现</h2>
<ul>
<li>构造函数需要是private访问权限，这样子避免通过外部new创建实例</li>
<li>考虑对象创建时的线程安全问题</li>
<li>考虑是否支持延迟加载</li>
<li>考虑GetInstance性能是否高(是否加锁)</li>
</ul>`,r:{minutes:8.91,words:2674},t:"单例模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/chuangjianxing/yuanxingmoshi.html",{loader:()=>a(()=>import("./yuanxingmoshi.html-BtNBfSWM.js"),__vite__mapDeps([1400,1])),meta:{a:"azrng",d:1658016e6,l:"2022年7月17日",c:["软件设计"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>原型模式也属于建造型模式。如果一个对象创建成本比较大，而同一个类的不同对象之间差别不大(大部分字段都相同或者完全相同)，在这种情况下，我们可以利用已有对象(原型)进行复制(或者拷贝)的方式，来创建新对象，以达到节省创建时间的目的，这种基于原型来创建对象的方式就叫做原型设计模式，简称原型模式。</p>
<h3>什么叫做创建成本大</h3>
<p>比如一个对象的创建包含申请内存、给成员复制这一个过程，本身并不会花费太多时间，或者说对大部分业务系统来说影响不大，但是如果一个对象的创建过程包含复杂的计算或者需要从网络、数据库、文件系统等比较耗时的步骤创建的，那么就可以利用原型模式，直接从现有对象拷贝得到，而不是创建新对象。</p>`,r:{minutes:2.9,words:871},t:"原型模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/beiwanglumoshi.html",{loader:()=>a(()=>import("./beiwanglumoshi.html-Is2awdnE.js"),__vite__mapDeps([1401,1])),meta:{a:"azrng",d:16801344e5,l:"2023年3月30日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>备忘录模式(Memento Design Pattern)也叫做快照模式，中文的意思就是：在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。
表达了两部分内容：存储副本以便后期恢复使用、要在不违背封装原则的前提下，进行对象的备份和恢复</p>
<p>该模式涉及三个角色：原发器(Originator)、备忘录(Memento)、管理者(Caretaker)。
原发器是一个包含状态的对象，可以创建备忘录并将自己的状态存储在备忘录中。备忘录是一个不可变的对象，它可以存储原发器的状态。管理者是一个对象，它可以存储备忘录并在需要时将其还原到原发器中。
实现步骤如下：</p>`,r:{minutes:4.3,words:1290},t:"备忘录模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/celvemoshi.html",{loader:()=>a(()=>import("./celvemoshi.html-B4sWZysn.js"),__vite__mapDeps([1402,1])),meta:{a:"azrng",d:16759008e5,l:"2023年2月9日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>策略模式(Strategy Design Pattern)定义一组算法类，将每个算法分别封装起来，让他们可以互相替换。策略模式就是可以使算法的变化独立于使用它们的客户端(这里的客户端指使用算法的代码)。</p>
<h2>使用场景</h2>
<p>利用它来避免很长的if-else或switch分支判断，不过它的作用不止于此，还可以像模板模式那样子，提供框架的扩展点。</p>
<h2>对比</h2>
<p>工厂模式：解耦对象的创建和使用
观察者模式：解耦观察者和被观察者
策略模式：也能解耦，但是它解耦的是策略的定义、创建、使用三部分。</p>
<p>策略模式通常和工厂一起配合使用，策略侧重如何灵活选择替换，工厂侧重如何创建实例。</p>`,r:{minutes:4.13,words:1238},t:"策略模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/diedaiqimoshi.html",{loader:()=>a(()=>import("./diedaiqimoshi.html-B8DhCJM3.js"),__vite__mapDeps([1403,1])),meta:{a:"azrng",d:16779744e5,l:"2023年3月5日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>迭代器模式(Iterator Design Pattern)，也叫做游标模式(Cursor Design Pattern)。迭代器模式用来遍历集合对象。
一个完整的迭代器模式一般会涉及容器和容器迭代器两个部分，为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。
迭代器中需要定义hasNext、currentItem、next等三个最基本的方法。</p>
<h2>优势</h2>
<ul>
<li>迭代器封装了集合内部复杂的数据结构，开发者不需要了解如何遍历，直接使用容器提供的迭代器就可以了</li>
<li>迭代器让集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一。</li>
<li>迭代器模式让添加新的遍历算法更加容器，更符合开闭原则。并且迭代器都实现自相同的接口，在开发中，基于接口而非实现编程，替代迭代器也变得更加容易。</li>
</ul>`,r:{minutes:5.86,words:1758},t:"迭代器模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/fangwenzhemoshi.html",{loader:()=>a(()=>import("./fangwenzhemoshi.html-hg5WeRb-.js"),__vite__mapDeps([1404,1])),meta:{a:"azrng",d:16786656e5,l:"2023年3月13日",c:["软件设计"],g:["无"],o:!0,e:`<h2>前言</h2>
<p>访问者模式难理解、难实现，应用它会导致代码的可读性、可维护性变差，所以，访问者模式在实际的软件开发中很少被用到，在没有特别必要的情况下，建议你不要使用访问者模式。</p>
<h2>概述</h2>
<p>访问者模式(Visitor Design Patter)，翻译到中文就是允许一个或者多个操作应用到一组对象上，解耦操作和对象本身。
访问者模式允许一个或者多个操作应用到一个对象上，设计意图是解耦操作和对象本身，保持类职责单一、满足开闭原则以及应对代码的复杂性。</p>
<h2>操作</h2>
<h3>文本提取示例</h3>
<p>我们获得了多个格式的文件，我们需要将里面的内容提取成文本，所以这个时候我们可以写一个抽象类ResourceFile，该类包含一个抽象函数Extract2txt，然后其他的文件格式去继承该ResourceFile类，并且重写抽象函数，然后我们可以利用多态的特性去决定执行哪个方法</p>`,r:{minutes:6.08,words:1823},t:"访问者模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/guanchazhemoshi.html",{loader:()=>a(()=>import("./guanchazhemoshi.html-DalDDPiJ.js"),__vite__mapDeps([1405,1])),meta:{a:"azrng",d:16746912e5,l:"2023年1月26日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>观察者模式是一个比较抽象的模式，根据场景的不同，观察者模式会对应不同的代码实现方式：同步阻塞的实现方式、异步非阻塞的实现方式、进程内的实现方式、跨进程的实现方式。</p>
<p>同步阻塞是最经典的实现方式，主要的为了代码解耦；异步非阻塞除了能实现代码解耦之外还能够提高代码的执行效率；进程间的观察者模式解耦更加彻底，一般是基于消息队列来实现，用来实现不同进程间的观察者和被观察者之间的交互。</p>
<p>观察者模式也叫做发布订阅模式：在对象之间定义一个一对多的依赖，当一个状态改变的时候，所有依赖的对象都会自动收到通知。
被观察者：被依赖的对象
观察者：依赖的对象</p>`,r:{minutes:5.45,words:1635},t:"观察者模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/jieshiqimoshi.html",{loader:()=>a(()=>import("./jieshiqimoshi.html-Dz8rOMEb.js"),__vite__mapDeps([1406,1])),meta:{a:"azrng",d:16909344e5,l:"2023年8月2日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>解释器模式(Interpreter Design Pattern)；解释器模式为某个语言定义它的语法表示，并定义一个解释器用来处理这个语法。</p>
<blockquote>
<p>此处的语言并不是所我们平常所说的中、英、法语等，从广义上讲，只要是能承载信息的载体，我们都可以称之为语言。</p>
</blockquote>
<p>解释器模式就是用来实现根据语法规则解读“内容”的解释器。</p>
<p>使用场景：编译器、规则引擎、正则表达式</p>
<h2>操作</h2>
<h3>举例</h3>
<p>举例一个解释器的操作，假设我们有一个计算加减乘除的语言，然后描述语言是一个字符串，然后前面部分是要计算的值，后面部分是运算符，然后按照先后顺序，取出两个值和一个运算符去计算结果，然后讲结果放到数字的最头部位，循环上面的操作，直到最后剩下一个数字，这个数字就是最终的计算结果，编写示例代码如下</p>`,r:{minutes:6.6,words:1980},t:"解释器模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/minglingmoshi.html",{loader:()=>a(()=>import("./minglingmoshi.html-Cbjuryjf.js"),__vite__mapDeps([1407,1])),meta:{a:"azrng",d:16900704e5,l:"2023年7月23日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>命令模式将请求(命令)封装为一个对象，这样可以使用不同的请求参数化其他对象(将不同请求依赖注入到其他对象)，并且能够支持请求(命令)的排队执行、记录日志、撤销等(附加功能)。</p>
<p>主要作用和场景：控制命令的执行，比如异步、延迟、排队执行命令、撤销重做命令、存储命令、给命名记录日志等等，这就是命令模式发挥作用的地方。</p>
<h2>操作</h2>
<p>比如游戏开发中，客户端和服务端一般采用长连接的方式来进行通信，这个时候客户端给服务器的请求中，一般都包含两部分内容：指令和数据，其中，指令我们可以叫做事件，数据是执行这个指令所需要的数据。</p>
<p>服务器在收到客户端的请求之后，会解析出来指令和数据，并且根据指令的不同，执行不同的处理逻辑。对于这样子的一个业务场景，一般有以下的实现思路</p>`,r:{minutes:2.77,words:830},t:"命令模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/mobanmoshi.html",{loader:()=>a(()=>import("./mobanmoshi.html-OU3ZX_Wr.js"),__vite__mapDeps([1408,1])),meta:{a:"azrng",d:16752096e5,l:"2023年2月1日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>模板模式，全称叫做模板方法设计模式，中文意思就是模板方法模式在一个方法中定义一个算法骨架(广义上的“业务逻辑”)，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中某些步骤。</p>
<p>模板方法建议将算法分解为一系列的步骤，然后将这些步骤改写为方法，最后在“模板方法”中依次调用这些方法，步骤可能是抽象的也可能有一些默认的实现，共有的逻辑编写为默认的实现，将不同的逻辑写为抽象，让子类来实现。</p>
<h2>使用场景</h2>
<ul>
<li>当你希望扩展某一个特定业务逻辑步骤的时候，而不是整个逻辑的时候，可使用模板方法模式
<ul>
<li>将整个逻辑转换为一系列独立的步骤，以便于子类能够对其进行扩展，同时还让基类中所定义的结构保持一致。</li>
</ul>
</li>
<li>当多个类的逻辑除一些细微不同之外几乎完全一样的时候，可以使用模板方法模式，但是缺点是如果这个逻辑发生变化的时候，就有可能需要修改所有的类。
<ul>
<li>将逻辑转换为模板方法的时候，可以将相似的代码提取到基类中来去除重复的代码，子类中保存着各个类不同的代码。</li>
</ul>
</li>
</ul>`,r:{minutes:4.25,words:1275},t:"模板模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/zhizelianmoshi.html",{loader:()=>a(()=>import("./zhizelianmoshi.html-gSekmQcH.js"),__vite__mapDeps([1409,1])),meta:{a:"azrng",d:16763328e5,l:"2023年2月14日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>职责链模式的因为是Chain Of Responsibility Design Pattern，翻译为中文就是：将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这个请求对象串成一条链，并沿着这条链传递这个氢气，直到链上的某个接收对喜感能够处理它为之。</p>
<p>通俗说就是，多个处理的方法依次处理同一个请求，处理完再传递给下一个，此次类推，形成一个链条，链条上每个处理器各自承担各自的处理职责，所以叫做职责链模式。在实际开发的过程中，也存在对这个模式的变体，那就是请求不会中途终止传递，而是会被所有的处理器都处理一遍。</p>
<h2>操作</h2>
`,r:{minutes:5.7,words:1710},t:"职责链模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/zhongjiezhemoshi.html",{loader:()=>a(()=>import("./zhongjiezhemoshi.html-CHdWosE2.js"),__vite__mapDeps([1410,1])),meta:{a:"azrng",d:16917984e5,l:"2023年8月12日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>中介者模式定义了一个单独的(中介)对象，来封装一组对象之间的交互。将这组对象之间的交互委派给中介对象交互，来避免对象之间的直接交互。</p>
<p>实现目的：为了解耦对象之间的交互，所有的参与者都只和中介进行交互。</p>
<p>中介者模式中有下面几个主要的角色：</p>
<ul>
<li>抽象中介者(Mediator)：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之间交互所需要的方法。抽象中介者可以用来集中处理同事对象之间的通信，降低系统的耦合度。</li>
<li>具体中介者(ConcreteMediator)：实现抽象中介者接口，通常包含了一个集合用来存储同事对象，实现同事对象之间的协作。具体中介者需要所有具体的同事类，并从具体同事对象接收消息，向其他具体同事发送命令。</li>
<li>抽象同事类(Colleague)：定义了同事对象的接口，可以是一个抽象类或者接口，其中定义了一些公共的方法和属性。抽象同事类通常持有一个抽象中介者的引用，以便能够将自己的状态变化通知中介者，同时也可以接收中介者发送的消息。</li>
<li>具体同事类(ConcreteColleague)：实现抽象同事类的接口，是实际的参与者，每个具体同事类都需要知道它的中介者对象，并与其进行交互。具体同事类之间的通信都是通过具体中介者来实现的，它们之间不直接交互。</li>
</ul>`,r:{minutes:5.6,words:1679},t:"中介者模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/zhuangtaimoshi.html",{loader:()=>a(()=>import("./zhuangtaimoshi.html-c5yE1OfZ.js"),__vite__mapDeps([1411,1])),meta:{a:"azrng",d:16773696e5,l:"2023年2月26日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>状态模式是状态机的一种实现形式。状态机又叫做有限状态机，三个部分组成：状态、事件、动作。事件也称为转移条件，事件触发状态的转移以及动作的执行，不过动作不是必须的，也可能只转移状态，不执行任何动作。</p>
<h3>使用场景</h3>
<p>状态机常用在游戏、工作流引擎等系统开发中。</p>
<h2>状态机实现</h2>
<p>超级马里奥游戏中，超级马里奥可以变身为多种形态，比如小马里奥(Small Mario)、超级马里奥(Super Mario)、火焰马里奥(Fire Mario)、斗篷马里奥(Cape Mario)等，不同情况下会相互转换，并增加或者减少积分。</p>`,r:{minutes:6.7,words:2010},t:"状态模式",y:"a"}}],["/web/blazor/masablazor/sample/layout.html",{loader:()=>a(()=>import("./layout.html-DBPMVEz9.js"),__vite__mapDeps([1412,1])),meta:{a:"azrng",d:16664832e5,l:"2022年10月23日",c:["web"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@inherits LayoutComponentBase

<span class="token operator">&lt;</span>MApp<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>左边布局<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>MNavigationDrawer App<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token class-name">MSheet</span> Color<span class="token operator">=</span><span class="token string">"grey lighten-4"</span> Class<span class="token operator">=</span><span class="token string">"pa-4"</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>MRow<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">MCol</span> Cols<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>MAvatar<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token class-name">MImage</span> Alt<span class="token operator">=</span><span class="token string">".Net Logo"</span> Src<span class="token operator">=</span><span class="token string">"https://cdn.masastack.com/stack/images/website/masa-blazor/doddgu.png"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MImage<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>MAvatar<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>MCol<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">MCol</span> Align<span class="token operator">=</span><span class="token string">"AlignTypes.Center"</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>知识库<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>MCol<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>MRow<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>MSheet<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>MList Shaped<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>MSubheader<span class="token operator">&gt;</span>菜单列表<span class="token operator">&lt;</span><span class="token operator">/</span>MSubheader<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>MListItemGroup @bind<span class="token operator">-</span>Value<span class="token operator">=</span><span class="token string">"_selectedItem"</span>
                            Color<span class="token operator">=</span><span class="token string">"primary"</span><span class="token operator">&gt;</span>
                @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> _items<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token operator">&lt;</span>MListItem <span class="token class-name">Link</span> Href<span class="token operator">=</span><span class="token string">"@item.Href"</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>MListItemIcon<span class="token operator">&gt;</span>
                            <span class="token operator">&lt;</span>MIcon<span class="token operator">&gt;</span>
                                @item<span class="token punctuation">.</span>Icon
                            <span class="token operator">&lt;</span><span class="token operator">/</span>MIcon<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>MListItemIcon<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>MListItemContent<span class="token operator">&gt;</span>
                            <span class="token operator">&lt;</span>MListItemTitle<span class="token operator">&gt;</span>@item<span class="token punctuation">.</span>Text<span class="token operator">&lt;</span><span class="token operator">/</span>MListItemTitle<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>MListItemContent<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>MListItem<span class="token operator">&gt;</span>
                <span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>MListItemGroup<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>MList<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>MNavigationDrawer<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>右边布局<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>MMain<span class="token operator">&gt;</span>
        @Body
    <span class="token operator">&lt;</span><span class="token operator">/</span>MMain<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>MApp<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">StringNumber</span> _selectedItem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Item<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Item<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
    <span class="token punctuation">{</span>
       <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Item</span> <span class="token punctuation">{</span> Text<span class="token operator">=</span> <span class="token string">"列表1"</span><span class="token punctuation">,</span> Icon<span class="token operator">=</span> <span class="token string">"mdi-clock"</span><span class="token punctuation">,</span>Href<span class="token operator">=</span><span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Item</span> <span class="token punctuation">{</span> Text<span class="token operator">=</span> <span class="token string">"列表2"</span><span class="token punctuation">,</span> Icon<span class="token operator">=</span> <span class="token string">"mdi-account"</span><span class="token punctuation">,</span>Href<span class="token operator">=</span><span class="token string">"Counter"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Item</span> <span class="token punctuation">{</span> Text<span class="token operator">=</span> <span class="token string">"列表3"</span><span class="token punctuation">,</span> Icon<span class="token operator">=</span> <span class="token string">"mdi-flag"</span><span class="token punctuation">,</span>Href<span class="token operator">=</span><span class="token string">"fetchdata"</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">Item</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Icon <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Href <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.61,words:184},t:"点击列表点击右边展示",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/dailimoshi.html",{loader:()=>a(()=>import("./dailimoshi.html-Bs7Od4Qg.js"),__vite__mapDeps([1413,1])),meta:{a:"azrng",d:1666224e6,l:"2022年10月20日",c:["软件设计"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>代理模式(proxy design pattern)是通过引入代码类来给原始类附加功能。</p>
<h2>使用场景</h2>
<ul>
<li>业务系统的非功能性需求开发
<ul>
<li>比如监控、统计、鉴权、限流、事务等</li>
</ul>
</li>
<li>RPC框架也可以看作是一种代理，通过远程单代理，将网络通信、数据编解码等细节隐藏起来，客户端调用就跟使用本地函数一样，无需去了解跟服务器交互的细节。</li>
</ul>
<h2>静态代理</h2>
<p>有一个公共的输出日志监控的类</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 模拟记录日志</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.2,words:961},t:"代理模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/kuopeiqimoshi.html",{loader:()=>a(()=>import("./kuopeiqimoshi.html-cZNXOTus.js"),__vite__mapDeps([1414,1])),meta:{a:"azrng",d:16603488e5,l:"2022年8月13日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>顾名思义，这个模式就是用来做适配的，它用来将不兼容的接口转换为可以兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</p>
<h2>使用场景</h2>
<p>当“现存的对象”在新的环境中，不满足现有的使用要求，那么就需要使用适配器模式来将“现存的对象”适配新的使用需求。</p>
<h2>操作</h2>
<p>适配器模式有两种实现方式：类适配器和对象适配器。</p>
<h3>类适配器</h3>
<p>类适配器使用继承关系来实现。
示例一：在工作中，我们需要调用其他模块的接口，ITarget表示我们需要的接口格式，Adaptee表示第三方/同事提供的接口格式，而Adaptor将Adaptee转换为符合我们ITarget格式的接口。</p>`,r:{minutes:3.65,words:1094},t:"适配器模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/menmianmoshi.html",{loader:()=>a(()=>import("./menmianmoshi.html-DMZ3kOs1.js"),__vite__mapDeps([1415,1])),meta:{a:"azrng",d:166104e7,l:"2022年8月21日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>门面模式也叫做外观模式，定义翻译为中文就是，门面模式为子系统提供一组统一的接口让子系统更易用。</p>
<p>意思就是，原本我们需要调用多个接口，现在利用门面模式，提供一个包裹了之前多个接口的门面接口给其他系统使用。</p>
<h2>使用场景</h2>
<h3>解决易用性问题</h3>
<p>可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如调用系统的函数就可以看做是一种“门面”。它是系统暴露给开发者的一组“特殊”的编程接口。</p>
<h3>解决性能问题</h3>
<p>通过将多个接口调用替换为一个门面接口调用，减少网络通信成本，提高客户端的响应速度。</p>`,r:{minutes:3.78,words:1134},t:"门面模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/qiaojiemoshi.html",{loader:()=>a(()=>import("./qiaojiemoshi.html-C1MunNKR.js"),__vite__mapDeps([1416,1])),meta:{a:"azrng",d:16719264e5,l:"2022年12月25日",c:["软件设计"],g:["无"],o:!0,e:`<h2>简述</h2>
<p>桥接模式，也叫做桥梁模式，翻译为中文就是将抽象和实现部分，让它们可以独立变化。</p>
<p>这里的抽象，并非指的是抽象类或者接口，而是被抽象出来的一套“类库”
这里说的实现，也并非指的“接口的实现类”，而是跟具体的一套“类库”</p>
<h2>使用场景</h2>
<p>利用面向对象的技术来使得类型能够轻松沿着多个方向进行变化，而又不引入额外的复杂度，这就要使用桥接模式。</p>
<h2>实现</h2>
<p>我们要开发一个通用的日志记录工具，他支持数据库记录DataBaseLog和文本记录FileLog两种方式，同时既可以运行在.Net平台上，也可以运行在Java平台上。
所以我们就把不同的日志记录方式分别作为单独的对象来对待，并且为日志记录类抽象出一个基类Log类，各种不同的日志记录方式都继承自该基类：
<img src="/common/1659105919521-ab7fe559-73da-44ac-b90e-7d5fa781e682.png" alt="image.png" loading="lazy"></p>`,r:{minutes:5.66,words:1699},t:"桥接模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/xiangyuanmoshi.html",{loader:()=>a(()=>import("./xiangyuanmoshi.html-_1Ar0Vzx.js"),__vite__mapDeps([1417,1])),meta:{a:"azrng",d:16704576e5,l:"2022年12月8日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>所谓“享元”，就是被共享的单元，也就是复用对象(一个对象被多处代码引用来节省内存中对象的数量来实现节约内存的目的)，前提是享元对象是不可变对象（之所以要求是不可变对象是因为它会被多处代码共享使用，避免一处代码对享元进行了修改而影响其他使用的地方）。</p>
<h2>示例</h2>
<h3>棋盘游戏</h3>
<p>开发一个棋牌游戏（比如象棋）。一个游戏厅中有成千上万个“房间”，每个房 间对应一个棋局。棋局要保存每个棋子的数据，比如：棋子类型（将、相、士、炮等）、棋 子颜色（红方、黑方）、棋子在棋局中的位置。利用这些数据，我们就能显示一个完整的棋 盘给玩家。具体的代码如下所示。其中，ChessPiece 类表示棋子，ChessBoard 类表示一 个棋局，里面保存了象棋中 30 个棋子的信息。</p>`,r:{minutes:6.88,words:2063},t:"享元模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/zhuangshiqimoshi.html",{loader:()=>a(()=>import("./zhuangshiqimoshi.html-BUOTY1RA.js"),__vite__mapDeps([1418,1])),meta:{a:"azrng",d:16719264e5,l:"2022年12月25日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>装饰器模式主要解决继承关系过于复杂的问题，通过组合来替代继承，他的主要作用是给原始类添加增强功能。还有一个特点是可以对原始类嵌套使用多个装饰器，为了满足这个应用场景，在设计的时候，装饰器类需要跟原始类相同的抽象类或者接口。</p>
<blockquote>
<p>装饰器的类是对原有功能的增强，代理模式中，代理类附加的功能是和原始类无关的。</p>
</blockquote>
<h2>使用场景</h2>
<ul>
<li>需要扩展一个类的功能，或者未一个类增加附加的功能。</li>
<li>需要动态地给一个对象增加功能，这些功能可以再动态地撤销。</li>
<li>需要增加由一些基本功能组合而产生的非常大量的功能，从而使得不使用继承。</li>
</ul>`,r:{minutes:6.61,words:1982},t:"装饰器模式",y:"a"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/zugemoshi.html",{loader:()=>a(()=>import("./zugemoshi.html-CV_jhb_e.js"),__vite__mapDeps([1419,1])),meta:{a:"azrng",d:16625088e5,l:"2022年9月7日",c:["软件设计"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>将一组对象(文件和目录)组织成树形结构，来表示一种“部分-整体”的层次结构(目录与子目录的嵌套结构)。组合模式让客户端可以统一单个对象（文件）和组合对象(目录)的处理逻辑(递归遍历)。</p>
<p>此处的“组合模式”不是之前提到的“组合关系(通过组织来组装两个类)”，而是用来处理树形结构数据，这里的数据又可以简单理解为一组对象集合。</p>
<h2>优缺点</h2>
<p>优点</p>
<ul>
<li>组合模式可以让客户端代码可以一致地处理单个对象和组合对象，无需关心自己处理的是单个对象还是组合对象，简化了客户端代码。</li>
<li>容易在组合体内加入新的对象，客户端不会因为增加了新的对象而更改源代码，满足“开闭原则”。</li>
</ul>`,r:{minutes:5.92,words:1776},t:"组合模式",y:"a"}}],["/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/jingtaiziyuanzhongjianjian.html",{loader:()=>a(()=>import("./jingtaiziyuanzhongjianjian.html-8sSFxMez.js"),__vite__mapDeps([1420,1])),meta:{a:"azrng",d:1687824e6,l:"2023年6月27日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>静态文件都存储在Core Web根目录中。默认目录是&lt;content_root&gt;/wwwroot，但可通过 UseWebRoot方法更改访问目录。而content_root是指web项目的所有文件夹，包括bin和wwwroot文件夹。</p>
<h2>目的</h2>
<ul>
<li>支持指定相对路径</li>
<li>支持目录浏览</li>
<li>支持设置默认文档</li>
<li>支持多目录映射</li>
</ul>
<h2>资源操作</h2>
<h3>简单配置</h3>
<p>在Configure方法中设置</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认静态文件目录是wwwroot</span>

<span class="token comment">//特殊配置</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticFileOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ServeUnknownFileTypes <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">//是否可以访问不知道的文件类型</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.82,words:846},t:"静态资源中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/morentupianzhongjianjian.html",{loader:()=>a(()=>import("./morentupianzhongjianjian.html-DMXqYBmu.js"),__vite__mapDeps([1421,1])),meta:{a:"azrng",d:16332192e5,l:"2021年10月3日",c:["dotNET"],g:["无"],o:!0,e:`<h3>使用场景</h3>
<p>web上如果图片不存在的话这个时候使用默认的图片代替，现在使用中间件的方式统一设置，一次设置全局起作用</p>
<h3>操作</h3>
<p>创建中间件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultImageMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DefaultImagePath <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">DefaultImageMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> contentType <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"accept"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">SetDefaultImage</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SetDefaultImage</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DefaultImagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">OpenRead</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>fs<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultImageMiddlewareExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">UseDefaultImage</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> defaultImagePath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        DefaultImageMiddleware<span class="token punctuation">.</span>DefaultImagePath <span class="token operator">=</span> defaultImagePath<span class="token punctuation">;</span>

        <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DefaultImageMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.66,words:198},t:"默认图片中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/qishixie.html",{loader:()=>a(()=>import("./qishixie.html-BIfTCL2T.js"),__vite__mapDeps([1422,1])),meta:{a:"azrng",d:16293312e5,l:"2021年8月19日",c:["dotNET"],g:["无"],o:!0,e:`<h3>起始页</h3>
<p>为应用程序配置一个启动运行的页面
为项目新建wwwroot目录，然后在该目录下新建index.html文件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> defaultFilesOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultFilesOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultFilesOptions<span class="token punctuation">.</span>DefaultFileNames<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
defaultFilesOptions<span class="token punctuation">.</span>DefaultFileNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseDefaultFiles</span><span class="token punctuation">(</span>defaultFilesOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.91,words:273},t:"起始页",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/fangdaolianzhongjianjian.html",{loader:()=>a(()=>import("./fangdaolianzhongjianjian.html-DMqDdnkz.js"),__vite__mapDeps([1423,1])),meta:{a:"azrng",d:16453152e5,l:"2022年2月20日",c:["dotNET"],g:["无"],o:!0,e:`<p>通过一个简单的中间件实现防止项目内的图片被其他人引用从而占用服务器资源。</p>
<h2>操作</h2>
<p>编写中间件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///图片防盗链中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefuseStealingImgMiddleware</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">RefuseStealingImgMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> requestDelegate<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_next <span class="token operator">=</span> requestDelegate<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> urlReferer <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"Referer"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>urlReferer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//直接访问</span>
			<span class="token punctuation">{</span>
				context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
				<span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"NoFind"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>urlReferer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">//await context.Response.SendFileAsync("wwwroot/forbidden.jpg");</span>
				context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>
				<span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">"401"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//走正常流程</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.75,words:225},t:"防盗链中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/httprizhizhongjianjian.html",{loader:()=>a(()=>import("./httprizhizhongjianjian.html-0qOvXC1W.js"),__vite__mapDeps([1424,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p><code>HttpLogging</code>&nbsp;是一个新的内置中间件(.Net 6)，可以记录 HTTP 请求和 HTTP 响应的信息，包括头信息和整个 Body。
<code>HttpLogging</code> 中间件提供了以下日志：</p>
<ul>
<li>HTTP 请求信息</li>
<li>普通属性</li>
<li>头信息</li>
<li>请求 Body</li>
<li>HTTP 响应信息</li>
</ul>
<h2>操作</h2>
<p>调用中指定&nbsp;<code>HttpLoggingOptions</code></p>
`,r:{minutes:.59,words:177},t:"HTTP日志中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/jiluqingqiushuju.html",{loader:()=>a(()=>import("./jiluqingqiushuju.html-mfdu2Wtf.js"),__vite__mapDeps([1425,1])),meta:{a:"azrng",d:16811712e5,l:"2023年4月11日",c:["dotNET"],g:["无"],o:!0,e:`<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 记录请求和响应中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestResponseMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RequestResponseMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RequestResponseMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span>
        <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RequestResponseMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 过滤，只有接口的时候报错才记录请求的参数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"api"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//_logger.LogInformation($"Header: {JsonConvert.SerializeObject(context.Request.Headers, Formatting.Indented)}");</span>
            <span class="token comment">//设置可以多次读取</span>
            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>
                <span class="token interpolation-string"><span class="token string">$"Time:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string"> requestUrl:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string">  Method:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">}</span></span><span class="token string">  requestBodyData: "</span></span> <span class="token operator">+</span>
                data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
            context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Host: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Host</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Client IP: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.85,words:254},t:"记录请求数据",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/jingtaimdwenjianzhuaihuanshuchu.html",{loader:()=>a(()=>import("./jingtaimdwenjianzhuaihuanshuchu.html-13bq5Xc1.js"),__vite__mapDeps([1426,1])),meta:{a:"azrng",d:166104e7,l:"2022年8月21日",c:["dotNET"],g:["无"],o:!0,e:`<h2>目的</h2>
<p>如果请求md静态文件那么就将其转html输出。</p>
<h2>操作</h2>
<p>安装nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Markdig"</span> Version<span class="token operator">=</span><span class="token string">"0.30.3"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>md文件转html<span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Ude.NetStandard"</span> Version<span class="token operator">=</span><span class="token string">"1.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>文件编码检测<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:1.03,words:308},t:"静态md文件转换输出",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/lanjieqingqiuhefanhuishujubingjiami.html",{loader:()=>a(()=>import("./lanjieqingqiuhefanhuishujubingjiami.html-GucKjZR_.js"),__vite__mapDeps([1427,1])),meta:{a:"azrng",d:16604352e5,l:"2022年8月14日",c:["dotNET"],g:["无"],o:!0,e:`<p>使用中间件拦截请求和返回数据，并对数据进行加密解密
自定义中间件</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpContextMiddleware</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger</span> _logger<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 计时器</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">private</span> <span class="token class-name">Stopwatch</span> _stopwatch<span class="token punctuation">;</span>
	<span class="token comment">//加密解密key</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> securitykey <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 构造 Http 请求中间件</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loggerFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token function">HttpContextMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> loggerFactory<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_next <span class="token operator">=</span> next<span class="token punctuation">;</span>
		_logger <span class="token operator">=</span> loggerFactory<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateLogger</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpContextMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 1：将Post方法中Body中的数据进行AES解密</span>
	<span class="token doc-comment comment">/// 2：将返回数据进行AES加密</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以实现多次读取Body</span>
		_stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Handling request: "</span></span> <span class="token operator">+</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiRequestInputViewModel</span>
		<span class="token punctuation">{</span>
			HttpType <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">,</span>
			Query <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>QueryString<span class="token punctuation">.</span>Value<span class="token punctuation">,</span>
			RequestUrl <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">,</span>
			RequestName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>
			RequestIP <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Value
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>

		<span class="token keyword">try</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> newRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">//替换request流</span>
				context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> newRequest<span class="token punctuation">;</span>

				<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> newResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token comment">//替换response流</span>
					context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body <span class="token operator">=</span> newResponse<span class="token punctuation">;</span>

					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token comment">//读取原始请求流的内容</span>
						api<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">)</span>
							<span class="token keyword">await</span> _next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//示例加密字符串，使用 AES-ECB-PKCS7 方式加密，密钥为：0123456789abcdef</span>
						<span class="token comment">// 加密参数：{"value":"哈哈哈"}</span>
						<span class="token comment">// 加密后数据： oedwSKGyfLX8ADtx2Z8k1Q7+pIoAkdqllaOngP4TvQ4=</span>
						api<span class="token punctuation">.</span>Body <span class="token operator">=</span> SecurityHelper<span class="token punctuation">.</span><span class="token function">AESDecrypt</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> securitykey<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>newRequest<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">FlushAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						newRequest<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
						context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> newRequest<span class="token punctuation">;</span>
						<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>

					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>newResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						newResponse<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
						api<span class="token punctuation">.</span>ResponseBody <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
						<span class="token punctuation">{</span>
							api<span class="token punctuation">.</span>ResponseBody <span class="token operator">=</span> SecurityHelper<span class="token punctuation">.</span><span class="token function">AESEncrypt</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">,</span> securitykey<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">FlushAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			_logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$" http中间件发生错误: "</span></span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">finally</span>
		<span class="token punctuation">{</span>
			context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> request<span class="token punctuation">;</span>
			context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body <span class="token operator">=</span> response<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 响应完成时存入缓存</span>
		context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">OnCompleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
		<span class="token punctuation">{</span>
			_stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			api<span class="token punctuation">.</span>ElapsedTime <span class="token operator">=</span> _stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span>

			_logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"RequestLog:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmssfff"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">api<span class="token punctuation">.</span>ElapsedTime</span><span class="token punctuation">}</span></span><span class="token string">ms"</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		_logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Finished handling request.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.67,words:501},t:"拦截请求和返回数据并加密",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/qingqiuchaoshizhongjianjian.html",{loader:()=>a(()=>import("./qingqiuchaoshizhongjianjian.html-MXSYxRlg.js"),__vite__mapDeps([1428,1])),meta:{a:"azrng",d:16949088e5,l:"2023年9月17日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<blockquote>
<p>该中间件是框架自带的，但是需要.Net8版本</p>
</blockquote>
<p>使用RequestTimeoutsMiddleware更方便地实现 request 超时的处理</p>
<h2>操作</h2>
<h3>基础操作</h3>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRequestTimeouts</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>DefaultPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestTimeoutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Timeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseRequestTimeouts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:.59,words:177},t:"请求超时中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/qingqiutouyuanyangfanhui.html",{loader:()=>a(()=>import("./qingqiutouyuanyangfanhui.html-ByUehtKk.js"),__vite__mapDeps([1429,1])),meta:{a:"azrng",d:16881696e5,l:"2023年7月1日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>可以实现将请求头的内容进行原样返回出来</p>
<h2>操作</h2>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>public <span class="token keyword">class</span> RequestIdMiddleware
<span class="token punctuation">{</span>
	private readonly RequestDelegate _next<span class="token punctuation">;</span>
	private const string RequestIdHeader = <span class="token string">"X-RequestId"</span><span class="token punctuation">;</span>

	public RequestIdMiddleware<span class="token punctuation">(</span>RequestDelegate next<span class="token punctuation">)</span> =&gt; this<span class="token punctuation">.</span>_next = next<span class="token punctuation">;</span>

	public async Task Invoke<span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		IHttpRequestIdentifierFeature requestIdFeature = context<span class="token punctuation">.</span>Features<span class="token punctuation">.</span>Get&lt;IHttpRequestIdentifierFeature&gt;<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>requestIdFeature?<span class="token punctuation">.</span>TraceIdentifier <span class="token operator">!</span>= null<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IDictionary&lt;string<span class="token punctuation">,</span> StringValues&gt;<span class="token punctuation">)</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">)</span><span class="token punctuation">.</span>ContainsKey<span class="token punctuation">(</span><span class="token string">"X-RequestId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				requestIdFeature<span class="token punctuation">.</span>TraceIdentifier = <span class="token punctuation">(</span>string<span class="token punctuation">)</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"X-RequestId"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"X-RequestId"</span><span class="token punctuation">]</span> = <span class="token punctuation">(</span>StringValues<span class="token punctuation">)</span>requestIdFeature<span class="token punctuation">.</span>TraceIdentifier<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		await this<span class="token punctuation">.</span>_next<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.36,words:109},t:"请求头原样返回",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/rizhizhongjianjian.html",{loader:()=>a(()=>import("./rizhizhongjianjian.html-D282_xFJ.js"),__vite__mapDeps([1430,1])),meta:{a:"azrng",d:16811712e5,l:"2023年4月11日",c:["dotNET"],g:["无"],o:!0,e:`<p>创建不记录日志的特性</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 不记录日志特性</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoLogsAttriteFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.68,words:204},t:"日志中间件",y:"a"}}],["/dotnet/base/pipeline/middleware/tazhan/yichangzhongjianjian.html",{loader:()=>a(()=>import("./yichangzhongjianjian.html-BQsrgQya.js"),__vite__mapDeps([1431,1])),meta:{a:"azrng",d:16946496e5,l:"2023年9月14日",c:["dotNET"],g:["无"],o:!0,e:`<p>一些开发者在action中使用try-catch代码块，这种方法明显没有任何问题，但是我们希望action尽量保持简洁。因为此我们从action中删除try-catch，并将其放在一个集中的地方会是一个更好的方式，netcore中为我们提供了一种处理全局异常的方式，只需要稍加修改，就可以使用内置且完善的中间件。通过创建自定义的中间件来实现我们的自定义异常处理。</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 异常中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomExceptionMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"系统出错"</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">HandleExceptionAsync</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleExceptionAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">WriteExceptionAsync</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteExceptionAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//返回友好的提示</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">;</span>

        <span class="token comment">//状态码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token class-name">UnauthorizedAccessException</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">;</span>

        response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//可以用来验证比如说是否在头部传递了token，验证token是否有效</span>

        response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> <span class="token string">"系统异常"</span><span class="token punctuation">,</span> IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.18,words:355},t:"异常中间件",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/guanfangpiliangzhuru.html",{loader:()=>a(()=>import("./guanfangpiliangzhuru.html-DRmOzlU5.js"),__vite__mapDeps([1432,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>简化版本</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">BaseService</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>x<span class="token punctuation">.</span>IsAbstract<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> type <span class="token keyword">in</span> types<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> interfaceList <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceList<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> inter <span class="token operator">=</span> interfaceList<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span>inter<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.18,words:353},t:"官方批量注入",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/scrutorpiliangzhuce.html",{loader:()=>a(()=>import("./scrutorpiliangzhuce.html-_xBTUSn_.js"),__vite__mapDeps([1433,1])),meta:{a:"azrng",d:16879104e5,l:"2023年6月28日",c:["dotNET"],g:["无"],o:!0,e:`<h2>介绍</h2>
<p>Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展。
仓库地址：<a href="https://github.com/khellang/Scrutor" target="_blank" rel="noopener noreferrer">https://github.com/khellang/Scrutor</a></p>
<h2>操作</h2>
<p>引用nuget包</p>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">"Scrutor"</span> Version<span class="token operator">=</span><span class="token string">"4.2.0"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre></div>`,r:{minutes:.89,words:267},t:"Scrutor批量注册",y:"a"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/tongguotexingshixianpiliangzhuce.html",{loader:()=>a(()=>import("./tongguotexingshixianpiliangzhuce.html-D0VK7mYz.js"),__vite__mapDeps([1434,1])),meta:{a:"azrng",d:16803936e5,l:"2023年4月2日",c:["dotNET"],g:["无"],o:!0,e:`<h2>创建特性</h2>
<div class="language-csharp" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 瞬时注入(使用该特性的服务系统会自动注入)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransientAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Itself <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 瞬时注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">TransientAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itself<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">TransientAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> itself <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Itself <span class="token operator">=</span> itself<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 范围注入(使用该特性的服务系统会自动注入)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScopedAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Itself <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 范围注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">ScopedAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itself<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">ScopedAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> itself <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Itself <span class="token operator">=</span> itself<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 单例注入(使用该特性的服务系统会自动注入)</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Method <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Itself <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 单例注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">SingletonAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Itself <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否使用自身的类型进行注入</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itself<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">SingletonAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> itself<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Itself <span class="token operator">=</span> itself<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.9,words:571},t:"通过特性实现批量注册",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/mvvmzujian/communitytoolkit_mvvm/",{loader:()=>a(()=>import("./index.html-B5jXcZ2K.js"),__vite__mapDeps([1435,1])),meta:{a:"azrng",d:1684368e6,l:"2023年5月18日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>CommunityToolkit.Mvvm (又名 MVVM 工具包，以前名为 Microsoft.Toolkit.Mvvm) 是一个现代、快速且模块化的 MVVM 库。
官网文档：<a href="https://learn.microsoft.com/zh-cn/dotnet/communitytoolkit/mvvm/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/dotnet/communitytoolkit/mvvm/</a>
示例项目：<a href="https://github.com/CommunityToolkit/MVVM-Samples" target="_blank" rel="noopener noreferrer">https://github.com/CommunityToolkit/MVVM-Samples</a></p>`,r:{minutes:2.48,words:745},t:"说明",y:"a"}}],["/dotnet/zhuomianchengxu/wpf/mvvmzujian/prism/",{loader:()=>a(()=>import("./index.html-CFcjkwML.js"),__vite__mapDeps([1436,1])),meta:{a:"azrng",d:16858368e5,l:"2023年6月4日",c:["dotNET"],g:["无"],o:!0,e:`<h2>概述</h2>
<p>Prism是一个用于在 WPF、Xamarin Form、Uno 平台和 WinUI 中构建松散耦合、可维护和可测试的 XAML 应用程序框架。
仓库地址：<a href="https://github.com/PrismLibrary/Prism" target="_blank" rel="noopener noreferrer">https://github.com/PrismLibrary/Prism</a>
文档：<a href="https://prismlibrary.com/docs/index.html" target="_blank" rel="noopener noreferrer">https://prismlibrary.com/docs/index.html</a>
包中关于wpf的使用：<a href="https://prismlibrary.com/docs/wpf/introduction.html" target="_blank" rel="noopener noreferrer">https://prismlibrary.com/docs/wpf/introduction.html</a></p>`,r:{minutes:19.49,words:5847},t:"说明",y:"a"}}],["/404.html",{loader:()=>a(()=>import("./404.html-DQGgIcwb.js"),__vite__mapDeps([1437,1])),meta:{t:""}}],["/classicArticle/",{loader:()=>a(()=>import("./index.html-Be6HoVvr.js"),__vite__mapDeps([1438,1])),meta:{t:"Classic Article"}}],["/interview/",{loader:()=>a(()=>import("./index.html-CEIHAvPY.js"),__vite__mapDeps([1439,1])),meta:{t:"Interview"}}],["/live/",{loader:()=>a(()=>import("./index.html-CzNSVdqy.js"),__vite__mapDeps([1440,1])),meta:{t:"Live"}}],["/soft/",{loader:()=>a(()=>import("./index.html-f2WJOKkt.js"),__vite__mapDeps([1441,1])),meta:{t:"Soft"}}],["/web/",{loader:()=>a(()=>import("./index.html-DCClm_ZR.js"),__vite__mapDeps([1442,1])),meta:{t:"Web"}}],["/classicArticle/xuexiResource/",{loader:()=>a(()=>import("./index.html-BwXD3gsS.js"),__vite__mapDeps([1443,1])),meta:{t:"Xuexi Resource"}}],["/dataBase/cassandra/",{loader:()=>a(()=>import("./index.html-BI3Vr3H_.js"),__vite__mapDeps([1444,1])),meta:{t:"Cassandra"}}],["/dataBase/",{loader:()=>a(()=>import("./index.html-3ItzMuSs.js"),__vite__mapDeps([1445,1])),meta:{t:"Data Base"}}],["/dataBase/clickhouse/",{loader:()=>a(()=>import("./index.html-DN-nfIlL.js"),__vite__mapDeps([1446,1])),meta:{t:"Clickhouse"}}],["/dataBase/damengshujuku/",{loader:()=>a(()=>import("./index.html-BtlVrP_A.js"),__vite__mapDeps([1447,1])),meta:{t:"Damengshujuku"}}],["/dataBase/elasticsearch/",{loader:()=>a(()=>import("./index.html-h5sYh4JO.js"),__vite__mapDeps([1448,1])),meta:{t:"Elasticsearch"}}],["/dataBase/indexeddb/",{loader:()=>a(()=>import("./index.html-BIyoKu8B.js"),__vite__mapDeps([1449,1])),meta:{t:"Indexeddb"}}],["/dataBase/litedb/",{loader:()=>a(()=>import("./index.html-64-jSL4g.js"),__vite__mapDeps([1450,1])),meta:{t:"Litedb"}}],["/dataBase/mongodb/",{loader:()=>a(()=>import("./index.html-DTlnVI82.js"),__vite__mapDeps([1451,1])),meta:{t:"Mongodb"}}],["/dataBase/mysql/",{loader:()=>a(()=>import("./index.html-Bf1648yE.js"),__vite__mapDeps([1452,1])),meta:{t:"Mysql"}}],["/dataBase/oracle/",{loader:()=>a(()=>import("./index.html-BV5ZoqiO.js"),__vite__mapDeps([1453,1])),meta:{t:"Oracle"}}],["/dataBase/postgresql/",{loader:()=>a(()=>import("./index.html-BxN2kEje.js"),__vite__mapDeps([1454,1])),meta:{t:"Postgresql"}}],["/dataBase/sqlite/",{loader:()=>a(()=>import("./index.html-7hjK9XPg.js"),__vite__mapDeps([1455,1])),meta:{t:"Sqlite"}}],["/dataBase/zhongjianjian/",{loader:()=>a(()=>import("./index.html-CrQRRxX0.js"),__vite__mapDeps([1456,1])),meta:{t:"Zhongjianjian"}}],["/computerBasics/",{loader:()=>a(()=>import("./index.html-bQzLj4l_.js"),__vite__mapDeps([1457,1])),meta:{t:"Computer Basics"}}],["/computerBasics/os/",{loader:()=>a(()=>import("./index.html-B97mJQ3L.js"),__vite__mapDeps([1458,1])),meta:{t:"Os"}}],["/dotnet/anquanhebiaoshi/",{loader:()=>a(()=>import("./index.html-B5bo0KUT.js"),__vite__mapDeps([1459,1])),meta:{t:"Anquanhebiaoshi"}}],["/dotnet/api/",{loader:()=>a(()=>import("./index.html-CJbbq0yR.js"),__vite__mapDeps([1460,1])),meta:{t:"Api"}}],["/dotnet/base/",{loader:()=>a(()=>import("./index.html-CPzq3jIZ.js"),__vite__mapDeps([1461,1])),meta:{t:"Base"}}],["/dotnet/chengxujicaozuo/",{loader:()=>a(()=>import("./index.html-CdN1m5lY.js"),__vite__mapDeps([1462,1])),meta:{t:"Chengxujicaozuo"}}],["/dotnet/commonNuget/",{loader:()=>a(()=>import("./index.html-i0t4b4Gh.js"),__vite__mapDeps([1463,1])),meta:{t:"Common Nuget"}}],["/dotnet/console/",{loader:()=>a(()=>import("./index.html-3KyCK8jQ.js"),__vite__mapDeps([1464,1])),meta:{t:"Console"}}],["/dotnet/cuowuchuli/",{loader:()=>a(()=>import("./index.html-CVHjR6K2.js"),__vite__mapDeps([1465,1])),meta:{t:"Cuowuchuli"}}],["/dotnet/daimayouhua/",{loader:()=>a(()=>import("./index.html-7GUcNUMS.js"),__vite__mapDeps([1466,1])),meta:{t:"Daimayouhua"}}],["/dotnet/gongnenganli/",{loader:()=>a(()=>import("./index.html-BcwU6BQn.js"),__vite__mapDeps([1467,1])),meta:{t:"Gongnenganli"}}],["/dotnet/jiaocheng/",{loader:()=>a(()=>import("./index.html-DL_oWszz.js"),__vite__mapDeps([1468,1])),meta:{t:"Jiaocheng"}}],["/dotnet/jitongcaozuo/",{loader:()=>a(()=>import("./index.html-CsNRIOS_.js"),__vite__mapDeps([1469,1])),meta:{t:"Jitongcaozuo"}}],["/dotnet/kuangjiajiexi/",{loader:()=>a(()=>import("./index.html-DSXzN1bL.js"),__vite__mapDeps([1470,1])),meta:{t:"Kuangjiajiexi"}}],["/dotnet/shengchanlidisheng/",{loader:()=>a(()=>import("./index.html-DLpQqUDb.js"),__vite__mapDeps([1471,1])),meta:{t:"Shengchanlidisheng"}}],["/dotnet/shujufangwen/",{loader:()=>a(()=>import("./index.html-B9MpaOLA.js"),__vite__mapDeps([1472,1])),meta:{t:"Shujufangwen"}}],["/dotnet/signalr/",{loader:()=>a(()=>import("./index.html-BHQHXYFD.js"),__vite__mapDeps([1473,1])),meta:{t:"Signalr"}}],["/dotnet/t4moban/",{loader:()=>a(()=>import("./index.html-UYo4Z69Y.js"),__vite__mapDeps([1474,1])),meta:{t:"T4moban"}}],["/dotnet/xiangmumoban/",{loader:()=>a(()=>import("./index.html-CPLtKClS.js"),__vite__mapDeps([1475,1])),meta:{t:"Xiangmumoban"}}],["/dotnet/zhuomianchengxu/",{loader:()=>a(()=>import("./index.html-Bbdhvyq4.js"),__vite__mapDeps([1476,1])),meta:{t:"Zhuomianchengxu"}}],["/live/yule/",{loader:()=>a(()=>import("./index.html-CEv2vuX2.js"),__vite__mapDeps([1477,1])),meta:{t:"Yule"}}],["/orm/ef/",{loader:()=>a(()=>import("./index.html-E6EGRRz1.js"),__vite__mapDeps([1478,1])),meta:{t:"Ef"}}],["/orm/insql/",{loader:()=>a(()=>import("./index.html-JoqNgA0r.js"),__vite__mapDeps([1479,1])),meta:{t:"Insql"}}],["/orm/linq2db/",{loader:()=>a(()=>import("./index.html-CKnxzb2R.js"),__vite__mapDeps([1480,1])),meta:{t:"Linq2db"}}],["/orm/mongodbdriver/",{loader:()=>a(()=>import("./index.html-BAjfDcqw.js"),__vite__mapDeps([1481,1])),meta:{t:"Mongodbdriver"}}],["/orm/sqlkata/",{loader:()=>a(()=>import("./index.html-DLTBNLNR.js"),__vite__mapDeps([1482,1])),meta:{t:"Sqlkata"}}],["/orm/sqlsugar/",{loader:()=>a(()=>import("./index.html-Cf0YbYwo.js"),__vite__mapDeps([1483,1])),meta:{t:"Sqlsugar"}}],["/otherLanguage/golang/",{loader:()=>a(()=>import("./index.html-B82VISjO.js"),__vite__mapDeps([1484,1])),meta:{t:"Golang"}}],["/otherLanguage/",{loader:()=>a(()=>import("./index.html-ugJYCrtI.js"),__vite__mapDeps([1485,1])),meta:{t:"Other Language"}}],["/otherLanguage/java/",{loader:()=>a(()=>import("./index.html-D4ioTPEl.js"),__vite__mapDeps([1486,1])),meta:{t:"Java"}}],["/otherLanguage/shell/",{loader:()=>a(()=>import("./index.html-D7jehpSm.js"),__vite__mapDeps([1487,1])),meta:{t:"Shell"}}],["/otherLanguage/python/",{loader:()=>a(()=>import("./index.html-DCCkARPZ.js"),__vite__mapDeps([1488,1])),meta:{t:"Python"}}],["/otherLanguage/xml/",{loader:()=>a(()=>import("./index.html-DUuiovyR.js"),__vite__mapDeps([1489,1])),meta:{t:"Xml"}}],["/middleware/authorize/",{loader:()=>a(()=>import("./index.html-aXETxx3n.js"),__vite__mapDeps([1490,1])),meta:{t:"Authorize"}}],["/middleware/cangku/",{loader:()=>a(()=>import("./index.html-W5vhboEf.js"),__vite__mapDeps([1491,1])),meta:{t:"Cangku"}}],["/middleware/duanlianjie/",{loader:()=>a(()=>import("./index.html-WoyNWNBe.js"),__vite__mapDeps([1492,1])),meta:{t:"Duanlianjie"}}],["/middleware/fenci/",{loader:()=>a(()=>import("./index.html-k8moSiAH.js"),__vite__mapDeps([1493,1])),meta:{t:"Fenci"}}],["/middleware/fullTextSearch/",{loader:()=>a(()=>import("./index.html-BGjZme-7.js"),__vite__mapDeps([1494,1])),meta:{t:"Full Text Search"}}],["/middleware/grpc/",{loader:()=>a(()=>import("./index.html-DVWiugnW.js"),__vite__mapDeps([1495,1])),meta:{t:"Grpc"}}],["/middleware/guizeyinqing/",{loader:()=>a(()=>import("./index.html-By4CyC5O.js"),__vite__mapDeps([1496,1])),meta:{t:"Guizeyinqing"}}],["/middleware/identityId/",{loader:()=>a(()=>import("./index.html-Bl4yMHr2.js"),__vite__mapDeps([1497,1])),meta:{t:"Identity Id"}}],["/middleware/jiedianbianjiqi/",{loader:()=>a(()=>import("./index.html-BbnDqxkY.js"),__vite__mapDeps([1498,1])),meta:{t:"Jiedianbianjiqi"}}],["/middleware/notification/",{loader:()=>a(()=>import("./index.html-B4NAfQI9.js"),__vite__mapDeps([1499,1])),meta:{t:"Notification"}}],["/middleware/pachong/",{loader:()=>a(()=>import("./index.html-CKjTqT5p.js"),__vite__mapDeps([1500,1])),meta:{t:"Pachong"}}],["/middleware/reverseProxy/",{loader:()=>a(()=>import("./index.html-DLOuFCMc.js"),__vite__mapDeps([1501,1])),meta:{t:"Reverse Proxy"}}],["/middleware/testMange/",{loader:()=>a(()=>import("./index.html-CPuLDI9D.js"),__vite__mapDeps([1502,1])),meta:{t:"Test Mange"}}],["/middleware/xiaoxiduilie/",{loader:()=>a(()=>import("./index.html-DTIWvety.js"),__vite__mapDeps([1503,1])),meta:{t:"Xiaoxiduilie"}}],["/middleware/yanchiduilie/",{loader:()=>a(()=>import("./index.html-KQbpJ5Ui.js"),__vite__mapDeps([1504,1])),meta:{t:"Yanchiduilie"}}],["/middleware/yinpinshipin/",{loader:()=>a(()=>import("./index.html-CcFx9bjK.js"),__vite__mapDeps([1505,1])),meta:{t:"Yinpinshipin"}}],["/middleware/yufajiexi/",{loader:()=>a(()=>import("./index.html-DlksdBiU.js"),__vite__mapDeps([1506,1])),meta:{t:"Yufajiexi"}}],["/soft/devTools/",{loader:()=>a(()=>import("./index.html-TWKd3ewL.js"),__vite__mapDeps([1507,1])),meta:{t:"Dev Tools"}}],["/soft/Linux/",{loader:()=>a(()=>import("./index.html-CobLkL9i.js"),__vite__mapDeps([1508,1])),meta:{t:"Linux"}}],["/soft/windows/",{loader:()=>a(()=>import("./index.html-DdlUci_R.js"),__vite__mapDeps([1509,1])),meta:{t:"Windows"}}],["/softwareDesign/highQualityCode/",{loader:()=>a(()=>import("./index.html-Bmo56koN.js"),__vite__mapDeps([1510,1])),meta:{t:"High Quality Code"}}],["/softwareDesign/openSourceFrame/",{loader:()=>a(()=>import("./index.html-DNJBn6fh.js"),__vite__mapDeps([1511,1])),meta:{t:"Open Source Frame"}}],["/softwareDesign/seeSystem/",{loader:()=>a(()=>import("./index.html-BqPDoNlu.js"),__vite__mapDeps([1512,1])),meta:{t:"See System"}}],["/softwareDesign/systemDesign/",{loader:()=>a(()=>import("./index.html-BDP857kT.js"),__vite__mapDeps([1513,1])),meta:{t:"System Design"}}],["/web/jq/",{loader:()=>a(()=>import("./index.html-WqTe0vqG.js"),__vite__mapDeps([1514,1])),meta:{t:"Jq"}}],["/web/layui/",{loader:()=>a(()=>import("./index.html-C4Fa_Zvh.js"),__vite__mapDeps([1515,1])),meta:{t:"Layui"}}],["/web/npm/",{loader:()=>a(()=>import("./index.html-Y8HSIsXX.js"),__vite__mapDeps([1516,1])),meta:{t:"Npm"}}],["/web/vue/",{loader:()=>a(()=>import("./index.html-BDhVxYGi.js"),__vite__mapDeps([1517,1])),meta:{t:"Vue"}}],["/web/webkaifa/",{loader:()=>a(()=>import("./index.html-AWF6LyvY.js"),__vite__mapDeps([1518,1])),meta:{t:"Webkaifa"}}],["/dataBase/gongyoubufen/tools/",{loader:()=>a(()=>import("./index.html-HPgEIScp.js"),__vite__mapDeps([1519,1])),meta:{t:"Tools"}}],["/dataBase/mongodb/linuxanzhuang/",{loader:()=>a(()=>import("./index.html-DlsNs-oD.js"),__vite__mapDeps([1520,1])),meta:{t:"Linuxanzhuang"}}],["/dataBase/mysql/jiaoben/",{loader:()=>a(()=>import("./index.html-BZgl9Lk_.js"),__vite__mapDeps([1521,1])),meta:{t:"Jiaoben"}}],["/dataBase/mysql/jichuzhishi/",{loader:()=>a(()=>import("./index.html-CS7EfvsJ.js"),__vite__mapDeps([1522,1])),meta:{t:"Jichuzhishi"}}],["/dataBase/mysql/jinjie/",{loader:()=>a(()=>import("./index.html-D4dlkox1.js"),__vite__mapDeps([1523,1])),meta:{t:"Jinjie"}}],["/dataBase/mysql/mysqlhanshu/",{loader:()=>a(()=>import("./index.html-BBtXinjs.js"),__vite__mapDeps([1524,1])),meta:{t:"Mysqlhanshu"}}],["/dataBase/mysql/shujukuyouhuajilu/",{loader:()=>a(()=>import("./index.html-BbCb2HpP.js"),__vite__mapDeps([1525,1])),meta:{t:"Shujukuyouhuajilu"}}],["/dataBase/mysql/yudaodewenti/",{loader:()=>a(()=>import("./index.html-D4O70pIG.js"),__vite__mapDeps([1526,1])),meta:{t:"Yudaodewenti"}}],["/dataBase/mysql/zhihangjihua/",{loader:()=>a(()=>import("./index.html-Wgjq8pRm.js"),__vite__mapDeps([1527,1])),meta:{t:"Zhihangjihua"}}],["/dataBase/oracle/dotnetcaozuo/",{loader:()=>a(()=>import("./index.html-0JO49y7-.js"),__vite__mapDeps([1528,1])),meta:{t:"Dotnetcaozuo"}}],["/dataBase/oracle/oracleshiyongwenti/",{loader:()=>a(()=>import("./index.html-C8QgopAK.js"),__vite__mapDeps([1529,1])),meta:{t:"Oracleshiyongwenti"}}],["/dataBase/oracle/shujukubeifenhehaiyuan/",{loader:()=>a(()=>import("./index.html-rHZaYB2E.js"),__vite__mapDeps([1530,1])),meta:{t:"Shujukubeifenhehaiyuan"}}],["/dataBase/oracle/anzhuang/",{loader:()=>a(()=>import("./index.html-CF38qcIP.js"),__vite__mapDeps([1531,1])),meta:{t:"Anzhuang"}}],["/dataBase/postgresql/biaoziduanleixing/",{loader:()=>a(()=>import("./index.html-Djk_Jd1k.js"),__vite__mapDeps([1532,1])),meta:{t:"Biaoziduanleixing"}}],["/dataBase/redis/anzhuang/",{loader:()=>a(()=>import("./index.html-BQNsktFs.js"),__vite__mapDeps([1533,1])),meta:{t:"Anzhuang"}}],["/dataBase/redis/jianchanjieshao/",{loader:()=>a(()=>import("./index.html-CDsplrGY.js"),__vite__mapDeps([1534,1])),meta:{t:"Jianchanjieshao"}}],["/dataBase/redis/redisshujuleixing/",{loader:()=>a(()=>import("./index.html-DN0RRbGu.js"),__vite__mapDeps([1535,1])),meta:{t:"Redisshujuleixing"}}],["/dataBase/redis/yiwenhebug/",{loader:()=>a(()=>import("./index.html-C_3dEg-I.js"),__vite__mapDeps([1536,1])),meta:{t:"Yiwenhebug"}}],["/dataBase/redis/zujian/",{loader:()=>a(()=>import("./index.html-BUf_Ec0V.js"),__vite__mapDeps([1537,1])),meta:{t:"Zujian"}}],["/dataBase/sqlserver/base/",{loader:()=>a(()=>import("./index.html-DLqFT0r5.js"),__vite__mapDeps([1538,1])),meta:{t:"Base"}}],["/dataBase/sqlserver/install/",{loader:()=>a(()=>import("./index.html-DfNpphR3.js"),__vite__mapDeps([1539,1])),meta:{t:"Install"}}],["/cloud/ciAndCd/gitlab/",{loader:()=>a(()=>import("./index.html-CEJ2UG_s.js"),__vite__mapDeps([1540,1])),meta:{t:"Gitlab"}}],["/cloud/k3s/operators/",{loader:()=>a(()=>import("./index.html-BbTmOY4J.js"),__vite__mapDeps([1541,1])),meta:{t:"Operators"}}],["/cloud/k8s/anzhuang/",{loader:()=>a(()=>import("./index.html-BXt43Hky.js"),__vite__mapDeps([1542,1])),meta:{t:"Anzhuang"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/",{loader:()=>a(()=>import("./index.html-Df9xMLL5.js"),__vite__mapDeps([1543,1])),meta:{t:"Shenfenrenzhengheshouquan"}}],["/dotnet/api/remoteProcedureCall/",{loader:()=>a(()=>import("./index.html-wBt2fxkz.js"),__vite__mapDeps([1544,1])),meta:{t:"Remote Procedure Call"}}],["/dotnet/api/swagger/",{loader:()=>a(()=>import("./index.html-CNS1Ac9p.js"),__vite__mapDeps([1545,1])),meta:{t:"Swagger"}}],["/dotnet/avalonia/projects/",{loader:()=>a(()=>import("./index.html-f8_fMOHO.js"),__vite__mapDeps([1546,1])),meta:{t:"Projects"}}],["/dotnet/base/jiankangjiancha/",{loader:()=>a(()=>import("./index.html-Dr0t_FkD.js"),__vite__mapDeps([1547,1])),meta:{t:"Jiankangjiancha"}}],["/dotnet/base/luyou/",{loader:()=>a(()=>import("./index.html-BbLRpnwB.js"),__vite__mapDeps([1548,1])),meta:{t:"Luyou"}}],["/dotnet/base/peizhikuangjia/",{loader:()=>a(()=>import("./index.html-DDUScDhk.js"),__vite__mapDeps([1549,1])),meta:{t:"Peizhikuangjia"}}],["/dotnet/base/yilaizhuru/",{loader:()=>a(()=>import("./index.html-ilO1rv8A.js"),__vite__mapDeps([1550,1])),meta:{t:"Yilaizhuru"}}],["/dotnet/chengxujicaozuo/sourcegenerator/",{loader:()=>a(()=>import("./index.html-yOM_1j_n.js"),__vite__mapDeps([1551,1])),meta:{t:"Sourcegenerator"}}],["/dotnet/commonNuget/duixiangyingshe/",{loader:()=>a(()=>import("./index.html-BxZPDllh.js"),__vite__mapDeps([1552,1])),meta:{t:"Duixiangyingshe"}}],["/dotnet/commonNuget/xianliu/",{loader:()=>a(()=>import("./index.html-D88H_8VZ.js"),__vite__mapDeps([1553,1])),meta:{t:"Xianliu"}}],["/dotnet/console/jiemian/",{loader:()=>a(()=>import("./index.html-DAXnAp-b.js"),__vite__mapDeps([1554,1])),meta:{t:"Jiemian"}}],["/dotnet/console/xiaoshili/",{loader:()=>a(()=>import("./index.html-CKepcB9Y.js"),__vite__mapDeps([1555,1])),meta:{t:"Xiaoshili"}}],["/dotnet/console/yangshinugetbao/",{loader:()=>a(()=>import("./index.html-DvUvjFeg.js"),__vite__mapDeps([1556,1])),meta:{t:"Yangshinugetbao"}}],["/dotnet/csharp/dingzhishujujiegou/",{loader:()=>a(()=>import("./index.html-CozMGX7d.js"),__vite__mapDeps([1557,1])),meta:{t:"Dingzhishujujiegou"}}],["/dotnet/csharp/duixiangheleixing/",{loader:()=>a(()=>import("./index.html-pi0a8EWl.js"),__vite__mapDeps([1558,1])),meta:{t:"Duixiangheleixing"}}],["/dotnet/csharp/fanshe/",{loader:()=>a(()=>import("./index.html-DrQHsgp2.js"),__vite__mapDeps([1559,1])),meta:{t:"Fanshe"}}],["/dotnet/csharp/gaojizhuti/",{loader:()=>a(()=>import("./index.html-Ddsogdiz.js"),__vite__mapDeps([1560,1])),meta:{t:"Gaojizhuti"}}],["/dotnet/csharp/hexincsharp/",{loader:()=>a(()=>import("./index.html-CHK2KIAY.js"),__vite__mapDeps([1561,1])),meta:{t:"Hexincsharp"}}],["/dotnet/csharp/linq/",{loader:()=>a(()=>import("./index.html-DT1Kjbds.js"),__vite__mapDeps([1562,1])),meta:{t:"Linq"}}],["/dotnet/csharp/queue/",{loader:()=>a(()=>import("./index.html-C-_LTVUa.js"),__vite__mapDeps([1563,1])),meta:{t:"Queue"}}],["/dotnet/csharp/wenjianheliu/",{loader:()=>a(()=>import("./index.html-BoYxobqM.js"),__vite__mapDeps([1564,1])),meta:{t:"Wenjianheliu"}}],["/dotnet/csharp/windowfuwu/",{loader:()=>a(()=>import("./index.html-B8GavPdr.js"),__vite__mapDeps([1565,1])),meta:{t:"Windowfuwu"}}],["/dotnet/csharp/yunsuanfuhebiaodashi/",{loader:()=>a(()=>import("./index.html-D2MhBUsv.js"),__vite__mapDeps([1566,1])),meta:{t:"Yunsuanfuhebiaodashi"}}],["/dotnet/csharp/zhenduan/",{loader:()=>a(()=>import("./index.html-DBeuFuoQ.js"),__vite__mapDeps([1567,1])),meta:{t:"Zhenduan"}}],["/dotnet/debugging/jibendiaoshigongju/",{loader:()=>a(()=>import("./index.html-DixE0UG_.js"),__vite__mapDeps([1568,1])),meta:{t:"Jibendiaoshigongju"}}],["/dotnet/debugging/wentifenxi/",{loader:()=>a(()=>import("./index.html-C563IIzj.js"),__vite__mapDeps([1569,1])),meta:{t:"Wentifenxi"}}],["/dotnet/maui/blazorhybrid/",{loader:()=>a(()=>import("./index.html-SYwurSJq.js"),__vite__mapDeps([1570,1])),meta:{t:"Blazorhybrid"}}],["/dotnet/maui/caozuo/",{loader:()=>a(()=>import("./index.html-C6vSkbfx.js"),__vite__mapDeps([1571,1])),meta:{t:"Caozuo"}}],["/dotnet/maui/fabu/",{loader:()=>a(()=>import("./index.html-BI0Ftvbu.js"),__vite__mapDeps([1572,1])),meta:{t:"Fabu"}}],["/dotnet/maui/rumenxuexi/",{loader:()=>a(()=>import("./index.html-BaRyyCfn.js"),__vite__mapDeps([1573,1])),meta:{t:"Rumenxuexi"}}],["/dotnet/server/diagnostics/",{loader:()=>a(()=>import("./index.html-COwa0DHR.js"),__vite__mapDeps([1574,1])),meta:{t:"Diagnostics"}}],["/dotnet/server/",{loader:()=>a(()=>import("./index.html-aNa4n6DN.js"),__vite__mapDeps([1575,1])),meta:{t:"Server"}}],["/dotnet/server/kestrel/",{loader:()=>a(()=>import("./index.html-De3Ns9-w.js"),__vite__mapDeps([1576,1])),meta:{t:"Kestrel"}}],["/dotnet/webyingyong/mvc/",{loader:()=>a(()=>import("./index.html-D_DsSQ_y.js"),__vite__mapDeps([1577,1])),meta:{t:"Mvc"}}],["/dotnet/webyingyong/",{loader:()=>a(()=>import("./index.html-CfnFfqOx.js"),__vite__mapDeps([1578,1])),meta:{t:"Webyingyong"}}],["/dotnet/webyingyong/webform/",{loader:()=>a(()=>import("./index.html-C_1rh7w-.js"),__vite__mapDeps([1579,1])),meta:{t:"Webform"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/",{loader:()=>a(()=>import("./index.html-B2vjFheu.js"),__vite__mapDeps([1580,1])),meta:{t:"Jitongcaozuo"}}],["/dotnet/zhuomianchengxu/kuozhan/",{loader:()=>a(()=>import("./index.html-GNy1atVI.js"),__vite__mapDeps([1581,1])),meta:{t:"Kuozhan"}}],["/dotnet/zhuomianchengxu/kaiyuanzujian/",{loader:()=>a(()=>import("./index.html-CwiGnBul.js"),__vite__mapDeps([1582,1])),meta:{t:"Kaiyuanzujian"}}],["/orm/dapper/splitDbTable/",{loader:()=>a(()=>import("./index.html-BJxLwN9k.js"),__vite__mapDeps([1583,1])),meta:{t:"Split Db Table"}}],["/orm/efcore/changyongzujian/",{loader:()=>a(()=>import("./index.html-BwO179Qu.js"),__vite__mapDeps([1584,1])),meta:{t:"Changyongzujian"}}],["/orm/efcore/erjihuancun/",{loader:()=>a(()=>import("./index.html-B05WR7cq.js"),__vite__mapDeps([1585,1])),meta:{t:"Erjihuancun"}}],["/orm/efcore/extract/",{loader:()=>a(()=>import("./index.html-DXkeqtYZ.js"),__vite__mapDeps([1586,1])),meta:{t:"Extract"}}],["/orm/efcore/jichuzhishi/",{loader:()=>a(()=>import("./index.html-CyVEALbZ.js"),__vite__mapDeps([1587,1])),meta:{t:"Jichuzhishi"}}],["/orm/efcore/jinjie/",{loader:()=>a(()=>import("./index.html-4KxCDip2.js"),__vite__mapDeps([1588,1])),meta:{t:"Jinjie"}}],["/orm/efcore/qianyishuju/",{loader:()=>a(()=>import("./index.html-BxGsSefQ.js"),__vite__mapDeps([1589,1])),meta:{t:"Qianyishuju"}}],["/orm/sqlsugar/wentihuizong/",{loader:()=>a(()=>import("./index.html-heIhS9US.js"),__vite__mapDeps([1590,1])),meta:{t:"Wentihuizong"}}],["/otherLanguage/python/disanfangku/",{loader:()=>a(()=>import("./index.html-B_0MaDdV.js"),__vite__mapDeps([1591,1])),meta:{t:"Disanfangku"}}],["/otherLanguage/python/jibenshiyong/",{loader:()=>a(()=>import("./index.html-2m-Ud7Ry.js"),__vite__mapDeps([1592,1])),meta:{t:"Jibenshiyong"}}],["/otherLanguage/python/jichuyufa/",{loader:()=>a(()=>import("./index.html-Xm9a5gc0.js"),__vite__mapDeps([1593,1])),meta:{t:"Jichuyufa"}}],["/otherLanguage/xml/caozuoxml/",{loader:()=>a(()=>import("./index.html-DIuA3EcN.js"),__vite__mapDeps([1594,1])),meta:{t:"Caozuoxml"}}],["/middleware/fullTextSearch/lucene/",{loader:()=>a(()=>import("./index.html-BPiV-mb3.js"),__vite__mapDeps([1595,1])),meta:{t:"Lucene"}}],["/middleware/fullTextSearch/solr/",{loader:()=>a(()=>import("./index.html-CinOIjmT.js"),__vite__mapDeps([1596,1])),meta:{t:"Solr"}}],["/middleware/grpc/bushu/",{loader:()=>a(()=>import("./index.html-2F5Li5na.js"),__vite__mapDeps([1597,1])),meta:{t:"Bushu"}}],["/middleware/grpc/rpckuangjia/",{loader:()=>a(()=>import("./index.html-DDHMlsKk.js"),__vite__mapDeps([1598,1])),meta:{t:"Rpckuangjia"}}],["/middleware/office/csv/",{loader:()=>a(()=>import("./index.html-DJ6LKuw4.js"),__vite__mapDeps([1599,1])),meta:{t:"Csv"}}],["/middleware/office/ip/",{loader:()=>a(()=>import("./index.html-BrIWMh0r.js"),__vite__mapDeps([1600,1])),meta:{t:"Ip"}}],["/middleware/office/markdown/",{loader:()=>a(()=>import("./index.html-BPf9FLhL.js"),__vite__mapDeps([1601,1])),meta:{t:"Markdown"}}],["/middleware/office/npoi/",{loader:()=>a(()=>import("./index.html-UipI9ISd.js"),__vite__mapDeps([1602,1])),meta:{t:"Npoi"}}],["/middleware/office/pdf/",{loader:()=>a(()=>import("./index.html-CyfPSrOo.js"),__vite__mapDeps([1603,1])),meta:{t:"Pdf"}}],["/middleware/office/ppt/",{loader:()=>a(()=>import("./index.html-B8lhXCWg.js"),__vite__mapDeps([1604,1])),meta:{t:"Ppt"}}],["/middleware/office/wenbenduibi/",{loader:()=>a(()=>import("./index.html-DzeU25qn.js"),__vite__mapDeps([1605,1])),meta:{t:"Wenbenduibi"}}],["/middleware/office/youjian/",{loader:()=>a(()=>import("./index.html-86wUULBE.js"),__vite__mapDeps([1606,1])),meta:{t:"Youjian"}}],["/middleware/printPlugin/frontPrint/",{loader:()=>a(()=>import("./index.html-BvfFqbfm.js"),__vite__mapDeps([1607,1])),meta:{t:"Front Print"}}],["/middleware/renwudiaodu/quartz/",{loader:()=>a(()=>import("./index.html-CfNcRG-e.js"),__vite__mapDeps([1608,1])),meta:{t:"Quartz"}}],["/middleware/reverseProxy/nginx/",{loader:()=>a(()=>import("./index.html-DwyGK9l5.js"),__vite__mapDeps([1609,1])),meta:{t:"Nginx"}}],["/middleware/smallService/cuowuzhuizonghexingnengjiankong/",{loader:()=>a(()=>import("./index.html-CODwi63r.js"),__vite__mapDeps([1610,1])),meta:{t:"Cuowuzhuizonghexingnengjiankong"}}],["/middleware/smallService/fenbushishiwu/",{loader:()=>a(()=>import("./index.html-UyIJjKBA.js"),__vite__mapDeps([1611,1])),meta:{t:"Fenbushishiwu"}}],["/middleware/smallService/fenbushisuo/",{loader:()=>a(()=>import("./index.html-CDTvh5Jf.js"),__vite__mapDeps([1612,1])),meta:{t:"Fenbushisuo"}}],["/middleware/smallService/fuwuzhuceyufaxian/",{loader:()=>a(()=>import("./index.html-JO6Z4fm-.js"),__vite__mapDeps([1613,1])),meta:{t:"Fuwuzhuceyufaxian"}}],["/middleware/smallService/tongyipeizhiguanli/",{loader:()=>a(()=>import("./index.html-DBOpOGA7.js"),__vite__mapDeps([1614,1])),meta:{t:"Tongyipeizhiguanli"}}],["/middleware/smallService/wangguan/",{loader:()=>a(()=>import("./index.html-DoO0AOGZ.js"),__vite__mapDeps([1615,1])),meta:{t:"Wangguan"}}],["/middleware/tuxiangchuli/ocr/",{loader:()=>a(()=>import("./index.html-6VizYv7C.js"),__vite__mapDeps([1616,1])),meta:{t:"Ocr"}}],["/middleware/tuxiangchuli/opencv/",{loader:()=>a(()=>import("./index.html-Cmq9IzEZ.js"),__vite__mapDeps([1617,1])),meta:{t:"Opencv"}}],["/middleware/tuxiangchuli/renlianshibie/",{loader:()=>a(()=>import("./index.html-qZIxEG2D.js"),__vite__mapDeps([1618,1])),meta:{t:"Renlianshibie"}}],["/middleware/tuxiangchuli/shoushishibie/",{loader:()=>a(()=>import("./index.html-B5CFx1qj.js"),__vite__mapDeps([1619,1])),meta:{t:"Shoushishibie"}}],["/middleware/testMange/jichengceshi/",{loader:()=>a(()=>import("./index.html-CAt2Iplf.js"),__vite__mapDeps([1620,1])),meta:{t:"Jichengceshi"}}],["/middleware/testMange/jizhunceshi/",{loader:()=>a(()=>import("./index.html-vZCL95Sj.js"),__vite__mapDeps([1621,1])),meta:{t:"Jizhunceshi"}}],["/middleware/testMange/mohuceshi/",{loader:()=>a(()=>import("./index.html-BmbBpevk.js"),__vite__mapDeps([1622,1])),meta:{t:"Mohuceshi"}}],["/middleware/xiaoxiduilie/rabbitmq/",{loader:()=>a(()=>import("./index.html-BcrSslus.js"),__vite__mapDeps([1623,1])),meta:{t:"Rabbitmq"}}],["/middleware/xiaoxiduilie/rocketmq/",{loader:()=>a(()=>import("./index.html-9JCJgVDE.js"),__vite__mapDeps([1624,1])),meta:{t:"Rocketmq"}}],["/middleware/yinpinshipin/ffmpeg/",{loader:()=>a(()=>import("./index.html-BK_z97bv.js"),__vite__mapDeps([1625,1])),meta:{t:"Ffmpeg"}}],["/soft/devTools/JetBrains/",{loader:()=>a(()=>import("./index.html-Csxxk76I.js"),__vite__mapDeps([1626,1])),meta:{t:"Jet Brains"}}],["/soft/devTools/projectManage/",{loader:()=>a(()=>import("./index.html-B2Wb1fYf.js"),__vite__mapDeps([1627,1])),meta:{t:"Project Manage"}}],["/soft/devTools/Postman/",{loader:()=>a(()=>import("./index.html-B_aognUV.js"),__vite__mapDeps([1628,1])),meta:{t:"Postman"}}],["/soft/Linux/Centos/",{loader:()=>a(()=>import("./index.html-tYxK9vVc.js"),__vite__mapDeps([1629,1])),meta:{t:"Centos"}}],["/soft/Linux/Ubuntu/",{loader:()=>a(()=>import("./index.html-C2FWTqmJ.js"),__vite__mapDeps([1630,1])),meta:{t:"Ubuntu"}}],["/soft/Linux/Install/",{loader:()=>a(()=>import("./index.html-BR4zDqP0.js"),__vite__mapDeps([1631,1])),meta:{t:"Install"}}],["/softwareDesign/highQualityCode/designMode/",{loader:()=>a(()=>import("./index.html-C4MQOyMu.js"),__vite__mapDeps([1632,1])),meta:{t:"Design Mode"}}],["/softwareDesign/highQualityCode/guifanyuchonggou/",{loader:()=>a(()=>import("./index.html-DxZbSIUe.js"),__vite__mapDeps([1633,1])),meta:{t:"Guifanyuchonggou"}}],["/softwareDesign/highQualityCode/mianxiangduixiang/",{loader:()=>a(()=>import("./index.html-BujZ0kda.js"),__vite__mapDeps([1634,1])),meta:{t:"Mianxiangduixiang"}}],["/softwareDesign/openSourceFrame/abp/",{loader:()=>a(()=>import("./index.html-DW8wOq4h.js"),__vite__mapDeps([1635,1])),meta:{t:"Abp"}}],["/web/blazor/baseOperator/",{loader:()=>a(()=>import("./index.html-Cm7fYMLz.js"),__vite__mapDeps([1636,1])),meta:{t:"Base Operator"}}],["/web/blazor/nugets/",{loader:()=>a(()=>import("./index.html-dz1MEckb.js"),__vite__mapDeps([1637,1])),meta:{t:"Nugets"}}],["/web/npm/bushu/",{loader:()=>a(()=>import("./index.html-QSK28tas.js"),__vite__mapDeps([1638,1])),meta:{t:"Bushu"}}],["/web/webkaifa/changedaimajiexi/",{loader:()=>a(()=>import("./index.html-yIoqtIhb.js"),__vite__mapDeps([1639,1])),meta:{t:"Changedaimajiexi"}}],["/dataBase/redis/zujian/stackexchange/",{loader:()=>a(()=>import("./index.html-CrBGID97.js"),__vite__mapDeps([1640,1])),meta:{t:"Stackexchange"}}],["/cloud/ciAndCd/jenkins/install/",{loader:()=>a(()=>import("./index.html-DRzjiC2E.js"),__vite__mapDeps([1641,1])),meta:{t:"Install"}}],["/cloud/ciAndCd/jenkins/release/",{loader:()=>a(()=>import("./index.html-DQnQsEAf.js"),__vite__mapDeps([1642,1])),meta:{t:"Release"}}],["/cloud/container/docker/install/",{loader:()=>a(()=>import("./index.html-5chixTYC.js"),__vite__mapDeps([1643,1])),meta:{t:"Install"}}],["/cloud/container/docker/jiaoben/",{loader:()=>a(()=>import("./index.html-BHThMs19.js"),__vite__mapDeps([1644,1])),meta:{t:"Jiaoben"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/",{loader:()=>a(()=>import("./index.html-CZVTk8XV.js"),__vite__mapDeps([1645,1])),meta:{t:"Cookieshenfenrenzheng"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/",{loader:()=>a(()=>import("./index.html-a0Isuawb.js"),__vite__mapDeps([1646,1])),meta:{t:"Identity"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/",{loader:()=>a(()=>import("./index.html-PHIqv0tl.js"),__vite__mapDeps([1647,1])),meta:{t:"Jwtrenzheng"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/",{loader:()=>a(()=>import("./index.html-CqVyai7w.js"),__vite__mapDeps([1648,1])),meta:{t:"Renzhengshouquanshili"}}],["/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/",{loader:()=>a(()=>import("./index.html-Dg5rc0lU.js"),__vite__mapDeps([1649,1])),meta:{t:"Session"}}],["/dotnet/api/controllerApi/extensions/",{loader:()=>a(()=>import("./index.html-C9T6O88J.js"),__vite__mapDeps([1650,1])),meta:{t:"Extensions"}}],["/dotnet/api/controllerApi/idempotent/",{loader:()=>a(()=>import("./index.html-qGtAleIW.js"),__vite__mapDeps([1651,1])),meta:{t:"Idempotent"}}],["/dotnet/api/controllerApi/safe/",{loader:()=>a(()=>import("./index.html-IJKDLYOC.js"),__vite__mapDeps([1652,1])),meta:{t:"Safe"}}],["/dotnet/api/swagger/tazhan/",{loader:()=>a(()=>import("./index.html-Dltw6pR2.js"),__vite__mapDeps([1653,1])),meta:{t:"Tazhan"}}],["/dotnet/base/logOperator/compomemt/",{loader:()=>a(()=>import("./index.html-lKee_MTf.js"),__vite__mapDeps([1654,1])),meta:{t:"Compomemt"}}],["/dotnet/base/peizhikuangjia/peizhikaiguan/",{loader:()=>a(()=>import("./index.html-CO3UCF8J.js"),__vite__mapDeps([1655,1])),meta:{t:"Peizhikaiguan"}}],["/dotnet/base/serialize/erjinzhi/",{loader:()=>a(()=>import("./index.html-D3GKYTxL.js"),__vite__mapDeps([1656,1])),meta:{t:"Erjinzhi"}}],["/dotnet/base/serialize/json/",{loader:()=>a(()=>import("./index.html-CzwQfCUG.js"),__vite__mapDeps([1657,1])),meta:{t:"Json"}}],["/dotnet/base/yilaizhuru/autofac/",{loader:()=>a(()=>import("./index.html-BNzxZJby.js"),__vite__mapDeps([1658,1])),meta:{t:"Autofac"}}],["/dotnet/base/yilaizhuru/iockongzhifanzhuai/",{loader:()=>a(()=>import("./index.html-DSacS6a-.js"),__vite__mapDeps([1659,1])),meta:{t:"Iockongzhifanzhuai"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/",{loader:()=>a(()=>import("./index.html-F6HS8X_I.js"),__vite__mapDeps([1660,1])),meta:{t:"Morenyilaizhuru"}}],["/dotnet/buildAndRelease/release/iis/",{loader:()=>a(()=>import("./index.html-BWqjMQSO.js"),__vite__mapDeps([1661,1])),meta:{t:"Iis"}}],["/dotnet/buildAndRelease/release/linux/",{loader:()=>a(()=>import("./index.html-gwueG5_J.js"),__vite__mapDeps([1662,1])),meta:{t:"Linux"}}],["/dotnet/buildAndRelease/release/releaseTools/",{loader:()=>a(()=>import("./index.html-D_kOEq5T.js"),__vite__mapDeps([1663,1])),meta:{t:"Release Tools"}}],["/dotnet/commonNuget/xianliu/qingqiuxianzhi/",{loader:()=>a(()=>import("./index.html-DlUL-xiF.js"),__vite__mapDeps([1664,1])),meta:{t:"Qingqiuxianzhi"}}],["/dotnet/csharp/jigecaozuo/gonggonglei/",{loader:()=>a(()=>import("./index.html-Ck_XVujL.js"),__vite__mapDeps([1665,1])),meta:{t:"Gonggonglei"}}],["/dotnet/csharp/jigecaozuo/kuozhan/",{loader:()=>a(()=>import("./index.html-DC0ESU_F.js"),__vite__mapDeps([1666,1])),meta:{t:"Kuozhan"}}],["/dotnet/webyingyong/webform/changedaimajiexi/",{loader:()=>a(()=>import("./index.html-CoFy5dxN.js"),__vite__mapDeps([1667,1])),meta:{t:"Changedaimajiexi"}}],["/dotnet/webyingyong/webform/cunchushuju/",{loader:()=>a(()=>import("./index.html-CKza-ah-.js"),__vite__mapDeps([1668,1])),meta:{t:"Cunchushuju"}}],["/dotnet/webyingyong/webform/shujubiao/",{loader:()=>a(()=>import("./index.html-BNq-qnS5.js"),__vite__mapDeps([1669,1])),meta:{t:"Shujubiao"}}],["/dotnet/webyingyong/webform/wenjianshangchuan/",{loader:()=>a(()=>import("./index.html-7m4_482k.js"),__vite__mapDeps([1670,1])),meta:{t:"Wenjianshangchuan"}}],["/dotnet/webyingyong/webform/xiancheng/",{loader:()=>a(()=>import("./index.html-CmFmzo0z.js"),__vite__mapDeps([1671,1])),meta:{t:"Xiancheng"}}],["/dotnet/zhuomianchengxu/jitongcaozuo/shili/",{loader:()=>a(()=>import("./index.html-CO3pTmHz.js"),__vite__mapDeps([1672,1])),meta:{t:"Shili"}}],["/dotnet/zhuomianchengxu/winform/jichuzhishi/",{loader:()=>a(()=>import("./index.html-D7dub1AA.js"),__vite__mapDeps([1673,1])),meta:{t:"Jichuzhishi"}}],["/dotnet/zhuomianchengxu/wpf/jichuzhishi/",{loader:()=>a(()=>import("./index.html-D3jL--Vg.js"),__vite__mapDeps([1674,1])),meta:{t:"Jichuzhishi"}}],["/dotnet/zhuomianchengxu/wpf/kuozhan/",{loader:()=>a(()=>import("./index.html-DN9zP2Fy.js"),__vite__mapDeps([1675,1])),meta:{t:"Kuozhan"}}],["/dotnet/zhuomianchengxu/wpf/ui/",{loader:()=>a(()=>import("./index.html-DUetoDB4.js"),__vite__mapDeps([1676,1])),meta:{t:"Ui"}}],["/middleware/authorize/identityserver4/mode/",{loader:()=>a(()=>import("./index.html-BXs7xhVC.js"),__vite__mapDeps([1677,1])),meta:{t:"Mode"}}],["/middleware/reverseProxy/nginx/anzhuang/",{loader:()=>a(()=>import("./index.html-eX0034it.js"),__vite__mapDeps([1678,1])),meta:{t:"Anzhuang"}}],["/middleware/reverseProxy/nginx/webui/",{loader:()=>a(()=>import("./index.html-D8gEBVou.js"),__vite__mapDeps([1679,1])),meta:{t:"Webui"}}],["/middleware/smallService/distributedObservability/",{loader:()=>a(()=>import("./index.html-3gG_DSbT.js"),__vite__mapDeps([1680,1])),meta:{t:"Distributed Observability"}}],["/middleware/xiaoxiduilie/rabbitmq/anzhuang/",{loader:()=>a(()=>import("./index.html-CpHBud0h.js"),__vite__mapDeps([1681,1])),meta:{t:"Anzhuang"}}],["/middleware/xiaoxiduilie/rabbitmq/kuozhan/",{loader:()=>a(()=>import("./index.html-BcPNzOgM.js"),__vite__mapDeps([1682,1])),meta:{t:"Kuozhan"}}],["/soft/devTools/sourceCodeManage/install/",{loader:()=>a(()=>import("./index.html-Cb1JJNnb.js"),__vite__mapDeps([1683,1])),meta:{t:"Install"}}],["/softwareDesign/highQualityCode/designMode/chuangjianxing/",{loader:()=>a(()=>import("./index.html-C7rL1ZzN.js"),__vite__mapDeps([1684,1])),meta:{t:"Chuangjianxing"}}],["/softwareDesign/highQualityCode/designMode/hangweixing/",{loader:()=>a(()=>import("./index.html-CdrTUKIX.js"),__vite__mapDeps([1685,1])),meta:{t:"Hangweixing"}}],["/web/blazor/masablazor/sample/",{loader:()=>a(()=>import("./index.html-JehXsWVZ.js"),__vite__mapDeps([1686,1])),meta:{t:"Sample"}}],["/softwareDesign/highQualityCode/designMode/jiegouxing/",{loader:()=>a(()=>import("./index.html-CAG3bptB.js"),__vite__mapDeps([1687,1])),meta:{t:"Jiegouxing"}}],["/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/",{loader:()=>a(()=>import("./index.html-CiXntyW_.js"),__vite__mapDeps([1688,1])),meta:{t:"Jingtaiziyuanzhongjianjian"}}],["/dotnet/base/pipeline/middleware/tazhan/",{loader:()=>a(()=>import("./index.html-DmHdWTS5.js"),__vite__mapDeps([1689,1])),meta:{t:"Tazhan"}}],["/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/",{loader:()=>a(()=>import("./index.html-C-1lhz3n.js"),__vite__mapDeps([1690,1])),meta:{t:"Piliangzhuce"}}],["/category/",{loader:()=>a(()=>import("./index.html-DG1v8p2t.js"),__vite__mapDeps([1691,1])),meta:{t:"分类",I:!1}}],["/category/article/",{loader:()=>a(()=>import("./index.html-D49cfDsj.js"),__vite__mapDeps([1692,1])),meta:{t:"article 分类",I:!1}}],["/category/cloud/",{loader:()=>a(()=>import("./index.html-B1LXxcJu.js"),__vite__mapDeps([1693,1])),meta:{t:"cloud 分类",I:!1}}],["/category/dotnet/",{loader:()=>a(()=>import("./index.html-D3AyrdHZ.js"),__vite__mapDeps([1694,1])),meta:{t:"dotNET 分类",I:!1}}],["/category/%E7%94%9F%E6%B4%BB/",{loader:()=>a(()=>import("./index.html-BL7mLiVF.js"),__vite__mapDeps([1695,1])),meta:{t:"生活 分类",I:!1}}],["/category/orm/",{loader:()=>a(()=>import("./index.html-BdYMEbbQ.js"),__vite__mapDeps([1696,1])),meta:{t:"orm 分类",I:!1}}],["/category/middleware/",{loader:()=>a(()=>import("./index.html-Dl372-Bi.js"),__vite__mapDeps([1697,1])),meta:{t:"middleware 分类",I:!1}}],["/category/soft/",{loader:()=>a(()=>import("./index.html-Bl_a3JJM.js"),__vite__mapDeps([1698,1])),meta:{t:"soft 分类",I:!1}}],["/category/photoshop/",{loader:()=>a(()=>import("./index.html-9svgUDWH.js"),__vite__mapDeps([1699,1])),meta:{t:"Photoshop 分类",I:!1}}],["/category/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/",{loader:()=>a(()=>import("./index.html-BmlVAYL8.js"),__vite__mapDeps([1700,1])),meta:{t:"软件设计 分类",I:!1}}],["/category/web/",{loader:()=>a(()=>import("./index.html-Beu46yIo.js"),__vite__mapDeps([1701,1])),meta:{t:"web 分类",I:!1}}],["/category/database/",{loader:()=>a(()=>import("./index.html-BdbygEep.js"),__vite__mapDeps([1702,1])),meta:{t:"dataBase 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>a(()=>import("./index.html-BWkw7cYy.js"),__vite__mapDeps([1703,1])),meta:{t:"数据库 分类",I:!1}}],["/category/dotnet/",{loader:()=>a(()=>import("./index.html-D3AyrdHZ.js"),__vite__mapDeps([1694,1])),meta:{t:"dotNet 分类",I:!1}}],["/category/kubernetes/",{loader:()=>a(()=>import("./index.html-Gxd08n8F.js"),__vite__mapDeps([1704,1])),meta:{t:"Kubernetes 分类",I:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{loader:()=>a(()=>import("./index.html-aZGrl2Gx.js"),__vite__mapDeps([1705,1])),meta:{t:"计算机基础 分类",I:!1}}],["/category/csharp/",{loader:()=>a(()=>import("./index.html-xyAzZaxY.js"),__vite__mapDeps([1706,1])),meta:{t:"csharp 分类",I:!1}}],["/category/otherlanguage/",{loader:()=>a(()=>import("./index.html-jWcQ3qYo.js"),__vite__mapDeps([1707,1])),meta:{t:"otherLanguage 分类",I:!1}}],["/category/linux/",{loader:()=>a(()=>import("./index.html-B2lvCH3_.js"),__vite__mapDeps([1708,1])),meta:{t:"Linux 分类",I:!1}}],["/category/windows/",{loader:()=>a(()=>import("./index.html-C32emsM2.js"),__vite__mapDeps([1709,1])),meta:{t:"Windows 分类",I:!1}}],["/category/linux/",{loader:()=>a(()=>import("./index.html-B2lvCH3_.js"),__vite__mapDeps([1708,1])),meta:{t:"linux 分类",I:!1}}],["/category/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%88%96%E8%AF%81%E4%B9%A6/",{loader:()=>a(()=>import("./index.html-Byd89d0h.js"),__vite__mapDeps([1710,1])),meta:{t:"服务器或证书 分类",I:!1}}],["/category/%E5%B0%8F%E8%BD%AF%E4%BB%B6%E4%BB%8B%E7%BB%8D/",{loader:()=>a(()=>import("./index.html-h6y6CN8I.js"),__vite__mapDeps([1711,1])),meta:{t:"小软件介绍 分类",I:!1}}],["/category/hyper-v/",{loader:()=>a(()=>import("./index.html-07tNmSvx.js"),__vite__mapDeps([1712,1])),meta:{t:"Hyper-v 分类",I:!1}}],["/category/navicat/",{loader:()=>a(()=>import("./index.html-CWNb5H9J.js"),__vite__mapDeps([1713,1])),meta:{t:"Navicat 分类",I:!1}}],["/category/jetbrains/",{loader:()=>a(()=>import("./index.html-DfsuxfRo.js"),__vite__mapDeps([1714,1])),meta:{t:"JetBrains 分类",I:!1}}],["/category/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-GvA9EblR.js"),__vite__mapDeps([1715,1])),meta:{t:"项目管理 分类",I:!1}}],["/category/postman/",{loader:()=>a(()=>import("./index.html-BZWi218a.js"),__vite__mapDeps([1716,1])),meta:{t:"Postman 分类",I:!1}}],["/category/git/",{loader:()=>a(()=>import("./index.html-CbcGm074.js"),__vite__mapDeps([1717,1])),meta:{t:"Git 分类",I:!1}}],["/category/visualstudio/",{loader:()=>a(()=>import("./index.html-BWcJcPzg.js"),__vite__mapDeps([1718,1])),meta:{t:"VisualStudio 分类",I:!1}}],["/category/visual-studio/",{loader:()=>a(()=>import("./index.html-D_JJD1OG.js"),__vite__mapDeps([1719,1])),meta:{t:"Visual Studio 分类",I:!1}}],["/category/%E7%8E%AF%E5%A2%83/",{loader:()=>a(()=>import("./index.html-CwYlJaXf.js"),__vite__mapDeps([1720,1])),meta:{t:"环境 分类",I:!1}}],["/tag/",{loader:()=>a(()=>import("./index.html-ClOlZ0B3.js"),__vite__mapDeps([1721,1])),meta:{t:"标签",I:!1}}],["/tag/%E6%B1%87%E6%80%BB/",{loader:()=>a(()=>import("./index.html-CIWCgqYL.js"),__vite__mapDeps([1722,1])),meta:{t:"标签: 汇总",I:!1}}],["/tag/%E8%BD%AC%E5%B2%97/",{loader:()=>a(()=>import("./index.html-JRXdUVU0.js"),__vite__mapDeps([1723,1])),meta:{t:"标签: 转岗",I:!1}}],["/tag/%E8%AF%AD%E5%BD%95/",{loader:()=>a(()=>import("./index.html-17LyyIci.js"),__vite__mapDeps([1724,1])),meta:{t:"标签: 语录",I:!1}}],["/tag/%E5%A5%BD%E4%B9%A0%E6%83%AF/",{loader:()=>a(()=>import("./index.html-BoJcZYE5.js"),__vite__mapDeps([1725,1])),meta:{t:"标签: 好习惯",I:!1}}],["/tag/%E6%97%A0/",{loader:()=>a(()=>import("./index.html-DfVcVZ19.js"),__vite__mapDeps([1726,1])),meta:{t:"标签: 无",I:!1}}],["/tag/%E6%96%87%E7%AB%A0/",{loader:()=>a(()=>import("./index.html-BGDcOFjM.js"),__vite__mapDeps([1727,1])),meta:{t:"标签: 文章",I:!1}}],["/tag/aspire/",{loader:()=>a(()=>import("./index.html-DSLkixDk.js"),__vite__mapDeps([1728,1])),meta:{t:"标签: aspire",I:!1}}],["/tag/kiota/",{loader:()=>a(()=>import("./index.html-33FP9Npz.js"),__vite__mapDeps([1729,1])),meta:{t:"标签: kiota",I:!1}}],["/tag/.net/",{loader:()=>a(()=>import("./index.html-BtGcyHLV.js"),__vite__mapDeps([1730,1])),meta:{t:"标签: .net",I:!1}}],["/tag/sk/",{loader:()=>a(()=>import("./index.html-BlLFKu9J.js"),__vite__mapDeps([1731,1])),meta:{t:"标签: sk",I:!1}}],["/tag/%E7%A4%BE%E4%BC%9A/",{loader:()=>a(()=>import("./index.html-Cq_zERWQ.js"),__vite__mapDeps([1732,1])),meta:{t:"标签: 社会",I:!1}}],["/tag/ps/",{loader:()=>a(()=>import("./index.html-BEr81Ho5.js"),__vite__mapDeps([1733,1])),meta:{t:"标签: ps",I:!1}}],["/tag/soft/",{loader:()=>a(()=>import("./index.html-ClDspl68.js"),__vite__mapDeps([1734,1])),meta:{t:"标签: soft",I:!1}}],["/tag/uos/",{loader:()=>a(()=>import("./index.html-BOyHTR51.js"),__vite__mapDeps([1735,1])),meta:{t:"标签: uos",I:!1}}],["/tag/%E7%BD%91%E7%AB%99/",{loader:()=>a(()=>import("./index.html-CwVIF2EF.js"),__vite__mapDeps([1736,1])),meta:{t:"标签: 网站",I:!1}}],["/tag/base/",{loader:()=>a(()=>import("./index.html-BxqjQDLN.js"),__vite__mapDeps([1737,1])),meta:{t:"标签: base",I:!1}}],["/tag/log/",{loader:()=>a(()=>import("./index.html-BoiRm3fn.js"),__vite__mapDeps([1738,1])),meta:{t:"标签: log",I:!1}}],["/tag/temp/",{loader:()=>a(()=>import("./index.html-BYTe2hNA.js"),__vite__mapDeps([1739,1])),meta:{t:"标签: temp",I:!1}}],["/tag/javascript/",{loader:()=>a(()=>import("./index.html-DBDa3Cm-.js"),__vite__mapDeps([1740,1])),meta:{t:"标签: javascript",I:!1}}],["/tag/%E5%AD%A6%E4%B9%A0/",{loader:()=>a(()=>import("./index.html-CKtYwakB.js"),__vite__mapDeps([1741,1])),meta:{t:"标签: 学习",I:!1}}],["/tag/%E5%AE%98%E6%96%B9/",{loader:()=>a(()=>import("./index.html-BwoWcIfW.js"),__vite__mapDeps([1742,1])),meta:{t:"标签: 官方",I:!1}}],["/tag/%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-CdhJgnvi.js"),__vite__mapDeps([1743,1])),meta:{t:"标签: 方法",I:!1}}],["/tag/%E4%B8%80%E8%87%B4%E6%80%A7/",{loader:()=>a(()=>import("./index.html-BPnref-1.js"),__vite__mapDeps([1744,1])),meta:{t:"标签: 一致性",I:!1}}],["/tag/%E6%89%A7%E8%A1%8C/",{loader:()=>a(()=>import("./index.html-XXoT2Ec1.js"),__vite__mapDeps([1745,1])),meta:{t:"标签: 执行",I:!1}}],["/tag/solution/",{loader:()=>a(()=>import("./index.html-DJ8ZmCd5.js"),__vite__mapDeps([1746,1])),meta:{t:"标签: solution",I:!1}}],["/tag/helper/",{loader:()=>a(()=>import("./index.html-9YpDLQIv.js"),__vite__mapDeps([1747,1])),meta:{t:"标签: helper",I:!1}}],["/tag/neo4j/",{loader:()=>a(()=>import("./index.html-MUgqcgbZ.js"),__vite__mapDeps([1748,1])),meta:{t:"标签: neo4j",I:!1}}],["/tag/k3s/",{loader:()=>a(()=>import("./index.html-CHO-zARf.js"),__vite__mapDeps([1749,1])),meta:{t:"标签: k3s",I:!1}}],["/tag/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/",{loader:()=>a(()=>import("./index.html-C5zowemg.js"),__vite__mapDeps([1750,1])),meta:{t:"标签: 服务发现",I:!1}}],["/tag/network/",{loader:()=>a(()=>import("./index.html-BVkwYE8e.js"),__vite__mapDeps([1751,1])),meta:{t:"标签: network",I:!1}}],["/tag/tcp/",{loader:()=>a(()=>import("./index.html-gWRof47C.js"),__vite__mapDeps([1752,1])),meta:{t:"标签: tcp",I:!1}}],["/tag/http/",{loader:()=>a(()=>import("./index.html-DBvBfkJ3.js"),__vite__mapDeps([1753,1])),meta:{t:"标签: http",I:!1}}],["/tag/cpu/",{loader:()=>a(()=>import("./index.html-Cm6YjK9I.js"),__vite__mapDeps([1754,1])),meta:{t:"标签: cpu",I:!1}}],["/tag/%E5%86%85%E5%AD%98/",{loader:()=>a(()=>import("./index.html-DuP5cNy5.js"),__vite__mapDeps([1755,1])),meta:{t:"标签: 内存",I:!1}}],["/tag/%E4%BB%BB%E5%8A%A1/",{loader:()=>a(()=>import("./index.html-B_4oaWvb.js"),__vite__mapDeps([1756,1])),meta:{t:"标签: 任务",I:!1}}],["/tag/%E7%8A%B6%E6%80%81/",{loader:()=>a(()=>import("./index.html-DEY5oDYB.js"),__vite__mapDeps([1757,1])),meta:{t:"标签: 状态",I:!1}}],["/tag/api/",{loader:()=>a(()=>import("./index.html-DqVV4K-u.js"),__vite__mapDeps([1758,1])),meta:{t:"标签: API",I:!1}}],["/tag/avalonia/",{loader:()=>a(()=>import("./index.html-CHi4d-jf.js"),__vite__mapDeps([1759,1])),meta:{t:"标签: avalonia",I:!1}}],["/tag/issue/",{loader:()=>a(()=>import("./index.html-CaI6SNGH.js"),__vite__mapDeps([1760,1])),meta:{t:"标签: issue",I:!1}}],["/tag/component/",{loader:()=>a(()=>import("./index.html-BDWITVJu.js"),__vite__mapDeps([1761,1])),meta:{t:"标签: component",I:!1}}],["/tag/operator/",{loader:()=>a(()=>import("./index.html-DT0sDJ68.js"),__vite__mapDeps([1762,1])),meta:{t:"标签: operator",I:!1}}],["/tag/backgroud/",{loader:()=>a(()=>import("./index.html-BDLkmg_K.js"),__vite__mapDeps([1763,1])),meta:{t:"标签: backgroud",I:!1}}],["/tag/lib.harmony/",{loader:()=>a(()=>import("./index.html-CWtfADmU.js"),__vite__mapDeps([1764,1])),meta:{t:"标签: Lib.Harmony",I:!1}}],["/tag/pinvoke/",{loader:()=>a(()=>import("./index.html-B70CIc1w.js"),__vite__mapDeps([1765,1])),meta:{t:"标签: pInvoke",I:!1}}],["/tag/dll/",{loader:()=>a(()=>import("./index.html-Dasa-hld.js"),__vite__mapDeps([1766,1])),meta:{t:"标签: DLL",I:!1}}],["/tag/%E4%B8%8B%E8%BD%BD/",{loader:()=>a(()=>import("./index.html-C3A9FBzS.js"),__vite__mapDeps([1767,1])),meta:{t:"标签: 下载",I:!1}}],["/tag/httpclient/",{loader:()=>a(()=>import("./index.html-CCKwtFsJ.js"),__vite__mapDeps([1768,1])),meta:{t:"标签: httpClient",I:!1}}],["/tag/toolkit/",{loader:()=>a(()=>import("./index.html-BLQOUV6Y.js"),__vite__mapDeps([1769,1])),meta:{t:"标签: toolkit",I:!1}}],["/tag/ikvm/",{loader:()=>a(()=>import("./index.html-45zprUwv.js"),__vite__mapDeps([1770,1])),meta:{t:"标签: ikvm",I:!1}}],["/tag/text/",{loader:()=>a(()=>import("./index.html-e6xAicL_.js"),__vite__mapDeps([1771,1])),meta:{t:"标签: text",I:!1}}],["/tag/book/",{loader:()=>a(()=>import("./index.html-BxJ-D85B.js"),__vite__mapDeps([1772,1])),meta:{t:"标签: book",I:!1}}],["/tag/%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-9thgIDsJ.js"),__vite__mapDeps([1773,1])),meta:{t:"标签: 优化",I:!1}}],["/tag/nuget/",{loader:()=>a(()=>import("./index.html-Dt3I7NTR.js"),__vite__mapDeps([1774,1])),meta:{t:"标签: nuget",I:!1}}],["/tag/%E5%A8%B1%E4%B9%90/",{loader:()=>a(()=>import("./index.html-DXL_5glT.js"),__vite__mapDeps([1775,1])),meta:{t:"标签: 娱乐",I:!1}}],["/tag/adonet/",{loader:()=>a(()=>import("./index.html-MQQD3f42.js"),__vite__mapDeps([1776,1])),meta:{t:"标签: adonet",I:!1}}],["/tag/compoent/",{loader:()=>a(()=>import("./index.html-TxFTlpnx.js"),__vite__mapDeps([1777,1])),meta:{t:"标签: compoent",I:!1}}],["/tag/efcore/",{loader:()=>a(()=>import("./index.html-DiWxnLbq.js"),__vite__mapDeps([1778,1])),meta:{t:"标签: efcore",I:!1}}],["/tag/odbc/",{loader:()=>a(()=>import("./index.html-DXEcbtpt.js"),__vite__mapDeps([1779,1])),meta:{t:"标签: odbc",I:!1}}],["/tag/epub/",{loader:()=>a(()=>import("./index.html-DmEK8SA8.js"),__vite__mapDeps([1780,1])),meta:{t:"标签: epub",I:!1}}],["/tag/traefik/",{loader:()=>a(()=>import("./index.html-BGW-Gjpc.js"),__vite__mapDeps([1781,1])),meta:{t:"标签: Traefik",I:!1}}],["/tag/%E8%87%AA%E5%8A%A8%E5%8C%96/",{loader:()=>a(()=>import("./index.html-BHr-yZOl.js"),__vite__mapDeps([1782,1])),meta:{t:"标签: 自动化",I:!1}}],["/tag/statistics/",{loader:()=>a(()=>import("./index.html-B92oNyAR.js"),__vite__mapDeps([1783,1])),meta:{t:"标签: statistics",I:!1}}],["/tag/%E9%80%9A%E8%AE%AF/",{loader:()=>a(()=>import("./index.html-7NwsG6-Z.js"),__vite__mapDeps([1784,1])),meta:{t:"标签: 通讯",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-DZjDD3QO.js"),__vite__mapDeps([1785,1])),meta:{t:"标签: 测试",I:!1}}],["/tag/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/",{loader:()=>a(()=>import("./index.html-DMS1RSIR.js"),__vite__mapDeps([1786,1])),meta:{t:"标签: 开源协议",I:!1}}],["/tag/%E5%91%BD%E4%BB%A4/",{loader:()=>a(()=>import("./index.html-DkKZbK_2.js"),__vite__mapDeps([1787,1])),meta:{t:"标签: 命令",I:!1}}],["/tag/shell/",{loader:()=>a(()=>import("./index.html-BQXbQZ4M.js"),__vite__mapDeps([1788,1])),meta:{t:"标签: shell",I:!1}}],["/tag/tools/",{loader:()=>a(()=>import("./index.html-C37PG0oe.js"),__vite__mapDeps([1789,1])),meta:{t:"标签: tools",I:!1}}],["/tag/ddns/",{loader:()=>a(()=>import("./index.html-BgTro5ov.js"),__vite__mapDeps([1790,1])),meta:{t:"标签: DDNS",I:!1}}],["/tag/docker/",{loader:()=>a(()=>import("./index.html-CIAr2Mzx.js"),__vite__mapDeps([1791,1])),meta:{t:"标签: docker",I:!1}}],["/tag/linux/",{loader:()=>a(()=>import("./index.html-DQpk5vpG.js"),__vite__mapDeps([1792,1])),meta:{t:"标签: linux",I:!1}}],["/tag/wsl/",{loader:()=>a(()=>import("./index.html-CUJVI8sr.js"),__vite__mapDeps([1793,1])),meta:{t:"标签: wsl",I:!1}}],["/tag/%E5%AE%9E%E8%B7%B5/",{loader:()=>a(()=>import("./index.html-SG7Ja_VM.js"),__vite__mapDeps([1794,1])),meta:{t:"标签: 实践",I:!1}}],["/tag/ddd/",{loader:()=>a(()=>import("./index.html-CQUJjSKg.js"),__vite__mapDeps([1795,1])),meta:{t:"标签: ddd",I:!1}}],["/tag/system/",{loader:()=>a(()=>import("./index.html-DsmAahCB.js"),__vite__mapDeps([1796,1])),meta:{t:"标签: system",I:!1}}],["/tag/%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81/",{loader:()=>a(()=>import("./index.html-8571bmId.js"),__vite__mapDeps([1797,1])),meta:{t:"标签: 一次性密码",I:!1}}],["/tag/blazor/",{loader:()=>a(()=>import("./index.html-BdbTvq61.js"),__vite__mapDeps([1798,1])),meta:{t:"标签: blazor",I:!1}}],["/tag/%E7%A4%BA%E4%BE%8B/",{loader:()=>a(()=>import("./index.html-C7_50hWY.js"),__vite__mapDeps([1799,1])),meta:{t:"标签: 示例",I:!1}}],["/tag/api/",{loader:()=>a(()=>import("./index.html-DqVV4K-u.js"),__vite__mapDeps([1758,1])),meta:{t:"标签: api",I:!1}}],["/tag/datatype/",{loader:()=>a(()=>import("./index.html-wXLdfW3q.js"),__vite__mapDeps([1800,1])),meta:{t:"标签: dataType",I:!1}}],["/tag/%E5%87%BD%E6%95%B0/",{loader:()=>a(()=>import("./index.html-QaislJSq.js"),__vite__mapDeps([1801,1])),meta:{t:"标签: 函数",I:!1}}],["/tag/sqlserver/",{loader:()=>a(()=>import("./index.html-DvN15Ew3.js"),__vite__mapDeps([1802,1])),meta:{t:"标签: sqlserver",I:!1}}],["/tag/dockerfile/",{loader:()=>a(()=>import("./index.html-3Yj2Hq6i.js"),__vite__mapDeps([1803,1])),meta:{t:"标签: dockerfile",I:!1}}],["/tag/images/",{loader:()=>a(()=>import("./index.html-CYjfqyAl.js"),__vite__mapDeps([1804,1])),meta:{t:"标签: images",I:!1}}],["/tag/podman/",{loader:()=>a(()=>import("./index.html-CcRgYLdT.js"),__vite__mapDeps([1805,1])),meta:{t:"标签: podman",I:!1}}],["/tag/install/",{loader:()=>a(()=>import("./index.html-CrXEMNyZ.js"),__vite__mapDeps([1806,1])),meta:{t:"标签: install",I:!1}}],["/tag/dotnet/",{loader:()=>a(()=>import("./index.html-BAwUCl7G.js"),__vite__mapDeps([1807,1])),meta:{t:"标签: dotnet",I:!1}}],["/tag/redis/",{loader:()=>a(()=>import("./index.html-Bfuo-M6_.js"),__vite__mapDeps([1808,1])),meta:{t:"标签: redis",I:!1}}],["/tag/%E9%A1%B9%E7%9B%AE/",{loader:()=>a(()=>import("./index.html-iirfiOQ7.js"),__vite__mapDeps([1809,1])),meta:{t:"标签: 项目",I:!1}}],["/tag/%E5%9B%BD%E5%AF%86/",{loader:()=>a(()=>import("./index.html-ilce9mwf.js"),__vite__mapDeps([1810,1])),meta:{t:"标签: 国密",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>a(()=>import("./index.html-CFyYJ2tR.js"),__vite__mapDeps([1811,1])),meta:{t:"标签: 加密",I:!1}}],["/tag/%E9%97%AD%E5%8C%85/",{loader:()=>a(()=>import("./index.html-B1-Za6Qk.js"),__vite__mapDeps([1812,1])),meta:{t:"标签: 闭包",I:!1}}],["/tag/enum/",{loader:()=>a(()=>import("./index.html-Dswrr7F0.js"),__vite__mapDeps([1813,1])),meta:{t:"标签: enum",I:!1}}],["/tag/channel/",{loader:()=>a(()=>import("./index.html-ClXxEk-4.js"),__vite__mapDeps([1814,1])),meta:{t:"标签: channel",I:!1}}],["/tag/thread/",{loader:()=>a(()=>import("./index.html-BtFxboJv.js"),__vite__mapDeps([1815,1])),meta:{t:"标签: thread",I:!1}}],["/tag/plinq/",{loader:()=>a(()=>import("./index.html-CVhWLx11.js"),__vite__mapDeps([1816,1])),meta:{t:"标签: plinq",I:!1}}],["/tag/parallel/",{loader:()=>a(()=>import("./index.html-n1qi7lQ0.js"),__vite__mapDeps([1817,1])),meta:{t:"标签: parallel",I:!1}}],["/tag/innosetup/",{loader:()=>a(()=>import("./index.html-DcQk_tpC.js"),__vite__mapDeps([1818,1])),meta:{t:"标签: InnoSetup",I:!1}}],["/tag/%E6%89%93%E5%8C%85/",{loader:()=>a(()=>import("./index.html-DYRJ6b0j.js"),__vite__mapDeps([1819,1])),meta:{t:"标签: 打包",I:!1}}],["/tag/efcore/",{loader:()=>a(()=>import("./index.html-DiWxnLbq.js"),__vite__mapDeps([1778,1])),meta:{t:"标签: EFCore",I:!1}}],["/tag/%E9%94%81/",{loader:()=>a(()=>import("./index.html-0CAiEfKJ.js"),__vite__mapDeps([1820,1])),meta:{t:"标签: 锁",I:!1}}],["/tag/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/",{loader:()=>a(()=>import("./index.html-BcEjP867.js"),__vite__mapDeps([1821,1])),meta:{t:"标签: 表达式树",I:!1}}],["/tag/es/",{loader:()=>a(()=>import("./index.html-rC0hluCP.js"),__vite__mapDeps([1822,1])),meta:{t:"标签: es",I:!1}}],["/tag/readme/",{loader:()=>a(()=>import("./index.html-uuPfyfvY.js"),__vite__mapDeps([1823,1])),meta:{t:"标签: readme",I:!1}}],["/tag/struct/",{loader:()=>a(()=>import("./index.html-DHONm0Kv.js"),__vite__mapDeps([1824,1])),meta:{t:"标签: struct",I:!1}}],["/tag/pdf/",{loader:()=>a(()=>import("./index.html-DFpGHruF.js"),__vite__mapDeps([1825,1])),meta:{t:"标签: pdf",I:!1}}],["/tag/ppt/",{loader:()=>a(()=>import("./index.html-BKI7zDyn.js"),__vite__mapDeps([1826,1])),meta:{t:"标签: ppt",I:!1}}],["/tag/test/",{loader:()=>a(()=>import("./index.html-jo6X6-xy.js"),__vite__mapDeps([1827,1])),meta:{t:"标签: test",I:!1}}],["/tag/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/",{loader:()=>a(()=>import("./index.html-DDT5xQEo.js"),__vite__mapDeps([1828,1])),meta:{t:"标签: 接口调用",I:!1}}],["/tag/%E4%BB%93%E5%BA%93/",{loader:()=>a(()=>import("./index.html-BTePITQ3.js"),__vite__mapDeps([1829,1])),meta:{t:"标签: 仓库",I:!1}}],["/tag/pages/",{loader:()=>a(()=>import("./index.html-Bke1Awz1.js"),__vite__mapDeps([1830,1])),meta:{t:"标签: pages",I:!1}}],["/tag/%E6%8F%92%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-Bkxq0Me8.js"),__vite__mapDeps([1831,1])),meta:{t:"标签: 插件",I:!1}}],["/tag/%E5%BF%AB%E6%8D%B7%E9%94%AE/",{loader:()=>a(()=>import("./index.html-CJ00bh0F.js"),__vite__mapDeps([1832,1])),meta:{t:"标签: 快捷键",I:!1}}],["/tag/%E6%95%88%E7%8E%87/",{loader:()=>a(()=>import("./index.html-DwECOQmP.js"),__vite__mapDeps([1833,1])),meta:{t:"标签: 效率",I:!1}}],["/tag/vs/",{loader:()=>a(()=>import("./index.html-6N3jcn_6.js"),__vite__mapDeps([1834,1])),meta:{t:"标签: VS",I:!1}}],["/tag/antblazor/",{loader:()=>a(()=>import("./index.html-CqmVZT6Q.js"),__vite__mapDeps([1835,1])),meta:{t:"标签: antBlazor",I:!1}}],["/tag/form/",{loader:()=>a(()=>import("./index.html-CSRm5NZp.js"),__vite__mapDeps([1836,1])),meta:{t:"标签: form",I:!1}}],["/tag/started/",{loader:()=>a(()=>import("./index.html-CsnylhSt.js"),__vite__mapDeps([1837,1])),meta:{t:"标签: started",I:!1}}],["/tag/js/",{loader:()=>a(()=>import("./index.html-BQO-7q-2.js"),__vite__mapDeps([1838,1])),meta:{t:"标签: js",I:!1}}],["/tag/layout/",{loader:()=>a(()=>import("./index.html-COaM4kAr.js"),__vite__mapDeps([1839,1])),meta:{t:"标签: layout",I:!1}}],["/tag/life/",{loader:()=>a(()=>import("./index.html-C2i9Us1Y.js"),__vite__mapDeps([1840,1])),meta:{t:"标签: life",I:!1}}],["/tag/jenkins/",{loader:()=>a(()=>import("./index.html-DzKnSnRA.js"),__vite__mapDeps([1841,1])),meta:{t:"标签: Jenkins",I:!1}}],["/tag/cicd/",{loader:()=>a(()=>import("./index.html-De513piL.js"),__vite__mapDeps([1842,1])),meta:{t:"标签: ci/cd",I:!1}}],["/tag/async/",{loader:()=>a(()=>import("./index.html-hPu_Buu8.js"),__vite__mapDeps([1843,1])),meta:{t:"标签: async",I:!1}}],["/tag/logger/",{loader:()=>a(()=>import("./index.html-DiGFWWod.js"),__vite__mapDeps([1844,1])),meta:{t:"标签: logger",I:!1}}],["/tag/opentelemetry/",{loader:()=>a(()=>import("./index.html-ngsEu44F.js"),__vite__mapDeps([1845,1])),meta:{t:"标签: OpenTelemetry",I:!1}}],["/tag/%E7%9B%91%E6%8E%A7/",{loader:()=>a(()=>import("./index.html-BWqhkIJ0.js"),__vite__mapDeps([1846,1])),meta:{t:"标签: 监控",I:!1}}],["/tag/jaeger/",{loader:()=>a(()=>import("./index.html-gSvD1CV2.js"),__vite__mapDeps([1847,1])),meta:{t:"标签: jaeger",I:!1}}],["/article/",{loader:()=>a(()=>import("./index.html-Dn0jQM5k.js"),__vite__mapDeps([1848,1])),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>a(()=>import("./index.html-D6lDry3I.js"),__vite__mapDeps([1849,1])),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>a(()=>import("./index.html-CVnjffu_.js"),__vite__mapDeps([1850,1])),meta:{t:"时间轴",I:!1}}]]);/*!
  * vue-router v4.3.2
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const va=typeof document<"u";function hm(n){return n.__esModule||n[Symbol.toStringTag]==="Module"}const mn=Object.assign;function Wp(n,s){const t={};for(const p in s){const e=s[p];t[p]=fs(e)?e.map(n):n(e)}return t}const tt=()=>{},fs=Array.isArray,mu=/#/g,ym=/&/g,bm=/\//g,fm=/=/g,wm=/\?/g,gu=/\+/g,_m=/%5B/g,vm=/%5D/g,hu=/%5E/g,Em=/%60/g,yu=/%7B/g,Tm=/%7C/g,bu=/%7D/g,xm=/%20/g;function to(n){return encodeURI(""+n).replace(Tm,"|").replace(_m,"[").replace(vm,"]")}function Am(n){return to(n).replace(yu,"{").replace(bu,"}").replace(hu,"^")}function ge(n){return to(n).replace(gu,"%2B").replace(xm,"+").replace(mu,"%23").replace(ym,"%26").replace(Em,"`").replace(yu,"{").replace(bu,"}").replace(hu,"^")}function Sm(n){return ge(n).replace(fm,"%3D")}function Pm(n){return to(n).replace(mu,"%23").replace(wm,"%3F")}function Im(n){return n==null?"":Pm(n).replace(bm,"%2F")}function dt(n){try{return decodeURIComponent(""+n)}catch{}return""+n}const zm=/\/$/,Dm=n=>n.replace(zm,"");function Gp(n,s,t="/"){let p,e={},o="",c="";const u=s.indexOf("#");let i=s.indexOf("?");return u<i&&u>=0&&(i=-1),i>-1&&(p=s.slice(0,i),o=s.slice(i+1,u>-1?u:s.length),e=n(o)),u>-1&&(p=p||s.slice(0,u),c=s.slice(u,s.length)),p=Om(p??s,t),{fullPath:p+(o&&"?")+o+c,path:p,query:e,hash:dt(c)}}function Cm(n,s){const t=s.query?n(s.query):"";return s.path+(t&&"?")+t+(s.hash||"")}function hc(n,s){return!s||!n.toLowerCase().startsWith(s.toLowerCase())?n:n.slice(s.length)||"/"}function Lm(n,s,t){const p=s.matched.length-1,e=t.matched.length-1;return p>-1&&p===e&&Ra(s.matched[p],t.matched[e])&&fu(s.params,t.params)&&n(s.query)===n(t.query)&&s.hash===t.hash}function Ra(n,s){return(n.aliasOf||n)===(s.aliasOf||s)}function fu(n,s){if(Object.keys(n).length!==Object.keys(s).length)return!1;for(const t in n)if(!Rm(n[t],s[t]))return!1;return!0}function Rm(n,s){return fs(n)?yc(n,s):fs(s)?yc(s,n):n===s}function yc(n,s){return fs(s)?n.length===s.length&&n.every((t,p)=>t===s[p]):n.length===1&&n[0]===s}function Om(n,s){if(n.startsWith("/"))return n;if(!n)return s;const t=s.split("/"),p=n.split("/"),e=p[p.length-1];(e===".."||e===".")&&p.push("");let o=t.length-1,c,u;for(c=0;c<p.length;c++)if(u=p[c],u!==".")if(u==="..")o>1&&o--;else break;return t.slice(0,o).join("/")+"/"+p.slice(c).join("/")}var mt;(function(n){n.pop="pop",n.push="push"})(mt||(mt={}));var pt;(function(n){n.back="back",n.forward="forward",n.unknown=""})(pt||(pt={}));function qm(n){if(!n)if(va){const s=document.querySelector("base");n=s&&s.getAttribute("href")||"/",n=n.replace(/^\w+:\/\/[^\/]+/,"")}else n="/";return n[0]!=="/"&&n[0]!=="#"&&(n="/"+n),Dm(n)}const jm=/^[^#]+#/;function Nm(n,s){return n.replace(jm,"#")+s}function Vm(n,s){const t=document.documentElement.getBoundingClientRect(),p=n.getBoundingClientRect();return{behavior:s.behavior,left:p.left-t.left-(s.left||0),top:p.top-t.top-(s.top||0)}}const xp=()=>({left:window.scrollX,top:window.scrollY});function Mm(n){let s;if("el"in n){const t=n.el,p=typeof t=="string"&&t.startsWith("#"),e=typeof t=="string"?p?document.getElementById(t.slice(1)):document.querySelector(t):t;if(!e)return;s=Vm(e,n)}else s=n;"scrollBehavior"in document.documentElement.style?window.scrollTo(s):window.scrollTo(s.left!=null?s.left:window.scrollX,s.top!=null?s.top:window.scrollY)}function bc(n,s){return(history.state?history.state.position-s:-1)+n}const he=new Map;function Bm(n,s){he.set(n,s)}function Fm(n){const s=he.get(n);return he.delete(n),s}let Hm=()=>location.protocol+"//"+location.host;function wu(n,s){const{pathname:t,search:p,hash:e}=s,o=n.indexOf("#");if(o>-1){let u=e.includes(n.slice(o))?n.slice(o).length:1,i=e.slice(u);return i[0]!=="/"&&(i="/"+i),hc(i,"")}return hc(t,n)+p+e}function Wm(n,s,t,p){let e=[],o=[],c=null;const u=({state:m})=>{const g=wu(n,location),y=t.value,w=s.value;let T=0;if(m){if(t.value=g,s.value=m,c&&c===y){c=null;return}T=w?m.position-w.position:0}else p(g);e.forEach(_=>{_(t.value,y,{delta:T,type:mt.pop,direction:T?T>0?pt.forward:pt.back:pt.unknown})})};function i(){c=t.value}function r(m){e.push(m);const g=()=>{const y=e.indexOf(m);y>-1&&e.splice(y,1)};return o.push(g),g}function k(){const{history:m}=window;m.state&&m.replaceState(mn({},m.state,{scroll:xp()}),"")}function d(){for(const m of o)m();o=[],window.removeEventListener("popstate",u),window.removeEventListener("beforeunload",k)}return window.addEventListener("popstate",u),window.addEventListener("beforeunload",k,{passive:!0}),{pauseListeners:i,listen:r,destroy:d}}function fc(n,s,t,p=!1,e=!1){return{back:n,current:s,forward:t,replaced:p,position:window.history.length,scroll:e?xp():null}}function Gm(n){const{history:s,location:t}=window,p={value:wu(n,t)},e={value:s.state};e.value||o(p.value,{back:null,current:p.value,forward:null,position:s.length-1,replaced:!0,scroll:null},!0);function o(i,r,k){const d=n.indexOf("#"),m=d>-1?(t.host&&document.querySelector("base")?n:n.slice(d))+i:Hm()+n+i;try{s[k?"replaceState":"pushState"](r,"",m),e.value=r}catch(g){console.error(g),t[k?"replace":"assign"](m)}}function c(i,r){const k=mn({},s.state,fc(e.value.back,i,e.value.forward,!0),r,{position:e.value.position});o(i,k,!0),p.value=i}function u(i,r){const k=mn({},e.value,s.state,{forward:i,scroll:xp()});o(k.current,k,!0);const d=mn({},fc(p.value,i,null),{position:k.position+1},r);o(i,d,!1),p.value=i}return{location:p,state:e,push:u,replace:c}}function Um(n){n=qm(n);const s=Gm(n),t=Wm(n,s.state,s.location,s.replace);function p(o,c=!0){c||t.pauseListeners(),history.go(o)}const e=mn({location:"",base:n,go:p,createHref:Nm.bind(null,n)},s,t);return Object.defineProperty(e,"location",{enumerable:!0,get:()=>s.location.value}),Object.defineProperty(e,"state",{enumerable:!0,get:()=>s.state.value}),e}function Qm(n){return typeof n=="string"||n&&typeof n=="object"}function _u(n){return typeof n=="string"||typeof n=="symbol"}const Ds={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},vu=Symbol("");var wc;(function(n){n[n.aborted=4]="aborted",n[n.cancelled=8]="cancelled",n[n.duplicated=16]="duplicated"})(wc||(wc={}));function Oa(n,s){return mn(new Error,{type:n,[vu]:!0},s)}function Is(n,s){return n instanceof Error&&vu in n&&(s==null||!!(n.type&s))}const _c="[^/]+?",$m={sensitive:!1,strict:!1,start:!0,end:!0},Km=/[.+*?^${}()[\]/\\]/g;function Jm(n,s){const t=mn({},$m,s),p=[];let e=t.start?"^":"";const o=[];for(const r of n){const k=r.length?[]:[90];t.strict&&!r.length&&(e+="/");for(let d=0;d<r.length;d++){const m=r[d];let g=40+(t.sensitive?.25:0);if(m.type===0)d||(e+="/"),e+=m.value.replace(Km,"\\$&"),g+=40;else if(m.type===1){const{value:y,repeatable:w,optional:T,regexp:_}=m;o.push({name:y,repeatable:w,optional:T});const x=_||_c;if(x!==_c){g+=10;try{new RegExp(`(${x})`)}catch(v){throw new Error(`Invalid custom RegExp for param "${y}" (${x}): `+v.message)}}let f=w?`((?:${x})(?:/(?:${x}))*)`:`(${x})`;d||(f=T&&r.length<2?`(?:/${f})`:"/"+f),T&&(f+="?"),e+=f,g+=20,T&&(g+=-8),w&&(g+=-20),x===".*"&&(g+=-50)}k.push(g)}p.push(k)}if(t.strict&&t.end){const r=p.length-1;p[r][p[r].length-1]+=.7000000000000001}t.strict||(e+="/?"),t.end?e+="$":t.strict&&(e+="(?:/|$)");const c=new RegExp(e,t.sensitive?"":"i");function u(r){const k=r.match(c),d={};if(!k)return null;for(let m=1;m<k.length;m++){const g=k[m]||"",y=o[m-1];d[y.name]=g&&y.repeatable?g.split("/"):g}return d}function i(r){let k="",d=!1;for(const m of n){(!d||!k.endsWith("/"))&&(k+="/"),d=!1;for(const g of m)if(g.type===0)k+=g.value;else if(g.type===1){const{value:y,repeatable:w,optional:T}=g,_=y in r?r[y]:"";if(fs(_)&&!w)throw new Error(`Provided param "${y}" is an array but it is not repeatable (* or + modifiers)`);const x=fs(_)?_.join("/"):_;if(!x)if(T)m.length<2&&(k.endsWith("/")?k=k.slice(0,-1):d=!0);else throw new Error(`Missing required param "${y}"`);k+=x}}return k||"/"}return{re:c,score:p,keys:o,parse:u,stringify:i}}function Xm(n,s){let t=0;for(;t<n.length&&t<s.length;){const p=s[t]-n[t];if(p)return p;t++}return n.length<s.length?n.length===1&&n[0]===80?-1:1:n.length>s.length?s.length===1&&s[0]===80?1:-1:0}function Ym(n,s){let t=0;const p=n.score,e=s.score;for(;t<p.length&&t<e.length;){const o=Xm(p[t],e[t]);if(o)return o;t++}if(Math.abs(e.length-p.length)===1){if(vc(p))return 1;if(vc(e))return-1}return e.length-p.length}function vc(n){const s=n[n.length-1];return n.length>0&&s[s.length-1]<0}const Zm={type:0,value:""},ng=/[a-zA-Z0-9_]/;function sg(n){if(!n)return[[]];if(n==="/")return[[Zm]];if(!n.startsWith("/"))throw new Error(`Invalid path "${n}"`);function s(g){throw new Error(`ERR (${t})/"${r}": ${g}`)}let t=0,p=t;const e=[];let o;function c(){o&&e.push(o),o=[]}let u=0,i,r="",k="";function d(){r&&(t===0?o.push({type:0,value:r}):t===1||t===2||t===3?(o.length>1&&(i==="*"||i==="+")&&s(`A repeatable param (${r}) must be alone in its segment. eg: '/:ids+.`),o.push({type:1,value:r,regexp:k,repeatable:i==="*"||i==="+",optional:i==="*"||i==="?"})):s("Invalid state to consume buffer"),r="")}function m(){r+=i}for(;u<n.length;){if(i=n[u++],i==="\\"&&t!==2){p=t,t=4;continue}switch(t){case 0:i==="/"?(r&&d(),c()):i===":"?(d(),t=1):m();break;case 4:m(),t=p;break;case 1:i==="("?t=2:ng.test(i)?m():(d(),t=0,i!=="*"&&i!=="?"&&i!=="+"&&u--);break;case 2:i===")"?k[k.length-1]=="\\"?k=k.slice(0,-1)+i:t=3:k+=i;break;case 3:d(),t=0,i!=="*"&&i!=="?"&&i!=="+"&&u--,k="";break;default:s("Unknown state");break}}return t===2&&s(`Unfinished custom RegExp for param "${r}"`),d(),c(),e}function ag(n,s,t){const p=Jm(sg(n.path),t),e=mn(p,{record:n,parent:s,children:[],alias:[]});return s&&!e.record.aliasOf==!s.record.aliasOf&&s.children.push(e),e}function tg(n,s){const t=[],p=new Map;s=xc({strict:!1,end:!0,sensitive:!1},s);function e(k){return p.get(k)}function o(k,d,m){const g=!m,y=pg(k);y.aliasOf=m&&m.record;const w=xc(s,k),T=[y];if("alias"in k){const f=typeof k.alias=="string"?[k.alias]:k.alias;for(const v of f)T.push(mn({},y,{components:m?m.record.components:y.components,path:v,aliasOf:m?m.record:y}))}let _,x;for(const f of T){const{path:v}=f;if(d&&v[0]!=="/"){const q=d.record.path,C=q[q.length-1]==="/"?"":"/";f.path=d.record.path+(v&&C+v)}if(_=ag(f,d,w),m?m.alias.push(_):(x=x||_,x!==_&&x.alias.push(_),g&&k.name&&!Tc(_)&&c(k.name)),y.children){const q=y.children;for(let C=0;C<q.length;C++)o(q[C],_,m&&m.children[C])}m=m||_,(_.record.components&&Object.keys(_.record.components).length||_.record.name||_.record.redirect)&&i(_)}return x?()=>{c(x)}:tt}function c(k){if(_u(k)){const d=p.get(k);d&&(p.delete(k),t.splice(t.indexOf(d),1),d.children.forEach(c),d.alias.forEach(c))}else{const d=t.indexOf(k);d>-1&&(t.splice(d,1),k.record.name&&p.delete(k.record.name),k.children.forEach(c),k.alias.forEach(c))}}function u(){return t}function i(k){let d=0;for(;d<t.length&&Ym(k,t[d])>=0&&(k.record.path!==t[d].record.path||!Eu(k,t[d]));)d++;t.splice(d,0,k),k.record.name&&!Tc(k)&&p.set(k.record.name,k)}function r(k,d){let m,g={},y,w;if("name"in k&&k.name){if(m=p.get(k.name),!m)throw Oa(1,{location:k});w=m.record.name,g=mn(Ec(d.params,m.keys.filter(x=>!x.optional).concat(m.parent?m.parent.keys.filter(x=>x.optional):[]).map(x=>x.name)),k.params&&Ec(k.params,m.keys.map(x=>x.name))),y=m.stringify(g)}else if(k.path!=null)y=k.path,m=t.find(x=>x.re.test(y)),m&&(g=m.parse(y),w=m.record.name);else{if(m=d.name?p.get(d.name):t.find(x=>x.re.test(d.path)),!m)throw Oa(1,{location:k,currentLocation:d});w=m.record.name,g=mn({},d.params,k.params),y=m.stringify(g)}const T=[];let _=m;for(;_;)T.unshift(_.record),_=_.parent;return{name:w,path:y,params:g,matched:T,meta:og(T)}}return n.forEach(k=>o(k)),{addRoute:o,resolve:r,removeRoute:c,getRoutes:u,getRecordMatcher:e}}function Ec(n,s){const t={};for(const p of s)p in n&&(t[p]=n[p]);return t}function pg(n){return{path:n.path,redirect:n.redirect,name:n.name,meta:n.meta||{},aliasOf:void 0,beforeEnter:n.beforeEnter,props:eg(n),children:n.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in n?n.components||null:n.component&&{default:n.component}}}function eg(n){const s={},t=n.props||!1;if("component"in n)s.default=t;else for(const p in n.components)s[p]=typeof t=="object"?t[p]:t;return s}function Tc(n){for(;n;){if(n.record.aliasOf)return!0;n=n.parent}return!1}function og(n){return n.reduce((s,t)=>mn(s,t.meta),{})}function xc(n,s){const t={};for(const p in n)t[p]=p in s?s[p]:n[p];return t}function Eu(n,s){return s.children.some(t=>t===n||Eu(n,t))}function cg(n){const s={};if(n===""||n==="?")return s;const p=(n[0]==="?"?n.slice(1):n).split("&");for(let e=0;e<p.length;++e){const o=p[e].replace(gu," "),c=o.indexOf("="),u=dt(c<0?o:o.slice(0,c)),i=c<0?null:dt(o.slice(c+1));if(u in s){let r=s[u];fs(r)||(r=s[u]=[r]),r.push(i)}else s[u]=i}return s}function Ac(n){let s="";for(let t in n){const p=n[t];if(t=Sm(t),p==null){p!==void 0&&(s+=(s.length?"&":"")+t);continue}(fs(p)?p.map(o=>o&&ge(o)):[p&&ge(p)]).forEach(o=>{o!==void 0&&(s+=(s.length?"&":"")+t,o!=null&&(s+="="+o))})}return s}function lg(n){const s={};for(const t in n){const p=n[t];p!==void 0&&(s[t]=fs(p)?p.map(e=>e==null?null:""+e):p==null?p:""+p)}return s}const ug=Symbol(""),Sc=Symbol(""),Ap=Symbol(""),po=Symbol(""),ye=Symbol("");function Ua(){let n=[];function s(p){return n.push(p),()=>{const e=n.indexOf(p);e>-1&&n.splice(e,1)}}function t(){n=[]}return{add:s,list:()=>n.slice(),reset:t}}function Js(n,s,t,p,e,o=c=>c()){const c=p&&(p.enterCallbacks[e]=p.enterCallbacks[e]||[]);return()=>new Promise((u,i)=>{const r=m=>{m===!1?i(Oa(4,{from:t,to:s})):m instanceof Error?i(m):Qm(m)?i(Oa(2,{from:s,to:m})):(c&&p.enterCallbacks[e]===c&&typeof m=="function"&&c.push(m),u())},k=o(()=>n.call(p&&p.instances[e],s,t,r));let d=Promise.resolve(k);n.length<3&&(d=d.then(r)),d.catch(m=>i(m))})}function Up(n,s,t,p,e=o=>o()){const o=[];for(const c of n)for(const u in c.components){let i=c.components[u];if(!(s!=="beforeRouteEnter"&&!c.instances[u]))if(ig(i)){const k=(i.__vccOpts||i)[s];k&&o.push(Js(k,t,p,c,u,e))}else{let r=i();o.push(()=>r.then(k=>{if(!k)return Promise.reject(new Error(`Couldn't resolve component "${u}" at "${c.path}"`));const d=hm(k)?k.default:k;c.components[u]=d;const g=(d.__vccOpts||d)[s];return g&&Js(g,t,p,c,u,e)()}))}}return o}function ig(n){return typeof n=="object"||"displayName"in n||"props"in n||"__vccOpts"in n}function Pc(n){const s=An(Ap),t=An(po),p=E(()=>{const i=ma(n.to);return s.resolve(i)}),e=E(()=>{const{matched:i}=p.value,{length:r}=i,k=i[r-1],d=t.matched;if(!k||!d.length)return-1;const m=d.findIndex(Ra.bind(null,k));if(m>-1)return m;const g=Ic(i[r-2]);return r>1&&Ic(k)===g&&d[d.length-1].path!==g?d.findIndex(Ra.bind(null,i[r-2])):m}),o=E(()=>e.value>-1&&mg(t.params,p.value.params)),c=E(()=>e.value>-1&&e.value===t.matched.length-1&&fu(t.params,p.value.params));function u(i={}){return dg(i)?s[ma(n.replace)?"replace":"push"](ma(n.to)).catch(tt):Promise.resolve()}return{route:p,href:E(()=>p.value.href),isActive:o,isExactActive:c,navigate:u}}const rg=M({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Pc,setup(n,{slots:s}){const t=Et(Pc(n)),{options:p}=An(Ap),e=E(()=>({[zc(n.activeClass,p.linkActiveClass,"router-link-active")]:t.isActive,[zc(n.exactActiveClass,p.linkExactActiveClass,"router-link-exact-active")]:t.isExactActive}));return()=>{const o=s.default&&s.default(t);return n.custom?o:l("a",{"aria-current":t.isExactActive?n.ariaCurrentValue:null,href:t.href,onClick:t.navigate,class:e.value},o)}}}),kg=rg;function dg(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget&&n.currentTarget.getAttribute){const s=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(s))return}return n.preventDefault&&n.preventDefault(),!0}}function mg(n,s){for(const t in s){const p=s[t],e=n[t];if(typeof p=="string"){if(p!==e)return!1}else if(!fs(e)||e.length!==p.length||p.some((o,c)=>o!==e[c]))return!1}return!0}function Ic(n){return n?n.aliasOf?n.aliasOf.path:n.path:""}const zc=(n,s,t)=>n??s??t,gg=M({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(n,{attrs:s,slots:t}){const p=An(ye),e=E(()=>n.route||p.value),o=An(Sc,0),c=E(()=>{let r=ma(o);const{matched:k}=e.value;let d;for(;(d=k[r])&&!d.components;)r++;return r}),u=E(()=>e.value.matched[c.value]);bs(Sc,E(()=>c.value+1)),bs(ug,u),bs(ye,e);const i=J();return kn(()=>[i.value,u.value,n.name],([r,k,d],[m,g,y])=>{k&&(k.instances[d]=r,g&&g!==k&&r&&r===m&&(k.leaveGuards.size||(k.leaveGuards=g.leaveGuards),k.updateGuards.size||(k.updateGuards=g.updateGuards))),r&&k&&(!g||!Ra(k,g)||!m)&&(k.enterCallbacks[d]||[]).forEach(w=>w(r))},{flush:"post"}),()=>{const r=e.value,k=n.name,d=u.value,m=d&&d.components[k];if(!m)return Dc(t.default,{Component:m,route:r});const g=d.props[k],y=g?g===!0?r.params:typeof g=="function"?g(r):g:null,T=l(m,mn({},y,s,{onVnodeUnmounted:_=>{_.component.isUnmounted&&(d.instances[k]=null)},ref:i}));return Dc(t.default,{Component:T,route:r})||T}}});function Dc(n,s){if(!n)return null;const t=n(s);return t.length===1?t[0]:t}const hg=gg;function yg(n){const s=tg(n.routes,n),t=n.parseQuery||cg,p=n.stringifyQuery||Ac,e=n.history,o=Ua(),c=Ua(),u=Ua(),i=Cn(Ds);let r=Ds;va&&n.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const k=Wp.bind(null,S=>""+S),d=Wp.bind(null,Im),m=Wp.bind(null,dt);function g(S,H){let B,$;return _u(S)?(B=s.getRecordMatcher(S),$=H):$=S,s.addRoute($,B)}function y(S){const H=s.getRecordMatcher(S);H&&s.removeRoute(H)}function w(){return s.getRoutes().map(S=>S.record)}function T(S){return!!s.getRecordMatcher(S)}function _(S,H){if(H=mn({},H||i.value),typeof S=="string"){const b=Gp(t,S,H.path),A=s.resolve({path:b.path},H),I=e.createHref(b.fullPath);return mn(b,A,{params:m(A.params),hash:dt(b.hash),redirectedFrom:void 0,href:I})}let B;if(S.path!=null)B=mn({},S,{path:Gp(t,S.path,H.path).path});else{const b=mn({},S.params);for(const A in b)b[A]==null&&delete b[A];B=mn({},S,{params:d(b)}),H.params=d(H.params)}const $=s.resolve(B,H),cn=S.hash||"";$.params=k(m($.params));const bn=Cm(p,mn({},S,{hash:Am(cn),path:$.path})),h=e.createHref(bn);return mn({fullPath:bn,hash:cn,query:p===Ac?lg(S.query):S.query||{}},$,{redirectedFrom:void 0,href:h})}function x(S){return typeof S=="string"?Gp(t,S,i.value.path):mn({},S)}function f(S,H){if(r!==S)return Oa(8,{from:H,to:S})}function v(S){return N(S)}function q(S){return v(mn(x(S),{replace:!0}))}function C(S){const H=S.matched[S.matched.length-1];if(H&&H.redirect){const{redirect:B}=H;let $=typeof B=="function"?B(S):B;return typeof $=="string"&&($=$.includes("?")||$.includes("#")?$=x($):{path:$},$.params={}),mn({query:S.query,hash:S.hash,params:$.path!=null?{}:S.params},$)}}function N(S,H){const B=r=_(S),$=i.value,cn=S.state,bn=S.force,h=S.replace===!0,b=C(B);if(b)return N(mn(x(b),{state:typeof b=="object"?mn({},cn,b.state):cn,force:bn,replace:h}),H||B);const A=B;A.redirectedFrom=H;let I;return!bn&&Lm(p,$,B)&&(I=Oa(16,{to:A,from:$}),ts($,$,!0,!1)),(I?Promise.resolve(I):D(A,$)).catch(P=>Is(P)?Is(P,2)?P:_s(P):Q(P,A,$)).then(P=>{if(P){if(Is(P,2))return N(mn({replace:h},x(P.to),{state:typeof P.to=="object"?mn({},cn,P.to.state):cn,force:bn}),H||A)}else P=R(A,$,!0,h,cn);return G(A,$,P),P})}function L(S,H){const B=f(S,H);return B?Promise.reject(B):Promise.resolve()}function K(S){const H=Ps.values().next().value;return H&&typeof H.runWithContext=="function"?H.runWithContext(S):S()}function D(S,H){let B;const[$,cn,bn]=bg(S,H);B=Up($.reverse(),"beforeRouteLeave",S,H);for(const b of $)b.leaveGuards.forEach(A=>{B.push(Js(A,S,H))});const h=L.bind(null,S,H);return B.push(h),Rn(B).then(()=>{B=[];for(const b of o.list())B.push(Js(b,S,H));return B.push(h),Rn(B)}).then(()=>{B=Up(cn,"beforeRouteUpdate",S,H);for(const b of cn)b.updateGuards.forEach(A=>{B.push(Js(A,S,H))});return B.push(h),Rn(B)}).then(()=>{B=[];for(const b of bn)if(b.beforeEnter)if(fs(b.beforeEnter))for(const A of b.beforeEnter)B.push(Js(A,S,H));else B.push(Js(b.beforeEnter,S,H));return B.push(h),Rn(B)}).then(()=>(S.matched.forEach(b=>b.enterCallbacks={}),B=Up(bn,"beforeRouteEnter",S,H,K),B.push(h),Rn(B))).then(()=>{B=[];for(const b of c.list())B.push(Js(b,S,H));return B.push(h),Rn(B)}).catch(b=>Is(b,8)?b:Promise.reject(b))}function G(S,H,B){u.list().forEach($=>K(()=>$(S,H,B)))}function R(S,H,B,$,cn){const bn=f(S,H);if(bn)return bn;const h=H===Ds,b=va?history.state:{};B&&($||h?e.replace(S.fullPath,mn({scroll:h&&b&&b.scroll},cn)):e.push(S.fullPath,cn)),i.value=S,ts(S,H,B,h),_s()}let nn;function Sn(){nn||(nn=e.listen((S,H,B)=>{if(!vs.listening)return;const $=_(S),cn=C($);if(cn){N(mn(cn,{replace:!0}),$).catch(tt);return}r=$;const bn=i.value;va&&Bm(bc(bn.fullPath,B.delta),xp()),D($,bn).catch(h=>Is(h,12)?h:Is(h,2)?(N(h.to,$).then(b=>{Is(b,20)&&!B.delta&&B.type===mt.pop&&e.go(-1,!1)}).catch(tt),Promise.reject()):(B.delta&&e.go(-B.delta,!1),Q(h,$,bn))).then(h=>{h=h||R($,bn,!1),h&&(B.delta&&!Is(h,8)?e.go(-B.delta,!1):B.type===mt.pop&&Is(h,20)&&e.go(-1,!1)),G($,bn,h)}).catch(tt)}))}let En=Ua(),U=Ua(),sn;function Q(S,H,B){_s(S);const $=U.list();return $.length?$.forEach(cn=>cn(S,H,B)):console.error(S),Promise.reject(S)}function Ln(){return sn&&i.value!==Ds?Promise.resolve():new Promise((S,H)=>{En.add([S,H])})}function _s(S){return sn||(sn=!S,Sn(),En.list().forEach(([H,B])=>S?B(S):H()),En.reset()),S}function ts(S,H,B,$){const{scrollBehavior:cn}=n;if(!va||!cn)return Promise.resolve();const bn=!B&&Fm(bc(S.fullPath,0))||($||!B)&&history.state&&history.state.scroll||null;return Os().then(()=>cn(S,H,bn)).then(h=>h&&Mm(h)).catch(h=>Q(h,S,H))}const jn=S=>e.go(S);let Jn;const Ps=new Set,vs={currentRoute:i,listening:!0,addRoute:g,removeRoute:y,hasRoute:T,getRoutes:w,resolve:_,options:n,push:v,replace:q,go:jn,back:()=>jn(-1),forward:()=>jn(1),beforeEach:o.add,beforeResolve:c.add,afterEach:u.add,onError:U.add,isReady:Ln,install(S){const H=this;S.component("RouterLink",kg),S.component("RouterView",hg),S.config.globalProperties.$router=H,Object.defineProperty(S.config.globalProperties,"$route",{enumerable:!0,get:()=>ma(i)}),va&&!Jn&&i.value===Ds&&(Jn=!0,v(e.location).catch(cn=>{}));const B={};for(const cn in Ds)Object.defineProperty(B,cn,{get:()=>i.value[cn],enumerable:!0});S.provide(Ap,H),S.provide(po,wl(B)),S.provide(ye,i);const $=S.unmount;Ps.add(S),S.unmount=function(){Ps.delete(S),Ps.size<1&&(r=Ds,nn&&nn(),nn=null,i.value=Ds,Jn=!1,sn=!1),$()}}};function Rn(S){return S.reduce((H,B)=>H.then(()=>K(B)),Promise.resolve())}return vs}function bg(n,s){const t=[],p=[],e=[],o=Math.max(s.matched.length,n.matched.length);for(let c=0;c<o;c++){const u=s.matched[c];u&&(n.matched.find(r=>Ra(r,u))?p.push(u):t.push(u));const i=n.matched[c];i&&(s.matched.find(r=>Ra(r,i))||e.push(i))}return[t,p,e]}function ba(){return An(Ap)}function js(){return An(po)}var eo=Symbol(""),Ss=()=>{const n=An(eo);if(!n)throw new Error("useClientData() is called without provider.");return n},fg=()=>Ss().pageComponent,wn=()=>Ss().pageData,gn=()=>Ss().pageFrontmatter,wg=()=>Ss().pageHead,Tu=()=>Ss().pageLang,_g=()=>Ss().pageLayout,Ns=()=>Ss().routeLocale,vg=()=>Ss().routes,xu=()=>Ss().siteData,It=()=>Ss().siteLocaleData,Eg=Symbol(""),be=Cn(mm),gt=Cn(gm),Au=n=>{const s=im(n);if(gt.value[s])return s;const t=encodeURI(s);return gt.value[t]?t:be.value[s]||be.value[t]||s},As=n=>{const s=Au(n),t=gt.value[s]??{...gt.value["/404.html"],notFound:!0};return{path:s,notFound:!1,...t}},Sp=M({name:"ClientOnly",setup(n,s){const t=J(!1);return fn(()=>{t.value=!0}),()=>{var p,e;return t.value?(e=(p=s.slots).default)==null?void 0:e.call(p):null}}}),Su=M({name:"Content",props:{path:{type:String,required:!1,default:""}},setup(n){const s=fg(),t=E(()=>{if(!n.path)return s.value;const p=As(n.path);return Dk(()=>p.loader().then(({comp:e})=>e))});return()=>l(t.value)}}),ws=(n={})=>n,yn=n=>pa(n)?n:`/kbms/${du(n)}`,Tg=n=>{if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget){const s=n.currentTarget.getAttribute("target");if(s!=null&&s.match(/\b_blank\b/i))return}return n.preventDefault(),!0}},In=({active:n=!1,activeClass:s="route-link-active",to:t,...p},{slots:e})=>{var i;const o=ba(),c=Au(t),u=c.startsWith("#")||c.startsWith("?")?c:yn(c);return l("a",{...p,class:["route-link",{[s]:n}],href:u,onClick:(r={})=>{Tg(r)?o.push(t).catch():Promise.resolve()}},(i=e.default)==null?void 0:i.call(e))};In.displayName="RouteLink";In.props={active:Boolean,activeClass:String,to:String};var xg="Layout",Ag="en-US",la=Et({resolveLayouts:n=>n.reduce((s,t)=>({...s,...t.layouts}),{}),resolvePageHead:(n,s,t)=>{const p=Pn(s.description)?s.description:t.description,e=[...Array.isArray(s.head)?s.head:[],...t.head,["title",{},n],["meta",{name:"description",content:p}]];return cm(e)},resolvePageHeadTitle:(n,s)=>[n.title,s.title].filter(t=>!!t).join(" | "),resolvePageLang:(n,s)=>n.lang||s.lang||Ag,resolvePageLayout:(n,s)=>{const t=Pn(n.frontmatter.layout)?n.frontmatter.layout:xg;if(!s[t])throw new Error(`[vuepress] Cannot resolve layout: ${t}`);return s[t]},resolveRouteLocale:(n,s)=>rm(n,s),resolveSiteLocaleData:(n,s)=>{var t;return{...n,...n.locales[s],head:[...((t=n.locales[s])==null?void 0:t.head)??[],...n.head??[]]}}});const Sg={},zt=n=>{const s=Ns();return E(()=>n[s.value]??{})};var ns=Uint8Array,xa=Uint16Array,Pg=Int32Array,Pu=new ns([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Iu=new ns([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Ig=new ns([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),zu=function(n,s){for(var t=new xa(31),p=0;p<31;++p)t[p]=s+=1<<n[p-1];for(var e=new Pg(t[30]),p=1;p<30;++p)for(var o=t[p];o<t[p+1];++o)e[o]=o-t[p]<<5|p;return{b:t,r:e}},Du=zu(Pu,2),Cu=Du.b,zg=Du.r;Cu[28]=258,zg[258]=28;var Dg=zu(Iu,0),Cg=Dg.b,fe=new xa(32768);for(var _n=0;_n<32768;++_n){var Hs=(_n&43690)>>1|(_n&21845)<<1;Hs=(Hs&52428)>>2|(Hs&13107)<<2,Hs=(Hs&61680)>>4|(Hs&3855)<<4,fe[_n]=((Hs&65280)>>8|(Hs&255)<<8)>>1}var et=function(n,s,t){for(var p=n.length,e=0,o=new xa(s);e<p;++e)n[e]&&++o[n[e]-1];var c=new xa(s);for(e=1;e<s;++e)c[e]=c[e-1]+o[e-1]<<1;var u;if(t){u=new xa(1<<s);var i=15-s;for(e=0;e<p;++e)if(n[e])for(var r=e<<4|n[e],k=s-n[e],d=c[n[e]-1]++<<k,m=d|(1<<k)-1;d<=m;++d)u[fe[d]>>i]=r}else for(u=new xa(p),e=0;e<p;++e)n[e]&&(u[e]=fe[c[n[e]-1]++]>>15-n[e]);return u},Dt=new ns(288);for(var _n=0;_n<144;++_n)Dt[_n]=8;for(var _n=144;_n<256;++_n)Dt[_n]=9;for(var _n=256;_n<280;++_n)Dt[_n]=7;for(var _n=280;_n<288;++_n)Dt[_n]=8;var Lu=new ns(32);for(var _n=0;_n<32;++_n)Lu[_n]=5;var Lg=et(Dt,9,1),Rg=et(Lu,5,1),Qp=function(n){for(var s=n[0],t=1;t<n.length;++t)n[t]>s&&(s=n[t]);return s},ms=function(n,s,t){var p=s/8|0;return(n[p]|n[p+1]<<8)>>(s&7)&t},$p=function(n,s){var t=s/8|0;return(n[t]|n[t+1]<<8|n[t+2]<<16)>>(s&7)},Og=function(n){return(n+7)/8|0},Ru=function(n,s,t){return(s==null||s<0)&&(s=0),(t==null||t>n.length)&&(t=n.length),new ns(n.subarray(s,t))},qg=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],os=function(n,s,t){var p=new Error(s||qg[n]);if(p.code=n,Error.captureStackTrace&&Error.captureStackTrace(p,os),!t)throw p;return p},jg=function(n,s,t,p){var e=n.length,o=0;if(!e||s.f&&!s.l)return t||new ns(0);var c=!t,u=c||s.i!=2,i=s.i;c&&(t=new ns(e*3));var r=function(cn){var bn=t.length;if(cn>bn){var h=new ns(Math.max(bn*2,cn));h.set(t),t=h}},k=s.f||0,d=s.p||0,m=s.b||0,g=s.l,y=s.d,w=s.m,T=s.n,_=e*8;do{if(!g){k=ms(n,d,1);var x=ms(n,d+1,3);if(d+=3,x)if(x==1)g=Lg,y=Rg,w=9,T=5;else if(x==2){var C=ms(n,d,31)+257,N=ms(n,d+10,15)+4,L=C+ms(n,d+5,31)+1;d+=14;for(var K=new ns(L),D=new ns(19),G=0;G<N;++G)D[Ig[G]]=ms(n,d+G*3,7);d+=N*3;for(var R=Qp(D),nn=(1<<R)-1,Sn=et(D,R,1),G=0;G<L;){var En=Sn[ms(n,d,nn)];d+=En&15;var f=En>>4;if(f<16)K[G++]=f;else{var U=0,sn=0;for(f==16?(sn=3+ms(n,d,3),d+=2,U=K[G-1]):f==17?(sn=3+ms(n,d,7),d+=3):f==18&&(sn=11+ms(n,d,127),d+=7);sn--;)K[G++]=U}}var Q=K.subarray(0,C),Ln=K.subarray(C);w=Qp(Q),T=Qp(Ln),g=et(Q,w,1),y=et(Ln,T,1)}else os(1);else{var f=Og(d)+4,v=n[f-4]|n[f-3]<<8,q=f+v;if(q>e){i&&os(0);break}u&&r(m+v),t.set(n.subarray(f,q),m),s.b=m+=v,s.p=d=q*8,s.f=k;continue}if(d>_){i&&os(0);break}}u&&r(m+131072);for(var _s=(1<<w)-1,ts=(1<<T)-1,jn=d;;jn=d){var U=g[$p(n,d)&_s],Jn=U>>4;if(d+=U&15,d>_){i&&os(0);break}if(U||os(2),Jn<256)t[m++]=Jn;else if(Jn==256){jn=d,g=null;break}else{var Ps=Jn-254;if(Jn>264){var G=Jn-257,vs=Pu[G];Ps=ms(n,d,(1<<vs)-1)+Cu[G],d+=vs}var Rn=y[$p(n,d)&ts],S=Rn>>4;Rn||os(3),d+=Rn&15;var Ln=Cg[S];if(S>3){var vs=Iu[S];Ln+=$p(n,d)&(1<<vs)-1,d+=vs}if(d>_){i&&os(0);break}u&&r(m+131072);var H=m+Ps;if(m<Ln){var B=o-Ln,$=Math.min(Ln,H);for(B+m<0&&os(3);m<$;++m)t[m]=p[B+m]}for(;m<H;++m)t[m]=t[m-Ln]}}s.l=g,s.p=jn,s.b=m,s.f=k,g&&(k=1,s.m=w,s.d=y,s.n=T)}while(!k);return m!=t.length&&c?Ru(t,0,m):t.subarray(0,m)},Ng=new ns(0),Vg=function(n,s){return((n[0]&15)!=8||n[0]>>4>7||(n[0]<<8|n[1])%31)&&os(6,"invalid zlib data"),(n[1]>>5&1)==+!s&&os(6,"invalid zlib data: "+(n[1]&32?"need":"unexpected")+" dictionary"),(n[1]>>3&4)+2};function Mg(n,s){return jg(n.subarray(Vg(n,s),-4),{i:2},s,s)}var we=typeof TextDecoder<"u"&&new TextDecoder,Bg=0;try{we.decode(Ng,{stream:!0}),Bg=1}catch{}var Fg=function(n){for(var s="",t=0;;){var p=n[t++],e=(p>127)+(p>223)+(p>239);if(t+e>n.length)return{s,r:Ru(n,t-1)};e?e==3?(p=((p&15)<<18|(n[t++]&63)<<12|(n[t++]&63)<<6|n[t++]&63)-65536,s+=String.fromCharCode(55296|p>>10,56320|p&1023)):e&1?s+=String.fromCharCode((p&31)<<6|n[t++]&63):s+=String.fromCharCode((p&15)<<12|(n[t++]&63)<<6|n[t++]&63):s+=String.fromCharCode(p)}};function Hg(n,s){{for(var t=new ns(n.length),p=0;p<n.length;++p)t[p]=n.charCodeAt(p);return t}for(var e=n.length,p=0;p<e;++p);}function Wg(n,s){var t;if(we)return we.decode(n);var p=Fg(n),e=p.s,t=p.r;return t.length&&os(8),e}const Cc=n=>{const s=atob(n);return Wg(Mg(Hg(s)))},is=(n,s)=>{var p;const t=(p=(s==null?void 0:s._instance)||At())==null?void 0:p.appContext.components;return t?n in t||rs(n)in t||vt(rs(n))in t:!1},Ou=n=>typeof n<"u",Kp=n=>typeof n=="number",_e=Array.isArray,qa=(n,s)=>Pn(n)&&n.startsWith(s),Gg=(n,s)=>Pn(n)&&n.endsWith(s),Ct=Object.entries,ks=Object.keys,oo=n=>{if(n){if(typeof n=="number")return new Date(n);const s=Date.parse(n.toString());if(!Number.isNaN(s))return new Date(s)}return null},Lt=n=>qa(n,"/"),Ug="http://.",Qg=(n,s)=>{if(Lt(n)||typeof s!="string")return As(n);const t=s.slice(0,s.lastIndexOf("/"));return As(new URL(`${t}/${encodeURI(n)}`,Ug).pathname)},qu=n=>new Promise(s=>setTimeout(s,n));function ju(n,s){let t,p,e;const o=J(!0),c=()=>{o.value=!0,e()};kn(n,c,{flush:"sync"});const u=typeof s=="function"?s:s.get,i=typeof s=="function"?void 0:s.set,r=$e((k,d)=>(p=k,e=d,{get(){return o.value&&(t=u(),o.value=!1),p(),t},set(m){i==null||i(m)}}));return Object.isExtensible(r)&&(r.trigger=c),r}function Fa(n){return ll()?(jr(n),!0):!1}function Bn(n){return typeof n=="function"?n():ma(n)}const Rt=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const $g=Object.prototype.toString,Kg=n=>$g.call(n)==="[object Object]",ga=()=>{},Lc=Jg();function Jg(){var n,s;return Rt&&((n=window==null?void 0:window.navigator)==null?void 0:n.userAgent)&&(/iP(ad|hone|od)/.test(window.navigator.userAgent)||((s=window==null?void 0:window.navigator)==null?void 0:s.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function co(n,s){function t(...p){return new Promise((e,o)=>{Promise.resolve(n(()=>s.apply(this,p),{fn:s,thisArg:this,args:p})).then(e).catch(o)})}return t}const Nu=n=>n();function Xg(n,s={}){let t,p,e=ga;const o=u=>{clearTimeout(u),e(),e=ga};return u=>{const i=Bn(n),r=Bn(s.maxWait);return t&&o(t),i<=0||r!==void 0&&r<=0?(p&&(o(p),p=null),Promise.resolve(u())):new Promise((k,d)=>{e=s.rejectOnCancel?d:k,r&&!p&&(p=setTimeout(()=>{t&&o(t),p=null,k(u())},r)),t=setTimeout(()=>{p&&o(p),p=null,k(u())},i)})}}function Yg(...n){let s=0,t,p=!0,e=ga,o,c,u,i,r;!Mn(n[0])&&typeof n[0]=="object"?{delay:c,trailing:u=!0,leading:i=!0,rejectOnCancel:r=!1}=n[0]:[c,u=!0,i=!0,r=!1]=n;const k=()=>{t&&(clearTimeout(t),t=void 0,e(),e=ga)};return m=>{const g=Bn(c),y=Date.now()-s,w=()=>o=m();return k(),g<=0?(s=Date.now(),w()):(y>g&&(i||!p)?(s=Date.now(),w()):u&&(o=new Promise((T,_)=>{e=r?_:T,t=setTimeout(()=>{s=Date.now(),p=!0,T(w()),k()},Math.max(0,g-y))})),!i&&!t&&(t=setTimeout(()=>p=!0,g)),p=!1,o)}}function Zg(n=Nu){const s=J(!0);function t(){s.value=!1}function p(){s.value=!0}const e=(...o)=>{s.value&&n(...o)};return{isActive:ya(s),pause:t,resume:p,eventFilter:e}}function nh(n){let s;function t(){return s||(s=n()),s}return t.reset=async()=>{const p=s;s=void 0,p&&await p},t}function Vu(n){return At()}function sh(...n){if(n.length!==1)return Va(...n);const s=n[0];return typeof s=="function"?ya($e(()=>({get:s,set:ga}))):J(s)}function ah(n,s=200,t={}){return co(Xg(s,t),n)}function th(n,s=200,t=!1,p=!0,e=!1){return co(Yg(s,t,p,e),n)}function ph(n,s,t={}){const{eventFilter:p=Nu,...e}=t;return kn(n,co(p,s),e)}function eh(n,s,t={}){const{eventFilter:p,...e}=t,{eventFilter:o,pause:c,resume:u,isActive:i}=Zg(p);return{stop:ph(n,s,{...e,eventFilter:o}),pause:c,resume:u,isActive:i}}function Pp(n,s=!0,t){Vu()?fn(n,t):s?n():Os(n)}function oh(n,s){Vu()&&Ma(n,s)}function ch(n,s,t={}){const{immediate:p=!0}=t,e=J(!1);let o=null;function c(){o&&(clearTimeout(o),o=null)}function u(){e.value=!1,c()}function i(...r){c(),e.value=!0,o=setTimeout(()=>{e.value=!1,o=null,n(...r)},Bn(s))}return p&&(e.value=!0,Rt&&i()),Fa(u),{isPending:ya(e),start:i,stop:u}}function ht(n=!1,s={}){const{truthyValue:t=!0,falsyValue:p=!1}=s,e=Mn(n),o=J(n);function c(u){if(arguments.length)return o.value=u,o.value;{const i=Bn(t);return o.value=o.value===i?Bn(p):i,o.value}}return e?c:[o,c]}function Cs(n){var s;const t=Bn(n);return(s=t==null?void 0:t.$el)!=null?s:t}const Rs=Rt?window:void 0,Mu=Rt?window.document:void 0,Bu=Rt?window.navigator:void 0;function qn(...n){let s,t,p,e;if(typeof n[0]=="string"||Array.isArray(n[0])?([t,p,e]=n,s=Rs):[s,t,p,e]=n,!s)return ga;Array.isArray(t)||(t=[t]),Array.isArray(p)||(p=[p]);const o=[],c=()=>{o.forEach(k=>k()),o.length=0},u=(k,d,m,g)=>(k.addEventListener(d,m,g),()=>k.removeEventListener(d,m,g)),i=kn(()=>[Cs(s),Bn(e)],([k,d])=>{if(c(),!k)return;const m=Kg(d)?{...d}:d;o.push(...t.flatMap(g=>p.map(y=>u(k,g,y,m))))},{immediate:!0,flush:"post"}),r=()=>{i(),c()};return Fa(r),r}function lh(){const n=J(!1),s=At();return s&&fn(()=>{n.value=!0},s),n}function Ot(n){const s=lh();return E(()=>(s.value,!!n()))}function Fu(n,s={}){const{window:t=Rs}=s,p=Ot(()=>t&&"matchMedia"in t&&typeof t.matchMedia=="function");let e;const o=J(!1),c=r=>{o.value=r.matches},u=()=>{e&&("removeEventListener"in e?e.removeEventListener("change",c):e.removeListener(c))},i=Cl(()=>{p.value&&(u(),e=t.matchMedia(Bn(n)),"addEventListener"in e?e.addEventListener("change",c):e.addListener(c),o.value=e.matches)});return Fa(()=>{i(),u(),e=void 0}),o}function Rc(n,s={}){const{controls:t=!1,navigator:p=Bu}=s,e=Ot(()=>p&&"permissions"in p);let o;const c=typeof n=="string"?{name:n}:n,u=J(),i=()=>{o&&(u.value=o.state)},r=nh(async()=>{if(e.value){if(!o)try{o=await p.permissions.query(c),qn(o,"change",i),i()}catch{u.value="prompt"}return o}});return r(),t?{state:u,isSupported:e,query:r}:u}function uh(n={}){const{navigator:s=Bu,read:t=!1,source:p,copiedDuring:e=1500,legacy:o=!1}=n,c=Ot(()=>s&&"clipboard"in s),u=Rc("clipboard-read"),i=Rc("clipboard-write"),r=E(()=>c.value||o),k=J(""),d=J(!1),m=ch(()=>d.value=!1,e);function g(){c.value&&_(u.value)?s.clipboard.readText().then(x=>{k.value=x}):k.value=T()}r.value&&t&&qn(["copy","cut"],g);async function y(x=Bn(p)){r.value&&x!=null&&(c.value&&_(i.value)?await s.clipboard.writeText(x):w(x),k.value=x,d.value=!0,m.start())}function w(x){const f=document.createElement("textarea");f.value=x??"",f.style.position="absolute",f.style.opacity="0",document.body.appendChild(f),f.select(),document.execCommand("copy"),f.remove()}function T(){var x,f,v;return(v=(f=(x=document==null?void 0:document.getSelection)==null?void 0:x.call(document))==null?void 0:f.toString())!=null?v:""}function _(x){return x==="granted"||x==="prompt"}return{isSupported:r,text:k,copied:d,copy:y}}const Zt=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},np="__vueuse_ssr_handlers__",ih=rh();function rh(){return np in Zt||(Zt[np]=Zt[np]||{}),Zt[np]}function kh(n,s){return ih[n]||s}function dh(n){return n==null?"any":n instanceof Set?"set":n instanceof Map?"map":n instanceof Date?"date":typeof n=="boolean"?"boolean":typeof n=="string"?"string":typeof n=="object"?"object":Number.isNaN(n)?"any":"number"}const mh={boolean:{read:n=>n==="true",write:n=>String(n)},object:{read:n=>JSON.parse(n),write:n=>JSON.stringify(n)},number:{read:n=>Number.parseFloat(n),write:n=>String(n)},any:{read:n=>n,write:n=>String(n)},string:{read:n=>n,write:n=>String(n)},map:{read:n=>new Map(JSON.parse(n)),write:n=>JSON.stringify(Array.from(n.entries()))},set:{read:n=>new Set(JSON.parse(n)),write:n=>JSON.stringify(Array.from(n))},date:{read:n=>new Date(n),write:n=>n.toISOString()}},Oc="vueuse-storage";function Ha(n,s,t,p={}){var e;const{flush:o="pre",deep:c=!0,listenToStorageChanges:u=!0,writeDefaults:i=!0,mergeDefaults:r=!1,shallow:k,window:d=Rs,eventFilter:m,onError:g=D=>{console.error(D)},initOnMounted:y}=p,w=(k?Cn:J)(typeof s=="function"?s():s);if(!t)try{t=kh("getDefaultStorage",()=>{var D;return(D=Rs)==null?void 0:D.localStorage})()}catch(D){g(D)}if(!t)return w;const T=Bn(s),_=dh(T),x=(e=p.serializer)!=null?e:mh[_],{pause:f,resume:v}=eh(w,()=>C(w.value),{flush:o,deep:c,eventFilter:m});d&&u&&Pp(()=>{qn(d,"storage",L),qn(d,Oc,K),y&&L()}),y||L();function q(D,G){d&&d.dispatchEvent(new CustomEvent(Oc,{detail:{key:n,oldValue:D,newValue:G,storageArea:t}}))}function C(D){try{const G=t.getItem(n);if(D==null)q(G,null),t.removeItem(n);else{const R=x.write(D);G!==R&&(t.setItem(n,R),q(G,R))}}catch(G){g(G)}}function N(D){const G=D?D.newValue:t.getItem(n);if(G==null)return i&&T!=null&&t.setItem(n,x.write(T)),T;if(!D&&r){const R=x.read(G);return typeof r=="function"?r(R,T):_==="object"&&!Array.isArray(R)?{...T,...R}:R}else return typeof G!="string"?G:x.read(G)}function L(D){if(!(D&&D.storageArea!==t)){if(D&&D.key==null){w.value=T;return}if(!(D&&D.key!==n)){f();try{(D==null?void 0:D.newValue)!==x.write(w.value)&&(w.value=N(D))}catch(G){g(G)}finally{D?Os(v):v()}}}}function K(D){L(D.detail)}return w}function gh(n){return Fu("(prefers-color-scheme: dark)",n)}function hh(n,s,t={}){const{window:p=Rs,...e}=t;let o;const c=Ot(()=>p&&"ResizeObserver"in p),u=()=>{o&&(o.disconnect(),o=void 0)},i=E(()=>Array.isArray(n)?n.map(d=>Cs(d)):[Cs(n)]),r=kn(i,d=>{if(u(),c.value&&p){o=new ResizeObserver(s);for(const m of d)m&&o.observe(m,e)}},{immediate:!0,flush:"post"}),k=()=>{u(),r()};return Fa(k),{isSupported:c,stop:k}}function yh(n,s={width:0,height:0},t={}){const{window:p=Rs,box:e="content-box"}=t,o=E(()=>{var d,m;return(m=(d=Cs(n))==null?void 0:d.namespaceURI)==null?void 0:m.includes("svg")}),c=J(s.width),u=J(s.height),{stop:i}=hh(n,([d])=>{const m=e==="border-box"?d.borderBoxSize:e==="content-box"?d.contentBoxSize:d.devicePixelContentBoxSize;if(p&&o.value){const g=Cs(n);if(g){const y=p.getComputedStyle(g);c.value=Number.parseFloat(y.width),u.value=Number.parseFloat(y.height)}}else if(m){const g=Array.isArray(m)?m:[m];c.value=g.reduce((y,{inlineSize:w})=>y+w,0),u.value=g.reduce((y,{blockSize:w})=>y+w,0)}else c.value=d.contentRect.width,u.value=d.contentRect.height},t);Pp(()=>{const d=Cs(n);d&&(c.value="offsetWidth"in d?d.offsetWidth:s.width,u.value="offsetHeight"in d?d.offsetHeight:s.height)});const r=kn(()=>Cs(n),d=>{c.value=d?s.width:0,u.value=d?s.height:0});function k(){i(),r()}return{width:c,height:u,stop:k}}const qc=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function lo(n,s={}){const{document:t=Mu,autoExit:p=!1}=s,e=E(()=>{var _;return(_=Cs(n))!=null?_:t==null?void 0:t.querySelector("html")}),o=J(!1),c=E(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(_=>t&&_ in t||e.value&&_ in e.value)),u=E(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(_=>t&&_ in t||e.value&&_ in e.value)),i=E(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(_=>t&&_ in t||e.value&&_ in e.value)),r=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(_=>t&&_ in t),k=Ot(()=>e.value&&t&&c.value!==void 0&&u.value!==void 0&&i.value!==void 0),d=()=>r?(t==null?void 0:t[r])===e.value:!1,m=()=>{if(i.value){if(t&&t[i.value]!=null)return t[i.value];{const _=e.value;if((_==null?void 0:_[i.value])!=null)return!!_[i.value]}}return!1};async function g(){if(!(!k.value||!o.value)){if(u.value)if((t==null?void 0:t[u.value])!=null)await t[u.value]();else{const _=e.value;(_==null?void 0:_[u.value])!=null&&await _[u.value]()}o.value=!1}}async function y(){if(!k.value||o.value)return;m()&&await g();const _=e.value;c.value&&(_==null?void 0:_[c.value])!=null&&(await _[c.value](),o.value=!0)}async function w(){await(o.value?g():y())}const T=()=>{const _=m();(!_||_&&d())&&(o.value=_)};return qn(t,qc,T,!1),qn(()=>Cs(e),qc,T,!1),p&&Fa(g),{isSupported:k,isFullscreen:o,enter:y,exit:g,toggle:w}}function Jp(n){return typeof Window<"u"&&n instanceof Window?n.document.documentElement:typeof Document<"u"&&n instanceof Document?n.documentElement:n}function Xp(n,s=ga,t={}){const{immediate:p=!0,manual:e=!1,type:o="text/javascript",async:c=!0,crossOrigin:u,referrerPolicy:i,noModule:r,defer:k,document:d=Mu,attrs:m={}}=t,g=J(null);let y=null;const w=x=>new Promise((f,v)=>{const q=L=>(g.value=L,f(L),L);if(!d){f(!1);return}let C=!1,N=d.querySelector(`script[src="${Bn(n)}"]`);N?N.hasAttribute("data-loaded")&&q(N):(N=d.createElement("script"),N.type=o,N.async=c,N.src=Bn(n),k&&(N.defer=k),u&&(N.crossOrigin=u),r&&(N.noModule=r),i&&(N.referrerPolicy=i),Object.entries(m).forEach(([L,K])=>N==null?void 0:N.setAttribute(L,K)),C=!0),N.addEventListener("error",L=>v(L)),N.addEventListener("abort",L=>v(L)),N.addEventListener("load",()=>{N.setAttribute("data-loaded","true"),s(N),q(N)}),C&&(N=d.head.appendChild(N)),x||q(N)}),T=(x=!0)=>(y||(y=w(x)),y),_=()=>{if(!d)return;y=null,g.value&&(g.value=null);const x=d.querySelector(`script[src="${Bn(n)}"]`);x&&d.head.removeChild(x)};return p&&!e&&Pp(T),e||oh(_),{scriptTag:g,load:T,unload:_}}function Hu(n){const s=window.getComputedStyle(n);if(s.overflowX==="scroll"||s.overflowY==="scroll"||s.overflowX==="auto"&&n.clientWidth<n.scrollWidth||s.overflowY==="auto"&&n.clientHeight<n.scrollHeight)return!0;{const t=n.parentNode;return!t||t.tagName==="BODY"?!1:Hu(t)}}function bh(n){const s=n||window.event,t=s.target;return Hu(t)?!1:s.touches.length>1?!0:(s.preventDefault&&s.preventDefault(),!1)}const sp=new WeakMap;function Wu(n,s=!1){const t=J(s);let p=null;kn(sh(n),c=>{const u=Jp(Bn(c));if(u){const i=u;sp.get(i)||sp.set(i,i.style.overflow),t.value&&(i.style.overflow="hidden")}},{immediate:!0});const e=()=>{const c=Jp(Bn(n));!c||t.value||(Lc&&(p=qn(c,"touchmove",u=>{bh(u)},{passive:!1})),c.style.overflow="hidden",t.value=!0)},o=()=>{var c;const u=Jp(Bn(n));!u||!t.value||(Lc&&(p==null||p()),u.style.overflow=(c=sp.get(u))!=null?c:"",sp.delete(u),t.value=!1)};return Fa(o),E({get(){return t.value},set(c){c?e():o()}})}function Gu(n,s,t={}){const{window:p=Rs}=t;return Ha(n,s,p==null?void 0:p.sessionStorage,t)}function fh(n={}){const{window:s=Rs,behavior:t="auto"}=n;if(!s)return{x:J(0),y:J(0)};const p=J(s.scrollX),e=J(s.scrollY),o=E({get(){return p.value},set(u){scrollTo({left:u,behavior:t})}}),c=E({get(){return e.value},set(u){scrollTo({top:u,behavior:t})}});return qn(s,"scroll",()=>{p.value=s.scrollX,e.value=s.scrollY},{capture:!1,passive:!0}),{x:o,y:c}}function wh(n={}){const{window:s=Rs,initialWidth:t=Number.POSITIVE_INFINITY,initialHeight:p=Number.POSITIVE_INFINITY,listenOrientation:e=!0,includeScrollbar:o=!0}=n,c=J(t),u=J(p),i=()=>{s&&(o?(c.value=s.innerWidth,u.value=s.innerHeight):(c.value=s.document.documentElement.clientWidth,u.value=s.document.documentElement.clientHeight))};if(i(),Pp(i),qn("resize",i,{passive:!0}),e){const r=Fu("(orientation: portrait)");kn(r,()=>i())}return{width:c,height:u}}var _h=M({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(n){const s=E(()=>{const p=["font-icon icon"],e=`fas fa-${n.icon}`;return p.push("fa-fw fa-sm"),p.push(n.icon.includes(" ")?n.icon:e),p}),t=E(()=>{const p={};return n.color&&(p.color=n.color),n.size&&(p["font-size"]=Number.isNaN(Number(n.size))?n.size:`${n.size}px`),ks(p).length?p:null});return()=>n.icon?l("span",{key:n.icon,class:s.value,style:t.value}):null}});const Uu=({type:n="info",text:s="",vertical:t,color:p},{slots:e})=>{var o;return l("span",{class:["vp-badge",n,{diy:p}],style:{verticalAlign:t??!1,backgroundColor:p??!1}},((o=e.default)==null?void 0:o.call(e))??s)};Uu.displayName="Badge";const Qu=({title:n,desc:s="",logo:t,background:p,color:e,link:o})=>{const c=[t?l("img",{class:"vp-card-logo",src:yn(t),loading:"lazy","no-view":""}):null,l("div",{class:"vp-card-content"},[l("div",{class:"vp-card-title",innerHTML:n}),l("hr"),l("div",{class:"vp-card-desc",innerHTML:s})])],u={};return p&&(u.background=p),e&&(u.color=e),o?Ep(o)?l("a",{class:"vp-card",href:o,target:"_blank",style:u},c):l(In,{to:o,class:"vp-card",style:u},()=>c):l("div",{class:"vp-card",style:u},c)};Qu.displayName="VPCard";const vh=ws({enhance:({app:n})=>{is("FontIcon")||n.component("FontIcon",_h),is("Badge")||n.component("Badge",Uu),is("VPCard")||n.component("VPCard",Qu)},setup:()=>{Xp("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}}),Xp("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}}),Xp("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]}),jc=async(n,s)=>{const{path:t,query:p}=n.currentRoute.value,{scrollBehavior:e}=n.options;n.options.scrollBehavior=void 0,await n.replace({path:t,query:p,hash:s}),n.options.scrollBehavior=e},Eh=({headerLinkSelector:n,headerAnchorSelector:s,delay:t,offset:p=5})=>{const e=ba();qn("scroll",ah(()=>{var y,w;const c=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(c-0)<p){jc(e,"");return}const i=window.innerHeight+c,r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),k=Math.abs(r-i)<p,d=Array.from(document.querySelectorAll(n)),g=Array.from(document.querySelectorAll(s)).filter(T=>d.some(_=>_.hash===T.hash));for(let T=0;T<g.length;T++){const _=g[T],x=g[T+1],f=c>=(((y=_.parentElement)==null?void 0:y.offsetTop)??0)-p,v=!x||c<(((w=x.parentElement)==null?void 0:w.offsetTop)??0)-p;if(!(f&&v))continue;const C=decodeURIComponent(e.currentRoute.value.hash),N=decodeURIComponent(_.hash);if(C===N)return;if(k){for(let L=T+1;L<g.length;L++)if(C===decodeURIComponent(g[L].hash))return}jc(e,N);return}},t))},Th=".vp-sidebar-link, .vp-toc-link",xh=".header-anchor",Ah=200,Sh=5,Ph=ws({setup(){Eh({headerLinkSelector:Th,headerAnchorSelector:xh,delay:Ah,offset:Sh})}});let $u=n=>Pn(n.title)?{title:n.title}:null;const Ku=Symbol(""),Ih=n=>{$u=n},zh=()=>An(Ku),Dh=n=>{n.provide(Ku,$u)};var Ch={"/":{title:"目录",empty:"暂无目录"}};const Lh=M({name:"Catalog",props:{base:{type:String,default:""},level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(n){const s=zh(),t=zt(Ch),p=wn(),e=vg(),o=xu(),u=Cn(Ct(e.value).map(([r,{meta:k}])=>{const d=s(k);if(!d)return null;const m=r.split("/").length;return{level:Gg(r,"/")?m-2:m-1,base:r.replace(/\/[^/]+\/?$/,"/"),path:r,...d}}).filter(r=>Ba(r)&&Pn(r.title))),i=E(()=>{const r=n.base?lm(ku(n.base)):p.value.path.replace(/\/[^/]+$/,"/"),k=r.split("/").length-2,d=[];return u.value.filter(({level:m,path:g})=>{if(!qa(g,r)||g===r)return!1;if(r==="/"){const y=ks(o.value.locales).filter(w=>w!=="/");if(g==="/404.html"||y.some(w=>qa(g,w)))return!1}return m-k<=n.level}).sort(({title:m,level:g,order:y},{title:w,level:T,order:_})=>{const x=g-T;return x||(Kp(y)?Kp(_)?y>0?_>0?y-_:-1:_<0?y-_:1:y:Kp(_)?_:m.localeCompare(w))}).forEach(m=>{var w;const{base:g,level:y}=m;switch(y-k){case 1:{d.push(m);break}case 2:{const T=d.find(_=>_.path===g);T&&(T.children??(T.children=[])).push(m);break}default:{const T=d.find(_=>_.path===g.replace(/\/[^/]+\/$/,"/"));if(T){const _=(w=T.children)==null?void 0:w.find(x=>x.path===g);_&&(_.children??(_.children=[])).push(m)}}}}),d});return()=>{const r=i.value.some(k=>k.children);return l("div",{class:["vp-catalog-wrapper",{index:n.index}]},[n.hideHeading?null:l("h2",{class:"vp-catalog-main-title"},t.value.title),i.value.length?l(n.index?"ol":"ul",{class:["vp-catalogs",{deep:r}]},i.value.map(({children:k=[],title:d,path:m,content:g})=>{const y=l(In,{class:"vp-catalog-title",to:m},()=>g?l(g):d);return l("li",{class:"vp-catalog"},r?[l("h3",{id:d,class:["vp-catalog-child-title",{"has-children":k.length}]},[l("a",{href:`#${d}`,class:"vp-catalog-header-anchor","aria-hidden":!0},"#"),y]),k.length?l(n.index?"ol":"ul",{class:"vp-child-catalogs"},k.map(({children:w=[],content:T,path:_,title:x})=>l("li",{class:"vp-child-catalog"},[l("div",{class:["vp-catalog-sub-title",{"has-children":w.length}]},[l("a",{href:`#${x}`,class:"vp-catalog-header-anchor"},"#"),l(In,{class:"vp-catalog-title",to:_},()=>T?l(T):x)]),w.length?l(n.index?"ol":"div",{class:n.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},w.map(({content:f,path:v,title:q})=>n.index?l("li",{class:"vp-sub-catalog"},l(In,{to:v},()=>f?l(f):q)):l(In,{class:"vp-sub-catalog-link",to:v},()=>f?l(f):q))):null]))):null]:l("div",{class:"vp-catalog-child-title"},y))})):l("p",{class:"vp-empty-catalog"},t.value.empty)])}}}),Rh=ws({enhance:({app:n})=>{Dh(n),is("Catalog",n)||n.component("Catalog",Lh)}});var Oh={"/":{backToTop:"返回顶部"}};const qh=M({name:"BackToTop",setup(){const n=gn(),s=zt(Oh),t=Cn(),{height:p}=yh(t),{height:e}=wh(),{y:o}=fh(),c=E(()=>n.value.backToTop!==!1&&o.value>100),u=E(()=>o.value/(p.value-e.value)*100);return fn(()=>{t.value=document.body}),()=>l(sa,{name:"back-to-top"},()=>c.value?l("button",{type:"button",class:"vp-back-to-top-button","aria-label":s.value.backToTop,onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[l("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":u.value},l("svg",l("circle",{cx:"26",cy:"26",r:"24",fill:"none",stroke:"currentColor","stroke-width":"4","stroke-dasharray":`${Math.PI*u.value*.48} ${Math.PI*(100-u.value)*.48}`}))),l("div",{class:"back-to-top-icon"})]):null)}}),jh=ws({rootComponents:[qh]}),Nh=l("svg",{class:"external-link-icon",xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"},[l("path",{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}),l("polygon",{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"})]),Ju=M({name:"ExternalLinkIcon",props:{locales:{type:Object,default:()=>({})}},setup(n){const s=Ns(),t=E(()=>n.locales[s.value]??{openInNewWindow:"open in new window"});return()=>l("span",[Nh,l("span",{class:"external-link-icon-sr-only"},t.value.openInNewWindow)])}});var Vh={};const Mh=Vh,Bh=ws({enhance({app:n}){n.component("ExternalLinkIcon",l(Ju,{locales:Mh}))}});/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const ln={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:n=>{const s=ln.isStarted();n=Yp(n,ln.settings.minimum,1),ln.status=n===1?null:n;const t=ln.render(!s),p=t.querySelector(ln.settings.barSelector),e=ln.settings.speed,o=ln.settings.easing;return t.offsetWidth,Fh(c=>{ap(p,{transform:"translate3d("+Nc(n)+"%,0,0)",transition:"all "+e+"ms "+o}),n===1?(ap(t,{transition:"none",opacity:"1"}),t.offsetWidth,setTimeout(function(){ap(t,{transition:"all "+e+"ms linear",opacity:"0"}),setTimeout(function(){ln.remove(),c()},e)},e)):setTimeout(()=>c(),e)}),ln},isStarted:()=>typeof ln.status=="number",start:()=>{ln.status||ln.set(0);const n=()=>{setTimeout(()=>{ln.status&&(ln.trickle(),n())},ln.settings.trickleSpeed)};return ln.settings.trickle&&n(),ln},done:n=>!n&&!ln.status?ln:ln.inc(.3+.5*Math.random()).set(1),inc:n=>{let s=ln.status;return s?(typeof n!="number"&&(n=(1-s)*Yp(Math.random()*s,.1,.95)),s=Yp(s+n,0,.994),ln.set(s)):ln.start()},trickle:()=>ln.inc(Math.random()*ln.settings.trickleRate),render:n=>{if(ln.isRendered())return document.getElementById("nprogress");Vc(document.documentElement,"nprogress-busy");const s=document.createElement("div");s.id="nprogress",s.innerHTML=ln.settings.template;const t=s.querySelector(ln.settings.barSelector),p=n?"-100":Nc(ln.status||0),e=document.querySelector(ln.settings.parent);return ap(t,{transition:"all 0 linear",transform:"translate3d("+p+"%,0,0)"}),e!==document.body&&Vc(e,"nprogress-custom-parent"),e==null||e.appendChild(s),s},remove:()=>{Mc(document.documentElement,"nprogress-busy"),Mc(document.querySelector(ln.settings.parent),"nprogress-custom-parent");const n=document.getElementById("nprogress");n&&Hh(n)},isRendered:()=>!!document.getElementById("nprogress")},Yp=(n,s,t)=>n<s?s:n>t?t:n,Nc=n=>(-1+n)*100,Fh=function(){const n=[];function s(){const t=n.shift();t&&t(s)}return function(t){n.push(t),n.length===1&&s()}}(),ap=function(){const n=["Webkit","O","Moz","ms"],s={};function t(c){return c.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(u,i){return i.toUpperCase()})}function p(c){const u=document.body.style;if(c in u)return c;let i=n.length;const r=c.charAt(0).toUpperCase()+c.slice(1);let k;for(;i--;)if(k=n[i]+r,k in u)return k;return c}function e(c){return c=t(c),s[c]??(s[c]=p(c))}function o(c,u,i){u=e(u),c.style[u]=i}return function(c,u){for(const i in u){const r=u[i];r!==void 0&&Object.prototype.hasOwnProperty.call(u,i)&&o(c,i,r)}}}(),Xu=(n,s)=>(typeof n=="string"?n:uo(n)).indexOf(" "+s+" ")>=0,Vc=(n,s)=>{const t=uo(n),p=t+s;Xu(t,s)||(n.className=p.substring(1))},Mc=(n,s)=>{const t=uo(n);if(!Xu(n,s))return;const p=t.replace(" "+s+" "," ");n.className=p.substring(1,p.length-1)},uo=n=>(" "+(n.className||"")+" ").replace(/\s+/gi," "),Hh=n=>{n&&n.parentNode&&n.parentNode.removeChild(n)},Wh=()=>{fn(()=>{const n=ba(),s=new Set;s.add(n.currentRoute.value.path),n.beforeEach(t=>{s.has(t.path)||ln.start()}),n.afterEach(t=>{s.add(t.path),ln.done()})})},Gh=ws({setup(){Wh()}}),Uh=JSON.parse('{"encrypt":{"global":true,"admin":["$2a$10$aV5gd1Pe4SpWHSdjO0qM2eR/6wCxgLKMgbeqdJyKIFFYEgRpxz8ly"]},"author":{"name":"AZRNG","url":"https://azrng.gitee.io"},"logo":"/logo.svg","displayFooter":true,"blog":{"name":"Azrng","timeline":"知识库","description":"一个.NET开发者","roundAvatar":true,"intro":"/intro.html","medias":{"Gitee":"https://gitee.com/AZRNG","GitHub":"https://github.com/AZRNG"}},"headerDepth":4,"contributors":false,"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/",{"text":"计算机基础","link":"/computerBasics/"},{"text":"Web","link":"/web/"},{"text":"dotNet","link":"/dotnet/"},{"text":"中间件","link":"/middleware/"},{"text":"数据库","link":"/dataBase/"},{"text":"ORM","link":"/orm/"},{"text":"软件设计","link":"/softwareDesign/"},{"text":"云原生","link":"/cloud/"},{"text":"其他语言","link":"/otherLanguage/"},{"text":"软件","link":"/soft/"},{"text":"组件文档","link":"https://azrng.github.io/nuget-docs/"},{"text":"文章","link":"/classicArticle/"},{"text":"生活","link":"/live/"},{"text":"关于","link":"/aboutme/readme.md"}],"sidebar":{"/":["","intro"],"/computerBasics/":[{"text":"计算机网络","prefix":"/computerBasics/network/","collapsible":true,"children":["readme.md","tcp.md"]},{"text":"操作系统","prefix":"/computerBasics/os/","collapsible":true,"children":["cpu.md","memory.md","taskRunStatus.md"]},{"text":"数据结构","prefix":"/computerBasics/dataStructure/","collapsible":true,"children":["readme.md","singleLinkedList.md"]},{"text":"算法","prefix":"/computerBasics/arithmetic/","collapsible":true,"children":["readme.md","common.md","taskOperator.md","fuzadu.md","sortAlgorithm.md","weiyuyunsuan.md","diguiyouhua.md","youxiangmohuantutu.md"]}],"/web/":[{"text":"web开发","prefix":"/web/webkaifa/","collapsible":true,"children":["http.md","htmlgeshi.md",{"text":"单个代码解析","prefix":"/web/webkaifa/changedaimajiexi/","collapsible":true,"children":["url.md","liulanqiqingqiutou.md","sousuoyinqingjiqiao.md"]},"webscoket.md","borwserduixiang.md","freeApi.md","spa.md","sucaishouji.md"]},"javascript.md",{"text":"JQ","prefix":"/web/jq/","collapsible":true,"children":["ajaxyibutongbu.md"]},{"text":"Layui","prefix":"/web/layui/","collapsible":true,"children":["shuiming.md"]},{"text":"Vue","prefix":"/web/vue/","collapsible":true,"children":["shuiming.md","changyongcaozuo.md"]},{"text":"Blazor","prefix":"/web/blazor/","collapsible":true,"children":["readme.md",{"text":"基础操作","prefix":"/web/blazor/baseOperator/","collapsible":true,"children":["getStarted.md","dataBind.md","navigaton.md","layout.md","form.md","chuancan.md","event.md","yuchengxian.md","configuration.md","jsOperator.md","lifeCycle.md","component.md","loginSample.md"]},{"text":"Nuget包","prefix":"/web/blazor/nugets/","collapsible":true,"children":["openSourceComponent.md","markdig.md","blazormarkdown.md"]},{"text":"MASABlazor","prefix":"/web/blazor/masablazor/","collapsible":true,"children":["readme.md","commonOperator.md",{"text":"示例","prefix":"/web/blazor/masablazor/sample/","collapsible":true,"children":["layout.md"]}]},{"text":"Ant Design Blazor","prefix":"/web/blazor/antDesignBlazor/","collapsible":true,"children":["readme.md"]},"blazorise.md","blazorspark.md","openSourceSample.md",{"text":"部署","prefix":"/web/blazor/deploy/","collapsible":true,"children":["readme.md","issue.md"]}]},{"text":"Npm","prefix":"/web/npm/","collapsible":true,"children":["shuiming.md","pnpm.md",{"text":"部署","prefix":"/web/npm/bushu/","collapsible":true,"children":["jiaobenwenjian.md"]}]}],"/dotnet/":["readme.md","cli.md",{"text":"教程","prefix":"/dotnet/jiaocheng/","collapsible":true,"children":["jiaocheng.md","ziliaojingshuarumenpian.md","ziliaojingshuajinjiepian.md","ziliaojingshuajiagoupian.md","books.md","optimize.md"]},{"text":"新增功能","prefix":"/dotnet/newFunction/","collapsible":true,"children":["readme.md","dotNet6.md","dotNet8.md"]},"/dotnet/solutionItems.md",{"text":"C#","prefix":"/dotnet/csharp/","collapsible":true,"children":["readme.md","yuyanbanbenjilu.md","cSharpStandard.md",{"text":"核心Csharp","prefix":"/dotnet/csharp/hexincsharp/","collapsible":true,"children":["yudingyileixing.md","string.md","shuzhi.md","byte.md","rijiheshijian.md","yuchulizhiling.md","dynamic.md","shuzu.md","paixu.md","qiyuan.md","yuanzu.md"]},"changedaimajiexi.md",{"text":"对象和类型","prefix":"/dotnet/csharp/duixiangheleixing/","collapsible":true,"children":["fangwenxiushifu.md","lei.md","chouxianglei.md","nimingleixing.md","jiegouti.md","jiekou.md","meiju.md","haxi.md","kuozhanfangfa.md","nibianxiebian.md","shujuleixing.md","fanxing.md","attribute.md","closure","changyongdeshujujiegou.md"]},"cunchujiegou.md","pooling.md",{"text":"集合操作","prefix":"/dotnet/csharp/jigecaozuo/","collapsible":true,"children":["jigecaozuo.md","readme.md","shuzu.md","ienumerable.md","stack.md","diedaiqi.md","suoyinqi.md",{"text":"扩展","prefix":"/dotnet/csharp/jigecaozuo/kuozhan/","collapsible":true,"children":["dictionaryshixianyuanli.md","zhibiangengtongzhidictionary.md","zidingyipaixu.md","arraypoolMemorypool.md","shuazepaixusuanfa.md"]},{"text":"公共类","prefix":"/dotnet/csharp/jigecaozuo/gonggonglei/","collapsible":true,"children":["fenxiechuli.md","piliangchulijige.md"]}]},"leixingzhuaihuan.md","kaobeifangfa.md",{"text":"定制数据结构","prefix":"/dotnet/csharp/dingzhishujujiegou/","collapsible":true,"children":["xingnengheshishixingchuli.md"]},"dtohepoco.md","mingmingmoshi.md","yasuhejieyasu.md",{"text":"高级主题","prefix":"/dotnet/csharp/gaojizhuti/","collapsible":true,"children":["weituo.md","shijian.md","biaodashishu.md"]},"clr.md",{"text":"运算符和表达式","prefix":"/dotnet/csharp/yunsuanfuhebiaodashi/","collapsible":true,"children":["diedaiyugou.md","switch.md"]},"jiaoyanfangfa.md","zhengzebiaodashijiaoyan.md","dingshiqi.md",{"text":"队列","prefix":"/dotnet/csharp/queue/","collapsible":true,"children":["queue.md","priorityqueue.md","channel.md"]},{"text":"Linq","prefix":"/dotnet/csharp/linq/","collapsible":true,"children":["yunsuanfu.md","linqhelambdaduibi.md","jiaojiebingji.md","lambda.md","selectmany.md","linqExtension.md"]},"yichang.md",{"text":"反射","prefix":"/dotnet/csharp/fanshe/","collapsible":true,"children":["fanshe.md","fanshexiangjie.md","fangfa.md","fanshejiazaidll.md","dynamic.md","newbe_objectvisitor.md"]},{"text":"Window服务","prefix":"/dotnet/csharp/windowfuwu/","collapsible":true,"children":["windowfuwu.md","netchuangjianwindowsfuwu.md","netcorechuangjianwindowsfuwu.md"]},{"text":"资源管理","prefix":"/dotnet/csharp/objectDestruction/","collapsible":true,"children":["readme.md"]},{"text":"垃圾回收","prefix":"/dotnet/csharp/garbageCollection/","collapsible":true,"children":["readme.md","workingMethod.md"]},{"text":"诊断","prefix":"/dotnet/csharp/zhenduan/","collapsible":true,"children":["tiaojianbianyi.md","stopwatchlei.md"]},{"text":"线程与并发与异步","prefix":"/dotnet/csharp/threadConcurrencyAndAsync/","collapsible":true,"children":["readme.md","threadPool.md","threadSync.md","parallel.md","concurrency.md","sharedMemory.md","limitingConcurrency.md","sisuo.md",{"text":"异步编程","prefix":"/dotnet/csharp/threadConcurrencyAndAsync/async/","collapsible":true,"children":["readme.md","tapmoshi.md","tapmoshiyanhua.md","changetoken.md","yibushili1.md","yibushili2.md"]},"bendecunchu.md"]},{"text":"文件和流","prefix":"/dotnet/csharp/wenjianheliu/","collapsible":true,"children":["dotnetliu.md","wenjianyumulucaozuo.md","iomoxing.md","lujingwenti.md","streamkuozhanlei.md"]},"dongtaishengchengdaima.md","emit.md",{"text":"Roslyn","prefix":"/dotnet/csharp/roslyn/","collapsible":true,"children":["readme.md","codeanalysis.md","scripting.md","natasha.md"]},"wanglao.md","digui.md","bulongguolvqi.md"]},{"text":"基础","prefix":"/dotnet/base/","collapsible":true,"children":[{"text":"日志框架","prefix":"/dotnet/base/logOperator/","collapsible":true,"children":["readme.md","ilogger.md","serilog.md","nlog.md",{"text":"Log4net","prefix":"/dotnet/base/logOperator/log4net/","collapsible":true,"children":["readme.md","netFrameworkUse.md"]},"structLog.md",{"text":"日志监控","prefix":"/dotnet/base/logOperator/compomemt/","collapsible":true,"children":["loki.md","keshihualogdashboard.md","watchdog.md","jackremotelog.md","sejil.md"]}]},{"text":"配置框架","prefix":"/dotnet/base/peizhikuangjia/","collapsible":true,"children":["gaishu.md","peizhidouqu.md","wenjianpeizhi.md","minglinghangpeizhi.md","huanjingbianliangpeizhi.md",{"text":"自定义配置源","prefix":"/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/","collapsible":true,"children":["readme.md","neicunshujuyuanpeizhi.md","zidingyishujukupeizhiyuan.md","zidingyipeizhishujuyuan.md","jsonwenjianpeizhiyuan.md"]},"shuaxiangoption.md","peizhijianchanjiami.md","jimiguanliqi.md",{"text":"配置开关","prefix":"/dotnet/base/peizhikuangjia/peizhikaiguan/","collapsible":true,"children":["featuremanagement.md","dipeibanfeatureflag.md","ifeaturefilter.md"]}]},{"text":"依赖注入","prefix":"/dotnet/base/yilaizhuru/","collapsible":true,"children":["gaishu.md",{"text":"默认依赖注入","prefix":"/dotnet/base/yilaizhuru/morenyilaizhuru/","collapsible":true,"children":["morenyilaizhuru.md","zhuceduogeshixian.md",{"text":"批量注册","prefix":"/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/","collapsible":true,"children":["tongguotexingshixianpiliangzhuce.md","scrutorpiliangzhuce.md","guanfangpiliangzhuru.md"]},"shengmingzhoujiceshi.md"]},{"text":"Autofac","prefix":"/dotnet/base/yilaizhuru/autofac/","collapsible":true,"children":["autofac.md","shengmingzhouji.md","zhichiaop.md"]},"huoqusuoyouzhurudefuwu.md","xunhuanyilai.md",{"text":"IOC控制反转","prefix":"/dotnet/base/yilaizhuru/iockongzhifanzhuai/","collapsible":true,"children":["iockongzhifanzhuai.md","iocrongqiyuanma.md"]}]},{"text":"序列化","prefix":"/dotnet/base/serialize/","collapsible":true,"children":["readme.md",{"text":"二进制","prefix":"/dotnet/base/serialize/erjinzhi/","collapsible":true,"children":["binaryformatter.md","messagepack.md","memorypack.md","binarywriter.md"]},"xmlxuliehua.md",{"text":"JSON","prefix":"/dotnet/base/serialize/json/","collapsible":true,"children":["json.md","system_text_json.md","newtonsoft_json.md","dynamic_json.md","jsoncons_jsonpath.md","javascriptserializer.md","datacontractjsonserializer.md"]}]},{"text":"管道模式","prefix":"/dotnet/base/pipeline/","collapsible":true,"children":["readme.md",{"text":"中间件","prefix":"/dotnet/base/pipeline/middleware/","collapsible":true,"children":["readme.md","zhongjianjiandiaoyongshunxuhepiliangzhuce.md","shuchuzhihangzhongjianjian.md",{"text":"静态资源中间件","prefix":"/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/","collapsible":true,"children":["jingtaiziyuanzhongjianjian.md","morentupianzhongjianjian.md","qishixie.md"]},{"text":"拓展","prefix":"/dotnet/base/pipeline/middleware/tazhan/","collapsible":true,"children":["httprizhizhongjianjian.md","rizhizhongjianjian.md","jiluqingqiushuju.md","fangdaolianzhongjianjian.md","yichangzhongjianjian.md","lanjieqingqiuhefanhuishujubingjiami.md","jingtaimdwenjianzhuaihuanshuchu.md","qingqiuchaoshizhongjianjian.md","qingqiutouyuanyangfanhui.md"]}]},{"text":"过滤器","prefix":"/dotnet/base/pipeline/filter/","collapsible":true,"children":["readme.md","netfguolvqishili.md","filterzhucefangshi.md","guolvqishixian-yichangchuli.md","filterfanhuileichuli.md","guolvqishixian-niminghuachuli.md","guolvqishixian-rucanjiaoyan.md","guolvqishixian-rizhijilu.md","filterfangchong.md","guolvqishixian-zidongshiwuchuli.md","guolvqishixian-jiyuipqingqiuxianzhi.md"]}]},{"text":"静态文件","prefix":"/dotnet/base/jingtaiwenjian/","collapsible":true,"children":["readme.md","jiangjingtaiwenjiandabao.md","jingtaiwangzhanneironggengxin.md"]},{"text":"路由","prefix":"/dotnet/base/luyou/","collapsible":true,"children":["luyou.md","duandianluyou.md"]},{"text":"健康检查","prefix":"/dotnet/base/jiankangjiancha/","collapsible":true,"children":["jiankangjiancha.md","yingyongzhuangtai.md"]},{"text":"缓存","prefix":"/dotnet/base/huancun/","collapsible":true,"children":["readme.md","changjiangainian.md","kehuduanhuancun.md","fuwuqihuancunresponsecaching.md","fuwuqihuancunoutputcache.md","neicunhuancunmemorycahe.md","fenbushihuancun.md","statichuancun.md","cache.md","commonNuget.md"]},"chengxuji.md","diaoyongzhexinxi.md","ihostedservicerenwu.md"]},{"text":"框架解析","prefix":"/dotnet/kuangjiajiexi/","collapsible":true,"children":["yuanmaxuexi.md","launchsettings_json.md","shengmingzhoujicaozuo.md","startup.md","changyongprogrampeizhi.md","sdkgongzuofuzai.md","mono.md"]},{"text":"项目模板","prefix":"/dotnet/xiangmumoban/","collapsible":true,"children":["gaishu.md","xiangmumobansheji.md","vue_jsdapeiwebapimoban.md"]},{"text":"常用组件","prefix":"/dotnet/commonNuget/","collapsible":true,"children":["tongyong.md","textOperation.md",{"text":"对象映射","prefix":"/dotnet/commonNuget/duixiangyingshe/","collapsible":true,"children":["automapper.md","automapperdotnetf.md","mapster.md","emitmapper.md","tinymapper.md"]},"file.md","shijianchuli.md","jiaobenjieshiqi.md","hanshushibiancheng.md","minglinghang.md","diaoduqi.md",{"text":"限流","prefix":"/dotnet/commonNuget/xianliu/","collapsible":true,"children":["dotnetratelimiter.md",{"text":"请求限制","prefix":"/dotnet/commonNuget/xianliu/qingqiuxianzhi/","collapsible":true,"children":["qingqiuxianzhichuangkousuanfa.md","guanfangqingqiuxianzhizhongjianjian.md"]}]},{"text":"Yarp","prefix":"/dotnet/commonNuget/yarp/","collapsible":true,"children":["readme.md"]},"kongzhitaishuchu.md","fluentftp.md","ikvmOperation.md","communitytoolkit.md"]},"duoyuyanpeizhi.md",{"text":"程序集操作","prefix":"/dotnet/chengxujicaozuo/","collapsible":true,"children":["caozuo.md",{"text":"动态加载程序集","prefix":"/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/","collapsible":true,"children":["readme.md","jianchandedongtaijiazaishili.md","rebachadll.md","dotnetcoreplugins.md","plugincore.md"]},{"text":"SourceGenerator","prefix":"/dotnet/chengxujicaozuo/sourcegenerator/","collapsible":true,"children":["sourcegenerator.md","zidongshengchengjiekoushixianlei.md"]},"jiangdllneiqiandll.md","huoqukuangjiadebanbenhao.md","nixiangfanbianyigongju.md","interceptDLL.md","pInvokeDLL.md"]},{"text":"Nuget","prefix":"/dotnet/nuget/","collapsible":true,"children":["readme.md","baobanbenzidongshengji.md","jiaobenfabubao.md",{"text":"私有部署","prefix":"/dotnet/nuget/siyoubushu/","collapsible":true,"children":["readme.md","baoguanlifuwubaget.md"]}]},{"text":"系统操作","prefix":"/dotnet/jitongcaozuo/","collapsible":true,"children":["changyonggongneng.md","yingjianxinxihuoqu.md"]},{"text":"Web应用","prefix":"/dotnet/webyingyong/","collapsible":true,"children":[{"text":"MVC","prefix":"/dotnet/webyingyong/mvc/","collapsible":true,"children":["jichuzhishi.md","changyongpeizhi.md","shitubianyi.md","razorshitu.md","taghelpers.md"]},{"text":"WebForm","prefix":"/dotnet/webyingyong/webform/","collapsible":true,"children":[{"text":"单个代码解析","prefix":"/dotnet/webyingyong/webform/changedaimajiexi/","collapsible":true,"children":["changedaimajiexi.md","webconfig.md","jubushuaxin.md","tiaozhuaixiemian.md","shangchuanxianzhi.md","guanyulanya.md","checkboxlist.md","suijiyanzhengma.md","huoqufuwuqixinxifangfa.md","huoqujitongxinxi.md"]},{"text":"数据表","prefix":"/dotnet/webyingyong/webform/shujubiao/","collapsible":true,"children":["shujubiao.md","table.md","repeater.md","bianligeleishujujige.md","xiugaishujudeupdatefangfa.md","qiantaibangdinghoutaipinjiedehtml.md"]},{"text":"文件上传","prefix":"/dotnet/webyingyong/webform/wenjianshangchuan/","collapsible":true,"children":["wenjianshangchuan.md","tupianshangchuan.md","tupiangeshizhuaihuan.md","excel.md","tupianzhuaibase64.md"]},{"text":"存储数据","prefix":"/dotnet/webyingyong/webform/cunchushuju/","collapsible":true,"children":["cunchushuju.md","cookie.md","session.md"]},{"text":"线程","prefix":"/dotnet/webyingyong/webform/xiancheng/","collapsible":true,"children":["xiancheng.md","xianchengthreadhetask.md","jianchandexiancheng.md","dingshiqi.md"]},"websocketyuxiaoxituisong.md","aspxjieshoupostmanchuandejsonduixiang.md","webformhuancunchuli.md"]}]},{"text":"API","prefix":"/dotnet/api/","collapsible":true,"children":[{"text":"基于控制器的API","prefix":"/dotnet/api/controllerApi/","collapsible":true,"children":["readme.md","xiangyingyasu.md","moxingbangdingheyanzheng.md","moxingyanzhengfluentvalidation.md","douquqingqiuti.md","httpcontext.md","webapijiekouqingqiuwanshan.md","gechongbutongjieshougeshi.md","qingqiuwenjianchuli.md","action.md","kuayuqingqiu.md","banbenkongzhi.md","geshihuaxiangyingshuju.md","qingqiucanshubangding.md",{"text":"拓展","prefix":"/dotnet/api/controllerApi/extensions/","collapsible":true,"children":["leikuyunhangwebapi.md","dongtaiapizhipanda_dynamicwebapi.md","dongtaiapizhiplus_autoapi.md","gaojichaxun.md","poolAPI.md"]},{"text":"幂等性","prefix":"/dotnet/api/controllerApi/idempotent/","collapsible":true,"children":["midengxing.md","fangzhichongfudijiao.md","monitorTryEnter.md"]},{"text":"安全","prefix":"/dotnet/api/controllerApi/safe/","collapsible":true,"children":["tokenSecret.md","aspNetCoreRateLimit.md","refenceCheck.md","ddosAttack.md"]},"jiekoufanhuilei.md"]},"miniapi.md",{"text":"Swagger","prefix":"/dotnet/api/swagger/","collapsible":true,"children":["jibenshiyong.md","renzhengfanganbiaoshi.md","banbenkongzhi.md","zhushishuiming.md","chuli.md",{"text":"拓展","prefix":"/dotnet/api/swagger/tazhan/","collapsible":true,"children":["zhuti.md","fanhuileimingchenyingshe.md","jingtaiswagger_jsonwenjian.md","miniapishangchuanwenjianxianshiyichang.md","dajianswaggerhub.md","daochuwenjian.md"]},"nswag.md","wentichuli.md"]},{"text":"WebService","prefix":"/dotnet/api/webservice/","collapsible":true,"children":["readme.md","qingqiushili.md","dotnetzhisoapcorejianchanshiyong.md"]},{"text":"远程调用","prefix":"/dotnet/api/remoteProcedureCall/","collapsible":true,"children":["httpRequest.md","httpclient.md","httpclientchulixiangyingyasu.md","kestrel.md","restfulfengge.md","restkaiyuanku.md","flurl_httpgonggonglei.md"]},{"text":"Socket","prefix":"/dotnet/api/socket/","collapsible":true,"children":["readme.md","touchsocket.md","supersocket.md"]},"sse.md","webTransport.md","curldehttpqingqiu.md","shiyonghttprepljinhangceshi.md","qingqiubiaoshichuandi.md","shujuchuanshujiami.md","connectedservices.md","apilanjie.md"]},{"text":"Console","prefix":"/dotnet/console/","collapsible":true,"children":["changyongcaozuo.md",{"text":"界面","prefix":"/dotnet/console/jiemian/","collapsible":true,"children":["terminal_gui.md","jiemiangui_cs.md"]},{"text":"样式Nuget包","prefix":"/dotnet/console/yangshinugetbao/","collapsible":true,"children":["spectreconsole.md","zhizuojiaohuchengxusharprompt.md","biaogeconsoletables.md","yansecolorful_console.md","jindutiaoshellprogressbar.md","xiazaiqi.md"]},{"text":"小示例","prefix":"/dotnet/console/xiaoshili/","collapsible":true,"children":["xiazaituchuangtupian.md"]}]},{"text":"WindowsService","prefix":"/dotnet/windowsservice/","collapsible":true,"children":["readme.md"]},{"text":"WorkService","prefix":"/dotnet/workservice/","collapsible":true,"children":["readme.md","serviceself.md"]},{"text":"桌面程序","prefix":"/dotnet/zhuomianchengxu/","collapsible":true,"children":[{"text":"系统操作","prefix":"/dotnet/zhuomianchengxu/jitongcaozuo/","collapsible":true,"children":["jitongcaozuo.md","windowsapi.md","rejian.md","qidongcaozuo.md","fangzhichongfuqidong.md",{"text":"示例","prefix":"/dotnet/zhuomianchengxu/jitongcaozuo/shili/","collapsible":true,"children":["winformzhucerejianshixianjietuxiaoguo.md","wpfzhucerejianshixianjietuxiaoguo.md"]}]},"shangweijikaifa.md","peizhicunchu.md",{"text":"Winform","prefix":"/dotnet/zhuomianchengxu/winform/","collapsible":true,"children":["readme.md",{"text":"基础知识","prefix":"/dotnet/zhuomianchengxu/winform/jichuzhishi/","collapsible":true,"children":["programwenjian.md","jichucaozuo.md","dengluxiaoguo.md","guanliyuanfangshiqidongbingjudaiquanjulanjie.md","shiyongyilaizhuru.md"]},{"text":"Blazor Hybrid","prefix":"/dotnet/zhuomianchengxu/winform/blazorhybrid/","collapsible":true,"children":["readme.md"]},"winformscominterop.md","scoket.md","changyongkongjian.md","changyongzujian.md","tupiangeshizhuaihuan.md"]},{"text":"WPF","prefix":"/dotnet/zhuomianchengxu/wpf/","collapsible":true,"children":["readme.md",{"text":"基础知识","prefix":"/dotnet/zhuomianchengxu/wpf/jichuzhishi/","collapsible":true,"children":["jichucaozuo.md","jichukongjian.md","jichubujushili.md"]},{"text":"Mvvm组件","prefix":"/dotnet/zhuomianchengxu/wpf/mvvmzujian/","collapsible":true,"children":["readme.md",{"text":"Prism","prefix":"/dotnet/zhuomianchengxu/wpf/mvvmzujian/prism/","collapsible":true,"children":["readme.md"]},{"text":"CommunityToolkit.Mvvm","prefix":"/dotnet/zhuomianchengxu/wpf/mvvmzujian/communitytoolkit_mvvm/","collapsible":true,"children":["readme.md"]},"propertychanged_fody.md"]},{"text":"UI","prefix":"/dotnet/zhuomianchengxu/wpf/ui/","collapsible":true,"children":["handycontrol.md","materialdesign.md","wpfui.md","rubyer.md"]},{"text":"扩展","prefix":"/dotnet/zhuomianchengxu/wpf/kuozhan/","collapsible":true,"children":["congshipinzhongdiqutupian.md"]},"changwenwenti.md","kaiyuanzujian.md"]},{"text":"开源组件","prefix":"/dotnet/zhuomianchengxu/kaiyuanzujian/","collapsible":true,"children":["ui.md","_netnanoframework.md","dotnetty.md"]},{"text":"扩展","prefix":"/dotnet/zhuomianchengxu/kuozhan/","collapsible":true,"children":["qidongexemojiemianfangan.md"]},{"text":"打包部署","prefix":"/dotnet/zhuomianchengxu/dabaobushu/","collapsible":true,"children":["readme.md","InnoSetupBuild.md","costura_fody.md","clickoncebushu.md","gengxin.md"]}]},{"text":"MAUI","prefix":"/dotnet/maui/","collapsible":true,"children":["readme.md","xaml.md",{"text":"入门学习","prefix":"/dotnet/maui/rumenxuexi/","collapsible":true,"children":["jichuzhishi.md","huanjingzhunbei.md","shujubangding.md","xiangmukuangjiajieshao.md","qiantaichuangjianuihedaimachuangjianui.md"]},{"text":"Blazor Hybrid","prefix":"/dotnet/maui/blazorhybrid/","collapsible":true,"children":["jieshao.md","diaoshi.md"]},"pingtaiapi.md",{"text":"操作","prefix":"/dotnet/maui/caozuo/","collapsible":true,"children":["quanjuyichangchuli.md","shiyongautofac.md"]},"kaiyuanxiangmu.md",{"text":"发布","prefix":"/dotnet/maui/fabu/","collapsible":true,"children":["windowsfabu.md","windowsfabuexe.md","anzhuofabu.md","pingguobushu.md"]},"wenti.md"]},{"text":"Avalonia","prefix":"/dotnet/avalonia/","collapsible":true,"children":["readme.md","operator.md","openSourceComponent.md",{"text":"项目","prefix":"/dotnet/avalonia/projects/","collapsible":true,"children":["socketTool.md","mqttTool.md"]},"issue.md"]},"dotNetAspire.md","kiota.md",{"text":"模板引擎","prefix":"/dotnet/mobanyinqing/","collapsible":true,"children":["readme.md",{"text":"Razor","prefix":"/dotnet/mobanyinqing/razor/","collapsible":true,"children":["readme.md","razorlight.md","microsoft_aspnetcore_mvc_razor.md","razorengine.md"]},"jntemplate.md"]},{"text":"服务器","prefix":"/dotnet/server/","collapsible":true,"children":[{"text":"Kestrel","prefix":"/dotnet/server/kestrel/","collapsible":true,"children":["kestrel.md","cuowuchuli.md"]},{"text":"Diagnostics","prefix":"/dotnet/server/diagnostics/","collapsible":true,"children":["gaishu.md","caozuo.md"]}]},"semantickernel.md",{"text":"Signalr","prefix":"/dotnet/signalr/","collapsible":true,"children":["signalr.md","qianhouduanfenli.md","signalrshiyongjwt.md","nginxshiyongwesocketwenti.md","messagepack.md","signalrfuzaijunheng.md","signalrkuozhan.md"]},{"text":"AOP","prefix":"/dotnet/aop/","collapsible":true,"children":["readme.md","fody.md","dispatchproxy.md","castle_dynamicproxy.md","aspectcore_core.md","rougamo.md","postsharp.md","mradvice.md","dora_interception.md"]},{"text":"命名管道IPC","prefix":"/dotnet/mingmingguandaoipc/","collapsible":true,"children":["readme.md"]},{"text":"T4模板","prefix":"/dotnet/t4moban/","collapsible":true,"children":["t4moban.md","t4yufa.md"]},{"text":"游戏引擎","prefix":"/dotnet/youhuyinqing/","collapsible":true,"children":["readme.md"]},{"text":"安全和标识","prefix":"/dotnet/anquanhebiaoshi/","collapsible":true,"children":[{"text":"身份认证和授权","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/","collapsible":true,"children":["gaishu.md",{"text":"Identity","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/","collapsible":true,"children":["jieshao.md","shenru.md"]},"claimsxiangguangainian.md","huoquyonghuxinxi.md","httpcontext.md",{"text":"Cookie身份认证","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/","collapsible":true,"children":["cookieshenfenrenzheng.md","netfcookie.md"]},{"text":"Session","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/","collapsible":true,"children":["session.md","sessionyuanma.md","sessiongongxiang.md"]},{"text":"JWT认证","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/","collapsible":true,"children":["gaishu.md","jianchancaozuojwttoken.md","kuozhanzidingyishouquan.md","jiangzhixiaxian.md","peizhijwtrenzhengpeizhi.md"]},"casbinfangwenkongzhi.md","shujubaohushixianxianshitoken.md","changyongzujian.md",{"text":"认证授权示例","prefix":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/","collapsible":true,"children":["zidingyibasicrenzhengyushouquan.md","zidingyiapikeyrenzheng.md","jiyuyonghujiaosedefangwenquanxiankongzhi.md"]}]},"shujubaohudataprotection.md"]},{"text":"调试","prefix":"/dotnet/debugging/","collapsible":true,"children":["readme.md","vs2022yuanchengdiaoshiiisfuwu.md","xianchengdiaoshi.md","xingnengdiaoshi.md","dumpAnalyses.md",{"text":"问题分析","prefix":"/dotnet/debugging/wentifenxi/","collapsible":true,"children":["neicunfenxi.md"]},{"text":"基本调试工具","prefix":"/dotnet/debugging/jibendiaoshigongju/","collapsible":true,"children":["jibendiaoshigongju.md","diyicizhihangmanxingnengfenxi.md"]}]},{"text":"错误处理","prefix":"/dotnet/cuowuchuli/","collapsible":true,"children":["shibairenwuchongshi.md"]},{"text":"项目迁移","prefix":"/dotnet/xiangmuqianyi/","collapsible":true,"children":["readme.md","shengjizhushou.md"]},{"text":"功能案例","prefix":"/dotnet/gongnenganli/","collapsible":true,"children":["appjiekoukaifa.md","shiyonggongneng.md"]},{"text":"代码分析","prefix":"/dotnet/daimafenxi/","collapsible":true,"children":["readme.md","fenxigongju.md",{"text":"代码质量规则","prefix":"/dotnet/daimafenxi/daimazhiliangguize/","collapsible":true,"children":["readme.md"]},"daimazhiliang.md","yuandaimafenxi.md"]},{"text":"代码优化","prefix":"/dotnet/daimayouhua/","collapsible":true,"children":["daimayouhua.md","quanjuxingnengzhenduangongju.md"]},{"text":"数据访问","prefix":"/dotnet/shujufangwen/","collapsible":true,"children":["dotnetshengchengshujuku.md"]},{"text":"发布部署","prefix":"/dotnet/buildAndRelease/","collapsible":true,"children":["readme.md","aot.md",{"text":"部署","prefix":"/dotnet/buildAndRelease/release/","collapsible":true,"children":["readme.md",{"text":"IIS部署问题","prefix":"/dotnet/buildAndRelease/release/iis/","collapsible":true,"children":["serverRelease.md","iisReleaseNet5.md","errorCode.md","issue.md"]},{"text":"Linux部署","prefix":"/dotnet/buildAndRelease/release/linux/","collapsible":true,"children":["linuxbushu.md","bushuliuchengheshouhujincheng.md","supervisor.md","anzhuanghuanjing.md","centosbushuwebxiangmu.md","ubuntuReleaseNet.md","shouhujincheng.md","bushujiaoben.md"]},{"text":"部署工具","prefix":"/dotnet/buildAndRelease/release/releaseTools/","collapsible":true,"children":["nssm.md"]},"dockerReleaseNetCore.md","optimizeFolder.md"]},"obfuscator.md"]},{"text":"生产力提升","prefix":"/dotnet/shengchanlidisheng/","collapsible":true,"children":["kaifasuidaoshiyong.md","vschajian.md","genApiDoc.md"]},{"text":"公共方法类","prefix":"/dotnet/commonMethod/","collapsible":true,"children":["readme.md","ipchuli.md","qianggongbaosuanfa.md","leizhuaiurl.md",{"text":"加解密","prefix":"/dotnet/commonMethod/encrypt/","collapsible":true,"children":["readme.md","aes.md","sha.md","rsajiajiemi.md","chinaEncrypt.md"]},"iniwenjiandouxie.md","downloader.md"]}],"/middleware/":["readme.md",{"text":"Office","prefix":"/middleware/office/","collapsible":true,"children":["readme.md","spire.md","aspose.md","nsoup.md","towersoft_htmltoexcel.md","htmlagilitypack.md","anglesharp.md","puppeteersharp.md",{"text":"NPOI","prefix":"/middleware/office/npoi/","collapsible":true,"children":["npoi.md","npoicaozuoexcel.md","npoipeizhi.md","npoiyiwen.md"]},"miniword.md","epplus.md","closedxml.md","miniexcel.md","exceltohtml.md","onlyoffice.md","epubHandle.md",{"text":"PPT","collapsible":true,"children":["/middleware/office/openxml.md","/middleware/office/ppt/shapeCrawler.md"]},{"text":"PDF","prefix":"/middleware/office/pdf/","collapsible":true,"children":["pdfSample.md","magick_net.md","ironpdf.md","questpdf.md","spire_pdf.md","aspose_pdf.md","itextsharp.md","itext7.md","haukcode_wkhtmltopdfdotnet.md","pdfsharp.md","dinkToPdf.md"]},{"text":"CSV","prefix":"/middleware/office/csv/","collapsible":true,"children":["gaishu.md","csvhelper.md","csvfile.md"]},{"text":"邮件","prefix":"/middleware/office/youjian/","collapsible":true,"children":["mailkit.md","fluentemail.md"]},{"text":"YAPI","prefix":"/middleware/office/yapi/","collapsible":true,"children":["readme.md","neiwangbushu.md"]},{"text":"IP","prefix":"/middleware/office/ip/","collapsible":true,"children":["maxmind.md","ip2region.md"]},{"text":"Markdown","prefix":"/middleware/office/markdown/","collapsible":true,"children":["markdig.md","markdownsharp.md"]},{"text":"文本对比","prefix":"/middleware/office/wenbenduibi/","collapsible":true,"children":["diffplex.md","htmldiff_net.md"]}]},{"text":"仓库","prefix":"/middleware/cangku/","collapsible":true,"children":["octokit.md"]},{"text":"分词","prefix":"/middleware/fenci/","collapsible":true,"children":["jieba_net.md","zhizuociyuntu.md","mingancizujian.md"]},{"text":"节点编辑器","prefix":"/middleware/jiedianbianjiqi/","collapsible":true,"children":["stnodeeditor.md"]},{"text":"gRPC","prefix":"/middleware/grpc/","collapsible":true,"children":["grpc.md","grpcsichongmoshi.md","grpchttpapi.md","protowenjian.md","yichanglanjieqi.md","jianquan.md","dotnetdaimayouxiangrpcfuwu.md","grpcliu.md","grpc-web.md","grpcdiaoshigongju.md",{"text":"Rpc框架","prefix":"/middleware/grpc/rpckuangjia/","collapsible":true,"children":["dotnetcorerpc.md"]},{"text":"部署","prefix":"/middleware/grpc/bushu/","collapsible":true,"children":["kaifabushu.md"]}]},{"text":"图像处理","prefix":"/middleware/tuxiangchuli/","collapsible":true,"children":["readme.md","systemDrawingCommon.md","duochongmazxing_net.md","tiaoxingmabarcodelib.md","duochongmaskiasharp_qrcode.md","imagesharp.md","magick_net.md","qrcodegenerator.md","huoqushexiangtoupaizhao.md",{"text":"验证码","prefix":"/middleware/tuxiangchuli/yanzhengma/","collapsible":true,"children":["readme.md","tuxingyanzhengmalazycaptcha.md","tuxingyanzhengmaimagesharp.md","huakuaiyanzhengmalazyslidecaptcha.md","huakuaiyanzhengmaverificationcode.md","chumoyanzhengmasimcaptcha.md"]},{"text":"OCR","prefix":"/middleware/tuxiangchuli/ocr/","collapsible":true,"children":["paddleocrsharp.md","rapidocr.md"]},{"text":"人脸识别","prefix":"/middleware/tuxiangchuli/renlianshibie/","collapsible":true,"children":["facerecognitiondotnet.md","arcsoft.md","luxandfacesdk.md","viewfacecore.md"]},{"text":"手势识别","prefix":"/middleware/tuxiangchuli/shoushishibie/","collapsible":true,"children":["mediapipe_net.md"]},{"text":"OpenCV","prefix":"/middleware/tuxiangchuli/opencv/","collapsible":true,"children":["opencvsharp4.md","opencvsharp.md","emgu_cv.md","openVino.md"]}]},{"text":"音频视频","prefix":"/middleware/yinpinshipin/","collapsible":true,"children":["whisper_net.md","yuyinliaotian.md","speechsynthesizeryuyin.md",{"text":"ffmpeg","prefix":"/middleware/yinpinshipin/ffmpeg/","collapsible":true,"children":["jichujieshao.md","shipinjietu.md","ffmpeg_autogen.md","sdcb_ffmpeg.md"]},{"text":"流媒体服务","prefix":"/middleware/yinpinshipin/liumeitifuwu/","collapsible":true,"children":["readme.md","zlmediakit.md"]}]},{"text":"全文检索","prefix":"/middleware/fullTextSearch/","collapsible":true,"children":["gaishu.md",{"text":"Lucene","prefix":"/middleware/fullTextSearch/lucene/","collapsible":true,"children":["lucene_net.md","lucene-searchextensions.md"]},{"text":"ElasticSearch","prefix":"/middleware/fullTextSearch/elasticsearch/","collapsible":true,"children":["readme.md","struct.md","operator.md","install.md"]},{"text":"MeiliSearch","prefix":"/middleware/fullTextSearch/meilisearch/","collapsible":true,"children":["readme.md"]},"redisearch.md",{"text":"Solr","prefix":"/middleware/fullTextSearch/solr/","collapsible":true,"children":["jieshao.md"]}]},{"text":"分布式文件系统","prefix":"/middleware/oss/","collapsible":true,"children":["readme.md","minio.md","aliyunoss.md","qiniuyuncunchu.md","fastdfs.md","tfs.md","httpfileserver.md","fluentftp.md","filebrowser.md"]},{"text":"自动化操作","prefix":"/middleware/zidonghuacaozuo/","collapsible":true,"children":["readme.md","netautogui.md","flaUIAutomation.md","uiautomation.md","cliwrap.md"]},{"text":"规则引擎","prefix":"/middleware/guizeyinqing/","collapsible":true,"children":["rulesengine.md"]},"graphql.md","shujuqianyi.md",{"text":"打印插件","prefix":"/middleware/printPlugin/","collapsible":true,"children":["readme.md",{"text":"前端打印","prefix":"/middleware/printPlugin/frontPrint/","collapsible":true,"children":["default.md","httpprinter.md","jcp.md","lodop.md"]},"fastreport.md"]},{"text":"消息队列","prefix":"/middleware/xiaoxiduilie/","collapsible":true,"children":["gaishu.md",{"text":"RabbitMQ","prefix":"/middleware/xiaoxiduilie/rabbitmq/","collapsible":true,"children":["rabbitmq.md","rabbitmqmoshi.md","xiaoxiquerenmoshi.md","xianzhixunhuanxiaofei.md","rabbitmqtuli.md",{"text":"扩展","prefix":"/middleware/xiaoxiduilie/rabbitmq/kuozhan/","collapsible":true,"children":["rabbitmqsixin.md","rabbitmqyanchiduilie.md","rabbitmqxiaoxikekaoxingfenxiheyingyong.md"]},"easynetq.md","kongzhiqishiyongrabbitmq.md","aspnetcore_rabbitmq.md","shiyongzongjie.md",{"text":"安装","prefix":"/middleware/xiaoxiduilie/rabbitmq/anzhuang/","collapsible":true,"children":["dockeranzhuangrabbitmq.md","linuxanzhuangrabbitmq.md","windowsanzhuangrabbitmq.md"]}]},{"text":"RocketMq","prefix":"/middleware/xiaoxiduilie/rocketmq/","collapsible":true,"children":["gaishu.md"]},"xiaoxiduilieredis.md","kafka.md","pulsar.md","mqtt.md","changjianwenti.md"]},{"text":"事件总线","prefix":"/middleware/shijianzongxian/","collapsible":true,"children":["readme.md","shijianzongxianneicunmoshi.md","masstransit.md","zack_eventbusrabbitmq.md","jaina.md","masaframework.md","mediatr.md","slimmessagebus.md"]},{"text":"语法解析","prefix":"/middleware/yufajiexi/","collapsible":true,"children":["sqljiexi.md","irony.md"]},{"text":"工作流","prefix":"/middleware/gongzuoliu/","collapsible":true,"children":["readme.md","workflow-core.md","elsa.md","ccflow.md","mxgraph.md","visor_js.md"]},{"text":"爬虫","prefix":"/middleware/pachong/","collapsible":true,"children":["gaishu.md","fuzhugongju.md","anglesharp.md","htmlagilitypack.md","puppeteersharp.md","shili.md","changyongzujian.md"]},"zhifuzujian.md",{"text":"认证授权","prefix":"/middleware/authorize/","collapsible":true,"children":[{"text":"OAuth","prefix":"/middleware/authorize/oauth/","collapsible":true,"children":["readme.md","sichongshouquanmoshi.md","sample.md"]},"openidconnect.md",{"text":"IdentityServer4","prefix":"/middleware/authorize/identityserver4/","collapsible":true,"children":["readme.md","kuaisudajianxiangmu.md",{"text":"模式","prefix":"/middleware/authorize/identityserver4/mode/","collapsible":true,"children":["clientCredentialsMode.md","resourceOwnerPasswordMode.md","implicitMode.md","codeMode.md","hybridMode.md"]},"shujuchijiuhua.md","ui.md","chijiuhuabiaoshuiming.md","ziyuanfuwurenzheng.md","issue.md"]},{"text":"OpenIddict","prefix":"/middleware/authorize/openiddict/","collapsible":true,"children":["readme.md"]},"keycloak.md"]},{"text":"任务调度","prefix":"/middleware/renwudiaodu/","collapsible":true,"children":["readme.md","timerlei.md",{"text":"Quartz","prefix":"/middleware/renwudiaodu/quartz/","collapsible":true,"children":["quartz.md","netfshiyong.md","gzy_quartz_mui.md"]},"hangfire.md","coravel.md","schedulemaster.md","fluentscheduler.md","easyquartz.md","xxl-job.md","antjob.md"]},{"text":"延迟队列","prefix":"/middleware/yanchiduilie/","collapsible":true,"children":["jianjie.md","hangfireyanchiduilie.md","redishuancunguojishijian.md","zidingyiyanchiduilie.md","jishiguanliqi.md"]},{"text":"通知服务","prefix":"/middleware/notification/","collapsible":true,"children":["notificationService.md","notificationCollect.md"]},"sonar.md",{"text":"标识ID","prefix":"/middleware/identityId/","collapsible":true,"children":["fenbushiweiyibiaoshi.md","newidshunxuguid.md","yitterxuehuaid.md","idhelperxuehuaid.md","jiyushujukufenbushiid.md","hashidsjianduanzifuchuanid.md","ulid.md","xuehuaidgonggonglei.md"]},{"text":"短信","prefix":"/middleware/duanxin/","collapsible":true,"children":["readme.md","aliyunduanxin.md","yunlianrongtongxunduanxin.md"]},{"text":"管理和测试工具","prefix":"/middleware/testMange/","collapsible":true,"children":["jianshu.md",{"text":"基准测试","prefix":"/middleware/testMange/jizhunceshi/","collapsible":true,"children":["benchmarkdotnet.md"]},{"text":"单元测试","prefix":"/middleware/testMange/unitTest/","collapsible":true,"children":["readme.md","testSpecification.md","cliTest.md","xunitTest.md","msTest.md","xunitDependencyInjection.md"]},{"text":"集成测试","prefix":"/middleware/testMange/jichengceshi/","collapsible":true,"children":["gaishu.md","testserver.md"]},{"text":"负载测试","prefix":"/middleware/testMange/fuzaiceshi/","collapsible":true,"children":["readme.md","k6.md"]},{"text":"端到端测试","prefix":"/middleware/testMange/duandaoduanceshi/","collapsible":true,"children":["readme.md",{"text":"Playwright","prefix":"/middleware/testMange/duandaoduanceshi/playwright/","collapsible":true,"children":["readme.md","caozuo.md","bushu.md"]}]},"qiyaoceshi.md",{"text":"压力测试","prefix":"/middleware/testMange/pressureTest/","collapsible":true,"children":["readme.md","jmeter.md","nbomberyace.md","webapibenchmark.md"]},{"text":"模糊测试","prefix":"/middleware/testMange/mohuceshi/","collapsible":true,"children":["sharpfuzz.md"]},"changyongleiku.md","monihttpxiangying.md","specflowhangweiceshi.md"]},{"text":"短连接","prefix":"/middleware/duanlianjie/","collapsible":true,"children":["duanlianjie.md","hashidsshixianduanlianjie.md"]},{"text":"反向代理","prefix":"/middleware/reverseProxy/","collapsible":true,"children":[{"text":"Nginx","prefix":"/middleware/reverseProxy/nginx/","collapsible":true,"children":["nginx.md","peizhiwenjian.md","localhostyingshelujing.md","dongjingfenli.md","gaokeyong.md","shiyonggongneng.md","nginxpeizhinetcore.md",{"text":"WebUI","prefix":"/middleware/reverseProxy/nginx/webui/","collapsible":true,"children":["nginxconfig.md","nginxwebui.md"]},{"text":"安装","prefix":"/middleware/reverseProxy/nginx/anzhuang/","collapsible":true,"children":["dockeranzhuangnginx.md","windowsanzhuangnginx.md","linuxanzhuangnginx.md"]},"issue.md"]},"traefik.md"]},{"text":"微服务","prefix":"/middleware/smallService/","collapsible":true,"children":["readme.md","jiagoutu.md","xianliu.md","rongduanjiangji.md","polly.md",{"text":"网关","prefix":"/middleware/smallService/wangguan/","collapsible":true,"children":["wangguan.md","wangguan-ocelot.md","wangguan-kong.md","wangguan-yarp.md"]},{"text":"服务注册与发现","prefix":"/middleware/smallService/fuwuzhuceyufaxian/","collapsible":true,"children":["fuwuzhuceyufaxian.md","eureka.md","consul.md"]},{"text":"统一配置管理","prefix":"/middleware/smallService/tongyipeizhiguanli/","collapsible":true,"children":["apollo.md","zookeeper.md","agileconfig.md","nacos.md"]},{"text":"分布式可观测性","prefix":"/middleware/smallService/distributedObservability/","collapsible":true,"children":[{"text":"分布式日志","prefix":"/middleware/smallService/distributedObservability/distributedLogger/","collapsible":true,"children":["readme.md","seq.md","efk.md","exceptionless.md","elk.md","loki.md","splunk.md"]},{"text":"分布式追踪Tracing","prefix":"/middleware/smallService/distributedObservability/distributedTrace/","collapsible":true,"children":["readme.md","skywalking.md","jaeger.md","zipkin.md","butterfly.md"]},{"text":"分布式监控Metrics","prefix":"/middleware/smallService/distributedObservability/distributedMonitoring/","collapsible":true,"children":["readme.md","prometheus.md","opentelemetry.md","openTelemetryStartedCombat.md","grafana.md","jitongjiankonghttpreportsapm.md","czgl_processmetrics.md"]}]},{"text":"错误追踪和性能监控","prefix":"/middleware/smallService/cuowuzhuizonghexingnengjiankong/","collapsible":true,"children":["sentry.md"]},{"text":"分布式事务","prefix":"/middleware/smallService/fenbushishiwu/","collapsible":true,"children":["fenbushishiwu.md","fenbushishiwu-zuizhongyizhixingcap.md"]},{"text":"分布式锁","prefix":"/middleware/smallService/fenbushisuo/","collapsible":true,"children":["fenbushisuo.md","redisfenbushisuo.md","shujukufenbushisuo.md"]}]}],"/dataBase/":[{"text":"共有部分","prefix":"/dataBase/gongyoubufen/","collapsible":true,"children":["readme.md","nosqlReadme.md","suoyin.md","shiwu.md","executeOrder.md","dashujuchaxunkuaisuyouhua.md","shujukusheji.md","fenkufenbiao.md","cacheDbConsistency.md","jiejuefangan.md","shujukuqianyi.md","shujukulianjiechi.md",{"text":"小工具","prefix":"/dataBase/gongyoubufen/tools/","collapsible":true,"children":["dbtool.md"]}]},{"text":"SQL Server","prefix":"/dataBase/sqlserver/","collapsible":true,"children":["readme.md",{"text":"基础知识","prefix":"/dataBase/sqlserver/base/","collapsible":true,"children":["dataType.md","operation.md","functions.md","hierarchyid.md"]},"dbhelper.md","tazhan.md",{"text":"安装","prefix":"/dataBase/sqlserver/install/","collapsible":true,"children":["windowsInstall.md","linuxInstall.md","dockerInstall.md"]},"issue.md","dingshibeifenjihua.md"]},{"text":"MySQL","prefix":"/dataBase/mysql/","collapsible":true,"children":["shuiming.md",{"text":"基础知识","prefix":"/dataBase/mysql/jichuzhishi/","collapsible":true,"children":["jichuzhishi.md","utf8heutf8mb4deoubie.md","shujubiao.md","fenoubiao.md","mysqlshujuleixing.md","liecaozuo.md","chaxunshuju.md","zhihangyugou.md","hanshu.md","suoyin.md","yaoshutiaojian.md","cunchuguocheng.md","zhihangshunxu.md","suo.md","shiwu.md"]},{"text":"MySQL函数","prefix":"/dataBase/mysql/mysqlhanshu/","collapsible":true,"children":["mysqlhanshu.md","shujuleixing.md","duibi.md"]},{"text":"数据库优化记录","prefix":"/dataBase/mysql/shujukuyouhuajilu/","collapsible":true,"children":["shujukuyouhuajilu.md","jianbiaoyugouyouhua.md","chaxunsql.md","douxiefenli.md","jinshencaozuo.md"]},"codeOperator.md","dbHelperMySQL.md",{"text":"进阶","prefix":"/dataBase/mysql/jinjie/","collapsible":true,"children":["zhucongfuzhi.md","federated.md"]},{"text":"执行计划","prefix":"/dataBase/mysql/zhihangjihua/","collapsible":true,"children":["jiancesuoyinshifoushengxiao.md"]},{"text":"脚本","prefix":"/dataBase/mysql/jiaoben/","collapsible":true,"children":["mysqlbeifenjiaoben.md","mysqldumpOperator.md"]},{"text":"安装","prefix":"/dataBase/mysql/install/","collapsible":true,"children":["readme.md","windowInstall.md","linuxInstall.md","dockerInstall.md"]},{"text":"遇到的问题","prefix":"/dataBase/mysql/yudaodewenti/","collapsible":true,"children":["issue.md","netFrameworkUse.md","diguichubulaishangji.md"]}]},{"text":"PostgreSQL","prefix":"/dataBase/postgresql/","collapsible":true,"children":["shuiming.md","jichuzhishi.md","shujukushiwu.md",{"text":"表字段类型","prefix":"/dataBase/postgresql/biaoziduanleixing/","collapsible":true,"children":["biaoziduanleixing.md","shijianchuli.md"]},"hanshu.md","shouquan.md","zhuaiyizifu.md","zhihangjihua.md","anzhuang.md"]},{"text":"Oracle","prefix":"/dataBase/oracle/","collapsible":true,"children":["shuiming.md","jichucaozuo.md","changyongshujuleixing.md","hanshu.md","dblink.md",{"text":"dotNet操作","prefix":"/dataBase/oracle/dotnetcaozuo/","collapsible":true,"children":["dotnetcaozuo.md","oraclehelper.md"]},{"text":"数据库备份和还原","prefix":"/dataBase/oracle/shujukubeifenhehaiyuan/","collapsible":true,"children":["shujukubeifenhehaiyuan.md","fuwuqidingshijihua.md"]},{"text":"安装","prefix":"/dataBase/oracle/anzhuang/","collapsible":true,"children":["winx64_12201_clientanzhuang.md","oracleinstallclient12_2anzhuangjiaocheng.md"]},{"text":"Oracle使用问题","prefix":"/dataBase/oracle/oracleshiyongwenti/","collapsible":true,"children":["oracleshiyongwenti.md","11gchuangjianshujuku.md"]}]},{"text":"Redis","prefix":"/dataBase/redis/","collapsible":true,"children":["readme.md",{"text":"简单介绍","prefix":"/dataBase/redis/jianchanjieshao/","collapsible":true,"children":["neicunyouhua.md","chijiuhua.md"]},{"text":"Redis数据类型","prefix":"/dataBase/redis/redisshujuleixing/","collapsible":true,"children":["redisshujuleixing.md","zifuchuan.md","hashleixing.md","jigesortedset.md","jigeset.md","liebiaolist.md","hyperloglog.md"]},"jichumingling.md","redisfabudingyue.md","duolufuyong.md","redisxiaoxiduilie.md","quanwenjiansuo.md",{"text":"组件","prefix":"/dataBase/redis/zujian/","collapsible":true,"children":["jianchanshiyong.md","freeredis.md",{"text":"StackExchange","prefix":"/dataBase/redis/zujian/stackexchange/","collapsible":true,"children":["shuiming.md","redishelper.md","stackexchange_redis.md"]},"redisom.md","nrejson.md","csredis.md"]},{"text":"安装","prefix":"/dataBase/redis/anzhuang/","collapsible":true,"children":["bushufangan.md","windowskehuduan.md","linuxanzhuangredis.md","docker-composebushuredis.md"]},{"text":"疑问和bug","prefix":"/dataBase/redis/yiwenhebug/","collapsible":true,"children":["yiwenhebug.md","queshaomsvcp140_dll.md"]}]},{"text":"MongoDB","prefix":"/dataBase/mongodb/","collapsible":true,"children":["jieshao.md","gainianjiexi.md","shiyongchangjing.md","jibencaozuo.md","daimacaozuo.md","zhihangjihua.md",{"text":"linux安装","prefix":"/dataBase/mongodb/linuxanzhuang/","collapsible":true,"children":["linuxanzhuang.md","windowsanzhuang.md","docker-composebushumongodb.md"]}]},{"text":"SQLite","prefix":"/dataBase/sqlite/","collapsible":true,"children":["jieshao.md","jichuzhishi.md","sqlitefts5.md"]},{"text":"达梦数据库","prefix":"/dataBase/damengshujuku/","collapsible":true,"children":["gaishu.md","datagriplianjie.md"]},{"text":"Elasticsearch","prefix":"/dataBase/elasticsearch/","collapsible":true,"children":["jieshao.md"]},{"text":"Clickhouse","prefix":"/dataBase/clickhouse/","collapsible":true,"children":["shuiming.md","changyongcaozuo.md"]},{"text":"Neo4j","prefix":"/dataBase/neo4j/","collapsible":true,"children":["readme.md"]},{"text":"Cassandra","prefix":"/dataBase/cassandra/","collapsible":true,"children":["jieshao.md","jibencaozuo.md"]},{"text":"IndexedDB","prefix":"/dataBase/indexeddb/","collapsible":true,"children":["liulanqishujuku.md"]},{"text":"LiteDB","prefix":"/dataBase/litedb/","collapsible":true,"children":["gaishu.md"]},{"text":"中间件","prefix":"/dataBase/zhongjianjian/","collapsible":true,"children":["sqlshenhechaxunpingtai.md"]}],"/orm/":["readme.md",{"text":"ADO.NET","prefix":"/orm/adoNet/","collapsible":true,"children":["readme.md","operation.md","dbhelper.md","dongruandaimashengchengqi.md","issue.md"]},{"text":"ODBC","prefix":"/orm/odbc/","collapsible":true,"children":["readme.md","odbcSqlServer.md"]},{"text":"Dapper","prefix":"/orm/dapper/","collapsible":true,"children":["readme.md","dapperCqrs.md","parameter.md","component.md",{"text":"分库分表","prefix":"/orm/dapper/splitDbTable/","collapsible":true,"children":["coreData.md","lnskyDB.md"]}]},{"text":"Sqlsugar","prefix":"/orm/sqlsugar/","collapsible":true,"children":["jianjie.md","operation.md",{"text":"问题汇总","prefix":"/orm/sqlsugar/wentihuizong/","collapsible":true,"children":["wentihuizong.md","parametercountmismatch.md"]}]},{"text":"EF","prefix":"/orm/ef/","collapsible":true,"children":["ef.md","efcaozuo.md","linq+lambda.md"]},{"text":"EFCore","prefix":"/orm/efcore/","collapsible":true,"children":["readme.md",{"text":"基础知识","prefix":"/orm/efcore/jichuzhishi/","collapsible":true,"children":["baseOperation.md","shujukuqudong.md","shitileipeizhi.md","shitijianguanji.md","iqueryable.md","shengchengsqlyugou.md","piliangcaozuo.md","savechanges.md","shiwu.md","jiazaifangshi.md","shujukuhanshu.md"]},"quanjuyichanglanjie.md","jiamicunchushuju.md","shijian(lishi)biao.md",{"text":"二级缓存","prefix":"/orm/efcore/erjihuancun/","collapsible":true,"children":["jieshao.md"]},{"text":"进阶","prefix":"/orm/efcore/jinjie/","collapsible":true,"children":["expressionTree.md","fenkufenbiao.md","douxiefenli.md","efcoreConcurrency.md","xianshibianyichaxun.md"]},{"text":"迁移数据","prefix":"/orm/efcore/qianyishuju/","collapsible":true,"children":["efcorezhiminglinghanggongju.md","daimayouxian.md","shujukuyouxian.md","migratorPackage.md","qianyijiyinjiqiao.md"]},{"text":"常用组件","prefix":"/orm/efcore/changyongzujian/","collapsible":true,"children":["shuiming.md","efcore_namingconventions.md","zack_efcore_batch.md","unitofwork.md","autohistory.md"]},"fengzhuanggonggonglei.md","youhua.md","issue.md",{"text":"摘抄","prefix":"/orm/efcore/extract/","collapsible":true,"children":["entityFrameworkEarlier.md"]}]},{"text":"Linq2db","prefix":"/orm/linq2db/","collapsible":true,"children":["jieshao.md"]},{"text":"SqlKata","prefix":"/orm/sqlkata/","collapsible":true,"children":["shuiming.md"]},{"text":"Insql","prefix":"/orm/insql/","collapsible":true,"children":["shuiming.md"]},{"text":"MongoDBDriver","prefix":"/orm/mongodbdriver/","collapsible":true,"children":["shuiming.md"]}],"/cloud/":["readme.md",{"text":"CI&CD","prefix":"/cloud/ciAndCd/","collapsible":true,"children":["readme.md","gitliuchenghedevopsliucheng.md",{"text":"Jenkins","prefix":"/cloud/ciAndCd/jenkins/","collapsible":true,"children":["readme.md","changyongchajian.md","yuanchengbushu.md","jenkinspeizhi.md",{"text":"部署","prefix":"/cloud/ciAndCd/jenkins/release/","collapsible":true,"children":["freeStyle.md","goujianliushuixianxiangmu.md","tongguogouzizidongfabu.md"]},{"text":"安装jenkins","prefix":"/cloud/ciAndCd/jenkins/install/","collapsible":true,"children":["windowsInstall.md","linuxInstall.md","dockerInstall.md","dockerInstallContainsDotNet.md","installIssue.md"]}]},{"text":"Gitlab","prefix":"/cloud/ciAndCd/gitlab/","collapsible":true,"children":["daiwancheng.md","jianchanbushu.md","liushuixianjiaoben.md","variables.md","gitlabrunner.md","giitlabdeyml.md","sshmianmidenglu.md","anzhuang.md"]},{"text":"GitHub","prefix":"/cloud/ciAndCd/github/","collapsible":true,"children":["readme.md","bushu_netfuwu.md","githubactionshengchengjingxiangbingbushu.md"]},{"text":"AzureDevOpsServer","prefix":"/cloud/ciAndCd/azuredevopsserver/","collapsible":true,"children":["readme.md"]},"flubucore.md","teamcity.md"]},{"text":"容器","prefix":"/cloud/container/","collapsible":true,"children":["readme.md",{"text":"Docker","prefix":"/cloud/container/docker/","collapsible":true,"children":["readme.md","concept.md","commonCommand.md","dockerfileGenerator.md","dockerfilecaozuo.md","images.md","dockerbushunetcore.md","markSmallImage.md",{"text":"脚本","prefix":"/cloud/container/docker/jiaoben/","collapsible":true,"children":["daorudaochujiaoben.md"]},"wentichuli.md",{"text":"安装","prefix":"/cloud/container/docker/install/","collapsible":true,"children":["windowsInstall.md","linuxInstall.md"]}]},{"text":"Podman","prefix":"/cloud/container/podman/","collapsible":true,"children":["readme.md","install.md"]},{"text":"Docker-Compose","prefix":"/cloud/container/dockerCompose/","collapsible":true,"children":["readme.md","peizhiwenjian.md","changyongjiaoben.md","linuxInstall.md","composeIssue.md"]},{"text":"操作","prefix":"/cloud/container/operators/","collapsible":true,"children":["readme.md","portainer.md"]}]},"dockerswarm.md","dapr.md",{"text":"K3s","prefix":"/cloud/k3s/","collapsible":true,"children":["readme.md",{"text":"操作","prefix":"/cloud/k3s/operators/","collapsible":true,"children":["redisInstall.md","netCoreInstall.md"]},"install.md","k3sDeployKuboard.md"]},{"text":"K8s","prefix":"/cloud/k8s/","collapsible":true,"children":["readme.md","changyonggainian.md","wanglaotongxin.md","fuwufaxian.md","bushuwenjian.md","k9s.md","gitlabhek8szidonghuafabu.md",{"text":"安装","prefix":"/cloud/k8s/anzhuang/","collapsible":true,"children":["minikube.md","rancher.md","rainbond.md"]}]},{"text":"Istio","prefix":"/cloud/istio/","collapsible":true,"children":["readme.md"]}],"/softwareDesign/":["readme.md",{"text":"认识系统","prefix":"/softwareDesign/seeSystem/","collapsible":true,"children":["quanxianjitong.md",{"text":"MES系统","prefix":"/softwareDesign/seeSystem/mesSystem/","collapsible":true,"children":["readme.md"]},"wmsSystem.md","erpSystem.md"]},{"text":"系统设计","prefix":"/softwareDesign/systemDesign/","collapsible":true,"children":["clientTryOut.md","loginSecurity.md","softLicence.md","oneTimePassword.md"]},"changjianderuanjianjiagougaishu.md","understandingComplexBusiness.md","systemLogOperation.md","bianchengsaixiang.md",{"text":"高质量代码","prefix":"/softwareDesign/highQualityCode/","collapsible":true,"children":["shuiming.md",{"text":"面向对象","prefix":"/softwareDesign/highQualityCode/mianxiangduixiang/","collapsible":true,"children":["mianxiangduixiang.md","mianxiangduixianghemianxiangguocheng.md","mianxiangduixiangfenxi.md","leizhijiandeguanji.md"]},"designPrinciples.md",{"text":"设计模式","prefix":"/softwareDesign/highQualityCode/designMode/","collapsible":true,"children":["overview.md",{"text":"创建型","prefix":"/softwareDesign/highQualityCode/designMode/chuangjianxing/","collapsible":true,"children":["singletonMode.md","factoryMode.md","jianzaozhemoshi.md","yuanxingmoshi.md"]},{"text":"结构型","prefix":"/softwareDesign/highQualityCode/designMode/jiegouxing/","collapsible":true,"children":["dailimoshi.md","qiaojiemoshi.md","zhuangshiqimoshi.md","kuopeiqimoshi.md","menmianmoshi.md","zugemoshi.md","xiangyuanmoshi.md"]},{"text":"行为型","prefix":"/softwareDesign/highQualityCode/designMode/hangweixing/","collapsible":true,"children":["guanchazhemoshi.md","mobanmoshi.md","celvemoshi.md","zhizelianmoshi.md","zhuangtaimoshi.md","diedaiqimoshi.md","fangwenzhemoshi.md","beiwanglumoshi.md","minglingmoshi.md","jieshiqimoshi.md","zhongjiezhemoshi.md"]}]},{"text":"规范与重构","prefix":"/softwareDesign/highQualityCode/guifanyuchonggou/","collapsible":true,"children":["chonggougaishu.md","mingmingfangfa.md","bianmaguifan.md","jieou.md","chucuodefanhuizhi.md"]},"ruhepingjiadaimahaohuai.md"]},"xuqiufenxihesheji.md",{"text":"DDD领域驱动","prefix":"/softwareDesign/domainDrivenDesign/","collapsible":true,"children":["readme.md","clearArchitecture.md",{"text":"常用概念","prefix":"/softwareDesign/domainDrivenDesign/commonConcept/","collapsible":true,"children":["readme.md","modelDesignMode.md","dddzhizhiduixiang.md","dddzhishiti.md"]},"codingPractice.md"]},"openSourceProject.md",{"text":"开源框架","prefix":"/softwareDesign/openSourceFrame/","collapsible":true,"children":["manyTenant.md","wtm.md",{"text":"ABP","prefix":"/softwareDesign/openSourceFrame/abp/","collapsible":true,"children":["shuiming.md","mokuaiheyilai.md","changyongmingling.md"]}]},"baseTheory.md"],"/otherLanguage/":[{"text":"Golang","prefix":"/otherLanguage/golang/","collapsible":true,"children":["jichuzhishi.md","anzhuang.md"]},{"text":"XML","prefix":"/otherLanguage/xml/","collapsible":true,"children":["shuoming.md",{"text":"操作XML","prefix":"/otherLanguage/xml/caozuoxml/","collapsible":true,"children":["caozuoxml.md","douquxml.md","xmlkuzhongchazhaoshuju.md"]}]},{"text":"Python","prefix":"/otherLanguage/python/","collapsible":true,"children":["shuoming.md",{"text":"基本使用","prefix":"/otherLanguage/python/jibenshiyong/","collapsible":true,"children":["jibenshiyong.md","kuaijiejian.md","dabaoexe.md","qiehuanyuan.md"]},{"text":"基础语法","prefix":"/otherLanguage/python/jichuyufa/","collapsible":true,"children":["jichuyufa.md","jibenshujuleixing.md","neizhihanshu.md","qingqiutou.md","dailiip.md","xpath.md","wenjiancaozuo.md","xiazai.md"]},{"text":"第三方库","prefix":"/otherLanguage/python/disanfangku/","collapsible":true,"children":["disanfangku.md","changyongbao.md"]},"changyongjichugongneng.md","idechajian.md","xuexiziliao.md","changyongjiaoben.md","xiaoshili.md","youqukaiyuanxiangmu.md","changjiancuowu.md"]},{"text":"Java","prefix":"/otherLanguage/java/","collapsible":true,"children":["shuoming.md"]},{"text":"Shell","prefix":"/otherLanguage/shell/","collapsible":true,"children":["shelljichu.md","bashjichuzhishi.md"]}],"/soft/":["/soft/softCollection.md","/soft/webAddress.md","/soft/browserPlug.md","/soft/game.md",{"text":"开发者工具","collapsible":true,"prefix":"/soft/devTools/","children":["codeConfig.md","openSourceProtocol.md",{"text":"VisualStudio","collapsible":true,"prefix":"/soft/devTools/VisualStudio/","children":["readme.md","shengchanlidisheng.md","chajianjieshao.md","useSkill.md","geshihuashezhi.md","editorconfig.md","shezhimingmingguifan.md","slngenLoading.md","zhongwentishi.md","vs2019Install.md","offLineInstall.md","environmentConfig.md"]},"linqpad.md","vscode.md","neiwangchuantou.md","communicationTest.md","nssm.md",{"text":"数据库工具","collapsible":true,"prefix":"/soft/devTools/dbTools/","children":["readme.md","navicat.md","dbchm.md"]},{"text":"JetBrains","collapsible":true,"prefix":"/soft/devTools/JetBrains/","children":["gaishu.md","rider.md","datagrip.md","dotmemery.md","dotpeek.md","dottrace.md"]},{"text":"源代码管理","prefix":"/soft/devTools/sourceCodeManage/","collapsible":true,"children":["readme.md","gitjichucaozuo.md","commonOperator.md","gitFile.md","codeRepository.md","pagesHost.md",{"text":"安装","collapsible":true,"prefix":"/soft/devTools/sourceCodeManage/install/","children":["windowsanzhuanggit.md","linuxanzhuanggit.md"]},"gogs.md","gitea.md"]},{"text":"Postman","prefix":"/soft/devTools/Postman/","collapsible":true,"children":["jieshao.md","postman.md","xiangshideruanjian.md"]},{"text":"项目管理","prefix":"/soft/devTools/projectManage/","collapsible":true,"children":["chandao.md","communityserver.md"]},"codeStatistics.md"]},{"text":"服务器和证书","prefix":"/soft/serverConfigs/","collapsible":true,"children":["readme.md","dns.md","ddns.md","fangwenneiwangfuwu.md","zhengshu.md"]},{"text":"Windows","collapsible":true,"prefix":"/soft/windows/","children":["windows.md","batmingling.md","cipanqingli.md","windowsStore.md","sortRecommend.md","mdTools.md","docsWeb.md","picGoImageStorage.md","wslLinux.md","hyperv.md","windowsSeverInstall.md"]},{"text":"Linux","prefix":"/soft/Linux/","collapsible":true,"children":["linux.md","shCommand.md",{"text":"Centos","prefix":"/soft/Linux/Centos/","collapsible":true,"children":["centos.md","mingling.md"]},{"text":"Ubuntu","prefix":"/soft/Linux/Ubuntu/","collapsible":true,"children":["gaishu.md"]},"baocunfanghuoqiangguize.md","selinux.md","tools.md",{"text":"安装","prefix":"/soft/Linux/Install/","collapsible":true,"children":["multipass.md","centos7anzhuangjavahuanjing.md","hypervanzhuangcentos7.md","hypervInstallUbuntu.md"]}]},"/soft/uos.md","/soft/photoshop.md"],"/live/":["gaishu.md","wanggougonglve.md","richangtousu.md","socialInsurance.md","housing.md","trip.md","food.md","music.md","found.md","baoxian.md",{"text":"娱乐","prefix":"/live/yule/","collapsible":true,"children":["aifuzhu.md","chatgptgeji.md","joke.md"]}],"/classicArticle/":["collect.md","jingdianyulu.md","nenglishuipinghegongzuolouxi.md","workStepByStep.md","goodHabit.md","developmentProductManager.md","resourceManage.md",{"text":"学习资源","prefix":"/classicArticle/xuexiResource/","collapsible":true,"children":["jiaoYuPlatform.md","studyMethod.md","zhishixuexifangfalun.md","notSuchABadProgrammer.md"]}],"/interview/":"structure","/temp/":"structure","/aboutme/":[{"text":"关于我","children":["/aboutme/readme.md"]}]}}}}'),Qh=J(Uh),Yu=()=>Qh,Zu=Symbol(""),$h=()=>{const n=An(Zu);if(!n)throw new Error("useThemeLocaleData() is called without provider.");return n},Kh=(n,s)=>{const{locales:t,...p}=n;return{...p,...t==null?void 0:t[s]}},Jh=ws({enhance({app:n}){const s=Yu(),t=n._context.provides[eo],p=E(()=>Kh(s.value,t.routeLocale.value));n.provide(Zu,p),Object.defineProperties(n.config.globalProperties,{$theme:{get(){return s.value}},$themeLocale:{get(){return p.value}}})}}),Xh=/\b(?:Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini)/i,Yh=()=>typeof window<"u"&&window.navigator&&"userAgent"in window.navigator&&Xh.test(navigator.userAgent),Zh=({delay:n=500,duration:s=2e3,locales:t,selector:p,showInMobile:e})=>{const{copy:o,copied:c}=uh({legacy:!0,copiedDuring:s}),u=zt(t),i=wn(),r=m=>{if(!m.hasAttribute("copy-code-registered")){const g=document.createElement("button");g.type="button",g.classList.add("vp-copy-code-button"),g.innerHTML='<div class="vp-copy-icon" />',g.setAttribute("aria-label",u.value.copy),g.setAttribute("data-copied",u.value.copied),m.parentElement&&m.parentElement.insertBefore(g,m),m.setAttribute("copy-code-registered","")}},k=()=>{Os().then(()=>qu(n)).then(()=>{p.forEach(m=>{document.querySelectorAll(m).forEach(r)})})},d=(m,g,y)=>{let{innerText:w=""}=g;/language-(shellscript|shell|bash|sh|zsh)/.test(m.classList.toString())&&(w=w.replace(/^ *(\$|>) /gm,"")),o(w).then(()=>{y.classList.add("copied"),kn(c,()=>{y.classList.remove("copied"),y.blur()},{once:!0})})};fn(()=>{const m=!Yh()||e;m&&k(),qn("click",g=>{const y=g.target;if(y.matches('div[class*="language-"] > button.copy')){const w=y.parentElement,T=y.nextElementSibling;T&&d(w,T,y)}else if(y.matches('div[class*="language-"] div.vp-copy-icon')){const w=y.parentElement,T=w.parentElement,_=w.nextElementSibling;_&&d(T,_,w)}}),kn(()=>i.value.path,()=>{m&&k()})})};var n0={"/":{copy:"复制代码",copied:"已复制"}},s0=['.theme-hope-content div[class*="language-"] pre'];const a0=ws({setup:()=>{Zh({selector:s0,locales:n0,duration:2e3,delay:500,showInMobile:!1})}}),tp=Ha("VUEPRESS_CODE_TAB_STORE",{});var t0=M({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(n,{slots:s}){const t=J(n.active),p=Cn([]),e=()=>{n.tabId&&(tp.value[n.tabId]=n.data[t.value].id)},o=(r=t.value)=>{t.value=r<p.value.length-1?r+1:0,p.value[t.value].focus()},c=(r=t.value)=>{t.value=r>0?r-1:p.value.length-1,p.value[t.value].focus()},u=(r,k)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),t.value=k):r.key==="ArrowRight"?(r.preventDefault(),o()):r.key==="ArrowLeft"&&(r.preventDefault(),c()),n.tabId&&(tp.value[n.tabId]=n.data[t.value].id)},i=()=>{if(n.tabId){const r=n.data.findIndex(({id:k})=>tp.value[n.tabId]===k);if(r!==-1)return r}return n.active};return fn(()=>{t.value=i(),kn(()=>tp.value[n.tabId],(r,k)=>{if(n.tabId&&r!==k){const d=n.data.findIndex(({id:m})=>m===r);d!==-1&&(t.value=d)}})}),()=>n.data.length?l("div",{class:"vp-code-tabs"},[l("div",{class:"vp-code-tabs-nav",role:"tablist"},n.data.map(({id:r},k)=>{const d=k===t.value;return l("button",{type:"button",ref:m=>{m&&(p.value[k]=m)},class:["vp-code-tab-nav",{active:d}],role:"tab","aria-controls":`codetab-${n.id}-${k}`,"aria-selected":d,onClick:()=>{t.value=k,e()},onKeydown:m=>u(m,k)},s[`title${k}`]({value:r,isActive:d}))})),n.data.map(({id:r},k)=>{const d=k===t.value;return l("div",{class:["vp-code-tab",{active:d}],id:`codetab-${n.id}-${k}`,role:"tabpanel","aria-expanded":d},[l("div",{class:"vp-code-tab-title"},s[`title${k}`]({value:r,isActive:d})),s[`tab${k}`]({value:r,isActive:d})])})]):null}});const ni=({active:n=!1},{slots:s})=>{var t;return l("div",{class:["code-group-item",{active:n}],"aria-selected":n},(t=s.default)==null?void 0:t.call(s))};ni.displayName="CodeGroupItem";const p0=M({name:"CodeGroup",slots:Object,setup(n,{slots:s}){const t=J(-1),p=Cn([]),e=(u=t.value)=>{t.value=u<p.value.length-1?u+1:0,p.value[t.value].focus()},o=(u=t.value)=>{t.value=u>0?u-1:p.value.length-1,p.value[t.value].focus()},c=(u,i)=>{u.key===" "||u.key==="Enter"?(u.preventDefault(),t.value=i):u.key==="ArrowRight"?(u.preventDefault(),e(i)):u.key==="ArrowLeft"&&(u.preventDefault(),o(i))};return()=>{var i;const u=(((i=s.default)==null?void 0:i.call(s))||[]).filter(r=>r.type.name==="CodeGroupItem").map(r=>(r.props===null&&(r.props={}),r));return u.length===0?null:(t.value<0||t.value>u.length-1?(t.value=u.findIndex(r=>"active"in r.props),t.value===-1&&(t.value=0)):u.forEach((r,k)=>{r.props.active=k===t.value}),l("div",{class:"code-group"},[l("div",{class:"code-group-nav"},u.map((r,k)=>{const d=k===t.value;return l("button",{type:"button",ref:m=>{m&&(p.value[k]=m)},class:["code-group-nav-tab",{active:d}],"aria-pressed":d,"aria-expanded":d,onClick:()=>{t.value=k},onKeydown:m=>c(m,k)},r.props.title)})),u]))}}}),dn=({name:n="",color:s="currentColor"},{slots:t})=>{var p;return l("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${n}-icon`],viewBox:"0 0 1024 1024",fill:s,"aria-label":`${n} icon`},(p=t.default)==null?void 0:p.call(t))};dn.displayName="IconBase";const si=({size:n=48,stroke:s=4,wrapper:t=!0,height:p=2*n})=>{const e=l("svg",{xmlns:"http://www.w3.org/2000/svg",width:n,height:n,preserveAspectRatio:"xMidYMid",viewBox:"25 25 50 50"},[l("animateTransform",{attributeName:"transform",type:"rotate",dur:"2s",keyTimes:"0;1",repeatCount:"indefinite",values:"0;360"}),l("circle",{cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":s,"stroke-linecap":"round"},[l("animate",{attributeName:"stroke-dasharray",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"1,200;90,200;1,200"}),l("animate",{attributeName:"stroke-dashoffset",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"0;-35px;-125px"})])]);return t?l("div",{class:"loading-icon-wrapper",style:`display:flex;align-items:center;justify-content:center;height:${p}px`},e):e};si.displayName="LoadingIcon";const ai=(n,{slots:s})=>{var t;return(t=s.default)==null?void 0:t.call(s)},e0=n=>pa(n)?n:`https://github.com/${n}`,io=(n="")=>!pa(n)||/github\.com/.test(n)?"GitHub":/bitbucket\.org/.test(n)?"Bitbucket":/gitlab\.com/.test(n)?"GitLab":/gitee\.com/.test(n)?"Gitee":null,ti=()=>l(dn,{name:"github"},()=>l("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));ti.displayName="GitHubIcon";const pi=()=>l(dn,{name:"gitee"},()=>l("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));pi.displayName="GiteeIcon";const ei=()=>l(dn,{name:"bitbucket"},()=>l("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));ei.displayName="BitbucketIcon";const oi=()=>l(dn,{name:"source"},()=>l("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));oi.displayName="SourceIcon";const o0=({link:n,type:s=io(n??"")})=>{if(!s)return null;const t=s.toLowerCase();return l(t==="bitbucket"?ei:t==="github"?ti:t==="gitlab"?"GitLab":t==="gitee"?pi:oi)},c0=(n,s=0)=>{let t=3735928559^s,p=1103547991^s;for(let e=0,o;e<n.length;e++)o=n.charCodeAt(e),t=Math.imul(t^o,2654435761),p=Math.imul(p^o,1597334677);return t=Math.imul(t^t>>>16,2246822507),t^=Math.imul(p^p>>>13,3266489909),p=Math.imul(p^p>>>16,2246822507),p^=Math.imul(t^t>>>13,3266489909),4294967296*(2097151&p)+(t>>>0)},Ip=(n,s)=>c0(n)%s;let l0=class{constructor(){this.messageElements={};const s="message-container",t=document.getElementById(s);t?this.containerElement=t:(this.containerElement=document.createElement("div"),this.containerElement.id=s,document.body.appendChild(this.containerElement))}pop(s,t=2e3){const p=document.createElement("div"),e=Date.now();return p.className="message move-in",p.innerHTML=s,this.containerElement.appendChild(p),this.messageElements[e]=p,t>0&&setTimeout(()=>{this.close(e)},t),e}close(s){if(s){const t=this.messageElements[s];t.classList.remove("move-in"),t.classList.add("move-out"),t.addEventListener("animationend",()=>{t.remove(),delete this.messageElements[s]})}else ks(this.messageElements).forEach(t=>this.close(Number(t)))}destroy(){document.body.removeChild(this.containerElement)}};const ci=/#.*$/u,u0=n=>{const s=ci.exec(n);return s?s[0]:""},Bc=n=>decodeURI(n).replace(ci,"").replace(/\/index\.html$/iu,"/").replace(/\.html$/iu,"").replace(/(README|index)?\.md$/iu,""),li=(n,s)=>{if(!Ou(s))return!1;const t=Bc(n.path),p=Bc(s),e=u0(s);return e?e===n.hash&&(!p||t===p):t===p};var i0=n=>Object.prototype.toString.call(n)==="[object Object]",yt=n=>typeof n=="string";const ui=Array.isArray,Fc=n=>i0(n)&&yt(n.name),bt=(n,s=!1)=>n?ui(n)?n.map(t=>yt(t)?{name:t}:Fc(t)?t:null).filter(t=>t!==null):yt(n)?[{name:n}]:Fc(n)?[n]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${s?"":"| false"} | undefined\`, but got`,n),[]):[],ii=(n,s)=>{if(n){if(ui(n)&&n.every(yt))return n;if(yt(n))return[n];console.error(`Expect ${s} to be \`string[] | string | undefined\`, but got`,n)}return[]},ri=n=>ii(n,"category"),ki=n=>ii(n,"tag"),r0='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',k0='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>';var d0={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"};const Zp=d0,Hc={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},m0=(n,s,t)=>{const p=document.createElement(n);return Ba(s)&&ks(s).forEach(e=>{if(e.indexOf("data"))p[e]=s[e];else{const o=e.replace("data","");p.dataset[o]=s[e]}}),p},ro=n=>({...Zp,...n,jsLib:Array.from(new Set([...Zp.jsLib||[],...n.jsLib??[]])),cssLib:Array.from(new Set([...Zp.cssLib||[],...n.cssLib??[]]))}),za=(n,s)=>{if(Ou(n[s]))return n[s];const t=new Promise(p=>{var o;const e=document.createElement("script");e.src=s,(o=document.querySelector("body"))==null||o.appendChild(e),e.onload=()=>{p()}});return n[s]=t,t},g0=(n,s)=>{if(s.css&&Array.from(n.childNodes).every(t=>t.nodeName!=="STYLE")){const t=m0("style",{innerHTML:s.css});n.appendChild(t)}},h0=(n,s,t)=>{const p=t.getScript();if(p&&Array.from(s.childNodes).every(e=>e.nodeName!=="SCRIPT")){const e=document.createElement("script");e.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${n} .vp-code-demo-display').shadowRoot;
${p}}`)),s.appendChild(e)}},y0=["html","js","css"],b0=n=>{const s=ks(n),t={html:[],js:[],css:[],isLegal:!1};return y0.forEach(p=>{const e=s.filter(o=>Hc[p].types.includes(o));if(e.length){const o=e[0];t[p]=[n[o].replace(/^\n|\n$/g,""),Hc[p].map[o]??o]}}),t.isLegal=(!t.html.length||t.html[1]==="none")&&(!t.js.length||t.js[1]==="none")&&(!t.css.length||t.css[1]==="none"),t},di=n=>n.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),mi=n=>`<div id="app">
${di(n)}
</div>`,f0=n=>`${n.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,w0=n=>n.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),gi=n=>`(function(exports){var module={};module.exports=exports;${n};return module.exports.__esModule?module.exports.default:module.exports;})({})`,_0=(n,s)=>{const t=ro(s),p=n.js[0]??"";return{...t,html:di(n.html[0]??""),js:p,css:n.css[0]??"",isLegal:n.isLegal,getScript:()=>{var e;return t.useBabel?((e=window.Babel.transform(p,{presets:["es2015"]}))==null?void 0:e.code)??"":p}}},v0=/<template>([\s\S]+)<\/template>/u,E0=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,T0=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,x0=(n,s)=>{const t=ro(s),p=n.html[0]??"",e=v0.exec(p),o=E0.exec(p),c=T0.exec(p),u=(e==null?void 0:e[1].replace(/^\n|\n$/g,""))??"",[i="",r=""]=o?[o[4].replace(/^\n|\n$/g,""),o[3]]:[],[k="",d=""]=c?[c[4].replace(/^\n|\n$/g,""),c[3]]:[],m=r===""&&(d===""||d==="css");return{...t,html:mi(u),js:w0(i),css:k,isLegal:m,jsLib:[t.vue,...t.jsLib],getScript:()=>{var y,w;const g=s.useBabel?((w=(y=window.Babel)==null?void 0:y.transform(i,{presets:["es2015"]}))==null?void 0:w.code)??"":i.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${gi(g)};appOptions.template=\`${u.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},A0=(n,s)=>{var e;const t=ro(s),p=n.js[0]??"";return{...t,html:mi(""),js:f0(p),css:n.css[0]??((e=n.js[0])==null?void 0:e.replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim())??"",isLegal:n.isLegal,jsLib:[t.react,t.reactDOM,...t.jsLib],jsx:!0,getScript:()=>{var c,u;const o=((u=(c=window.Babel)==null?void 0:c.transform(p,{presets:["es2015","react"]}))==null?void 0:u.code)??"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${gi(o)}))`}}},Da={},S0=n=>Promise.all([za(Da,n.babel),za(Da,n.react),za(Da,n.reactDOM)]),P0=n=>{const s=[za(Da,n.vue)];return n.useBabel&&s.push(za(Da,n.babel)),Promise.all(s)},I0=n=>n.useBabel?za(Da,n.babel):Promise.resolve();var z0=M({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:{type:String,default:""},config:{type:String,default:""},code:{type:String,required:!0}},slots:Object,setup(n,{slots:s}){const[t,p]=ht(!1),e=Cn(),o=Cn(),c=J("0"),u=J(!1),i=E(()=>JSON.parse(n.config?Cc(n.config):"{}")),r=E(()=>{const y=JSON.parse(Cc(n.code));return b0(y)}),k=E(()=>n.type==="react"?A0(r.value,i.value):n.type==="vue"?x0(r.value,i.value):_0(r.value,i.value)),d=E(()=>k.value.isLegal),m=(y=!1)=>{const w=e.value.attachShadow({mode:"open"}),T=document.createElement("div");T.classList.add("code-demo-app"),w.appendChild(T),d.value?(y&&(T.innerHTML=k.value.html),g0(w,k.value),h0(n.id,w,k.value),c.value="0"):c.value="auto",u.value=!0},g=()=>{switch(n.type){case"react":return S0(k.value).then(()=>m());case"vue":return P0(k.value).then(()=>m());default:return I0(k.value).then(()=>m(!0))}};return qn("beforeprint",()=>{p(!0)}),fn(()=>{setTimeout(()=>{g()},800)}),()=>{var y;return l("div",{class:"vp-code-demo",id:n.id},[l("div",{class:"vp-code-demo-header"},[k.value.isLegal?l("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-code-demo-toggle-button",t.value?"down":"end"],onClick:()=>{c.value=t.value?"0":`${o.value.clientHeight+13.8}px`,p()}}):null,n.title?l("span",{class:"vp-code-demo-title"},decodeURIComponent(n.title)):null,k.value.isLegal&&k.value.jsfiddle!==!1?l("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[l("input",{type:"hidden",name:"html",value:k.value.html}),l("input",{type:"hidden",name:"js",value:k.value.js}),l("input",{type:"hidden",name:"css",value:k.value.css}),l("input",{type:"hidden",name:"wrap",value:"1"}),l("input",{type:"hidden",name:"panel_js",value:"3"}),l("input",{type:"hidden",name:"resources",value:[...k.value.cssLib,...k.value.jsLib].join(",")}),l("button",{type:"submit",class:"jsfiddle-button",innerHTML:k0,"aria-label":"JSFiddle","data-balloon-pos":"up"})]):null,!k.value.isLegal||k.value.codepen!==!1?l("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[l("input",{type:"hidden",name:"data",value:JSON.stringify({html:k.value.html,js:k.value.js,css:k.value.css,js_external:k.value.jsLib.join(";"),css_external:k.value.cssLib.join(";"),layout:k.value.codepenLayout,html_pre_processor:r.value?r.value.html[1]:"none",js_pre_processor:r.value?r.value.js[1]:k.value.jsx?"babel":"none",css_pre_processor:r.value?r.value.css[1]:"none",editors:k.value.codepenEditors})}),l("button",{type:"submit",innerHTML:r0,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"up"})]):null]),u.value?null:l(si,{class:"vp-code-demo-loading"}),l("div",{ref:e,class:"vp-code-demo-display",style:{display:d.value&&u.value?"block":"none"}}),l("div",{class:"vp-code-demo-code-wrapper",style:{height:c.value}},l("div",{ref:o,class:"vp-code-demo-codes"},(y=s.default)==null?void 0:y.call(s)))])}}}),D0=M({name:"MdDemo",props:{id:{type:String,required:!0},title:{type:String,default:""}},slots:Object,setup(n,{slots:s}){const[t,p]=ht(!1),e=Cn(),o=J("0");return qn("beforeprint",()=>{p(!0)}),()=>{var c,u;return l("div",{class:"vp-md-demo",id:n.id},[l("div",{class:"vp-md-demo-header"},[l("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-md-demo-toggle-button",t.value?"down":"end"],onClick:()=>{o.value=t.value?"0":`${e.value.clientHeight+13.8}px`,p()}}),n.title?decodeURIComponent(n.title):null]),l("div",{class:"vp-md-demo-display"},(c=s.default)==null?void 0:c.call(s)),l("div",{class:"vp-md-demo-code-wrapper",style:{height:o.value}},l("div",{ref:e,class:"vp-md-demo-codes"},(u=s.code)==null?void 0:u.call(s)))])}}});const C0=()=>{qn("beforeprint",()=>{document.querySelectorAll("details").forEach(n=>{n.open=!0})})},ne=Ha("VUEPRESS_TAB_STORE",{});var L0=M({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(n,{slots:s}){const t=J(n.active),p=Cn([]),e=()=>{n.tabId&&(ne.value[n.tabId]=n.data[t.value].id)},o=(r=t.value)=>{t.value=r<p.value.length-1?r+1:0,p.value[t.value].focus()},c=(r=t.value)=>{t.value=r>0?r-1:p.value.length-1,p.value[t.value].focus()},u=(r,k)=>{r.key===" "||r.key==="Enter"?(r.preventDefault(),t.value=k):r.key==="ArrowRight"?(r.preventDefault(),o()):r.key==="ArrowLeft"&&(r.preventDefault(),c()),e()},i=()=>{if(n.tabId){const r=n.data.findIndex(({id:k})=>ne.value[n.tabId]===k);if(r!==-1)return r}return n.active};return fn(()=>{t.value=i(),kn(()=>ne.value[n.tabId],(r,k)=>{if(n.tabId&&r!==k){const d=n.data.findIndex(({id:m})=>m===r);d!==-1&&(t.value=d)}})}),()=>n.data.length?l("div",{class:"vp-tabs"},[l("div",{class:"vp-tabs-nav",role:"tablist"},n.data.map(({id:r},k)=>{const d=k===t.value;return l("button",{type:"button",ref:m=>{m&&(p.value[k]=m)},class:["vp-tab-nav",{active:d}],role:"tab","aria-controls":`tab-${n.id}-${k}`,"aria-selected":d,onClick:()=>{t.value=k,e()},onKeydown:m=>u(m,k)},s[`title${k}`]({value:r,isActive:d}))})),n.data.map(({id:r},k)=>{const d=k===t.value;return l("div",{class:["vp-tab",{active:d}],id:`tab-${n.id}-${k}`,role:"tabpanel","aria-expanded":d},[l("div",{class:"vp-tab-title"},s[`title${k}`]({value:r,isActive:d})),s[`tab${k}`]({value:r,isActive:d})])})]):null}});const R0=ws({enhance:({app:n})=>{n.component("CodeTabs",t0),is("CodeGroup",n)||n.component("CodeGroup",p0),is("CodeGroupItem",n)||n.component("CodeGroupItem",ni),n.component("CodeDemo",z0),n.component("MdDemo",D0),n.component("Tabs",L0)},setup:()=>{C0()}}),O0=J({}),hi=Symbol(""),q0=()=>An(hi),j0=n=>{n.provide(hi,O0)},N0='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',V0=n=>Pn(n)?Array.from(document.querySelectorAll(n)):n.map(s=>Array.from(document.querySelectorAll(s))).flat(),yi=n=>new Promise((s,t)=>{n.complete?s({type:"image",element:n,src:n.src,width:n.naturalWidth,height:n.naturalHeight,alt:n.alt,msrc:n.src}):(n.onload=()=>s(yi(n)),n.onerror=p=>t(p))}),M0=n=>{const{isSupported:s,toggle:t}=lo();n.on("uiRegister",()=>{s.value&&n.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{t()}}),n.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(p,e)=>{p.setAttribute("download",""),p.setAttribute("target","_blank"),p.setAttribute("rel","noopener"),e.on("change",()=>{p.setAttribute("href",e.currSlide.data.src)})}}),n.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:(p,e)=>{const o=[];let c=-1;for(let u=0;u<e.getNumItems();u++){const i=document.createElement("div");i.className="photo-swipe-bullet",i.onclick=r=>{e.goTo(o.indexOf(r.target))},o.push(i),p.appendChild(i)}e.on("change",()=>{c>=0&&o[c].classList.remove("active"),o[e.currIndex].classList.add("active"),c=e.currIndex})}})})},B0=(n,s,t=!0)=>a(()=>import("./photoswipe.esm-SzV8tJDW.js"),[]).then(({default:p})=>{let e=null;const o=n.map(c=>({html:N0,element:c,msrc:c.src}));return n.forEach((c,u)=>{const i=()=>{e==null||e.destroy(),e=new p({preloaderDelay:0,showHideAnimationType:"zoom",...s,dataSource:o,index:u,...t?{closeOnVerticalDrag:!0,wheelToZoom:!1}:{}}),M0(e),e.addFilter("thumbEl",()=>c),e.addFilter("placeholderSrc",()=>c.src),e.init()};c.getAttribute("photo-swipe")||(c.style.cursor="zoom-in",c.addEventListener("click",()=>{i()}),c.addEventListener("keypress",({key:r})=>{r==="Enter"&&i()}),c.setAttribute("photo-swipe","")),yi(c).then(r=>{o.splice(u,1,r),e==null||e.refreshSlideContent(u)})}),t?qn("wheel",()=>{e==null||e.close()}):()=>{}}),F0=({selector:n,locales:s,delay:t=500,scrollToClose:p=!0})=>{const e=q0(),o=zt(s),c=wn(),u=gn();let i=null;const r=()=>{const{photoSwipe:k}=u.value;k!==!1&&Os().then(()=>qu(t)).then(async()=>{const d=Pn(k)?k:n;i=await B0(V0(d),{...e.value,...o.value},p)})};fn(()=>{r(),kn(()=>[c.value.path,e.value],()=>{i==null||i(),r()})}),Ma(()=>{i==null||i()})};var H0={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const W0=".theme-hope-content :not(a) > img:not([no-view])",G0=H0,U0=800,Q0=!0,$0=ws({enhance:({app:n})=>{j0(n)},setup:()=>{F0({selector:W0,delay:U0,locales:G0,scrollToClose:Q0})}}),bi=()=>{const n=wn();return E(()=>n.value.readingTime??null)},fi=(n,s)=>{const{minutes:t,words:p}=n,{less1Minute:e,word:o,time:c}=s;return{time:t<1?e:c.replace("$time",Math.round(t).toString()),words:o.replace("$word",p.toString())}};var Wc={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const Gc={words:"",time:""},ve=typeof Wc>"u"?null:Wc,wi=()=>ve?zt(ve):E(()=>null),K0=()=>{if(typeof ve>"u")return E(()=>Gc);const n=bi(),s=wi();return E(()=>n.value&&s.value?fi(n.value,s.value):Gc)},Vs=()=>Yu(),on=()=>$h(),lp=()=>null,J0="719px",X0="1440px",Y0="false",_i={mobileBreakPoint:J0,pcBreakPoint:X0,enableThemeColor:Y0},ko={"/interview/":["jianli","personnelProblem","anti-fraud","interviewHandbook","interviewHandbook2","design_mode","dataBase","small_service","dotnet","elasticsearch","mongodb","mysql","nginx","rabbitmq","redis","csharp","wpfInterview","reserverOperator"],"/temp/":["readme","movie","script","imageOperator","upperComputer","generateCSharpClass","pipelineMethodCompletesComplexProcess"]},vi=n=>{const{icon:s="",color:t,size:p}=n,e=t||p?{}:null;return t&&(e.color=t),p&&(e.height=Number.isNaN(Number(p))?p:`${p}px`),pa(s)?l("img",{class:"icon",src:s,alt:"","no-view":"",style:e}):Lt(s)?l("img",{class:"icon",src:yn(s),alt:"","aria-hidden":"","no-view":"",style:e}):l(ys("FontIcon"),n)};vi.displayName="HopeIcon";var Fn=vi;const Z0="http://.",fa=()=>{const n=ba(),s=js();return t=>{if(t)if(Lt(t))s.path!==t&&n.push(t);else if(Tp(t))window&&window.open(t);else{const p=s.path.slice(0,s.path.lastIndexOf("/"));n.push(new URL(`${p}/${encodeURI(t)}`,Z0).pathname)}}},Ei=()=>{const n=on(),s=gn();return E(()=>{const{author:t}=s.value;return t?bt(t):t===!1?[]:bt(n.value.author,!1)})},n2=()=>{const n=gn(),s=An(Symbol.for("categoryMap"));return E(()=>ri(n.value.category??n.value.categories).map(t=>{var p;return{name:t,path:((p=s==null?void 0:s.value.map[t])==null?void 0:p.path)??""}}))},s2=()=>{const n=gn(),s=An(Symbol.for("tagMap"));return E(()=>ki(n.value.tag??n.value.tags).map(t=>{var p;return{name:t,path:((p=s==null?void 0:s.value.map[t])==null?void 0:p.path)??""}}))},a2=()=>{const n=gn(),s=wn();return E(()=>{const t=oo(n.value.date);if(t)return t;const{createdTime:p}=s.value.git??{};return p?new Date(p):null})},t2=()=>{const n=on(),s=wn(),t=gn(),p=Ei(),e=n2(),o=s2(),c=a2(),u=bi(),i=K0(),r=E(()=>({author:p.value,category:e.value,date:c.value,localizedDate:s.value.localizedDate,tag:o.value,isOriginal:t.value.isOriginal??!1,readingTime:u.value,readingTimeLocale:i.value,pageview:t.value.pageview??!0})),k=E(()=>t.value.pageInfo??n.value.pageInfo??null);return{info:r,items:k}},as=()=>{const n=Vs();return E(()=>!!n.value.pure)},{mobileBreakPoint:p2,pcBreakPoint:e2}=_i,Uc=n=>n.endsWith("px")?Number(n.slice(0,-2)):null,qt=()=>{const n=J(!1),s=J(!1),t=()=>{n.value=window.innerWidth<=(Uc(p2)??719),s.value=window.innerWidth>=(Uc(e2)??1440)};return qn("resize",t,!1),qn("orientationchange",t,!1),fn(()=>{t()}),{isMobile:n,isPC:s}},Ti=Symbol(""),jt=()=>{const n=An(Ti);if(!n)throw new Error("useDarkmode() is called without provider.");return n},o2=n=>{const s=Vs(),t=gh(),p=E(()=>s.value.darkmode??"switch"),e=Ha("vuepress-theme-hope-scheme","auto"),o=E(()=>{const u=p.value;return u==="disable"?!1:u==="enable"?!0:u==="auto"?t.value:u==="toggle"?e.value==="dark":e.value==="dark"||e.value==="auto"&&t.value}),c=E(()=>{const u=p.value;return u==="switch"||u==="toggle"});n.provide(Ti,{canToggle:c,config:p,isDarkmode:o,status:e}),Object.defineProperties(n.config.globalProperties,{$isDarkmode:{get:()=>o.value}})},c2=()=>{const{config:n,isDarkmode:s,status:t}=jt();Cl(()=>{n.value==="disable"?t.value="light":n.value==="enable"?t.value="dark":n.value==="toggle"&&t.value==="auto"&&(t.value="light")}),fn(()=>{kn(s,p=>document.documentElement.setAttribute("data-theme",p?"dark":"light"),{immediate:!0})})},ft=(n,s,t=!1)=>"activeMatch"in s?new RegExp(s.activeMatch,"u").test(n.path):li(n,s.link)?!0:"children"in s&&!t?s.children.some(p=>ft(n,p)):!1,xi=(n,s)=>s.type==="group"?!!(s.prefix&&li(n,s.prefix))||s.children.some(t=>t.type==="group"?xi(n,t):t.type==="page"&&ft(n,t,!0)):!1,Ee=n=>!Ep(n)&&!Tp(n);var Qn=(n=>(n.title="t",n.shortTitle="s",n.icon="i",n.index="I",n.order="O",n.breadcrumbExclude="b",n))(Qn||{}),Wn=(n=>(n.type="y",n.author="a",n.date="d",n.localizedDate="l",n.category="c",n.tag="g",n.isEncrypted="n",n.isOriginal="o",n.readingTime="r",n.excerpt="e",n.sticky="u",n.cover="v",n))(Wn||{}),Ai=(n=>(n.article="a",n.home="h",n.slide="s",n.page="p",n))(Ai||{});const mo=(n,s=!1,t)=>{const{meta:p,path:e,notFound:o}=Qg(n,t);return o?{text:e,link:e}:{text:!s&&p[Qn.shortTitle]?p[Qn.shortTitle]:p[Qn.title]||e,link:e,...p[Qn.icon]?{icon:p[Qn.icon]}:{}}},ra=(n="",s="")=>Lt(s)||Tp(s)?s:`${ku(n)}${s}`,Te=({config:n,prefix:s=""})=>{const t=(p,e=s)=>{const o=Pn(p)?mo(ra(e,p)):p.link?{...p,...Ee(p.link)?{link:As(ra(e,p.link)).path}:{}}:p;if("children"in o){const c=ra(e,o.prefix),u=o.children==="structure"?ko[c]:o.children;return{type:"group",...o,prefix:c,children:u.map(i=>t(i,c))}}return{type:"page",...o}};return n.map(p=>t(p))},l2=({config:n,page:s,headerDepth:t})=>{const p=ks(n).sort((e,o)=>o.length-e.length);for(const e of p)if(qa(decodeURI(s.path),e)){const o=n[e];return o?Te({config:o==="structure"?ko[e]:o,page:s,headerDepth:t,prefix:e}):[]}return console.warn(`${s.path} is missing sidebar config.`),[]},u2=({config:n,routeLocale:s,page:t,headerDepth:p})=>n==="structure"?Te({config:ko[s],page:t,headerDepth:p,prefix:s}):_e(n)?Te({config:n,page:t,headerDepth:p}):Ba(n)?l2({config:n,page:t,headerDepth:p}):[],Si=Symbol(""),i2=()=>{const n=gn(),s=on(),t=wn(),p=Ns(),e=E(()=>n.value.home?!1:n.value.sidebar??s.value.sidebar??"structure"),o=E(()=>n.value.headerDepth??s.value.headerDepth??2),c=ju(()=>[e.value,o.value,t.value.path,null],()=>u2({config:e.value,routeLocale:p.value,page:t.value,headerDepth:o.value}));bs(Si,c)},go=()=>{const n=An(Si);if(!n)throw new Error("useSidebarItems() is called without provider.");return n};var r2=M({name:"PageFooter",setup(){const n=Vs(),s=on(),t=gn(),p=Ei(),e=E(()=>{const{copyright:r,footer:k}=t.value;return k!==!1&&!!(r||k||s.value.displayFooter)}),o=E(()=>{const{footer:r}=t.value;return r??s.value.footer}),c=E(()=>p.value.map(({name:r})=>r).join(", ")),u=r=>`Copyright © ${new Date().getFullYear()} ${c.value} ${r?`${r} Licensed`:""}`,i=E(()=>{const{copyright:r,license:k=""}=t.value,{license:d}=n.value,{copyright:m}=s.value;return r??(k?u(k):Pn(m)?m:c.value||d?u(d):!1)});return()=>e.value?l("footer",{class:"vp-footer-wrapper"},[o.value?l("div",{class:"vp-footer",innerHTML:o.value}):null,i.value?l("div",{class:"vp-copyright",innerHTML:i.value}):null]):null}}),$n=M({name:"AutoLink",props:{config:{type:Object,required:!0},exact:Boolean,noExternalLinkIcon:Boolean},emits:["focusout"],slots:Object,setup(n,{emit:s,slots:t}){const p=js(),e=xu(),o=Va(n,"config"),c=E(()=>pa(o.value.link)),u=E(()=>!c.value&&Tp(o.value.link)),i=E(()=>o.value.target??(c.value?"_blank":void 0)),r=E(()=>i.value==="_blank"),k=E(()=>!c.value&&!u.value&&!r.value),d=E(()=>o.value.rel??(r.value?"noopener noreferrer":"")),m=E(()=>o.value.ariaLabel??o.value.text),g=E(()=>{if(n.exact)return!1;const w=ks(e.value.locales);return w.length?w.every(T=>T!==o.value.link):o.value.link!=="/"}),y=E(()=>k.value?o.value.activeMatch?new RegExp(o.value.activeMatch,"u").test(p.path):g.value?qa(p.path,o.value.link):p.path===o.value.link:!1);return()=>{const{before:w,after:T,default:_}=t,{text:x,icon:f,link:v}=o.value;return k.value?l(In,{class:"vp-link",to:v,active:y.value,activeClass:"active","aria-label":m.value,onFocusout:()=>s("focusout")},()=>_?_():[w?w():l(Fn,{icon:f}),x,T==null?void 0:T()]):l("a",{class:"vp-link",href:v,rel:d.value,target:i.value,"aria-label":m.value,onFocusout:()=>s("focusout")},_?_():[w?w():l(Fn,{icon:f}),x,n.noExternalLinkIcon?null:l(Ju),T==null?void 0:T()])}}}),k2=M({name:"NavbarDropdown",props:{config:{type:Object,required:!0}},slots:Object,setup(n,{slots:s}){const t=wn(),p=Va(n,"config"),e=E(()=>p.value.ariaLabel??p.value.text),o=J(!1);kn(()=>t.value.path,()=>{o.value=!1});const c=u=>{u.detail===0&&(o.value=!o.value)};return()=>{var u;return l("div",{class:["vp-dropdown-wrapper",{open:o.value}]},[l("button",{type:"button",class:"vp-dropdown-title","aria-label":e.value,onClick:c},[((u=s.title)==null?void 0:u.call(s))||[l(Fn,{icon:p.value.icon}),n.config.text],l("span",{class:"arrow"}),l("ul",{class:"vp-dropdown"},p.value.children.map((i,r)=>{const k=r===p.value.children.length-1;return l("li",{class:"vp-dropdown-item"},"children"in i?[l("h4",{class:"vp-dropdown-subtitle"},i.link?l($n,{config:i,onFocusout:()=>{i.children.length===0&&k&&(o.value=!1)}}):i.text),l("ul",{class:"vp-dropdown-subitems"},i.children.map((d,m)=>l("li",{class:"vp-dropdown-subitem"},l($n,{config:d,onFocusout:()=>{m===i.children.length-1&&k&&(o.value=!1)}}))))]:l($n,{config:i,onFocusout:()=>{k&&(o.value=!1)}}))}))])])}}});const Pi=(n,s="")=>Pn(n)?mo(ra(s,n)):"children"in n?{...n,...n.link&&Ee(n.link)?{link:As(ra(s,n.link)).path}:{},children:n.children.map(t=>Pi(t,ra(s,n.prefix)))}:{...n,link:Ee(n.link)?As(ra(s,n.link)).path:n.link},Ii=()=>{const n=on(),s=()=>(n.value.navbar||[]).map(t=>Pi(t));return ju(()=>n.value.navbar,()=>s())},d2=()=>{const n=on(),s=E(()=>n.value.repo),t=E(()=>s.value?e0(s.value):null),p=E(()=>s.value?io(s.value):null),e=E(()=>t.value?n.value.repoLabel??p.value??"Source":null);return E(()=>!t.value||!e.value||n.value.repoDisplay===!1?null:{type:p.value??"Source",label:e.value,link:t.value})};var m2=M({name:"NavScreenMenu",props:{config:{type:Object,required:!0}},setup(n){const s=wn(),t=Va(n,"config"),p=E(()=>t.value.ariaLabel??t.value.text),e=J(!1);kn(()=>s.value.path,()=>{e.value=!1});const o=(c,u)=>u[u.length-1]===c;return()=>[l("button",{type:"button",class:["vp-nav-screen-menu-title",{active:e.value}],"aria-label":p.value,onClick:()=>{e.value=!e.value}},[l("span",{class:"text"},[l(Fn,{icon:t.value.icon}),n.config.text]),l("span",{class:["arrow",e.value?"down":"end"]})]),l("ul",{class:["vp-nav-screen-menu",{hide:!e.value}]},t.value.children.map(c=>l("li",{class:"vp-nav-screen-menu-item"},"children"in c?[l("h4",{class:"vp-nav-screen-menu-subtitle"},c.link?l($n,{config:c,onFocusout:()=>{o(c,t.value.children)&&c.children.length===0&&(e.value=!1)}}):c.text),l("ul",{class:"vp-nav-screen-menu-subitems"},c.children.map(u=>l("li",{class:"vp-nav-screen-menu-subitem"},l($n,{config:u,onFocusout:()=>{o(u,c.children)&&o(c,t.value.children)&&(e.value=!1)}}))))]:l($n,{config:c,onFocusout:()=>{o(c,t.value.children)&&(e.value=!1)}}))))]}}),g2=M({name:"NavScreenLinks",setup(){const n=Ii();return()=>n.value.length?l("nav",{class:"nav-screen-links"},n.value.map(s=>l("div",{class:"navbar-links-item"},"children"in s?l(m2,{config:s}):l($n,{config:s})))):null}});const zi=()=>l(dn,{name:"dark"},()=>l("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));zi.displayName="DarkIcon";const Di=()=>l(dn,{name:"light"},()=>l("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));Di.displayName="LightIcon";const Ci=()=>l(dn,{name:"auto"},()=>l("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));Ci.displayName="AutoIcon";const Li=()=>l(dn,{name:"enter-fullscreen"},()=>l("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));Li.displayName="EnterFullScreenIcon";const Ri=()=>l(dn,{name:"cancel-fullscreen"},()=>l("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));Ri.displayName="CancelFullScreenIcon";const Oi=()=>l(dn,{name:"outlook"},()=>[l("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);Oi.displayName="OutlookIcon";var qi=M({name:"ColorModeSwitch",setup(){const{config:n,isDarkmode:s,status:t}=jt(),p=as(),e=()=>{n.value==="switch"?t.value={light:"dark",dark:"auto",auto:"light"}[t.value]:t.value=t.value==="light"?"dark":"light"},o=async c=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!p.value)||!c){e();return}const u=c.clientX,i=c.clientY,r=Math.hypot(Math.max(u,innerWidth-u),Math.max(i,innerHeight-i)),k=s.value;await document.startViewTransition(async()=>{e(),await Os()}).ready,s.value!==k&&document.documentElement.animate({clipPath:s.value?[`circle(${r}px at ${u}px ${i}px)`,`circle(0px at ${u}px ${i}px)`]:[`circle(0px at ${u}px ${i}px)`,`circle(${r}px at ${u}px ${i}px)`]},{duration:400,pseudoElement:s.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>l("button",{type:"button",class:"vp-color-mode-switch",id:"color-mode-switch",onClick:o},[l(Ci,{style:{display:t.value==="auto"?"block":"none"}}),l(zi,{style:{display:t.value==="dark"?"block":"none"}}),l(Di,{style:{display:t.value==="light"?"block":"none"}})])}}),h2=M({name:"ColorMode",setup(){const n=on(),{canToggle:s}=jt(),t=E(()=>n.value.outlookLocales.darkmode);return()=>s.value?l("div",{class:"vp-color-mode"},[l("label",{class:"vp-color-mode-title",for:"color-mode-switch"},t.value),l(qi)]):null}});const se=_i.enableThemeColor==="true";var ji=M({name:"ToggleFullScreenButton",setup(){const n=on(),{isSupported:s,isFullscreen:t,toggle:p}=lo(),e=E(()=>n.value.outlookLocales.fullscreen);return()=>s?l("div",{class:"full-screen-wrapper"},[l("label",{class:"full-screen-title",for:"full-screen-switch"},e.value),l("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:t.value,onClick:()=>p()},t.value?l(Ri):l(Li))]):null}}),Ni=M({name:"OutlookSettings",setup(){const n=Vs(),s=as(),t=E(()=>!s.value&&n.value.fullscreen);return()=>l(Sp,()=>[null,l(h2),t.value?l(ji):null])}}),y2=M({name:"NavScreen",props:{show:Boolean},emits:["close"],slots:Object,setup(n,{emit:s,slots:t}){const p=wn(),{isMobile:e}=qt(),o=Cn(),c=Wu(o);return fn(()=>{o.value=document.body,kn(e,u=>{!u&&n.show&&(c.value=!1,s("close"))}),kn(()=>p.value.path,()=>{c.value=!1,s("close")})}),Ma(()=>{c.value=!1}),()=>l(sa,{name:"fade",onEnter:()=>{c.value=!0},onAfterLeave:()=>{c.value=!1}},()=>{var u,i;return n.show?l("div",{id:"nav-screen",class:"vp-nav-screen"},l("div",{class:"vp-nav-screen-container"},[(u=t.before)==null?void 0:u.call(t),l(g2),l("div",{class:"vp-outlook-wrapper"},l(Ni)),(i=t.after)==null?void 0:i.call(t)])):null})}}),b2=M({name:"NavbarBrand",setup(){const n=Ns(),s=It(),t=on(),p=E(()=>t.value.home||n.value),e=E(()=>s.value.title),o=E(()=>t.value.navbarTitle??e.value),c=E(()=>t.value.logo?yn(t.value.logo):null),u=E(()=>t.value.logoDark?yn(t.value.logoDark):null);return()=>l(In,{to:p.value,class:"vp-brand"},()=>[c.value?l("img",{class:["vp-nav-logo",{light:!!u.value}],src:c.value,alt:""}):null,u.value?l("img",{class:["vp-nav-logo dark"],src:u.value,alt:""}):null,o.value?l("span",{class:["vp-site-name",{"hide-in-pad":c.value&&(t.value.hideSiteNameOnMobile??!0)}]},o.value):null])}}),f2=M({name:"NavbarLinks",setup(){const n=Ii();return()=>n.value.length?l("nav",{class:"vp-nav-links"},n.value.map(s=>l("div",{class:"vp-nav-item hide-in-mobile"},"children"in s?l(k2,{config:s}):l($n,{config:s})))):null}}),w2=M({name:"RepoLink",setup(){const n=d2();return()=>n.value?l("div",{class:"vp-nav-item vp-action"},l("a",{class:"vp-action-link",href:n.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":n.value.label},l(o0,{type:n.value.type,style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const Vi=({active:n=!1},{emit:s})=>l("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":n}],"aria-label":"Toggle Navbar","aria-expanded":n,"aria-controls":"nav-screen",onClick:()=>s("toggle")},l("span",[l("span",{class:"vp-top"}),l("span",{class:"vp-middle"}),l("span",{class:"vp-bottom"})]));Vi.displayName="ToggleNavbarButton";const xe=(n,{emit:s})=>l("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>s("toggle")},l("span",{class:"icon"}));xe.displayName="ToggleSidebarButton",xe.emits=["toggle"];var _2=M({name:"OutlookButton",setup(){const{isSupported:n}=lo(),s=Vs(),t=as(),p=wn(),{canToggle:e}=jt(),o=J(!1),c=E(()=>!t.value&&s.value.fullscreen&&n);return kn(()=>p.value.path,()=>{o.value=!1}),()=>e.value||c.value||se?l("div",{class:"vp-nav-item hide-in-mobile"},e.value&&!c.value&&!se?l(qi):c.value&&!e.value&&!se?l(ji):l("button",{type:"button",class:["vp-outlook-button",{open:o.value}],tabindex:"-1","aria-hidden":!0},[l(Oi),l("div",{class:"vp-outlook-dropdown"},l(Ni))])):null}}),v2=M({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(n,{emit:s,slots:t}){const p=on(),{isMobile:e}=qt(),o=J(!1),c=E(()=>{const{navbarAutoHide:k="mobile"}=p.value;return k!=="none"&&(k==="always"||e.value)}),u=E(()=>p.value.navbarLayout??{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),i={Brand:b2,Language:lp,Links:f2,Repo:w2,Outlook:_2,Search:is("Docsearch")?ys("Docsearch"):is("SearchBox")?ys("SearchBox"):lp},r=k=>i[k]??(is(k)?ys(k):lp);return()=>{var k,d,m,g,y,w,T,_,x;return[l("header",{key:"navbar",id:"navbar",class:["vp-navbar",{"auto-hide":c.value}]},[l("div",{class:"vp-navbar-start"},[l(xe,{onToggle:()=>{o.value&&(o.value=!1),s("toggleSidebar")}}),(k=t.startBefore)==null?void 0:k.call(t),(d=u.value.start)==null?void 0:d.map(f=>l(r(f))),(m=t.startAfter)==null?void 0:m.call(t)]),l("div",{class:"vp-navbar-center"},[(g=t.centerBefore)==null?void 0:g.call(t),(y=u.value.center)==null?void 0:y.map(f=>l(r(f))),(w=t.centerAfter)==null?void 0:w.call(t)]),l("div",{class:"vp-navbar-end"},[(T=t.endBefore)==null?void 0:T.call(t),(_=u.value.end)==null?void 0:_.map(f=>l(r(f))),(x=t.endAfter)==null?void 0:x.call(t),l(Vi,{active:o.value,onToggle:()=>{o.value=!o.value}})])]),l(y2,{show:o.value,onClose:()=>{o.value=!1}},{before:()=>{var f;return(f=t.screenTop)==null?void 0:f.call(t)},after:()=>{var f;return(f=t.screenBottom)==null?void 0:f.call(t)}})]}}}),E2=M({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(n){const s=js();return()=>Pn(n.config.link)?l($n,{class:["vp-sidebar-link","vp-sidebar-page",{active:ft(s,n.config,!0)}],exact:!0,config:n.config}):l("p",n,[l(Fn,{icon:n.config.icon}),n.config.text])}}),T2=M({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(n,{emit:s}){const t=js(),p=E(()=>ft(t,n.config)),e=E(()=>ft(t,n.config,!0));return()=>{const{collapsible:o,children:c=[],icon:u,prefix:i,link:r,text:k}=n.config;return l("section",{class:"vp-sidebar-group"},[l(o?"button":"p",{class:["vp-sidebar-header",{clickable:o||r,exact:e.value,active:p.value}],...o?{type:"button",onClick:()=>s("toggle"),onKeydown:d=>{d.key==="Enter"&&s("toggle")}}:{}},[l(Fn,{icon:u}),r?l($n,{class:"vp-sidebar-title",config:{text:k,link:r},noExternalLinkIcon:!0}):l("span",{class:"vp-sidebar-title"},k),o?l("span",{class:["vp-arrow",n.open?"down":"end"]}):null]),n.open||!o?l(Mi,{key:i,config:c}):null])}}}),Mi=M({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(n){const s=js(),t=J(-1),p=e=>{t.value=e===t.value?-1:e};return kn(()=>s.path,()=>{const e=n.config.findIndex(o=>xi(s,o));t.value=e},{immediate:!0,flush:"post"}),()=>l("ul",{class:"vp-sidebar-links"},n.config.map((e,o)=>l("li",e.type==="group"?l(T2,{config:e,open:o===t.value,onToggle:()=>p(o)}):l(E2,{config:e}))))}}),x2=M({name:"SideBar",slots:Object,setup(n,{slots:s}){const t=js(),p=go(),e=Cn();return fn(()=>{kn(()=>t.hash,o=>{const c=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${t.path}${o}"]`);if(!c)return;const{top:u,height:i}=e.value.getBoundingClientRect(),{top:r,height:k}=c.getBoundingClientRect();r<u?c.scrollIntoView(!0):r+k>u+i&&c.scrollIntoView(!1)},{immediate:!0})}),()=>{var o,c,u;return l("aside",{ref:e,key:"sidebar",id:"sidebar",class:"vp-sidebar"},[(o=s.top)==null?void 0:o.call(s),((c=s.default)==null?void 0:c.call(s))??l(Mi,{config:p.value}),(u=s.bottom)==null?void 0:u.call(s)])}}}),ho=M({name:"CommonWrapper",props:{containerClass:{type:String,default:""},noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(n,{slots:s}){const t=ba(),p=gn(),e=on(),{isMobile:o,isPC:c}=qt(),[u,i]=ht(!1),[r,k]=ht(!1),d=go(),m=J(!1),g=E(()=>n.noNavbar||p.value.navbar===!1||e.value.navbar===!1?!1:!!(e.value.logo??e.value.repo??e.value.navbar)),y=E(()=>n.noSidebar?!1:p.value.sidebar!==!1&&d.value.length!==0&&!p.value.home),w=E(()=>!n.noToc&&!p.value.home&&(p.value.toc??e.value.toc??!0)),T={x:0,y:0},_=v=>{T.x=v.changedTouches[0].clientX,T.y=v.changedTouches[0].clientY},x=v=>{const q=v.changedTouches[0].clientX-T.x,C=v.changedTouches[0].clientY-T.y;Math.abs(q)>Math.abs(C)*1.5&&Math.abs(q)>40&&(q>0&&T.x<=80?i(!0):i(!1))};let f=0;return qn("scroll",th(()=>{const v=window.scrollY;v<=58||v<f?m.value=!1:f+200<v&&!u.value&&(m.value=!0),f=v},300,!0)),kn(o,v=>{v||i(!1)}),fn(()=>{const v=Wu(document.body);kn(u,C=>{v.value=C});const q=t.afterEach(()=>{i(!1)});Ma(()=>{v.value=!1,q()})}),()=>l(is("GlobalEncrypt")?ys("GlobalEncrypt"):ai,()=>l("div",{class:["theme-container",{"no-navbar":!g.value,"no-sidebar":!y.value&&!s.sidebar&&!s.sidebarTop&&!s.sidebarBottom,"has-toc":w.value,"hide-navbar":m.value,"sidebar-collapsed":!o.value&&!c.value&&r.value,"sidebar-open":o.value&&u.value},n.containerClass,p.value.containerClass??""],onTouchStart:_,onTouchEnd:x},[g.value?l(v2,{onToggleSidebar:()=>i()},{startBefore:()=>{var v;return(v=s.navbarStartBefore)==null?void 0:v.call(s)},startAfter:()=>{var v;return(v=s.navbarStartAfter)==null?void 0:v.call(s)},centerBefore:()=>{var v;return(v=s.navbarCenterBefore)==null?void 0:v.call(s)},centerAfter:()=>{var v;return(v=s.navbarCenterAfter)==null?void 0:v.call(s)},endBefore:()=>{var v;return(v=s.navbarEndBefore)==null?void 0:v.call(s)},endAfter:()=>{var v;return(v=s.navbarEndAfter)==null?void 0:v.call(s)},screenTop:()=>{var v;return(v=s.navScreenTop)==null?void 0:v.call(s)},screenBottom:()=>{var v;return(v=s.navScreenBottom)==null?void 0:v.call(s)}}):null,l(sa,{name:"fade"},()=>u.value?l("div",{class:"vp-sidebar-mask",onClick:()=>i(!1)}):null),l(sa,{name:"fade"},()=>o.value?null:l("div",{class:"toggle-sidebar-wrapper",onClick:()=>k()},l("span",{class:["arrow",r.value?"end":"start"]}))),l(x2,{},{...s.sidebar?{default:()=>s.sidebar()}:{},top:()=>{var v;return(v=s.sidebarTop)==null?void 0:v.call(s)},bottom:()=>{var v;return(v=s.sidebarBottom)==null?void 0:v.call(s)}}),s.default(),l(r2)]))}});const pn=M({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(n,{slots:s}){const t=e=>{e.style.transition=`transform ${n.duration}s ease-in-out ${n.delay}s, opacity ${n.duration}s ease-in-out ${n.delay}s`,e.style.transform="translateY(-20px)",e.style.opacity="0"},p=e=>{e.style.transform="translateY(0)",e.style.opacity="1"};return()=>{const e={name:"drop",appear:n.appear,onAppear:t,onAfterAppear:p,onEnter:t,onAfterEnter:p,onBeforeLeave:t},o=()=>s.default();return n.type==="group"?l($d,e,o):l(sa,e,o)}}}),ja=({custom:n})=>l(Su,{class:["theme-hope-content",{custom:n}]});ja.displayName="MarkdownContent",ja.props={custom:Boolean};const Bi=()=>l(dn,{name:"author"},()=>l("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));Bi.displayName="AuthorIcon";const Fi=()=>l(dn,{name:"calendar"},()=>l("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));Fi.displayName="CalendarIcon";const Hi=()=>l(dn,{name:"category"},()=>l("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));Hi.displayName="CategoryIcon";const Wi=()=>l(dn,{name:"print"},()=>l("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));Wi.displayName="PrintIcon";const Gi=()=>l(dn,{name:"tag"},()=>l("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));Gi.displayName="TagIcon";const Ui=()=>l(dn,{name:"timer"},()=>l("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));Ui.displayName="TimerIcon";const Qi=()=>l(dn,{name:"word"},()=>[l("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),l("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);Qi.displayName="WordIcon";const ea=()=>{const n=on();return E(()=>n.value.metaLocales)};var A2=M({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0}},setup(n){const s=ea(),t=as();return()=>n.author.length?l("span",{class:"page-author-info","aria-label":`${s.value.author}${t.value?"":"🖊"}`,...t.value?{}:{"data-balloon-pos":"up"}},[l(Bi),l("span",n.author.map(p=>p.url?l("a",{class:"page-author-item",href:p.url,target:"_blank",rel:"noopener noreferrer"},p.name):l("span",{class:"page-author-item"},p.name))),l("span",{property:"author",content:n.author.map(p=>p.name).join(", ")})]):null}}),S2=M({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0}},setup(n){const s=ea(),t=fa(),p=as();return()=>n.category.length?l("span",{class:"page-category-info","aria-label":`${s.value.category}${p.value?"":"🌈"}`,...p.value?{}:{"data-balloon-pos":"up"}},[l(Hi),n.category.map(({name:e,path:o})=>l("span",{class:["page-category-item",{[`category${Ip(e,9)}`]:!p.value,clickable:o}],role:o?"navigation":"",onClick:()=>{o&&t(o)}},e)),l("meta",{property:"articleSection",content:n.category.map(({name:e})=>e).join(",")})]):null}}),P2=M({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""}},setup(n){const s=Tu(),t=ea(),p=as();return()=>n.date?l("span",{class:"page-date-info","aria-label":`${t.value.date}${p.value?"":"📅"}`,...p.value?{}:{"data-balloon-pos":"up"}},[l(Fi),l("span",l(Sp,()=>n.localizedDate||n.date.toLocaleDateString(s.value))),l("meta",{property:"datePublished",content:n.date.toISOString()||""})]):null}}),I2=M({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(n){const s=ea();return()=>n.isOriginal?l("span",{class:"page-original-info"},s.value.origin):null}}),z2=M({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(n){const s=ea(),t=as(),p=E(()=>{if(!n.readingTime)return null;const{minutes:e}=n.readingTime;return e<1?"PT1M":`PT${Math.round(e)}M`});return()=>{var e,o;return(e=n.readingTimeLocale)!=null&&e.time?l("span",{class:"page-reading-time-info","aria-label":`${s.value.readingTime}${t.value?"":"⌛"}`,...t.value?{}:{"data-balloon-pos":"up"}},[l(Ui),l("span",(o=n.readingTimeLocale)==null?void 0:o.time),l("meta",{property:"timeRequired",content:p.value})]):null}}}),D2=M({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]}},setup(n){const s=ea(),t=fa(),p=as();return()=>n.tag.length?l("span",{class:"page-tag-info","aria-label":`${s.value.tag}${p.value?"":"🏷"}`,...p.value?{}:{"data-balloon-pos":"up"}},[l(Gi),n.tag.map(({name:e,path:o})=>l("span",{class:["page-tag-item",{[`tag${Ip(e,9)}`]:!p.value,clickable:o}],role:o?"navigation":"",onClick:()=>{o&&t(o)}},e)),l("meta",{property:"keywords",content:n.tag.map(({name:e})=>e).join(",")})]):null}}),C2=M({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(n){const s=ea(),t=as();return()=>{var p,e,o;return(p=n.readingTimeLocale)!=null&&p.words?l("span",{class:"page-word-info","aria-label":`${s.value.words}${t.value?"":"🔠"}`,...t.value?{}:{"data-balloon-pos":"up"}},[l(Qi),l("span",(e=n.readingTimeLocale)==null?void 0:e.words),l("meta",{property:"wordCount",content:(o=n.readingTime)==null?void 0:o.words})]):null}}}),$i=M({name:"PageInfo",components:{AuthorInfo:A2,CategoryInfo:S2,DateInfo:P2,OriginalInfo:I2,PageViewInfo:lp,ReadingTimeInfo:z2,TagInfo:D2,WordInfo:C2},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(n){const s=as();return()=>n.items?l("div",{class:"page-info"},n.items.map(t=>l(ys(`${t}Info`),{...n.info,pure:s.value}))):null}}),L2=M({name:"PrintButton",setup(){const n=Vs(),s=on();return()=>n.value.print===!1?null:l("button",{type:"button",class:"print-button",title:s.value.metaLocales.print,onClick:()=>{window.print()}},l(Wi))}}),Ki=M({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},slots:Object,setup(n,{slots:s}){const t=js(),p=wn(),e=ea(),[o,c]=ht(),u=Cn(),i=J("-1.7rem"),r=d=>{var m;(m=u.value)==null||m.scrollTo({top:d,behavior:"smooth"})},k=()=>{if(u.value){const d=document.querySelector(".vp-toc-item.active");d?i.value=`${d.getBoundingClientRect().top-u.value.getBoundingClientRect().top+u.value.scrollTop}px`:i.value="-1.7rem"}else i.value="-1.7rem"};return fn(()=>{kn(()=>t.hash,d=>{if(u.value){const m=document.querySelector(`#toc a.vp-toc-link[href$="${d}"]`);if(!m)return;const{top:g,height:y}=u.value.getBoundingClientRect(),{top:w,height:T}=m.getBoundingClientRect();w<g?r(u.value.scrollTop+w-g):w+T>g+y&&r(u.value.scrollTop+w+T-g-y)}}),kn(()=>t.fullPath,k,{flush:"post",immediate:!0})}),()=>{var y,w;const d=({title:T,level:_,slug:x})=>l(In,{to:`#${x}`,class:["vp-toc-link",`level${_}`],onClick:()=>{c()}},()=>T),m=(T,_)=>T.length&&_>0?l("ul",{class:"vp-toc-list"},T.map(x=>{const f=m(x.children,_-1);return[l("li",{class:["vp-toc-item",{active:t.hash===`#${x.slug}`}]},d(x)),f?l("li",f):null]})):null,g=n.items.length?m(n.items,n.headerDepth):p.value.headers?m(p.value.headers,n.headerDepth):null;return g?l("div",{class:"vp-toc-placeholder"},[l("aside",{id:"toc"},[(y=s.before)==null?void 0:y.call(s),l("div",{class:"vp-toc-header",onClick:()=>{c()}},[e.value.toc,l(L2),l("div",{class:["arrow",o.value?"down":"end"]})]),l("div",{class:["vp-toc-wrapper",o.value?"open":""],ref:u},[g,l("div",{class:"vp-toc-marker",style:{top:i.value}})]),(w=s.after)==null?void 0:w.call(s)])]):null}}}),yo=M({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(n){const s=wn(),t=on(),p=Cn(),e=({target:o})=>{const c=document.querySelector(o.hash);if(c){const u=()=>{c.removeAttribute("tabindex"),c.removeEventListener("blur",u)};c.setAttribute("tabindex","-1"),c.addEventListener("blur",u),c.focus(),window.scrollTo(0,0)}};return fn(()=>{kn(()=>s.value.path,()=>p.value.focus())}),()=>[l("span",{ref:p,tabindex:"-1"}),l("a",{href:`#${n.content}`,class:"vp-skip-link sr-only",onClick:e},t.value.routeLocales.skipToContent)]}});let ae=null,Qa=null;const Ae={wait:()=>ae,pending:()=>{ae=new Promise(n=>{Qa=n})},resolve:()=>{Qa==null||Qa(),ae=null,Qa=null}},bo=(n,{slots:s})=>l(sa,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:Ae.resolve,onBeforeLeave:Ae.pending},()=>{var t;return(t=s.default)==null?void 0:t.call(s)});bo.displayName="FadeSlideY";const R2=(n,s)=>{const t=n.replace(s,"/").split("/"),p=[];let e=ao(s);return t.forEach((o,c)=>{c!==t.length-1?(e+=`${o}/`,p.push({link:e,name:o||"Home"})):o!==""&&(e+=o,p.push({link:e,name:o}))}),p},Se=(n,{slots:s})=>{var d,m;const{bgImage:t,bgImageDark:p,bgImageStyle:e,color:o,description:c,image:u,imageDark:i,header:r,features:k=[]}=n;return l("div",{class:"vp-feature-wrapper"},[t?l("div",{class:["vp-feature-bg",{light:p}],style:[{"background-image":`url(${t})`},e]}):null,p?l("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${p})`},e]}):null,l("div",{class:"vp-feature",style:o?{color:o}:{}},[((d=s.image)==null?void 0:d.call(s,n))??[u?l("img",{class:["vp-feature-image",{light:i}],src:yn(u),alt:""}):null,i?l("img",{class:"vp-feature-image dark",src:yn(i),alt:""}):null],((m=s.info)==null?void 0:m.call(s,n))??[r?l("h2",{class:"vp-feature-header"},r):null,c?l("p",{class:"vp-feature-description",innerHTML:c}):null],k.length?l("div",{class:"vp-features"},k.map(({icon:g,title:y,details:w,link:T})=>{const _=[l("h3",{class:"vp-feature-title"},[l(Fn,{icon:g}),l("span",{innerHTML:y})]),l("p",{class:"vp-feature-details",innerHTML:w})];return T?Ep(T)?l("a",{class:"vp-feature-item link",href:T,"aria-label":y,target:"_blank"},_):l(In,{class:"vp-feature-item link",to:T,"aria-label":y},()=>_):l("div",{class:"vp-feature-item"},_)})):null])])};Se.displayName="FeaturePanel";var O2=M({name:"HeroInfo",slots:Object,setup(n,{slots:s}){const t=gn(),p=It(),e=E(()=>t.value.heroFullScreen??!1),o=E(()=>{const{heroText:r,tagline:k}=t.value;return{text:r??p.value.title??"Hello",tagline:k??p.value.description??"",isFullScreen:e.value}}),c=E(()=>{const{heroText:r,heroImage:k,heroImageDark:d,heroAlt:m,heroImageStyle:g}=t.value;return{image:k?yn(k):null,imageDark:d?yn(d):null,imageStyle:g,alt:m??r??"",isFullScreen:e.value}}),u=E(()=>{const{bgImage:r,bgImageDark:k,bgImageStyle:d}=t.value;return{image:Pn(r)?yn(r):null,imageDark:Pn(k)?yn(k):null,bgStyle:d,isFullScreen:e.value}}),i=E(()=>t.value.actions??[]);return()=>{var r,k,d;return l("header",{class:["vp-hero-info-wrapper",{fullscreen:e.value}]},[((r=s.bg)==null?void 0:r.call(s,u.value))??[u.value.image?l("div",{class:["vp-hero-mask",{light:u.value.imageDark}],style:[{"background-image":`url(${u.value.image})`},u.value.bgStyle]}):null,u.value.imageDark?l("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${u.value.imageDark})`},u.value.bgStyle]}):null],l("div",{class:"vp-hero-info"},[((k=s.logo)==null?void 0:k.call(s,c.value))??l(pn,{appear:!0,type:"group"},()=>{const{image:m,imageDark:g,imageStyle:y,alt:w}=c.value;return[m?l("img",{key:"light",class:["vp-hero-image",{light:g}],style:y,src:m,alt:w}):null,g?l("img",{key:"dark",class:"vp-hero-image dark",style:y,src:g,alt:w}):null]}),((d=s.info)==null?void 0:d.call(s,o.value))??l("div",{class:"vp-hero-infos"},[o.value.text?l(pn,{appear:!0,delay:.04},()=>l("h1",{id:"main-title"},o.value.text)):null,o.value.tagline?l(pn,{appear:!0,delay:.08},()=>l("p",{id:"main-description",innerHTML:o.value.tagline})):null,i.value.length?l(pn,{appear:!0,delay:.12},()=>l("p",{class:"vp-hero-actions"},i.value.map(m=>l($n,{class:["vp-hero-action",m.type??"default"],config:m,noExternalLinkIcon:!0},m.icon?{before:()=>l(Fn,{icon:m.icon})}:{})))):null])])])}}});const Ji=(n,{slots:s})=>{var m,g,y;const{bgImage:t,bgImageDark:p,bgImageStyle:e,color:o,description:c,image:u,imageDark:i,header:r,highlights:k=[],type:d="un-order"}=n;return l("div",{class:"vp-highlight-wrapper",style:o?{color:o}:{}},[t?l("div",{class:["vp-highlight-bg",{light:p}],style:[{"background-image":`url(${t})`},e]}):null,p?l("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${p})`},e]}):null,l("div",{class:"vp-highlight"},[((m=s.image)==null?void 0:m.call(s,n))??[u?l("img",{class:["vp-highlight-image",{light:i}],src:yn(u),alt:""}):null,i?l("img",{class:"vp-highlight-image dark",src:yn(i),alt:""}):null],((g=s.info)==null?void 0:g.call(s,n))??[l("div",{class:"vp-highlight-info-wrapper"},l("div",{class:"vp-highlight-info"},[r?l("h2",{class:"vp-highlight-header",innerHTML:r}):null,c?l("p",{class:"vp-highlight-description",innerHTML:c}):null,((y=s.highlights)==null?void 0:y.call(s,k))??l(d==="order"?"ol":d==="no-order"?"dl":"ul",{class:"vp-highlights"},k.map(({icon:w,title:T,details:_,link:x})=>{const f=[l(d==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[w?l(Fn,{class:"vp-highlight-icon",icon:w}):null,l("span",{innerHTML:T})]),_?l(d==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:_}):null];return l(d==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:x}]},x?Ep(x)?l("a",{class:"vp-highlight-item link",href:x,"aria-label":T,target:"_blank"},f):l(In,{class:"vp-highlight-item link",to:x,"aria-label":T},()=>f):l("div",{class:"vp-highlight-item"},f))}))]))]])])};Ji.displayName="HighlightPanel";var q2=M({name:"HomePage",slots:Object,setup(n,{slots:s}){const t=as(),p=gn(),e=E(()=>{const{features:c}=p.value;return _e(c)?c:null}),o=E(()=>{const{highlights:c}=p.value;return _e(c)?c:null});return()=>{var c,u,i,r;return l("main",{id:"main-content",class:["vp-project-home ",{pure:t.value}],"aria-labelledby":p.value.heroText===null?"":"main-title"},[(c=s.top)==null?void 0:c.call(s),l(O2),((u=o.value)==null?void 0:u.map(k=>"features"in k?l(Se,k):l(Ji,k)))??(e.value?l(pn,{appear:!0,delay:.24},()=>l(Se,{features:e.value})):null),(i=s.center)==null?void 0:i.call(s),l(pn,{appear:!0,delay:.32},()=>l(ja)),(r=s.bottom)==null?void 0:r.call(s)])}}}),j2=M({name:"BreadCrumb",setup(){const n=wn(),s=Ns(),t=gn(),p=on(),e=Cn([]),o=E(()=>(t.value.breadcrumb??p.value.breadcrumb??!0)&&e.value.length>1),c=E(()=>t.value.breadcrumbIcon??p.value.breadcrumbIcon??!0),u=()=>{const i=R2(n.value.path,s.value).map(({link:r,name:k})=>{const{path:d,meta:m,notFound:g}=As(r);return g||m[Qn.breadcrumbExclude]?null:{title:m[Qn.shortTitle]||m[Qn.title]||k,icon:m[Qn.icon],path:d}}).filter(r=>r!==null);i.length>1&&(e.value=i)};return fn(()=>{kn(()=>n.value.path,u,{immediate:!0})}),()=>l("nav",{class:["vp-breadcrumb",{disable:!o.value}]},o.value?l("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},e.value.map((i,r)=>l("li",{class:{"is-active":e.value.length-1===r},property:"itemListElement",typeof:"ListItem"},[l(In,{to:i.path,property:"item",typeof:"WebPage"},()=>[c.value?l(Fn,{icon:i.icon}):null,l("span",{property:"name"},i.title||"Unknown")]),l("meta",{property:"position",content:r+1})]))):[])}});const Qc=(n,s)=>n===!1||Ba(n)?n:Pn(n)?mo(n,!0,s):null,Pe=(n,s,t)=>{const p=n.findIndex(e=>e.link===s);if(p!==-1){const e=n[p+t];return e!=null&&e.link?e:null}for(const e of n)if("children"in e){const o=Pe(e.children,s,t);if(o)return o}return null};var N2=M({name:"PageNav",setup(){const n=on(),s=gn(),t=go(),p=wn(),e=fa(),o=js(),c=E(()=>{const i=Qc(s.value.prev,o.path);return i===!1?null:i||(n.value.prevLink===!1?null:Pe(t.value,p.value.path,-1))}),u=E(()=>{const i=Qc(s.value.next,o.path);return i===!1?null:i||(n.value.nextLink===!1?null:Pe(t.value,p.value.path,1))});return qn("keydown",i=>{i.altKey&&(i.key==="ArrowRight"?u.value&&(e(u.value.link),i.preventDefault()):i.key==="ArrowLeft"&&c.value&&(e(c.value.link),i.preventDefault()))}),()=>c.value||u.value?l("nav",{class:"vp-page-nav"},[c.value?l($n,{class:"prev",config:c.value},()=>{var i,r;return[l("div",{class:"hint"},[l("span",{class:"arrow start"}),n.value.metaLocales.prev]),l("div",{class:"link"},[l(Fn,{icon:(i=c.value)==null?void 0:i.icon}),(r=c.value)==null?void 0:r.text])]}):null,u.value?l($n,{class:"next",config:u.value},()=>{var i,r;return[l("div",{class:"hint"},[n.value.metaLocales.next,l("span",{class:"arrow end"})]),l("div",{class:"link"},[(i=u.value)==null?void 0:i.text,l(Fn,{icon:(r=u.value)==null?void 0:r.icon})])]}):null]):null}});const V2=()=>{const n=on(),s=wn(),t=gn();return E(()=>{var p;return t.value.contributors??n.value.contributors??!0?((p=s.value.git)==null?void 0:p.contributors)??null:null})},M2={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},B2=({docsRepo:n,docsBranch:s,docsDir:t,filePathRelative:p,editLinkPattern:e})=>{if(!p)return null;const o=io(n);let c;return e?c=e:o!==null&&(c=M2[o]),c?c.replace(/:repo/u,pa(n)?n:`https://github.com/${n}`).replace(/:branch/u,s).replace(/:path/u,du(`${ao(t)}/${p}`)):null},F2=()=>{const n=on(),s=wn(),t=gn();return E(()=>{const{repo:p,docsRepo:e=p,docsBranch:o="main",docsDir:c="",editLink:u,editLinkPattern:i=""}=n.value;if(!(t.value.editLink??u??!0)||!e)return null;const r=B2({docsRepo:e,docsBranch:o,docsDir:c,editLinkPattern:i,filePathRelative:s.value.filePathRelative});return r?{text:n.value.metaLocales.editLink,link:r}:null})},H2=()=>{const n=It(),s=on(),t=wn(),p=gn();return E(()=>{var e,o;return!(p.value.lastUpdated??s.value.lastUpdated??!0)||!((e=t.value.git)!=null&&e.updatedTime)?null:new Date((o=t.value.git)==null?void 0:o.updatedTime).toLocaleString(n.value.lang)})};var W2=M({name:"PageTitle",setup(){const n=wn(),s=gn(),t=on(),{info:p,items:e}=t2();return()=>l("div",{class:"vp-page-title"},[l("h1",[t.value.titleIcon===!1?null:l(Fn,{icon:s.value.icon}),n.value.title]),l($i,{info:p.value,...e.value===null?{}:{items:e.value}}),l("hr")])}});const Xi=()=>l(dn,{name:"edit"},()=>[l("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),l("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);Xi.displayName="EditIcon";var G2=M({name:"PageMeta",setup(){const n=on(),s=F2(),t=H2(),p=V2();return()=>{var o;const{metaLocales:e}=n.value;return l("footer",{class:"vp-page-meta"},[s.value?l("div",{class:"vp-meta-item edit-link"},l($n,{class:"vp-meta-label",config:s.value},{before:()=>l(Xi)})):null,l("div",{class:"vp-meta-item git-info"},[t.value?l("div",{class:"update-time"},[l("span",{class:"vp-meta-label"},`${e.lastUpdated}: `),l(Sp,()=>l("span",{class:"vp-meta-info"},t.value))]):null,(o=p.value)!=null&&o.length?l("div",{class:"contributors"},[l("span",{class:"vp-meta-label"},`${e.contributors}: `),p.value.map(({email:c,name:u},i)=>[l("span",{class:"vp-meta-info",title:`email: ${c}`},u),i!==p.value.length-1?",":""])]):null])])}}}),U2=M({name:"NormalPage",slots:Object,setup(n,{slots:s}){const t=gn(),{isDarkmode:p}=jt(),e=on(),o=E(()=>t.value.toc??e.value.toc??!0);return()=>l("main",{id:"main-content",class:"vp-page"},l(is("LocalEncrypt")?ys("LocalEncrypt"):ai,()=>{var c,u,i,r;return[(c=s.top)==null?void 0:c.call(s),t.value.cover?l("div",{class:"page-cover"},l("img",{src:yn(t.value.cover),alt:"","no-view":""})):null,l(j2),l(W2),o.value?l(Ki,{headerDepth:t.value.headerDepth??e.value.headerDepth??2},{before:()=>{var k;return(k=s.tocBefore)==null?void 0:k.call(s)},after:()=>{var k;return(k=s.tocAfter)==null?void 0:k.call(s)}}):null,(u=s.contentBefore)==null?void 0:u.call(s),l(ja),(i=s.contentAfter)==null?void 0:i.call(s),l(G2),l(N2),is("CommentService")?l(ys("CommentService"),{darkmode:p.value}):null,(r=s.bottom)==null?void 0:r.call(s)]}))}}),Q2=M({name:"Layout",slots:Object,setup(n,{slots:s}){const t=Vs(),p=on(),e=wn(),o=gn(),{isMobile:c}=qt(),u=E(()=>{var i,r;return((i=p.value.blog)==null?void 0:i.sidebarDisplay)??((r=t.value.blog)==null?void 0:r.sidebarDisplay)??"mobile"});return()=>[l(yo),l(ho,{},{default:()=>{var i;return((i=s.default)==null?void 0:i.call(s))??(o.value.home?l(q2):l(bo,()=>l(U2,{key:e.value.path},{top:()=>{var r;return(r=s.top)==null?void 0:r.call(s)},bottom:()=>{var r;return(r=s.bottom)==null?void 0:r.call(s)},contentBefore:()=>{var r;return(r=s.contentBefore)==null?void 0:r.call(s)},contentAfter:()=>{var r;return(r=s.contentAfter)==null?void 0:r.call(s)},tocBefore:()=>{var r;return(r=s.tocBefore)==null?void 0:r.call(s)},tocAfter:()=>{var r;return(r=s.tocAfter)==null?void 0:r.call(s)}})))},...u.value==="none"?{}:{navScreenBottom:()=>l(ys("BloggerInfo"))},...!c.value&&u.value==="always"?{sidebar:()=>l(ys("BloggerInfo"))}:{}})]}}),$2=M({name:"NotFoundHint",setup(){const n=on(),s=()=>{const t=n.value.routeLocales.notFoundMsg;return t[Math.floor(Math.random()*t.length)]};return()=>l("div",{class:"not-found-hint"},[l("p",{class:"error-code"},"404"),l("h1",{class:"error-title"},n.value.routeLocales.notFoundTitle),l("p",{class:"error-hint"},s())])}}),K2=M({name:"NotFound",slots:Object,setup(n,{slots:s}){const t=ba(),p=Ns(),e=on();return()=>[l(yo),l(ho,{noSidebar:!0},()=>{var o;return l("main",{id:"main-content",class:"vp-page not-found"},((o=s.default)==null?void 0:o.call(s))??[l($2),l("div",{class:"actions"},[l("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},e.value.routeLocales.back),l("button",{type:"button",class:"action-button",onClick:()=>{t.push(e.value.home??p.value)}},e.value.routeLocales.home)])])})]}});const J2={Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'},X2={category:{"/":{path:"/category/",map:{article:{path:"/category/article/",indexes:[0,1,2,3,4,5,6,7,8,9,10,11,12,13]},cloud:{path:"/category/cloud/",indexes:[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]},dotNET:{path:"/category/dotnet/",indexes:[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546]},生活:{path:"/category/%E7%94%9F%E6%B4%BB/",indexes:[547,548,549,550,551,552,553,554,555,556,557,558,559,560]},orm:{path:"/category/orm/",indexes:[561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622]},middleware:{path:"/category/middleware/",indexes:[623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928]},soft:{path:"/category/soft/",indexes:[929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951]},Photoshop:{path:"/category/photoshop/",indexes:[952]},软件设计:{path:"/category/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/",indexes:[953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1e3,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012]},web:{path:"/category/web/",indexes:[1013,1014,87,88,89,90,91,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037]},dataBase:{path:"/category/database/",indexes:[1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173]},数据库:{path:"/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",indexes:[1174]},dotNet:{path:"/category/dotnet/",indexes:[1175,1176,1177,1178,1179,1180,1181,1182]},Kubernetes:{path:"/category/kubernetes/",indexes:[43]},计算机基础:{path:"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",indexes:[1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197]},csharp:{path:"/category/csharp/",indexes:[1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311]},otherLanguage:{path:"/category/otherlanguage/",indexes:[1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342]},Linux:{path:"/category/linux/",indexes:[1343,1344,1345,1346,1347,1348,1349,1350,1351,1352]},Windows:{path:"/category/windows/",indexes:[1353,1354,1355,1356,1357,1358]},linux:{path:"/category/linux/",indexes:[1359]},服务器或证书:{path:"/category/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%88%96%E8%AF%81%E4%B9%A6/",indexes:[1360,1361,1362,1363,1364]},小软件介绍:{path:"/category/%E5%B0%8F%E8%BD%AF%E4%BB%B6%E4%BB%8B%E7%BB%8D/",indexes:[1365,1366]},"Hyper-v":{path:"/category/hyper-v/",indexes:[1367]},Navicat:{path:"/category/navicat/",indexes:[1368]},JetBrains:{path:"/category/jetbrains/",indexes:[1369,1370,1371,1372,1373,1374]},项目管理:{path:"/category/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/",indexes:[1375,1376]},Postman:{path:"/category/postman/",indexes:[1377,1378]},Git:{path:"/category/git/",indexes:[1379,1380,1381,1382,1383,1384,1385,1386,1387]},VisualStudio:{path:"/category/visualstudio/",indexes:[1388,945]},"Visual Studio":{path:"/category/visual-studio/",indexes:[1389,1390,1391,1392,1393,1394,1395,1396]},环境:{path:"/category/%E7%8E%AF%E5%A2%83/",indexes:[945]}}}},tag:{"/":{path:"/tag/",map:{汇总:{path:"/tag/%E6%B1%87%E6%80%BB/",indexes:[6]},转岗:{path:"/tag/%E8%BD%AC%E5%B2%97/",indexes:[3]},语录:{path:"/tag/%E8%AF%AD%E5%BD%95/",indexes:[11,12]},好习惯:{path:"/tag/%E5%A5%BD%E4%B9%A0%E6%83%AF/",indexes:[11]},无:{path:"/tag/%E6%97%A0/",indexes:[1199,1200,1202,96,1203,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,98,1218,99,628,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,100,101,102,1235,1236,1237,1238,1239,1240,1241,1242,1243,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1284,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,103,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,104,629,630,631,632,633,634,635,636,637,638,639,640,105,106,107,108,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,109,110,657,658,659,660,111,112,113,114,115,662,663,664,116,117,118,119,120,665,666,122,123,124,126,127,128,667,668,669,129,130,671,672,131,132,133,135,136,137,673,674,675,677,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,680,681,682,163,164,683,165,684,685,686,687,688,689,690,167,691,692,693,694,695,168,169,698,700,170,171,172,701,702,703,173,174,175,176,19,20,21,22,23,24,177,704,705,706,25,26,27,29,30,31,32,178,179,180,33,1041,1042,1043,1044,1045,1046,1047,1048,1049,34,1050,1051,1052,1053,1054,1055,1056,1057,1058,181,182,183,707,184,185,186,187,188,1059,1060,1312,1313,1314,708,709,35,189,1315,1316,1317,710,711,190,191,192,547,193,194,195,1061,196,712,197,713,198,199,200,201,1318,1319,1320,1321,714,202,203,204,205,206,207,715,716,717,718,719,720,36,208,721,722,209,723,724,725,210,211,726,727,728,212,729,730,214,37,38,39,40,41,215,216,217,958,959,960,218,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,219,731,220,221,1062,1063,1064,1065,1066,1185,1186,1187,1067,1068,1069,1070,1071,1072,1073,1074,976,222,223,548,732,733,1075,1076,224,225,226,227,228,734,735,736,1077,229,1079,230,231,737,232,233,234,738,739,1080,1081,1082,1083,235,236,740,741,742,743,1084,237,977,238,978,239,240,241,242,243,244,245,1016,1017,1018,1019,979,1020,1021,981,1022,246,247,744,745,746,747,248,249,982,748,749,1086,750,1087,1088,250,251,751,1089,752,252,253,254,255,1090,256,753,754,257,258,259,1091,260,261,755,262,263,756,757,758,759,760,761,264,265,266,267,268,269,762,1092,983,1023,1093,1024,1094,1095,1096,550,271,763,1025,272,273,274,275,276,277,278,279,764,765,766,767,768,769,10,280,770,1097,1098,1099,1100,551,552,984,554,555,936,937,938,939,1343,1344,1345,1361,1362,1363,1364,1354,1355,1365,1367,1366,940,1356,1357,1358,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1381,1382,1383,1384,1385,1389,1390,1391,1392,1394,1395,1396,1346,1347,1348,1349,1352,1386,1387,569,281,571,572,573,574,985,282,1101,1102,283,284,285,286,287,771,288,772,773,774,289,290,291,775,776,292,293,294,295,296,778,297,298,299,300,575,576,577,42,44,301,302,46,47,303,304,305,779,1103,306,1104,1105,307,308,309,310,780,311,312,1106,1107,1108,1109,781,313,782,783,784,785,314,315,316,786,787,788,789,790,791,792,986,317,793,1026,578,318,319,320,321,579,794,322,795,796,323,324,580,325,581,582,583,584,585,797,326,987,48,327,49,328,586,330,331,332,798,333,334,1190,799,800,335,336,337,801,802,803,587,338,50,51,339,588,589,590,340,1027,804,341,1029,52,591,1030,342,343,344,345,346,347,1110,348,349,350,1111,352,353,354,355,356,1031,357,358,1112,359,360,361,1113,362,363,364,365,366,367,368,369,1114,370,1115,1116,371,372,373,374,375,594,595,805,806,376,377,378,379,807,808,809,810,811,380,812,813,988,381,596,556,382,814,815,597,1117,384,385,386,387,388,389,390,391,392,53,989,393,394,395,598,990,816,817,396,397,398,1322,1323,1324,1118,1119,399,991,818,1325,1326,819,820,992,557,558,559,560,400,401,993,402,994,1120,821,822,1121,403,404,405,406,407,408,823,824,409,410,411,995,996,825,826,412,599,1122,1123,1124,997,998,1192,413,414,600,601,999,827,828,55,56,57,58,59,602,416,603,417,418,419,420,829,604,1125,421,422,423,830,60,61,831,832,833,424,425,834,426,835,836,837,427,428,429,1032,430,838,839,840,1e3,431,62,432,841,433,842,434,435,1126,1127,843,436,437,64,65,844,438,439,845,1001,440,441,442,443,846,1002,444,445,605,66,446,1033,447,448,449,450,451,1003,452,847,1128,848,453,606,454,455,456,457,458,1004,1005,849,850,607,851,852,853,854,855,856,857,858,1006,1007,859,860,861,1008,1129,862,459,460,863,608,609,610,611,612,864,461,462,463,613,614,464,1009,865,866,867,868,869,465,870,871,872,873,874,875,466,467,468,469,470,876,877,878,879,880,881,882,883,884,885,471,472,1130,473,1131,886,474,1010,887,1034,1193,1194,475,476,1035,888,615,1011,889,890,891,477,892,893,894,895,896,478,479,897,480,481,482,483,1132,1012,484,485,486,487,898,488,1133,616,617,618,1195,489,490,1196,1197,491,899,492,900,901,493,1327,494,495,496,1328,1329,497,1134,498,499,902,67,500,501,502,903,904,619,905,503,906,1135,504,907,505,908,909,910,911,1136,1137,506,507,508,509,68,510,912,511,69,512,1138,1139,1330,1331,1140,1141,70,71,513,72,73,514,515,913,1142,74,75,76,77,620,78,79,621,622,80,914,1143,1144,1146,1147,1148,915,916,1036,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1173,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,917,918,919,920,921,922,923,1037,924,925,926,927,928,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546]},文章:{path:"/tag/%E6%96%87%E7%AB%A0/",indexes:[0,1]},aspire:{path:"/tag/aspire/",indexes:[92]},kiota:{path:"/tag/kiota/",indexes:[84]},".net":{path:"/tag/.net/",indexes:[121]},sk:{path:"/tag/sk/",indexes:[166]},社会:{path:"/tag/%E7%A4%BE%E4%BC%9A/",indexes:[553]},ps:{path:"/tag/ps/",indexes:[952]},soft:{path:"/tag/soft/",indexes:[935]},uos:{path:"/tag/uos/",indexes:[946]},网站:{path:"/tag/%E7%BD%91%E7%AB%99/",indexes:[934]},base:{path:"/tag/base/",indexes:[957,1078]},log:{path:"/tag/log/",indexes:[2,4,5,351]},temp:{path:"/tag/temp/",indexes:[1397]},javascript:{path:"/tag/javascript/",indexes:[1015]},学习:{path:"/tag/%E5%AD%A6%E4%B9%A0/",indexes:[7,8,9,13]},官方:{path:"/tag/%E5%AE%98%E6%96%B9/",indexes:[8]},方法:{path:"/tag/%E6%96%B9%E6%B3%95/",indexes:[9]},一致性:{path:"/tag/%E4%B8%80%E8%87%B4%E6%80%A7/",indexes:[1174]},执行:{path:"/tag/%E6%89%A7%E8%A1%8C/",indexes:[1038]},solution:{path:"/tag/solution/",indexes:[1085]},helper:{path:"/tag/helper/",indexes:[1145]},neo4j:{path:"/tag/neo4j/",indexes:[1039]},k3s:{path:"/tag/k3s/",indexes:[16,17,1181,63]},服务发现:{path:"/tag/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/",indexes:[43]},network:{path:"/tag/network/",indexes:[1184]},tcp:{path:"/tag/tcp/",indexes:[1188]},http:{path:"/tag/http/",indexes:[213,1188]},cpu:{path:"/tag/cpu/",indexes:[1189]},内存:{path:"/tag/%E5%86%85%E5%AD%98/",indexes:[1183]},任务:{path:"/tag/%E4%BB%BB%E5%8A%A1/",indexes:[1191]},状态:{path:"/tag/%E7%8A%B6%E6%80%81/",indexes:[1191]},API:{path:"/tag/api/",indexes:[85]},avalonia:{path:"/tag/avalonia/",indexes:[82,125]},issue:{path:"/tag/issue/",indexes:[82,562,563]},component:{path:"/tag/component/",indexes:[86,270]},operator:{path:"/tag/operator/",indexes:[679,329]},backgroud:{path:"/tag/backgroud/",indexes:[134]},"Lib.Harmony":{path:"/tag/lib.harmony/",indexes:[1176]},pInvoke:{path:"/tag/pinvoke/",indexes:[1178]},DLL:{path:"/tag/dll/",indexes:[1178]},下载:{path:"/tag/%E4%B8%8B%E8%BD%BD/",indexes:[97]},httpClient:{path:"/tag/httpclient/",indexes:[97]},toolkit:{path:"/tag/toolkit/",indexes:[383]},ikvm:{path:"/tag/ikvm/",indexes:[1177]},text:{path:"/tag/text/",indexes:[83]},book:{path:"/tag/book/",indexes:[81]},优化:{path:"/tag/%E4%BC%98%E5%8C%96/",indexes:[93]},nuget:{path:"/tag/nuget/",indexes:[162]},娱乐:{path:"/tag/%E5%A8%B1%E4%B9%90/",indexes:[549]},adonet:{path:"/tag/adonet/",indexes:[565]},compoent:{path:"/tag/compoent/",indexes:[561]},efcore:{path:"/tag/efcore/",indexes:[566,567,592,593]},odbc:{path:"/tag/odbc/",indexes:[564,570]},epub:{path:"/tag/epub/",indexes:[627]},Traefik:{path:"/tag/traefik/",indexes:[623]},自动化:{path:"/tag/%E8%87%AA%E5%8A%A8%E5%8C%96/",indexes:[1179]},statistics:{path:"/tag/statistics/",indexes:[930]},通讯:{path:"/tag/%E9%80%9A%E8%AE%AF/",indexes:[929]},测试:{path:"/tag/%E6%B5%8B%E8%AF%95/",indexes:[929]},开源协议:{path:"/tag/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/",indexes:[947]},命令:{path:"/tag/%E5%91%BD%E4%BB%A4/",indexes:[1353]},shell:{path:"/tag/shell/",indexes:[1353]},tools:{path:"/tag/tools/",indexes:[1359]},DDNS:{path:"/tag/ddns/",indexes:[1360]},docker:{path:"/tag/docker/",indexes:[18,948]},linux:{path:"/tag/linux/",indexes:[932]},wsl:{path:"/tag/wsl/",indexes:[932]},实践:{path:"/tag/%E5%AE%9E%E8%B7%B5/",indexes:[956]},ddd:{path:"/tag/ddd/",indexes:[980]},system:{path:"/tag/system/",indexes:[954,955]},一次性密码:{path:"/tag/%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81/",indexes:[953]},blazor:{path:"/tag/blazor/",indexes:[1013,1014,86,87,88,89,90,91,415]},示例:{path:"/tag/%E7%A4%BA%E4%BE%8B/",indexes:[1014]},api:{path:"/tag/api/",indexes:[1028]},dataType:{path:"/tag/datatype/",indexes:[1172]},函数:{path:"/tag/%E5%87%BD%E6%95%B0/",indexes:[1040]},sqlserver:{path:"/tag/sqlserver/",indexes:[933]},dockerfile:{path:"/tag/dockerfile/",indexes:[54]},images:{path:"/tag/images/",indexes:[28]},podman:{path:"/tag/podman/",indexes:[14,15]},install:{path:"/tag/install/",indexes:[14,678,1350,1351]},dotnet:{path:"/tag/dotnet/",indexes:[16]},redis:{path:"/tag/redis/",indexes:[17]},项目:{path:"/tag/%E9%A1%B9%E7%9B%AE/",indexes:[94,95]},国密:{path:"/tag/%E5%9B%BD%E5%AF%86/",indexes:[1180]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[1180]},闭包:{path:"/tag/%E9%97%AD%E5%8C%85/",indexes:[1198]},enum:{path:"/tag/enum/",indexes:[1244]},channel:{path:"/tag/channel/",indexes:[1217]},thread:{path:"/tag/thread/",indexes:[1204,1283,1285,1286]},plinq:{path:"/tag/plinq/",indexes:[1285]},parallel:{path:"/tag/parallel/",indexes:[1285]},InnoSetup:{path:"/tag/innosetup/",indexes:[1182]},打包:{path:"/tag/%E6%89%93%E5%8C%85/",indexes:[1182]},EFCore:{path:"/tag/efcore/",indexes:[568]},锁:{path:"/tag/%E9%94%81/",indexes:[566]},表达式树:{path:"/tag/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/",indexes:[567]},es:{path:"/tag/es/",indexes:[625,670,678,679]},readme:{path:"/tag/readme/",indexes:[670]},struct:{path:"/tag/struct/",indexes:[625]},pdf:{path:"/tag/pdf/",indexes:[1175]},ppt:{path:"/tag/ppt/",indexes:[624]},test:{path:"/tag/test/",indexes:[661,676]},接口调用:{path:"/tag/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/",indexes:[949]},仓库:{path:"/tag/%E4%BB%93%E5%BA%93/",indexes:[1379]},pages:{path:"/tag/pages/",indexes:[1380]},插件:{path:"/tag/%E6%8F%92%E4%BB%B6/",indexes:[1388]},快捷键:{path:"/tag/%E5%BF%AB%E6%8D%B7%E9%94%AE/",indexes:[1393]},效率:{path:"/tag/%E6%95%88%E7%8E%87/",indexes:[1393]},VS:{path:"/tag/vs/",indexes:[950,951]},antBlazor:{path:"/tag/antblazor/",indexes:[1013]},form:{path:"/tag/form/",indexes:[90]},started:{path:"/tag/started/",indexes:[87]},js:{path:"/tag/js/",indexes:[89]},layout:{path:"/tag/layout/",indexes:[91]},life:{path:"/tag/life/",indexes:[88]},Jenkins:{path:"/tag/jenkins/",indexes:[45]},"ci/cd":{path:"/tag/cicd/",indexes:[45]},async:{path:"/tag/async/",indexes:[1201]},logger:{path:"/tag/logger/",indexes:[626]},OpenTelemetry:{path:"/tag/opentelemetry/",indexes:[696,697]},监控:{path:"/tag/%E7%9B%91%E6%8E%A7/",indexes:[699]},jaeger:{path:"/tag/jaeger/",indexes:[777]}}}}},Yi=["/classicArticle/workStepByStep.html","/classicArticle/resourceManage.html","/dotnet/api/controllerApi/extensions/poolAPI.html","/classicArticle/developmentProductManager.html","/softwareDesign/systemLogOperation.html","/softwareDesign/understandingComplexBusiness.html","/classicArticle/collect.html","/classicArticle/xuexiResource/notSuchABadProgrammer.html","/classicArticle/xuexiResource/jiaoYuPlatform.html","/classicArticle/xuexiResource/studyMethod.html","/classicArticle/nenglishuipinghegongzuolouxi.html","/classicArticle/goodHabit.html","/classicArticle/jingdianyulu.html","/classicArticle/xuexiResource/zhishixuexifangfalun.html","/cloud/container/podman/install.html","/cloud/container/podman/","/cloud/k3s/operators/netCoreInstall.html","/cloud/k3s/operators/redisInstall.html","/soft/windows/windowsSeverInstall.html","/cloud/","/cloud/ciAndCd/","/cloud/istio/","/cloud/k3s/install.html","/cloud/k8s/gitlabhek8szidonghuafabu.html","/cloud/k8s/","/cloud/ciAndCd/jenkins/jenkinspeizhi.html","/cloud/ciAndCd/jenkins/","/cloud/container/docker/dockerfilecaozuo.html","/cloud/container/docker/images.html","/cloud/container/docker/","/cloud/container/docker/wentichuli.html","/cloud/container/dockerCompose/changyongjiaoben.html","/cloud/container/dockerCompose/peizhiwenjian.html","/cloud/container/docker/install/linuxInstall.html","/cloud/ciAndCd/gitliuchenghedevopsliucheng.html","/cloud/container/dockerCompose/","/cloud/container/operators/","/cloud/ciAndCd/azuredevopsserver/","/cloud/ciAndCd/github/","/cloud/ciAndCd/gitlab/anzhuang.html","/cloud/ciAndCd/gitlab/giitlabdeyml.html","/cloud/ciAndCd/gitlab/sshmianmidenglu.html","/cloud/k8s/changyonggainian.html","/cloud/k8s/fuwufaxian.html","/cloud/k8s/wanglaotongxin.html","/cloud/ciAndCd/jenkins/install/linuxInstall.html","/cloud/ciAndCd/jenkins/release/goujianliushuixianxiangmu.html","/cloud/container/docker/install/windowsInstall.html","/cloud/container/docker/jiaoben/daorudaochujiaoben.html","/cloud/container/operators/portainer.html","/cloud/container/docker/dockerbushunetcore.html","/cloud/ciAndCd/jenkins/install/dockerInstall.html","/cloud/container/docker/commonCommand.html","/cloud/k8s/bushuwenjian.html","/cloud/container/docker/dockerfileGenerator.html","/cloud/ciAndCd/github/githubactionshengchengjingxiangbingbushu.html","/cloud/ciAndCd/gitlab/daiwancheng.html","/cloud/ciAndCd/gitlab/jianchanbushu.html","/cloud/ciAndCd/gitlab/liushuixianjiaoben.html","/cloud/container/dockerCompose/linuxInstall.html","/cloud/k8s/anzhuang/rainbond.html","/cloud/k8s/anzhuang/rancher.html","/cloud/ciAndCd/github/bushu_netfuwu.html","/cloud/k3s/","/cloud/ciAndCd/jenkins/install/windowsInstall.html","/cloud/ciAndCd/gitlab/gitlabrunner.html","/cloud/ciAndCd/jenkins/install/dockerInstallContainsDotNet.html","/cloud/k8s/anzhuang/minikube.html","/cloud/ciAndCd/gitlab/variables.html","/cloud/dapr.html","/cloud/ciAndCd/jenkins/release/tongguogouzizidongfabu.html","/cloud/container/docker/concept.html","/cloud/ciAndCd/jenkins/release/freeStyle.html","/cloud/ciAndCd/jenkins/changyongchajian.html","/cloud/ciAndCd/flubucore.html","/cloud/dockerswarm.html","/cloud/ciAndCd/teamcity.html","/cloud/container/","/cloud/ciAndCd/jenkins/yuanchengbushu.html","/cloud/container/dockerCompose/composeIssue.html","/cloud/ciAndCd/jenkins/install/installIssue.html","/dotnet/jiaocheng/books.html","/dotnet/avalonia/issue.html","/dotnet/commonNuget/textOperation.html","/dotnet/kiota.html","/dotnet/api/webTransport.html","/web/blazor/baseOperator/component.html","/web/blazor/baseOperator/getStarted.html","/web/blazor/baseOperator/lifeCycle.html","/web/blazor/baseOperator/jsOperator.html","/web/blazor/baseOperator/form.html","/web/blazor/baseOperator/layout.html","/dotnet/dotNetAspire.html","/dotnet/jiaocheng/optimize.html","/dotnet/avalonia/projects/mqttTool.html","/dotnet/avalonia/projects/socketTool.html","/dotnet/newFunction/dotNet8.html","/dotnet/commonMethod/downloader.html","/dotnet/newFunction/","/dotnet/api/remoteProcedureCall/httpRequest.html","/dotnet/jitongcaozuo/changyonggongneng.html","/dotnet/jitongcaozuo/yingjianxinxihuoqu.html","/dotnet/commonMethod/encrypt/rsajiajiemi.html","/web/blazor/deploy/issue.html","/dotnet/signalr/nginxshiyongwesocketwenti.html","/dotnet/api/shiyonghttprepljinhangceshi.html","/dotnet/mobanyinqing/","/dotnet/xiangmuqianyi/","/dotnet/xiangmuqianyi/shengjizhushou.html","/dotnet/base/logOperator/","/dotnet/commonNuget/duixiangyingshe/automapperdotnetf.html","/dotnet/chengxujicaozuo/caozuo.html","/dotnet/cuowuchuli/shibairenwuchongshi.html","/dotnet/mingmingguandaoipc/","/dotnet/signalr/signalr.html","/dotnet/windowsservice/","/dotnet/api/controllerApi/geshihuaxiangyingshuju.html","/dotnet/api/controllerApi/moxingbangdingheyanzheng.html","/dotnet/api/controllerApi/","/dotnet/server/diagnostics/gaishu.html","/dotnet/base/yilaizhuru/iockongzhifanzhuai/iocrongqiyuanma.html","/dotnet/","/dotnet/aop/castle_dynamicproxy.html","/dotnet/aop/fody.html","/dotnet/aop/","/dotnet/avalonia/","/dotnet/commonMethod/leizhuaiurl.html","/dotnet/commonMethod/","/dotnet/maui/","/web/blazor/","/dotnet/api/swagger/chuli.html","/dotnet/cli.html","/dotnet/aop/aspectcore_core.html","/dotnet/aop/rougamo.html","/dotnet/base/ihostedservicerenwu.html","/dotnet/kuangjiajiexi/changyongprogrampeizhi.html","/dotnet/kuangjiajiexi/shengmingzhoujicaozuo.html","/dotnet/kuangjiajiexi/yuanmaxuexi.html","/dotnet/base/chengxuji.html","/dotnet/newFunction/dotNet6.html","/dotnet/api/swagger/jibenshiyong.html","/dotnet/api/swagger/renzhengfanganbiaoshi.html","/dotnet/api/swagger/zhushishuiming.html","/dotnet/commonNuget/duixiangyingshe/automapper.html","/dotnet/base/yilaizhuru/morenyilaizhuru/morenyilaizhuru.html","/dotnet/base/yilaizhuru/morenyilaizhuru/zhuceduogeshixian.html","/dotnet/api/controllerApi/httpcontext.html","/dotnet/base/yilaizhuru/huoqusuoyouzhurudefuwu.html","/dotnet/base/serialize/json/json.html","/dotnet/commonNuget/file.html","/dotnet/daimafenxi/fenxigongju.html","/dotnet/kuangjiajiexi/launchsettings_json.html","/dotnet/xiangmumoban/gaishu.html","/dotnet/xiangmumoban/xiangmumobansheji.html","/dotnet/api/controllerApi/action.html","/dotnet/api/controllerApi/kuayuqingqiu.html","/dotnet/api/controllerApi/moxingyanzhengfluentvalidation.html","/dotnet/api/controllerApi/qingqiucanshubangding.html","/dotnet/api/controllerApi/qingqiuwenjianchuli.html","/dotnet/api/controllerApi/xiangyingyasu.html","/dotnet/api/remoteProcedureCall/httpclient.html","/dotnet/api/controllerApi/extensions/dongtaiapizhipanda_dynamicwebapi.html","/dotnet/nuget/","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/huoquyonghuxinxi.html","/dotnet/base/logOperator/serilog.html","/dotnet/base/logOperator/compomemt/keshihualogdashboard.html","/dotnet/semantickernel.html","/dotnet/api/curldehttpqingqiu.html","/dotnet/buildAndRelease/release/dockerReleaseNetCore.html","/dotnet/api/controllerApi/idempotent/fangzhichongfudijiao.html","/dotnet/api/swagger/tazhan/daochuwenjian.html","/dotnet/commonNuget/minglinghang.html","/dotnet/base/peizhikuangjia/shuaxiangoption.html","/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/jsonwenjianpeizhiyuan.html","/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/neicunshujuyuanpeizhi.html","/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/","/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyipeizhishujuyuan.html","/dotnet/commonNuget/shijianchuli.html","/dotnet/nuget/siyoubushu/baoguanlifuwubaget.html","/dotnet/nuget/siyoubushu/","/dotnet/zhuomianchengxu/wpf/kaiyuanzujian.html","/dotnet/webyingyong/mvc/changyongpeizhi.html","/dotnet/webyingyong/mvc/razorshitu.html","/dotnet/zhuomianchengxu/kaiyuanzujian/dotnetty.html","/dotnet/xiangmumoban/vue_jsdapeiwebapimoban.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/claimsxiangguangainian.html","/dotnet/commonNuget/duixiangyingshe/tinymapper.html","/dotnet/debugging/jibendiaoshigongju/diyicizhihangmanxingnengfenxi.html","/dotnet/debugging/jibendiaoshigongju/jibendiaoshigongju.html","/dotnet/commonMethod/encrypt/","/dotnet/api/swagger/tazhan/jingtaiswagger_jsonwenjian.html","/dotnet/api/swagger/tazhan/miniapishangchuanwenjianxianshiyichang.html","/dotnet/base/pipeline/middleware/tazhan/qingqiuchaoshizhongjianjian.html","/dotnet/base/jingtaiwenjian/jiangjingtaiwenjiandabao.html","/dotnet/base/jingtaiwenjian/","/dotnet/base/pipeline/filter/guolvqishixian-rucanjiaoyan.html","/dotnet/daimayouhua/daimayouhua.html","/dotnet/buildAndRelease/aot.html","/dotnet/console/xiaoshili/xiazaituchuangtupian.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jianchancaozuojwttoken.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/peizhijwtrenzhengpeizhi.html","/dotnet/base/pipeline/middleware/tazhan/yichangzhongjianjian.html","/dotnet/api/webservice/","/dotnet/zhuomianchengxu/wpf/","/dotnet/base/pipeline/filter/filterfanhuileichuli.html","/dotnet/commonNuget/fluentftp.html","/dotnet/daimayouhua/quanjuxingnengzhenduangongju.html","/dotnet/shujufangwen/dotnetshengchengshujuku.html","/dotnet/commonNuget/duixiangyingshe/emitmapper.html","/dotnet/base/serialize/json/newtonsoft_json.html","/dotnet/commonMethod/iniwenjiandouxie.html","/dotnet/commonNuget/tongyong.html","/dotnet/zhuomianchengxu/jitongcaozuo/jitongcaozuo.html","/dotnet/api/remoteProcedureCall/kestrel.html","/dotnet/solutionItems.html","/dotnet/commonNuget/yarp/","/dotnet/console/yangshinugetbao/xiazaiqi.html","/dotnet/base/serialize/erjinzhi/binaryformatter.html","/dotnet/commonNuget/kongzhitaishuchu.html","/dotnet/base/serialize/json/system_text_json.html","/dotnet/base/serialize/erjinzhi/binarywriter.html","/dotnet/base/serialize/erjinzhi/messagepack.html","/dotnet/api/miniapi.html","/dotnet/mobanyinqing/jntemplate.html","/dotnet/api/socket/","/dotnet/api/socket/supersocket.html","/dotnet/base/logOperator/ilogger.html","/dotnet/mobanyinqing/razor/","/dotnet/webyingyong/mvc/shitubianyi.html","/dotnet/base/logOperator/compomemt/sejil.html","/dotnet/jiaocheng/jiaocheng.html","/dotnet/jiaocheng/ziliaojingshuarumenpian.html","/dotnet/api/webservice/qingqiushili.html","/dotnet/base/serialize/erjinzhi/memorypack.html","/dotnet/daimafenxi/daimazhiliangguize/","/dotnet/zhuomianchengxu/dabaobushu/gengxin.html","/web/blazor/nugets/openSourceComponent.html","/dotnet/chengxujicaozuo/sourcegenerator/sourcegenerator.html","/dotnet/api/controllerApi/extensions/dongtaiapizhiplus_autoapi.html","/dotnet/base/huancun/changjiangainian.html","/dotnet/base/huancun/fenbushihuancun.html","/dotnet/base/huancun/fuwuqihuancunoutputcache.html","/dotnet/base/huancun/fuwuqihuancunresponsecaching.html","/dotnet/base/huancun/kehuduanhuancun.html","/dotnet/base/huancun/neicunhuancunmemorycahe.html","/dotnet/base/huancun/","/dotnet/gongnenganli/shiyonggongneng.html","/dotnet/buildAndRelease/release/optimizeFolder.html","/dotnet/chengxujicaozuo/jiangdllneiqiandll.html","/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/","/dotnet/commonNuget/jiaobenjieshiqi.html","/dotnet/zhuomianchengxu/wpf/ui/handycontrol.html","/dotnet/console/jiemian/jiemiangui_cs.html","/dotnet/console/yangshinugetbao/jindutiaoshellprogressbar.html","/dotnet/console/yangshinugetbao/zhizuojiaohuchengxusharprompt.html","/dotnet/base/pipeline/filter/guolvqishixian-yichangchuli.html","/dotnet/zhuomianchengxu/shangweijikaifa.html","/dotnet/api/remoteProcedureCall/httpclientchulixiangyingyasu.html","/dotnet/commonNuget/xianliu/dotnetratelimiter.html","/dotnet/zhuomianchengxu/jitongcaozuo/qidongcaozuo.html","/dotnet/daimafenxi/","/dotnet/debugging/dumpAnalyses.html","/dotnet/console/jiemian/terminal_gui.html","/dotnet/zhuomianchengxu/winform/changyongzujian.html","/web/blazor/nugets/markdig.html","/dotnet/zhuomianchengxu/wpf/ui/rubyer.html","/dotnet/api/controllerApi/webapijiekouqingqiuwanshan.html","/dotnet/base/peizhikuangjia/peizhidouqu.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyibasicrenzhengyushouquan.html","/dotnet/base/peizhikuangjia/peizhikaiguan/featuremanagement.html","/dotnet/avalonia/openSourceComponent.html","/dotnet/debugging/","/dotnet/debugging/wentifenxi/neicunfenxi.html","/dotnet/zhuomianchengxu/kuozhan/qidongexemojiemianfangan.html","/dotnet/api/controllerApi/safe/aspNetCoreRateLimit.html","/dotnet/base/pipeline/filter/","/dotnet/commonNuget/xianliu/qingqiuxianzhi/guanfangqingqiuxianzhizhongjianjian.html","/dotnet/commonNuget/xianliu/qingqiuxianzhi/qingqiuxianzhichuangkousuanfa.html","/dotnet/zhuomianchengxu/jitongcaozuo/shili/winformzhucerejianshixianjietuxiaoguo.html","/dotnet/zhuomianchengxu/jitongcaozuo/shili/wpfzhucerejianshixianjietuxiaoguo.html","/dotnet/signalr/qianhouduanfenli.html","/dotnet/zhuomianchengxu/wpf/changwenwenti.html","/dotnet/duoyuyanpeizhi.html","/dotnet/webyingyong/mvc/taghelpers.html","/dotnet/buildAndRelease/obfuscator.html","/dotnet/base/pipeline/filter/filterfangchong.html","/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichukongjian.html","/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichucaozuo.html","/dotnet/workservice/","/dotnet/buildAndRelease/release/","/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/jianchandedongtaijiazaishili.html","/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/rebachadll.html","/dotnet/zhuomianchengxu/wpf/kuozhan/congshipinzhongdiqutupian.html","/dotnet/api/qingqiubiaoshichuandi.html","/dotnet/base/serialize/","/dotnet/base/serialize/xmlxuliehua.html","/dotnet/maui/fabu/windowsfabuexe.html","/dotnet/api/webservice/dotnetzhisoapcorejianchanshiyong.html","/dotnet/zhuomianchengxu/winform/jichuzhishi/jichucaozuo.html","/dotnet/mobanyinqing/razor/microsoft_aspnetcore_mvc_razor.html","/dotnet/mobanyinqing/razor/razorlight.html","/dotnet/server/kestrel/cuowuchuli.html","/dotnet/server/kestrel/kestrel.html","/dotnet/debugging/vs2022yuanchengdiaoshiiisfuwu.html","/dotnet/debugging/xianchengdiaoshi.html","/dotnet/debugging/xingnengdiaoshi.html","/dotnet/server/diagnostics/caozuo.html","/dotnet/base/pipeline/middleware/tazhan/qingqiutouyuanyangfanhui.html","/dotnet/api/socket/touchsocket.html","/dotnet/api/controllerApi/safe/ddosAttack.html","/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/scrutorpiliangzhuce.html","/dotnet/base/pipeline/middleware/shuchuzhihangzhongjianjian.html","/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/jingtaiziyuanzhongjianjian.html","/dotnet/api/shujuchuanshujiami.html","/dotnet/api/remoteProcedureCall/restkaiyuanku.html","/dotnet/zhuomianchengxu/jitongcaozuo/windowsapi.html","/dotnet/zhuomianchengxu/kaiyuanzujian/ui.html","/dotnet/api/controllerApi/extensions/leikuyunhangwebapi.html","/dotnet/maui/kaiyuanxiangmu.html","/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/dotnetcoreplugins.html","/dotnet/chengxujicaozuo/dongtaijiazaichengxuji/plugincore.html","/dotnet/console/yangshinugetbao/spectreconsole.html","/dotnet/api/sse.html","/dotnet/zhuomianchengxu/jitongcaozuo/rejian.html","/dotnet/daimafenxi/yuandaimafenxi.html","/dotnet/zhuomianchengxu/kaiyuanzujian/netnanoframework.html","/dotnet/zhuomianchengxu/wpf/ui/materialdesign.html","/dotnet/zhuomianchengxu/peizhicunchu.html","/dotnet/zhuomianchengxu/wpf/mvvmzujian/prism/","/dotnet/avalonia/operator.html","/dotnet/kuangjiajiexi/mono.html","/dotnet/zhuomianchengxu/winform/winformscominterop.html","/dotnet/api/connectedservices.html","/dotnet/base/jiankangjiancha/jiankangjiancha.html","/dotnet/api/controllerApi/extensions/gaojichaxun.html","/dotnet/maui/rumenxuexi/huanjingzhunbei.html","/dotnet/webyingyong/mvc/jichuzhishi.html","/dotnet/zhuomianchengxu/dabaobushu/","/dotnet/youhuyinqing/","/dotnet/zhuomianchengxu/wpf/mvvmzujian/communitytoolkit_mvvm/","/dotnet/zhuomianchengxu/wpf/mvvmzujian/propertychanged_fody.html","/dotnet/kuangjiajiexi/sdkgongzuofuzai.html","/dotnet/zhuomianchengxu/wpf/jichuzhishi/jichubujushili.html","/dotnet/zhuomianchengxu/winform/jichuzhishi/guanliyuanfangshiqidongbingjudaiquanjulanjie.html","/dotnet/zhuomianchengxu/wpf/mvvmzujian/","/dotnet/zhuomianchengxu/winform/jichuzhishi/dengluxiaoguo.html","/dotnet/shengchanlidisheng/vschajian.html","/dotnet/workservice/serviceself.html","/dotnet/zhuomianchengxu/wpf/ui/wpfui.html","/dotnet/base/logOperator/compomemt/jackremotelog.html","/dotnet/base/logOperator/log4net/netFrameworkUse.html","/dotnet/base/logOperator/log4net/","/dotnet/zhuomianchengxu/winform/","/dotnet/zhuomianchengxu/winform/jichuzhishi/programwenjian.html","/dotnet/zhuomianchengxu/winform/jichuzhishi/shiyongyilaizhuru.html","/dotnet/commonNuget/diaoduqi.html","/dotnet/daimafenxi/daimazhiliang.html","/dotnet/buildAndRelease/release/iis/errorCode.html","/dotnet/buildAndRelease/release/iis/iisReleaseNet5.html","/dotnet/api/remoteProcedureCall/flurl_httpgonggonglei.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/session.html","/dotnet/zhuomianchengxu/winform/blazorhybrid/","/dotnet/base/luyou/luyou.html","/dotnet/api/swagger/tazhan/dajianswaggerhub.html","/dotnet/api/swagger/tazhan/fanhuileimingchenyingshe.html","/dotnet/base/pipeline/middleware/","/dotnet/base/pipeline/middleware/zhongjianjiandiaoyongshunxuhepiliangzhuce.html","/dotnet/base/pipeline/middleware/tazhan/jiluqingqiushuju.html","/dotnet/base/pipeline/middleware/tazhan/rizhizhongjianjian.html","/dotnet/shengchanlidisheng/kaifasuidaoshiyong.html","/dotnet/chengxujicaozuo/huoqukuangjiadebanbenhao.html","/dotnet/base/huancun/commonNuget.html","/dotnet/base/pipeline/","/dotnet/maui/caozuo/quanjuyichangchuli.html","/dotnet/maui/caozuo/shiyongautofac.html","/dotnet/zhuomianchengxu/winform/tupiangeshizhuaihuan.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/jieshao.html","/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/guanfangpiliangzhuru.html","/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/tongguotexingshixianpiliangzhuce.html","/dotnet/api/apilanjie.html","/dotnet/buildAndRelease/release/linux/bushuliuchengheshouhujincheng.html","/dotnet/buildAndRelease/","/dotnet/api/controllerApi/jiekoufanhuilei.html","/dotnet/commonNuget/communitytoolkit.html","/dotnet/base/peizhikuangjia/huanjingbianliangpeizhi.html","/dotnet/maui/rumenxuexi/jichuzhishi.html","/dotnet/maui/xaml.html","/dotnet/maui/pingtaiapi.html","/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyishujukupeizhiyuan.html","/dotnet/nuget/baobanbenzidongshengji.html","/dotnet/maui/rumenxuexi/qiantaichuangjianuihedaimachuangjianui.html","/dotnet/maui/rumenxuexi/shujubangding.html","/dotnet/maui/rumenxuexi/xiangmukuangjiajieshao.html","/dotnet/base/logOperator/nlog.html","/dotnet/aop/dispatchproxy.html","/dotnet/nuget/jiaobenfabubao.html","/dotnet/base/diaoyongzhexinxi.html","/dotnet/api/swagger/tazhan/zhuti.html","/dotnet/base/serialize/json/jsoncons_jsonpath.html","/dotnet/maui/fabu/windowsfabu.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyiapikeyrenzheng.html","/dotnet/api/controllerApi/safe/refenceCheck.html","/web/blazor/deploy/","/dotnet/buildAndRelease/release/releaseTools/nssm.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/gaishu.html","/dotnet/mobanyinqing/razor/razorengine.html","/dotnet/base/luyou/duandianluyou.html","/dotnet/maui/blazorhybrid/jieshao.html","/web/blazor/baseOperator/yuchengxian.html","/web/blazor/baseOperator/dataBind.html","/web/blazor/baseOperator/event.html","/web/blazor/baseOperator/navigaton.html","/dotnet/commonMethod/encrypt/aes.html","/dotnet/api/remoteProcedureCall/restfulfengge.html","/dotnet/chengxujicaozuo/nixiangfanbianyigongju.html","/web/blazor/baseOperator/configuration.html","/dotnet/base/yilaizhuru/gaishu.html","/dotnet/base/yilaizhuru/iockongzhifanzhuai/iockongzhifanzhuai.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/jiyuyonghujiaosedefangwenquanxiankongzhi.html","/dotnet/maui/fabu/pingguobushu.html","/dotnet/zhuomianchengxu/dabaobushu/clickoncebushu.html","/dotnet/commonNuget/hanshushibiancheng.html","/web/blazor/baseOperator/loginSample.html","/dotnet/aop/dora_interception.html","/dotnet/base/logOperator/compomemt/loki.html","/dotnet/base/logOperator/compomemt/watchdog.html","/dotnet/api/swagger/banbenkongzhi.html","/dotnet/base/yilaizhuru/xunhuanyilai.html","/dotnet/maui/blazorhybrid/diaoshi.html","/dotnet/maui/wenti.html","/dotnet/maui/fabu/anzhuofabu.html","/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html","/dotnet/api/controllerApi/douquqingqiuti.html","/dotnet/zhuomianchengxu/winform/changyongkongjian.html","/dotnet/base/yilaizhuru/autofac/autofac.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/gaishu.html","/dotnet/api/controllerApi/safe/tokenSecret.html","/dotnet/base/jingtaiwenjian/jingtaiwangzhanneironggengxin.html","/dotnet/buildAndRelease/release/linux/linuxbushu.html","/dotnet/buildAndRelease/release/linux/ubuntuReleaseNet.html","/dotnet/commonMethod/encrypt/sha.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/identity/shenru.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jiangzhixiaxian.html","/dotnet/base/yilaizhuru/autofac/shengmingzhouji.html","/dotnet/base/pipeline/middleware/tazhan/jingtaimdwenjianzhuaihuanshuchu.html","/dotnet/base/serialize/json/dynamic_json.html","/dotnet/buildAndRelease/release/linux/centosbushuwebxiangmu.html","/dotnet/base/pipeline/filter/guolvqishixian-jiyuipqingqiuxianzhi.html","/dotnet/base/pipeline/filter/guolvqishixian-zidongshiwuchuli.html","/dotnet/base/pipeline/filter/netfguolvqishili.html","/dotnet/base/pipeline/middleware/tazhan/httprizhizhongjianjian.html","/dotnet/base/pipeline/middleware/tazhan/lanjieqingqiuhefanhuishujubingjiami.html","/dotnet/zhuomianchengxu/dabaobushu/costura_fody.html","/dotnet/console/yangshinugetbao/yansecolorful_console.html","/dotnet/console/changyongcaozuo.html","/dotnet/kuangjiajiexi/startup.html","/dotnet/base/pipeline/filter/filterzhucefangshi.html","/dotnet/base/pipeline/filter/guolvqishixian-niminghuachuli.html","/dotnet/base/pipeline/filter/guolvqishixian-rizhijilu.html","/dotnet/aop/mradvice.html","/dotnet/aop/postsharp.html","/dotnet/base/peizhikuangjia/gaishu.html","/dotnet/base/peizhikuangjia/wenjianpeizhi.html","/dotnet/jiaocheng/ziliaojingshuajinjiepian.html","/web/blazor/baseOperator/chuancan.html","/dotnet/buildAndRelease/release/linux/bushujiaoben.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/casbinfangwenkongzhi.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/changyongzujian.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/shujubaohushixianxianshitoken.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/cookieshenfenrenzheng.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/kuozhanzidingyishouquan.html","/dotnet/base/jiankangjiancha/yingyongzhuangtai.html","/dotnet/zhuomianchengxu/winform/scoket.html","/dotnet/webyingyong/webform/wenjianshangchuan/tupiangeshizhuaihuan.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/sessionyuanma.html","/dotnet/commonMethod/ipchuli.html","/dotnet/base/huancun/statichuancun.html","/dotnet/console/yangshinugetbao/biaogeconsoletables.html","/dotnet/commonMethod/qianggongbaosuanfa.html","/dotnet/commonNuget/duixiangyingshe/mapster.html","/dotnet/base/peizhikuangjia/peizhikaiguan/ifeaturefilter.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/httpcontext.html","/dotnet/anquanhebiaoshi/shujubaohudataprotection.html","/dotnet/base/peizhikuangjia/jimiguanliqi.html","/dotnet/api/controllerApi/idempotent/monitorTryEnter.html","/web/blazor/nugets/blazormarkdown.html","/dotnet/signalr/messagepack.html","/dotnet/signalr/signalrshiyongjwt.html","/dotnet/base/pipeline/middleware/tazhan/fangdaolianzhongjianjian.html","/dotnet/base/peizhikuangjia/peizhijianchanjiami.html","/dotnet/base/logOperator/structLog.html","/dotnet/api/controllerApi/gechongbutongjieshougeshi.html","/dotnet/base/peizhikuangjia/peizhikaiguan/dipeibanfeatureflag.html","/dotnet/jiaocheng/ziliaojingshuajiagoupian.html","/dotnet/base/serialize/json/datacontractjsonserializer.html","/dotnet/base/serialize/json/javascriptserializer.html","/dotnet/t4moban/t4yufa.html","/dotnet/chengxujicaozuo/sourcegenerator/zidongshengchengjiekoushixianlei.html","/dotnet/base/peizhikuangjia/minglinghangpeizhi.html","/dotnet/buildAndRelease/release/iis/serverRelease.html","/dotnet/api/controllerApi/banbenkongzhi.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/cookieshenfenrenzheng/netfcookie.html","/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/session/sessiongongxiang.html","/dotnet/buildAndRelease/release/linux/supervisor.html","/dotnet/api/controllerApi/idempotent/midengxing.html","/dotnet/buildAndRelease/release/linux/anzhuanghuanjing.html","/dotnet/webyingyong/webform/shujubiao/qiantaibangdinghoutaipinjiedehtml.html","/dotnet/webyingyong/webform/shujubiao/xiugaishujudeupdatefangfa.html","/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/morentupianzhongjianjian.html","/dotnet/buildAndRelease/release/linux/shouhujincheng.html","/dotnet/webyingyong/webform/wenjianshangchuan/wenjianshangchuan.html","/dotnet/webyingyong/webform/cunchushuju/session.html","/dotnet/base/pipeline/middleware/jingtaiziyuanzhongjianjian/qishixie.html","/dotnet/api/swagger/nswag.html","/dotnet/base/yilaizhuru/autofac/zhichiaop.html","/dotnet/api/swagger/wentichuli.html","/dotnet/zhuomianchengxu/jitongcaozuo/fangzhichongfuqidong.html","/dotnet/signalr/signalrfuzaijunheng.html","/dotnet/signalr/signalrkuozhan.html","/dotnet/webyingyong/webform/changedaimajiexi/guanyulanya.html","/dotnet/webyingyong/webform/aspxjieshoupostmanchuandejsonduixiang.html","/dotnet/webyingyong/webform/webformhuancunchuli.html","/dotnet/webyingyong/webform/websocketyuxiaoxituisong.html","/dotnet/webyingyong/webform/changedaimajiexi/changedaimajiexi.html","/dotnet/webyingyong/webform/changedaimajiexi/checkboxlist.html","/dotnet/webyingyong/webform/changedaimajiexi/huoqufuwuqixinxifangfa.html","/dotnet/webyingyong/webform/changedaimajiexi/huoqujitongxinxi.html","/dotnet/webyingyong/webform/changedaimajiexi/jubushuaxin.html","/dotnet/webyingyong/webform/changedaimajiexi/shangchuanxianzhi.html","/dotnet/webyingyong/webform/changedaimajiexi/suijiyanzhengma.html","/dotnet/webyingyong/webform/changedaimajiexi/tiaozhuaixiemian.html","/dotnet/webyingyong/webform/changedaimajiexi/webconfig.html","/dotnet/webyingyong/webform/cunchushuju/cookie.html","/dotnet/webyingyong/webform/cunchushuju/cunchushuju.html","/dotnet/webyingyong/webform/shujubiao/bianligeleishujujige.html","/dotnet/webyingyong/webform/shujubiao/repeater.html","/dotnet/webyingyong/webform/wenjianshangchuan/excel.html","/dotnet/webyingyong/webform/wenjianshangchuan/tupianshangchuan.html","/dotnet/webyingyong/webform/wenjianshangchuan/tupianzhuaibase64.html","/dotnet/webyingyong/webform/xiancheng/dingshiqi.html","/dotnet/webyingyong/webform/xiancheng/jianchandexiancheng.html","/dotnet/webyingyong/webform/xiancheng/xiancheng.html","/dotnet/webyingyong/webform/xiancheng/xianchengthreadhetask.html","/dotnet/gongnenganli/appjiekoukaifa.html","/dotnet/base/huancun/cache.html","/dotnet/t4moban/t4moban.html","/dotnet/buildAndRelease/release/iis/issue.html","/live/music.html","/live/yule/banZi.html","/live/yule/joke.html","/live/food.html","/live/found.html","/live/housing.html","/live/socialInsurance.html","/live/wanggougonglve.html","/live/yule/aifuzhu.html","/live/yule/chatgptgeji.html","/live/baoxian.html","/live/gaishu.html","/live/richangtousu.html","/live/trip.html","/orm/dapper/component.html","/orm/adoNet/issue.html","/orm/efcore/issue.html","/orm/odbc/","/orm/adoNet/operation.html","/orm/efcore/jinjie/efcoreConcurrency.html","/orm/efcore/jinjie/expressionTree.html","/orm/efcore/extract/entityFrameworkEarlier.html","/orm/efcore/shijian(lishi)biao.html","/orm/odbc/odbcSqlServer.html","/orm/efcore/jichuzhishi/shujukuhanshu.html","/orm/mongodbdriver/shuiming.html","/orm/efcore/qianyishuju/daimayouxian.html","/orm/dapper/","/orm/efcore/jichuzhishi/shengchengsqlyugou.html","/orm/efcore/qianyishuju/efcorezhiminglinghanggongju.html","/orm/efcore/qianyishuju/shujukuyouxian.html","/orm/dapper/splitDbTable/coreData.html","/orm/efcore/qianyishuju/qianyijiyinjiqiao.html","/orm/dapper/parameter.html","/orm/","/orm/dapper/dapperLite.html","/orm/insql/shuiming.html","/orm/linq2db/jieshao.html","/orm/sqlkata/shuiming.html","/orm/efcore/jinjie/douxiefenli.html","/orm/adoNet/","/orm/efcore/changyongzujian/autohistory.html","/orm/efcore/changyongzujian/shuiming.html","/orm/efcore/changyongzujian/unitofwork.html","/orm/efcore/jichuzhishi/shitileipeizhi.html","/orm/efcore/jichuzhishi/baseOperation.html","/orm/efcore/","/orm/efcore/jinjie/fenkufenbiao.html","/orm/efcore/qianyishuju/migratorPackage.html","/orm/adoNet/dbhelper.html","/orm/sqlsugar/operation.html","/orm/efcore/jiamicunchushuju.html","/orm/efcore/fengzhuanggonggonglei.html","/orm/dapper/dapperCqrs.html","/orm/dapper/splitDbTable/lnskyDB.html","/orm/ef/ef.html","/orm/efcore/jichuzhishi/jiazaifangshi.html","/orm/efcore/jichuzhishi/shujukuqudong.html","/orm/efcore/youhua.html","/orm/efcore/erjihuancun/jieshao.html","/orm/efcore/changyongzujian/efcore_namingconventions.html","/orm/efcore/jichuzhishi/iqueryable.html","/orm/efcore/jichuzhishi/shitijianguanji.html","/orm/efcore/jichuzhishi/piliangcaozuo.html","/orm/efcore/jichuzhishi/shiwu.html","/orm/efcore/jinjie/xianshibianyichaxun.html","/orm/efcore/quanjuyichanglanjie.html","/orm/efcore/changyongzujian/zack_efcore_batch.html","/orm/efcore/jichuzhishi/savechanges.html","/orm/ef/efcaozuo.html","/orm/ef/linq_lambda.html","/orm/ef/youhua.html","/orm/adoNet/dongruandaimashengchengqi.html","/orm/sqlsugar/jianjie.html","/orm/sqlsugar/wentihuizong/parametercountmismatch.html","/orm/sqlsugar/wentihuizong/wentihuizong.html","/middleware/reverseProxy/traefik.html","/middleware/office/ppt/shapeCrawler.html","/middleware/fullTextSearch/elasticsearch/struct.html","/middleware/smallService/distributedObservability/distributedLogger/","/middleware/office/epubHandle.html","/middleware/tuxiangchuli/opencv/openVino.html","/middleware/gongzuoliu/","/middleware/oss/","/middleware/printPlugin/","/middleware/shijianzongxian/masstransit.html","/middleware/shijianzongxian/zack_eventbusrabbitmq.html","/middleware/tuxiangchuli/systemDrawingCommon.html","/middleware/yufajiexi/sqljiexi.html","/middleware/zidonghuacaozuo/netautogui.html","/middleware/authorize/identityserver4/shujuchijiuhua.html","/middleware/authorize/oauth/","/middleware/authorize/oauth/sichongshouquanmoshi.html","/middleware/authorize/identityserver4/mode/hybridMode.html","/middleware/grpc/grpc.html","/middleware/grpc/grpcsichongmoshi.html","/middleware/office/aspose.html","/middleware/office/miniexcel.html","/middleware/office/miniword.html","/middleware/office/nsoup.html","/middleware/office/openxml.html","/middleware/office/","/middleware/office/spire.html","/middleware/renwudiaodu/easyquartz.html","/middleware/renwudiaodu/","/middleware/renwudiaodu/timerlei.html","/middleware/shijianzongxian/","/middleware/tuxiangchuli/magick_net.html","/middleware/testMange/changyongleiku.html","/middleware/xiaoxiduilie/gaishu.html","/middleware/office/yapi/neiwangbushu.html","/middleware/office/yapi/","/middleware/testMange/duandaoduanceshi/","/middleware/testMange/jichengceshi/gaishu.html","/middleware/testMange/unitTest/xunitTest.html","/middleware/zidonghuacaozuo/cliwrap.html","/middleware/zidonghuacaozuo/","/middleware/zidonghuacaozuo/uiautomation.html","/middleware/shujuqianyi.html","/middleware/zhifuzujian.html","/middleware/oss/fluentftp.html","/middleware/oss/minio.html","/middleware/renwudiaodu/fluentscheduler.html","/middleware/fullTextSearch/elasticsearch/","/middleware/tuxiangchuli/ocr/rapidocr.html","/middleware/smallService/distributedObservability/distributedTrace/skywalking.html","/middleware/testMange/jianshu.html","/middleware/testMange/monihttpxiangying.html","/middleware/testMange/jichengceshi/testserver.html","/middleware/testMange/unitTest/msTest.html","/middleware/testMange/unitTest/xunitDependencyInjection.html","/middleware/fullTextSearch/elasticsearch/install.html","/middleware/fullTextSearch/elasticsearch/operator.html","/middleware/fullTextSearch/lucene/lucene_net.html","/middleware/smallService/fenbushisuo/fenbushisuo.html","/middleware/smallService/fenbushisuo/redisfenbushisuo.html","/middleware/reverseProxy/nginx/peizhiwenjian.html","/middleware/reverseProxy/nginx/issue.html","/middleware/reverseProxy/nginx/localhostyingshelujing.html","/middleware/reverseProxy/nginx/nginx.html","/middleware/reverseProxy/nginx/nginxpeizhinetcore.html","/middleware/reverseProxy/nginx/shiyonggongneng.html","/middleware/smallService/wangguan/wangguan.html","/middleware/reverseProxy/nginx/webui/nginxwebui.html","/middleware/grpc/grpchttpapi.html","/middleware/grpc/protowenjian.html","/middleware/identityId/ulid.html","/middleware/renwudiaodu/hangfire.html","/middleware/testMange/qiyaoceshi.html","/middleware/smallService/distributedObservability/distributedMonitoring/opentelemetry.html","/middleware/smallService/distributedObservability/distributedMonitoring/openTelemetryStartedCombat.html","/middleware/smallService/distributedObservability/distributedMonitoring/jitongjiankonghttpreportsapm.html","/middleware/smallService/distributedObservability/distributedMonitoring/prometheus.html","/middleware/smallService/distributedObservability/distributedMonitoring/","/middleware/xiaoxiduilie/rabbitmq/kongzhiqishiyongrabbitmq.html","/middleware/xiaoxiduilie/rabbitmq/rabbitmqmoshi.html","/middleware/xiaoxiduilie/rabbitmq/xiaoxiquerenmoshi.html","/middleware/fenci/jieba_net.html","/middleware/fenci/mingancizujian.html","/middleware/fenci/zhizuociyuntu.html","/middleware/reverseProxy/nginx/anzhuang/dockeranzhuangnginx.html","/middleware/smallService/","/middleware/tuxiangchuli/imagesharp.html","/middleware/tuxiangchuli/opencv/opencvsharp4.html","/middleware/tuxiangchuli/yanzhengma/","/middleware/office/closedxml.html","/middleware/pachong/shili.html","/middleware/pachong/gaishu.html","/middleware/grpc/dotnetdaimayouxiangrpcfuwu.html","/middleware/grpc/grpc-web.html","/middleware/grpc/grpcdiaoshigongju.html","/middleware/grpc/grpcliu.html","/middleware/grpc/jianquan.html","/middleware/grpc/yichanglanjieqi.html","/middleware/grpc/bushu/kaifabushu.html","/middleware/grpc/rpckuangjia/dotnetcorerpc.html","/middleware/pachong/puppeteersharp.html","/middleware/testMange/duandaoduanceshi/playwright/caozuo.html","/middleware/testMange/duandaoduanceshi/playwright/","/middleware/fullTextSearch/gaishu.html","/middleware/guizeyinqing/rulesengine.html","/middleware/office/puppeteersharp.html","/middleware/testMange/pressureTest/jmeter.html","/middleware/testMange/unitTest/testSpecification.html","/middleware/testMange/unitTest/","/middleware/tuxiangchuli/duochongmazxing_net.html","/middleware/tuxiangchuli/qrcodegenerator.html","/middleware/tuxiangchuli/opencv/emgu_cv.html","/middleware/tuxiangchuli/renlianshibie/viewfacecore.html","/middleware/testMange/unitTest/cliTest.html","/middleware/xiaoxiduilie/pulsar.html","/middleware/identityId/newidshunxuguid.html","/middleware/yinpinshipin/whisper_net.html","/middleware/shijianzongxian/shijianzongxianneicunmoshi.html","/middleware/xiaoxiduilie/rabbitmq/aspnetcore_rabbitmq.html","/middleware/xiaoxiduilie/rabbitmq/rabbitmq.html","/middleware/shijianzongxian/mediatr.html","/middleware/identityId/fenbushiweiyibiaoshi.html","/middleware/office/ip/maxmind.html","/middleware/identityId/jiyushujukufenbushiid.html","/middleware/identityId/xuehuaidgonggonglei.html","/middleware/office/npoi/npoicaozuoexcel.html","/middleware/tuxiangchuli/ocr/paddleocrsharp.html","/middleware/tuxiangchuli/huoqushexiangtoupaizhao.html","/middleware/identityId/idhelperxuehuaid.html","/middleware/yinpinshipin/ffmpeg/sdcb_ffmpeg.html","/middleware/office/htmlagilitypack.html","/middleware/smallService/polly.html","/middleware/office/onlyoffice.html","/middleware/tuxiangchuli/opencv/opencvsharp.html","/middleware/tuxiangchuli/renlianshibie/arcsoft.html","/middleware/tuxiangchuli/renlianshibie/facerecognitiondotnet.html","/middleware/tuxiangchuli/renlianshibie/luxandfacesdk.html","/middleware/tuxiangchuli/shoushishibie/mediapipe_net.html","/middleware/testMange/mohuceshi/sharpfuzz.html","/middleware/shijianzongxian/slimmessagebus.html","/middleware/smallService/xianliu.html","/middleware/smallService/distributedObservability/distributedLogger/efk.html","/middleware/smallService/distributedObservability/distributedLogger/elk.html","/middleware/smallService/distributedObservability/distributedLogger/exceptionless.html","/middleware/smallService/distributedObservability/distributedLogger/loki.html","/middleware/smallService/distributedObservability/distributedLogger/seq.html","/middleware/smallService/distributedObservability/distributedMonitoring/grafana.html","/middleware/xiaoxiduilie/kafka.html","/middleware/office/wenbenduibi/diffplex.html","/middleware/duanxin/","/middleware/gongzuoliu/ccflow.html","/middleware/notification/notificationService.html","/middleware/fullTextSearch/meilisearch/","/middleware/office/npoi/npoi.html","/middleware/smallService/distributedObservability/distributedTrace/jaeger.html","/middleware/smallService/distributedObservability/distributedTrace/zipkin.html","/middleware/identityId/yitterxuehuaid.html","/middleware/testMange/fuzaiceshi/k6.html","/middleware/testMange/jizhunceshi/benchmarkdotnet.html","/middleware/authorize/openidconnect.html","/middleware/cangku/octokit.html","/middleware/office/epplus.html","/middleware/smallService/jiagoutu.html","/middleware/office/npoi/npoiyiwen.html","/middleware/office/pdf/ironpdf.html","/middleware/office/pdf/itextsharp.html","/middleware/office/pdf/magick_net.html","/middleware/office/pdf/pdfsharp.html","/middleware/office/pdf/questpdf.html","/middleware/office/youjian/mailkit.html","/middleware/smallService/rongduanjiangji.html","/middleware/smallService/tongyipeizhiguanli/nacos.html","/middleware/yinpinshipin/ffmpeg/jichujieshao.html","/middleware/yinpinshipin/ffmpeg/shipinjietu.html","/middleware/yinpinshipin/ffmpeg/ffmpeg_autogen.html","/middleware/xiaoxiduilie/mqtt.html","/middleware/jiedianbianjiqi/stnodeeditor.html","/middleware/yinpinshipin/yuyinliaotian.html","/middleware/renwudiaodu/quartz/gzy_quartz_mui.html","/middleware/yinpinshipin/liumeitifuwu/","/middleware/yinpinshipin/liumeitifuwu/zlmediakit.html","/middleware/tuxiangchuli/yanzhengma/chumoyanzhengmasimcaptcha.html","/middleware/smallService/fenbushishiwu/fenbushishiwu.html","/middleware/testMange/fuzaiceshi/","/middleware/yinpinshipin/speechsynthesizeryuyin.html","/middleware/office/markdown/markdig.html","/middleware/xiaoxiduilie/rabbitmq/easynetq.html","/middleware/xiaoxiduilie/rabbitmq/rabbitmqtuli.html","/middleware/xiaoxiduilie/rocketmq/gaishu.html","/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqsixin.html","/middleware/testMange/duandaoduanceshi/playwright/bushu.html","/middleware/tuxiangchuli/yanzhengma/huakuaiyanzhengmalazyslidecaptcha.html","/middleware/testMange/pressureTest/nbomberyace.html","/middleware/shijianzongxian/jaina.html","/middleware/shijianzongxian/masaframework.html","/middleware/pachong/htmlagilitypack.html","/middleware/authorize/identityserver4/kuaisudajianxiangmu.html","/middleware/authorize/identityserver4/mode/codeMode.html","/middleware/yanchiduilie/jianjie.html","/middleware/yanchiduilie/zidingyiyanchiduilie.html","/middleware/","/middleware/smallService/cuowuzhuizonghexingnengjiankong/sentry.html","/middleware/yanchiduilie/jishiguanliqi.html","/middleware/oss/httpfileserver.html","/middleware/notification/notificationCollect.html","/middleware/oss/filebrowser.html","/middleware/xiaoxiduilie/rabbitmq/xianzhixunhuanxiaofei.html","/middleware/fullTextSearch/redisearch.html","/middleware/fullTextSearch/solr/jieshao.html","/middleware/office/wenbenduibi/htmldiff_net.html","/middleware/smallService/fenbushishiwu/fenbushishiwu-zuizhongyizhixingcap.html","/middleware/reverseProxy/nginx/webui/nginxconfig.html","/middleware/renwudiaodu/quartz/netfshiyong.html","/middleware/office/anglesharp.html","/middleware/pachong/anglesharp.html","/middleware/smallService/fuwuzhuceyufaxian/consul.html","/middleware/smallService/fuwuzhuceyufaxian/eureka.html","/middleware/smallService/fuwuzhuceyufaxian/fuwuzhuceyufaxian.html","/middleware/fullTextSearch/lucene/lucene-searchextensions.html","/middleware/tuxiangchuli/yanzhengma/tuxingyanzhengmaimagesharp.html","/middleware/tuxiangchuli/yanzhengma/tuxingyanzhengmalazycaptcha.html","/middleware/smallService/wangguan/wangguan-ocelot.html","/middleware/yufajiexi/irony.html","/middleware/office/markdown/markdownsharp.html","/middleware/authorize/openiddict/","/middleware/testMange/pressureTest/webapibenchmark.html","/middleware/yanchiduilie/redishuancunguojishijian.html","/middleware/identityId/hashidsjianduanzifuchuanid.html","/middleware/office/pdf/itext7.html","/middleware/yanchiduilie/hangfireyanchiduilie.html","/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqyanchiduilie.html","/middleware/smallService/tongyipeizhiguanli/agileconfig.html","/middleware/smallService/wangguan/wangguan-yarp.html","/middleware/office/csv/csvfile.html","/middleware/office/csv/csvhelper.html","/middleware/office/csv/gaishu.html","/middleware/testMange/specflowhangweiceshi.html","/middleware/pachong/changyongzujian.html","/middleware/office/ip/ip2region.html","/middleware/office/pdf/haukcode_wkhtmltopdfdotnet.html","/middleware/office/pdf/aspose_pdf.html","/middleware/renwudiaodu/antjob.html","/middleware/tuxiangchuli/duochongmaskiasharp_qrcode.html","/middleware/tuxiangchuli/tiaoxingmabarcodelib.html","/middleware/tuxiangchuli/yanzhengma/huakuaiyanzhengmaverificationcode.html","/middleware/pachong/fuzhugongju.html","/middleware/authorize/identityserver4/","/middleware/authorize/identityserver4/chijiuhuabiaoshuiming.html","/middleware/authorize/identityserver4/ui.html","/middleware/authorize/identityserver4/ziyuanfuwurenzheng.html","/middleware/authorize/identityserver4/mode/implicitMode.html","/middleware/authorize/identityserver4/mode/clientCredentialsMode.html","/middleware/authorize/identityserver4/mode/resourceOwnerPasswordMode.html","/middleware/oss/aliyunoss.html","/middleware/oss/fastdfs.html","/middleware/oss/tfs.html","/middleware/office/youjian/fluentemail.html","/middleware/smallService/tongyipeizhiguanli/apollo.html","/middleware/smallService/tongyipeizhiguanli/zookeeper.html","/middleware/smallService/wangguan/wangguan-kong.html","/middleware/smallService/distributedObservability/distributedLogger/splunk.html","/middleware/smallService/distributedObservability/distributedMonitoring/czgl_processmetrics.html","/middleware/smallService/distributedObservability/distributedTrace/butterfly.html","/middleware/testMange/pressureTest/","/middleware/smallService/distributedObservability/distributedTrace/","/middleware/renwudiaodu/quartz/quartz.html","/middleware/renwudiaodu/schedulemaster.html","/middleware/renwudiaodu/xxl-job.html","/middleware/tuxiangchuli/","/middleware/office/npoi/npoipeizhi.html","/middleware/smallService/fenbushisuo/shujukufenbushisuo.html","/middleware/office/exceltohtml.html","/middleware/office/towersoft_htmltoexcel.html","/middleware/duanlianjie/hashidsshixianduanlianjie.html","/middleware/office/pdf/spire_pdf.html","/middleware/renwudiaodu/coravel.html","/middleware/authorize/identityserver4/issue.html","/middleware/duanxin/aliyunduanxin.html","/middleware/duanxin/yunlianrongtongxunduanxin.html","/middleware/oss/qiniuyuncunchu.html","/middleware/duanlianjie/duanlianjie.html","/middleware/gongzuoliu/visor_js.html","/middleware/authorize/keycloak.html","/middleware/reverseProxy/nginx/anzhuang/linuxanzhuangnginx.html","/middleware/authorize/oauth/sample.html","/middleware/printPlugin/fastreport.html","/middleware/gongzuoliu/elsa.html","/middleware/gongzuoliu/mxgraph.html","/middleware/gongzuoliu/workflow-core.html","/middleware/office/pdf/dinkToPdf.html","/middleware/sonar.html","/middleware/graphql.html","/middleware/xiaoxiduilie/changjianwenti.html","/middleware/xiaoxiduilie/xiaoxiduilieredis.html","/middleware/printPlugin/frontPrint/default.html","/middleware/printPlugin/frontPrint/httpprinter.html","/middleware/printPlugin/frontPrint/jcp.html","/middleware/printPlugin/frontPrint/lodop.html","/middleware/reverseProxy/nginx/dongjingfenli.html","/middleware/reverseProxy/nginx/gaokeyong.html","/middleware/xiaoxiduilie/rabbitmq/shiyongzongjie.html","/middleware/reverseProxy/nginx/anzhuang/windowsanzhuangnginx.html","/middleware/xiaoxiduilie/rabbitmq/anzhuang/dockeranzhuangrabbitmq.html","/middleware/xiaoxiduilie/rabbitmq/anzhuang/linuxanzhuangrabbitmq.html","/middleware/xiaoxiduilie/rabbitmq/anzhuang/windowsanzhuangrabbitmq.html","/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqxiaoxikekaoxingfenxiheyingyong.html","/soft/devTools/communicationTest.html","/soft/devTools/codeStatistics.html","/soft/devTools/dbTools/","/soft/windows/wslLinux.html","/dataBase/sqlserver/install/linuxInstall.html","/soft/webAddress.html","/soft/softCollection.html","/soft/devTools/codeConfig.html","/soft/devTools/linqpad.html","/soft/devTools/neiwangchuantou.html","/soft/devTools/vscode.html","/soft/windows/picGoImageStorage.html","/soft/devTools/dbTools/dbchm.html","/soft/browserPlug.html","/soft/game.html","/soft/devTools/nssm.html","/soft/devTools/VisualStudio/environmentConfig.html","/soft/uos.html","/soft/devTools/openSourceProtocol.html","/cloud/container/docker/markSmallImage.html","/soft/devTools/Postman/postman.html","/soft/devTools/VisualStudio/useSkill.html","/soft/devTools/VisualStudio/vs2019Install.html","/soft/photoshop.html","/softwareDesign/systemDesign/oneTimePassword.html","/softwareDesign/seeSystem/erpSystem.html","/softwareDesign/seeSystem/wmsSystem.html","/softwareDesign/domainDrivenDesign/codingPractice.html","/softwareDesign/baseTheory.html","/softwareDesign/changjianderuanjianjiagougaishu.html","/softwareDesign/","/softwareDesign/xuqiufenxihesheji.html","/softwareDesign/domainDrivenDesign/clearArchitecture.html","/softwareDesign/highQualityCode/designPrinciples.html","/softwareDesign/highQualityCode/shuiming.html","/softwareDesign/openSourceFrame/manyTenant.html","/softwareDesign/openSourceFrame/wtm.html","/softwareDesign/systemDesign/clientTryOut.html","/softwareDesign/domainDrivenDesign/commonConcept/dddzhishiti.html","/softwareDesign/domainDrivenDesign/commonConcept/dddzhizhiduixiang.html","/softwareDesign/highQualityCode/guifanyuchonggou/jieou.html","/softwareDesign/highQualityCode/mianxiangduixiang/leizhijiandeguanji.html","/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiangfenxi.html","/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixianghemianxiangguocheng.html","/softwareDesign/openSourceFrame/abp/changyongmingling.html","/softwareDesign/openSourceFrame/abp/mokuaiheyilai.html","/softwareDesign/openSourceFrame/abp/shuiming.html","/softwareDesign/openSourceProject.html","/softwareDesign/domainDrivenDesign/commonConcept/modelDesignMode.html","/softwareDesign/highQualityCode/designMode/chuangjianxing/singletonMode.html","/softwareDesign/domainDrivenDesign/commonConcept/","/softwareDesign/domainDrivenDesign/","/softwareDesign/systemDesign/loginSecurity.html","/softwareDesign/highQualityCode/designMode/hangweixing/zhongjiezhemoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/jieshiqimoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/minglingmoshi.html","/softwareDesign/highQualityCode/guifanyuchonggou/chonggougaishu.html","/softwareDesign/seeSystem/mesSystem/","/softwareDesign/highQualityCode/designMode/chuangjianxing/factoryMode.html","/softwareDesign/highQualityCode/designMode/hangweixing/beiwanglumoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/fangwenzhemoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/diedaiqimoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/zhuangtaimoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/zhizelianmoshi.html","/softwareDesign/highQualityCode/designMode/overview.html","/softwareDesign/highQualityCode/designMode/hangweixing/celvemoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/mobanmoshi.html","/softwareDesign/highQualityCode/designMode/hangweixing/guanchazhemoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/qiaojiemoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/zhuangshiqimoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/xiangyuanmoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/dailimoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/zugemoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/menmianmoshi.html","/softwareDesign/highQualityCode/designMode/jiegouxing/kuopeiqimoshi.html","/softwareDesign/highQualityCode/designMode/chuangjianxing/yuanxingmoshi.html","/softwareDesign/highQualityCode/designMode/chuangjianxing/jianzaozhemoshi.html","/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiang.html","/softwareDesign/highQualityCode/guifanyuchonggou/chucuodefanhuizhi.html","/softwareDesign/highQualityCode/guifanyuchonggou/bianmaguifan.html","/softwareDesign/seeSystem/quanxianjitong.html","/softwareDesign/highQualityCode/ruhepingjiadaimahaohuai.html","/softwareDesign/bianchengsaixiang.html","/softwareDesign/highQualityCode/guifanyuchonggou/mingmingfangfa.html","/web/blazor/antDesignBlazor/","/web/blazor/openSourceSample.html","/web/javascript.html","/web/blazor/blazorise.html","/web/vue/shuiming.html","/web/webkaifa/borwserduixiang.html","/web/webkaifa/http.html","/web/webkaifa/changedaimajiexi/liulanqiqingqiutou.html","/web/webkaifa/changedaimajiexi/url.html","/web/vue/changyongcaozuo.html","/web/npm/pnpm.html","/web/npm/bushu/jiaobenwenjian.html","/web/npm/shuiming.html","/web/blazor/blazorspark.html","/web/layui/shuiming.html","/web/webkaifa/freeApi.html","/web/blazor/masablazor/","/web/webkaifa/sucaishouji.html","/web/blazor/masablazor/commonOperator.html","/web/blazor/masablazor/sample/layout.html","/web/jq/ajaxyibutongbu.html","/web/webkaifa/spa.html","/web/webkaifa/htmlgeshi.html","/web/webkaifa/webscoket.html","/web/webkaifa/changedaimajiexi/sousuoyinqingjiqiao.html","/dataBase/gongyoubufen/executeOrder.html","/dataBase/neo4j/","/dataBase/sqlserver/base/functions.html","/dataBase/gongyoubufen/dashujuchaxunkuaisuyouhua.html","/dataBase/gongyoubufen/shujukulianjiechi.html","/dataBase/oracle/hanshu.html","/dataBase/oracle/jichucaozuo.html","/dataBase/oracle/shuiming.html","/dataBase/redis/","/dataBase/sqlserver/dingshibeifenjihua.html","/dataBase/sqlserver/issue.html","/dataBase/sqlserver/tazhan.html","/dataBase/oracle/dotnetcaozuo/dotnetcaozuo.html","/dataBase/oracle/dotnetcaozuo/oraclehelper.html","/dataBase/oracle/oracleshiyongwenti/oracleshiyongwenti.html","/dataBase/oracle/shujukubeifenhehaiyuan/shujukubeifenhehaiyuan.html","/dataBase/oracle/anzhuang/oracleinstallclient12_2anzhuangjiaocheng.html","/dataBase/oracle/anzhuang/winx64_12201_clientanzhuang.html","/dataBase/sqlserver/base/hierarchyid.html","/dataBase/sqlserver/base/operation.html","/dataBase/sqlserver/install/dockerInstall.html","/dataBase/clickhouse/changyongcaozuo.html","/dataBase/clickhouse/shuiming.html","/dataBase/mysql/shuiming.html","/dataBase/gongyoubufen/nosqlReadme.html","/dataBase/gongyoubufen/","/dataBase/gongyoubufen/shiwu.html","/dataBase/gongyoubufen/shujukuqianyi.html","/dataBase/postgresql/hanshu.html","/dataBase/mysql/jichuzhishi/jichuzhishi.html","/dataBase/mysql/jichuzhishi/mysqlshujuleixing.html","/dataBase/mysql/jinjie/zhucongfuzhi.html","/dataBase/mysql/mysqlhanshu/mysqlhanshu.html","/dataBase/mysql/mysqlhanshu/shujuleixing.html","/dataBase/mysql/yudaodewenti/diguichubulaishangji.html","/dataBase/mysql/yudaodewenti/netFrameworkUse.html","/dataBase/mysql/zhihangjihua/jiancesuoyinshifoushengxiao.html","/dataBase/redis/zujian/freeredis.html","/dataBase/redis/zujian/nrejson.html","/dataBase/redis/zujian/stackexchange/shuiming.html","/dataBase/postgresql/jichuzhishi.html","/dataBase/sqlserver/","/dataBase/litedb/gaishu.html","/dataBase/postgresql/shouquan.html","/dataBase/postgresql/shuiming.html","/dataBase/postgresql/shujukushiwu.html","/dataBase/postgresql/biaoziduanleixing/shijianchuli.html","/dataBase/gongyoubufen/jiejuefangan.html","/dataBase/sqlite/sqlitefts5.html","/dataBase/postgresql/zhihangjihua.html","/dataBase/postgresql/zhuaiyizifu.html","/dataBase/redis/redisshujuleixing/redisshujuleixing.html","/dataBase/redis/quanwenjiansuo.html","/dataBase/mongodb/daimacaozuo.html","/dataBase/mysql/jichuzhishi/cunchuguocheng.html","/dataBase/mysql/jichuzhishi/hanshu.html","/dataBase/gongyoubufen/fenkufenbiao.html","/dataBase/gongyoubufen/shujukusheji.html","/dataBase/gongyoubufen/tools/dbtool.html","/dataBase/redis/jichumingling.html","/dataBase/redis/anzhuang/bushufangan.html","/dataBase/redis/anzhuang/linuxanzhuangredis.html","/dataBase/redis/anzhuang/windowskehuduan.html","/dataBase/mongodb/gainianjiexi.html","/dataBase/mongodb/jibencaozuo.html","/dataBase/redis/zujian/csredis.html","/dataBase/redis/zujian/stackexchange/redishelper.html","/dataBase/redis/zujian/stackexchange/stackexchange_redis.html","/dataBase/redis/duolufuyong.html","/dataBase/redis/redisfabudingyue.html","/dataBase/redis/redisshujuleixing/zifuchuan.html","/dataBase/redis/yiwenhebug/queshaomsvcp140_dll.html","/dataBase/mongodb/linuxanzhuang/windowsanzhuang.html","/dataBase/mongodb/linuxanzhuang/docker-composebushumongodb.html","/dataBase/damengshujuku/datagriplianjie.html","/dataBase/redis/zujian/jianchanshiyong.html","/dataBase/mongodb/jieshao.html","/dataBase/mysql/jichuzhishi/fenoubiao.html","/dataBase/mysql/jichuzhishi/suoyin.html","/dataBase/postgresql/biaoziduanleixing/biaoziduanleixing.html","/dataBase/mysql/jiaoben/mysqlbeifenjiaoben.html","/dataBase/mysql/yudaodewenti/issue.html","/dataBase/zhongjianjian/sqlshenhechaxunpingtai.html","/dataBase/mysql/jichuzhishi/shiwu.html","/dataBase/oracle/oracleshiyongwenti/11gchuangjianshujuku.html","/dataBase/oracle/shujukubeifenhehaiyuan/fuwuqidingshijihua.html","/dataBase/mysql/jichuzhishi/suo.html","/dataBase/postgresql/anzhuang.html","/dataBase/sqlite/jichuzhishi.html","/dataBase/mysql/jichuzhishi/shujubiao.html","/dataBase/redis/redisshujuleixing/hyperloglog.html","/dataBase/elasticsearch/jieshao.html","/dataBase/damengshujuku/gaishu.html","/dataBase/mysql/mysqlhanshu/duibi.html","/dataBase/redis/zujian/redisom.html","/dataBase/gongyoubufen/suoyin.html","/dataBase/mysql/jichuzhishi/utf8heutf8mb4deoubie.html","/dataBase/sqlserver/dbhelper.html","/dataBase/redis/jianchanjieshao/chijiuhua.html","/dataBase/mongodb/zhihangjihua.html","/dataBase/redis/redisxiaoxiduilie.html","/dataBase/redis/anzhuang/docker-composebushuredis.html","/dataBase/cassandra/jibencaozuo.html","/dataBase/cassandra/jieshao.html","/dataBase/indexeddb/liulanqishujuku.html","/dataBase/mongodb/shiyongchangjing.html","/dataBase/mysql/codeOperator.html","/dataBase/mysql/dbHelperMySQL.html","/dataBase/oracle/changyongshujuleixing.html","/dataBase/oracle/dblink.html","/dataBase/sqlite/jieshao.html","/dataBase/mongodb/linuxanzhuang/linuxanzhuang.html","/dataBase/mysql/install/dockerInstall.html","/dataBase/mysql/install/linuxInstall.html","/dataBase/mysql/install/","/dataBase/mysql/install/windowInstall.html","/dataBase/mysql/jiaoben/mysqldumpOperator.html","/dataBase/mysql/jichuzhishi/chaxunshuju.html","/dataBase/mysql/jichuzhishi/liecaozuo.html","/dataBase/mysql/jichuzhishi/yaoshutiaojian.html","/dataBase/mysql/jichuzhishi/zhihangshunxu.html","/dataBase/mysql/jichuzhishi/zhihangyugou.html","/dataBase/mysql/jinjie/federated.html","/dataBase/mysql/shujukuyouhuajilu/chaxunsql.html","/dataBase/mysql/shujukuyouhuajilu/douxiefenli.html","/dataBase/mysql/shujukuyouhuajilu/jianbiaoyugouyouhua.html","/dataBase/mysql/shujukuyouhuajilu/jinshencaozuo.html","/dataBase/mysql/shujukuyouhuajilu/shujukuyouhuajilu.html","/dataBase/redis/jianchanjieshao/neicunyouhua.html","/dataBase/redis/redisshujuleixing/hashleixing.html","/dataBase/redis/redisshujuleixing/jigeset.html","/dataBase/redis/redisshujuleixing/jigesortedset.html","/dataBase/redis/redisshujuleixing/liebiaolist.html","/dataBase/redis/yiwenhebug/yiwenhebug.html","/dataBase/sqlserver/base/dataType.html","/dataBase/sqlserver/install/windowsInstall.html","/dataBase/gongyoubufen/cacheDbConsistency.html","/middleware/office/pdf/pdfSample.html","/dotnet/chengxujicaozuo/interceptDLL.html","/dotnet/commonNuget/ikvmOperation.html","/dotnet/chengxujicaozuo/pInvokeDLL.html","/middleware/zidonghuacaozuo/flaUIAutomation.html","/dotnet/commonMethod/encrypt/chinaEncrypt.html","/cloud/k3s/k3sDeployKuboard.html","/dotnet/zhuomianchengxu/dabaobushu/InnoSetupBuild.html","/computerBasics/os/memory.html","/computerBasics/network/","/computerBasics/arithmetic/","/computerBasics/arithmetic/taskOperator.html","/computerBasics/arithmetic/youxiangmohuantutu.html","/computerBasics/network/tcp.html","/computerBasics/os/cpu.html","/computerBasics/dataStructure/","/computerBasics/os/taskRunStatus.html","/computerBasics/arithmetic/sortAlgorithm.html","/computerBasics/arithmetic/fuzadu.html","/computerBasics/dataStructure/singleLinkedList.html","/computerBasics/arithmetic/common.html","/computerBasics/arithmetic/diguiyouhua.html","/computerBasics/arithmetic/weiyuyunsuan.html","/dotnet/csharp/duixiangheleixing/closure.html","/dotnet/csharp/changedaimajiexi.html","/dotnet/csharp/","/dotnet/csharp/threadConcurrencyAndAsync/async/","/dotnet/csharp/threadConcurrencyAndAsync/async/changetoken.html","/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshi.html","/dotnet/csharp/threadConcurrencyAndAsync/threadPool.html","/dotnet/csharp/digui.html","/dotnet/csharp/emit.html","/dotnet/csharp/jiaoyanfangfa.html","/dotnet/csharp/yasuhejieyasu.html","/dotnet/csharp/zhengzebiaodashijiaoyan.html","/dotnet/csharp/duixiangheleixing/haxi.html","/dotnet/csharp/hexincsharp/byte.html","/dotnet/csharp/hexincsharp/dynamic.html","/dotnet/csharp/hexincsharp/qiyuan.html","/dotnet/csharp/hexincsharp/shuzu.html","/dotnet/csharp/jigecaozuo/jigecaozuo.html","/dotnet/csharp/hexincsharp/string.html","/dotnet/csharp/queue/channel.html","/dotnet/csharp/wanglao.html","/dotnet/csharp/dingshiqi.html","/dotnet/csharp/kaobeifangfa.html","/dotnet/csharp/yichang.html","/dotnet/csharp/duixiangheleixing/kuozhanfangfa.html","/dotnet/csharp/fanshe/fanshexiangjie.html","/dotnet/csharp/hexincsharp/yuchulizhiling.html","/dotnet/csharp/renwutongbu/","/dotnet/csharp/bulongguolvqi.html","/dotnet/csharp/clr.html","/dotnet/csharp/cunchujiegou.html","/dotnet/csharp/dongtaishengchengdaima.html","/dotnet/csharp/dtohepoco.html","/dotnet/csharp/leixingzhuaihuan.html","/dotnet/csharp/mingmingmoshi.html","/dotnet/csharp/pooling.html","/dotnet/csharp/yuyanbanbenjilu.html","/dotnet/csharp/dingzhishujujiegou/xingnengheshishixingchuli.html","/dotnet/csharp/duixiangheleixing/attribute.html","/dotnet/csharp/duixiangheleixing/changyongdeshujujiegou.html","/dotnet/csharp/duixiangheleixing/chouxianglei.html","/dotnet/csharp/duixiangheleixing/fangwenxiushifu.html","/dotnet/csharp/duixiangheleixing/fanxing.html","/dotnet/csharp/duixiangheleixing/jiegouti.html","/dotnet/csharp/duixiangheleixing/jiekou.html","/dotnet/csharp/duixiangheleixing/lei.html","/dotnet/csharp/duixiangheleixing/meiju.html","/dotnet/csharp/duixiangheleixing/nibianxiebian.html","/dotnet/csharp/duixiangheleixing/nimingleixing.html","/dotnet/csharp/duixiangheleixing/shujuleixing.html","/dotnet/csharp/fanshe/dynamic.html","/dotnet/csharp/fanshe/fangfa.html","/dotnet/csharp/fanshe/fanshe.html","/dotnet/csharp/fanshe/fanshejiazaidll.html","/dotnet/csharp/fanshe/newbe_objectvisitor.html","/dotnet/csharp/gaojizhuti/biaodashishu.html","/dotnet/csharp/gaojizhuti/shijian.html","/dotnet/csharp/gaojizhuti/weituo.html","/dotnet/csharp/garbageCollection/","/dotnet/csharp/garbageCollection/workingMethod.html","/dotnet/csharp/hexincsharp/paixu.html","/dotnet/csharp/hexincsharp/rijiheshijian.html","/dotnet/csharp/hexincsharp/shuzhi.html","/dotnet/csharp/hexincsharp/yuanzu.html","/dotnet/csharp/hexincsharp/yudingyileixing.html","/dotnet/csharp/jigecaozuo/diedaiqi.html","/dotnet/csharp/jigecaozuo/ienumerable.html","/dotnet/csharp/jigecaozuo/","/dotnet/csharp/jigecaozuo/shuzu.html","/dotnet/csharp/jigecaozuo/stack.html","/dotnet/csharp/jigecaozuo/suoyinqi.html","/dotnet/csharp/linq/jiaojiebingji.html","/dotnet/csharp/linq/lambda.html","/dotnet/csharp/linq/linqExtension.html","/dotnet/csharp/linq/linqhelambdaduibi.html","/dotnet/csharp/linq/selectmany.html","/dotnet/csharp/linq/yunsuanfu.html","/dotnet/csharp/objectDestruction/","/dotnet/csharp/queue/priorityqueue.html","/dotnet/csharp/queue/queue.html","/dotnet/csharp/roslyn/codeanalysis.html","/dotnet/csharp/roslyn/natasha.html","/dotnet/csharp/roslyn/","/dotnet/csharp/roslyn/scripting.html","/dotnet/csharp/threadConcurrencyAndAsync/bendecunchu.html","/dotnet/csharp/threadConcurrencyAndAsync/concurrency.html","/dotnet/csharp/threadConcurrencyAndAsync/limitingConcurrency.html","/dotnet/csharp/threadConcurrencyAndAsync/parallel.html","/dotnet/csharp/threadConcurrencyAndAsync/","/dotnet/csharp/threadConcurrencyAndAsync/sharedMemory.html","/dotnet/csharp/threadConcurrencyAndAsync/sisuo.html","/dotnet/csharp/threadConcurrencyAndAsync/threadSync.html","/dotnet/csharp/wenjianheliu/dotnetliu.html","/dotnet/csharp/wenjianheliu/iomoxing.html","/dotnet/csharp/wenjianheliu/lujingwenti.html","/dotnet/csharp/wenjianheliu/streamkuozhanlei.html","/dotnet/csharp/wenjianheliu/wenjianyumulucaozuo.html","/dotnet/csharp/windowfuwu/netchuangjianwindowsfuwu.html","/dotnet/csharp/windowfuwu/netcorechuangjianwindowsfuwu.html","/dotnet/csharp/windowfuwu/windowfuwu.html","/dotnet/csharp/yunsuanfuhebiaodashi/diedaiyugou.html","/dotnet/csharp/yunsuanfuhebiaodashi/switch.html","/dotnet/csharp/zhenduan/stopwatchlei.html","/dotnet/csharp/zhenduan/tiaojianbianyi.html","/dotnet/csharp/jigecaozuo/gonggonglei/fenxiechuli.html","/dotnet/csharp/jigecaozuo/gonggonglei/piliangchulijige.html","/dotnet/csharp/jigecaozuo/kuozhan/arraypoolMemorypool.html","/dotnet/csharp/jigecaozuo/kuozhan/dictionaryshixianyuanli.html","/dotnet/csharp/jigecaozuo/kuozhan/shuazepaixusuanfa.html","/dotnet/csharp/jigecaozuo/kuozhan/zhibiangengtongzhidictionary.html","/dotnet/csharp/jigecaozuo/kuozhan/zidingyipaixu.html","/dotnet/csharp/threadConcurrencyAndAsync/async/tapmoshiyanhua.html","/dotnet/csharp/threadConcurrencyAndAsync/async/yibushili1.html","/dotnet/csharp/threadConcurrencyAndAsync/async/yibushili2.html","/otherLanguage/python/changjiancuowu.html","/otherLanguage/python/idechajian.html","/otherLanguage/python/xiaoshili.html","/otherLanguage/xml/caozuoxml/caozuoxml.html","/otherLanguage/xml/caozuoxml/douquxml.html","/otherLanguage/xml/caozuoxml/xmlkuzhongchazhaoshuju.html","/otherLanguage/golang/jichuzhishi.html","/otherLanguage/java/shuoming.html","/otherLanguage/python/shuoming.html","/otherLanguage/xml/shuoming.html","/otherLanguage/shell/bashjichuzhishi.html","/otherLanguage/shell/shelljichu.html","/otherLanguage/python/changyongjiaoben.html","/otherLanguage/python/jibenshiyong/jibenshiyong.html","/otherLanguage/python/jibenshiyong/qiehuanyuan.html","/otherLanguage/golang/anzhuang.html","/otherLanguage/python/xuexiziliao.html","/otherLanguage/python/youqukaiyuanxiangmu.html","/otherLanguage/python/changyongjichugongneng.html","/otherLanguage/python/jibenshiyong/dabaoexe.html","/otherLanguage/python/disanfangku/changyongbao.html","/otherLanguage/python/disanfangku/disanfangku.html","/otherLanguage/python/jibenshiyong/kuaijiejian.html","/otherLanguage/python/jichuyufa/dailiip.html","/otherLanguage/python/jichuyufa/jibenshujuleixing.html","/otherLanguage/python/jichuyufa/jichuyufa.html","/otherLanguage/python/jichuyufa/neizhihanshu.html","/otherLanguage/python/jichuyufa/qingqiutou.html","/otherLanguage/python/jichuyufa/wenjiancaozuo.html","/otherLanguage/python/jichuyufa/xiazai.html","/otherLanguage/python/jichuyufa/xpath.html","/soft/Linux/baocunfanghuoqiangguize.html","/soft/Linux/linux.html","/soft/Linux/selinux.html","/soft/Linux/Centos/centos.html","/soft/Linux/Centos/mingling.html","/soft/Linux/Ubuntu/gaishu.html","/soft/Linux/Install/centos7anzhuangjavahuanjing.html","/soft/Linux/Install/hypervanzhuangcentos7.html","/soft/Linux/Install/hypervInstallUbuntu.html","/soft/Linux/Install/multipass.html","/soft/Linux/shCommand.html","/soft/windows/batmingling.html","/soft/windows/cipanqingli.html","/soft/windows/sortRecommend.html","/soft/windows/windows.html","/soft/windows/windowsStore.html","/soft/Linux/tools.html","/soft/serverConfigs/ddns.html","/soft/serverConfigs/dns.html","/soft/serverConfigs/fangwenneiwangfuwu.html","/soft/serverConfigs/","/soft/serverConfigs/zhengshu.html","/soft/windows/docsWeb.html","/soft/windows/mdTools.html","/soft/windows/hyperv.html","/soft/devTools/dbTools/navicat.html","/soft/devTools/JetBrains/datagrip.html","/soft/devTools/JetBrains/dotmemery.html","/soft/devTools/JetBrains/dotpeek.html","/soft/devTools/JetBrains/dottrace.html","/soft/devTools/JetBrains/gaishu.html","/soft/devTools/JetBrains/rider.html","/soft/devTools/projectManage/chandao.html","/soft/devTools/projectManage/communityserver.html","/soft/devTools/Postman/jieshao.html","/soft/devTools/Postman/xiangshideruanjian.html","/soft/devTools/sourceCodeManage/codeRepository.html","/soft/devTools/sourceCodeManage/pagesHost.html","/soft/devTools/sourceCodeManage/commonOperator.html","/soft/devTools/sourceCodeManage/gitea.html","/soft/devTools/sourceCodeManage/gitjichucaozuo.html","/soft/devTools/sourceCodeManage/gogs.html","/soft/devTools/sourceCodeManage/","/soft/devTools/sourceCodeManage/install/linuxanzhuanggit.html","/soft/devTools/sourceCodeManage/install/windowsanzhuanggit.html","/soft/devTools/VisualStudio/chajianjieshao.html","/soft/devTools/VisualStudio/editorconfig.html","/soft/devTools/VisualStudio/geshihuashezhi.html","/soft/devTools/VisualStudio/offLineInstall.html","/soft/devTools/VisualStudio/","/soft/devTools/VisualStudio/shengchanlidisheng.html","/soft/devTools/VisualStudio/shezhimingmingguifan.html","/soft/devTools/VisualStudio/slngenLoading.html","/soft/devTools/VisualStudio/zhongwentishi.html","/temp/","/intro.html"],Ie=Cn(X2);ya(Ie);const Zi=n=>{const s=wn(),t=gn(),p=Ns();return E(()=>{var u;const e=n??((u=t.value.blog)==null?void 0:u.key)??"";if(!e)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};if(!Ie.value[e])throw new Error(`useBlogCategory: key ${e} is invalid`);const o=Ie.value[e][p.value],c={path:o.path,map:{}};for(const i in o.map){const r=o.map[i];c.map[i]={path:r.path,items:[]};for(const k of r.indexes){const{path:d,meta:m}=As(Yi[k]);c.map[i].items.push({path:d,info:m})}s.value.path===r.path&&(c.currentItems=c.map[i].items)}return c})},Y2={article:{"/":{path:"/article/",indexes:[1183,623,81,1175,0,929,1184,14,15,1398,1359,82,561,624,1038,930,83,625,1039,1,1013,84,85,953,931,16,17,954,955,1014,1040,86,87,88,626,89,90,91,1015,956,92,93,94,95,562,563,564,18,1198,1199,1200,1201,1202,96,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,97,1216,98,627,1217,1218,99,628,1219,2,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,100,101,102,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,103,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,104,629,630,631,632,633,634,635,636,637,638,639,640,105,106,107,108,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,109,110,657,658,659,660,661,111,112,113,114,115,662,663,664,116,117,118,119,120,121,665,666,122,123,124,125,126,127,128,667,668,669,129,130,670,671,672,131,957,132,133,134,135,136,137,673,674,675,676,677,138,139,140,141,142,143,144,145,565,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,678,679,680,681,682,163,164,683,165,684,685,686,687,688,689,690,3,166,167,691,692,693,694,695,168,169,696,697,698,699,700,170,171,172,701,702,703,173,174,175,176,19,4,5,20,21,22,23,24,1176,1177,177,704,705,706,25,26,27,28,29,30,31,32,178,179,180,33,1041,1042,1043,1044,1045,1046,1047,1048,1049,34,1050,1051,1052,1053,1054,1055,1056,1057,1058,6,181,182,183,707,184,185,186,187,188,1059,1060,1312,1313,1314,708,709,35,189,1315,1316,1317,710,711,190,191,192,547,193,194,195,1061,196,712,197,713,198,199,200,201,1318,1319,1320,1321,714,202,203,204,205,206,207,715,716,717,718,719,720,36,208,721,722,209,723,724,725,210,211,726,727,728,212,729,730,1379,1380,213,214,37,38,39,40,41,215,216,217,958,959,960,218,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,219,731,220,221,7,1062,1063,1064,1065,1066,1185,1186,1187,1188,1189,1067,1068,1069,1070,1071,1072,1073,1074,976,1397,222,223,548,732,733,1075,1076,224,225,226,227,228,566,734,735,736,1077,229,1078,1079,230,231,737,232,233,234,738,739,1080,1081,1082,1083,235,236,740,741,742,743,1084,237,977,238,978,932,239,240,241,242,243,244,245,1016,1017,1018,1019,979,1020,1021,980,981,1022,246,247,1085,744,745,746,747,567,248,1178,249,982,1179,1180,748,749,1086,750,1087,1088,250,251,751,1089,752,252,253,254,255,1090,256,753,754,933,257,258,259,8,1091,1181,260,261,755,262,263,756,757,758,759,760,761,264,265,9,266,267,268,269,762,1092,983,270,1023,1093,1182,1024,934,1094,1095,549,1096,550,271,763,1025,272,273,274,275,276,277,278,279,764,765,766,767,768,769,10,280,11,12,770,568,1097,1353,1098,1099,1100,551,552,553,984,554,952,935,13,555,936,937,938,939,1343,1344,1345,1360,1361,1362,1363,1364,1354,1355,1365,1367,1366,940,1356,1357,1358,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1381,1382,1383,1384,1385,1388,1389,1390,1391,1392,1393,1394,1395,1396,1346,1347,1348,1349,1350,1351,1352,1386,1387,569,570,281,571,572,573,574,985,282,1101,1102,283,284,285,286,287,771,288,772,773,774,289,290,291,775,776,292,293,294,295,296,777,778,297,298,299,300,575,576,577,42,43,44,301,302,45,46,47,303,304,305,779,1103,306,1104,1105,307,308,309,310,780,311,312,1106,1107,1108,1109,781,313,782,783,784,785,314,315,316,786,787,788,789,790,791,792,986,317,793,1026,578,318,319,320,321,579,794,322,795,796,323,324,580,325,581,582,583,584,585,797,326,987,48,327,49,328,586,329,330,331,332,798,333,334,1190,799,800,335,336,337,801,802,803,587,338,50,51,339,588,589,590,340,1027,1028,804,341,1029,52,591,1030,342,343,344,345,346,347,1110,348,1191,349,350,351,1111,352,353,354,355,356,1031,357,358,1112,359,360,361,1113,362,592,363,364,365,366,367,368,369,1114,370,593,1115,1116,371,372,373,374,375,594,595,805,806,376,377,378,379,807,808,809,810,811,380,812,813,988,381,596,556,382,814,815,383,941,597,1117,384,385,386,387,388,389,390,391,392,53,989,393,394,395,598,990,816,817,396,397,398,1322,1323,1324,1118,1119,399,991,818,1325,1326,819,820,54,992,557,558,559,560,400,401,993,402,994,1120,821,822,1121,403,404,405,406,407,408,823,824,409,410,411,995,996,825,826,412,599,1122,1123,1124,997,998,1192,413,414,942,943,944,945,600,601,415,999,827,828,55,56,57,58,59,602,416,603,417,418,419,420,829,604,1125,421,422,423,830,60,61,831,832,833,424,425,834,426,835,836,837,427,428,429,1032,430,838,839,840,1e3,431,62,432,63,841,433,842,434,435,1126,1127,843,436,437,64,65,844,438,439,845,1001,440,441,442,443,846,1002,444,445,605,66,446,1033,447,448,449,450,451,1003,452,847,1128,848,453,606,454,455,456,457,458,1004,1005,849,850,607,851,852,853,854,855,856,857,858,1006,1007,859,860,861,1008,1129,862,459,460,863,608,609,610,611,612,864,461,462,463,613,614,464,1009,865,866,867,868,869,465,870,871,872,873,874,875,466,467,468,469,470,876,877,878,879,880,881,882,883,884,885,471,472,1130,473,1131,886,474,1010,887,1034,1193,1194,475,476,1035,888,615,1011,889,890,891,477,892,893,894,895,896,478,479,897,480,481,482,483,1132,1012,484,485,486,487,898,488,1133,616,617,618,1195,489,490,1196,1197,491,899,492,900,901,493,1327,494,495,496,1328,1329,497,1134,498,499,902,67,500,501,502,903,904,619,905,503,906,1135,504,907,505,908,909,910,911,1136,1137,506,507,508,509,68,510,912,511,69,512,1138,1139,1330,1331,1140,1141,70,71,513,72,73,514,515,913,1142,74,75,76,77,620,78,79,621,622,80,914,1143,1144,1145,1146,1147,1148,915,916,1036,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,917,918,919,920,921,922,923,1037,924,925,926,927,928,516,517,518,946,1174,947,948,949,950,951,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[1183,623,81,1175,0,929,1184,14,15,1398,1359,82,561,624,1038,930,83,625,1039,1,1013,84,85,953,931,16,17,954,955,1014,1040,86,87,88,626,89,90,91,1015,956,92,93,94,95,562,563,564,18,1198,1199,1200,1201,1202,96,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,97,1216,98,627,1217,1218,99,628,1219,2,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,100,101,102,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,103,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,104,629,630,631,632,633,634,635,636,637,638,639,640,105,106,107,108,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,109,110,657,658,659,660,661,111,112,113,114,115,662,663,664,116,117,118,119,120,121,665,666,122,123,124,125,126,127,128,667,668,669,129,130,670,671,672,131,957,132,133,134,135,136,137,673,674,675,676,677,138,139,140,141,142,143,144,145,565,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,678,679,680,681,682,163,164,683,165,684,685,686,687,688,689,690,3,166,167,691,692,693,694,695,168,169,696,697,698,699,700,170,171,172,701,702,703,173,174,175,176,19,4,5,20,21,22,23,24,1176,1177,177,704,705,706,25,26,27,28,29,30,31,32,178,179,180,33,1041,1042,1043,1044,1045,1046,1047,1048,1049,34,1050,1051,1052,1053,1054,1055,1056,1057,1058,6,181,182,183,707,184,185,186,187,188,1059,1060,1312,1313,1314,708,709,35,189,1315,1316,1317,710,711,190,191,192,547,193,194,195,1061,196,712,197,713,198,199,200,201,1318,1319,1320,1321,714,202,203,204,205,206,207,715,716,717,718,719,720,36,208,721,722,209,723,724,725,210,211,726,727,728,212,729,730,1379,1380,213,214,37,38,39,40,41,215,216,217,958,959,960,218,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,219,731,220,221,7,1062,1063,1064,1065,1066,1185,1186,1187,1188,1189,1067,1068,1069,1070,1071,1072,1073,1074,976,1397,222,223,548,732,733,1075,1076,224,225,226,227,228,566,734,735,736,1077,229,1078,1079,230,231,737,232,233,234,738,739,1080,1081,1082,1083,235,236,740,741,742,743,1084,237,977,238,978,932,239,240,241,242,243,244,245,1016,1017,1018,1019,979,1020,1021,980,981,1022,246,247,1085,744,745,746,747,567,248,1178,249,982,1179,1180,748,749,1086,750,1087,1088,250,251,751,1089,752,252,253,254,255,1090,256,753,754,933,257,258,259,8,1091,1181,260,261,755,262,263,756,757,758,759,760,761,264,265,9,266,267,268,269,762,1092,983,270,1023,1093,1182,1024,934,1094,1095,549,1096,550,271,763,1025,272,273,274,275,276,277,278,279,764,765,766,767,768,769,10,280,11,12,770,568,1097,1353,1098,1099,1100,551,552,553,984,554,952,935,13,555,936,937,938,939,1343,1344,1345,1360,1361,1362,1363,1364,1354,1355,1365,1367,1366,940,1356,1357,1358,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1381,1382,1383,1384,1385,1388,1389,1390,1391,1392,1393,1394,1395,1396,1346,1347,1348,1349,1350,1351,1352,1386,1387,569,570,281,571,572,573,574,985,282,1101,1102,283,284,285,286,287,771,288,772,773,774,289,290,291,775,776,292,293,294,295,296,777,778,297,298,299,300,575,576,577,42,43,44,301,302,45,46,47,303,304,305,779,1103,306,1104,1105,307,308,309,310,780,311,312,1106,1107,1108,1109,781,313,782,783,784,785,314,315,316,786,787,788,789,790,791,792,986,317,793,1026,578,318,319,320,321,579,794,322,795,796,323,324,580,325,581,582,583,584,585,797,326,987,48,327,49,328,586,329,330,331,332,798,333,334,1190,799,800,335,336,337,801,802,803,587,338,50,51,339,588,589,590,340,1027,1028,804,341,1029,52,591,1030,342,343,344,345,346,347,1110,348,1191,349,350,351,1111,352,353,354,355,356,1031,357,358,1112,359,360,361,1113,362,592,363,364,365,366,367,368,369,1114,370,593,1115,1116,371,372,373,374,375,594,595,805,806,376,377,378,379,807,808,809,810,811,380,812,813,988,381,596,556,382,814,815,383,941,597,1117,384,385,386,387,388,389,390,391,392,53,989,393,394,395,598,990,816,817,396,397,398,1322,1323,1324,1118,1119,399,991,818,1325,1326,819,820,54,992,557,558,559,560,400,401,993,402,994,1120,821,822,1121,403,404,405,406,407,408,823,824,409,410,411,995,996,825,826,412,599,1122,1123,1124,997,998,1192,413,414,942,943,944,945,600,601,415,999,827,828,55,56,57,58,59,602,416,603,417,418,419,420,829,604,1125,421,422,423,830,60,61,831,832,833,424,425,834,426,835,836,837,427,428,429,1032,430,838,839,840,1e3,431,62,432,63,841,433,842,434,435,1126,1127,843,436,437,64,65,844,438,439,845,1001,440,441,442,443,846,1002,444,445,605,66,446,1033,447,448,449,450,451,1003,452,847,1128,848,453,606,454,455,456,457,458,1004,1005,849,850,607,851,852,853,854,855,856,857,858,1006,1007,859,860,861,1008,1129,862,459,460,863,608,609,610,611,612,864,461,462,463,613,614,464,1009,865,866,867,868,869,465,870,871,872,873,874,875,466,467,468,469,470,876,877,878,879,880,881,882,883,884,885,471,472,1130,473,1131,886,474,1010,887,1034,1193,1194,475,476,1035,888,615,1011,889,890,891,477,892,893,894,895,896,478,479,897,480,481,482,483,1132,1012,484,485,486,487,898,488,1133,616,617,618,1195,489,490,1196,1197,491,899,492,900,901,493,1327,494,495,496,1328,1329,497,1134,498,499,902,67,500,501,502,903,904,619,905,503,906,1135,504,907,505,908,909,910,911,1136,1137,506,507,508,509,68,510,912,511,69,512,1138,1139,1330,1331,1140,1141,70,71,513,72,73,514,515,913,1142,74,75,76,77,620,78,79,621,622,80,914,1143,1144,1145,1146,1147,1148,915,916,1036,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,917,918,919,920,921,922,923,1037,924,925,926,927,928,516,517,518,946,1174,947,948,949,950,951,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546]}}},ze=Cn(Y2);ya(ze);const zp=n=>{const s=gn(),t=Ns();return E(()=>{var c;const p=n??((c=s.value.blog)==null?void 0:c.key)??"";if(!p)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!ze.value[p])throw new Error(`useBlogType: key ${n} is invalid`);const e=ze.value[p][t.value],o={path:e.path,items:[]};for(const u of e.indexes){const{path:i,meta:r}=As(Yi[u]);o.items.push({path:i,info:r})}return o})},fo=()=>l(dn,{name:"lock"},()=>l("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));fo.displayName="LockIcon";var Z2=[];const nr=Symbol(""),wo=()=>{const n=An(nr);if(!n)throw new Error("useTimeline() is called without provider.");return n},n1=()=>{const n=zp("timeline"),s=E(()=>{const t=[];return n.value.items.forEach(({info:p,path:e})=>{const o=oo(p[Wn.date]);if(o){const c=o.getFullYear(),u=o.getMonth()+1,i=o.getDate();(!t[0]||t[0].year!==c)&&t.unshift({year:c,items:[]}),t[0].items.push({date:`${u}/${i}`,info:p,path:e})}}),{...n.value,config:t.reverse()}});bs(nr,s)},sr=Symbol(""),Nt=()=>{const n=An(sr);if(!n)throw new Error("useArticles() is called without provider.");return n},s1=()=>{const n=zp("article");bs(sr,n)},ar=Symbol.for("categoryMap"),Vt=()=>{const n=An(ar);if(!n)throw new Error("useCategoryMap() is called without provider.");return n},a1=()=>{const n=Zi("category");bs(ar,n)},tr=Symbol(""),_o=()=>{const n=An(tr);if(!n)throw new Error("useStars() is called without provider.");return n},t1=()=>{const n=zp("star");bs(tr,n)},pr=Symbol.for("tagMap"),Mt=()=>{const n=An(pr);if(!n)throw new Error("useTagMap() is called without provider.");return n},p1=()=>{const n=Zi("tag");bs(pr,n)},e1=()=>{s1(),a1(),t1(),p1(),n1()},Bt=()=>{const n=Vs(),s=on();return E(()=>({...n.value.blog,...s.value.blog}))},o1=n=>{const s=on();return E(()=>{const{[Wn.author]:t}=n.value;return t?bt(t):t===!1?[]:bt(s.value.author,!1)})},c1=n=>{const s=Vt();return E(()=>ri(n.value[Wn.category]).map(t=>({name:t,path:s.value.map[t].path})))},l1=n=>{const s=Mt();return E(()=>ki(n.value[Wn.tag]).map(t=>({name:t,path:s.value.map[t].path})))},u1=n=>E(()=>{const{[Wn.date]:s}=n.value;return oo(s)}),i1=n=>{const s=Va(n,"info"),t=Bt(),p=o1(s),e=c1(s),o=l1(s),c=u1(s),u=wi(),i=E(()=>({author:p.value,category:e.value,date:c.value,localizedDate:s.value[Wn.localizedDate]??"",tag:o.value,isOriginal:s.value[Wn.isOriginal]??!1,readingTime:s.value[Wn.readingTime]??null,readingTimeLocale:s.value[Wn.readingTime]&&u.value?fi(s.value[Wn.readingTime],u.value):null,pageview:n.path})),r=E(()=>t.value.articleInfo);return{info:i,items:r}},r1=()=>{const n=on();return E(()=>n.value.author)};var er=M({name:"SocialMedia",setup(){const n=Bt(),s=as(),t=E(()=>Ct(n.value.medias??{}).map(([p,e])=>({name:p,icon:J2[p],url:e})));return()=>t.value.length?l("div",{class:"vp-social-medias"},t.value.map(({name:p,icon:e,url:o})=>l("a",{class:"vp-social-media",href:o,rel:"noopener noreferrer",target:"_blank","aria-label":p||"",...s.value?{}:{"data-balloon-pos":"up"},innerHTML:e}))):null}}),vo=M({name:"BloggerInfo",setup(){const n=Bt(),s=It(),t=on(),p=Nt(),e=Vt(),o=Mt(),c=wo(),u=fa(),i=E(()=>{var m;return n.value.name??((m=bt(t.value.author)[0])==null?void 0:m.name)??s.value.title}),r=E(()=>n.value.avatar??t.value.logo),k=E(()=>t.value.blogLocales),d=E(()=>n.value.intro);return()=>{const{article:m,category:g,tag:y,timeline:w}=k.value,T=[[p.value.path,p.value.items.length,m],[e.value.path,ks(e.value.map).length,g],[o.value.path,ks(o.value.map).length,y],[c.value.path,c.value.items.length,w]];return l("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[l("div",{class:"vp-blogger",...d.value?{style:{cursor:"pointer"},"aria-label":k.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>u(d.value)}:{}},[r.value?l("img",{class:"vp-blogger-avatar",src:yn(r.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,i.value?l("div",{class:"vp-blogger-name",property:"name"},i.value):null,n.value.description?l("div",{class:"vp-blogger-description",innerHTML:n.value.description}):null,d.value?l("meta",{property:"url",content:yn(d.value)}):null]),l("div",{class:"vp-blog-counts"},T.map(([_,x,f])=>l(In,{class:"vp-blog-count",to:_},()=>[l("div",{class:"count"},x),l("div",f)]))),l(er)])}}});const Eo=()=>l(dn,{name:"category"},()=>l("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));Eo.displayName="CategoryIcon";const To=()=>l(dn,{name:"tag"},()=>l("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));To.displayName="TagIcon";const xo=()=>l(dn,{name:"timeline"},()=>l("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));xo.displayName="TimelineIcon";const or=()=>l(dn,{name:"slides"},()=>l("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));or.displayName="SlideIcon";const cr=()=>l(dn,{name:"sticky"},()=>[l("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);cr.displayName="StickyIcon";const Dp=()=>l(dn,{name:"article"},()=>l("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));Dp.displayName="ArticleIcon";const lr=()=>l(dn,{name:"book"},()=>l("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));lr.displayName="BookIcon";const ur=()=>l(dn,{name:"link"},()=>l("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));ur.displayName="LinkIcon";const ir=()=>l(dn,{name:"project"},()=>l("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));ir.displayName="ProjectIcon";const rr=()=>l(dn,{name:"friend"},()=>l("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));rr.displayName="FriendIcon";const De=()=>l(dn,{name:"slide-down"},()=>l("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));De.displayName="SlideDownIcon";const kr=()=>l("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});kr.displayName="EmptyIcon";var k1=M({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(n,{slots:s}){const t=Va(n,"info"),{info:p,items:e}=i1(n);return()=>{var m,g,y;const{[Qn.title]:o,[Wn.type]:c,[Wn.isEncrypted]:u=!1,[Wn.cover]:i,[Wn.excerpt]:r,[Wn.sticky]:k}=t.value,d=p.value;return l("div",{class:"vp-article-wrapper"},l("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((m=s.cover)==null?void 0:m.call(s,{cover:i}))??(i?[l("img",{class:"vp-article-cover",src:yn(i),alt:"",loading:"lazy"}),l("meta",{property:"image",content:yn(i)})]:[]),k?l(cr):null,l(In,{to:n.path},()=>{var w;return((w=s.title)==null?void 0:w.call(s,{title:o,isEncrypted:u,type:c}))??l("header",{class:"vp-article-title"},[u?l(fo):null,c===Ai.slide?l(or):null,l("span",{property:"headline"},o)])}),((g=s.excerpt)==null?void 0:g.call(s,{excerpt:r}))??(r?l("div",{class:"vp-article-excerpt",innerHTML:r}):null),l("hr",{class:"vp-article-hr"}),((y=s.info)==null?void 0:y.call(s,{info:d}))??l($i,{info:d,...e.value?{items:e.value}:{}})]))}}}),d1=M({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(n,{emit:s}){let t;const p=on(),e=J(""),o=E(()=>p.value.paginationLocales),c=E(()=>Math.ceil(n.total/n.perPage)),u=E(()=>!!c.value&&c.value!==1),i=E(()=>c.value<7?!1:n.current>4),r=E(()=>c.value<7?!1:n.current<c.value-3),k=E(()=>{const{current:g}=n;let y=1,w=c.value;const T=[];c.value>=7&&(g<=4&&g<c.value-3?(y=1,w=5):g>4&&g>=c.value-3?(w=c.value,y=c.value-4):c.value>7&&(y=g-2,w=g+2));for(let _=y;_<=w;_++)T.push(_);return T}),d=g=>s("updateCurrentPage",g),m=g=>{const y=parseInt(g,10);y<=c.value&&y>0?d(y):t.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${o.value.errorText.replace(/\$page/gu,c.value.toString())}`)};return fn(()=>{t=new l0}),()=>l("div",{class:"vp-pagination"},u.value?l("nav",{class:"vp-pagination-list"},[l("div",{class:"vp-pagination-number "},[n.current>1?l("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>d(n.current-1)},o.value.prev):null,i.value?[l("div",{role:"navigation",onClick:()=>d(1)},1),l("div",{class:"ellipsis"},"...")]:null,k.value.map(g=>l("div",{key:g,class:{active:n.current===g},role:"navigation",onClick:()=>d(g)},g)),r.value?[l("div",{class:"ellipsis"},"..."),l("div",{role:"navigation",onClick:()=>d(c.value)},c.value)]:null,n.current<c.value?l("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>d(n.current+1)},o.value.next):null]),l("div",{class:"vp-pagination-nav"},[l("label",{for:"navigation-text"},`${o.value.navigate}: `),l("input",{id:"navigation-text",value:e.value,onInput:({target:g})=>{e.value=g.value},onKeydown:g=>{g.key==="Enter"&&(g.preventDefault(),m(e.value))}}),l("button",{class:"vp-pagination-button",type:"button",role:"navigation",title:o.value.action,onClick:()=>m(e.value)},o.value.action)])]):[])}}),Ao=M({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(n){const s=js(),t=ba(),p=Bt(),e=J(1),o=E(()=>p.value.articlePerPage??10),c=E(()=>n.items.slice((e.value-1)*o.value,e.value*o.value)),u=async i=>{e.value=i;const r={...s.query};!(r.page===i.toString()||i===1&&!r.page)&&(i===1?delete r.page:r.page=i.toString(),await t.push({path:s.path,query:r}))};return fn(()=>{const{page:i}=s.query;u(i?Number(i):1),kn(e,()=>{const r=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,r)},100)})}),()=>l("div",{id:"article-list",class:"vp-article-list",role:"feed"},c.value.length?[...c.value.map(({info:i,path:r},k)=>l(pn,{appear:!0,delay:k*.04},()=>l(k1,{key:r,info:i,path:r}))),l(d1,{current:e.value,perPage:o.value,total:n.items.length,onUpdateCurrentPage:u})]:l(kr))}}),dr=M({name:"CategoryList",setup(){const n=wn(),s=Vt();return()=>l("ul",{class:"vp-category-list"},Ct(s.value.map).sort(([,t],[,p])=>p.items.length-t.items.length).map(([t,{path:p,items:e}])=>l("li",{class:["vp-category",`vp-category${Ip(t,9)}`,{active:p===n.value.path}]},l(In,{to:p},()=>[t,l("span",{class:"count"},e.length)]))))}}),mr=M({name:"TagList",setup(){const n=gn(),s=Mt(),t=p=>{var e;return p===((e=n.value.blog)==null?void 0:e.name)};return()=>l("ul",{class:"tag-list-wrapper"},Ct(s.value.map).sort(([,p],[,e])=>e.items.length-p.items.length).map(([p,{path:e,items:o}])=>l("li",{class:["tag",`tag${Ip(p,9)}`,{active:t(p)}]},l(In,{to:e},()=>[p,l("span",{class:"tag-num"},o.length)]))))}}),m1=M({name:"TimelineList",setup(){const n=on(),s=wo(),t=fa(),p=E(()=>n.value.blogLocales.timeline);return()=>l("div",{class:"timeline-list-wrapper"},[l("div",{class:"timeline-list-title",onClick:()=>t(s.value.path)},[l(xo),l("span",{class:"num"},s.value.items.length),p.value]),l("hr"),l("div",{class:"timeline-content"},l("ul",{class:"timeline-list"},s.value.config.map(({year:e,items:o},c)=>l(pn,{appear:!0,delay:.08*(c+1)},()=>l("li",[l("h3",{class:"timeline-year"},e),l("ul",{class:"timeline-year-wrapper"},o.map(({date:u,info:i,path:r})=>l("li",{class:"timeline-item"},[l("span",{class:"timeline-date"},u),l(In,{class:"timeline-title",to:r},()=>i[Qn.title])])))])))))])}});const g1={article:Dp,category:Eo,tag:To,timeline:xo};var gr=M({name:"InfoList",setup(){const n=on(),s=Nt(),t=Vt(),p=E(()=>ks(t.value.map).length),e=_o(),o=Mt(),c=E(()=>ks(o.value.map).length),u=fa(),i=J("article"),r=E(()=>n.value.blogLocales);return()=>l("div",{class:"vp-blog-infos"},[l("div",{class:"vp-blog-type-switcher"},Ct(g1).map(([k,d])=>l("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{i.value=k}},l("div",{class:["icon-wrapper",{active:i.value===k}],"aria-label":r.value[k],"data-balloon-pos":"up"},l(d))))),l(pn,()=>i.value==="article"?l("div",{class:"vp-star-article-wrapper"},[l("div",{class:"title",onClick:()=>u(s.value.path)},[l(Dp),l("span",{class:"num"},s.value.items.length),r.value.article]),l("hr"),e.value.items.length?l("ul",{class:"vp-star-articles"},e.value.items.map(({info:k,path:d},m)=>l(pn,{appear:!0,delay:.08*(m+1)},()=>l("li",{class:"vp-star-article"},l(In,{to:d},()=>k[Qn.title]))))):l("div",{class:"vp-star-article-empty"},r.value.empty.replace("$text",r.value.star))]):i.value==="category"?l("div",{class:"vp-category-wrapper"},[p.value?[l("div",{class:"title",onClick:()=>u(t.value.path)},[l(Eo),l("span",{class:"num"},p.value),r.value.category]),l("hr"),l(pn,{delay:.04},()=>l(dr))]:l("div",{class:"vp-category-empty"},r.value.empty.replace("$text",r.value.category))]):i.value==="tag"?l("div",{class:"vp-tag-wrapper"},[c.value?[l("div",{class:"title",onClick:()=>u(o.value.path)},[l(To),l("span",{class:"num"},c.value),r.value.tag]),l("hr"),l(pn,{delay:.04},()=>l(mr))]:l("div",{class:"vp-tag-empty"},r.value.empty.replace("$text",r.value.tag))]):l(pn,()=>l(m1)))])}}),Ft=M({name:"BlogWrapper",slots:Object,setup(n,{slots:s}){const{isMobile:t}=qt();return()=>[l(yo),l(ho,{noSidebar:!0,noToc:!0},{default:()=>s.default(),navScreenBottom:()=>l(vo),...t.value?{sidebar:()=>l(gr)}:{}})]}});const Ht=()=>l("aside",{class:"vp-blog-info-wrapper"},[l(pn,()=>l(vo)),l(pn,{delay:.04},()=>l(gr))]);Ht.displayName="InfoPanel";var h1=M({name:"BlogPage",setup(){const n=wn(),s=gn(),t=Vt(),p=Mt();return()=>{const{key:e="",name:o=""}=s.value.blog||{},c=o?e==="category"?t.value.map[o].items:e==="tag"?p.value.map[o].items:[]:[];return l(Ft,()=>l("div",{class:"vp-page vp-blog"},l("div",{class:"blog-page-wrapper"},[l("main",{id:"main-content",class:"vp-blog-main"},[l(pn,()=>e==="category"?l(dr):e==="tag"?l(mr):null),o?l(pn,{appear:!0,delay:.24},()=>l(Ao,{key:n.value.path,items:c})):null]),l(pn,{delay:.16},()=>l(Ht,{key:"blog"}))])))}}});const y1="//theme-hope-assets.vuejs.press/hero/default.jpg";var b1=M({name:"BlogHero",slots:Object,setup(n,{slots:s}){const t=gn(),p=It(),e=Cn(),o=E(()=>t.value.heroFullScreen??!1),c=E(()=>{const{heroText:i,heroImage:r,heroImageDark:k,heroAlt:d,heroImageStyle:m,tagline:g}=t.value;return{text:i??p.value.title??"Hello",tagline:g??"",image:r?yn(r):null,imageDark:k?yn(k):null,alt:d??i??"",imageStyle:m,isFullScreen:o.value}}),u=E(()=>{const{bgImage:i,bgImageDark:r,bgImageStyle:k}=t.value;return{image:Pn(i)?yn(i):i===!1?null:y1,imageDark:Pn(r)?yn(r):null,bgStyle:k,isFullScreen:o.value}});return()=>{var i,r;return t.value.hero===!1?null:l("div",{ref:e,class:["vp-blog-hero",{fullscreen:o.value,"no-bg":!u.value.image}]},[((i=s.bg)==null?void 0:i.call(s,u.value))??[u.value.image?l("div",{class:["vp-blog-mask",{light:u.value.imageDark}],style:[{background:`url(${u.value.image}) center/cover no-repeat`},u.value.bgStyle]}):null,u.value.imageDark?l("div",{class:"vp-blog-mask dark",style:[{background:`url(${u.value.imageDark}) center/cover no-repeat`},u.value.bgStyle]}):null],((r=s.info)==null?void 0:r.call(s,c.value))??[l(pn,{appear:!0,type:"group",delay:.04},()=>{const{image:k,imageDark:d,imageStyle:m,alt:g}=c.value;return[k?l("img",{key:"light",class:["vp-blog-hero-image",{light:d}],style:m,src:k,alt:g}):null,d?l("img",{key:"dark",class:"vp-blog-hero-image dark",style:m,src:d,alt:g}):null]}),l(pn,{appear:!0,delay:.08},()=>c.value.text?l("h1",{class:"vp-blog-hero-title"},c.value.text):null),l(pn,{appear:!0,delay:.12},()=>c.value.tagline?l("p",{class:"vp-blog-hero-description",innerHTML:c.value.tagline}):null)],c.value.isFullScreen?l("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:e.value.clientHeight,behavior:"smooth"})}},[l(De),l(De)]):null])}}});const f1=["link","article","book","project","friend"];var w1=M({name:"ProjectPanel",components:{ArticleIcon:Dp,BookIcon:lr,FriendIcon:rr,LinkIcon:ur,ProjectIcon:ir},props:{items:{type:Array,required:!0}},setup(n){const s=as(),t=fa(),p=(e="",o="icon")=>f1.includes(e)?l(ys(`${e}-icon`)):pa(e)?l("img",{class:"vp-project-image",src:e,alt:o}):Lt(e)?l("img",{class:"vp-project-image",src:yn(e),alt:o}):l(Fn,{icon:e});return()=>l("div",{class:"vp-project-panel"},n.items.map(({icon:e,link:o,name:c,desc:u,background:i},r)=>l("div",{class:["vp-project-card",{[`project${r%9}`]:!s.value&&!i}],...i?{style:i}:{},onClick:()=>t(o)},[p(e,c),l("div",{class:"vp-project-name"},c),l("div",{class:"vp-project-desc"},u)])))}}),_1=M({name:"BlogHomePage",setup(){const n=Nt(),s=gn(),t=E(()=>s.value.projects??[]);return()=>l("div",{class:"vp-page vp-blog"},[l(b1),l("div",{class:"blog-page-wrapper"},[l("main",{id:"main-content",class:"vp-blog-main"},[t.value.length?l(pn,{appear:!0,delay:.16},()=>l(w1,{items:t.value})):null,l(pn,{appear:!0,delay:.24},()=>l(Ao,{items:n.value.items}))]),l(pn,{appear:!0,delay:.16},()=>l(Ht,{key:"blog"}))]),l(pn,{appear:!0,delay:.28},()=>l(ja))])}});const hr=()=>l(Ft,()=>l(_1));hr.displayName="BlogHome";var v1=hr,E1=M({name:"ArticleType",setup(){const n=wn(),s=Ns(),t=on(),p=Nt(),e=_o(),o=E(()=>{const c=t.value.blogLocales;return[{text:c.all,path:p.value.path},{text:c.star,path:e.value.path},...Z2.map(({key:u,path:i})=>({text:c[u],path:i.replace(/^\//,s.value)}))]});return()=>l("ul",{class:"vp-article-type-wrapper"},o.value.map(c=>l("li",{class:["vp-article-type",{active:c.path===n.value.path}]},l(In,{to:c.path},()=>c.text))))}}),T1=M({name:"BlogPage",setup(){const n=zp(),s=gn(),t=wn(),p=Nt(),e=_o(),o=E(()=>{const{key:c="",type:u}=s.value.blog||{};return c==="star"?e.value.items:u==="type"&&c?n.value.items:p.value.items});return()=>l(Ft,()=>l("div",{class:"vp-page vp-blog"},l("div",{class:"blog-page-wrapper"},[l("main",{id:"main-content",class:"vp-blog-main"},[l(pn,()=>l(E1)),l(pn,{appear:!0,delay:.24},()=>l(Ao,{key:t.value.path,items:o.value}))]),l(pn,{delay:.16},()=>l(Ht,{key:"blog"}))])))}}),x1=M({name:"PortfolioHero",slots:Object,setup(n,{slots:s}){const t=r1(),p=gn(),e=J(0),o=E(()=>{var m;return((m=p.value.titles)==null?void 0:m[e.value])??""}),c=J(""),u=E(()=>{const{name:m,avatar:g,avatarDark:y,avatarAlt:w,avatarStyle:T}=p.value;return{name:m??t.value.name,avatar:g?yn(g):null,avatarDark:y?yn(y):null,avatarStyle:T,alt:w||m||""}}),i=E(()=>{const{bgImage:m,bgImageDark:g,bgImageStyle:y}=p.value;return{image:Pn(m)?yn(m):null,imageDark:Pn(g)?yn(g):null,bgStyle:y}}),r=E(()=>{const{welcome:m,name:g,titles:y,medias:w}=p.value;return{name:g??t.value.name,welcome:m??"👋 Hi There, I'm",title:c.value,titles:y??[],medias:w??[]}}),k=()=>{c.value="";let m=0,g=!1;const y=async()=>{if(!g)if(c.value+=o.value[m],m+=1,await Os(),m<o.value.length)setTimeout(()=>{y()},150);else{const w=r.value.titles.length;setTimeout(()=>{e.value=w<=1||e.value===r.value.titles.length-1?0:e.value+1},1e3)}};return y(),()=>{g=!0}};let d;return fn(()=>{kn(o,()=>{d==null||d(),d=k()},{immediate:!0})}),()=>{var m,g,y;return l("section",{id:"portfolio",class:["vp-portfolio-wrapper",{bg:i.value.image}]},[((m=s.bg)==null?void 0:m.call(s,i.value))??[i.value.image?l("div",{class:["vp-portfolio-mask",{light:i.value.imageDark}],style:[{background:`url(${i.value.image}) center/cover no-repeat`},i.value.bgStyle]}):null,i.value.imageDark?l("div",{class:"vp-portfolio-mask dark",style:[{background:`url(${i.value.imageDark}) center/cover no-repeat`},i.value.bgStyle]}):null],((g=s.avatar)==null?void 0:g.call(s,u.value))??l("div",{class:"vp-portfolio-avatar"},[l(pn,{delay:.04},()=>{const{avatarDark:w,name:T,alt:_,avatarStyle:x}=u.value;return[l("img",{key:"light",class:{light:w},src:u.value.avatar,title:T,alt:_,style:x}),w?l("img",{key:"dark",class:"dark",src:w,title:T,alt:_,style:x}):null]})]),l("div",{class:"vp-portfolio-container"},((y=s.info)==null?void 0:y.call(s,r.value))??l("div",{class:"vp-portfolio-info"},[l(pn,{appear:!0,delay:.08},()=>l("h6",{class:"vp-portfolio-welcome"},r.value.welcome)),l(pn,{appear:!0,delay:.12},()=>l("h1",{class:"vp-portfolio-name"},r.value.name)),l(pn,{appear:!0,delay:.16},()=>l("h2",{class:"vp-portfolio-title"},c.value)),l(pn,{appear:!0,delay:.2},()=>r.value.medias.length?l("div",{class:"vp-portfolio-medias"},r.value.medias.map(({name:w,url:T,icon:_})=>l("a",{class:"vp-portfolio-media",href:T,rel:"noopener noreferrer",target:"_blank",...w?{"aria-label":w,"data-balloon-pos":"up"}:{}},l(Fn,{icon:_})))):l(er))]))])}}});const yr=()=>l(Ft,()=>[l(x1),l("div",{class:"vp-page vp-portfolio"},l(pn,{appear:!0,delay:.24},()=>l(ja)))]);yr.displayName="PortfolioHome";var A1=yr,S1=M({name:"TimelineItems",setup(){const n=Bt(),s=on(),t=wo(),p=E(()=>n.value.timeline??s.value.blogLocales.timelineTitle),e=E(()=>t.value.config.map(({year:o})=>({title:o.toString(),level:2,slug:o.toString(),children:[]})));return()=>l("div",{class:"timeline-wrapper"},l("ul",{class:"timeline-content"},[l(pn,()=>l("li",{class:"motto"},p.value)),l(Ki,{items:e.value}),t.value.config.map(({year:o,items:c},u)=>l(pn,{appear:!0,delay:.08*(u+1),type:"group"},()=>[l("h3",{key:"title",id:o,class:"timeline-year-title"},l("span",o)),l("li",{key:"content",class:"timeline-year-list"},[l("ul",{class:"timeline-year-wrapper"},c.map(({date:i,info:r,path:k})=>l("li",{class:"timeline-item"},[l("span",{class:"timeline-date"},i),l(In,{class:"timeline-title",to:k},()=>r[Qn.title])])))])]))]))}});const br=()=>l(Ft,()=>l("div",{class:"vp-page vp-blog"},l("div",{class:"blog-page-wrapper"},[l("main",{id:"main-content",class:"vp-blog-main"},[l(pn,{appear:!0,delay:.24},()=>l(S1))]),l(pn,{delay:.16},()=>l(Ht,{key:"blog"}))])));br.displayName="Timeline";var P1=br,I1={};const _a="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),te=Array.from({length:64},(n,s)=>s),pp=n=>Array(n).fill(-1),Ws=[...pp(46),0,1,...te.slice(54,64),...pp(7),...te.slice(2,28),...pp(6),...te.slice(28,54),...pp(5)],$c=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],Kc=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],fr=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],Ce=(n,s)=>{if(s<=0||s>n.length)throw Error(`Illegal len: ${s}`);let t=0,p,e;const o=[];for(;t<s;){if(p=n[t++]&255,o.push(_a[p>>2&63]),p=(p&3)<<4,t>=s){o.push(_a[p&63]);break}if(e=n[t++]&255,p|=e>>4&15,o.push(_a[p&63]),p=(e&15)<<2,t>=s){o.push(_a[p&63]);break}e=n[t++]&255,p|=e>>6&3,o.push(_a[p&63]),o.push(_a[e&63])}return o.join("")},z1=(n,s)=>{const t=n.length;let p=0,e=0,o,c,u,i,r,k;const d=[];for(;p<t-1&&e<s&&(k=n.charCodeAt(p++),o=k<Ws.length?Ws[k]:-1,k=n.charCodeAt(p++),c=k<Ws.length?Ws[k]:-1,!(o==-1||c==-1||(r=o<<2>>>0,r|=(c&48)>>4,d.push(String.fromCharCode(r)),++e>=s||p>=t)||(k=n.charCodeAt(p++),u=k<Ws.length?Ws[k]:-1,u==-1)||(r=(c&15)<<4>>>0,r|=(u&60)>>2,d.push(String.fromCharCode(r)),++e>=s||p>=t)));)k=n.charCodeAt(p++),i=k<Ws.length?Ws[k]:-1,r=(u&3)<<6>>>0,r|=i,d.push(String.fromCharCode(r)),++e;return d.map(m=>m.charCodeAt(0))},D1=(n,s)=>{let t=null;for(typeof n=="number"&&(t=n,n=()=>null);t!==null||(t=n())!==null;)t<128?s(t&127):t<2048?(s(t>>6&31|192),s(t&63|128)):t<65536?(s(t>>12&15|224),s(t>>6&63|128),s(t&63|128)):(s(t>>18&7|240),s(t>>12&63|128),s(t>>6&63|128),s(t&63|128)),t=null},C1=(n,s)=>{let t,p=null;for(;(t=p!==null?p:n())!==null;){if(t>=55296&&t<=57343&&(p=n())!==null&&p>=56320&&p<=57343){s((t-55296)*1024+p-56320+65536),p=null;continue}s(t)}p!==null&&s(p)},L1=(n,s)=>{C1(n,function(t){D1(t,s)})},R1=typeof process=="object"&&I1.NEXT_RUNTIME==="edge"?setTimeout:typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:setTimeout,O1=n=>{const s=[];let t=0;return L1(()=>t>=n.length?null:n.charCodeAt(t++),p=>{s.push(p)}),s},wt=(n,s,t,p)=>{let e,o=n[s],c=n[s+1];return o^=t[0],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[1],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[2],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[3],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[4],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[5],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[6],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[7],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[8],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[9],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[10],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[11],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[12],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[13],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[14],e=p[o>>>24],e+=p[256|o>>16&255],e^=p[512|o>>8&255],e+=p[768|o&255],c^=e^t[15],e=p[c>>>24],e+=p[256|c>>16&255],e^=p[512|c>>8&255],e+=p[768|c&255],o^=e^t[16],n[s]=c^t[17],n[s+1]=o,n},Ea=(n,s)=>{let t=0;for(let p=0;p<4;++p)t=t<<8|n[s]&255,s=(s+1)%n.length;return{key:t,offp:s}},Jc=(n,s,t)=>{const p=s.length,e=t.length;let o=0,c=[0,0],u;for(let i=0;i<p;i++)u=Ea(n,o),o=u.offp,s[i]=s[i]^u.key;for(let i=0;i<p;i+=2)c=wt(c,0,s,t),s[i]=c[0],s[i+1]=c[1];for(let i=0;i<e;i+=2)c=wt(c,0,s,t),t[i]=c[0],t[i+1]=c[1]},q1=(n,s,t,p)=>{const e=t.length,o=p.length;let c=0,u=[0,0],i;for(let r=0;r<e;r++)i=Ea(s,c),c=i.offp,t[r]=t[r]^i.key;c=0;for(let r=0;r<e;r+=2)i=Ea(n,c),c=i.offp,u[0]^=i.key,i=Ea(n,c),c=i.offp,u[1]^=i.key,u=wt(u,0,t,p),t[r]=u[0],t[r+1]=u[1];for(let r=0;r<o;r+=2)i=Ea(n,c),c=i.offp,u[0]^=i.key,i=Ea(n,c),c=i.offp,u[1]^=i.key,u=wt(u,0,t,p),p[r]=u[0],p[r+1]=u[1]},Xc=(n,s,t,p,e)=>{const o=fr.slice(),c=o.length;if(t<4||t>31){const m=new Error(`Illegal number of rounds (4-31): ${t}`);if(p===!1)return Promise.reject(m);throw m}if(s.length!==16){const m=new Error(`Illegal salt length: ${s.length} != 16`);if(p===!1)return Promise.reject(m);throw m}t=1<<t>>>0;let u,i,r=0,k;Int32Array?(u=new Int32Array($c),i=new Int32Array(Kc)):(u=$c.slice(),i=Kc.slice()),q1(s,n,u,i);const d=()=>{if(r<t){const m=Date.now();for(;r<t&&(r=r+1,Jc(n,u,i),Jc(s,u,i),!(Date.now()-m>100)););}else{for(r=0;r<64;r++)for(k=0;k<c>>1;k++)wt(o,k<<1,u,i);const m=[];for(r=0;r<c;r++)m.push((o[r]>>24&255)>>>0),m.push((o[r]>>16&255)>>>0),m.push((o[r]>>8&255)>>>0),m.push((o[r]&255)>>>0);return p===!1?Promise.resolve(m):m}if(p===!1)return new Promise(m=>R1(()=>{d().then(m)}))};if(p===!1)return d();{let m;for(;;)if(typeof(m=d())<"u")return m||[]}},j1=n=>{try{let s;typeof window<"u"?s=window.crypto??window.msCrypto:s=globalThis.crypto;const t=new Uint32Array(n);return s==null||s.getRandomValues(t),Array.from(t)}catch{throw Error("WebCryptoAPI is not available")}},N1=(n=10)=>{if(typeof n!="number")throw Error("Illegal arguments: "+typeof n);n<4?n=4:n>31&&(n=31);const s=[];return s.push("$2a$"),n<10&&s.push("0"),s.push(n.toString()),s.push("$"),s.push(Ce(j1(16),16)),s.join("")};function V1(n,s,t,p){if(typeof n!="string"||typeof s!="string"){const g=new Error("Invalid string / salt: Not a string");if(t===!1)return Promise.reject(g);throw g}let e,o;if(s.charAt(0)!=="$"||s.charAt(1)!=="2"){const g=new Error("Invalid salt version: "+s.substring(0,2));if(t===!1)return Promise.reject(g);throw g}if(s.charAt(2)==="$")e="\0",o=3;else{if(e=s.charAt(2),e!=="a"&&e!=="b"&&e!=="y"||s.charAt(3)!=="$"){const g=Error("Invalid salt revision: "+s.substring(2,4));if(t===!1)return Promise.reject(g);throw g}o=4}if(s.charAt(o+2)>"$"){const g=new Error("Missing salt rounds");if(t===!1)return Promise.reject(g);throw g}const c=parseInt(s.substring(o,o+1),10)*10,u=parseInt(s.substring(o+1,o+2),10),i=c+u,r=s.substring(o+3,o+25);n+=e>="a"?"\0":"";const k=O1(n),d=z1(r,16),m=g=>{const y=[];return y.push("$2"),e>="a"&&y.push(e),y.push("$"),i<10&&y.push("0"),y.push(i.toString()),y.push("$"),y.push(Ce(d,d.length)),y.push(Ce(g,fr.length*4-1)),y.join("")};return t===!1?Xc(k,d,i,!1).then(g=>m(g)):m(Xc(k,d,i,!0))}const M1=(n,s=10)=>{if(typeof s=="number"&&(s=N1(s)),typeof n!="string"||typeof s!="string")throw Error("Illegal arguments: "+typeof n+", "+typeof s);return V1(n,s,!0)},Le=(n,s)=>{if(typeof n!="string"||typeof s!="string")throw Error("Illegal arguments: "+typeof n+", "+typeof s);return s.length!==60?!1:M1(n,s.substring(0,s.length-31))===s};var wr=M({name:"PasswordModal",props:{full:Boolean},emits:["verify"],setup(n,{emit:s}){const t=gn(),p=on(),e=J(""),o=J(!1),c=J(!1),u=E(()=>p.value.encryptLocales);let i=null;const r=()=>{i&&clearTimeout(i),o.value=!1,s("verify",e.value,c.value),Os().then(()=>{o.value=!0,i=setTimeout(()=>{o.value=!1},1e3)})};return()=>l("div",{class:["vp-decrypt-layer",{expand:n.full||t.value.home}]},l("div",{class:"vp-decrypt-modal"},[l("div",{class:["vp-decrypt-hint",{tried:o.value}]},o.value?u.value.errorHint:l(fo,{"aria-label":u.value.iconLabel})),l("div",{class:"vp-decrypt-input"},[l("input",{type:"password",value:e.value,placeholder:u.value.placeholder,onInput:({target:k})=>{e.value=k.value},onKeydown:({key:k})=>{k==="Enter"&&r()}})]),l("div",{class:"vp-remember-password"},[l("input",{type:"checkbox",value:c.value,onChange:()=>c.value=!c.value}),u.value.remember]),l("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>r()},"OK")]))}});const _r=()=>{const n=Vs();return E(()=>n.value.encrypt||{})},Yc="VUEPRESS_HOPE_GLOBAL_TOKEN",B1=()=>{const n=_r(),s=Ha(Yc,""),t=Gu(Yc,""),p=E(()=>{const{global:o=!1,admin:c=[]}=n.value;return o&&c.length>0}),e=E(()=>{if(p.value){if(s.value)return n.value.admin.some(o=>Le(s.value,o));if(t.value)return n.value.admin.some(o=>Le(t.value,o))}return!1});return{isEncrypted:p,isDecrypted:e,validate:(o,c=!1)=>{(c?s:t).value=o}}},pe=(n="",s)=>!!n&&Le(n,s),Zc="VUEPRESS_HOPE_PATH_TOKEN",F1=()=>{const n=wn(),s=_r(),t=Ha(Zc,{}),p=Gu(Zc,{}),e=c=>Ba(s.value.config)?ks(s.value.config).filter(u=>qa(decodeURI(c),u)).sort((u,i)=>i.length-u.length):[],o=c=>{const u=e(c);if(u.length>0){const{config:i={}}=s.value;return{isEncrypted:!0,isDecrypted:u.some(r=>t.value[r]&&i[r].some(k=>pe(t.value[r],k))||p.value[r]&&i[r].some(k=>pe(p.value[r],k)))}}return{isDecrypted:!1,isEncrypted:!1}};return{status:E(()=>o(n.value.path)),getStatus:o,validate:(c,u=!1)=>{const{config:i={}}=s.value,r=e(n.value.path);for(const k of r)if(i[k].filter(d=>pe(c,d))){(u?t:p).value[k]=c;break}}}};var H1=M({name:"GlobalEncrypt",slots:Object,setup(n,{slots:s}){const{isDecrypted:t,isEncrypted:p,validate:e}=B1(),o=J(!1);return fn(()=>{o.value=!0}),()=>l(bo,()=>p.value?o.value?t.value?s.default():l(wr,{full:!0,onVerify:e}):null:s.default())}}),W1=M({name:"LocalEncrypt",slots:Object,setup(n,{slots:s}){const{status:t,validate:p}=F1(),e=J(!1);return fn(()=>{e.value=!0}),()=>{const{isEncrypted:o,isDecrypted:c}=t.value;return o?e.value?c?s.default():l(wr,{full:!0,onVerify:p}):null:s.default()}}});Ih(n=>{const s=n.t,t=n.I!==!1,p=n.i;return t?{title:s,content:p?()=>[l(Fn,{icon:p}),s]:null,order:n.O,index:n.I}:null});const G1=ws({enhance:({app:n,router:s})=>{const{scrollBehavior:t}=s.options;s.options.scrollBehavior=async(...p)=>(await Ae.wait(),t(...p)),o2(n),n.component("HopeIcon",Fn),n.component("BloggerInfo",vo),n.component("GlobalEncrypt",H1),n.component("LocalEncrypt",W1)},setup:()=>{c2(),i2(),e1()},layouts:{Layout:Q2,NotFound:K2,BlogCategory:h1,BlogHome:v1,BlogType:T1,PortfolioHome:A1,Timeline:P1}}),ep=[Sg,vh,Ph,Rh,jh,Bh,Gh,Jh,a0,R0,$0,G1],U1=JSON.parse('{"base":"/kbms/","lang":"zh-CN","title":"知识库","description":"一个知识库网站","head":[["script",{},"\\n    var _hmt = _hmt || [];\\n    (function() {\\n      var hm = document.createElement(\\"script\\");\\n      hm.src = \\"https://hm.baidu.com/hm.js?1f046e495f9c28ef302f30895bda829e\\";\\n      var s = document.getElementsByTagName(\\"script\\")[0]; \\n      s.parentNode.insertBefore(hm, s);\\n    })();\\n    "]],"locales":{}}');var Ka=Cn(U1),Q1=Um,$1=()=>{const n=yg({history:Q1(ao("/kbms/")),routes:[{name:"vuepress-route",path:"/:catchAll(.*)",components:{}}],scrollBehavior:(s,t,p)=>p||(s.hash?{el:s.hash}:{top:0})});return n.beforeResolve(async(s,t)=>{if(s.path!==t.path||t===Ds){const p=As(s.path);if(p.path!==s.path)return p.path;const e=await p.loader();s.meta={...p.meta,_pageChunk:e}}else s.path===t.path&&(s.meta=t.meta)}),n},K1=n=>{n.component("ClientOnly",Sp),n.component("Content",Su),n.component("RouteLink",In)},J1=(n,s,t)=>{const p=E(()=>s.currentRoute.value.path),e=$e((T,_)=>({get(){return T(),s.currentRoute.value.meta._pageChunk},set(x){s.currentRoute.value.meta._pageChunk=x,_()}})),o=E(()=>la.resolveLayouts(t)),c=E(()=>la.resolveRouteLocale(Ka.value.locales,p.value)),u=E(()=>la.resolveSiteLocaleData(Ka.value,c.value)),i=E(()=>e.value.comp),r=E(()=>e.value.data),k=E(()=>r.value.frontmatter),d=E(()=>la.resolvePageHeadTitle(r.value,u.value)),m=E(()=>la.resolvePageHead(d.value,k.value,u.value)),g=E(()=>la.resolvePageLang(r.value,u.value)),y=E(()=>la.resolvePageLayout(r.value,o.value)),w={layouts:o,pageData:r,pageComponent:i,pageFrontmatter:k,pageHead:m,pageHeadTitle:d,pageLang:g,pageLayout:y,redirects:be,routeLocale:c,routePath:p,routes:gt,siteData:Ka,siteLocaleData:u};return n.provide(eo,w),Object.defineProperties(n.config.globalProperties,{$frontmatter:{get:()=>k.value},$head:{get:()=>m.value},$headTitle:{get:()=>d.value},$lang:{get:()=>g.value},$page:{get:()=>r.value},$routeLocale:{get:()=>c.value},$site:{get:()=>Ka.value},$siteLocale:{get:()=>u.value},$withBase:{get:()=>yn}}),w},X1=()=>{const n=wg(),s=Tu();let t=[];const p=()=>{n.value.forEach(c=>{const u=Y1(c);u&&t.push(u)})},e=()=>{const c=[];return n.value.forEach(u=>{const i=Z1(u);i&&c.push(i)}),c},o=()=>{document.documentElement.lang=s.value;const c=e();t.forEach((u,i)=>{const r=c.findIndex(k=>u.isEqualNode(k));r===-1?(u.remove(),delete t[i]):c.splice(r,1)}),c.forEach(u=>document.head.appendChild(u)),t=[...t.filter(u=>!!u),...c]};bs(Eg,o),fn(()=>{p(),kn(n,o,{immediate:!1})})},Y1=([n,s,t=""])=>{const p=Object.entries(s).map(([u,i])=>Pn(i)?`[${u}=${JSON.stringify(i)}]`:i===!0?`[${u}]`:"").join(""),e=`head > ${n}${p}`;return Array.from(document.querySelectorAll(e)).find(u=>u.innerText===t)||null},Z1=([n,s,t])=>{if(!Pn(n))return null;const p=document.createElement(n);return Ba(s)&&Object.entries(s).forEach(([e,o])=>{Pn(o)?p.setAttribute(e,o):o===!0&&p.setAttribute(e,"")}),Pn(t)&&p.appendChild(document.createTextNode(t)),p},ny=sm,sy=async()=>{var t;const n=ny({name:"Vuepress",setup(){var o;X1();for(const c of ep)(o=c.setup)==null||o.call(c);const p=ep.flatMap(({rootComponents:c=[]})=>c.map(u=>l(u))),e=_g();return()=>[l(e.value),p]}}),s=$1();K1(n),J1(n,s,ep);for(const p of ep)await((t=p.enhance)==null?void 0:t.call(p,{app:n,router:s,siteData:Ka}));return n.use(s),{app:n,router:s}};sy().then(({app:n,router:s})=>{s.isReady().then(()=>{n.mount("#app")})});export{ey as a,su as b,ty as c,sy as createVueApp,py as d,au as e,zn as f,cd as o,ys as r,ay as t,bk as w};
