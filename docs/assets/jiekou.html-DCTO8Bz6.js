import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c,b as n,e as s,f as o,d as l}from"./app-D8HBJYTp.js";const i={},u=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>接口和类相似，都可以从多个接口继承，继承接口的类都必须实现接口的所有成员。不同点如下</p><ul><li>接口成员都是隐式抽象的，相反，类可以包含抽象成员也和有具体实现的成员。(接口在c#8后也可以包含实现，但是不能被继承类使用。)</li><li>一个类可以实现多个接口，而一个类只能继承一个类</li><li>接口只能包含方法、属性、索引器、事件。而这些正是类中可以定义为抽象的成员类型。</li><li>接口也可以在不同的源文件之间进行拆分，叫做部分接口。</li></ul><p>接口定义的是房子的框架，里面的东西都需要继承的类来实现，也就是我只给你写标题，内容你自己填充。</p><p>基于接口而非实现编程，可以将接口和实现分离，封装不稳定的实现，暴露稳定的接口。</p><h3 id="默认接口方法" tabindex="-1"><a class="header-anchor" href="#默认接口方法"><span>默认接口方法</span></a></h3><p>在c#8.0里面，接口允许添加默认的接口方法，该方法包含实现逻辑</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILogger</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token class-name">LogLevel</span> logLevel<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Log method of ILogger called.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Log Level: &quot;</span><span class="token operator">+</span> logLevel<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个默认的方法不需要子类去实现，并且子类也不能调用该方法。</p><h2 id="意义" tabindex="-1"><a class="header-anchor" href="#意义"><span>意义</span></a></h2><ul><li>侧重于解耦，接口是对行为的一种抽象，相当于一组协议或者契约，调用者只需要关注抽象的接口，不需要连接具体实现。</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>类是对对象的抽象，抽象类是对类的抽象，接口是对行为的抽象。 接口对类的局部(行为)进行的抽象，而抽象类是对类的整体(字段、属性、方法)的抽象 。如果只关注行为抽象，那么就可以认为接口就是抽象类。</p><p>什么时候应该用抽象类或者用接口？ 如果两个东西，他们之间有很多相似的东西，比如猫和狗，这个时候发现子类中存在公共的东西，这时候需要泛化出父类，然后子类继承父类，而接口是根本不知道子类的存在，方法如何实现还不确定，比如说我们要实现一个飞的方法，这个飞的方法可能有麻雀这个类去继承这个接口实现，也可以通过超人这个类去继承实现，他们的相同点就是可以实现飞这个行为。 因此：如果行为跨越不同类的对象，可使用接口；对于一些相似的类对象，用继承抽象类。 抽象类是先有A类，然后又有B类，这时候发现A和B类有类似的地方，于是泛化出来C类，这个时候c类就是抽象类。 接口的话是先有接口，然后我们需要通过其他方法去实现这个接口的功能。</p><p>所以我们要表示一种is-a的关系，并且是为了代码复用，那么就用抽象类。 如果要表示一种has-a的关系，并且是为了解决抽象而非代码复用问题，那么就可以使用接口。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>特点</p><ul><li>接口不能包含字段，可以包含属性。</li><li>接口只能声明方法，方法不能包含代码的实现。</li><li>类在实现接口的时候，必须实现接口中声明的所有方法。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 定义接口</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">//接口不可包含实例字段</span>
    <span class="token comment">//public string Password;</span>

    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Jia</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Splice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Jia</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Splice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承接口就必须实现接口所有成员。</p><h3 id="虚方法实现接口成员" tabindex="-1"><a class="header-anchor" href="#虚方法实现接口成员"><span>虚方法实现接口成员</span></a></h3><p>为了重写，必须在基类中将其标识我virtual或者abstract。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Jia</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Jia</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APPUserSerive</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Jia</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不管从基类还是接口中调用接口成员，调用的都是子类的实现</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> appUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">APPUserSerive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> appUser<span class="token punctuation">.</span><span class="token function">Jia</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>
<span class="token class-name"><span class="token keyword">var</span></span> i2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IUserService<span class="token punctuation">)</span>appUser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Jia</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>
<span class="token class-name"><span class="token keyword">var</span></span> i3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>appUser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Jia</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式实现的接口成员不能标识为virtual，也不能实现通常意义的重写，但是它可以被重新实现（reimplemented）。</p><h3 id="动态生成接口" tabindex="-1"><a class="header-anchor" href="#动态生成接口"><span>动态生成接口</span></a></h3>`,27),r={href:"https://github.com/daver32/InterfaceGenerator",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("可以借助组件来实现动态生成接口 "),n("a",r,[s("https://github.com/daver32/InterfaceGenerator"),o(a)])])])}const y=e(i,[["render",k],["__file","jiekou.html.vue"]]),h=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/jiekou.html","title":"接口","lang":"zh-CN","frontmatter":{"title":"接口","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"jiekou","slug":"tvgpfv","docsId":"49182049","description":"介绍 接口和类相似，都可以从多个接口继承，继承接口的类都必须实现接口的所有成员。不同点如下 接口成员都是隐式抽象的，相反，类可以包含抽象成员也和有具体实现的成员。(接口在c#8后也可以包含实现，但是不能被继承类使用。) 一个类可以实现多个接口，而一个类只能继承一个类 接口只能包含方法、属性、索引器、事件。而这些正是类中可以定义为抽象的成员类型。 接口也...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/jiekou.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"接口"}],["meta",{"property":"og:description","content":"介绍 接口和类相似，都可以从多个接口继承，继承接口的类都必须实现接口的所有成员。不同点如下 接口成员都是隐式抽象的，相反，类可以包含抽象成员也和有具体实现的成员。(接口在c#8后也可以包含实现，但是不能被继承类使用。) 一个类可以实现多个接口，而一个类只能继承一个类 接口只能包含方法、属性、索引器、事件。而这些正是类中可以定义为抽象的成员类型。 接口也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"默认接口方法","slug":"默认接口方法","link":"#默认接口方法","children":[]}]},{"level":2,"title":"意义","slug":"意义","link":"#意义","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"虚方法实现接口成员","slug":"虚方法实现接口成员","link":"#虚方法实现接口成员","children":[]},{"level":3,"title":"动态生成接口","slug":"动态生成接口","link":"#动态生成接口","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.98,"words":1194},"filePathRelative":"dotnet/csharp/duixiangheleixing/jiekou.md","localizedDate":"2023年10月22日","excerpt":"<h2>介绍</h2>\\n<p>接口和类相似，都可以从多个接口继承，继承接口的类都必须实现接口的所有成员。不同点如下</p>\\n<ul>\\n<li>接口成员都是隐式抽象的，相反，类可以包含抽象成员也和有具体实现的成员。(接口在c#8后也可以包含实现，但是不能被继承类使用。)</li>\\n<li>一个类可以实现多个接口，而一个类只能继承一个类</li>\\n<li>接口只能包含方法、属性、索引器、事件。而这些正是类中可以定义为抽象的成员类型。</li>\\n<li>接口也可以在不同的源文件之间进行拆分，叫做部分接口。</li>\\n</ul>\\n<p>接口定义的是房子的框架，里面的东西都需要继承的类来实现，也就是我只给你写标题，内容你自己填充。</p>","autoDesc":true}');export{y as comp,h as data};
