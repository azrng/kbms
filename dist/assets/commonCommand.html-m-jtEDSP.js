import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c,a as n,b as a,d as e,e as p}from"./app-vSdX8vi3.js";const o={},r=p(`<h2 id="_1-docker容器信息" tabindex="-1"><a class="header-anchor" href="#_1-docker容器信息"><span>1. Docker容器信息</span></a></h2><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 查看docker容器版本</span>
docker version
<span class="token comment">## 查看docker容器信息</span>
docker info
<span class="token comment">## 查看docker容器帮助文档</span>
docker <span class="token punctuation">-</span><span class="token punctuation">-</span>help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-镜像操作"><span>2. 镜像操作</span></a></h2><h3 id="_2-1-镜像信息" tabindex="-1"><a class="header-anchor" href="#_2-1-镜像信息"><span>2.1 镜像信息</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 列出本地images</span>
docker images
<span class="token comment">## 含中间映像层</span>
docker images <span class="token punctuation">-</span>a
<span class="token comment">## 只显示镜像ID</span>
docker images <span class="token punctuation">-</span>q
<span class="token comment">## 含中间映像层</span>
docker images <span class="token punctuation">-</span>qa
<span class="token comment">## 显示镜像摘要信息(DIGEST列)</span>
docker images <span class="token punctuation">-</span><span class="token punctuation">-</span>digests
<span class="token comment">## 显示镜像完整信息</span>
docker images <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>trunc
<span class="token comment">## 查看镜像的分层</span>
docker image inspect kklldog/agile_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-镜像搜索" tabindex="-1"><a class="header-anchor" href="#_2-2-镜像搜索"><span>2.2 镜像搜索</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 搜索仓库MySQL镜像</span>
docker search mysql
<span class="token comment">## --filter=stars=600：只显示 starts&gt;=600 的镜像</span>
docker search <span class="token punctuation">-</span><span class="token punctuation">-</span>filter=stars=600 mysql
<span class="token comment">## --no-trunc 显示镜像完整 DESCRIPTION 描述</span>
docker search <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>trunc mysql
<span class="token comment">## --automated ：只列出 AUTOMATED=OK 的镜像</span>
docker search  <span class="token punctuation">-</span><span class="token punctuation">-</span>automated mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-镜像下载" tabindex="-1"><a class="header-anchor" href="#_2-3-镜像下载"><span>2.3 镜像下载</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 下载Redis官方最新镜像，采用分层下载方式，相当于：docker pull redis:latest</span>
docker pull redis
<span class="token comment">## 指定版本下载</span>
docker pull mysql<span class="token punctuation">:</span>5.7.26
<span class="token comment">## 下载仓库所有Redis镜像</span>
docker pull <span class="token punctuation">-</span>a redis
<span class="token comment">## 下载私人仓库镜像</span>
docker pull bitnami/redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-镜像删除" tabindex="-1"><a class="header-anchor" href="#_2-4-镜像删除"><span>2.4 镜像删除</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 删除镜像</span>
docker rmi 镜像ID
<span class="token comment">## 批量删除镜像</span>
docker rmi 镜像id 镜像ID
<span class="token comment">## 删除none镜像</span>
docker system prune(因为脚本错误导致镜像构建终止，所以产生了none标签的镜像)
<span class="token comment">## 删除全部的镜像</span>
docker rmi $(docker images <span class="token punctuation">-</span>ap)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-5-构建镜像"><span>2.5 构建镜像</span></a></h3><p>生成镜像的方式 第一：本地发布，拷贝到服务器，build生成镜像 第二：本地发布，然后本地build，推送到仓库，服务器拉取 第三：服务器拉取代码，然后服务器发布，再build</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 构建docker镜像</span>
docker build <span class="token punctuation">-</span>f /docker/dockerfile/mycentos <span class="token punctuation">-</span>t mycentos<span class="token punctuation">:</span><span class="token number">1.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>-f 指定文件地址</p></blockquote><h3 id="_2-6-镜像清理" tabindex="-1"><a class="header-anchor" href="#_2-6-镜像清理"><span>2.6 镜像清理</span></a></h3><p>你可以通过原生的多种 prune 命令来清理垃圾，比如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker image prune ## 清理镜像
docker container prune ## 清理容器
docker volume prune ## 清理卷
docker builder prune ## 清理构建缓存

<span class="token operator">--</span> 终极方法
docker system prune ## 清理所有
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-镜像其他操作" tabindex="-1"><a class="header-anchor" href="#_2-7-镜像其他操作"><span>2.7 镜像其他操作</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">## 导出镜像</span>
docker save <span class="token punctuation">-</span>o 导出路径 镜像ID
<span class="token comment">## 加载本地镜像</span>
docker load <span class="token punctuation">-</span>i 镜像文件
<span class="token comment">## 修改镜像名称</span>
docker tag 镜像ID  镜像新名称<span class="token punctuation">:</span>版本

示例：
docker load <span class="token punctuation">-</span>i cda.tar 进行导入
docker save cda<span class="token punctuation">:</span>latest <span class="token punctuation">-</span>o cda.tar  导出
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-容器操作" tabindex="-1"><a class="header-anchor" href="#_3-容器操作"><span>3. 容器操作</span></a></h2><h3 id="_3-1-容器启动" tabindex="-1"><a class="header-anchor" href="#_3-1-容器启动"><span>3.1 容器启动</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 新建并启动容器，参数：-i  以交互模式运行容器；-t  为容器重新分配一个伪输入终端；--name  为容器指定一个名称</span>
<span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> mycentos

<span class="token comment"># 后台启动容器，参数：-d  已守护方式启动容器</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> mycentos

<span class="token function">docker</span> run 镜像的标识<span class="token operator">|</span>镜像名词<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--name</span> mydocker
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> 宿主机端口:容器端口 <span class="token parameter variable">--name</span> 容器名称 镜像的标识<span class="token operator">|</span>镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> netcorestudy <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 netcorestudy

<span class="token comment"># 运行容器1，并连接到自定义网络</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> container1 <span class="token parameter variable">--network</span> mynetwork image1

<span class="token comment"># 运行容器2，并连接到自定义网络</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> container2 <span class="token parameter variable">--network</span> mynetwork image2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>-d：代表使用后台交互方式 -it 使用交互方式，进入到容器内部 -p：宿主机端口:容器端口：为了映射当前linux的端口和容器的端口 -P  随机指定端口; --name 容器名词：指定容器的名称 -rm 代表容器停止自动删除容器 -t：代表以交互模式启动，并为容器重新分配一个伪输入中断</p></blockquote><h3 id="_3-2-容器日志" tabindex="-1"><a class="header-anchor" href="#_3-2-容器日志"><span>3.2 容器日志</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看容器日志，默认参数</span>
<span class="token function">docker</span> logs container_name/container_id

<span class="token comment"># 查看redis容器日志，参数：-f 跟踪日志输出；-t 显示时间戳；--tail  仅列出最新N条容器日志；</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">20</span> redis

<span class="token comment"># 查看实时日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> container_name/container_id

<span class="token comment"># 查看容器redis从2019年05月21日后的最新10条日志。</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2019-05-21&quot;</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">10</span> redis

<span class="token comment"># 查看指定时间后的日志，只显示最后100行：</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2019-06-08&quot;</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">100</span> CONTAINER_ID

<span class="token comment"># 查看某时间之后的日志：</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-t</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2019-06-08&quot;</span> CONTAINER_ID

<span class="token comment"># 查看某时间段日志：</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-t</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2019-06-08&quot;</span> <span class="token parameter variable">--until</span> <span class="token string">&quot;2019-06-09&quot;</span> CONTAINER_ID

<span class="token comment"># 查看最近30分钟的日志:</span>
<span class="token function">docker</span> logs <span class="token parameter variable">--since</span> 30m CONTAINER_ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-容器进入与退出" tabindex="-1"><a class="header-anchor" href="#_3-3-容器进入与退出"><span>3.3 容器进入与退出</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> container_name/container_id <span class="token function">bash</span>
<span class="token comment"># 退出容器</span>
<span class="token builtin class-name">exit</span>

<span class="token comment"># 仅退出容器，不关闭</span>
<span class="token comment"># 快捷键：Ctrl + P + Q</span>

<span class="token comment"># 直接进入centos 容器启动命令的终端，不会启动新进程，多个attach连接共享容器屏幕，参数：--sig-proxy=false  确保CTRL-D或CTRL-C不会关闭容器</span>
<span class="token function">docker</span> attach --sig-proxy<span class="token operator">=</span>false centos 

<span class="token comment">#在 centos 容器中打开新的交互模式终端，可以启动新进程，参数：-i  即使没有附加也保持STDIN 打开；-t  分配一个伪终端</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span>  centos /bin/bash

<span class="token comment"># 以交互模式在容器中执行命令，结果返回到当前终端屏幕</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> centos <span class="token function">ls</span> <span class="token parameter variable">-l</span> /tmp

<span class="token comment"># 以分离模式在容器中执行命令，程序后台运行，结果不会反馈到当前终端</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-d</span> centos  <span class="token function">touch</span> cache.txt 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-查看容器" tabindex="-1"><a class="header-anchor" href="#_3-4-查看容器"><span>3.4 查看容器</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
<span class="token comment">## 查看正在运行的容器的ID</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-q</span>
<span class="token comment">## 查看正在运行+历史运行过的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
<span class="token comment">## 显示运行容器总文件大小</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-容器的停止与删除" tabindex="-1"><a class="header-anchor" href="#_3-5-容器的停止与删除"><span>3.5 容器的停止与删除</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">##停止一个运行中的容器</span>
<span class="token function">docker</span> stop redis
<span class="token comment">##杀掉一个运行中的容器</span>
<span class="token function">docker</span> <span class="token function">kill</span> redis
<span class="token comment">##删除一个已停止的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> redis
<span class="token comment">##删除一个运行中的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> redis
<span class="token comment">##删除多个容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>
<span class="token comment">### -l 移除容器间的网络连接，连接名为 db</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-l</span> db 
<span class="token comment">### -v 删除容器，并删除容器挂载的数据卷</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-v</span> redis

启动容器：docker start container_name/container_id
停止容器：docker stop container_name/container_id
强制停止容器：docker <span class="token function">kill</span> 容器id
重启容器：docker restart container_name/container_id
重启所有容器：docker restart <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token variable">)</span></span>
删除容器：docker <span class="token function">rm</span> container_name/container_id
删除正在运行的容器：docker <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器id
删除全部容器：docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-根据容器生成镜像" tabindex="-1"><a class="header-anchor" href="#_3-6-根据容器生成镜像"><span>3.6 根据容器生成镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 基于当前redis容器创建一个新的镜像</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;描述的信息&quot;</span>   <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者&quot;</span>  容器Id  TAG标签
<span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;DeepInThought&quot;</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;my redis&quot;</span> <span class="token punctuation">[</span>redis容器ID<span class="token punctuation">]</span>  myredis:1.0

<span class="token comment">## 启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> myredis myredis:1.0

-- 生成的时候删除老的
<span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> gitlabnet5sample <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8060</span>:80 gitlabnet5sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参数： -a 提交的镜像作者； -c 使用Dockerfile指令来创建镜像； -m :提交时的说明文字； -p :在commit时，将容器暂停</p></blockquote><h3 id="_3-7-容器与主机间的数据拷贝" tabindex="-1"><a class="header-anchor" href="#_3-7-容器与主机间的数据拷贝"><span>3.7 容器与主机间的数据拷贝</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 将rabbitmq容器中的文件copy至本地路径</span>
<span class="token function">docker</span> <span class="token function">cp</span> container_name/container_id:/<span class="token punctuation">[</span>container_path<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_path<span class="token punctuation">]</span>
<span class="token comment"># 示例</span>
<span class="token function">docker</span> <span class="token function">cp</span> 2a202fa:/usr/share/elasticsearch/plugins/ ./es/es-with-ik-plugins/

<span class="token comment"># 将主机文件copy至rabbitmq容器</span>
<span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>local_path<span class="token punctuation">]</span>  container_name/container_id:/<span class="token punctuation">[</span>container_path<span class="token punctuation">]</span>/

<span class="token comment"># 将主机文件copy至rabbitmq容器，目录重命名为[container_path]（注意与非重命名copy的区别）</span>
<span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">[</span>local_path<span class="token punctuation">]</span>  container_name/container_id:/<span class="token punctuation">[</span>container_path<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-删除容器" tabindex="-1"><a class="header-anchor" href="#_3-8-删除容器"><span>3.8 删除容器</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> container_name/container_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-9-其他操作" tabindex="-1"><a class="header-anchor" href="#_3-9-其他操作"><span>3.9 其他操作</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>查询当前进程中包含dotnet关键词的进程：ps <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> dotnet
限制镜像使用的内存：docker run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> hostPort:containerPort <span class="token parameter variable">--name</span> 别名 <span class="token parameter variable">-m</span> 200m container_name/container_id
限制镜像使用的 cpu 数目：docker run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> hostPort:containerPort <span class="token parameter variable">--name</span> 别名 <span class="token parameter variable">--cpus</span> <span class="token number">1</span> container_name/container_id
<span class="token comment">## 查看容器的进程信息</span>
<span class="token function">docker</span> <span class="token function">top</span> 
<span class="token comment">## 查看镜像的元数据</span>
<span class="token function">docker</span> inspect 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存限制" tabindex="-1"><a class="header-anchor" href="#内存限制"><span>内存限制</span></a></h2><p>Docker 提供的内存限制功能有以下几点： 1、容器能使用的内存和交换分区大小。 2、容器的核心内存大小。 3、容器虚拟内存的交换行为。 4、容器内存的软性限制。 5、是否杀死占用过多内存的容器。 6、容器被杀死的优先级</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">-</span>m<span class="token punctuation">,</span><span class="token operator">--</span>memory     内存限制，格式是数字加单位，单位可以为 b<span class="token punctuation">,</span>k<span class="token punctuation">,</span>m<span class="token punctuation">,</span>g。最小为 <span class="token number">4M</span>
<span class="token operator">--</span>memory<span class="token operator">-</span>swap   内存<span class="token operator">+</span>交换分区大小总限制。格式同上。必须必<span class="token operator">-</span>m设置的大
<span class="token operator">--</span>memory<span class="token operator">-</span>reservation    内存的软性限制。格式同上
<span class="token operator">--</span>oom<span class="token operator">-</span>kill<span class="token operator">-</span>disable      是否阻止 OOM killer 杀死容器，默认没设置
<span class="token operator">--</span>oom<span class="token operator">-</span>score<span class="token operator">-</span>adj         容器被 OOM killer 杀死的优先级，范围是<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span>，默认为 <span class="token number">0</span>
<span class="token operator">--</span>memory<span class="token operator">-</span>swappiness     用于设置容器的虚拟内存控制行为。值为 <span class="token number">0</span><span class="token operator">~</span><span class="token number">100</span> 之间的整数
<span class="token operator">--</span>kernel<span class="token operator">-</span>memory         核心内存限制。格式同上，最小为 <span class="token number">4M</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户内存限制就是对容器能使用的内存和交换分区的大小作出限制。 使用时要遵循两条直观的规则：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">-</span>m，<span class="token operator">--</span>memory选项的参数最小为 <span class="token number">4M</span>。
<span class="token operator">--</span>memory<span class="token operator">-</span>swap不是交换分区，而是内存加交换分区的总大小，所以<span class="token operator">--</span>memory<span class="token operator">-</span>swap必须比<span class="token operator">-</span>m<span class="token punctuation">,</span><span class="token operator">--</span>memory大。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cpu限制" tabindex="-1"><a class="header-anchor" href="#cpu限制"><span>CPU限制</span></a></h2><p>docker run命令和 CPU 限制相关的所有选项如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span>cpuset<span class="token operator">-</span>cpus<span class="token operator">=</span><span class="token string">&quot;&quot;</span>          允许使用的 CPU 集，值可以为 <span class="token number">0</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>
<span class="token operator">-</span>c<span class="token punctuation">,</span><span class="token operator">--</span>cpu<span class="token operator">-</span>shares<span class="token operator">=</span><span class="token number">0</span>   CPU     共享权值（相对权重）
cpu<span class="token operator">-</span>period<span class="token operator">=</span><span class="token number">0</span>              限制 CPU CFS 的周期，范围从 100ms<span class="token operator">~</span>1s，即<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">]</span>
<span class="token operator">--</span>cpu<span class="token operator">-</span>quota<span class="token operator">=</span><span class="token number">0</span>             限制 CPU CFS 配额，必须不小于1ms，即 <span class="token operator">&gt;=</span> <span class="token number">1000</span>
<span class="token operator">--</span>cpuset<span class="token operator">-</span>mems<span class="token operator">=</span><span class="token string">&quot;&quot;</span>          允许在上执行的内存节点（MEMs），只对 NUMA 系统有效
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中--cpuset-cpus用于设置容器可以使用的 vCPU 核。-c,--cpu-shares用于设置多个容器竞争 CPU 时，各个容器相对能分配到的 CPU 时间比例。--cpu-period和--cpu-quata用于绝对设置容器能使用 CPU 时间。</p><h2 id="缓存限制" tabindex="-1"><a class="header-anchor" href="#缓存限制"><span>缓存限制</span></a></h2><p>尝试 builder 的 GC，这样就不会在本地保留构建太多缓存了。你可以通过修改 docker deamon 的配置文件来开启这个功能</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;builder&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;gc&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">&quot;defaultKeepStorage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;10GB&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;policy&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;keepStorage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;10GB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;filter&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;unused-for=2200h&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;keepStorage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;50GB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;filter&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;unused-for=3300h&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;keepStorage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;100GB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),d={href:"https://docs.docker.com/build/cache/garbage-collection/",target:"_blank",rel:"noopener noreferrer"},u=n("h3",{id:"日志限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日志限制"},[n("span",null,"日志限制")])],-1),m={href:"https://mp.weixin.qq.com/s/EILo24D92Y7YPLBxQpO6Cg",target:"_blank",rel:"noopener noreferrer"};function k(v,b){const s=l("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[a("文章："),n("a",d,[a("https://docs.docker.com/build/cache/garbage-collection/"),e(s)])]),u,n("p",null,[a("文章："),n("a",m,[a("https://mp.weixin.qq.com/s/EILo24D92Y7YPLBxQpO6Cg"),e(s)])])])}const f=t(o,[["render",k],["__file","commonCommand.html.vue"]]),_=JSON.parse('{"path":"/cloud/container/docker/commonCommand.html","title":"Docker常用命令","lang":"zh-CN","frontmatter":{"title":"Docker常用命令","lang":"zh-CN","date":"2023-05-08T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"dockerchangyongmingling","slug":"hspv90","docsId":"29454090","description":"1. Docker容器信息 2. 镜像操作 2.1 镜像信息 2.2 镜像搜索 2.3 镜像下载 2.4 镜像删除 2.5 构建镜像 生成镜像的方式 第一：本地发布，拷贝到服务器，build生成镜像 第二：本地发布，然后本地build，推送到仓库，服务器拉取 第三：服务器拉取代码，然后服务器发布，再build -f 指定文件地址 2.6 镜像清理 你可...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/container/docker/commonCommand.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Docker常用命令"}],["meta",{"property":"og:description","content":"1. Docker容器信息 2. 镜像操作 2.1 镜像信息 2.2 镜像搜索 2.3 镜像下载 2.4 镜像删除 2.5 构建镜像 生成镜像的方式 第一：本地发布，拷贝到服务器，build生成镜像 第二：本地发布，然后本地build，推送到仓库，服务器拉取 第三：服务器拉取代码，然后服务器发布，再build -f 指定文件地址 2.6 镜像清理 你可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-12T15:01:55.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-12T15:01:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker常用命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-12T15:01:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"1. Docker容器信息","slug":"_1-docker容器信息","link":"#_1-docker容器信息","children":[]},{"level":2,"title":"2. 镜像操作","slug":"_2-镜像操作","link":"#_2-镜像操作","children":[{"level":3,"title":"2.1 镜像信息","slug":"_2-1-镜像信息","link":"#_2-1-镜像信息","children":[]},{"level":3,"title":"2.2 镜像搜索","slug":"_2-2-镜像搜索","link":"#_2-2-镜像搜索","children":[]},{"level":3,"title":"2.3 镜像下载","slug":"_2-3-镜像下载","link":"#_2-3-镜像下载","children":[]},{"level":3,"title":"2.4 镜像删除","slug":"_2-4-镜像删除","link":"#_2-4-镜像删除","children":[]},{"level":3,"title":"2.5 构建镜像","slug":"_2-5-构建镜像","link":"#_2-5-构建镜像","children":[]},{"level":3,"title":"2.6 镜像清理","slug":"_2-6-镜像清理","link":"#_2-6-镜像清理","children":[]},{"level":3,"title":"2.7 镜像其他操作","slug":"_2-7-镜像其他操作","link":"#_2-7-镜像其他操作","children":[]}]},{"level":2,"title":"3. 容器操作","slug":"_3-容器操作","link":"#_3-容器操作","children":[{"level":3,"title":"3.1 容器启动","slug":"_3-1-容器启动","link":"#_3-1-容器启动","children":[]},{"level":3,"title":"3.2 容器日志","slug":"_3-2-容器日志","link":"#_3-2-容器日志","children":[]},{"level":3,"title":"3.3 容器进入与退出","slug":"_3-3-容器进入与退出","link":"#_3-3-容器进入与退出","children":[]},{"level":3,"title":"3.4 查看容器","slug":"_3-4-查看容器","link":"#_3-4-查看容器","children":[]},{"level":3,"title":"3.5 容器的停止与删除","slug":"_3-5-容器的停止与删除","link":"#_3-5-容器的停止与删除","children":[]},{"level":3,"title":"3.6 根据容器生成镜像","slug":"_3-6-根据容器生成镜像","link":"#_3-6-根据容器生成镜像","children":[]},{"level":3,"title":"3.7 容器与主机间的数据拷贝","slug":"_3-7-容器与主机间的数据拷贝","link":"#_3-7-容器与主机间的数据拷贝","children":[]},{"level":3,"title":"3.8 删除容器","slug":"_3-8-删除容器","link":"#_3-8-删除容器","children":[]},{"level":3,"title":"3.9 其他操作","slug":"_3-9-其他操作","link":"#_3-9-其他操作","children":[]}]},{"level":2,"title":"内存限制","slug":"内存限制","link":"#内存限制","children":[]},{"level":2,"title":"CPU限制","slug":"cpu限制","link":"#cpu限制","children":[]},{"level":2,"title":"缓存限制","slug":"缓存限制","link":"#缓存限制","children":[{"level":3,"title":"日志限制","slug":"日志限制","link":"#日志限制","children":[]}]}],"git":{"createdTime":1695541854000,"updatedTime":1697122915000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":8.08,"words":2425},"filePathRelative":"cloud/container/docker/commonCommand.md","localizedDate":"2023年5月8日","excerpt":"<h2>1. Docker容器信息</h2>\\n<div class=\\"language-yaml\\" data-ext=\\"yml\\" data-title=\\"yml\\"><pre class=\\"language-yaml\\"><code><span class=\\"token comment\\">## 查看docker容器版本</span>\\ndocker version\\n<span class=\\"token comment\\">## 查看docker容器信息</span>\\ndocker info\\n<span class=\\"token comment\\">## 查看docker容器帮助文档</span>\\ndocker <span class=\\"token punctuation\\">-</span><span class=\\"token punctuation\\">-</span>help\\n</code></pre></div>","autoDesc":true}');export{f as comp,_ as data};
