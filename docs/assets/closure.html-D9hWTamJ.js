import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as n,b as a}from"./app-Bw62I61B.js";const l={},t=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>闭包的概念主要是由直线函数以及函数相关的上下文环境组合而成的实体。通过闭包，函数与其上下文变量之间建立关联关系，然后上下文变量的状态可以在函数的多次调用过程中持久保持。从作用域的角度而言，私有变量的生存期被延长，函数调用所生成的值在下次调用的时候仍被保持。</p><h2 id="优点和缺点" tabindex="-1"><a class="header-anchor" href="#优点和缺点"><span>优点和缺点</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>代码简化，应用闭包可以实现一定程度的模块化复用，大大简化了代码的执行逻辑</li><li>数据共享与延迟</li><li>安全性。闭包的场合，有利于上下文信息的封闭性，实现了一定程序的信息隐蔽。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li>应用闭包，不可避免的会将程序的逻辑变得负责。</li><li>闭包的延迟特性会带来一定的逻辑问题</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>形成闭包的非必要条件</p><ul><li>嵌套定义的函数</li><li>匿名函数</li><li>将函数作为参数或者返回值</li></ul><h3 id="委托形成的闭包" tabindex="-1"><a class="header-anchor" href="#委托形成的闭包"><span>委托形成的闭包</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>string value = &quot;Hello Closure&quot;;
MessageDelegate message = () =&gt; { Show(value); };
message();


static void Show(string message)
{
    Console.WriteLine(message);
}

public delegate void MessageDelegate();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包的延迟特性" tabindex="-1"><a class="header-anchor" href="#闭包的延迟特性"><span>闭包的延迟特性</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var action = new List&lt;Action&gt;();
for (int i = 1; i &lt; 5; i++)
{
    action.Add(() =&gt; { Console.WriteLine(i); });
}

action.ForEach(x =&gt; x());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该示例虽然你期望遍历输出1、2、3、4这样子的值，但是就是因为闭包的数据共享所有产生了问题，通常的解决方案就是在循环中应用中间量</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var action = new List&lt;Action&gt;();
for (int i = 1; i &lt; 5; i++)
{
    var v = i;
    action.Add(() =&gt; { Console.WriteLine(v); });
}

action.ForEach(x =&gt; x());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),s=[t];function r(d,c){return i(),n("div",null,s)}const h=e(l,[["render",r],["__file","closure.html.vue"]]),v=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/closure.html","title":"闭包","lang":"zh-CN","frontmatter":{"title":"闭包","lang":"zh-CN","date":"2023-11-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["闭包"],"description":"概述 闭包的概念主要是由直线函数以及函数相关的上下文环境组合而成的实体。通过闭包，函数与其上下文变量之间建立关联关系，然后上下文变量的状态可以在函数的多次调用过程中持久保持。从作用域的角度而言，私有变量的生存期被延长，函数调用所生成的值在下次调用的时候仍被保持。 优点和缺点 优点 代码简化，应用闭包可以实现一定程度的模块化复用，大大简化了代码的执行逻辑...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/closure.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"闭包"}],["meta",{"property":"og:description","content":"概述 闭包的概念主要是由直线函数以及函数相关的上下文环境组合而成的实体。通过闭包，函数与其上下文变量之间建立关联关系，然后上下文变量的状态可以在函数的多次调用过程中持久保持。从作用域的角度而言，私有变量的生存期被延长，函数调用所生成的值在下次调用的时候仍被保持。 优点和缺点 优点 代码简化，应用闭包可以实现一定程度的模块化复用，大大简化了代码的执行逻辑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T13:07:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"闭包"}],["meta",{"property":"article:published_time","content":"2023-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T13:07:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T13:07:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"优点和缺点","slug":"优点和缺点","link":"#优点和缺点","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"委托形成的闭包","slug":"委托形成的闭包","link":"#委托形成的闭包","children":[]},{"level":3,"title":"闭包的延迟特性","slug":"闭包的延迟特性","link":"#闭包的延迟特性","children":[]}]}],"git":{"createdTime":1700399228000,"updatedTime":1700399228000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.44,"words":433},"filePathRelative":"dotnet/csharp/duixiangheleixing/closure.md","localizedDate":"2023年11月19日","excerpt":"<h2>概述</h2>\\n<p>闭包的概念主要是由直线函数以及函数相关的上下文环境组合而成的实体。通过闭包，函数与其上下文变量之间建立关联关系，然后上下文变量的状态可以在函数的多次调用过程中持久保持。从作用域的角度而言，私有变量的生存期被延长，函数调用所生成的值在下次调用的时候仍被保持。</p>\\n<h2>优点和缺点</h2>\\n<h3>优点</h3>\\n<ul>\\n<li>代码简化，应用闭包可以实现一定程度的模块化复用，大大简化了代码的执行逻辑</li>\\n<li>数据共享与延迟</li>\\n<li>安全性。闭包的场合，有利于上下文信息的封闭性，实现了一定程序的信息隐蔽。</li>\\n</ul>\\n<h3>缺点</h3>","autoDesc":true}');export{h as comp,v as data};
