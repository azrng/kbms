import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,d as e}from"./app-CBxp4zeL.js";const s={},c=e(`<p>static变量做一个进程级别缓存，从而提高程序性能，这个也是一个非常好的一级缓存。     普通的static变量</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public static Dictionary&lt;int, string&gt; cachedDict = new Dictionary&lt;int, string&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是一个进程级别缓存，多个线程共享一个数据，所以在多线程的环境下，你需要注意同步的情况，要么使用锁，要么使用 ConcurrentDictionary。   线程级别缓存 使用ThreadStstic标记static变量</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[ThreadStatic]
public static List&lt;string&gt; cachedDict = new List&lt;string&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个线程之间cacheDict的数据是独立的，同一个线程下共享这一套数据。所以这个是线程级别的缓存。 注意点就是使用的时候需要判断是否为null，示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>cachedDict <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> cachedDict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cachedDict<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToLongDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),i=[c];function o(p,r){return a(),n("div",null,i)}const u=t(s,[["render",o],["__file","statichuancun.html.vue"]]),m=JSON.parse('{"path":"/dotnet/base/huancun/statichuancun.html","title":"Static缓存","lang":"zh-CN","frontmatter":{"title":"Static缓存","lang":"zh-CN","date":"2022-04-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"statichuancun","slug":"fttltg","docsId":"29633961","description":"static变量做一个进程级别缓存，从而提高程序性能，这个也是一个非常好的一级缓存。 普通的static变量 这是一个进程级别缓存，多个线程共享一个数据，所以在多线程的环境下，你需要注意同步的情况，要么使用锁，要么使用 ConcurrentDictionary。 线程级别缓存 使用ThreadStstic标记static变量 每个线程之间cacheDi...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/huancun/statichuancun.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Static缓存"}],["meta",{"property":"og:description","content":"static变量做一个进程级别缓存，从而提高程序性能，这个也是一个非常好的一级缓存。 普通的static变量 这是一个进程级别缓存，多个线程共享一个数据，所以在多线程的环境下，你需要注意同步的情况，要么使用锁，要么使用 ConcurrentDictionary。 线程级别缓存 使用ThreadStstic标记static变量 每个线程之间cacheDi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Static缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"dotnet/base/huancun/statichuancun.md","localizedDate":"2022年4月5日","excerpt":"<p>static变量做一个进程级别缓存，从而提高程序性能，这个也是一个非常好的一级缓存。\\n&nbsp;\\n&nbsp;\\n普通的static变量</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>public static Dictionary&lt;int, string&gt; cachedDict = new Dictionary&lt;int, string&gt;();\\n</code></pre></div><p>这是一个进程级别缓存，多个线程共享一个数据，所以在多线程的环境下，你需要注意同步的情况，要么使用锁，要么使用 ConcurrentDictionary。\\n&nbsp;\\n线程级别缓存\\n使用ThreadStstic标记static变量</p>","autoDesc":true}');export{u as comp,m as data};
