import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<h2 id="阅读前提" tabindex="-1"><a class="header-anchor" href="#阅读前提"><span>阅读前提</span></a></h2><p>本文需要掌握一定的.NetCore认证知识的前提下阅读。 本文的代码需要在已经实现JWT认证的项目中使用。</p><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>默认的授权方案只有根据角色授权或者组装角色成为策略授权，但是我能否实现动态授权那？比如我查询数据库然后判断该用户是否有操作该权限的方法那？并且还使用JWT进行认证的方式。</p><h2 id="定义自定义策略" tabindex="-1"><a class="header-anchor" href="#定义自定义策略"><span>定义自定义策略</span></a></h2><p>原来的策略授权方案配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRolePolicy&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//必须角色为admin 和user才可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;adminanduser&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//必须角色为admin并且是user才可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;AdminAndUser&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//角色为admin或者user都可以访问</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;AdminOrUser&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;edit&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span>
        policy<span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>cliaim <span class="token operator">=&gt;</span> cliaim<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;edit role&quot;</span> <span class="token operator">&amp;&amp;</span> cliaim<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">&quot;super admin&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想扩展使用自定义策略，那么我们可以先看下RequireRole是如何实现的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">AuthorizationPolicyBuilder</span> <span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>roles <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IAuthorizationRequirement<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RolesAuthorizationRequirement</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们也可以继承自接口IAuthorizationRequirement实现我们的自定义授权策略，然后我们看RolesAuthorizationRequirement类。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RolesAuthorizationRequirement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>RolesAuthorizationRequirement<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该类继承了一个AuthorizationHandler<code>&lt;RolesAuthorizationRequirement&gt;</code>，以及上面的接口，那么如果我们想编写咱们自定义的策略，那么就变成了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>PermissionHandler<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样子如果我们想增加一些自定义的配置，那么就需要在这PermissionHandler里面设置了，就像RolesAuthorizationRequirement一样，在该类里面定义属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> AllowedRoles <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么我能否去将自定义的属性拆分开那？因为格式是固定的，自定义的属性只能放到<code>AuthorizationHandler&lt;T&gt;</code>中，那么我们看看这个T有什么要求？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>TRequirement<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAuthorizationHandler</span></span>
    <span class="token keyword">where</span> <span class="token class-name">TRequirement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">TRequirement</span> requirement <span class="token keyword">in</span> context<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TRequirement<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span>
      <span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">,</span>
      <span class="token class-name">TRequirement</span> requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们可以模仿着定义一个我们的AuthorizationRequirement如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///权限需求</span>
<span class="token doc-comment comment">/// 继承 IAuthorizationRequirement是因为AuthorizationHandler中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionRequirement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户对应的角色权限集合</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>RolePermissionRelation<span class="token punctuation">&gt;</span></span> Permissions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>RolePermissionRelation<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 允许匿名访问的action url</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> AllowAnonymousAction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 认证授权类型(如果一个项目配置了多种授权方式，可以用来区别)</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ClaimType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 角色和url权限关系</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">RolePermissionRelation</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户或角色或其他凭据名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> RoleId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 请求Url</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PermissionHandler就继承自：<code>AuthorizationHandler&lt;PermissionRequirement&gt;</code>并且实现抽象类的HandleRequirementAsync方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//IAuthorizationRequirement可以删除，因为AuthorizationHandler&lt;T&gt;已经继承了IAuthorizationRequirement接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>PermissionRequirement<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">,</span> <span class="token class-name">PermissionRequirement</span> requirement<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在模仿着RequireRole编写一个RequirePermission的扩展方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 必须的权限</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>policyBuilder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>策略构造器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>permission<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>自定义策略需求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ArgumentNullException<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthorizationPolicyBuilder</span> <span class="token function">RequirePermission</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthorizationPolicyBuilder</span> policyBuilder<span class="token punctuation">,</span> <span class="token class-name">PermissionRequirement</span> permission<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>permission <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    policyBuilder<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> policyBuilder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将该策略加入到授权配置中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//授权</span>
services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 自定义权限需求</span>
    <span class="token class-name"><span class="token keyword">var</span></span> permissionRequirement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PermissionRequirement</span><span class="token punctuation">(</span><span class="token string">&quot;/home/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;Permission&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequirePermission</span><span class="token punctuation">(</span>permissionRequirement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后还需要将我们的自定义授权需求替换默认的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//将自定义的授权处理器 匹配给官方授权处理器接口，这样当系统处理授权的时候，就会直接访问我们自定义的授权处理器了。</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthorizationHandler<span class="token punctuation">,</span> PermissionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我们的自定义授权策略就写好了，那么我们进行测试一下吧，我们访问我们的接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 获取（授权）</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Permission&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>呀？居然报错了，提示未实现，尴尬了，那个自定义授权处理器还没写实现方法的。</p><h2 id="实现自定义策略" tabindex="-1"><a class="header-anchor" href="#实现自定义策略"><span>实现自定义策略</span></a></h2><p>那我们现在就来实现PermissionHandler的HandleRequirementAsync方法，这点代码每个公司可能又不大相同，所以我就直接粘贴代码了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义权限授权需求处理器</span>
<span class="token doc-comment comment">///IAuthorizationRequirement可以删除，因为AuthorizationHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>T</span><span class="token punctuation">&gt;</span></span>已经继承了IAuthorizationRequirement接口</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthorizationHandler<span class="token punctuation">&lt;</span>PermissionRequirement<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IAuthorizationRequirement</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 验证方案提供对象</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAuthenticationSchemeProvider</span> _schemes<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _accessor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUserService</span> _userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">PermissionHandler</span><span class="token punctuation">(</span><span class="token class-name">IAuthenticationSchemeProvider</span> schemes<span class="token punctuation">,</span>
        <span class="token class-name">IHttpContextAccessor</span> httpContextAccessor<span class="token punctuation">,</span>
        <span class="token class-name">IServiceScopeFactory</span> factory
    <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _schemes <span class="token operator">=</span> schemes<span class="token punctuation">;</span>
        _userService <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _accessor <span class="token operator">=</span> httpContextAccessor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleRequirementAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationHandlerContext</span> context<span class="token punctuation">,</span>
        <span class="token class-name">PermissionRequirement</span> requirement<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> httpContext <span class="token operator">=</span> _accessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">;</span>
        <span class="token comment">//请求Url</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">//请求的url</span>
        <span class="token class-name"><span class="token keyword">var</span></span> questUrl <span class="token operator">=</span> httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">?.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>questUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果访问的是无需授权的直接通过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirement<span class="token punctuation">.</span>AllowAnonymousAction<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> questUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>requirement<span class="token punctuation">.</span>Permissions<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//获取用户权限的操作，如果要做缓存也不能设置太久的缓存</span>
            requirement<span class="token punctuation">.</span>Permissions <span class="token operator">=</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">GetRoleAuthAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 验证登录</span>

        <span class="token comment">//判断请求是否停止</span>
        <span class="token class-name"><span class="token keyword">var</span></span> handlers <span class="token operator">=</span> httpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuthenticationHandlerProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> scheme <span class="token keyword">in</span> <span class="token keyword">await</span> _schemes<span class="token punctuation">.</span><span class="token function">GetRequestHandlerSchemesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> handlers<span class="token punctuation">.</span><span class="token function">GetHandlerAsync</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> scheme<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">IAuthenticationRequestHandler</span>
                    handler <span class="token operator">&amp;&amp;</span> <span class="token keyword">await</span> handler<span class="token punctuation">.</span><span class="token function">HandleRequestAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//判断请求是否拥有凭据，即有没有登录</span>
        <span class="token class-name"><span class="token keyword">var</span></span> defaultAuthenticate <span class="token operator">=</span> <span class="token keyword">await</span> _schemes<span class="token punctuation">.</span><span class="token function">GetDefaultAuthenticateSchemeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultAuthenticate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpContext<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span>defaultAuthenticate<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//result?.Principal不为空即登录成功</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">?.</span>Principal <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token class-name"><span class="token keyword">var</span></span> roleIds <span class="token operator">=</span> requirement<span class="token punctuation">.</span>Permissions<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>w <span class="token operator">=&gt;</span> w<span class="token punctuation">.</span>Url<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> questUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//权限中是否存在请求的url</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>roleIds<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 获取当前用户的角色信息</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currentUserRoles <span class="token operator">=</span>
            <span class="token punctuation">(</span>httpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> isMatchRole <span class="token operator">=</span> roleIds<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> currentUserRoles<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>RoleId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//验证权限</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUserRoles<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>isMatchRole<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//判断过期时间（这里仅仅是最坏验证原则，你可以不要这个if else的判断，因为我们使用的官方验证，Token过期后上边的result?.Principal 就为 null 了，进不到这里了，因此这里其实可以不用验证过期时间，只是做最后严谨判断）</span>
        <span class="token class-name"><span class="token keyword">var</span></span> expirationTime <span class="token operator">=</span> httpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims
            <span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Expiration<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>expirationTime <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">Succeed</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        context<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>多写多看才能记忆深刻。</p>`,35),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","kuozhanzidingyishouquan.html.vue"]]),d=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/kuozhanzidingyishouquan.html","title":"扩展自定义授权","lang":"zh-CN","frontmatter":{"title":"扩展自定义授权","lang":"zh-CN","date":"2022-04-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"kuozhanzidingyishouquan","slug":"kt4oun","docsId":"52328260","description":"阅读前提 本文需要掌握一定的.NetCore认证知识的前提下阅读。 本文的代码需要在已经实现JWT认证的项目中使用。 目的 默认的授权方案只有根据角色授权或者组装角色成为策略授权，但是我能否实现动态授权那？比如我查询数据库然后判断该用户是否有操作该权限的方法那？并且还使用JWT进行认证的方式。 定义自定义策略 原来的策略授权方案配置 如果想扩展使用自定...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/kuozhanzidingyishouquan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"扩展自定义授权"}],["meta",{"property":"og:description","content":"阅读前提 本文需要掌握一定的.NetCore认证知识的前提下阅读。 本文的代码需要在已经实现JWT认证的项目中使用。 目的 默认的授权方案只有根据角色授权或者组装角色成为策略授权，但是我能否实现动态授权那？比如我查询数据库然后判断该用户是否有操作该权限的方法那？并且还使用JWT进行认证的方式。 定义自定义策略 原来的策略授权方案配置 如果想扩展使用自定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T15:51:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T15:51:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"扩展自定义授权\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T15:51:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"阅读前提","slug":"阅读前提","link":"#阅读前提","children":[]},{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"定义自定义策略","slug":"定义自定义策略","link":"#定义自定义策略","children":[]},{"level":2,"title":"实现自定义策略","slug":"实现自定义策略","link":"#实现自定义策略","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697989900000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":5.17,"words":1550},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/kuozhanzidingyishouquan.md","localizedDate":"2022年4月27日","excerpt":"<h2>阅读前提</h2>\\n<p>本文需要掌握一定的.NetCore认证知识的前提下阅读。\\n本文的代码需要在已经实现JWT认证的项目中使用。</p>\\n<h2>目的</h2>\\n<p>默认的授权方案只有根据角色授权或者组装角色成为策略授权，但是我能否实现动态授权那？比如我查询数据库然后判断该用户是否有操作该权限的方法那？并且还使用JWT进行认证的方式。</p>\\n<h2>定义自定义策略</h2>\\n<p>原来的策略授权方案配置</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>builder<span class=\\"token punctuation\\">.</span>Services<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddAuthorization</span><span class=\\"token punctuation\\">(</span>options <span class=\\"token operator\\">=&gt;</span>\\n<span class=\\"token punctuation\\">{</span>\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"deleteRolePolicy\\"</span><span class=\\"token punctuation\\">,</span> policy <span class=\\"token operator\\">=&gt;</span> policy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireClaim</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"deleteRole\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//必须角色为admin 和user才可以访问</span>\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"adminanduser\\"</span><span class=\\"token punctuation\\">,</span> t <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//必须角色为admin并且是user才可以访问</span>\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AdminAndUser\\"</span><span class=\\"token punctuation\\">,</span> t <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//角色为admin或者user都可以访问</span>\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AdminOrUser\\"</span><span class=\\"token punctuation\\">,</span> t <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"edit\\"</span><span class=\\"token punctuation\\">,</span> policy <span class=\\"token operator\\">=&gt;</span>\\n        policy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RequireAssertion</span><span class=\\"token punctuation\\">(</span>context <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>User<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsInRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n        context<span class=\\"token punctuation\\">.</span>User<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">HasClaim</span><span class=\\"token punctuation\\">(</span>cliaim <span class=\\"token operator\\">=&gt;</span> cliaim<span class=\\"token punctuation\\">.</span>Type <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"edit role\\"</span> <span class=\\"token operator\\">&amp;&amp;</span> cliaim<span class=\\"token punctuation\\">.</span>Value <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"true\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span>\\n        context<span class=\\"token punctuation\\">.</span>User<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsInRole</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"super admin\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
