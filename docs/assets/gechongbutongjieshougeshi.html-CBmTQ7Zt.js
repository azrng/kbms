import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as t}from"./app-D8HBJYTp.js";const e={},o=t(`<h3 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary"><span>Dictionary</span></a></h3><p>RawData(Dictionary&lt;string, string&gt; data)</p><h4 id="postman请求格式" tabindex="-1"><a class="header-anchor" href="#postman请求格式"><span>postman请求格式</span></a></h4><p>raw</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;keys&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;121&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;aa&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;555&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="netcore代码" tabindex="-1"><a class="header-anchor" href="#netcore代码"><span>NetCore代码</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> httpContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/weatherforecast/RawData&quot;</span><span class="token punctuation">,</span> httpContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用基本数据类型" tabindex="-1"><a class="header-anchor" href="#常用基本数据类型"><span>常用基本数据类型</span></a></h3><p>FormData([FromForm] string aaa, [FromForm] string bbbb)</p><h4 id="postman请求格式-1" tabindex="-1"><a class="header-anchor" href="#postman请求格式-1"><span>postman请求格式</span></a></h4><p>body=》form-data</p><h4 id="netcore代码-1" tabindex="-1"><a class="header-anchor" href="#netcore代码-1"><span>NetCore代码</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bb&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> httpContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/weatherforecast/FormData&quot;</span><span class="token punctuation">,</span> httpContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组和泛型" tabindex="-1"><a class="header-anchor" href="#数组和泛型"><span>数组和泛型</span></a></h3><p>ArrayData(string[] data)</p><h4 id="postman请求格式-2" tabindex="-1"><a class="header-anchor" href="#postman请求格式-2"><span>postman请求格式</span></a></h4><p>raw=》json</p><h4 id="netcore代码-2" tabindex="-1"><a class="header-anchor" href="#netcore代码-2"><span>NetCore代码</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> strarr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;44&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;55&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;66&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> httpContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>strarr<span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/weatherforecast/ArrayData&quot;</span><span class="token punctuation">,</span> httpContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),p=[o];function c(i,l){return a(),s("div",null,p)}const d=n(e,[["render",c],["__file","gechongbutongjieshougeshi.html.vue"]]),k=JSON.parse('{"path":"/dotnet/api/controllerApi/gechongbutongjieshougeshi.html","title":"各种不同接收格式","lang":"zh-CN","frontmatter":{"title":"各种不同接收格式","lang":"zh-CN","date":"2022-02-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gechongbutongjieshougeshi","slug":"ykz5i0","docsId":"30621902","description":"Dictionary RawData(Dictionary<string, string> data) postman请求格式 raw NetCore代码 常用基本数据类型 FormData([FromForm] string aaa, [FromForm] string bbbb) postman请求格式 body=》form-data NetCor...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/gechongbutongjieshougeshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"各种不同接收格式"}],["meta",{"property":"og:description","content":"Dictionary RawData(Dictionary<string, string> data) postman请求格式 raw NetCore代码 常用基本数据类型 FormData([FromForm] string aaa, [FromForm] string bbbb) postman请求格式 body=》form-data NetCor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"各种不同接收格式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"Dictionary","slug":"dictionary","link":"#dictionary","children":[{"level":4,"title":"postman请求格式","slug":"postman请求格式","link":"#postman请求格式","children":[]},{"level":4,"title":"NetCore代码","slug":"netcore代码","link":"#netcore代码","children":[]}]},{"level":3,"title":"常用基本数据类型","slug":"常用基本数据类型","link":"#常用基本数据类型","children":[{"level":4,"title":"postman请求格式","slug":"postman请求格式-1","link":"#postman请求格式-1","children":[]},{"level":4,"title":"NetCore代码","slug":"netcore代码-1","link":"#netcore代码-1","children":[]}]},{"level":3,"title":"数组和泛型","slug":"数组和泛型","link":"#数组和泛型","children":[{"level":4,"title":"postman请求格式","slug":"postman请求格式-2","link":"#postman请求格式-2","children":[]},{"level":4,"title":"NetCore代码","slug":"netcore代码-2","link":"#netcore代码-2","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.57,"words":171},"filePathRelative":"dotnet/api/controllerApi/gechongbutongjieshougeshi.md","localizedDate":"2022年2月3日","excerpt":"<h3>Dictionary</h3>\\n<p>RawData(Dictionary&lt;string, string&gt; data)</p>\\n<h4>postman请求格式</h4>\\n<p>raw</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token string\\">\\"keys\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"121\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"aa\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"555\\"</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
