import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<h2 id="简化版本" tabindex="-1"><a class="header-anchor" href="#简化版本"><span>简化版本</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">BaseService</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>x<span class="token punctuation">.</span>IsAbstract<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> type <span class="token keyword">in</span> types<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> interfaceList <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceList<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> inter <span class="token operator">=</span> interfaceList<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span>inter<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该版本只能实现：注入的是必须是继承于BaseService抽象类的，并且只能是当前程序集的，其他方式需要在该基础上进行改造</p></blockquote><h2 id="官方方法" tabindex="-1"><a class="header-anchor" href="#官方方法"><span>官方方法</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StartUpExtenions</span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 批量注册服务</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>services<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>DI服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>assemblys<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>需要批量注册的程序集集合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baseType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>基础类/接口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serviceLifetime<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>服务生命周期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">BatchRegisterService</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">,</span> <span class="token class-name">Assembly<span class="token punctuation">[</span><span class="token punctuation">]</span></span> assemblys<span class="token punctuation">,</span> <span class="token class-name">Type</span> baseType<span class="token punctuation">,</span> <span class="token class-name">ServiceLifetime</span> serviceLifetime <span class="token operator">=</span> ServiceLifetime<span class="token punctuation">.</span>Singleton<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> typeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//所有符合注册条件的类集合</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token keyword">in</span> assemblys<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//筛选当前程序集下符合条件的类</span>
			<span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsInterface <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsSealed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span> baseType<span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>types <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> types<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
				typeList<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>typeList<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> services<span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> typeDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//待注册集合</span>
		<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> type <span class="token keyword">in</span> typeList<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> interfaces <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取接口</span>
			typeDic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>typeDic<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> instanceType <span class="token keyword">in</span> typeDic<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> interfaceType <span class="token keyword">in</span> typeDic<span class="token punctuation">[</span>instanceType<span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token comment">//根据指定的生命周期进行注册</span>
					<span class="token keyword">switch</span> <span class="token punctuation">(</span>serviceLifetime<span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">case</span> ServiceLifetime<span class="token punctuation">.</span>Scoped<span class="token punctuation">:</span>
							services<span class="token punctuation">.</span><span class="token function">AddScoped</span><span class="token punctuation">(</span>interfaceType<span class="token punctuation">,</span> instanceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
						<span class="token keyword">case</span> ServiceLifetime<span class="token punctuation">.</span>Singleton<span class="token punctuation">:</span>
							services<span class="token punctuation">.</span><span class="token function">AddSingleton</span><span class="token punctuation">(</span>interfaceType<span class="token punctuation">,</span> instanceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
						<span class="token keyword">case</span> ServiceLifetime<span class="token punctuation">.</span>Transient<span class="token punctuation">:</span>
							services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span>interfaceType<span class="token punctuation">,</span> instanceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> services<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

在configureService方法中调用批量注册
services<span class="token punctuation">.</span><span class="token function">BatchRegisterService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Assembly<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;Test.DAL&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IDependency</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","guanfangpiliangzhuru.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/guanfangpiliangzhuru.html","title":"官方批量注入","lang":"zh-CN","frontmatter":{"title":"官方批量注入","lang":"zh-CN","date":"2023-04-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guanfangpiliangzhuru","slug":"gplzxc","docsId":"29987963","description":"简化版本 该版本只能实现：注入的是必须是继承于BaseService抽象类的，并且只能是当前程序集的，其他方式需要在该基础上进行改造 官方方法","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/guanfangpiliangzhuru.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"官方批量注入"}],["meta",{"property":"og:description","content":"简化版本 该版本只能实现：注入的是必须是继承于BaseService抽象类的，并且只能是当前程序集的，其他方式需要在该基础上进行改造 官方方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"官方批量注入\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简化版本","slug":"简化版本","link":"#简化版本","children":[]},{"level":2,"title":"官方方法","slug":"官方方法","link":"#官方方法","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.18,"words":353},"filePathRelative":"dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/guanfangpiliangzhuru.md","localizedDate":"2023年4月2日","excerpt":"<h2>简化版本</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> types <span class=\\"token operator\\">=</span> Assembly<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetExecutingAssembly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetTypes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Where</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">BaseService</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsAssignableFrom</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> x<span class=\\"token punctuation\\">.</span>IsClass <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>x<span class=\\"token punctuation\\">.</span>IsAbstract<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> type <span class=\\"token keyword\\">in</span> types<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> interfaceList <span class=\\"token operator\\">=</span> type<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetInterfaces</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>interfaceList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Any</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> inter <span class=\\"token operator\\">=</span> interfaceList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">First</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\tservices<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddTransient</span><span class=\\"token punctuation\\">(</span>inter<span class=\\"token punctuation\\">,</span> type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
