import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as s,d as n,e as t,b as e}from"./app-qB9_Bjjp.js";const i="/kbms/common/1610068667547-ff70e7b0-f6b0-4363-b889-9e7e6c6e43d5.png",u="/kbms/common/1610068667563-79ef94eb-a36f-41d0-97fe-e86b8f110f58.png",r="/kbms/common/1610068667563-44fb440d-3a54-4f81-ad7f-daebaf99bc33.png",k="/kbms/common/1610068667560-1f3b49fd-4cc9-4930-8a97-bbabfe85e692.png",d="/kbms/common/1663410798012-c08891a5-4d35-4599-8fd4-a4ab23bdc94b.png",v="/kbms/common/1663410832719-8fc45dc9-0345-4f99-9f86-0d180fdb20c6.png",m={},b=e(`<h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><h3 id="httppost" tabindex="-1"><a class="header-anchor" href="#httppost"><span>[HttpPost]</span></a></h3><p>表示请求的谓词是Post. 加上Controller的Route前缀, 那么访问这个Action的地址就应该是: &#39;api/product&#39; 后边也可以跟着自定义的路由地址, 例如 [HttpPost(&quot;create&quot;)], 那么这个Action的路由地址就应该是: &#39;api/product/create&#39;.</p><h3 id="frombody" tabindex="-1"><a class="header-anchor" href="#frombody"><span>[FromBody]</span></a></h3><p>请求的body里面包含着方法需要的实体数据, 方法需要把这个数据Deserialize成ProductCreation, [FromBody]就是干这些活的. 客户端程序可能会发起一个Bad的Request, 导致数据不能被Deserialize, 这时候参数product就会变成null. 所以这是一个客户端发生的错误, 程序为让客户端知道是它引起了错误, 就应该返回一个<strong>Bad Request</strong> 400 (Bad Request表示客户端引起的错误)的 Status Code.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不显示接口" tabindex="-1"><a class="header-anchor" href="#不显示接口"><span>不显示接口</span></a></h3><p>如果需要不显示某些接口，直接在controller上或者action上，增加特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiExplorerSettings</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IgnoreApi <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="action返回结果" tabindex="-1"><a class="header-anchor" href="#action返回结果"><span>Action返回结果</span></a></h2><p>Microsoft.AspNetCore.Mvc 命名空间下的基类 Controller 让我们能够访问很多关于 HTTP 请求的上下文信息，以及提供了一些方法帮助我们构建返回给回客户端的结果 返回的响应的结果中，我们可以发送简单的字符串或者整数，或者发送像对象这样的复杂数据来表示学生或大学或餐馆等信息，以及与该对象关联的所有数据 这些结果通常被封装到实现 IActionResult 接口的对象中，有大量的不同类型的结果实现了该接口，这些结果类型可以包含模型或文件的内容以供下载 这些不同的结果类型即可以返回 JSON，也可以返回 XML，或者 HTML 视图 动作基本上可以返回任意不同类型的动作结果。它们都有一个共同的基类：ActionResult 下表列出了不同种类的动作结果及其行为</p><table><thead><tr><th><strong>动作名称( 类 )</strong></th><th><strong>行为</strong></th></tr></thead><tbody><tr><td>ContentResult</td><td>返回一串字符串</td></tr><tr><td>FileContentResult</td><td>返回文件的内容</td></tr><tr><td>FilePathResult</td><td>返回路径文件的内容</td></tr><tr><td>FileStreamResult</td><td>返回流文件的内容</td></tr><tr><td>EmptyResult</td><td>返回空</td></tr><tr><td>JavaScriptResult</td><td>返回一段 JavaScript 代码</td></tr><tr><td>JsonResult</td><td>返回 JSON 格式的数据</td></tr><tr><td>RedirectToResult</td><td>重定向到某个 URL</td></tr><tr><td>HttpUnauthorizedResult</td><td>返回 403 未授权状态码</td></tr><tr><td>RedirectToRouteResult</td><td>重定向到不同的控制器或方法</td></tr><tr><td>ViewResult</td><td>从视图引擎中返回一个响应</td></tr><tr><td>PartialViewResult</td><td>从视图引擎中返回一个响应</td></tr></tbody></table><p><strong>范例： ContentResult</strong> 现在，我们修改 HomeController.cs ，引入命名空间 Microsoft.AspNetCore.Mvc，并修改 HomeController 继承自 Controller。 下面代码是 HomeController 类的完整实现</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">HelloWorld<span class="token punctuation">.</span>Controllers</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ContentResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token string">&quot;你好，世界! 这条消息来自使用了 Action Result 的 Home 控制器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，Index() 方法返回了一个 ContentResult 类型的结果。ContentResult 是实现了 ActionResult 接口的不同结果类型之一 在 Index() 方法中，我们将一个字符串传递给 Content()。 Content() 方法会产生一个 ContentResult，也就是说，Index() 方法会返回 ContentResult 保存 HomeController.cs 文件，重启应用程序，然后访问跟目录 /，我们将会得到以下输出 <img src="`+i+'" alt="image.png" loading="lazy"> 我们可以看到，这个响应和之前我们看到的响应几乎没有任何区别，它仍然只是一个纯文本的响应 你可能很想知道使用 ActionResult 来生成东西有什么优势 在 Mvc 模式中，控制器决定接下来要做什么，返回一个字符串或 HTML 或返回可能被序列化为 JSON 等的模型对象 Mvc 中的控制器需要做的就是做出决定，但控制器不必直接在响应中写入决策结果。 它只需要返回结果，然后框架会使用这些结果并理解如何将结果转换为可通过 HTTP 发回的内容 <strong>范例：ObjectResult</strong> 如果你不能理解上面这些内容，没关系，我们再来看一个范例，这次我们使用 ObjectResult 在解决方案管理器中的 HelloWorld 上点击右键，创建一个新文件夹并将其命名为 Models。 在 Models 文件夹中，添加一个用于表示雇员的 Employee 类 创建完成后，目录结构如下 <img src="'+u+'" alt="image.png" loading="lazy"> Employee.cs 中的内容如下 <img src="'+r+`" alt="image.png" loading="lazy"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">HelloWorld<span class="token punctuation">.</span>Models</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改刚刚创建的 Employee 类，添加两个属性，一个整型的 ID 和 一个字符串类型的 Name，修改完成后 Employee.cs 中的内容如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">HelloWorld<span class="token punctuation">.</span>Models</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
		<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ID <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 	
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们回到 HomeController 控制器，修改 Index() 方法，返回一个 Employee 对象。 修改完成后的 HomeController.cs 内容如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">HelloWorld<span class="token punctuation">.</span>Models</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">HelloWorld<span class="token punctuation">.</span>Controllers</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ObjectResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            <span class="token class-name"><span class="token keyword">var</span></span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Employee</span> <span class="token punctuation">{</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;语飞&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectResult</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),g={href:"https://www.twle.cn/l/yufei/xml/xml-basic-index.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.twle.cn/l/yufei/json/json-basic-index.html",target:"_blank",rel:"noopener noreferrer"},y=s("img",{src:k,alt:"image.png",loading:"lazy"},null,-1),f=e(`<h3 id="filecontentresult" tabindex="-1"><a class="header-anchor" href="#filecontentresult"><span>FileContentResult</span></a></h3><p>返回指定类型文件可以下载</p><p>File：会将指定的文件内容、内容类型和文件名作为响应返回给客户端，它适用于动态生成的文件内容，例如从内存中生成的文件、压缩文件等</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 返回指定类型的文件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileContents<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contentType<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件的内容类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileDownloadName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token function">File</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileContents<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> contentType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileDownloadName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;get-file-content/{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>FileContentResult<span class="token punctuation">&gt;</span></span> <span class="token function">DownloadAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token string">&quot;myfileName.txt&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mimeType <span class="token operator">=</span> <span class="token string">&quot;application/....&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileContentResult</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">,</span> mimeType<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        FileDownloadName <span class="token operator">=</span> fileName
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导出pdf等内容" tabindex="-1"><a class="header-anchor" href="#导出pdf等内容"><span>导出pdf等内容</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;get-file-content/{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">FileContentResult</span> <span class="token function">Download</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyyMMddHHmmss</span><span class="token punctuation">}</span></span><span class="token string">.pdf&quot;</span></span><span class="token punctuation">;</span>
    <span class="token comment">//const string mimeType = &quot;application/ms-excel&quot;;</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> mimeType <span class="token operator">=</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fileBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">,</span> mimeType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于这个文件类型mimeType其他的写法可以去参考Stream扩展类</p></blockquote><h4 id="导出文本文件" tabindex="-1"><a class="header-anchor" href="#导出文本文件"><span>导出文本文件</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;get-file-content&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">ExportConfigAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> _interfaceManageBll<span class="token punctuation">.</span><span class="token function">ExportConfigAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">SystemDateTime<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMddHHmmss&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">.txt&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="导出压缩包" tabindex="-1"><a class="header-anchor" href="#导出压缩包"><span>导出压缩包</span></a></h4><p>注入IHostEnvironment，逻辑是先在容器内创建文件夹，然后导出然后再删除文件夹</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">ExportTestCaseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exportRoot <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>_hostEnvironment<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> <span class="token string">&quot;export&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exportDirName <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> exportDirPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>exportRoot<span class="token punctuation">,</span> exportDirName<span class="token punctuation">,</span> <span class="token string">&quot;details&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> zipFullPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>exportRoot<span class="token punctuation">,</span> exportDirName<span class="token punctuation">,</span> <span class="token string">&quot;export.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>exportDirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> testCaseList <span class="token operator">=</span> <span class="token keyword">await</span> _serviceTemplateCaseRepo<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
            <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span>Status<span class="token punctuation">,</span>
                t<span class="token punctuation">.</span>TemplateCode<span class="token punctuation">,</span>
                t<span class="token punctuation">.</span>TestCaseContent
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> testCaseList<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> pageBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>TestCaseContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">WriteAllBytesAsync</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>exportDirPath<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;EMR-PL-0.xml&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ZipFile<span class="token punctuation">.</span><span class="token function">CreateFromDirectory</span><span class="token punctuation">(</span>exportDirPath<span class="token punctuation">,</span> zipFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>zipFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span>
    <span class="token punctuation">{</span>
        Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>exportRoot<span class="token punctuation">,</span> exportDirName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器中执行导出</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">ExportTestCaseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> _serviceTemplateService<span class="token punctuation">.</span><span class="token function">ExportTestCaseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">SystemDateTime<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;yyyyMMddHHmmss&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">.zip&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filestreamresult" tabindex="-1"><a class="header-anchor" href="#filestreamresult"><span>FileStreamResult</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>HttpGet<span class="token punctuation">(</span><span class="token string">&quot;get-file-stream/{id}&quot;</span><span class="token punctuation">]</span>
public async Task<span class="token operator">&lt;</span>FileStreamResult<span class="token operator">&gt;</span> DownloadAsync<span class="token punctuation">(</span>string <span class="token function">id</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    var <span class="token assign-left variable">fileName</span><span class="token operator">=</span><span class="token string">&quot;myfileName.txt&quot;</span><span class="token punctuation">;</span>
    var <span class="token assign-left variable">mimeType</span><span class="token operator">=</span><span class="token string">&quot;application/....&quot;</span><span class="token punctuation">;</span> 
    Stream stream <span class="token operator">=</span> await GetFileStreamById<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin class-name">return</span> new FileStreamResult<span class="token punctuation">(</span>stream, mimeType<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
   		 FileDownloadName <span class="token operator">=</span> fileName
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="physicalfileresult" tabindex="-1"><a class="header-anchor" href="#physicalfileresult"><span>PhysicalFileResult</span></a></h3><p>PhysicalFile：根据指定的文件路径和内容类型直接返回文件给客户端，它适用于通过文件路径直接返回物理文件内容</p><blockquote><p>注意：可能涉及权限问题</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;batch/dowload2&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Download2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 获取要下载的文件列表</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileContents <span class="token operator">=</span> <span class="token function">GetFileContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 压缩文件并下载</span>
    <span class="token class-name"><span class="token keyword">var</span></span> archiveFilePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>_hostEnvironment<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">,</span> <span class="token string">&quot;export&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>archiveFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> archive <span class="token operator">=</span> ZipFile<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>archiveFilePath<span class="token punctuation">,</span> ZipArchiveMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token keyword">in</span> fileContents<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                archive<span class="token punctuation">.</span><span class="token function">CreateEntryFromFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 根据指定的文件路径和内容类型直接返回文件给客户端，它适用于通过文件路径直接返回物理文件内容</span>
        <span class="token keyword">return</span> <span class="token function">PhysicalFile</span><span class="token punctuation">(</span>archiveFilePath<span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyyMMddHHmmss</span><span class="token punctuation">}</span></span><span class="token string">.zip&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span>
    <span class="token punctuation">{</span>
        Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>archiveFilePath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redirectresult" tabindex="-1"><a class="header-anchor" href="#redirectresult"><span>RedirectResult</span></a></h3><p>要实现重定向使用的方法是Redirect。该方法会生成RedirectResult类实例，而RedirectResult构造函数可以传入 2 个 bool 值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token function">RedirectResult</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> permanent<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> preserveMethod<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="redirectresult解释" tabindex="-1"><a class="header-anchor" href="#redirectresult解释"><span>RedirectResult解释</span></a></h4><p>查找这 2 个参数的引用，我们最终定位到RedirectResultExecutor.cs</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>PreserveMethod<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> result<span class="token punctuation">.</span>Permanent <span class="token punctuation">?</span>
        StatusCodes<span class="token punctuation">.</span>Status308PermanentRedirect <span class="token punctuation">:</span> StatusCodes<span class="token punctuation">.</span>Status307TemporaryRedirect<span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>Location <span class="token operator">=</span> destinationUrl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>destinationUrl<span class="token punctuation">,</span> result<span class="token punctuation">.</span>Permanent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preservemethod-true" tabindex="-1"><a class="header-anchor" href="#preservemethod-true"><span>PreserveMethod = true</span></a></h4><p>使用 Location 标头返回需要跳转的 Url。 Permanent 决定状态码：</p><table><thead><tr><th>Permanent</th><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>false</td><td>307</td><td>临时重定向响应状态码，表示请求的资源暂时地被移动到了响应的 Location 所指向的 URL 上。</td></tr><tr><td>true</td><td>308</td><td>永久重定向响应状态码，说明请求的资源已经被永久的移动到了由 Location 指定的 URL 上</td></tr></tbody></table><h4 id="preservemethod-false" tabindex="-1"><a class="header-anchor" href="#preservemethod-false"><span>PreserveMethod = false</span></a></h4><p>执行Response.Redirect方法进行跳转，内部实现如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> location<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> permanent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>permanent<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        HttpResponseFeature<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        HttpResponseFeature<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">302</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Headers<span class="token punctuation">.</span>Location <span class="token operator">=</span> location<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实和PreserveMethod = true的逻辑是一样的，只是返回的状态码不同：</p><table><thead><tr><th>Permanent</th><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>false</td><td>302</td><td>表明请求的资源被暂时的移动到了由该HTTP响应的响应头Location 指定的 URL 上。</td></tr><tr><td>true</td><td>301</td><td>表明请求的资源已经被移动到了由 Location 头部指定的url上，是固定的不会再改变</td></tr></tbody></table><p>综上，ASP.NET Core 中的重定向一共包含 4 种：</p><table><thead><tr><th>状态码</th><th>PreserveMethod</th><th>Permanent</th><th>生成RedirectResult方法</th></tr></thead><tbody><tr><td>301</td><td>false</td><td>true</td><td>RedirectPermanent()</td></tr><tr><td>302</td><td>false</td><td>false</td><td>Redirect()</td></tr><tr><td>307</td><td>true</td><td>false</td><td>RedirectPreserveMethod()</td></tr><tr><td>308</td><td>true</td><td>true</td><td>RedirectPermanentPreserveMethod()</td></tr></tbody></table><h4 id="测试demo" tabindex="-1"><a class="header-anchor" href="#测试demo"><span>测试Demo</span></a></h4><p>编写如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanent&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanent&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">RedirectPermanent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">RedirectPermanent</span><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Redirect&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Redirect&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Redirect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPreserveMethod&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPreserveMethod&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">RedirectPreserveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;RedirectPreserveMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">RedirectPreserveMethod</span><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanentPreserveMethod&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanentPreserveMethod&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">RedirectPermanentPreserveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;RedirectPermanentPreserveMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">RedirectPermanentPreserveMethod</span><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;MyIO&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">MyIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有方法都同时支持GET和POST方法</li><li>所有方法都会重定向到同一个方法，显示当前请求方法</li></ul><p>每个 API 都请求 2 遍，可以看到：</p><ul><li>Permanent = true 的Get请求只会执行一次，后续会直接请求跳转后的地址</li></ul><figure><img src="`+d+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li>PreserveMethod = false 的POST请求，跳转后实际执行的Get请求</li></ul><p><img src="'+v+`" alt="image.png" loading="lazy"> 总结：如果想只发生一次重定向，则应考虑使用RedirectPermanent或者RedirectPermanentPreserveMethod。 如果要为非 GET 请求使用重定向，则应考虑使用RedirectPreserveMethod或者RedirectPermanentPreserveMethod。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><h5 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一"><span>方案一</span></a></h5><p>注入服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IActionContextAccessor<span class="token punctuation">,</span> ActionContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制器写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>HomeController<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IActionContextAccessor</span> _actionContextAccessor<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>HomeController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">,</span> <span class="token class-name">IActionContextAccessor</span> actionContextAccessor<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
        _actionContextAccessor <span class="token operator">=</span> actionContextAccessor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> redirectUrl <span class="token operator">=</span> <span class="token string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedirectResult</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result1<span class="token punctuation">.</span>UrlHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UrlHelper</span><span class="token punctuation">(</span>_actionContextAccessor<span class="token punctuation">.</span>ActionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

        result1<span class="token punctuation">.</span>UrlHelper
              <span class="token punctuation">.</span>ActionContext
              <span class="token punctuation">.</span>HttpContext
              <span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringValues</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        result1<span class="token punctuation">.</span>UrlHelper
              <span class="token punctuation">.</span>ActionContext
              <span class="token punctuation">.</span>HttpContext
              <span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        result1<span class="token punctuation">.</span>UrlHelper
              <span class="token punctuation">.</span>ActionContext
              <span class="token punctuation">.</span>HttpContext
              <span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringValues</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> result1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方案二" tabindex="-1"><a class="header-anchor" href="#方案二"><span>方案二</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>_app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/view/subjects/{patientId}/index/records&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromRoute</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">int</span></span> patientId<span class="token punctuation">,</span>
    <span class="token class-name">HttpContext</span> httpContent<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IConfigurationService</span> configurationService<span class="token punctuation">,</span>
    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>BusinessController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> httpContent<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token keyword">await</span> configurationService<span class="token punctuation">.</span><span class="token function">GetChartReviewConfigContentAsync</span><span class="token punctuation">(</span>SystemConst<span class="token punctuation">.</span>View360Url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> redirectUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    redirectUrl<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">url<span class="token punctuation">.</span><span class="token function">TrimEnd</span><span class="token punctuation">(</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">path</span><span class="token punctuation">}</span></span><span class="token string">?&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AppendJoin</span><span class="token punctuation">(</span><span class="token char">&#39;&amp;&#39;</span><span class="token punctuation">,</span> httpContent<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;/view/subjects/patientId/records 重定向URL为：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">redirectUrl</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    httpContent<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithTags</span><span class="token punctuation">(</span><span class="token string">&quot;360&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回文件流-类文件存储" tabindex="-1"><a class="header-anchor" href="#返回文件流-类文件存储"><span>返回文件流(类文件存储)</span></a></h3><p>通过后端接口返回文件流，然后实现类似图片链接地址的操作</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>[HttpGet(&quot;medical/{moduleCode}/{recordId}/{key}&quot;)]
public async Task&lt;Stream&gt; MedicalFile(string moduleCode, int recordId, string key)
{
    var fileBytes = await _medicalFileService.GetMedicalFileAsync(moduleCode, recordId, key).ConfigureAwait(false);
    return new MemoryStream(fileBytes);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="替换action执行" tabindex="-1"><a class="header-anchor" href="#替换action执行"><span>替换Action执行</span></a></h2><p>替换 Action 实际执行方法</p><h3 id="requestdelegate" tabindex="-1"><a class="header-anchor" href="#requestdelegate"><span>RequestDelegate</span></a></h3><p>查看endpoints.MapControllers()实现时，最终定位到ActionEndpointFactory.cs，其中有这样一段代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">RequestDelegate</span> <span class="token function">CreateRequestDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// We don&#39;t want to close over the Invoker Factory in ActionEndpointFactory as</span>
    <span class="token comment">// that creates cycles in DI. Since we&#39;re creating this delegate at startup time</span>
    <span class="token comment">// we don&#39;t want to create all of the things we use at runtime until the action</span>
    <span class="token comment">// actually matches.</span>
    <span class="token comment">//</span>
    <span class="token comment">// The request delegate is already a closure here because we close over</span>
    <span class="token comment">// the action descriptor.</span>
    <span class="token class-name">IActionInvokerFactory<span class="token punctuation">?</span></span> invokerFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> endpoint <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">GetEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dataTokens <span class="token operator">=</span> endpoint<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetMetadata</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDataTokensMetadata<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> routeData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RouteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        routeData<span class="token punctuation">.</span><span class="token function">PushState</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">router</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>RouteValues<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RouteValueDictionary</span><span class="token punctuation">(</span>dataTokens<span class="token punctuation">?.</span>DataTokens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Don&#39;t close over the ActionDescriptor, that&#39;s not valid for pages.</span>
        <span class="token class-name"><span class="token keyword">var</span></span> action <span class="token operator">=</span> endpoint<span class="token punctuation">.</span>Metadata<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetMetadata</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ActionDescriptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> actionContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ActionContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> routeData<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>invokerFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            invokerFactory <span class="token operator">=</span> context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IActionInvokerFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> invoker <span class="token operator">=</span> invokerFactory<span class="token punctuation">.</span><span class="token function">CreateInvoker</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invoker<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码上理解，应该是执行请求时，会创建IActionInvokerFactory实例，由它创建 invoker 执行。</p><h3 id="iactioninvokerfactory" tabindex="-1"><a class="header-anchor" href="#iactioninvokerfactory"><span>IActionInvokerFactory</span></a></h3><p>新建CustomActionInvokerFactory.cs，继承IActionInvokerFactory，实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomActionInvokerFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActionInvokerFactory</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IActionInvokerProvider<span class="token punctuation">[</span><span class="token punctuation">]</span></span> _actionInvokerProviders<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ActionInvokerFactory</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IActionInvokerProvider<span class="token punctuation">&gt;</span></span> actionInvokerProviders<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _actionInvokerProviders <span class="token operator">=</span> actionInvokerProviders<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IActionInvoker<span class="token punctuation">?</span></span> <span class="token function">CreateInvoker</span><span class="token punctuation">(</span><span class="token class-name">ActionContext</span> actionContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ActionInvokerProviderContext</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> provider <span class="token keyword">in</span> _actionInvokerProviders<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            provider<span class="token punctuation">.</span><span class="token function">OnProvidersExecuting</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> _actionInvokerProviders<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _actionInvokerProviders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">OnProvidersExecuted</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> context<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码 Copy 自 ASP.NET Core 内部实现类ActionInvokerFactory。 然后在 Startup.cs 注册实现：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IActionInvokerFactory<span class="token punctuation">,</span> CustomActionInvokerFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打上断点，执行API，**发现确实如设想中一样，请求时执行CreateInvoker方法。**在其中发现了一个很有意思的属性MethodInfo,正是对应我们执行的 Action 方法。 <strong>突发奇想，如果我们替换MethodInfo属性，是不是会执行其他方法呢？</strong></p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><p>创建 WeatherForecast2Controller，实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecast2Controller</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;My IO&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这是和原方法完全不同的实现。 现在进行替换：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> actionDescriptor <span class="token operator">=</span> actionContext<span class="token punctuation">.</span>ActionDescriptor <span class="token keyword">as</span> <span class="token class-name">ControllerActionDescriptor</span><span class="token punctuation">;</span>
actionDescriptor<span class="token punctuation">.</span>MethodInfo <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WeatherForecast2Controller</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Get2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
actionDescriptor<span class="token punctuation">.</span>ControllerTypeInfo <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WeatherForecast2Controller</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行成功。</p><p><strong>替换 Action 实际执行方法，最好的使用场景是定制化开发</strong>，比如客户需求和产品实现完全不同，可以保证请求不变的情况下执行客户定制化实现。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,78),w={href:"https://mp.weixin.qq.com/s/sLK1gf1c6OfVLS-qQczgxg",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s/sX0umK1QvXUzyJz_HxuVvg",target:"_blank",rel:"noopener noreferrer"},C={href:"https://mp.weixin.qq.com/s/xn1cGjMB851YaisconC4WA",target:"_blank",rel:"noopener noreferrer"};function R(x,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[b,s("p",null,[n("现在，返回的不是 Content，而是返回一个不同类型的结果 ObjectResult。 如果我们想要一个 ObjectResult，我们需要创建或实例化一个 ObjectResult 并将一些模型对象作为参数传递给它 在 MVC 框架中，ObjectResult 是特殊的，因为当我们返回一个 ObjectResult 时，MVC 框架将访问这个对象。并将这个对象做一些转换，然后作为 HTTP 响应返回给客户端 在转换 ObjectResult 对象时，它可能被序列化为 "),s("a",g,[n("XML"),t(a)]),n(" 或 "),s("a",h,[n("JSON"),t(a)]),n(" 或其它格式， 至于什么格式，由应用程序启动时向 MVC 提供的配置信息决定。如果我们没有显式的配置任何东西，那么将会使用 JSON 作为默认格式 保存所有的文件，重启应用程序，然后访问首页，我们将得到如下结果 "),y]),f,s("p",null,[s("a",w,[n("https://mp.weixin.qq.com/s/sLK1gf1c6OfVLS-qQczgxg"),t(a)]),n(" | ASP.NET Core 替换 Action 实际执行方法 来源："),s("a",q,[n("https://mp.weixin.qq.com/s/sX0umK1QvXUzyJz_HxuVvg"),t(a)]),s("a",C,[n("https://mp.weixin.qq.com/s/xn1cGjMB851YaisconC4WA"),t(a)]),n(" | ASP.NET Core 中的重定向")])])}const M=p(m,[["render",R],["__file","action.html.vue"]]),H=JSON.parse(`{"path":"/dotnet/api/controllerApi/action.html","title":"Action","lang":"zh-CN","frontmatter":{"title":"Action","lang":"zh-CN","date":"2023-10-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"action","slug":"zcbc6i","docsId":"29808033","description":"特性 [HttpPost] 表示请求的谓词是Post. 加上Controller的Route前缀, 那么访问这个Action的地址就应该是: 'api/product' 后边也可以跟着自定义的路由地址, 例如 [HttpPost(\\"create\\")], 那么这个Action的路由地址就应该是: 'api/product/create'. [FromBo...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/action.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Action"}],["meta",{"property":"og:description","content":"特性 [HttpPost] 表示请求的谓词是Post. 加上Controller的Route前缀, 那么访问这个Action的地址就应该是: 'api/product' 后边也可以跟着自定义的路由地址, 例如 [HttpPost(\\"create\\")], 那么这个Action的路由地址就应该是: 'api/product/create'. [FromBo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610068667547-ff70e7b0-f6b0-4363-b889-9e7e6c6e43d5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T11:49:04.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T11:49:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Action\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610068667547-ff70e7b0-f6b0-4363-b889-9e7e6c6e43d5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610068667563-79ef94eb-a36f-41d0-97fe-e86b8f110f58.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610068667563-44fb440d-3a54-4f81-ad7f-daebaf99bc33.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610068667560-1f3b49fd-4cc9-4930-8a97-bbabfe85e692.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1663410798012-c08891a5-4d35-4599-8fd4-a4ab23bdc94b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1663410832719-8fc45dc9-0345-4f99-9f86-0d180fdb20c6.png\\"],\\"datePublished\\":\\"2023-10-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-08T11:49:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[{"level":3,"title":"[HttpPost]","slug":"httppost","link":"#httppost","children":[]},{"level":3,"title":"[FromBody]","slug":"frombody","link":"#frombody","children":[]},{"level":3,"title":"不显示接口","slug":"不显示接口","link":"#不显示接口","children":[]}]},{"level":2,"title":"Action返回结果","slug":"action返回结果","link":"#action返回结果","children":[{"level":3,"title":"FileContentResult","slug":"filecontentresult","link":"#filecontentresult","children":[{"level":4,"title":"导出pdf等内容","slug":"导出pdf等内容","link":"#导出pdf等内容","children":[]},{"level":4,"title":"导出文本文件","slug":"导出文本文件","link":"#导出文本文件","children":[]},{"level":4,"title":"导出压缩包","slug":"导出压缩包","link":"#导出压缩包","children":[]}]},{"level":3,"title":"FileStreamResult","slug":"filestreamresult","link":"#filestreamresult","children":[]},{"level":3,"title":"PhysicalFileResult","slug":"physicalfileresult","link":"#physicalfileresult","children":[]},{"level":3,"title":"RedirectResult","slug":"redirectresult","link":"#redirectresult","children":[{"level":4,"title":"RedirectResult解释","slug":"redirectresult解释","link":"#redirectresult解释","children":[]},{"level":4,"title":"PreserveMethod = true","slug":"preservemethod-true","link":"#preservemethod-true","children":[]},{"level":4,"title":"PreserveMethod = false","slug":"preservemethod-false","link":"#preservemethod-false","children":[]},{"level":4,"title":"测试Demo","slug":"测试demo","link":"#测试demo","children":[]},{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[{"level":5,"title":"方案一","slug":"方案一","link":"#方案一","children":[]},{"level":5,"title":"方案二","slug":"方案二","link":"#方案二","children":[]}]}]},{"level":3,"title":"返回文件流(类文件存储)","slug":"返回文件流-类文件存储","link":"#返回文件流-类文件存储","children":[]}]},{"level":2,"title":"替换Action执行","slug":"替换action执行","link":"#替换action执行","children":[{"level":3,"title":"RequestDelegate","slug":"requestdelegate","link":"#requestdelegate","children":[]},{"level":3,"title":"IActionInvokerFactory","slug":"iactioninvokerfactory","link":"#iactioninvokerfactory","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709898544000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":11.31,"words":3394},"filePathRelative":"dotnet/api/controllerApi/action.md","localizedDate":"2023年10月5日","excerpt":"<h2>特性</h2>\\n<h3>[HttpPost]</h3>\\n<p>表示请求的谓词是Post. 加上Controller的Route前缀, 那么访问这个Action的地址就应该是: 'api/product'\\n后边也可以跟着自定义的路由地址, 例如 [HttpPost(\\"create\\")], 那么这个Action的路由地址就应该是: 'api/product/create'.</p>\\n<h3>[FromBody]</h3>\\n<p>请求的body里面包含着方法需要的实体数据, 方法需要把这个数据Deserialize成ProductCreation, [FromBody]就是干这些活的.\\n客户端程序可能会发起一个Bad的Request, 导致数据不能被Deserialize, 这时候参数product就会变成null. 所以这是一个客户端发生的错误, 程序为让客户端知道是它引起了错误, 就应该返回一个<strong>Bad Request</strong>&nbsp;400 (Bad Request表示客户端引起的错误)的 Status Code.</p>","autoDesc":true}`);export{M as comp,H as data};
