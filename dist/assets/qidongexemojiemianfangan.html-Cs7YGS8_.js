import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as s,d as t,e as i}from"./app-vSdX8vi3.js";const l={},u=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言"},[n("span",null,"前言")])],-1),r=n("p",null,"彻底解决【从Windows服务启动程序exe，程序无界面】问题",-1),d=n("h2",{id:"实现过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现过程"},[n("span",null,"实现过程")])],-1),k={href:"https://github.com/dahall/TaskScheduler",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/dahall/TaskScheduler/wiki/Examples",target:"_blank",rel:"noopener noreferrer"},v=i(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddOrRunWinTask</span><span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> sTaskName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sExePath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> sArgs <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> TaskService<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">FindTask</span><span class="token punctuation">(</span>sTaskName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span> task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>Definition<span class="token punctuation">.</span>Triggers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>StartBoundary <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>AddSeconds <span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        task<span class="token punctuation">.</span>RegisterChanges <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> td <span class="token operator">=</span> TaskService<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>NewTask <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        td<span class="token punctuation">.</span>RegistrationInfo<span class="token punctuation">.</span>Author <span class="token operator">=</span> <span class="token string">&quot;白羊佐CSDN&quot;</span><span class="token punctuation">;</span>
        td<span class="token punctuation">.</span>RegistrationInfo<span class="token punctuation">.</span>Description <span class="token operator">=</span> <span class="token string">&quot;用于跨域启动特定程序&quot;</span><span class="token punctuation">;</span>
 
        td<span class="token punctuation">.</span>Settings<span class="token punctuation">.</span>ExecutionTimeLimit <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span><span class="token comment">//</span>
        td<span class="token punctuation">.</span>Settings<span class="token punctuation">.</span>DisallowStartIfOnBatteries <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        td<span class="token punctuation">.</span>Settings<span class="token punctuation">.</span>RunOnlyIfIdle <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        td<span class="token punctuation">.</span>Settings<span class="token punctuation">.</span>RunOnlyIfNetworkAvailable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">//此处注意，如果你待启动程序需要管理员权限运行，必须使用Highest，否则使用LUA就行</span>
        td<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>RunLevel <span class="token operator">=</span> TaskRunLevel<span class="token punctuation">.</span>Highest<span class="token punctuation">;</span>
        <span class="token comment">//获取Administrators的GroupID</span>
        <span class="token class-name"><span class="token keyword">string</span></span> sGpId <span class="token operator">=</span> <span class="token function">GetGroupID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//此处最为关键，如果不指定用户名ID或组名ID，依旧不显示界面，因为创建时的用户为SYSTEM</span>
        td<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>GroupId <span class="token operator">=</span> sGpId<span class="token punctuation">;</span>
 
        <span class="token class-name"><span class="token keyword">var</span></span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span>TimeTrigger<span class="token punctuation">)</span>td<span class="token punctuation">.</span>Triggers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        trigger<span class="token punctuation">.</span>StartBoundary <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>AddSeconds <span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        trigger<span class="token punctuation">.</span>ExecutionTimeLimit <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span>
        trigger<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        td<span class="token punctuation">.</span>Actions<span class="token punctuation">.</span>Add <span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecAction</span> <span class="token punctuation">(</span> sExePath<span class="token punctuation">,</span> sArgs <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        task <span class="token operator">=</span> TaskService<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>RootFolder<span class="token punctuation">.</span>RegisterTaskDefinition <span class="token punctuation">(</span> sTaskName<span class="token punctuation">,</span> td <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">//打开表示立即运行（切运行两次，因为上面有个执行延时）</span>
    <span class="token comment">//var rz = task.Run ();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，注意，再注意：A、此方法是win10的，因为win10默认屏蔽Administrator用户，我用户属于这个组，所以我这个地方使用这种方式没有问题。但是，其他非Administrators组用户登录可能不行了，那也好解决，将下面代码中GroupPrincipal改为UserPrincipal，用它去找登录的用户名，上面代码设userid，logontype就行。或者输入正确的组名都可以；B、此方式程序的启动位置为System32，你程序的目录获取时要注意了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> GetGroupID <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sGid <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     
    <span class="token class-name">System<span class="token punctuation">.</span>DirectoryServices<span class="token punctuation">.</span>AccountManagement<span class="token punctuation">.</span>PrincipalContext</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>DirectoryServices<span class="token punctuation">.</span>AccountManagement<span class="token punctuation">.</span>PrincipalContext</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>DirectoryServices<span class="token punctuation">.</span>AccountManagement<span class="token punctuation">.</span>ContextType<span class="token punctuation">.</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> System<span class="token punctuation">.</span>DirectoryServices<span class="token punctuation">.</span>AccountManagement<span class="token punctuation">.</span>GroupPrincipal<span class="token punctuation">.</span><span class="token function">FindByIdentity</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> <span class="token string">&quot;Administrators&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token keyword">if</span> <span class="token punctuation">(</span> identity <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sGid <span class="token operator">=</span> identity<span class="token punctuation">.</span>Sid<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">return</span> sGid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,4),h={href:"https://www.cnblogs.com/ZoeWong/p/17516579.html",target:"_blank",rel:"noopener noreferrer"};function g(b,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,r,d,n("p",null,[s("实现过程即任务计划实现过程，C#有3种方法，其实就是2种，一种是使用API创建任务，这个方法其实，可以通过系统调用现有dll库实现，最后一种是使用开源库。建议用开源库方式。 调用系统的dll，这dll就是C:\\Windows\\System32\\taskschd.dll，在C#里直接引用就行，它实现API的C#封装，很简单。使用TaskSchedulerClass类连接、创建修改任务计划，很简单，我这不是主推方法，不贴代码，但源码地址里有。 使用开源库TaskScheduler，可以实现，命名空间为Microsoft.Win32.TaskScheduler，下载地址为："),n("a",k,[s("https://github.com/dahall/TaskScheduler"),t(a)]),s("。例子为："),n("a",m,[s("https://github.com/dahall/TaskScheduler/wiki/Examples"),t(a)])]),v,n("p",null,[n("a",h,[s("https://www.cnblogs.com/ZoeWong/p/17516579.html"),t(a)])])])}const T=e(l,[["render",g],["__file","qidongexemojiemianfangan.html.vue"]]),S=JSON.parse('{"path":"/dotnet/zhuomianchengxu/kuozhan/qidongexemojiemianfangan.html","title":"启动exe无界面方案","lang":"zh-CN","frontmatter":{"title":"启动exe无界面方案","lang":"zh-CN","date":"2023-07-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"qidongexemojiemianfangan","slug":"dzg50drihoctwiiw","docsId":"133050649","description":"前言 彻底解决【从Windows服务启动程序exe，程序无界面】问题 实现过程 实现过程即任务计划实现过程，C#有3种方法，其实就是2种，一种是使用API创建任务，这个方法其实，可以通过系统调用现有dll库实现，最后一种是使用开源库。建议用开源库方式。 调用系统的dll，这dll就是C:\\\\Windows\\\\System32\\\\taskschd.dll，在C...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/zhuomianchengxu/kuozhan/qidongexemojiemianfangan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"启动exe无界面方案"}],["meta",{"property":"og:description","content":"前言 彻底解决【从Windows服务启动程序exe，程序无界面】问题 实现过程 实现过程即任务计划实现过程，C#有3种方法，其实就是2种，一种是使用API创建任务，这个方法其实，可以通过系统调用现有dll库实现，最后一种是使用开源库。建议用开源库方式。 调用系统的dll，这dll就是C:\\\\Windows\\\\System32\\\\taskschd.dll，在C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"启动exe无界面方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"实现过程","slug":"实现过程","link":"#实现过程","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"dotnet/zhuomianchengxu/kuozhan/qidongexemojiemianfangan.md","localizedDate":"2023年7月27日","excerpt":"<h2>前言</h2>\\n<p>彻底解决【从Windows服务启动程序exe，程序无界面】问题</p>\\n<h2>实现过程</h2>\\n<p>实现过程即任务计划实现过程，C#有3种方法，其实就是2种，一种是使用API创建任务，这个方法其实，可以通过系统调用现有dll库实现，最后一种是使用开源库。建议用开源库方式。\\n调用系统的dll，这dll就是C:\\\\Windows\\\\System32\\\\taskschd.dll，在C#里直接引用就行，它实现API的C#封装，很简单。使用TaskSchedulerClass类连接、创建修改任务计划，很简单，我这不是主推方法，不贴代码，但源码地址里有。\\n使用开源库TaskScheduler，可以实现，命名空间为Microsoft.Win32.TaskScheduler，下载地址为：<a href=\\"https://github.com/dahall/TaskScheduler\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/dahall/TaskScheduler</a>。例子为：<a href=\\"https://github.com/dahall/TaskScheduler/wiki/Examples\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/dahall/TaskScheduler/wiki/Examples</a></p>","autoDesc":true}');export{T as comp,S as data};
