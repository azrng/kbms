import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as s,d as n,e,b as p}from"./app-qB9_Bjjp.js";const i="/kbms/common/1614050368625-12c28eff-5ffc-4655-8a39-ce9ed1b031df.png",r="/kbms/common/1614050368615-24e143a8-8987-484b-9079-dff587fbd264.png",k="/kbms/common/1614050842520-25c22514-6edc-4b08-9e68-f3f1907110a4.png",u={},d=p(`<h2 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选"><span>筛选</span></a></h2><h3 id="limit" tabindex="-1"><a class="header-anchor" href="#limit"><span>Limit</span></a></h3><p>limit 跳过的条数，请求的数量(每页的数量)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- MySql查询前10条数据sql语句为</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">-- 通常0是可以省略的，直接写成 limit 10。0代表从第0条记录后面开始，也就是从第一条开始。</span>

<span class="token comment">-- 只要查询出来数据的第一条记录，那么需要写成</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> SU_supplycontract t   <span class="token keyword">WHERE</span> supplyContractCode<span class="token operator">=</span><span class="token string">&quot;CRM20180813002&quot;</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用合理的分页方式来提高分页的效率，比如我们查询id大于xxx的然后取十条</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">&gt;</span> <span class="token number">100000</span> <span class="token keyword">limit</span> <span class="token number">20</span>
<span class="token comment">-- 如果上述SQL语句使用(limit 100000, 20)做分页的时候，随着表数据量的增加，直接使用limit语句会越来越慢，此时，可以通过取前一页的最大ID，以此为起点，再进行limit操作，效率提升显著。</span>


<span class="token number">1.</span> 查询员工表中工资降序的前<span class="token number">5</span>条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token number">2.</span> 查询员工表中工资降序的第<span class="token number">3</span>页的<span class="token number">4</span>条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token number">3.</span>查询商品表中价格升序的前<span class="token number">10</span>条数据
<span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> t_item  <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token number">4.</span>查询商品价格低于<span class="token number">100</span>元的商品信息第三页的三条数据
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> price<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token keyword">limit</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token number">5.</span>查询<span class="token number">10</span>号和<span class="token number">30</span>号部门的员工工资在前三名的员工信息
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span>  emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">or</span> deptno<span class="token operator">=</span><span class="token number">30</span> <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="like" tabindex="-1"><a class="header-anchor" href="#like"><span>Like</span></a></h3><p>模糊查询，很可能让你的索引失效。</p><ul><li>首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即like ‘…%’，是会使用索引的；</li><li>左模糊like ‘%...’无法直接使用索引，但可以利用reverse + function index的形式，变化成 like ‘…%’；</li><li>全模糊查询是无法优化的，一定要使用的话建议使用搜索引擎。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">------模糊查询------ like</span>
_<span class="token punctuation">(</span>下划线<span class="token punctuation">)</span>：代表单个未知字符
<span class="token operator">%</span>：代表<span class="token number">0</span>或多个未知字符
举例：
<span class="token number">1.</span> 以a开头的字符串    a<span class="token operator">%</span>
<span class="token number">2.</span> 以m结尾   <span class="token operator">%</span>m
<span class="token number">3.</span> 包含x    <span class="token operator">%</span>x<span class="token operator">%</span>   
<span class="token number">4.</span> 第二个字符是a    _a<span class="token operator">%</span>
<span class="token number">5.</span> 倒数第三个字母是m  <span class="token operator">%</span>m_ _
<span class="token number">6.</span> 以a开头并且倒数第二个字母是b    a<span class="token operator">%</span>b_
<span class="token number">1.</span> 查询名字中包含a的所有员工姓名和工资
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> ‘<span class="token operator">%</span>a<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">2.</span> 查询标题中包含记事本的商品标题及商品价格
<span class="token keyword">select</span> title<span class="token punctuation">,</span>price <span class="token keyword">from</span> t_item <span class="token keyword">where</span> title <span class="token operator">like</span> ‘<span class="token operator">%</span>记事本<span class="token operator">%</span>’<span class="token punctuation">;</span>
 
<span class="token number">3.</span> 查询单价低于<span class="token number">100</span>的记事本<span class="token punctuation">(</span>title包含记事本<span class="token punctuation">)</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> price<span class="token operator">&lt;</span><span class="token number">100</span> title <span class="token operator">like</span> ‘<span class="token operator">%</span>记事本<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">4.</span>查询单价在<span class="token number">50</span>到<span class="token number">200</span>之间的得力商品<span class="token punctuation">(</span>title包含得力<span class="token punctuation">)</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> price <span class="token operator">between</span> <span class="token number">50</span> <span class="token operator">and</span> <span class="token number">200</span> <span class="token operator">and</span> title <span class="token operator">like</span> ‘<span class="token operator">%</span>得力<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">5.</span>查询商品分类为<span class="token number">238</span>和<span class="token number">917</span>的商品信息
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> category_id<span class="token operator">=</span><span class="token number">238</span> <span class="token operator">or</span> category_id<span class="token operator">=</span><span class="token number">917</span><span class="token punctuation">;</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> category_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">238</span><span class="token punctuation">,</span><span class="token number">917</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">6.</span> 查询有赠品的商品信息 （卖点sell_point中包含赠字）
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> sell_point <span class="token operator">like</span> ‘<span class="token operator">%</span>赠<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">7.</span>查询有图片image的得力商品信息
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> image <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span>  title <span class="token operator">like</span> ‘<span class="token operator">%</span>得力<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">8.</span>查询和得力无关的商品信息<span class="token punctuation">(</span>title不包含得力<span class="token punctuation">)</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> title <span class="token operator">not</span> <span class="token operator">like</span> ‘<span class="token operator">%</span>得力<span class="token operator">%</span>’<span class="token punctuation">;</span>
<span class="token number">9.</span> 查询价格在<span class="token number">50</span>到<span class="token number">100</span>以外的商品信息
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span> price <span class="token operator">not</span> <span class="token operator">between</span> <span class="token number">50</span> <span class="token operator">and</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="is-null" tabindex="-1"><a class="header-anchor" href="#is-null"><span>Is Null</span></a></h3><p>尽量把所有列定义为NOT NULL</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询emp表中没有上级领导mgr的员工编号empno，姓名ename，工资sal</span>
<span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> mgr <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询emp表中没有奖金comm的员工姓名，工资，奖金</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询有奖金的所有员工信息</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NOT NULL列更节省空间，NULL列需要一个额外字节作为判断是否为 NULL的标志位。NULL列需要注意空指针问题，NULL列在计算和比较的时候，需要注意空指针问题。</p><h3 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span>SUBSTR</span></a></h3><p>查询关键字的前后各几个字</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> INSTR<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> <span class="token string">&#39;keyword&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">context</span>
<span class="token keyword">FROM</span> table_name 
<span class="token keyword">WHERE</span> column_name <span class="token keyword">LIKE</span> <span class="token string">&#39;%keyword%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find-in-set" tabindex="-1"><a class="header-anchor" href="#find-in-set"><span>Find_In_Set</span></a></h3><p>FIND_IN_SET(str,strList)</p><ul><li>str 要查询的字符串</li><li>strList 字段名，参数以“,”分隔，如(1,2,6,8)</li><li>查询字段(strList)中包含的结果，返回结果null或记录。</li></ul><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>查询rootpath包含deptId的数据
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> departmet <span class="token keyword">where</span> find_in_set<span class="token punctuation">(</span><span class="token string">&#39;&quot; + deptId + &quot;&#39;</span><span class="token punctuation">,</span> rootpath<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20),m={href:"https://www.jianshu.com/p/b2c1ba0ba34f",target:"_blank",rel:"noopener noreferrer"},b=p(`<h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span>distinct</span></a></h3><p>去重</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询emp表中出现的所有职位job</span>
<span class="token keyword">select</span>  <span class="token keyword">distinct</span> job <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in"><span>in</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询emp表中工资是5000，1500，3000的员工信息</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">=</span><span class="token number">5000</span> <span class="token operator">or</span> sal<span class="token operator">=</span><span class="token number">1500</span> <span class="token operator">or</span> sal<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span>
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="between" tabindex="-1"><a class="header-anchor" href="#between"><span>between</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- between  x and  y</span>
<span class="token comment">-- 查询工资在2000到3000之间的员工姓名和工资        </span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span>  sal<span class="token operator">&gt;=</span><span class="token number">2000</span> <span class="token operator">and</span> sal<span class="token operator">&lt;=</span><span class="token number">3000</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span>  sal <span class="token operator">between</span> <span class="token number">2000</span> <span class="token operator">and</span> <span class="token number">3000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间"><span>时间</span></a></h2><h3 id="当前时间" tabindex="-1"><a class="header-anchor" href="#当前时间"><span>当前时间</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取当前时间</span>
<span class="token keyword">SELECT</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021-07-24 03:50:19</span>
<span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021-07-24 03:50:19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="当前日期" tabindex="-1"><a class="header-anchor" href="#当前日期"><span>当前日期</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">current_date</span> <span class="token keyword">as</span> Systemtime<span class="token punctuation">;</span> <span class="token comment">// 2021-07-24</span>
<span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021-07-24</span>
 
 
<span class="token comment">------日期相关函数------</span>
<span class="token number">1.</span>获取当前的年月日时分秒
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">2.</span>获取当前的日期  <span class="token keyword">current</span>
<span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">3.</span>获取当前的时间
<span class="token keyword">select</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">4.</span>从年月日时分秒中提取年月日
<span class="token keyword">select</span> <span class="token keyword">date</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5.</span>从年月日时分秒中提取时分秒
<span class="token keyword">select</span> <span class="token keyword">time</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">6.</span>从年月日时分秒中提取时间分量 年 月 日 时 分 秒
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">month</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">day</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">hour</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">minute</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> extract<span class="token punctuation">(</span><span class="token keyword">second</span> <span class="token keyword">from</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>extract<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> hiredate<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-format" tabindex="-1"><a class="header-anchor" href="#date-format"><span>DATE_FORMAT</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 当前时间格式化</span>
<span class="token keyword">update</span> goods_msg <span class="token keyword">SET</span> create_date <span class="token operator">=</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%m:%s&#39;</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> uid <span class="token operator">=</span> <span class="token string">&#39;6183b000-e7b3-4f38-8943-c9f170bd2d80&#39;</span>

<span class="token comment">-- 日期转时间</span>
<span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%i:%s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 时间戳转时间</span>
<span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%i:%s&#39;</span><span class="token punctuation">)</span>

<span class="token comment">-- 日期格式化   date_format(时间，格式)</span>
<span class="token operator">%</span>Y:四位年
<span class="token operator">%</span>y:两位年
<span class="token operator">%</span>m:两位月
<span class="token operator">%</span>c:一位月
<span class="token operator">%</span>d:日
<span class="token operator">%</span>H:<span class="token number">24</span>小时
<span class="token operator">%</span>h:<span class="token number">12</span>小时
<span class="token operator">%</span>i:分
<span class="token operator">%</span>s:秒
<span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>’<span class="token operator">%</span>Y年<span class="token operator">%</span>m月<span class="token operator">%</span>d日<span class="token operator">%</span>H时<span class="token operator">%</span>i分<span class="token operator">%</span>s秒’<span class="token punctuation">)</span><span class="token punctuation">;</span>
查询商品名称和商品的上传日期<span class="token punctuation">(</span>格式：x年x月x日<span class="token punctuation">)</span>
<span class="token keyword">select</span> title<span class="token punctuation">,</span>date_format<span class="token punctuation">(</span>created_time<span class="token punctuation">,</span>’<span class="token operator">%</span>Y年<span class="token operator">%</span>m月<span class="token operator">%</span>d日’<span class="token punctuation">)</span> <span class="token keyword">from</span> t_item<span class="token punctuation">;</span>
把非标准的日期
str_to_date<span class="token punctuation">(</span>时间字符串，格式<span class="token punctuation">)</span>
<span class="token number">08.25</span><span class="token number">.2018</span> <span class="token number">08</span>:<span class="token number">08</span>:<span class="token number">08</span>
<span class="token keyword">select</span> str_to_date<span class="token punctuation">(</span>‘<span class="token number">08.25</span><span class="token number">.2018</span> <span class="token number">08</span>:<span class="token number">08</span>:<span class="token number">08</span>
’<span class="token punctuation">,</span>’<span class="token operator">%</span>m<span class="token punctuation">.</span><span class="token operator">%</span>d<span class="token punctuation">.</span><span class="token operator">%</span>Y <span class="token operator">%</span>H:<span class="token operator">%</span>i:<span class="token operator">%</span>s
’<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extract" tabindex="-1"><a class="header-anchor" href="#extract"><span>EXTRACT</span></a></h3><p>处理时间</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询指定年份</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> extracy<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> t<span class="token punctuation">.</span>birthday<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1997</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unix-timestamp" tabindex="-1"><a class="header-anchor" href="#unix-timestamp"><span>UNIX_TIMESTAMP</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取当前时间戳(毫秒/秒)</span>
<span class="token keyword">select</span>  UNIX_TIMESTAMP<span class="token punctuation">(</span>date_sub<span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">DAY</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 1627012407000 2021-07-23 11:53:27  </span>
<span class="token keyword">select</span>  UNIX_TIMESTAMP<span class="token punctuation">(</span>date_sub<span class="token punctuation">(</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">DAY</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1627014735 2021-07-23 12:32:15</span>



<span class="token comment">-- 获取今天、昨天0点时间戳</span>
<span class="token comment">-- 昨天</span>
UNIX_TIMESTAMP<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">AS</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span>
<span class="token comment">-- 今天</span>
UNIX_TIMESTAMP<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">AS</span> <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h2><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>concat</span></a></h3><p>把concat 内部的参数拼接到一起</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询员工姓名和工资，要求工资单位是元</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>concat<span class="token punctuation">(</span>sal<span class="token punctuation">,</span><span class="token string">&#39;元&#39;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h2><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order"><span>order</span></a></h3><p>排序： (desc 降序)  默认升序(asc)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token number">1.</span>查询所有员工的姓名和工资按照工资升序排序
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span>
<span class="token number">2.</span>查询<span class="token number">10</span>号部门的所有员工信息，按照工资降序排序
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span>
<span class="token number">3.</span>查询所有带燃字的商品，按照单价升序排序
<span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> t_item <span class="token keyword">where</span>  title <span class="token operator">like</span> ‘<span class="token operator">%</span>燃<span class="token operator">%</span>’<span class="token keyword">order</span> <span class="token keyword">by</span> price<span class="token punctuation">;</span>
<span class="token number">4.</span> 查询所有dell商品按照分类category_id升序排序
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_item <span class="token keyword">where</span> title <span class="token operator">like</span> <span class="token string">&#39;%dell%&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> category_id<span class="token punctuation">;</span>
<span class="token number">5.</span>查询所有员工按照部门升序排序如果部门一致则按照工资降序排序
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">,</span>sal <span class="token keyword">desc</span><span class="token punctuation">;</span>
<span class="token number">6.</span>查询所有商品分类和单价按照分类降序排序，如果分类相同则按照单价升序排序
<span class="token keyword">select</span> category_id<span class="token punctuation">,</span>price <span class="token keyword">from</span> t_item <span class="token keyword">order</span> <span class="token keyword">by</span> category_id <span class="token keyword">desc</span><span class="token punctuation">,</span>price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数"><span>聚合函数</span></a></h2><p>用于对多条数据进行统计 1.求和sum（字段名） select sum(sal) from emp where deptno=10; 2.平均值avg(字段名) select avg(sal) from emp ; 3.最大值max（字段名） select max(comm) from emp where deptno=30; 4.最小值min（字段名） select min(price) from t_item; 5.统计数量count（字段名）  一般使用count(<em>) 统计30号部门 select count(</em>) from emp where deptno=30;</p><p>select count(<em>) from emp where sal&gt;2500; select max(comm) from emp where sal&gt;1000 or sal&lt;3000; select max(comm) 最大奖金,max(sal)最高工资,avg(sal)工资平均值,sum(sal)工资总和 from emp; select count(</em>)from t_item where price&lt;100; select count(*)from emp where ename like ‘%a%’;</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h4 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>Where</span></a></h4><p>对全局对限制，也就是对最后查询出来的整个结果做限制。 示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    stu<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span>
    student stu
 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> grade gra <span class="token keyword">on</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> gra<span class="token punctuation">.</span>c_stuId
<span class="token keyword">WHERE</span> gra<span class="token punctuation">.</span>c_fs <span class="token operator">is</span> <span class="token operator">NOT</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lpad-rpad" tabindex="-1"><a class="header-anchor" href="#lpad-rpad"><span>LPAD/RPAD</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> RPAD<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pad <span class="token keyword">from</span> tmp<span class="token punctuation">;</span> <span class="token comment">#右补0</span>
<span class="token keyword">select</span> LPAD<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pad <span class="token keyword">from</span> tmp<span class="token punctuation">;</span> <span class="token comment">#左补0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>LPAD(str,len,padstr) 用字符串 padstr对 str进行左边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len&#39;，那么它将被截除到 len个字符，保留从左边开始len个长度。 RPAD(str,len,padstr) 用字符串padstr对 str进行右边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len&#39;，那么它将被截除到 len个字符。</p><h4 id="row-number" tabindex="-1"><a class="header-anchor" href="#row-number"><span>ROW_NUMBER</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@num</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token variable">@num</span>:<span class="token operator">=</span><span class="token variable">@num</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num<span class="token punctuation">,</span>bb<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> minithirdauthbind bb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="found-rows-row-count" tabindex="-1"><a class="header-anchor" href="#found-rows-row-count"><span>Found_rows/Row_count</span></a></h4><p>MySQL中有两个函数来计算上一条语句影响了多少行，不同于SqlServer/Oracle，不要因为此方面的差异而引起功能问题： 1，判断Select得到的行数用found_rows()函数进行判断。 2，判断Update或Delete影响的行数用row_count()函数进行判断，这里需要注意，如果Update前后的值一样，row_count则为0，而不像SqlServer里的@@rowcount或Oracle里的rowcount，只要update到行，影响的行数就会大于0，而无论update前后字段的值是否发生了变化</p><p>FOUND_ROWS() 函数 （1）FOUND_ROWS()函数返回的是上一条 SELECT 语句（或 SHOW语句等）查询结果集的记录数。 注意，是上一条SELECT 语句（即执行该函数前的最近一条SELECT语句），而不是上一条SQL 语句；因为上一条SQL语句不一定是 SELECT 语句。且，像SELECT ROW_COUNT() 这种语句也是 SELECT 语句，它们的结果集也会被FOUND_ROWS() 函数查出来。 （2）如果上一条 SELECT 语句查询结果为空，则返回 0。 （3）SHOW XXX（例如，show tables、show databases、show status）语句也会被FOUND_ROWS() 函数查出来。  示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>需要和SQL_CALC_FOUND_ROWS搭配使用

<span class="token keyword">select</span>  a<span class="token punctuation">.</span>F_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>CityName<span class="token punctuation">,</span>b<span class="token punctuation">.</span>F_id topicid <span class="token keyword">from</span>  yht_cityinfo <span class="token keyword">as</span> a <span class="token keyword">left</span> <span class="token keyword">join</span> yht_topic <span class="token keyword">as</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>CityName<span class="token operator">=</span>b<span class="token punctuation">.</span>CityName 
<span class="token operator">and</span> b<span class="token punctuation">.</span>TopicLibaryId <span class="token operator">=</span><span class="token string">&#39;14564564564545&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">select</span>  FOUND_ROWS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
运行该语句：返回<span class="token number">7</span>列数据和一个数字<span class="token number">7</span>

<span class="token keyword">select</span>  a<span class="token punctuation">.</span>F_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>CityName<span class="token punctuation">,</span>b<span class="token punctuation">.</span>F_id topicid <span class="token keyword">from</span>  yht_cityinfo <span class="token keyword">as</span> a <span class="token keyword">left</span> <span class="token keyword">join</span> yht_topic <span class="token keyword">as</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>CityName<span class="token operator">=</span>b<span class="token punctuation">.</span>CityName 
<span class="token operator">and</span> b<span class="token punctuation">.</span>TopicLibaryId <span class="token operator">=</span><span class="token string">&#39;14564564564545&#39;</span>  <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">select</span>  FOUND_ROWS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
运行该语句：返回<span class="token number">3</span>列数据和一个数字<span class="token number">5</span>（因为查询的是跳过第二条，往下找，到第五个） 

<span class="token keyword">select</span> SQL_CALC_FOUND_ROWS a<span class="token punctuation">.</span>F_id<span class="token punctuation">,</span>a<span class="token punctuation">.</span>CityName<span class="token punctuation">,</span>b<span class="token punctuation">.</span>F_id topicid <span class="token keyword">from</span>  yht_cityinfo <span class="token keyword">as</span> a <span class="token keyword">left</span> <span class="token keyword">join</span> yht_topic <span class="token keyword">as</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>CityName<span class="token operator">=</span>b<span class="token punctuation">.</span>CityName 
<span class="token operator">and</span> b<span class="token punctuation">.</span>TopicLibaryId <span class="token operator">=</span><span class="token string">&#39;14564564564545&#39;</span>  <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">select</span>  FOUND_ROWS<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">rowcount</span><span class="token punctuation">;</span>
运行该语句：返回<span class="token number">2</span>列数据和一个数字<span class="token number">7</span>  因为我们要分页数据，总数，所以选用最后一个
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ROW_COUNT() 函数 （1）FOUND_ROWS()函数返回的是上一条SQL语句，对表数据进行修改操作后影响的记录数。 如果上一条SQL语句不是修改操作语句（INSERT/UPDATE/DELETE 等），而是查询语句（SELECT/SHOW 等）则返回-1。如果是修改操作语句，则返回修改（增/删/该）影响的记录数。 注意，这里是上一条SQL语句（即执行该函数前的上一条SQL语句），和上面有所区别。 （2）如果上一条SQL语句是UPDATE语句，但是UPDATE后所有数据的值并没有改变，则返回 0。 （3）如果上一条SQL语句是建表语句（创建表或临时表），但创建的是空表，则返回 0。如果是删除表（DROP语句），则返回的还是 0。 （4）如果是创建临时表，但使用的是 AS 关键字直接将查询出来的值赋值给新建的临时表的话（其实就相当于新建了一个空表，紧接着使用了一条INSERT语句而已），则返回插入的记录数。</p>`,44),v={href:"https://blog.csdn.net/zhou520yue520/article/details/81155248",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/business122/article/details/7548838",target:"_blank",rel:"noopener noreferrer"},w=p(`<h4 id="greatest-least" tabindex="-1"><a class="header-anchor" href="#greatest-least"><span>Greatest/Least</span></a></h4><p>获取一行中两列的最大值和最小值</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>两列中的最小值
<span class="token keyword">select</span> LastStudyDate<span class="token punctuation">,</span>LastDoneExamDate<span class="token punctuation">,</span>LEAST<span class="token punctuation">(</span>LastStudyDate<span class="token punctuation">,</span>LastDoneExamDate<span class="token punctuation">)</span> <span class="token keyword">FROM</span> userstudylogsummary
两列中的最大值
<span class="token keyword">select</span> LastStudyDate<span class="token punctuation">,</span>LastDoneExamDate<span class="token punctuation">,</span>GREATEST<span class="token punctuation">(</span>LastStudyDate<span class="token punctuation">,</span>LastDoneExamDate<span class="token punctuation">)</span> <span class="token keyword">FROM</span> userstudylogsummary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by"><span>Order by</span></a></h4><p>排序 查询排序的问题，当你要排序的字段存在值一样的时候，那么会出现你每次查询出来的排序是不同的，如果你想让每次出来的排序值一样，那么你就需要给排序字段设置为唯一的值，比如说加一个排序字段ID</p><h4 id="group-concat" tabindex="-1"><a class="header-anchor" href="#group-concat"><span>Group_Concat</span></a></h4><p>将查询出来的列表中某一个字段拼接成一个字符串 SELECT a.ChannelId from dynews_news_channel a  WHERE NewsId=&#39;6a9f7baf-d150-4863-9355-09572872dd11&#39; <img src="`+i+'" alt="image.png" loading="lazy"> 拼接成一个字符串 示例： SELECT GROUP_CONCAT(cast(a.ChannelId as char(10)) SEPARATOR &#39;,&#39;) as id from   dynews_news_channel a  WHERE NewsId=&#39;6a9f7baf-d150-4863-9355-09572872dd11&#39; <img src="'+r+`" alt="image.png" loading="lazy"> 示例： SELECT GROUP_CONCAT(a.Content SEPARATOR &#39;,&#39; ) from dynews_reportorder_details a WHERE a.ReportOrder=&#39;DFGDGH57454JGYDERFDG&#39;</p><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by"><span>Group by</span></a></h4><p>场景：需要根据多个标签进行匹配相似度，用户传过来多个标签，我需要根据用户传过来的标签然后去数据库中查询标签字段（,号隔开）中有几个和这个匹配</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>  <span class="token function">count</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>F_Id<span class="token punctuation">)</span> <span class="token keyword">as</span> cs<span class="token punctuation">,</span>b<span class="token punctuation">.</span>Label <span class="token keyword">from</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span>  a<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> dynews_news a <span class="token keyword">WHERE</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%,zzz,%&#39;</span> 
<span class="token keyword">UNION</span> <span class="token keyword">all</span> 
<span class="token keyword">select</span> a<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> dynews_news a <span class="token keyword">WHERE</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%,3,%&#39;</span>
<span class="token keyword">UNION</span> <span class="token keyword">all</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> dynews_news a <span class="token keyword">WHERE</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%,w,%&#39;</span>
<span class="token keyword">UNION</span> <span class="token keyword">all</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Label <span class="token keyword">from</span> dynews_news a <span class="token keyword">WHERE</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Label<span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%,2,%&#39;</span>
<span class="token punctuation">)</span> b  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>F_Id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>Label <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cs <span class="token keyword">DESC</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image.png" loading="lazy"> 修改以下配置后就可以查询groupby后面不包含的列</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>show variables like &#39;%sql_mode%&#39;;

STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_AUTO_CREATE_USER<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION

去掉：ONLY_FULL_GROUP_BY  这个是设置查询的列必须在分组后也存在

是分别在<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>和<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>下面添加这段 sql_mode=STRICT_TRANS_TABLES<span class="token punctuation">,</span>NO_ZERO_IN_DATE<span class="token punctuation">,</span>NO_ZERO_DATE<span class="token punctuation">,</span>ERROR_FOR_DIVISION_BY_ZERO<span class="token punctuation">,</span>NO_AUTO_CREATE_USER<span class="token punctuation">,</span>NO_ENGINE_SUBSTITUTION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>IF</span></a></h4><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>如果满足条件就返回<span class="token number">0</span>，不满足条件就返回原值
<span class="token keyword">SELECT</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Price<span class="token punctuation">)</span> <span class="token keyword">from</span> yht_betorder <span class="token keyword">where</span> CustomerId<span class="token operator">=</span><span class="token string">&#39;22690be4-c2cc-4b6d-bbcd-eda1cdf57a6c&#39;</span> <span class="token operator">and</span> PayType<span class="token operator">=</span><span class="token number">3</span>

<span class="token keyword">select</span> t<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>weight<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token string">&#39;正常&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;肥胖&#39;</span><span class="token punctuation">)</span> 体重 <span class="token keyword">from</span> t_customer t
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ifnull" tabindex="-1"><a class="header-anchor" href="#ifnull"><span>IFNULL</span></a></h4><p>语句中判断，如果字段值为null，那么就转换为其他值，使用</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> IFNULL（<span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span>）<span class="token operator">=</span><span class="token operator">&gt;</span>输出aa

ispublic字段为<span class="token boolean">null</span>就输出空
IFNULL<span class="token punctuation">(</span>IsPublic<span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>Case</span></a></h4><p>类似于if逻辑判断</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>数据库存入的是数字，想转为中文
<span class="token keyword">select</span>  <span class="token keyword">CASE</span> Way
	<span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
		<span class="token string">&#39;朋友圈&#39;</span>
		<span class="token keyword">WHEN</span> <span class="token number">2</span> <span class="token keyword">THEN</span>
		<span class="token string">&#39;城市圈&#39;</span>
	<span class="token keyword">ELSE</span>
		<span class="token string">&#39;其他&#39;</span>
<span class="token keyword">END</span> <span class="token keyword">as</span> way
 <span class="token keyword">from</span> dynews_user_share <span class="token keyword">WHERE</span> NewsId<span class="token operator">=</span><span class="token string">&#39;53456454545&#39;</span> <span class="token operator">and</span> UserId<span class="token operator">=</span><span class="token string">&#39;88888888&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cast" tabindex="-1"><a class="header-anchor" href="#cast"><span>Cast</span></a></h4><p>Cast(字段名 as 转换的类型 )把一个字段转换成另一个字段。 示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>cast<span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">)</span> mysql中进行类型转换
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="concat-1" tabindex="-1"><a class="header-anchor" href="#concat-1"><span>Concat</span></a></h4><p>mysql CONCAT(str1,str2,…)                         返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。或许有一个或多个参数。 如果所有参数均为非二进制字符串，则结果为非二进制字符串。 如果自变量中含有任一二进制字符串，则结果为一个二进制字符串。一个数字参数被转化为与之相等的二进制字符串格式；若要避免这种情况，可使用显式类型 cast, 例如： SELECT CONCAT(CAST(int_col AS CHAR), char_col)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>mysql<span class="token operator">&gt;</span> <span class="token return-type class-name">SELECT</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>’My’<span class="token punctuation">,</span> ‘S’<span class="token punctuation">,</span> ‘QL’<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-&gt;</span> ‘MySQL’
mysql<span class="token operator">&gt;</span> <span class="token return-type class-name">SELECT</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>’My’<span class="token punctuation">,</span> NULL<span class="token punctuation">,</span> ‘QL’<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-&gt;</span> NULL
mysql<span class="token operator">&gt;</span> <span class="token return-type class-name">SELECT</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span><span class="token number">14.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-&gt;</span> ‘<span class="token number">14.3</span>′
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CONCAT(string1,string2,…)   说明 : string1,string2代表字符串,concat函数在连接字符串的时候，只要其中一个是NULL,那么将返回NULL</p><h4 id="any-value" tabindex="-1"><a class="header-anchor" href="#any-value"><span>any_value</span></a></h4><p>any_value()会选择被分到同一组的数据里第一条数据的指定列值作为返回数据 示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 
	province_code<span class="token punctuation">,</span>
	any_value<span class="token punctuation">(</span>province_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t_mip_base_area
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> province_code
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="count" tabindex="-1"><a class="header-anchor" href="#count"><span>count</span></a></h4><p>（1）count(*)---包括所有列，返回表中的记录数，相当于统计表的行数，在统计结果的时候，不会忽略列值为NULL的记录。 （2）count(1)---忽略所有列，1表示一个固定值，也可以用count(2)、count(3)代替，在统计结果的时候，不会忽略列值为NULL的记录。 （3）count(列名)---只包括列名指定列，返回指定列的记录数，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 （4）count(distinct 列名)---只包括列名指定列，返回指定列的不同值的记录数，在统计结果的时候，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），即列值为NULL的记录不统计在内。 带条件的count</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token punctuation">)</span> <span class="token keyword">from</span> a<span class="token punctuation">;</span>
<span class="token comment">## count()函数中使用条件表达式加or null来实现，作用就是当条件不满足时，函数变成了count(null)不会统计数量</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token operator">or</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">from</span> a<span class="token punctuation">;</span>

<span class="token comment">## count()函数中使用case when表达式来实现，当条件满足是表达式的结果为非空，条件不满足时无结果默认为NULL;</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> num <span class="token operator">&gt;</span> <span class="token number">200</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">from</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exist" tabindex="-1"><a class="header-anchor" href="#exist"><span>Exist</span></a></h4><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>添加数据时候先判断，不满足条件不添加
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>sysrole<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>Id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>CreateTime<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>Creater<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>LastModifyTime<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>LastModifier<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>Deleted<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>Disabled<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>RoleName<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>RoleKey<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>SortNumber<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>DataScope<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-03-16 11:33:00.000000&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-06-16 09:25:24.678544&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;system&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;普通角色&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;common&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span> <span class="token keyword">from</span> DUAL
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> Id <span class="token keyword">from</span> sysrole <span class="token keyword">WHERE</span> Id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rand" tabindex="-1"><a class="header-anchor" href="#rand"><span>Rand</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">## 随机取一条数据</span>
<span class="token keyword">SELECT</span> username <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span>；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让你的数据库的性能呈指数级的下降，MySQL会不得不去执行RAND()函数（很耗CPU时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了Limit 1也无济于事（因为要排序）</p><h4 id="instr" tabindex="-1"><a class="header-anchor" href="#instr"><span>Instr</span></a></h4><p>instr()返回子字符串在字符串中首次出现的位置；如果没有找到，则返回0</p>`,42);function h(g,f){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,s("blockquote",null,[s("p",null,[n("参考文档："),s("a",m,[n("https://www.jianshu.com/p/b2c1ba0ba34f"),e(a)])])]),b,s("blockquote",null,[s("p",null,[n("参考资料 "),s("a",v,[n("https://blog.csdn.net/zhou520yue520/article/details/81155248"),e(a)]),s("a",y,[n("https://blog.csdn.net/business122/article/details/7548838"),e(a)])])]),w])}const L=t(u,[["render",h],["__file","mysqlhanshu.html.vue"]]),T=JSON.parse('{"path":"/dataBase/mysql/mysqlhanshu/mysqlhanshu.html","title":"MySQL函数","lang":"zh-CN","frontmatter":{"title":"MySQL函数","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"mysqlhanshu","slug":"btkbe2","docsId":"30486298","description":"筛选 Limit limit 跳过的条数，请求的数量(每页的数量) Like 模糊查询，很可能让你的索引失效。 首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即like ‘…%’，是会使用索引的； 左模糊like ‘%...’无法直接使用索引，但可以利用reverse + function index的形式，变化成 l...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/mysql/mysqlhanshu/mysqlhanshu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"MySQL函数"}],["meta",{"property":"og:description","content":"筛选 Limit limit 跳过的条数，请求的数量(每页的数量) Like 模糊查询，很可能让你的索引失效。 首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即like ‘…%’，是会使用索引的； 左模糊like ‘%...’无法直接使用索引，但可以利用reverse + function index的形式，变化成 l..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614050368625-12c28eff-5ffc-4655-8a39-ce9ed1b031df.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL函数\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614050368625-12c28eff-5ffc-4655-8a39-ce9ed1b031df.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614050368615-24e143a8-8987-484b-9079-dff587fbd264.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614050842520-25c22514-6edc-4b08-9e68-f3f1907110a4.png\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"筛选","slug":"筛选","link":"#筛选","children":[{"level":3,"title":"Limit","slug":"limit","link":"#limit","children":[]},{"level":3,"title":"Like","slug":"like","link":"#like","children":[]},{"level":3,"title":"Is Null","slug":"is-null","link":"#is-null","children":[]},{"level":3,"title":"SUBSTR","slug":"substr","link":"#substr","children":[]},{"level":3,"title":"Find_In_Set","slug":"find-in-set","link":"#find-in-set","children":[]},{"level":3,"title":"distinct","slug":"distinct","link":"#distinct","children":[]},{"level":3,"title":"in","slug":"in","link":"#in","children":[]},{"level":3,"title":"between","slug":"between","link":"#between","children":[]}]},{"level":2,"title":"时间","slug":"时间","link":"#时间","children":[{"level":3,"title":"当前时间","slug":"当前时间","link":"#当前时间","children":[]},{"level":3,"title":"当前日期","slug":"当前日期","link":"#当前日期","children":[]},{"level":3,"title":"DATE_FORMAT","slug":"date-format","link":"#date-format","children":[]},{"level":3,"title":"EXTRACT","slug":"extract","link":"#extract","children":[]},{"level":3,"title":"UNIX_TIMESTAMP","slug":"unix-timestamp","link":"#unix-timestamp","children":[]}]},{"level":2,"title":"连接","slug":"连接","link":"#连接","children":[{"level":3,"title":"concat","slug":"concat","link":"#concat","children":[]}]},{"level":2,"title":"排序","slug":"排序","link":"#排序","children":[{"level":3,"title":"order","slug":"order","link":"#order","children":[]}]},{"level":2,"title":"聚合函数","slug":"聚合函数","link":"#聚合函数","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":4,"title":"Where","slug":"where","link":"#where","children":[]},{"level":4,"title":"LPAD/RPAD","slug":"lpad-rpad","link":"#lpad-rpad","children":[]},{"level":4,"title":"ROW_NUMBER","slug":"row-number","link":"#row-number","children":[]},{"level":4,"title":"Found_rows/Row_count","slug":"found-rows-row-count","link":"#found-rows-row-count","children":[]},{"level":4,"title":"Greatest/Least","slug":"greatest-least","link":"#greatest-least","children":[]},{"level":4,"title":"Order by","slug":"order-by","link":"#order-by","children":[]},{"level":4,"title":"Group_Concat","slug":"group-concat","link":"#group-concat","children":[]},{"level":4,"title":"Group by","slug":"group-by","link":"#group-by","children":[]},{"level":4,"title":"IF","slug":"if","link":"#if","children":[]},{"level":4,"title":"IFNULL","slug":"ifnull","link":"#ifnull","children":[]},{"level":4,"title":"Case","slug":"case","link":"#case","children":[]},{"level":4,"title":"Cast","slug":"cast","link":"#cast","children":[]},{"level":4,"title":"Concat","slug":"concat-1","link":"#concat-1","children":[]},{"level":4,"title":"any_value","slug":"any-value","link":"#any-value","children":[]},{"level":4,"title":"count","slug":"count","link":"#count","children":[]},{"level":4,"title":"Exist","slug":"exist","link":"#exist","children":[]},{"level":4,"title":"Rand","slug":"rand","link":"#rand","children":[]},{"level":4,"title":"Instr","slug":"instr","link":"#instr","children":[]}]}],"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":14.95,"words":4485},"filePathRelative":"dataBase/mysql/mysqlhanshu/mysqlhanshu.md","localizedDate":"2023年9月3日","excerpt":"<h2>筛选</h2>\\n<h3>Limit</h3>\\n<p>limit  跳过的条数，请求的数量(每页的数量)</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\">-- MySql查询前10条数据sql语句为</span>\\n<span class=\\"token keyword\\">select</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">from</span> table_name <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">-- 通常0是可以省略的，直接写成 limit 10。0代表从第0条记录后面开始，也就是从第一条开始。</span>\\n\\n<span class=\\"token comment\\">-- 只要查询出来数据的第一条记录，那么需要写成</span>\\n<span class=\\"token keyword\\">select</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">FROM</span> SU_supplycontract t   <span class=\\"token keyword\\">WHERE</span> supplyContractCode<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"CRM20180813002\\"</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">-- 使用合理的分页方式来提高分页的效率，比如我们查询id大于xxx的然后取十条</span>\\n<span class=\\"token keyword\\">select</span> id<span class=\\"token punctuation\\">,</span>name <span class=\\"token keyword\\">from</span> <span class=\\"token keyword\\">user</span> <span class=\\"token keyword\\">where</span> id<span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">100000</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">20</span>\\n<span class=\\"token comment\\">-- 如果上述SQL语句使用(limit 100000, 20)做分页的时候，随着表数据量的增加，直接使用limit语句会越来越慢，此时，可以通过取前一页的最大ID，以此为起点，再进行limit操作，效率提升显著。</span>\\n\\n\\n<span class=\\"token number\\">1.</span> 查询员工表中工资降序的前<span class=\\"token number\\">5</span>条数据\\n<span class=\\"token keyword\\">select</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">from</span> emp <span class=\\"token keyword\\">order</span> <span class=\\"token keyword\\">by</span> sal <span class=\\"token keyword\\">desc</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token number\\">2.</span> 查询员工表中工资降序的第<span class=\\"token number\\">3</span>页的<span class=\\"token number\\">4</span>条数据\\n<span class=\\"token keyword\\">select</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">from</span> emp <span class=\\"token keyword\\">order</span> <span class=\\"token keyword\\">by</span> sal <span class=\\"token keyword\\">desc</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token number\\">3.</span>查询商品表中价格升序的前<span class=\\"token number\\">10</span>条数据\\n<span class=\\"token keyword\\">select</span> <span class=\\"token operator\\">*</span><span class=\\"token keyword\\">from</span> t_item  <span class=\\"token keyword\\">order</span> <span class=\\"token keyword\\">by</span> price <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token number\\">4.</span>查询商品价格低于<span class=\\"token number\\">100</span>元的商品信息第三页的三条数据\\n<span class=\\"token keyword\\">select</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">from</span> t_item <span class=\\"token keyword\\">where</span> price<span class=\\"token operator\\">&lt;</span><span class=\\"token number\\">100</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token number\\">5.</span>查询<span class=\\"token number\\">10</span>号和<span class=\\"token number\\">30</span>号部门的员工工资在前三名的员工信息\\n<span class=\\"token keyword\\">select</span><span class=\\"token operator\\">*</span><span class=\\"token keyword\\">from</span>  emp <span class=\\"token keyword\\">where</span> deptno<span class=\\"token operator\\">=</span><span class=\\"token number\\">10</span> <span class=\\"token operator\\">or</span> deptno<span class=\\"token operator\\">=</span><span class=\\"token number\\">30</span> <span class=\\"token keyword\\">order</span> <span class=\\"token keyword\\">by</span> sal <span class=\\"token keyword\\">desc</span> <span class=\\"token keyword\\">limit</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{L as comp,T as data};
