import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D8HBJYTp.js";const e={},p=t(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>短链接，顾名思义就是在形式上比较短的链接网址。借助短链接，可以用简短的网址替代原来冗长的网址 整个短链接服务的实现原理如下：</p><ol><li>用户访问短链接，请求到达服务器;</li><li>服务器将短链接转换成为长链接，然后给浏览器返回重定向的状态码302;</li><li>浏览器拿到重定向的状态码，以及真正需要访问的地址，重定向到真正的长链接上。</li></ol><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>创建一个Web API项目，用于实现短链接服务。 首先，实现生成短链接接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;shorten&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ShortenUrl</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashids</span><span class="token punctuation">(</span><span class="token string">&quot;公众号My IO&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">minHashLength</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hashids<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将长链接保存到数据库，然后将数据Id加密成字符串返回。然后，实现短链接跳转接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{shortUrl}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetUrl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> shortUrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashids</span><span class="token punctuation">(</span><span class="token string">&quot;公众号My IO&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">minHashLength</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> hashids<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>shortUrl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
    <span class="token class-name"><span class="token keyword">var</span></span> urlData <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>urlData<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将短链接解码成数据Id，然后到数据库查到对应长链接。最后返回跳转状态码。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过hashids.net，我们使用ASP.NET Core Web API实现了短链接服务。</p>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","hashidsshixianduanlianjie.html.vue"]]),k=JSON.parse('{"path":"/middleware/duanlianjie/hashidsshixianduanlianjie.html","title":"Hashids实现短连接","lang":"zh-CN","frontmatter":{"title":"Hashids实现短连接","lang":"zh-CN","date":"2022-03-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"hashidsshixianduanlianjie","slug":"vtf24n","docsId":"64717726","description":"原理 短链接，顾名思义就是在形式上比较短的链接网址。借助短链接，可以用简短的网址替代原来冗长的网址 整个短链接服务的实现原理如下： 用户访问短链接，请求到达服务器; 服务器将短链接转换成为长链接，然后给浏览器返回重定向的状态码302; 浏览器拿到重定向的状态码，以及真正需要访问的地址，重定向到真正的长链接上。 实现 创建一个Web API项目，用于实现...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/duanlianjie/hashidsshixianduanlianjie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Hashids实现短连接"}],["meta",{"property":"og:description","content":"原理 短链接，顾名思义就是在形式上比较短的链接网址。借助短链接，可以用简短的网址替代原来冗长的网址 整个短链接服务的实现原理如下： 用户访问短链接，请求到达服务器; 服务器将短链接转换成为长链接，然后给浏览器返回重定向的状态码302; 浏览器拿到重定向的状态码，以及真正需要访问的地址，重定向到真正的长链接上。 实现 创建一个Web API项目，用于实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-03-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hashids实现短连接\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"middleware/duanlianjie/hashidsshixianduanlianjie.md","localizedDate":"2022年3月18日","excerpt":"<h2>原理</h2>\\n<p>短链接，顾名思义就是在形式上比较短的链接网址。借助短链接，可以用简短的网址替代原来冗长的网址\\n整个短链接服务的实现原理如下：</p>\\n<ol>\\n<li>用户访问短链接，请求到达服务器;</li>\\n<li>服务器将短链接转换成为长链接，然后给浏览器返回重定向的状态码302;</li>\\n<li>浏览器拿到重定向的状态码，以及真正需要访问的地址，重定向到真正的长链接上。</li>\\n</ol>\\n<h2>实现</h2>\\n<p>创建一个Web API项目，用于实现短链接服务。\\n首先，实现生成短链接接口：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">HttpPost</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"shorten\\"</span><span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> <span class=\\"token function\\">ShortenUrl</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">FromBody</span></span><span class=\\"token punctuation\\">]</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> url<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> id <span class=\\"token operator\\">=</span> db<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> hashids <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Hashids</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"公众号My IO\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token named-parameter punctuation\\">minHashLength</span><span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> hashids<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Encode</span><span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
