import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as a,c as i,b as e,e as r,f as c,d as s}from"./app-D8HBJYTp.js";const l="/kbms/common/1615431799676-ffdb1ace-289b-4843-9bae-1b2d2acf003f.webp",d={},p=s('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><h3 id="持续集成-continuous-integration-ci" tabindex="-1"><a class="header-anchor" href="#持续集成-continuous-integration-ci"><span>持续集成**（Continuous Integration ，CI）**</span></a></h3><p>传统的方式是每个开发人员在完成手头的工作后，然后在项目为生阶段进行集成。 持续集成是团队的开发人员经常集成他们的工作，通常每个人员每天至少提交一次代码，这也就意味着每天可能发生多次继承。每次继承都是通过自动化的构建来验证，从而尽快的发现集成的错误，也可以大大减少集成的问题。 代码集成以后，当所有的单元测试通过，那么开发人员就可以得到一个绿色的构建(代表构建成功了)，这表明他们已经成功地集成在一起了，代码正按照测试预期在工作。尽管集成代码代表能够一起工作了，但是这个时候并不能进行生产环境的部署，因为他没有在类似于生产环境中的测试。</p><h3 id="持续交付-continuous-delivery" tabindex="-1"><a class="header-anchor" href="#持续交付-continuous-delivery"><span>持续交付**（Continuous Delivery）**</span></a></h3><p>持续交付是对持续集成的延伸，将集成后的代码部署到类似的生产环境，确保可以通过可持续的方法快速想客户发布新的修改。如果代码没有问题，可以继续手动部署到生产环境。</p><h3 id="持续部署-continuous-deploy" tabindex="-1"><a class="header-anchor" href="#持续部署-continuous-deploy"><span>持续部署（Continuous Deploy）</span></a></h3><p>如果想获得持续交付的好处，那么就应该尽早部署到生产环境，以确保可以小批次的发布，在发生问题的时候可以轻松排除故障，于是有了持续部署。 通常将这个在不同环境内发布和测试的过程叫做部署流水线。 持续部署是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h2><p>一起大概的图 <img src="'+l+'" alt="" loading="lazy"></p><p>客户端push代码到git仓库，git仓库配置一个webhok的东西可以触发jenkins的构建，然后通过jenkins拉取代码生成build镜像，镜像构建成功，我们可以推送镜像镜像仓库，然后我们可以在服务器拉取该镜像，从而完成服务的更新与重启，最终我们从客户端访问容器。这个时候进行测试没有问题后再上生产环境。</p><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案"><span>实现方案</span></a></h2>',11),u=e("li",null,"Gitlab的CI/CD",-1),h={href:"https://azure.microsoft.com/zh-cn/products/devops/",target:"_blank",rel:"noopener noreferrer"};function m(g,b){const t=o("ExternalLinkIcon");return a(),i("div",null,[p,e("ul",null,[u,e("li",null,[e("a",h,[r("azure devops"),c(t)])])])])}const _=n(d,[["render",m],["__file","index.html.vue"]]),C=JSON.parse('{"path":"/cloud/ciAndCd/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"ciAndCd","slug":"bzgbcg","docsId":"32695711","description":"描述 持续集成**（Continuous Integration ，CI）** 传统的方式是每个开发人员在完成手头的工作后，然后在项目为生阶段进行集成。 持续集成是团队的开发人员经常集成他们的工作，通常每个人员每天至少提交一次代码，这也就意味着每天可能发生多次继承。每次继承都是通过自动化的构建来验证，从而尽快的发现集成的错误，也可以大大减少集成的问题。...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"描述 持续集成**（Continuous Integration ，CI）** 传统的方式是每个开发人员在完成手头的工作后，然后在项目为生阶段进行集成。 持续集成是团队的开发人员经常集成他们的工作，通常每个人员每天至少提交一次代码，这也就意味着每天可能发生多次继承。每次继承都是通过自动化的构建来验证，从而尽快的发现集成的错误，也可以大大减少集成的问题。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1615431799676-ffdb1ace-289b-4843-9bae-1b2d2acf003f.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-27T14:05:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-27T14:05:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1615431799676-ffdb1ace-289b-4843-9bae-1b2d2acf003f.webp\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-27T14:05:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[{"level":3,"title":"持续集成**（Continuous Integration ，CI）**","slug":"持续集成-continuous-integration-ci","link":"#持续集成-continuous-integration-ci","children":[]},{"level":3,"title":"持续交付**（Continuous Delivery）**","slug":"持续交付-continuous-delivery","link":"#持续交付-continuous-delivery","children":[]},{"level":3,"title":"持续部署（Continuous Deploy）","slug":"持续部署-continuous-deploy","link":"#持续部署-continuous-deploy","children":[]}]},{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":2,"title":"实现方案","slug":"实现方案","link":"#实现方案","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1714226735000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.1,"words":630},"filePathRelative":"cloud/ciAndCd/readme.md","localizedDate":"2023年9月24日","excerpt":"<h2>描述</h2>\\n<h3>持续集成**（Continuous Integration ，CI）**</h3>\\n<p>传统的方式是每个开发人员在完成手头的工作后，然后在项目为生阶段进行集成。\\n持续集成是团队的开发人员经常集成他们的工作，通常每个人员每天至少提交一次代码，这也就意味着每天可能发生多次继承。每次继承都是通过自动化的构建来验证，从而尽快的发现集成的错误，也可以大大减少集成的问题。\\n代码集成以后，当所有的单元测试通过，那么开发人员就可以得到一个绿色的构建(代表构建成功了)，这表明他们已经成功地集成在一起了，代码正按照测试预期在工作。尽管集成代码代表能够一起工作了，但是这个时候并不能进行生产环境的部署，因为他没有在类似于生产环境中的测试。</p>","autoDesc":true}');export{_ as comp,C as data};
