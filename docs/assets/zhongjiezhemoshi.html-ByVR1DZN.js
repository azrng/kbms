import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-CBxp4zeL.js";const e={},p=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>中介者模式定义了一个单独的(中介)对象，来封装一组对象之间的交互。将这组对象之间的交互委派给中介对象交互，来避免对象之间的直接交互。</p><p>实现目的：为了解耦对象之间的交互，所有的参与者都只和中介进行交互。</p><p>中介者模式中有下面几个主要的角色：</p><ul><li>抽象中介者(Mediator)：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之间交互所需要的方法。抽象中介者可以用来集中处理同事对象之间的通信，降低系统的耦合度。</li><li>具体中介者(ConcreteMediator)：实现抽象中介者接口，通常包含了一个集合用来存储同事对象，实现同事对象之间的协作。具体中介者需要所有具体的同事类，并从具体同事对象接收消息，向其他具体同事发送命令。</li><li>抽象同事类(Colleague)：定义了同事对象的接口，可以是一个抽象类或者接口，其中定义了一些公共的方法和属性。抽象同事类通常持有一个抽象中介者的引用，以便能够将自己的状态变化通知中介者，同时也可以接收中介者发送的消息。</li><li>具体同事类(ConcreteColleague)：实现抽象同事类的接口，是实际的参与者，每个具体同事类都需要知道它的中介者对象，并与其进行交互。具体同事类之间的通信都是通过具体中介者来实现的，它们之间不直接交互。</li></ul><h2 id="中介者对比观察者模式" tabindex="-1"><a class="header-anchor" href="#中介者对比观察者模式"><span>中介者对比观察者模式</span></a></h2><p>相同点： 都是为了实现模块的解耦 观察者模式中的观察者和被观察者就有点类似中介模式中的“参与者”。</p><p>区别： 在观察者模式中，大多数情况一个参与者要不是观察者要不是被观察者，不会兼具多种身份，也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理。 而在中介者模式中，只有当参与者之间的交互关系错综复杂，维护成本很高的时候，才考虑使用中介者模式，因为中介者模式会带来一定的副作用，它有可能会产生大而复杂的上帝类。并且如果一个参与者的状态发现改变，其他参与者执行的操作有一定的先后关系，这个时候中介者模式就可以利用中介类，通过先后调用不同的参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的。</p><p>EventBus我们理解为是观察者模式实现的框架，它是不包含具体业务的，而且bus不会随着业务的复杂而改变，所以属于观察者。单纯的消息通知。 中介者需要处理具体的业务逻辑。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="简单操作" tabindex="-1"><a class="header-anchor" href="#简单操作"><span>简单操作</span></a></h3><p>创建抽象中介者接口Mediator1，该接口声明了一个方法Send用于发送消息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 抽象中介者</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator1</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 发送消息给具体参与者</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>消息内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colleague<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>参与者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建抽象同事类Colleague类，该类声明了一个中介者对象，用于和其他同事类进行交互</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 抽象同事角色</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 声明中介者对象，用于与其他同事类交互</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">protected</span> <span class="token class-name">Mediator1</span> _mediator1<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator1</span> mediator1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _mediator1 <span class="token operator">=</span> mediator1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 发送消息</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 接收消息</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建具体的同事类ColleagueA和ColleagueB，它们实现了抽象同事类Colleague，并实现了发送消息和接收消息的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 具体的同事类a</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueA</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Colleague</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ColleagueA</span><span class="token punctuation">(</span><span class="token class-name">Mediator1</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;A发送消息</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _mediator1<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;A接收到消息</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 具体同事类b</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueB</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Colleague</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ColleagueB</span><span class="token punctuation">(</span><span class="token class-name">Mediator1</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Publish</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;B发送消息</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _mediator1<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;B接收到消息</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体中介者类ConcreteMediator，该类实现了抽象中介者类Mediator1，并维护了一组同事类对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Mediator1</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name">Colleague</span> A <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name">Colleague</span> B <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ColleagueA</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            B<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            A<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置同事类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colleague<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colleague1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetColleague</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        A <span class="token operator">=</span> colleague<span class="token punctuation">;</span>
        B <span class="token operator">=</span> colleague1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后调用的示例是这样子的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建一个中介者对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建两个同事类 并且将他们分别分配中介者对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColleagueA</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColleagueB</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将需要通过中介者交互的类放入中介者</span>
mediator<span class="token punctuation">.</span><span class="token function">SetColleague</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 对象的同事类去发送消息</span>
a<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token string">&quot;我很好，谢谢&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出结果如下</span>
<span class="token comment">//A发送消息你好</span>
<span class="token comment">//B接收到消息你好</span>
<span class="token comment">//B发送消息我很好，谢谢</span>
<span class="token comment">//A接收到消息我很好，谢谢</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这这个例子中ConcreteMediator充当中介者角色，ColleagueA和ColleagueB充当同事类的角色，当ColleagueA发送消息的时候，ConcreteMediator将消息转发给ColleagueB，ColleagueB将接收到消息并将消息打印在控制台上，当ColleagueB发送消息的时候，同理，最后ColleagueA将接收到消息并打印在控制台上，这样子ColleagueA和ColleagueB就不需要直接进行交互，而是通过ConcreteMediator中介者类来协调他们之间的通信。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>轻易不使用，除非两个类之间的交互关系错综复杂，维护成本高时候才使用，通过引入中介的这个中间层，实现将一组对象之间的交互关系从多对多转换为一对多。原来一个对象要跟n个对象交互，现在只需要和一个中介对象进行交互，从而最小化对象之间的交互关系，降低代码复杂度，提高代码的可读性和可维护性。</p>`,24),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","zhongjiezhemoshi.html.vue"]]),r=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/hangweixing/zhongjiezhemoshi.html","title":"中介者模式","lang":"zh-CN","frontmatter":{"title":"中介者模式","lang":"zh-CN","date":"2023-08-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"zhongjiezhemoshi","slug":"izwvwm0dbexv8giq","docsId":"116931966","description":"概述 中介者模式定义了一个单独的(中介)对象，来封装一组对象之间的交互。将这组对象之间的交互委派给中介对象交互，来避免对象之间的直接交互。 实现目的：为了解耦对象之间的交互，所有的参与者都只和中介进行交互。 中介者模式中有下面几个主要的角色： 抽象中介者(Mediator)：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/hangweixing/zhongjiezhemoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"中介者模式"}],["meta",{"property":"og:description","content":"概述 中介者模式定义了一个单独的(中介)对象，来封装一组对象之间的交互。将这组对象之间的交互委派给中介对象交互，来避免对象之间的直接交互。 实现目的：为了解耦对象之间的交互，所有的参与者都只和中介进行交互。 中介者模式中有下面几个主要的角色： 抽象中介者(Mediator)：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中介者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"中介者对比观察者模式","slug":"中介者对比观察者模式","link":"#中介者对比观察者模式","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"简单操作","slug":"简单操作","link":"#简单操作","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":5.6,"words":1679},"filePathRelative":"softwareDesign/highQualityCode/designMode/hangweixing/zhongjiezhemoshi.md","localizedDate":"2023年8月12日","excerpt":"<h2>概述</h2>\\n<p>中介者模式定义了一个单独的(中介)对象，来封装一组对象之间的交互。将这组对象之间的交互委派给中介对象交互，来避免对象之间的直接交互。</p>\\n<p>实现目的：为了解耦对象之间的交互，所有的参与者都只和中介进行交互。</p>\\n<p>中介者模式中有下面几个主要的角色：</p>\\n<ul>\\n<li>抽象中介者(Mediator)：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之间交互所需要的方法。抽象中介者可以用来集中处理同事对象之间的通信，降低系统的耦合度。</li>\\n<li>具体中介者(ConcreteMediator)：实现抽象中介者接口，通常包含了一个集合用来存储同事对象，实现同事对象之间的协作。具体中介者需要所有具体的同事类，并从具体同事对象接收消息，向其他具体同事发送命令。</li>\\n<li>抽象同事类(Colleague)：定义了同事对象的接口，可以是一个抽象类或者接口，其中定义了一些公共的方法和属性。抽象同事类通常持有一个抽象中介者的引用，以便能够将自己的状态变化通知中介者，同时也可以接收中介者发送的消息。</li>\\n<li>具体同事类(ConcreteColleague)：实现抽象同事类的接口，是实际的参与者，每个具体同事类都需要知道它的中介者对象，并与其进行交互。具体同事类之间的通信都是通过具体中介者来实现的，它们之间不直接交互。</li>\\n</ul>","autoDesc":true}');export{d as comp,r as data};
