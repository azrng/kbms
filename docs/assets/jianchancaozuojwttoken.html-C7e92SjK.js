import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as i,b as a}from"./app-DMmdIwn0.js";const l="/kbms/common/1614697643706-a618f2c1-ea39-4d6a-8cf8-75078edbf5af.png",u="/kbms/common/1625582630614-e6531c35-e9bd-47fc-986a-cae3c354d88d.png",r="/kbms/common/1625582802887-b4d4e9f0-f868-4d4f-9814-e1e213909c88.png",k="/kbms/common/1625583521852-45192eb4-4cd7-46a2-b7ea-e7044f16d36f.png",d="/kbms/common/1625583551251-7e893c5b-47ce-4f04-aa82-2e0ad4ab5415.png",m="/kbms/common/1625583832713-97462c89-f539-4fc5-86e5-8834ed48a33b.png",v={},g=a('<h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>示例环境：vs2022、.net5 框架：WebAPI <img src="'+l+`" alt="image.png" loading="lazy"></p><h2 id="引用组件" tabindex="-1"><a class="header-anchor" href="#引用组件"><span>引用组件</span></a></h2><p>引用nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Authentication.JwtBearer&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.7&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="颁发" tabindex="-1"><a class="header-anchor" href="#颁发"><span>颁发</span></a></h2><p>在appsettings中配置文章jwt信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token string">&quot;JWTConfig&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Secret&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;sdfsdfsrty45634kkhllghtdgdfss345t678fs&quot;</span><span class="token punctuation">,</span><span class="token comment">//密钥长度太短会报出异常，最低16位</span>
    <span class="token string">&quot;Issuer&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;BlogCore&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Audience&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;laozhang&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在登录成功的时候我们会颁发token给前端，前端存储token并且在后续的每次请求都携带token来访问。然后新建控制器并添加下面的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//前面是登录逻辑</span>
    <span class="token comment">//登录成功</span>
    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> UserId <span class="token operator">=</span> <span class="token string">&quot;112233445566&quot;</span><span class="token punctuation">,</span> UserName <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> RoleId <span class="token operator">=</span> <span class="token string">&quot;987654321&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> user<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span>user<span class="token punctuation">.</span>RoleId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>_configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Secret&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtSecurityToken</span><span class="token punctuation">(</span>
        <span class="token named-parameter punctuation">issuer</span><span class="token punctuation">:</span> _configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Issuer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">audience</span><span class="token punctuation">:</span> _configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Audience&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">claims</span><span class="token punctuation">:</span> claims<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">notBefore</span><span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">expires</span><span class="token punctuation">:</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//过期时间7小时</span>
        signingCredentials<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SigningCredentials</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> SecurityAlgorithms<span class="token punctuation">.</span>HmacSha256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtSecurityTokenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;生成token出错  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用上面的接口会生成token，解析我们生成token如图 <img src="`+u+'" alt="image.png" loading="lazy"></p>',11),b={href:"https://www.lizhanglong.com/Tools/DeserializeJwtToken",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="获取信息" tabindex="-1"><a class="header-anchor" href="#获取信息"><span>获取信息</span></a></h2><p>前端传递token然后后端解析token识别用户信息并处理逻辑</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span><span class="token comment">//标识该接口需要认证才可以访问</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> userId <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> roleId <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Type <span class="token operator">==</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string">  userId:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">  roleId:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">roleId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求接口，因为没有设置认证提示错误 <img src="`+r+`" alt="image.png" loading="lazy"></p><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><p>在ConfigureServices中对于传输过来的jwt token进行判断认证</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span><span class="token comment">//认证</span>
<span class="token punctuation">{</span>
    o<span class="token punctuation">.</span>Challenge <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//3+2</span>

        <span class="token comment">// 是否开启签名认证</span>
        ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Secret&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>

        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidIssuer <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Issuer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//发行人</span>

        <span class="token comment">// 接收人验证</span>
        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidAudience <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;JWTConfig:Audience&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//验证人</span>

        RequireExpirationTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span><span class="token comment">//校验时间是否过期时，设置的时钟偏移量</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 增加token验证过期的时候给返回头设置提示</span>
    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtBearerEvents</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//如果jwt过期  那么就先走这个失败的方法，再走OnChallenge</span>
        OnAuthenticationFailed <span class="token operator">=</span> content <span class="token operator">=&gt;</span><span class="token comment">//过期时候的场景，会给返回头增加标识</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SecurityTokenExpiredException</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Token-Expired&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        OnChallenge <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=&gt;</span><span class="token comment">//验证失败自定义返回类</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 跳过默认的处理逻辑，返回下面的模型数据</span>
            context<span class="token punctuation">.</span><span class="token function">HandleResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status401Unauthorized<span class="token punctuation">;</span>

            <span class="token comment">//var result = new ServiceResult();//实例化返回类</span>
            <span class="token comment">//result.IsFailed(&quot;UnAuthorized&quot;);</span>
            <span class="token comment">//await context.Response.WriteAsync(result.ToJson());</span>

            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;验证失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：记得在Configure中开启身份认证 app.UseAuthentication();</p></blockquote><h2 id="获取用户信息" tabindex="-1"><a class="header-anchor" href="#获取用户信息"><span>获取用户信息</span></a></h2><p>再次访问获取用户信息接口 <img src="`+k+'" alt="image.png" loading="lazy"> 在请求头添加【Authorization: Bearer token】进行请求。 <img src="'+d+`" alt="image.png" loading="lazy"> 项目启动测试的时候更推荐配置使用swagger传递token进行测试</p><h2 id="角色授权" tabindex="-1"><a class="header-anchor" href="#角色授权"><span>角色授权</span></a></h2><p>修改GetUserName的授权为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;超级管理员&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次访问为403资源不可用，那么我们就创建一个获取一个角色为超级管理员的token(在生成token的时候将用户的角色设置为超级管理员)，再次请求 <img src="`+m+'" alt="image.png" loading="lazy"> 当然这个只是基本的操作，还有策略授权、自定义授权封装等,不过本文内容已经够为下次文章铺垫。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><blockquote><p>博客园老张的哲学</p></blockquote>',16);function f(y,w){const t=p("ExternalLinkIcon");return o(),c("div",null,[g,n("blockquote",null,[n("p",null,[s("官方访问太慢，推荐该网站："),n("a",b,[s("https://www.lizhanglong.com/Tools/DeserializeJwtToken"),i(t)])])]),h])}const x=e(v,[["render",f],["__file","jianchancaozuojwttoken.html.vue"]]),C=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jianchancaozuojwttoken.html","title":"简单操作JWT Token","lang":"zh-CN","frontmatter":{"title":"简单操作JWT Token","lang":"zh-CN","date":"2023-09-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jianchancaozuojwttoken","slug":"nigoqr","docsId":"31306911","description":"开篇语 示例环境：vs2022、.net5 框架：WebAPI image.png 引用组件 引用nuget包 颁发 在appsettings中配置文章jwt信息 在登录成功的时候我们会颁发token给前端，前端存储token并且在后续的每次请求都携带token来访问。然后新建控制器并添加下面的代码 调用上面的接口会生成token，解析我们生成toke...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jianchancaozuojwttoken.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"简单操作JWT Token"}],["meta",{"property":"og:description","content":"开篇语 示例环境：vs2022、.net5 框架：WebAPI image.png 引用组件 引用nuget包 颁发 在appsettings中配置文章jwt信息 在登录成功的时候我们会颁发token给前端，前端存储token并且在后续的每次请求都携带token来访问。然后新建控制器并添加下面的代码 调用上面的接口会生成token，解析我们生成toke..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614697643706-a618f2c1-ea39-4d6a-8cf8-75078edbf5af.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单操作JWT Token\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614697643706-a618f2c1-ea39-4d6a-8cf8-75078edbf5af.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625582630614-e6531c35-e9bd-47fc-986a-cae3c354d88d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625582802887-b4d4e9f0-f868-4d4f-9814-e1e213909c88.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625583521852-45192eb4-4cd7-46a2-b7ea-e7044f16d36f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625583551251-7e893c5b-47ce-4f04-aa82-2e0ad4ab5415.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625583832713-97462c89-f539-4fc5-86e5-8834ed48a33b.png\\"],\\"datePublished\\":\\"2023-09-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"引用组件","slug":"引用组件","link":"#引用组件","children":[]},{"level":2,"title":"颁发","slug":"颁发","link":"#颁发","children":[]},{"level":2,"title":"获取信息","slug":"获取信息","link":"#获取信息","children":[]},{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[]},{"level":2,"title":"获取用户信息","slug":"获取用户信息","link":"#获取用户信息","children":[]},{"level":2,"title":"角色授权","slug":"角色授权","link":"#角色授权","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.97,"words":892},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/jianchancaozuojwttoken.md","localizedDate":"2023年9月14日","excerpt":"<h2>开篇语</h2>\\n<p>示例环境：vs2022、.net5  框架：WebAPI\\n<img src=\\"/common/1614697643706-a618f2c1-ea39-4d6a-8cf8-75078edbf5af.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>\\n<h2>引用组件</h2>\\n<p>引用nuget包</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>  <span class=\\"token operator\\">&lt;</span>ItemGroup<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Microsoft.AspNetCore.Authentication.JwtBearer\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"5.0.7\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>ItemGroup<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{x as comp,C as data};
