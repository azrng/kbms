import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as i,o as n}from"./app-DaCCUZLQ.js";const t="/kbms/common/1614393600194-ec343716-6367-41fd-b3cf-36681a045873.png",l="/kbms/common/1556768624749-6acd7f83-4f8e-4238-8aa9-abb45b0f8807.png",r="/kbms/common/1614393600248-ceaf7a9e-424e-4640-8663-4f5758747c9e.png",c="/kbms/common/1556777535572-9245023d-4385-4073-8aad-cc8af2a9137a.png",o="/kbms/common/1614393600299-07be37d9-5cc5-45f7-8bea-d7f76a4a6aab.png",p="/kbms/common/1614393600298-51685a56-9985-4624-a8b5-3ca1ef44d2b4.png",d={};function h(m,e){return n(),s("div",null,e[0]||(e[0]=[i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>OAuth2.0 定义了四种授权模式： Implicit：简化模式；直接通过浏览器的链接跳转申请令牌。 Client Credentials：客户端凭证模式；该方法通常用于服务器之间的通讯；该模式仅发生在Client与Identity Server之间。 Resource Owner Password Credentials：密码模式 Authorization Code：授权码模式；（推荐）</p><h3 id="client-credentials-客户端凭证模式" tabindex="-1"><a class="header-anchor" href="#client-credentials-客户端凭证模式"><span>Client Credentials 客户端凭证模式</span></a></h3><p><img src="'+t+'" alt="image.png">   客户端凭证模式，是最简单的授权模式，因为授权的流程仅发生在Client与Identity Server之间。 该模式的适用场景为<strong>服务器与服务器之间的通信</strong>。比如对于一个电子商务网站，将订单和物流系统分拆为两个服务分别部署。订单系统需要访问物流系统进行物流信息的跟踪，物流系统需要访问订单系统的快递单号信息进行物流信息的定时刷新。而这两个系统之间服务的授权就可以通过这种模式来实现。 这种模式直接根据client的id和密钥即可获取token，无需用户参与 这种模式比较适合消费api的后端服务，比如拉取一组用户信息等 不支持refresh token，主要是没有必要 请求参数：请求头添加上 client_id和client_secret的basic编码，请求体添加grant_type必须设置为client_credentials <img src="'+l+'" alt=""></p><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h4><p>适用于没有前端的命令行应用，即在命令行下请求令牌。</p><h3 id="resource-owner-password-credentials-用户密码模式" tabindex="-1"><a class="header-anchor" href="#resource-owner-password-credentials-用户密码模式"><span>Resource Owner Password Credentials  用户密码模式</span></a></h3><p><img src="'+r+'" alt="image.png"> Resource Owner其实就是User，所以可以直译为用户名密码模式。密码模式相较于客户端凭证模式，多了一个参与者，就是User。通过User的用户名和密码向Identity Server申请访问令牌。这种模式下要求客户端不得储存密码。但我们并不能确保客户端是否储存了密码，所以该模式仅适用于受信任的客户端。否则会发生密码泄露的危险。<strong>该模式不推荐使用</strong>。 支持refresh token 使用client_id和client_secret以及用户名密码直接获取秘钥 请求地址： <a href="http://localhost:7010/uaa/oauth/token?grant_type=password&amp;username=lixx&amp;password=dw123456" target="_blank" rel="noopener noreferrer">http://localhost:7010/uaa/oauth/token?grant_type=password&amp;username=lixx&amp;password=dw123456</a></p><h4 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1"><span>适用场景</span></a></h4><p>高度信任某个应用，允许用户把用户名和密码直接告诉应用。该应用直接使用你的密码，申请令牌。 <img src="'+c+'" alt=""></p><h3 id="authorization-code-授权码模式" tabindex="-1"><a class="header-anchor" href="#authorization-code-授权码模式"><span>Authorization Code 授权码模式</span></a></h3><p><img src="'+o+`" alt="image.png"> 授权码模式是一种混合模式，是目前功能最完整、流程最严密的授权模式。它主要分为两大步骤：认证和授权。 其流程为： 用户访问客户端，客户端将用户导向Identity Server。 用户填写凭证信息向客户端授权，认证服务器根据客户端指定的重定向URI，并返回一个【Authorization Code】给客户端。 客户端根据【Authorization Code】向Identity Server申请【Access Token】 支持refresh token 请求地址：http://localhost:7010/uaa/oauth/authorize?response_type=code&amp;client_id=wx_takeout_client_id&amp;redirect_uri=http://localhost:7010/uaa/login</p><p>实际调用示例：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">想去 https://resource.com/login  页面，然后导向授权服务器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">查看是否登录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://identityserver/connect/authorize?client_id=chat_js&amp;response_type=code&amp;scope=openid profile offline_access chat file&amp;state=abcd123&amp;ui_locales=zh-CN&amp;redirect_uri=https://resource.com/login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">然后没有登录跳转回登录页面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://identityserver/Account/Login?ReturnUrl=/sso/connect/authorize/callback?client_id=chat_js&amp;response_type=code&amp;scope=openid%20profile%20offline_access%20chat%20file&amp;state=abcd123&amp;ui_locales=zh-CN&amp;redirect_uri=https%3A%2F%2Fresource.com%2Flogin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">授权服务器的登录页面进行登录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://identityserver/Account/Login</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">传递帐号密码参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Username: zyp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Password: 111111</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">RememberLogin: true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ReturnUrl: /sso/connect/authorize/callback?client_id=chat_js&amp;response_type=code&amp;scope=openid profile offline_access chat file&amp;state=abcd123&amp;ui_locales=zh-CN&amp;redirect_uri=https://resource.com/login</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__requestVerificationToken: CfDJ8F7esKHWmrdInMK78eNjD1CQZqmU6C4NRKcV7ATKMSDfWd74GHqIUfWu6_ug6XAKJjnfStQpgwQdTtT3wqSGKF46mhmc8MqkDH8sxB52N95QctZJE4mD8qbn8ROywv5GynlChe6Lw7WeT0gFncolKUU</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">然后登录成功回调到登录时候默认传过去的ReturnUrl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://identityserver/connect/authorize/callback?client_id=chat_js&amp;response_type=code&amp;scope=openid profile offline_access chat file&amp;state=abcd123&amp;ui_locales=zh-CN&amp;redirect_uri=https://resource.com/login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">然后刚一个地址重定向redirect_uri地址并且传递过来code(这个地址是资源服务器地址)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://resource.com/login?code=8d0af1cf5e6c01850a0cbbacb2b6fe59b179f7b3a91156fdf22f802a3ff09d67&amp;scope=openid profile chat file offline_access&amp;state=abcd123&amp;session_state=r27DLN-X_qYqkn2yE2jKvFOq9Au4OqMWEhD4chvaaGM.b18321377b9fec9aba4d93ab5ad8e90e&amp;ui_locales=zh-CN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">在资源服务器地址根据获取token</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">https://identityserver/connect/token?t=1619685184590</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">post:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">client_id: chat_js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">grant_type: authorization_code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code: 8d0af1cf5e6c01850a0cbbacb2b6fe59b179f7b3a91156fdf22f802a3ff09d67</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">redirect_uri: https://resource.com/login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">最后返回token</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景-2" tabindex="-1"><a class="header-anchor" href="#适用场景-2"><span>适用场景</span></a></h4><p>适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><h3 id="implicit-简化模式" tabindex="-1"><a class="header-anchor" href="#implicit-简化模式"><span>Implicit  简化模式</span></a></h3><p><img src="`+p+'" alt="image.png"> 简化模式是相对于授权码模式而言的。其不再需要【Client】的参与，所有的认证和授权都是通过浏览器来完成的。 implicit模式（隐式模式）和授权码模式(authorization_code)访问差不多，相比之下，少了一步获取code的步骤，而是直接获取token 请求： 用浏览器（此时同授权码模式，浏览器能跳转到登录页面，postman不行） <a href="http://localhost:7010/uaa/oauth/authorize?response_type=token&amp;client_id=wx_takeout_client_id&amp;redirect_uri=http://localhost:7010/uaa/login" target="_blank" rel="noopener noreferrer">http://localhost:7010/uaa/oauth/authorize?response_type=token&amp;client_id=wx_takeout_client_id&amp;redirect_uri=http://localhost:7010/uaa/login</a></p><h4 id="适用场景-3" tabindex="-1"><a class="header-anchor" href="#适用场景-3"><span>适用场景</span></a></h4><p>对于那些只有前端的应用，允许直接向前端颁发令牌，这种方式没有授权码这个中间步骤，所以称为简化模式。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p>OAuth2.0解释：<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2019/04/oauth_design.html</a> OAuth 2.0四种方式：<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html</a></p>',22)]))}const k=a(d,[["render",h],["__file","sichongshouquanmoshi.html.vue"]]),b=JSON.parse('{"path":"/middleware/authorize/oauth/sichongshouquanmoshi.html","title":"四种授权模式","lang":"zh-CN","frontmatter":{"title":"四种授权模式","lang":"zh-CN","date":"2023-10-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"sichongshouquanmoshi","slug":"fuaw2x","docsId":"32032863","description":"描述 OAuth2.0 定义了四种授权模式： Implicit：简化模式；直接通过浏览器的链接跳转申请令牌。 Client Credentials：客户端凭证模式；该方法通常用于服务器之间的通讯；该模式仅发生在Client与Identity Server之间。 Resource Owner Password Credentials：密码模式 Autho...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/authorize/oauth/sichongshouquanmoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"四种授权模式"}],["meta",{"property":"og:description","content":"描述 OAuth2.0 定义了四种授权模式： Implicit：简化模式；直接通过浏览器的链接跳转申请令牌。 Client Credentials：客户端凭证模式；该方法通常用于服务器之间的通讯；该模式仅发生在Client与Identity Server之间。 Resource Owner Password Credentials：密码模式 Autho..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614393600194-ec343716-6367-41fd-b3cf-36681a045873.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-16T05:03:06.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-16T05:03:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"四种授权模式\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614393600194-ec343716-6367-41fd-b3cf-36681a045873.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1556768624749-6acd7f83-4f8e-4238-8aa9-abb45b0f8807.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614393600248-ceaf7a9e-424e-4640-8663-4f5758747c9e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1556777535572-9245023d-4385-4073-8aad-cc8af2a9137a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614393600299-07be37d9-5cc5-45f7-8bea-d7f76a4a6aab.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614393600298-51685a56-9985-4624-a8b5-3ca1ef44d2b4.png\\"],\\"datePublished\\":\\"2023-10-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-16T05:03:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[{"level":3,"title":"Client Credentials 客户端凭证模式","slug":"client-credentials-客户端凭证模式","link":"#client-credentials-客户端凭证模式","children":[{"level":4,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}]},{"level":3,"title":"Resource Owner Password Credentials  用户密码模式","slug":"resource-owner-password-credentials-用户密码模式","link":"#resource-owner-password-credentials-用户密码模式","children":[{"level":4,"title":"适用场景","slug":"适用场景-1","link":"#适用场景-1","children":[]}]},{"level":3,"title":"Authorization Code 授权码模式","slug":"authorization-code-授权码模式","link":"#authorization-code-授权码模式","children":[{"level":4,"title":"适用场景","slug":"适用场景-2","link":"#适用场景-2","children":[]}]},{"level":3,"title":"Implicit  简化模式","slug":"implicit-简化模式","link":"#implicit-简化模式","children":[{"level":4,"title":"适用场景","slug":"适用场景-3","link":"#适用场景-3","children":[]}]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1708059786000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":4.56,"words":1368},"filePathRelative":"middleware/authorize/oauth/sichongshouquanmoshi.md","localizedDate":"2023年10月19日","excerpt":"<h2>描述</h2>\\n<p>OAuth2.0 定义了四种授权模式：\\nImplicit：简化模式；直接通过浏览器的链接跳转申请令牌。\\nClient Credentials：客户端凭证模式；该方法通常用于服务器之间的通讯；该模式仅发生在Client与Identity Server之间。\\nResource Owner Password Credentials：密码模式\\nAuthorization Code：授权码模式；（推荐）</p>\\n<h3>Client Credentials 客户端凭证模式</h3>\\n<p><img src=\\"/common/1614393600194-ec343716-6367-41fd-b3cf-36681a045873.png\\" alt=\\"image.png\\">\\n&nbsp;\\n客户端凭证模式，是最简单的授权模式，因为授权的流程仅发生在Client与Identity Server之间。\\n该模式的适用场景为<strong>服务器与服务器之间的通信</strong>。比如对于一个电子商务网站，将订单和物流系统分拆为两个服务分别部署。订单系统需要访问物流系统进行物流信息的跟踪，物流系统需要访问订单系统的快递单号信息进行物流信息的定时刷新。而这两个系统之间服务的授权就可以通过这种模式来实现。\\n这种模式直接根据client的id和密钥即可获取token，无需用户参与\\n这种模式比较适合消费api的后端服务，比如拉取一组用户信息等\\n不支持refresh token，主要是没有必要\\n请求参数：请求头添加上 client_id和client_secret的basic编码，请求体添加grant_type必须设置为client_credentials\\n<img src=\\"/common/1556768624749-6acd7f83-4f8e-4238-8aa9-abb45b0f8807.png\\" alt=\\"\\"></p>","autoDesc":true}');export{k as comp,b as data};
