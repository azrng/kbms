import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as l,b as a,e,f as s,d as t}from"./app-CBxp4zeL.js";const c="/kbms/common/1611801961116-4908455e-ee6b-4d90-baba-5a673c7ffa7c.png",p="/kbms/common/1611802002383-03013f37-0582-4615-8231-f5d782515bce.png",d={},u=t(`<p>根据项目里面的对象上下文和对象实体类生成数据库，通过程序包管理控制器操作</p><h2 id="安装组件" tabindex="-1"><a class="header-anchor" href="#安装组件"><span>安装组件</span></a></h2><ul><li>Microsoft.EntityFrameworkCore.Tools</li></ul><p>另外不同的数据库还需要安装不同的组件进行迁移数据库的操作 MySQL：Pomelo.EntityFrameworkCore.MySql Sql Server：Microsoft.EntityFrameworkCore.SqlServer sqlite：Microsoft.EntityFrameworkCore.Sqlite pgsql：Npgsql.EntityFrameworkCore.PostgreSQL</p><h2 id="创建迁移" tabindex="-1"><a class="header-anchor" href="#创建迁移"><span>创建迁移</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 基础的迁移</span>
Add-Migration InitialCreate

<span class="token comment"># 迁移且显示执行的所有步骤</span>
Add-Migration InitialCreate <span class="token parameter variable">-verbose</span>

<span class="token comment"># 指定数据库上下文迁移</span>
Add-Migration InitialCreate <span class="token parameter variable">-Context</span> FirstDbContext <span class="token parameter variable">-OutputDir</span> Migrations<span class="token punctuation">\\</span>FirstDbContextMigrations
Update-Database <span class="token parameter variable">-Context</span> FirstDbContext
<span class="token comment"># 简写 add-migration init -c openDbContext -o Migrations\\firstDbContext</span>
<span class="token comment"># -Context参数表示要使用的 DbContext 类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image.png" loading="lazy"> 然后会生成Migrations文件，向<strong>Migrations</strong>目录下的项目添加以下三个文件：</p><ul><li>XXXXXXXXXXXXXX_InitialCreate.cs - 主迁移文件 。 包含应用迁移所需的操作（在 Up() 中）和还原迁移所需的操作（在 Down()中）。</li><li>XXXXXXXXXXXXXX_InitialCreate.Designer.cs - 迁移元数据文件 。 包含 EF 所用的信息。</li><li><strong>MyContextModelSnapshot.cs</strong>--当前模型的快照。 用于确定添加下一迁移时的更改内容。</li></ul><h2 id="删除迁移" tabindex="-1"><a class="header-anchor" href="#删除迁移"><span>删除迁移</span></a></h2><p>有时候，你可能在添加迁移后意识到需要在应用迁移前对EFCore模型作出其他更改。要删除上个迁移，请使用如下命令</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Remove<span class="token operator">-</span>Migration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除迁移后，可对模型作出其他更改，然后再次添加迁移</p><h2 id="还原迁移" tabindex="-1"><a class="header-anchor" href="#还原迁移"><span>还原迁移</span></a></h2><p>如果已对数据库应用一个迁移（或者多个迁移），但还需将其复原，则可使用同一个命令来应用过迁移，并指定回退时候的目标迁移名称。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Update<span class="token operator">-</span>Database LastGoodMigration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="更新数据库" tabindex="-1"><a class="header-anchor" href="#更新数据库"><span>更新数据库</span></a></h2><p>每次本地更新类代码文件时候，这个时候需要更新数据，那么就需要先删除原先存在的数据库，然后执行命令 Update-Database  --将迁移文件映射生成对应的数据库 <img src="`+p+`" alt="image.png" loading="lazy"> 在执行完以上指令后，数据库中添加了新增加的内容 举例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Add<span class="token operator">-</span>Migration initCreate1  生成迁移文件
Update<span class="token operator">-</span>Database initCreate1 将迁移文件映射生成对应的数据库
Add<span class="token operator">-</span>Migration initCreate2  生成迁移文件
Update<span class="token operator">-</span>Database initCreate2 将迁移文件映射生成对应的数据库
Update<span class="token operator">-</span>Database initCreate1 数据库会回到initcreate1的迁移，后来增加的东西也会被删除
Update<span class="token operator">-</span>database <span class="token operator">-</span>c openDBContext  更新指定的上下文文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成sql脚本" tabindex="-1"><a class="header-anchor" href="#生成sql脚本"><span>生成SQL脚本</span></a></h2><p>调试迁移或将其部署到生产数据库是，生成一个SQL脚本很有帮助，这个时候就需要使用代码生成SQL数据库</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Script<span class="token operator">-</span>Migration
Script<span class="token operator">-</span>Migration <span class="token operator">-</span><span class="token class-name">Output</span> d<span class="token punctuation">:</span>\\InitialCreate<span class="token punctuation">.</span>sql

<span class="token comment">//生成从版本d到f的脚本</span>
Script<span class="token operator">-</span>Migration d f

详细操作

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行时候实现迁移" tabindex="-1"><a class="header-anchor" href="#运行时候实现迁移"><span>运行时候实现迁移</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>myDbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行的时候会先检查有没有数据库，如果没有则会创建数据库，然后如果没有迁移文件执行该命令会生成</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE TABLE \`__EFMigrationsHistory\` <span class="token punctuation">(</span>
    \`MigrationId\` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> CHARACTER SET utf8mb4 <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>
    \`ProductVersion\` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> CHARACTER SET utf8mb4 <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>
    CONSTRAINT \`PK___EFMigrationsHistory\` <span class="token return-type class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>\`MigrationId\`<span class="token punctuation">)</span>
<span class="token punctuation">)</span> CHARACTER <span class="token class-name">SET</span> utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果存在迁移文件，则会执行迁移文件，并且往迁移记录表添加一条数据。</p><h2 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库"><span>删除数据库</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,28),m={href:"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.entityframeworkcore.infrastructure.databasefacade.ensuredeleted?view=efcore-5.0",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库"><span>创建数据库</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果已经存在数据库，则不执行任何操作。如果数据库不存在(或者该库下没有表)，那么就会创建数据库以及所有架构，并不需要提前生成迁移文件。 如果已经存在数据库，那么会执行下面语句，如果是空库那么就会生成表以及其他结构。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> SELECT CASE <span class="token return-type class-name">WHEN</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> THEN FALSE ELSE TRUE END\n      FROM information_schema<span class="token punctuation">.</span>tables\n      <span class="token class-name">WHERE</span> table_type <span class="token operator">=</span> &#39;BASE TABLE&#39; <span class="token class-name">AND</span> table_schema <span class="token operator">=</span> &#39;数据库名字&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在该语句后面放上myDbContext.Database.Migrate();，则会执行</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE TABLE `__EFMigrationsHistory` <span class="token punctuation">(</span>\n    `MigrationId` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> CHARACTER SET utf8mb4 <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>\n    `ProductVersion` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> CHARACTER SET utf8mb4 <span class="token class-name">NOT</span> NULL<span class="token punctuation">,</span>\n    CONSTRAINT `PK___EFMigrationsHistory` <span class="token return-type class-name">PRIMARY</span> KEY <span class="token punctuation">(</span>`MigrationId`<span class="token punctuation">)</span>\n<span class="token punctuation">)</span> CHARACTER <span class="token class-name">SET</span> utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),b={href:"https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.entityframeworkcore.infrastructure.databasefacade.ensurecreated?view=efcore-5.0",target:"_blank",rel:"noopener noreferrer"},h=a("h2",{id:"资料",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#资料"},[a("span",null,"资料")])],-1),g=a("p",null,"https://learn.microsoft.com/zh-cn/ef/core/managing-schemas/migrations/managing?tabs=vs",-1),k=a("p",null,"使用多个提供程序进行迁移：https://learn.microsoft.com/zh-cn/ef/core/managing-schemas/migrations/providers?tabs=dotnet-core-cli",-1);function f(y,C){const n=o("ExternalLinkIcon");return r(),l("div",null,[u,a("blockquote",null,[a("p",null,[a("a",m,[e("官网文档"),s(n)])])]),v,a("blockquote",null,[a("p",null,[a("a",b,[e("官网文档"),s(n)])])]),h,g,k])}const x=i(d,[["render",f],["__file","daimayouxian.html.vue"]]),M=JSON.parse('{"path":"/orm/efcore/qianyishuju/daimayouxian.html","title":"代码优先","lang":"zh-CN","frontmatter":{"title":"代码优先","lang":"zh-CN","date":"2023-07-16T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"daimayouxian","slug":"vzrpda","docsId":"30840370","description":"根据项目里面的对象上下文和对象实体类生成数据库，通过程序包管理控制器操作 安装组件 Microsoft.EntityFrameworkCore.Tools 另外不同的数据库还需要安装不同的组件进行迁移数据库的操作 MySQL：Pomelo.EntityFrameworkCore.MySql Sql Server：Microsoft.EntityFram...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/qianyishuju/daimayouxian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"代码优先"}],["meta",{"property":"og:description","content":"根据项目里面的对象上下文和对象实体类生成数据库，通过程序包管理控制器操作 安装组件 Microsoft.EntityFrameworkCore.Tools 另外不同的数据库还需要安装不同的组件进行迁移数据库的操作 MySQL：Pomelo.EntityFrameworkCore.MySql Sql Server：Microsoft.EntityFram..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1611801961116-4908455e-ee6b-4d90-baba-5a673c7ffa7c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T10:47:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T10:47:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码优先\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1611801961116-4908455e-ee6b-4d90-baba-5a673c7ffa7c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1611802002383-03013f37-0582-4615-8231-f5d782515bce.png\\"],\\"datePublished\\":\\"2023-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T10:47:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"安装组件","slug":"安装组件","link":"#安装组件","children":[]},{"level":2,"title":"创建迁移","slug":"创建迁移","link":"#创建迁移","children":[]},{"level":2,"title":"删除迁移","slug":"删除迁移","link":"#删除迁移","children":[]},{"level":2,"title":"还原迁移","slug":"还原迁移","link":"#还原迁移","children":[]},{"level":2,"title":"更新数据库","slug":"更新数据库","link":"#更新数据库","children":[]},{"level":2,"title":"生成SQL脚本","slug":"生成sql脚本","link":"#生成sql脚本","children":[]},{"level":2,"title":"运行时候实现迁移","slug":"运行时候实现迁移","link":"#运行时候实现迁移","children":[]},{"level":2,"title":"删除数据库","slug":"删除数据库","link":"#删除数据库","children":[]},{"level":2,"title":"创建数据库","slug":"创建数据库","link":"#创建数据库","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1695552464000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":3.42,"words":1027},"filePathRelative":"orm/efcore/qianyishuju/daimayouxian.md","localizedDate":"2023年7月16日","excerpt":"<p>根据项目里面的对象上下文和对象实体类生成数据库，通过程序包管理控制器操作</p>\\n<h2>安装组件</h2>\\n<ul>\\n<li>Microsoft.EntityFrameworkCore.Tools</li>\\n</ul>\\n<p>另外不同的数据库还需要安装不同的组件进行迁移数据库的操作\\nMySQL：Pomelo.EntityFrameworkCore.MySql\\nSql Server：Microsoft.EntityFrameworkCore.SqlServer\\nsqlite：Microsoft.EntityFrameworkCore.Sqlite\\npgsql：Npgsql.EntityFrameworkCore.PostgreSQL</p>","autoDesc":true}');export{x as comp,M as data};
