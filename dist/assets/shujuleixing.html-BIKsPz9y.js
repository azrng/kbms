import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as n,o as b}from"./app-BugT5USA.js";const a={};function o(m,e){return b(),t("div",null,e[0]||(e[0]=[n('<p>------字符串相关函数------<br> 1.获取字符串的长度   char_length(str);<br> 获取所有员工的姓名和姓名的字符长度：<br> select ename,char_length(ename) from emp;<br> 2.获取字符串      instr(str,substr);<br> select instr(‘abcdefgh’,’d’);<br> 3.插入字符串 insert(str,start,length,newstr);<br> select insert (‘abcdefg’,3,2,’m’);<br> 4.转大写  转小写<br> select upper(‘abc’),lower(‘NBA’);<br> 5.左边截取和右边截取<br> select left(‘abcdefg’,2),right(‘abcdefg’,2);<br> 6.去两端空白<br> select trim(‘ a b ’);<br> 7.截取字符串<br> select substring (‘abcdefg’,3,2);<br> 8.重复  repeat(str,count);<br> select repeat(‘ab’,2);<br> 9.替换   replace(str,old new);<br> select replace(‘This is my sql’,’my’,’your’);<br> 10.反转   reverse (str);<br> select reverse(‘abc’);<br>  <br>  <br> ------数学相关函数------<br> 1.向下取整floor(num)<br> select floor(3.84);<br> 2.四舍五入round(num)<br> select round(3.84);<br> round(num,m); m代表小数位数<br> select round(3.123456,3);<a href="//3.123" target="_blank" rel="noopener noreferrer">//3.123</a><br> 3.非四舍五入 truncate(num,m)<br> select truncate(3.84567,3);<a href="//3.845" target="_blank" rel="noopener noreferrer">//3.845</a><br> 4.随机数rand()<br> select floor(rand()<em>6)+5;//  5-10随机数<br> select floor(rand()<em>6)+3; //3-8 随机数<br>  <br>  <br> ------分组查询------ group by 分组关键词<br> 分组函数与聚合函数结合使用，以组为单位统计。<br>            题目中每个xxx 就在group by后面写xxx<br> 1.查询每个部门的最高工资<br> select deptno,max(sal) from emp group by deptno;<br> 2.查询每个部门的平均工资<br> select deptno, avg(sal) from emp group by deptno;<br> 3.查询每个分类下商品的最低价格<br> select category_id,min(price) from t_item group by category_id;<br> 4.查询每个部门中工资大于1500的人数<br> select deptno,count(</em>) from emp where sal&gt;1500 group by deptno;<br> 5.查询每个领导的手下人数<br> select mgr,count(</em>) from emp where mgr is not null group by mgr;<br> 6.查询每个商品分类的库存总量<br> select category_id,sum(num) from t_item group by category_id;<br>  <br>  <br> ------多字段分组查询------<br> 1.查询每个部门下每个领导的手下人数<br> select deptno,mgr,count(<em>) from emp where mgr is not null group by deptno,mgr;<br>  <br> ------having------<br> a.where后面只能写普通字段的条件，不能再写聚合函数<br> b.having后面可以写普通字段条件也可以写聚合函数，但是推荐在having后面只写聚合函数<br> c.having写在group by 后面。<br> 格式： select * from 表名 where ..... group by xxx  having .... order by ..... limit ...;<br> 2. 查询每个部门的平均工资，要求平均工资大于2000<br> select  deptno,avg(sal) from emp group by deptno having avg(sal)&gt;2000;<br> 3. 查询每个分类的平均单价，过滤掉平均单价低于100的。<br> select  category_id,avg(price) from  t_item group by category_id having  avg(price)&gt;=100;<br>  <br> ####练习####<br> 1.查询每个分类商品的库存总量，要求总量高于19999<br> select category_id, sum(num) from t_item  group by  category_id having sum(num)&gt;19999;<br> 2.查询分类id为238,917的两个分类的平均单价各是多少<br> select  category_id,avg(price) from t_item where category_id =238 or category_id=917 group by category_id;<br> 3.查询emp表中每个部门的平均工资高于2000的部门编号，部门人数，平均工资 最后根据平均工资降序排序<br> select deptno,count(</em>),avg(sal) from emp group by deptno having avg(sal)&gt;2000 order by avg(sal) desc;<br> 4.查询emp表中工资在1000-3000之间的员工，每个部门的编号，工资总和，平均工资，要求过滤掉平均工资低于2000的部门，按照工资总和降序排序<br> select deptno,sum(sal),avg(sal) from emp where sal between 1000 and 3000 group by deptno  having avg(sal) &gt;2000 order by sum(sal) desc;<br> 5. 查询emp表中不是以s开头每个职位的名字，人数，工资总和，最高工资，过滤掉平均工资是3000的职位，根据人数升序排序，如果一致根据工资总和降序排序<br> select job,count(<em>),sum(sal),max(sal) from emp where job not like ‘s%’group by job having avg(sal)!=3000 order by count(</em>),sum(sal) desc;<br> 6.查询emp表每年入职的人数<br> select extract(year from hiredate) y,count(*) from emp group by y;<br>  <br>  <br> ------子查询------</p><ol><li>查询emp表工资最高的员工信息<br> select max(sal) from emp;<br> //select<em>from emp where sal =5000;<br> select</em>from emp where sal = (select max(sal) from emp;<br> );</li><li>查询emp表中工资高于平均工资的员工信息<br> select<em>from emp where sal&gt;(select avg(sal) from emp);<br> 3.查询和Jones相同工作的员工信息<br> select</em>from emp where job =(select job  from emp where ename = ‘Jones’) and ename!=’jones’;<br> 4.查询工资最低的员工的所在部门同事信息<br> a.select min(sal) from emp;<br> b.select deptno from emp where sal=(select min(sal) from emp);<br> c.select*from emp where deptno =(select deptno from emp where sal=(select min(sal) from emp)) and sal!= (select min(sal) from emp);</li><li>查询最后入职的员工信息<br> select max(hiredate) from emp;<br> select*from emp  where hiredate=(select max(hiredate) from emp);<br> 6.查询king的部门编号和部门名称<br> -得到部门编号<br> select deptno from emp where ename=’king’;<br> -通过编号得到部门名称<br> select deptno,dname from dept where deptno =(select deptno from emp where ename=’king’);<br> 7.    查询有员工的部门信息（需要两张表）<br> -得到员工表出现的部门编号<br> select deptno from emp group by deptno;<br> (select distinct deptno from emp;)<br> -通过部门编号得到部门信息<br> select *from dept where deptno in(select deptno from emp group by deptno);</li><li>查询平均工资最高的部门信息（史诗级难度！！）<br> -得到每个部门的平均工资<br> a.select deptno,avg(sal) from emp group by deptno;<br> -得到最高的平均工资<br> b.select avg(sal) from emp group by deptno order by avg(sal) desc limit 0,1;<br> -通过最高的平均工资得到对应的部门编号<br> c.select deptno from emp group by deptno having avg(sal)=(select avg(sal) a from emp group by deptno order by a desc limit 0,1);<br> -通过部门编号得到部门信息<br> d.select * from dept where deptno in(select deptno from emp group by deptno having avg(sal)=(select avg(sal) a from emp group by deptno order by a desc limit 0,1));<br> ####子查询可写的位置<br> a.写在where或having后面，当做查询条件的值<br> b.写在创建表的时候，把查询结果保存成一张新的表<br> create table emp_20 as (select*from emp where deptno=20);<br> c.写在from后面，当成一个虚拟表  <strong>必须有别名</strong><br>  <br> ------关联查询------<br> 1.查询每一个员工的姓名和对应的部门名称<br> select e.ename,d.dname<br> from emp e,dept d<br> where e.deptno=d.deptno;<br> 2.查询在new york工作的员工信息<br> select *<br> from emp e, dept d<br> where e.deptno=d.deptno and d.loc=’new york’;</li><li>查询商品标题和所对应的分类名称<br> select a.title,<a href="http://b.name" target="_blank" rel="noopener noreferrer">b.name</a><br> from t_item a, t_item_category b<br> where a.category_id = <a href="http://b.id" target="_blank" rel="noopener noreferrer">b.id</a>;<br>  <br>  <br> ------等值连接和内连接------<br> 等值连接：select * from A,B where A.x=B.x and ......;<br> 内连接：select * from A join B on A.x=B.x where (条件);<br>  1.查询每一个员工的姓名和对应的部门名称<br> select e.ename,d.dname<br> from emp e join dept d<br> on e.deptno=d.deptno;<br>  <br> 左/右外连接：select * from A left/right join B on A.x=B.x where (条件);<br> select e.ename,d.dname<br> from emp e left join dept d<br> on e.deptno=d.deptno;<br>  <br>  <br> ------表设计之关联关系------<br> 1.一对一<br> select a.username,b.nickname<br> from user a join userinfo b<br> on a.id=b.userid ;<br>  <br> Select a.username<br> From user a join userinfo b<br> On a.id=b.userid where b.nickname = ‘超人’;<br>  <br> Select a.username,a.password<br> From user a join userinfo b<br> On <a href="http://a.id" target="_blank" rel="noopener noreferrer">a.id</a> = b.userid where b.gender=’男’;<br>  <br> Select count(*) from user where username=’wukong’ and password=’abc’;<br>  <br>  <br> 2.一对多<br> select <a href="http://e.name" target="_blank" rel="noopener noreferrer">e.name</a>,<a href="http://d.name" target="_blank" rel="noopener noreferrer">d.name</a><br> From emp e join dept d<br> On <a href="http://e.deptid=d.id" target="_blank" rel="noopener noreferrer">e.deptid=d.id</a>;<br>  <br> Select <a href="http://e.name" target="_blank" rel="noopener noreferrer">e.name</a><br> From emp e join dept d<br> On <a href="http://e.deptid=d.id" target="_blank" rel="noopener noreferrer">e.deptid=d.id</a> where d.name=’妖怪’;<br>  <br>  <br> 3.多对多<br> Select <a href="http://s.name" target="_blank" rel="noopener noreferrer">s.name</a>,<a href="http://t.name" target="_blank" rel="noopener noreferrer">t.name</a><br> From teacher t join t_s a<br> On t.id=a.tid<br> Join student s<br> On s.id=a.sid;<br>  <br>  <br> Select  <a href="http://t.name" target="_blank" rel="noopener noreferrer">t.name</a>,<a href="http://s.name" target="_blank" rel="noopener noreferrer">s.name</a><br> From teacher t join t_s a<br> On t.id=a.tid<br> Join student s<br> On s.id=a.sid where t.name=’苍老师’;<br>  <br> Select  <a href="http://t.name" target="_blank" rel="noopener noreferrer">t.name</a>,<a href="http://s.name" target="_blank" rel="noopener noreferrer">s.name</a><br> From teacher t join t_s a<br> On t.id=a.tid<br> Join student s<br> On s.id=a.sid where s.name=’小丽’;<br>  <br>  <br> ------自关联------<br> Select <a href="http://p.name" target="_blank" rel="noopener noreferrer">p.name</a>,<a href="http://n.name" target="_blank" rel="noopener noreferrer">n.name</a><br> From person p left join person n<br> On <a href="http://p.mgr=n.id" target="_blank" rel="noopener noreferrer">p.mgr=n.id</a>;<br>  <br>  <br> ------表设计案例：权限管理------<br>  <br>  <br> Select <a href="http://u.name" target="_blank" rel="noopener noreferrer">u.name</a>,<a href="http://m.name" target="_blank" rel="noopener noreferrer">m.name</a><br> From user u join u_r ur<br> On u.id=ur.uid<br> Join r_m rm<br> On rm.rid=ur.rid<br> Join module m<br> On <a href="http://m.id" target="_blank" rel="noopener noreferrer">m.id</a> = rm.mid;<br>  <br> Select <a href="http://u.name" target="_blank" rel="noopener noreferrer">u.name</a>,<a href="http://m.name" target="_blank" rel="noopener noreferrer">m.name</a><br> From user u join u_r ur<br> On u.id=ur.uid<br> Join r_m rm<br> On rm.rid=ur.rid<br> Join module m<br> On <a href="http://m.id" target="_blank" rel="noopener noreferrer">m.id</a> = rm.mid where u.name=’凤姐’;<br>  <br> ------视图------<br> 视图格式：create view 视图名 as（子查询代码）;<br> 1.创建一个没有工资的视图<br> create view v_view_nosal as (select empno,ename,job,mgr,hiredate,comm,deptno from emp);<br> 2.创建视图，视图中显示每个部门的工资总和，平均工资，最高工资，最低工资<br> create view v_emp_info as(select deptno,sum(sal),avg(sal),max(sal),min(sal) from emp group by deptno);<br>  <br> ------视图分类------<br> 1.简单视图：创建视图的时候不包含：去重、分组、函数、关联查询的视图称为简单视图，可以对视图中的数据进行增删改查<br> 2.复杂视图：和简单视图相反，只能进行查询操作<br> ------约束------<br>     非空约束 not null<br> create table t1(id int,age int not null);<br> insert into t1 values(1,18);<br> insert into t1 values(2,null);  //失败<br>     唯一约束 unique<br> create table t2(id int,age int unique);<br> insert into t2 values(1,20);<br> insert into t2 values(2,20);  //失败<br> 主键约束<br>     创建表时添加：<br> 创建表后添加：<br>   create table t3(id int,name varchar(10));<br>  alter table t3 add primary key(id);<br> 删除主键约束：<br> alter table t3 drop primary key;<br> 默认约束  default<br>   create table t4 (id int,age int default 10);<br>   insert into t4 values(1,20);<br>   insert into t4 values(2,null);<br>   insert into t4 (id) values(3);  //默认值生效<br> 检查约束  check<br>     语法支持没有效果。<br> 外键约束<br> create table emp(id int primary key auto_increment,name varchar(10),deptid int,constraint fk_dept foreign key(deptid) references dept(id));<br> constraint   约束名称<br> foreign key   外键字段名<br> references  表名（字段名）<br>  <br>  <br>  <br> ------索引------0.87<br>   创建索引<br>     create index 索引名 on 表名 （字段名[（字符长度）]）;<br>     e.g: create index i_item_title on item2(title);<br> 查看索引：<br> show index from 表名;<br> show index from item2;<br> 删除索引：<br> drop index 索引名 on 表名;<br> drop index  i_item_title on item2;<br> 复合索引：<br> create index 索引名 on 表名 (字段1，字段2);<br> 总结：</li><li>索引是用于提高查询效率的技术，类似目录</li><li>索引会占用磁盘空间不是越多越好</li><li>如果数据量小的话 添加索引会降低查询效率</li><li>尽量不要在频繁改动的表上添加索引<br>   ####group_concat( )   分组连接函数<br> 1.查询员工表中 每个部门的所有员工工资 要求所有工资显示到一条数据中<br> select deptno, group_concat(sal) from emp group by deptno;<br> 2.查询员工表中每个部门 的员工姓名和对应的工资 要求显示到一条数据中<br> select deptno, group_concat(ename,&#39;:&#39;,sal) from emp group by deptno;<br>  <br>  <br> select  name,avg(score) from student group by name order by avg(score) desc;<br>  <br>  Select name,group_concat(subject,&#39;:&#39;,score) from student group by name; <br> Select name,max(score) 最高分,min(score) 最低分 from student group by name;<br>  <br>  Select name,group_concat(subject,&#39;:&#39;,score ),count(*)from student where score&lt;60 group by name;</li></ol>',2)]))}const l=r(a,[["render",o]]),i=JSON.parse('{"path":"/dataBase/mysql/mysqlhanshu/shujuleixing.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"shujuleixing","slug":"hx4n14","docsId":"26499034","description":"------字符串相关函数------ 1.获取字符串的长度 char_length(str); 获取所有员工的姓名和姓名的字符长度： select ename,char_length(ename) from emp; 2.获取字符串 instr(str,substr); select instr(‘abcdefgh’,’d’); 3.插入字符串 in...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/mysql/mysqlhanshu/shujuleixing.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"------字符串相关函数------ 1.获取字符串的长度 char_length(str); 获取所有员工的姓名和姓名的字符长度： select ename,char_length(ename) from emp; 2.获取字符串 instr(str,substr); select instr(‘abcdefgh’,’d’); 3.插入字符串 in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}]]},"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":8.59,"words":2576},"filePathRelative":"dataBase/mysql/mysqlhanshu/shujuleixing.md","excerpt":"<p>------字符串相关函数------<br>\\n1.获取字符串的长度 &nbsp; char_length(str);<br>\\n获取所有员工的姓名和姓名的字符长度：<br>\\nselect ename,char_length(ename) from emp;<br>\\n2.获取字符串 &nbsp;&nbsp;&nbsp;&nbsp; instr(str,substr);<br>\\nselect instr(‘abcdefgh’,’d’);<br>\\n3.插入字符串 insert(str,start,length,newstr);<br>\\nselect insert (‘abcdefg’,3,2,’m’);<br>\\n4.转大写&nbsp; 转小写<br>\\nselect upper(‘abc’),lower(‘NBA’);<br>\\n5.左边截取和右边截取<br>\\nselect left(‘abcdefg’,2),right(‘abcdefg’,2);<br>\\n6.去两端空白<br>\\nselect trim(‘ a b ’);<br>\\n7.截取字符串<br>\\nselect substring (‘abcdefg’,3,2);<br>\\n8.重复&nbsp; repeat(str,count);<br>\\nselect repeat(‘ab’,2);<br>\\n9.替换 &nbsp; replace(str,old new);<br>\\nselect replace(‘This is my sql’,’my’,’your’);<br>\\n10.反转 &nbsp; reverse (str);<br>\\nselect reverse(‘abc’);<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n------数学相关函数------<br>\\n1.向下取整floor(num)<br>\\nselect floor(3.84);<br>\\n2.四舍五入round(num)<br>\\nselect round(3.84);<br>\\nround(num,m); m代表小数位数<br>\\nselect round(3.123456,3);<a href=\\"//3.123\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">//3.123</a><br>\\n3.非四舍五入 truncate(num,m)<br>\\nselect truncate(3.84567,3);<a href=\\"//3.845\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">//3.845</a><br>\\n4.随机数rand()<br>\\nselect floor(rand()<em>6)+5;//&nbsp; 5-10随机数<br>\\nselect floor(rand()<em>6)+3; //3-8 随机数<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n------分组查询------ group by 分组关键词<br>\\n分组函数与聚合函数结合使用，以组为单位统计。<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 题目中每个xxx 就在group by后面写xxx<br>\\n1.查询每个部门的最高工资<br>\\nselect deptno,max(sal) from emp group by deptno;<br>\\n2.查询每个部门的平均工资<br>\\nselect deptno, avg(sal) from emp group by deptno;<br>\\n3.查询每个分类下商品的最低价格<br>\\nselect category_id,min(price) from t_item group by category_id;<br>\\n4.查询每个部门中工资大于1500的人数<br>\\nselect deptno,count(</em>) from emp where sal&gt;1500 group by deptno;<br>\\n5.查询每个领导的手下人数<br>\\nselect mgr,count(</em>) from emp where mgr is not null group by mgr;<br>\\n6.查询每个商品分类的库存总量<br>\\nselect category_id,sum(num) from t_item group by category_id;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n------多字段分组查询------<br>\\n1.查询每个部门下每个领导的手下人数<br>\\nselect deptno,mgr,count(<em>) from emp where mgr is not null group by deptno,mgr;<br>\\n&nbsp;<br>\\n------having------<br>\\na.where后面只能写普通字段的条件，不能再写聚合函数<br>\\nb.having后面可以写普通字段条件也可以写聚合函数，但是推荐在having后面只写聚合函数<br>\\nc.having写在group by 后面。<br>\\n格式： select * from 表名 where ..... group by xxx&nbsp; having .... order by ..... limit ...;<br>\\n2. 查询每个部门的平均工资，要求平均工资大于2000<br>\\nselect&nbsp; deptno,avg(sal) from emp group by deptno having avg(sal)&gt;2000;<br>\\n3. 查询每个分类的平均单价，过滤掉平均单价低于100的。<br>\\nselect&nbsp; category_id,avg(price) from&nbsp; t_item group by category_id having&nbsp; avg(price)&gt;=100;<br>\\n&nbsp;<br>\\n####练习####<br>\\n1.查询每个分类商品的库存总量，要求总量高于19999<br>\\nselect category_id, sum(num) from t_item&nbsp; group by&nbsp; category_id having sum(num)&gt;19999;<br>\\n2.查询分类id为238,917的两个分类的平均单价各是多少<br>\\nselect&nbsp; category_id,avg(price) from t_item where category_id =238 or category_id=917 group by category_id;<br>\\n3.查询emp表中每个部门的平均工资高于2000的部门编号，部门人数，平均工资 最后根据平均工资降序排序<br>\\nselect deptno,count(</em>),avg(sal) from emp group by&nbsp;deptno having avg(sal)&gt;2000 order by avg(sal) desc;<br>\\n4.查询emp表中工资在1000-3000之间的员工，每个部门的编号，工资总和，平均工资，要求过滤掉平均工资低于2000的部门，按照工资总和降序排序<br>\\nselect deptno,sum(sal),avg(sal) from emp where sal between 1000 and 3000 group by deptno&nbsp; having avg(sal) &gt;2000 order by sum(sal) desc;<br>\\n5. 查询emp表中不是以s开头每个职位的名字，人数，工资总和，最高工资，过滤掉平均工资是3000的职位，根据人数升序排序，如果一致根据工资总和降序排序<br>\\nselect job,count(<em>),sum(sal),max(sal) from emp where job not like ‘s%’group by job having avg(sal)!=3000 order by count(</em>),sum(sal) desc;<br>\\n6.查询emp表每年入职的人数<br>\\nselect extract(year from hiredate) y,count(*) from emp group by y;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n------子查询------</p>","autoDesc":true}');export{l as comp,i as data};
