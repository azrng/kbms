import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,d as t}from"./app-CVU83naM.js";const n={},a=t(`<p>Distinct、Union、Concat、Intersect、Except、Skip、Take、SkipWhile、TakeWhile、Single、SingleOrDefault、Reverse、SelectMany,Aggregate()</p><p>Distinct - 过滤集合中的相同项；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>var newlist=list.Distinct();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果就是；1,2,3,4,5,6 Union - 连接不同集合，自动过滤相同项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>List&lt;int&gt; list1= new List&lt;int&gt;() {5,6,6,7,8,9};</span></span>
<span class="line"><span>var newlist=list.Union (list1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的结果就是；1,2,3,4,5,6,7,8,9 Concat - 连接不同集合，不会自动过滤相同项；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>List&lt;int&gt; list1= new List&lt;int&gt;() {5,6,6,7,8,9};</span></span>
<span class="line"><span>  var newlist=list.Union (list1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1</li><li>2</li><li>3</li></ul><p>得到的结果就是；1,2,3,4,4,5,6,6,5,6,6,7,8,9 Intersect - 获取不同集合的相同项（交集）；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>List&lt;int&gt; list1= new List&lt;int&gt;() {5,6,6,7,8,9};</span></span>
<span class="line"><span>  var newlist=list.Intersect (list1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1</li><li>2</li><li>3</li></ul><p>得到的结果就是；5,6 Except - 从某集合中删除其与另一个集合中相同的项；其实这个说简单点就是某集合中独有的元素</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>List&lt;int&gt; list1= new List&lt;int&gt;() {5,6,6,7,8,9};</span></span>
<span class="line"><span>  var newlist=list.Except (list1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1</li><li>2</li><li>3</li></ul><p>得到的结果就是；1,2,3,4 Skip - 跳过集合的前n个元素；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>  var newlist=list.Skip (3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1</li><li>2</li></ul><p>得到的结果就是；4,4,5,6,6 Take - 获取集合的前n个元素；延迟</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,2,3,4,4,5,6,6 };</span></span>
<span class="line"><span>  var newlist=list.Take (3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>1</li><li>2</li></ul><p>得到的结果就是；1,2,2</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>List&lt;string&gt; ListA = new List&lt;string&gt;();</span></span>
<span class="line"><span>List&lt;string&gt; ListB = new List&lt;string&gt;();</span></span>
<span class="line"><span>List&lt;string&gt; ListResult = new List&lt;string&gt;();</span></span>
<span class="line"><span>ListResult = ListA.Distinct().ToList();//去重</span></span>
<span class="line"><span>ListResult = ListA.Except(ListB).ToList();//差集</span></span>
<span class="line"><span>ListResult= ListA.Union(ListB).ToList(); //并集</span></span>
<span class="line"><span>ListResult = ListA.Intersect(ListB).ToList();//交集</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),l=[a];function r(d,p){return s(),e("div",null,l)}const g=i(n,[["render",r],["__file","jiaojiebingji.html.vue"]]),o=JSON.parse('{"path":"/dotnet/csharp/linq/jiaojiebingji.html","title":"交接并集","lang":"zh-CN","frontmatter":{"title":"交接并集","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"jiaojiebingji","slug":"zwfziu","docsId":"30978864","description":"Distinct、Union、Concat、Intersect、Except、Skip、Take、SkipWhile、TakeWhile、Single、SingleOrDefault、Reverse、SelectMany,Aggregate() Distinct - 过滤集合中的相同项； 得到的结果就是；1,2,3,4,5,6 Union - 连接不同...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/linq/jiaojiebingji.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"交接并集"}],["meta",{"property":"og:description","content":"Distinct、Union、Concat、Intersect、Except、Skip、Take、SkipWhile、TakeWhile、Single、SingleOrDefault、Reverse、SelectMany,Aggregate() Distinct - 过滤集合中的相同项； 得到的结果就是；1,2,3,4,5,6 Union - 连接不同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T08:40:25.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-02T08:40:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"交接并集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-02T08:40:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1700232644000,"updatedTime":1717317625000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"dotnet/csharp/linq/jiaojiebingji.md","localizedDate":"2023年10月22日","excerpt":"<p>Distinct、Union、Concat、Intersect、Except、Skip、Take、SkipWhile、TakeWhile、Single、SingleOrDefault、Reverse、SelectMany,Aggregate()</p>\\n<p>Distinct - 过滤集合中的相同项；</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>List&lt;int&gt; list= new List&lt;int&gt;() {1,2,3,4,4,5,6,6 };</span></span>\\n<span class=\\"line\\"><span>var newlist=list.Distinct();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{g as comp,o as data};
