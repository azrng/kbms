import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,d as n}from"./app-BOMGqs3_.js";const a={},o=n('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>AOP是Aspect Oriented Programing的缩写，中文翻译为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是软件开发中的一个热点，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从面使得业务逻辑各部分之间的耦合度低，提高程序的可重用性，同时提高开发的效率。在运行时、动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。 举例：我们在两个类中，可能需要在每个方法中做日志，按照面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系。而不能将这些重复的代码统一起来。而AOP就是为了解决这个问题而生的。</p><h2 id="实现aop的两种方式" tabindex="-1"><a class="header-anchor" href="#实现aop的两种方式"><span>实现AOP的两种方式</span></a></h2><p>静态代理模式：就是在编译的时候，已经存在了代理类，运行时候直接调用的方式，通俗一点就是自己手动编写代理类的方式 <a href="https://www.yuque.com/docs/share/da43a930-ceb1-43b7-bd0a-ac4a2eda5220?view=doc_embed" target="_blank" rel="noopener noreferrer">代理模式</a> 动态代理，也叫做运行时代理，在程序的运行过程中，调用了生成代理列的代码，将自动生成业务类的代理类，不需要手动编写。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>动态代理简单讲解：<a href="https://www.cnblogs.com/duanjt/p/9441587.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/duanjt/p/9441587.html</a> Asp.Net Core 3.1 使用Autofac Aop   <a href="https://www.cnblogs.com/dazen/p/12273018.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/dazen/p/12273018.html</a> c#进阶AOP <a href="https://www.cnblogs.com/landeanfen/p/4782370.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/landeanfen/p/4782370.html</a> [AOP系列]Autofac+Castle实现AOP事务 <a href="https://www.cnblogs.com/jianxuanbing/p/7199457.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/jianxuanbing/p/7199457.html</a><a href="https://www.cnblogs.com/7tiny/p/9657451.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/7tiny/p/9657451.html</a> | AOP从静态代理到动态代理 Emit实现 - 7tiny - 博客园 <a href="https://mp.weixin.qq.com/s/xF1LNon-4P0Xwar-Bd7C4Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/xF1LNon-4P0Xwar-Bd7C4Q</a> | .Net IL Emit 实现Aop面向切面之动态代理 案例版 <a href="https://mp.weixin.qq.com/s/qytJcqaemMnfiMDYRAPDTA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qytJcqaemMnfiMDYRAPDTA</a> | Castle DynamicProxy 动态代理-异步方法代理 <a href="https://mp.weixin.qq.com/s/oQZ8YzAAWCKnJj4tVkiIZw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/oQZ8YzAAWCKnJj4tVkiIZw</a> | C#动态方法拦截(AOP）的5种解决方案！</p>',6),p=[o];function i(c,l){return r(),t("div",null,p)}const h=e(a,[["render",i],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/dotnet/aop/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-10-15T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"readme","slug":"qgzcuc","docsId":"29634950","description":"概述 AOP是Aspect Oriented Programing的缩写，中文翻译为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是软件开发中的一个热点，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从面使得业务逻辑各部分之间的耦合度低，提高程序的可重用性，同时提高开发的效率。在运行时、动态地...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/aop/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 AOP是Aspect Oriented Programing的缩写，中文翻译为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是软件开发中的一个热点，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从面使得业务逻辑各部分之间的耦合度低，提高程序的可重用性，同时提高开发的效率。在运行时、动态地..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现AOP的两种方式","slug":"实现aop的两种方式","link":"#实现aop的两种方式","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"dotnet/aop/readme.md","localizedDate":"2023年10月15日","excerpt":"<h2>概述</h2>\\n<p>AOP是Aspect Oriented Programing的缩写，中文翻译为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是软件开发中的一个热点，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从面使得业务逻辑各部分之间的耦合度低，提高程序的可重用性，同时提高开发的效率。在运行时、动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。\\n举例：我们在两个类中，可能需要在每个方法中做日志，按照面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系。而不能将这些重复的代码统一起来。而AOP就是为了解决这个问题而生的。</p>","autoDesc":true}');export{h as comp,d as data};
