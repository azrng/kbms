import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as l}from"./app-Bfb6-vFH.js";const i="/kbms/common/1624418893458-a4e8fab5-f0bb-4fbb-8d5d-461e1f7345e5.png",u="/kbms/common/1624418907711-415efac6-f678-453e-98a7-806a68ab9d74.png",k="/kbms/common/1626361260794-c0bdc2b5-29b0-4e64-aece-4e141a736115.png",r="/kbms/common/1626361407501-4360e155-c4ef-4937-89a2-3fb016a6043f.png",d="/kbms/common/1626361717877-a4833c49-ba52-4250-8139-2e26c6c23980.png",m="/kbms/common/1626361717336-2575d3e2-c402-421e-a595-b9c0a3915672.png",b="/kbms/common/1626361717314-cfc0f4af-9e5a-48a6-beec-bd84ec317cb5.png",g={},v=l('<h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>本文内容大多转载自博客园的作者：农码一生 ，文章已授权。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>LINQ(语言集成查询)是一系列直接将查询功能集成到c#语言的技术统称。 Lambda表达式是一个匿名函数，c#中的表达式都使用lambda运算法=&gt;,用在基于方法的linq查询中，作为类似where和where等标准查询运算符方法的参数。</p><p><img src="'+i+'" alt="" loading="lazy"> 由此可见Linq表达式和Lambda表达式并没有什么可比性。 那与Lambda表达式相关的整条语句称作什么呢？在微软并没有给出官方的命名，在《深入理解C#》中称为点标记。 <img src="'+u+`" alt="" loading="lazy"></p><h2 id="查询表达式和点标记" tabindex="-1"><a class="header-anchor" href="#查询表达式和点标记"><span>查询表达式和点标记</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token comment">//查询表达式</span>
 <span class="token class-name"><span class="token keyword">var</span></span> students1 <span class="token operator">=</span> <span class="token keyword">from</span> t <span class="token keyword">in</span> db<span class="token punctuation">.</span>Students
                <span class="token keyword">where</span> <span class="token class-name">t</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span>
                <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> t<span class="token punctuation">.</span>Age <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token comment">//点标记</span>
 <span class="token class-name"><span class="token keyword">var</span></span> students2 <span class="token operator">=</span> db<span class="token punctuation">.</span>Students
                 <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> t<span class="token punctuation">.</span>Age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="点标记" tabindex="-1"><a class="header-anchor" href="#点标记"><span>点标记</span></a></h2><h5 id="_1、所有的查询表达式都可以转成对应的点标记。反之-不是所有的点标记都可以转成查询表达式。" tabindex="-1"><a class="header-anchor" href="#_1、所有的查询表达式都可以转成对应的点标记。反之-不是所有的点标记都可以转成查询表达式。"><span>1、所有的查询表达式都可以转成对应的点标记。反之，不是所有的点标记都可以转成查询表达式。</span></a></h5><p>为什么？因为查询表达式在编译后就直接变成了点标记：（以下是上面两个语句对应的编译后的反编译C#代码） <img src="`+k+`" alt="" loading="lazy"> 生成了一模一样的代码。（由于是编译后的，好多乱七八糟的代码。我们只看Where和Select关键字就知道，使用的都是点标记。）</p><h5 id="_2、点标记比查询表达式更加优雅" tabindex="-1"><a class="header-anchor" href="#_2、点标记比查询表达式更加优雅"><span>2、点标记比查询表达式更加优雅</span></a></h5><p>示例一：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//查询表达式</span>
 <span class="token class-name"><span class="token keyword">var</span></span> students1 <span class="token operator">=</span> <span class="token keyword">from</span> t <span class="token keyword">in</span> db<span class="token punctuation">.</span>Students
                 <span class="token keyword">where</span> <span class="token class-name">t</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span>
                 <span class="token keyword">select</span> t<span class="token punctuation">;</span>
 <span class="token comment">//点标记</span>
 <span class="token class-name"><span class="token keyword">var</span></span> students2 <span class="token operator">=</span> db<span class="token punctuation">.</span>Students
                 <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我为什么一定要 select t 啊，不能省吗？省了就报错： <img src="`+r+`" alt="" loading="lazy"> 示例二： 必须需要括号包裹起来才能取结果集</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//查询表达式</span>
<span class="token class-name"><span class="token keyword">var</span></span> students1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> t <span class="token keyword">in</span> db<span class="token punctuation">.</span>Students
                 <span class="token keyword">where</span> <span class="token class-name">t</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span>
                 <span class="token keyword">select</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//点标记</span>
<span class="token class-name"><span class="token keyword">var</span></span> students2 <span class="token operator">=</span> db<span class="token punctuation">.</span>Students
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例三： （为什么说：&quot;不是所有的点标记都可以转成查询表达式&quot;【此例只适用于IEnumerator】） 此条点标记你能转成查询表达式吗？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> students2 <span class="token operator">=</span> list
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">==</span> <span class="token string">&quot;张三&quot;</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> item<span class="token punctuation">,</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询表达式你能Reverse吗？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&quot;张三1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四9&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> students2 <span class="token operator">=</span> list
             <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> item<span class="token punctuation">,</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//反序</span>
             <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ListA<span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去重</span>
ListA<span class="token punctuation">.</span><span class="token function">Except</span><span class="token punctuation">(</span>ListB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差集</span>
ListA<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>ListB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//并集</span>
ListA<span class="token punctuation">.</span><span class="token function">Intersect</span><span class="token punctuation">(</span>ListB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交集</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询表达式" tabindex="-1"><a class="header-anchor" href="#查询表达式"><span>查询表达式</span></a></h2><p>比如下面几种情况我们就可以选择使用查询表达式： 示例一：（本例适用于Linq to Object 和 没有建主外键的EF查询） 点标记中的Join需要传四个参数表达式，是不是有点晕了。。。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//查询表达式</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj1 <span class="token operator">=</span> <span class="token keyword">from</span> l1 <span class="token keyword">in</span> list1
           <span class="token keyword">join</span> l2 <span class="token keyword">in</span> list2
           <span class="token keyword">on</span> l1<span class="token punctuation">.</span>Key equals l2<span class="token punctuation">.</span>Key
           <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//点标记</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> l1 <span class="token operator">=&gt;</span> l1<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> l2 <span class="token operator">=&gt;</span> l2<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例二： 点标记需要区分OrderBy、ThenBy有没有觉得麻烦</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//查询表达式</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj1 <span class="token operator">=</span> <span class="token keyword">from</span> l1 <span class="token keyword">in</span> list1
           <span class="token keyword">join</span> l2 <span class="token keyword">in</span> list2
           <span class="token keyword">on</span> l1<span class="token punctuation">.</span>Key equals l2<span class="token punctuation">.</span>Key
           <span class="token keyword">orderby</span> l1<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>Key <span class="token keyword">descending</span>
           <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//点标记</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> l1 <span class="token operator">=&gt;</span> l1<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> l2 <span class="token operator">=&gt;</span> l2<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> l1<span class="token punctuation">,</span> l2 <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>li <span class="token operator">=&gt;</span> li<span class="token punctuation">.</span>l1<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>li <span class="token operator">=&gt;</span> li<span class="token punctuation">.</span>l2<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>l1<span class="token punctuation">,</span> t<span class="token punctuation">.</span>l2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="联接查询" tabindex="-1"><a class="header-anchor" href="#联接查询"><span>联接查询</span></a></h2><p>关于联接查询使用查询表达式会更合适一些这个上面已经说了。 接下来我们写内联、左联、交叉联的查询表达式和对应的点标记代码。 <strong>内联</strong>： <img src="`+d+'" alt="" loading="lazy"><strong>左联：</strong><img src="'+m+'" alt="" loading="lazy"><strong>交叉联：</strong><img src="'+b+'" alt="" loading="lazy"><strong>其实关于联接查询，如果EF建好了主外键我还是觉得点标记用起来更爽爽的。</strong></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><blockquote><p>1.所有的查询表达式都可以转成对应的点标记。 2.点标记比查询表达式更加简洁。</p></blockquote><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>',30),h={href:"https://www.cnblogs.com/zhaopei/p/5746414.html",target:"_blank",rel:"noopener noreferrer"};function q(y,f){const a=p("ExternalLinkIcon");return e(),o("div",null,[v,n("blockquote",null,[n("p",null,[s("摘抄地址："),n("a",h,[s("https://www.cnblogs.com/zhaopei/p/5746414.html"),c(a)])])])])}const _=t(g,[["render",q],["__file","linqhelambdaduibi.html.vue"]]),x=JSON.parse('{"path":"/dotnet/csharp/linq/linqhelambdaduibi.html","title":"Linq和Lambda对比","lang":"zh-CN","frontmatter":{"title":"Linq和Lambda对比","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"linqhelambdaduibi","slug":"afnhqc","docsId":"47638545","description":"开篇语 本文内容大多转载自博客园的作者：农码一生 ，文章已授权。 介绍 LINQ(语言集成查询)是一系列直接将查询功能集成到c#语言的技术统称。 Lambda表达式是一个匿名函数，c#中的表达式都使用lambda运算法=>,用在基于方法的linq查询中，作为类似where和where等标准查询运算符方法的参数。 由此可见Linq表达式和Lambda表达...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/linq/linqhelambdaduibi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Linq和Lambda对比"}],["meta",{"property":"og:description","content":"开篇语 本文内容大多转载自博客园的作者：农码一生 ，文章已授权。 介绍 LINQ(语言集成查询)是一系列直接将查询功能集成到c#语言的技术统称。 Lambda表达式是一个匿名函数，c#中的表达式都使用lambda运算法=>,用在基于方法的linq查询中，作为类似where和where等标准查询运算符方法的参数。 由此可见Linq表达式和Lambda表达..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1624418893458-a4e8fab5-f0bb-4fbb-8d5d-461e1f7345e5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linq和Lambda对比\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1624418893458-a4e8fab5-f0bb-4fbb-8d5d-461e1f7345e5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624418907711-415efac6-f678-453e-98a7-806a68ab9d74.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626361260794-c0bdc2b5-29b0-4e64-aece-4e141a736115.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626361407501-4360e155-c4ef-4937-89a2-3fb016a6043f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626361717877-a4833c49-ba52-4250-8139-2e26c6c23980.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626361717336-2575d3e2-c402-421e-a595-b9c0a3915672.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626361717314-cfc0f4af-9e5a-48a6-beec-bd84ec317cb5.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"查询表达式和点标记","slug":"查询表达式和点标记","link":"#查询表达式和点标记","children":[]},{"level":2,"title":"点标记","slug":"点标记","link":"#点标记","children":[{"level":5,"title":"1、所有的查询表达式都可以转成对应的点标记。反之，不是所有的点标记都可以转成查询表达式。","slug":"_1、所有的查询表达式都可以转成对应的点标记。反之-不是所有的点标记都可以转成查询表达式。","link":"#_1、所有的查询表达式都可以转成对应的点标记。反之-不是所有的点标记都可以转成查询表达式。","children":[]},{"level":5,"title":"2、点标记比查询表达式更加优雅","slug":"_2、点标记比查询表达式更加优雅","link":"#_2、点标记比查询表达式更加优雅","children":[]}]},{"level":2,"title":"查询表达式","slug":"查询表达式","link":"#查询表达式","children":[]},{"level":2,"title":"联接查询","slug":"联接查询","link":"#联接查询","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.66,"words":1097},"filePathRelative":"dotnet/csharp/linq/linqhelambdaduibi.md","localizedDate":"2023年10月22日","excerpt":"<h2>开篇语</h2>\\n<p>本文内容大多转载自博客园的作者：农码一生 ，文章已授权。</p>\\n<h2>介绍</h2>\\n<p>LINQ(语言集成查询)是一系列直接将查询功能集成到c#语言的技术统称。\\nLambda表达式是一个匿名函数，c#中的表达式都使用lambda运算法=&gt;,用在基于方法的linq查询中，作为类似where和where等标准查询运算符方法的参数。</p>\\n<p><img src=\\"/common/1624418893458-a4e8fab5-f0bb-4fbb-8d5d-461e1f7345e5.png\\" alt=\\"\\" loading=\\"lazy\\">\\n由此可见Linq表达式和Lambda表达式并没有什么可比性。\\n那与Lambda表达式相关的整条语句称作什么呢？在微软并没有给出官方的命名，在《深入理解C#》中称为点标记。\\n<img src=\\"/common/1624418907711-415efac6-f678-453e-98a7-806a68ab9d74.png\\" alt=\\"\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{_ as comp,x as data};
