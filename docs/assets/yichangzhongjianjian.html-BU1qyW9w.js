import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<p>一些开发者在action中使用try-catch代码块，这种方法明显没有任何问题，但是我们希望action尽量保持简洁。因为此我们从action中删除try-catch，并将其放在一个集中的地方会是一个更好的方式，netcore中为我们提供了一种处理全局异常的方式，只需要稍加修改，就可以使用内置且完善的中间件。通过创建自定义的中间件来实现我们的自定义异常处理。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 异常中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExceptionMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomExceptionMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CustomExceptionMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;系统出错&quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">HandleExceptionAsync</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HandleExceptionAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">WriteExceptionAsync</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteExceptionAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//返回友好的提示</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">;</span>

        <span class="token comment">//状态码</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token class-name">UnauthorizedAccessException</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">;</span>

        response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//可以用来验证比如说是否在头部传递了token，验证token是否有效</span>

        response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> <span class="token string">&quot;系统异常&quot;</span><span class="token punctuation">,</span> IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装中间件的使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">UseCustomExceptionMiddleware</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IApplicationBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomExceptionMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseCustomExceptionMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","yichangzhongjianjian.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/zhongjianjian/tazhan/yichangzhongjianjian.html","title":"异常中间件","lang":"zh-CN","frontmatter":{"title":"异常中间件","lang":"zh-CN","date":"2023-09-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"yichangzhongjianjian","slug":"ybg0gz","docsId":"30054036","description":"一些开发者在action中使用try-catch代码块，这种方法明显没有任何问题，但是我们希望action尽量保持简洁。因为此我们从action中删除try-catch，并将其放在一个集中的地方会是一个更好的方式，netcore中为我们提供了一种处理全局异常的方式，只需要稍加修改，就可以使用内置且完善的中间件。通过创建自定义的中间件来实现我们的自定义异...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/zhongjianjian/tazhan/yichangzhongjianjian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"异常中间件"}],["meta",{"property":"og:description","content":"一些开发者在action中使用try-catch代码块，这种方法明显没有任何问题，但是我们希望action尽量保持简洁。因为此我们从action中删除try-catch，并将其放在一个集中的地方会是一个更好的方式，netcore中为我们提供了一种处理全局异常的方式，只需要稍加修改，就可以使用内置且完善的中间件。通过创建自定义的中间件来实现我们的自定义异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常中间件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.18,"words":355},"filePathRelative":"dotnet/base/zhongjianjian/tazhan/yichangzhongjianjian.md","localizedDate":"2023年9月14日","excerpt":"<p>一些开发者在action中使用try-catch代码块，这种方法明显没有任何问题，但是我们希望action尽量保持简洁。因为此我们从action中删除try-catch，并将其放在一个集中的地方会是一个更好的方式，netcore中为我们提供了一种处理全局异常的方式，只需要稍加修改，就可以使用内置且完善的中间件。通过创建自定义的中间件来实现我们的自定义异常处理。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 异常中间件</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CustomExceptionMiddleware</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">RequestDelegate</span> _next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>CustomExceptionMiddleware<span class=\\"token punctuation\\">&gt;</span></span> _logger<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">CustomExceptionMiddleware</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestDelegate</span> next<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>CustomExceptionMiddleware<span class=\\"token punctuation\\">&gt;</span></span> logger<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        _next <span class=\\"token operator\\">=</span> next<span class=\\"token punctuation\\">;</span>\\n        _logger <span class=\\"token operator\\">=</span> logger<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> httpContext<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>httpContext<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogError</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"系统出错\\"</span> <span class=\\"token operator\\">+</span> ex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">HandleExceptionAsync</span><span class=\\"token punctuation\\">(</span>httpContext<span class=\\"token punctuation\\">,</span> ex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">HandleExceptionAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> httpContext<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ex <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">WriteExceptionAsync</span><span class=\\"token punctuation\\">(</span>httpContext<span class=\\"token punctuation\\">,</span> ex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">WriteExceptionAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> context<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Exception</span> exception<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//返回友好的提示</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> response <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">//状态码</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>exception <span class=\\"token keyword\\">is</span> <span class=\\"token class-name\\">UnauthorizedAccessException</span><span class=\\"token punctuation\\">)</span>\\n            response<span class=\\"token punctuation\\">.</span>StatusCode <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>Unauthorized<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>exception <span class=\\"token keyword\\">is</span> <span class=\\"token class-name\\">Exception</span><span class=\\"token punctuation\\">)</span>\\n            response<span class=\\"token punctuation\\">.</span>StatusCode <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>BadRequest<span class=\\"token punctuation\\">;</span>\\n\\n        response<span class=\\"token punctuation\\">.</span>ContentType <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"token\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//可以用来验证比如说是否在头部传递了token，验证token是否有效</span>\\n\\n        response<span class=\\"token punctuation\\">.</span>ContentType <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"application/json\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ResultModel</span> <span class=\\"token punctuation\\">{</span> Message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"系统异常\\"</span><span class=\\"token punctuation\\">,</span> IsSuccess <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">await</span> response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span>JsonConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SerializeObject</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
