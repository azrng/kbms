import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,b as o}from"./app-DMmdIwn0.js";const n={},a=o('<h2 id="什么是ioc" tabindex="-1"><a class="header-anchor" href="#什么是ioc"><span>什么是IOC？</span></a></h2><p>控制反转英文翻译是Inversion Of Control缩写为IOC，<strong>控制反转是一种笼统的思想</strong>，并不是一种具体的实现技巧，调用方通过依赖接口或者抽象类，减少耦合将控制权交给服务容器，由容器维护注册项，并将具体的实现动态注入到调用方，而依赖注入是一种设计模式。<strong>通过工厂去创建对象</strong>。</p><p>“控制”：对程序执行流程的控制。 “反转”：流程的控制权发生了反转，比如在没有使用框架之前，程序员自己控制整个程序的执行，在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p><h3 id="使用控制反转前后对比" tabindex="-1"><a class="header-anchor" href="#使用控制反转前后对比"><span>使用控制反转前后对比</span></a></h3><p>把“我创建对象”变成“我要对象”</p><p>1.软件系统在没有引入IOC容器前，对象A依赖对象B，那么对象A在初始化或者运行到某一点的时候，自己必须要主动去创建独享B或者使用已经创建的对象B，无论是创建还是使用对象B，控制权对在自己手上。 2.软件系统在引入IOC容器后，就变成了对象A和对象B之间失去了直接的联系，所以当对象A运行到需要对象B的时候，IOC容器会主动创建爱你一个对象B注入到对象A需要的地方。</p><blockquote><p>总结：对象A获取对象B的过程，由主动变成被动的过程，控制权颠倒了，这就是控制反转。</p></blockquote><h2 id="什么是容器" tabindex="-1"><a class="header-anchor" href="#什么是容器"><span>什么是容器？</span></a></h2><p>集合：list、set、字典都可以作为容器</p><h2 id="什么是ioc容器" tabindex="-1"><a class="header-anchor" href="#什么是ioc容器"><span>什么是IOC容器？</span></a></h2><p>工厂里面创建的对象放到里面。</p><h3 id="ioc容器功能" tabindex="-1"><a class="header-anchor" href="#ioc容器功能"><span>IOC容器功能</span></a></h3><ul><li>创建对象</li><li>存储对象，DI依赖注入</li><li>对象属性赋值</li></ul>',13),r=[a];function c(l,s){return t(),i("div",null,r)}const d=e(n,[["render",c],["__file","iockongzhifanzhuai.html.vue"]]),g=JSON.parse('{"path":"/dotnet/base/yilaizhuru/iockongzhifanzhuai/iockongzhifanzhuai.html","title":"IOC控制反转","lang":"zh-CN","frontmatter":{"title":"IOC控制反转","lang":"zh-CN","date":"2022-11-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"iockongzhifanzhuai","slug":"fho45c","docsId":"29987969","description":"什么是IOC？ 控制反转英文翻译是Inversion Of Control缩写为IOC，控制反转是一种笼统的思想，并不是一种具体的实现技巧，调用方通过依赖接口或者抽象类，减少耦合将控制权交给服务容器，由容器维护注册项，并将具体的实现动态注入到调用方，而依赖注入是一种设计模式。通过工厂去创建对象。 “控制”：对程序执行流程的控制。 “反转”：流程的控制权...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/iockongzhifanzhuai/iockongzhifanzhuai.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"IOC控制反转"}],["meta",{"property":"og:description","content":"什么是IOC？ 控制反转英文翻译是Inversion Of Control缩写为IOC，控制反转是一种笼统的思想，并不是一种具体的实现技巧，调用方通过依赖接口或者抽象类，减少耦合将控制权交给服务容器，由容器维护注册项，并将具体的实现动态注入到调用方，而依赖注入是一种设计模式。通过工厂去创建对象。 “控制”：对程序执行流程的控制。 “反转”：流程的控制权..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-11-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC控制反转\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"什么是IOC？","slug":"什么是ioc","link":"#什么是ioc","children":[{"level":3,"title":"使用控制反转前后对比","slug":"使用控制反转前后对比","link":"#使用控制反转前后对比","children":[]}]},{"level":2,"title":"什么是容器？","slug":"什么是容器","link":"#什么是容器","children":[]},{"level":2,"title":"什么是IOC容器？","slug":"什么是ioc容器","link":"#什么是ioc容器","children":[{"level":3,"title":"IOC容器功能","slug":"ioc容器功能","link":"#ioc容器功能","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"dotnet/base/yilaizhuru/iockongzhifanzhuai/iockongzhifanzhuai.md","localizedDate":"2022年11月20日","excerpt":"<h2>什么是IOC？</h2>\\n<p>控制反转英文翻译是Inversion Of Control缩写为IOC，<strong>控制反转是一种笼统的思想</strong>，并不是一种具体的实现技巧，调用方通过依赖接口或者抽象类，减少耦合将控制权交给服务容器，由容器维护注册项，并将具体的实现动态注入到调用方，而依赖注入是一种设计模式。<strong>通过工厂去创建对象</strong>。</p>\\n<p>“控制”：对程序执行流程的控制。\\n“反转”：流程的控制权发生了反转，比如在没有使用框架之前，程序员自己控制整个程序的执行，在使用框架之后，整个程序的执行流程通过框架来控制。流程的控制权从程序员“反转”给了框架。</p>","autoDesc":true}');export{d as comp,g as data};
