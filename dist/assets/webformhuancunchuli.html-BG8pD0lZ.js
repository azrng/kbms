import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,b as a,d as c,e as i}from"./app-vSdX8vi3.js";const l={},u=i(`<p>第一种缓存： 服务器端缓存  在ASP.NET中页面缓存的使用方法非常的简单，只需要在aspx页的顶部加这样一句声明即可：     &lt;%@ OutputCache Duration=&quot;60&quot; VaryByParam=&quot;none&quot; %&gt;       Duration：缓存时间，单位是s；      VaryByParam：分号分隔的字符串列表，用于使输出缓存发生变化。默认情况下，这些字符串对应于使用 GET 方法特性发送的查询字符串值，或者使用 POST 方法发送的参数。将该特性设置为多个参数时，对于每个指定参数组合，输出缓存都包含一个不同版本的请求文档。 <strong>varyByParam=&quot;none&quot;</strong> 当 VaryByParam 设置为 none 时，将不考虑任何参数；无论提供什么附加参数，都将向所有用户发送相同的页：  **VaryByParam =“*”**对于每个唯一的请求参数组合，将缓存一个唯一页 第二种缓存 客户端缓存 从cache中获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">DataTable</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Cache<span class="token punctuation">[</span><span class="token string">&quot;Keys&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> connstring <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>ConnectionStrings<span class="token punctuation">[</span><span class="token string">&quot;DefaultConnection&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ConnectionString<span class="token punctuation">;</span>
                <span class="token class-name">SqlConnection</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>connstring<span class="token punctuation">)</span><span class="token punctuation">;</span>
                conn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;select top 100000 * from SF_InstanceActivity&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name">SqlDataAdapter</span> da <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlDataAdapter</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                da<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Go get the data from the database</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token string">&quot;Keys&quot;</span><span class="token punctuation">,</span> dt<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
               dt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Cache<span class="token punctuation">[</span><span class="token string">&quot;Keys&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">DataTable</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ASPxGridView1<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> dt<span class="token punctuation">;</span>
            ASPxGridView1<span class="token punctuation">.</span><span class="token function">DataBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),r={href:"https://www.cnblogs.com/Gxiaopan/p/4187204.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=e("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[a("参考文章："),n("a",r,[a("https://www.cnblogs.com/Gxiaopan/p/4187204.html"),c(s)])])])}const v=t(l,[["render",k],["__file","webformhuancunchuli.html.vue"]]),g=JSON.parse('{"path":"/dotnet/webyingyong/webform/webformhuancunchuli.html","title":"WebForm缓存处理","lang":"zh-CN","frontmatter":{"title":"WebForm缓存处理","lang":"zh-CN","date":"2021-02-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"webformhuancunchuli","slug":"oyvelu","docsId":"31541436","description":"第一种缓存： 服务器端缓存 在ASP.NET中页面缓存的使用方法非常的简单，只需要在aspx页的顶部加这样一句声明即可： <%@ OutputCache Duration=\\"60\\" VaryByParam=\\"none\\" %> Duration：缓存时间，单位是s； VaryByParam：分号分隔的字符串列表，用于使输出缓存发生变化。默认情况下，这些字...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/webyingyong/webform/webformhuancunchuli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"WebForm缓存处理"}],["meta",{"property":"og:description","content":"第一种缓存： 服务器端缓存 在ASP.NET中页面缓存的使用方法非常的简单，只需要在aspx页的顶部加这样一句声明即可： <%@ OutputCache Duration=\\"60\\" VaryByParam=\\"none\\" %> Duration：缓存时间，单位是s； VaryByParam：分号分隔的字符串列表，用于使输出缓存发生变化。默认情况下，这些字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-02-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebForm缓存处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.14,"words":341},"filePathRelative":"dotnet/webyingyong/webform/webformhuancunchuli.md","localizedDate":"2021年2月17日","excerpt":"<p>第一种缓存：\\n服务器端缓存&nbsp; 在ASP.NET中页面缓存的使用方法非常的简单，只需要在aspx页的顶部加这样一句声明即可：\\n&nbsp;&nbsp;&nbsp; &lt;%@ OutputCache Duration=\\"60\\" VaryByParam=\\"none\\" %&gt;&nbsp;\\n&nbsp;&nbsp;&nbsp;&nbsp; Duration：缓存时间，单位是s；\\n&nbsp;&nbsp;&nbsp;&nbsp; VaryByParam：分号分隔的字符串列表，用于使输出缓存发生变化。默认情况下，这些字符串对应于使用 GET 方法特性发送的查询字符串值，或者使用 POST 方法发送的参数。将该特性设置为多个参数时，对于每个指定参数组合，输出缓存都包含一个不同版本的请求文档。\\n<strong>varyByParam=\\"none\\"</strong>&nbsp;当&nbsp;VaryByParam 设置为&nbsp;none 时，将不考虑任何参数；无论提供什么附加参数，都将向所有用户发送相同的页：\\n&nbsp;**VaryByParam =“*”**对于每个唯一的请求参数组合，将缓存一个唯一页\\n第二种缓存\\n客户端缓存 从cache中获取</p>","autoDesc":true}');export{v as comp,g as data};
