import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-vSdX8vi3.js";const t="/kbms/common/1656734552242-9019b076-f2f7-482c-a638-5d5be3caeeba.png",p={},i=e(`<p>redis目前的订阅发布采用的是发送即忘策略，如果你的程序需要可靠性的事件通知，那么键空间通知可能就不适合你；当订阅事件的客户端断线时候，它就会丢失所有短线期间分给他的事件，并不能确保消息送达。</p><h2 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型"><span>事件类型</span></a></h2><p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>事件是用  __keyspace@DB__:KeyPattern 或者  __keyevent@DB__:OpsType 的格式来发布消息的。
DB表示在第几个库；KeyPattern则是表示需要监控的键模式（可以用通配符，如：__key*__:*）；OpsType则表示操作类型。因此，如果想要订阅特殊的Key上的事件，应该是订阅keyspace。
比如说，对 0 号数据库的键 mykey 执行 DEL 命令时， 系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令：
PUBLISH __keyspace@0__:sampleKey del
PUBLISH __keyevent@0__:del sampleKey
订阅第一个频道 __keyspace@0__:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件， 而订阅第二个频道 __keyevent@0__:del 则可以接收 0 号数据库中所有执行 del 命令的键。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开启配置" tabindex="-1"><a class="header-anchor" href="#开启配置"><span>开启配置</span></a></h2><p>键空间通知通常是不启用的，因为这个过程会产生额外消耗。所以在使用该特性之前，请确认一定是要用这个特性的，然后修改配置文件，或使用config配置。相关配置项如下：</p><table><thead><tr><th>字符</th><th>发送通知</th></tr></thead><tbody><tr><td>K</td><td>键空间通知，所有通知以 keyspace@ 为前缀，针对Key</td></tr><tr><td>E</td><td>键事件通知，所有通知以 keyevent@ 为前缀，针对event</td></tr><tr><td><em>g</em></td><td><em>DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</em></td></tr><tr><td>$</td><td>字符串命令的通知</td></tr><tr><td>l</td><td>列表命令的通知</td></tr><tr><td>s</td><td>集合命令的通知</td></tr><tr><td>h</td><td>哈希命令的通知</td></tr><tr><td>z</td><td>有序集合命令的通知</td></tr><tr><td><em>x</em></td><td><em>过期事件：每当有过期键被删除时发送</em></td></tr><tr><td><em>e</em></td><td><em>驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</em></td></tr><tr><td>A</td><td>参数 g$lshzxe 的别名，相当于是All</td></tr></tbody></table><p>输入的参数中至少要有一个 K 或者 E ， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发。上表中斜体的部分为通用的操作或者事件，而黑体则表示特定数据类型的操作。配置文件中修改 notify-keyspace-events “Kx”，注意：这个双引号是一定要的，否则配置不成功，启动也不报错。例如，“Kx”表示想监控某个Key的失效事件。 也可以通过config配置：CONFIG set notify-keyspace-events Ex （但非持久化）</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Redis 使用以下两种方式删除过期的键：
1.当一个键被访问时，程序会对这个键进行检查，如果键已经过期，那么该键将被删除。
2.底层系统会在后台查找并删除那些过期的键，从而处理那些已经过期、但是不会被访问到的键。
当过期键被以上两个程序的任意一个发现、 并且将键从数据库中删除时， Redis 会产生一个 expired 通知。
Redis 并不保证生存时间（TTL）变为 0 的键会立即被删除： 如果程序没有访问这个过期键， 或者带有生存时间的键非常多的话， 那么在键的生存时间变为 0 ， 直到键真正被删除这中间， 可能会有一段比较显著的时间间隔。
因此， Redis 产生 expired 通知的时间为过期键被删除的时候， 而不是键的生存时间变为 0 的时候。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于通知收到的是redis key，value已经过期，无法收到，所以需要在key上标记业务数据。</p><h2 id="事件订阅" tabindex="-1"><a class="header-anchor" href="#事件订阅"><span>事件订阅</span></a></h2><h3 id="过期事件" tabindex="-1"><a class="header-anchor" href="#过期事件"><span>过期事件</span></a></h3><p>需要修改配置启用过期事件，比如在windows客户端中，需要修改redis.windows.conf文件,在linux中需要修改redis.conf，修改内容是： <img src="`+t+`" alt="image.png" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-- 取消注释
notify-keyspace-events Ex

-- 注释
#notify-keyspace-events &quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新启动服务器，比如windows</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> .\\redis-server.exe  .\\redis.windows.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者linux中使用docker-compose重新部署redis</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  redis<span class="token punctuation">:</span>  #内存数据库服务
    container_name<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    image<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    hostname<span class="token punctuation">:</span> <span class="token class-name">redis</span>
    restart<span class="token punctuation">:</span> <span class="token class-name">always</span>
    ports<span class="token punctuation">:</span> 
      <span class="token operator">-</span> <span class="token string">&quot;6379:6379&quot;</span>
    volumes<span class="token punctuation">:</span> 
      <span class="token operator">-</span> $PWD<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf
      <span class="token operator">-</span> <span class="token operator">/</span>root<span class="token operator">/</span>common<span class="token operator">-</span>docker<span class="token operator">-</span>compose<span class="token operator">/</span>redis<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span><span class="token class-name">data</span>
    command<span class="token punctuation">:</span> 
      <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token operator">-</span>c <span class="token string">&quot;redis-server /etc/redis.conf&quot;</span> <span class="token preprocessor property">#启动执行指定的redis.conf文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用客户端订阅事件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-- windows
.\\redis-cli
 
-- linux
docker exec -it 容器标识 redis-cli
 
psubscribe __keyevent@0__:expired
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="控制台订阅" tabindex="-1"><a class="header-anchor" href="#控制台订阅"><span>控制台订阅</span></a></h4><p>使用StackExchange.Redis组件订阅过期事件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> connectionMultiplexer <span class="token operator">=</span> ConnectionMultiplexer<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>_redisConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> connectionMultiplexer<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span><span class="token function">StringSet</span><span class="token punctuation">(</span><span class="token string">&quot;orderno:123456&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;订单创建&quot;</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;开始订阅&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> subscriber <span class="token operator">=</span> connectionMultiplexer<span class="token punctuation">.</span><span class="token function">GetSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//订阅库0的过期通知事件</span>
subscriber<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;__keyevent@0__:expired&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key过期 channel:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">channel</span><span class="token punctuation">}</span></span><span class="token string"> key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果： key过期 channel:<strong>keyevent@0</strong>:expired key:orderno:123456</p><blockquote><p>如果启动多个客户端监听，那么多个客户端都可以收到过期事件。</p></blockquote><h4 id="webapi中订阅" tabindex="-1"><a class="header-anchor" href="#webapi中订阅"><span>WebApi中订阅</span></a></h4><p>创建RedisListenService继承自：BackgroundService</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisListenService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ISubscriber</span> _subscriber<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RedisListenService</span><span class="token punctuation">(</span><span class="token class-name">IServiceScopeFactory</span> serviceScopeFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> serviceScopeFactory<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConfiguration<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> connectionMultiplexer <span class="token operator">=</span> ConnectionMultiplexer<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">[</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> connectionMultiplexer<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _subscriber <span class="token operator">=</span> connectionMultiplexer<span class="token punctuation">.</span><span class="token function">GetSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//订阅库0的过期通知事件</span>
        _subscriber<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;__keyevent@0__:expired&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key过期 channel:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">channel</span><span class="token punctuation">}</span></span><span class="token string"> key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册该后台服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedisListenService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启用项目，给redis指定库设置值，等过期后会接收到过期通知事件。</p>`,31),c=[i];function o(l,r){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","redisfabudingyue.html.vue"]]),v=JSON.parse('{"path":"/dataBase/redis/redisfabudingyue.html","title":"redis发布订阅","lang":"zh-CN","frontmatter":{"title":"redis发布订阅","lang":"zh-CN","date":"2023-06-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"redisfabudingyue","slug":"rrbkle","docsId":"47227880","description":"redis目前的订阅发布采用的是发送即忘策略，如果你的程序需要可靠性的事件通知，那么键空间通知可能就不适合你；当订阅事件的客户端断线时候，它就会丢失所有短线期间分给他的事件，并不能确保消息送达。 事件类型 对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/redis/redisfabudingyue.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"redis发布订阅"}],["meta",{"property":"og:description","content":"redis目前的订阅发布采用的是发送即忘策略，如果你的程序需要可靠性的事件通知，那么键空间通知可能就不适合你；当订阅事件的客户端断线时候，它就会丢失所有短线期间分给他的事件，并不能确保消息送达。 事件类型 对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1656734552242-9019b076-f2f7-482c-a638-5d5be3caeeba.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis发布订阅\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1656734552242-9019b076-f2f7-482c-a638-5d5be3caeeba.png\\"],\\"datePublished\\":\\"2023-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"事件类型","slug":"事件类型","link":"#事件类型","children":[]},{"level":2,"title":"开启配置","slug":"开启配置","link":"#开启配置","children":[]},{"level":2,"title":"事件订阅","slug":"事件订阅","link":"#事件订阅","children":[{"level":3,"title":"过期事件","slug":"过期事件","link":"#过期事件","children":[{"level":4,"title":"控制台订阅","slug":"控制台订阅","link":"#控制台订阅","children":[]},{"level":4,"title":"WebApi中订阅","slug":"webapi中订阅","link":"#webapi中订阅","children":[]}]}]}],"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1428},"filePathRelative":"dataBase/redis/redisfabudingyue.md","localizedDate":"2023年6月25日","excerpt":"<p>redis目前的订阅发布采用的是发送即忘策略，如果你的程序需要可靠性的事件通知，那么键空间通知可能就不适合你；当订阅事件的客户端断线时候，它就会丢失所有短线期间分给他的事件，并不能确保消息送达。</p>\\n<h2>事件类型</h2>\\n<p>对于每个修改数据库的操作，键空间通知都会发送两种不同类型的事件消息：keyspace 和 keyevent。以 keyspace 为前缀的频道被称为键空间通知（key-space notification）， 而以 keyevent 为前缀的频道则被称为键事件通知（key-event notification）。</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>事件是用  __keyspace@DB__:KeyPattern 或者  __keyevent@DB__:OpsType 的格式来发布消息的。\\nDB表示在第几个库；KeyPattern则是表示需要监控的键模式（可以用通配符，如：__key*__:*）；OpsType则表示操作类型。因此，如果想要订阅特殊的Key上的事件，应该是订阅keyspace。\\n比如说，对 0 号数据库的键 mykey 执行 DEL 命令时， 系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令：\\nPUBLISH __keyspace@0__:sampleKey del\\nPUBLISH __keyevent@0__:del sampleKey\\n订阅第一个频道 __keyspace@0__:mykey 可以接收 0 号数据库中所有修改键 mykey 的事件， 而订阅第二个频道 __keyevent@0__:del 则可以接收 0 号数据库中所有执行 del 命令的键。\\n</code></pre></div>","autoDesc":true}');export{k as comp,v as data};
