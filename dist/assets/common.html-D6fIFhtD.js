import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as r,o as n}from"./app-B3EhLA94.js";const o="/kbms/common/1644500363642-6e1f64b2-41d1-4cbf-9039-4e1c41f81457.jpeg",i="/kbms/common/1625387586186-1e35110a-662d-48fe-b850-8506f631c92b.webp",s="/kbms/common/1625387610658-1140e524-c417-4e11-8942-858c0f3563a5.webp",c="/kbms/common/1625387671656-ad7c0d10-ef66-403f-8505-0a90d55b3777.webp",m={};function l(p,e){return n(),a("div",null,e[0]||(e[0]=[r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><img src="'+o+'" alt="" loading="lazy"><br> 加密算法的目的是：在于使得别人无法查看加密的数据，并且在需要的时候还可以对数据进行解密来重新查看数据。<br> 哈希算法的目的是：它在大多数情况下都是不可逆的，即时你通过哈希算法得到的数据，无法经过任何算法还原回去，使用场景之一是验证参数是否被修改。</p><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h2><h3 id="加密算法" tabindex="-1"><a class="header-anchor" href="#加密算法"><span>加密算法</span></a></h3><p><strong>加密</strong>：是以某种特殊的算法改变原有的信息，使得未授权的用户即使获得已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。<br><strong>解密</strong>：加密的逆过程为解密，即将该加密信息转化为其原来信息的过程。<br> 加密算法分为对称加密和非对称加密，其中对称加密算法的加解密密钥相同，非对称加解密的密钥不同。<br><img src="'+i+'" alt="" loading="lazy"></p><p>HTTPS就同时用到非对称加密和对称加密，在连接建立阶段，使用非对称加解密(保护密钥不被查看)， 在通信阶段使用对称密钥加解密数据。<br><img src="'+s+'" alt="" loading="lazy"></p><h2 id="摘要算法" tabindex="-1"><a class="header-anchor" href="#摘要算法"><span>摘要算法</span></a></h2><p>也叫做哈希算法，也叫做散列算法。通过一个函数，将任务长度的内容转换为一个固定长度的数据串。<br><img src="'+c+'" alt="" loading="lazy"><br> 摘要算法之所以能指出数据是否被篡改，就是因为摘要函数是一个单向函数，计算很容易，但通过摘要(digest) 反推data却非常困难，而且，对于原始数据做一个bit的修改，都会导致计算出的摘要完全不同。</p><h2 id="hmac" tabindex="-1"><a class="header-anchor" href="#hmac"><span>HMAC</span></a></h2><p>是一个结合了密钥和哈希功能的请求认证方案<br> 比如平时平常对接微信的时候，你会获取到一个apiid和serect key<br> 1.client和server都知道一个私钥 serect key<br> 2.客户端每次请求的时候，会针对(请求数据+serect key)生成一个hash值<br> HMAC = hashFunc(secret key + message)<br> 3.客户端将哈希值做为请求的一部分，一起发送<br> 4.当服务端收到请求， 对( 收到的请求+ 查到的Serectkey&#39;)生成哈希，将计算的哈希值与请求中附带的原哈希值对比，如果相同，则认定请求来自受信Client，且请求未被篡改。还可以考虑客户端生成hash值的时候加入时间戳，服务端接受后，先对比服务器时间戳和当前的时间戳，限制在多少秒内为有效访问，然后在将请求消息+serect key+时间戳生成哈希，对比哈希，避免重复攻击。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p>算法在线演示<br><a href="https://algorithm-visualizer.org/" target="_blank" rel="noopener noreferrer">https://algorithm-visualizer.org/</a></p>',12)]))}const g=t(m,[["render",l],["__file","common.html.vue"]]),b=JSON.parse('{"path":"/computerBasics/arithmetic/common.html","title":"常用算法","lang":"zh-CN","frontmatter":{"title":"常用算法","lang":"zh-CN","date":"2022-02-10T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["计算机基础"],"tag":["无"],"filename":"suanfa","slug":"xo2kxv","docsId":"29635135","description":"概述 加密算法的目的是：在于使得别人无法查看加密的数据，并且在需要的时候还可以对数据进行解密来重新查看数据。 哈希算法的目的是：它在大多数情况下都是不可逆的，即时你通过哈希算法得到的数据，无法经过任何算法还原回去，使用场景之一是验证参数是否被修改。 算法 加密算法 加密：是以某种特殊的算法改变原有的信息，使得未授权的用户即使获得已加密的信息，但因不知解...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/computerBasics/arithmetic/common.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"常用算法"}],["meta",{"property":"og:description","content":"概述 加密算法的目的是：在于使得别人无法查看加密的数据，并且在需要的时候还可以对数据进行解密来重新查看数据。 哈希算法的目的是：它在大多数情况下都是不可逆的，即时你通过哈希算法得到的数据，无法经过任何算法还原回去，使用场景之一是验证参数是否被修改。 算法 加密算法 加密：是以某种特殊的算法改变原有的信息，使得未授权的用户即使获得已加密的信息，但因不知解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1644500363642-6e1f64b2-41d1-4cbf-9039-4e1c41f81457.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T07:39:42.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T07:39:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用算法\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1644500363642-6e1f64b2-41d1-4cbf-9039-4e1c41f81457.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625387586186-1e35110a-662d-48fe-b850-8506f631c92b.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625387610658-1140e524-c417-4e11-8942-858c0f3563a5.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625387671656-ad7c0d10-ef66-403f-8505-0a90d55b3777.webp\\"],\\"datePublished\\":\\"2022-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-23T07:39:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[{"level":3,"title":"加密算法","slug":"加密算法","link":"#加密算法","children":[]}]},{"level":2,"title":"摘要算法","slug":"摘要算法","link":"#摘要算法","children":[]},{"level":2,"title":"HMAC","slug":"hmac","link":"#hmac","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1693755609000,"updatedTime":1711179582000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":2.51,"words":753},"filePathRelative":"computerBasics/arithmetic/common.md","localizedDate":"2022年2月10日","excerpt":"<h2>概述</h2>\\n<p><img src=\\"/common/1644500363642-6e1f64b2-41d1-4cbf-9039-4e1c41f81457.jpeg\\" alt=\\"\\" loading=\\"lazy\\"><br>\\n加密算法的目的是：在于使得别人无法查看加密的数据，并且在需要的时候还可以对数据进行解密来重新查看数据。<br>\\n哈希算法的目的是：它在大多数情况下都是不可逆的，即时你通过哈希算法得到的数据，无法经过任何算法还原回去，使用场景之一是验证参数是否被修改。</p>\\n<h2>算法</h2>\\n<h3>加密算法</h3>\\n<p><strong>加密</strong>：是以某种特殊的算法改变原有的信息，使得未授权的用户即使获得已加密的信息，但因不知解密的方法，仍然无法了解信息的内容。<br>\\n<strong>解密</strong>：加密的逆过程为解密，即将该加密信息转化为其原来信息的过程。<br>\\n加密算法分为对称加密和非对称加密，其中对称加密算法的加解密密钥相同，非对称加解密的密钥不同。<br>\\n<img src=\\"/common/1625387586186-1e35110a-662d-48fe-b850-8506f631c92b.webp\\" alt=\\"\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{g as comp,b as data};
