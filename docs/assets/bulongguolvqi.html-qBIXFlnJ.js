import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,d as n,e as t,b as l}from"./app-Bw62I61B.js";const i="/kbms/common/1689591811182-3e16ee57-5b6f-424e-8ca6-79d91dfc4989.webp",u="/kbms/common/1689591110549-1334fa91-0e58-43ba-a462-865609c16316.png",r={},k=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>一个非常节省空间的概率数据结构，运行速度快、占用内存小，但是有一定的误判率且无法删除元素。 本质上由一个位数组(每个元素都只占用1bit)和n个哈希函数组成。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>检查一个元素是否在集成中；</li><li>检查结果分为2种：一定不在集合中、可能在集合中；</li><li>布隆过滤器支持添加元素、检查元素，但是不支持删除元素；</li><li>检查结果的“可能在集合中”说明存在一定误判率； <ul><li>已经添加进入布隆过滤器的元素是不会被误判的，仅未添加过的元素才可能被误判；</li></ul></li><li>添加的元素超过预设容量越多，误报的可能性越大。</li></ul><h2 id="处理场景" tabindex="-1"><a class="header-anchor" href="#处理场景"><span>处理场景</span></a></h2><ul><li>当请求不存在的值的时候，缓存又不会被命中(缓存穿透)，所以导致大量请求直接到数据库，这个时候在中间加一个布隆过滤器，允许存在(可能存在)的数据去查询数据库，屏蔽不可能存在的查询值。</li><li>在业务系统中用来判断用户是否阅读过某一些文章或者视频，比如内容推荐，会导致一定的误判，但是不会让用户看到重复的内容</li><li>黑名单：比如在邮件系统中使用布隆过滤器来设置黑名单，判断邮件地址是否在黑名单中</li></ul><h2 id="实现过程" tabindex="-1"><a class="header-anchor" href="#实现过程"><span>实现过程</span></a></h2><p>实现并不是将具体的数据存储在数组中，而是通过hash函数对要存储的数据进行多次hash运算，并且将hash运算后的结果作为位数组的下标，然后将对应的数组元素修改为1。 <img src="'+i+'" alt="" loading="lazy"> 从上图中可以看到，我们有三个hash函数（h1()、h2()、h3()）和一个位数组，oracle经过三个hash函数，得到第1、4、5位为1，database同理得到2、5、10位1，这样如果我们需要判断oracle是否在此位数组中，则通过hash函数判断位数组的1、4、5位是否均为1，如果均为1，则判断oracle在此位数组中，database同理。这就是布隆过滤器判断元素是否在集合中的原理。</p><p>但是如果我们现在要判断&quot;mysql&quot;是否存在，例如它通过三次hash运算得到的值分别是4,5,10。现在即使你的位数中没有存储“mysql”,布隆过滤器也会判断它存在。这是因为&quot;oracle&quot;、&quot;database&quot;、&quot;filter&quot;算出的hash值已经导致上面的三个位置的值被改为了1，这样就会导致误判。但是可以保证的是，如果<strong>布隆过滤器判断一个元素不在一个集合中，那这个元素一定不会再集合中。</strong></p><p>正式使用中就是，将需要判断是否存在的数据库标识列作为上面示例的输入集合，将值经过哈希计算后标注到数组中，然后来了新的值后，就可以通过布隆过滤器来判断该值是否存在，过滤到绝大多数的非法请求。</p><p>在缓存之前预热一个布隆过滤器，然后就可以阻止绝大部分非法的查询请求。(查询请求到达的时候先去布隆过滤器中判断值是否存在，如果值存在那么再去缓存中取，取不到再去数据库中查询) <img src="'+u+`" alt="image.png" loading="lazy"></p><p>关于为啥要使用多个哈希函数？经过一次哈希函数落在指定标记点，只能说明该值有可能属于输入的集合(哈希碰撞)，但是经过多个哈希函数，还是落到标记的点，概率叠加，增加了属于输入集合的概率。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h3 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1"><span>示例1</span></a></h3><p>操作示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 设置过滤器的大小和哈希函数个数来控制误判率</span>
<span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BloomFilter</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
filter<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
filter<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BloomFilter内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilter</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 过滤的位数组</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">BitArray</span> filter<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> hashSeeds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">BloomFilter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> size<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> numHashes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BitArray</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hashSeeds <span class="token operator">=</span> <span class="token function">GenerateHashSeeds</span><span class="token punctuation">(</span>numHashes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> hashes <span class="token operator">=</span> <span class="token function">GetHashes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token keyword">in</span> hashes<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            filter<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Contains</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> hashes <span class="token operator">=</span> <span class="token function">GetHashes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token keyword">in</span> hashes<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filter<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetHashes</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> item<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> hashes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>hashSeeds<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hashSeeds<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            hashes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetHash</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> hashSeeds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> hashes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> item<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> seed<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> seed<span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> item<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">*</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 生成哈希函数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>numHashes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GenerateHashSeeds</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> numHashes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> seeds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>numHashes<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            seeds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> seeds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-成熟组件" tabindex="-1"><a class="header-anchor" href="#示例2-成熟组件"><span>示例2(成熟组件)</span></a></h3><p>布隆过滤器的误报率跟哈希碰撞和有几个哈希函数有关，不过成熟的组件都不需要考虑这些，只需要指定哈希结果存储区、容量、误报率。</p><table><thead><tr><th>包名</th><th>介绍</th></tr></thead><tbody><tr><td>BloomFilter.NetCore</td><td>以内存存储哈希结果</td></tr><tr><td>BloomFilter.Redis.NetCore</td><td>以redis存储哈希结果</td></tr><tr><td>BloomFilter.CSRedis.NetCore</td><td>通过csredis去操作redis存储哈希结果</td></tr><tr><td>BloomFilter.EasyCaching.NetCore</td><td></td></tr></tbody></table><p>以内存中的布隆过滤器为例，安装</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;BloomFilter.NetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.1.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写测试代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 布隆过滤器配置 key：容量、误报率0.01</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">IBloomFilter</span> bloomFilter <span class="token operator">=</span> FilterBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token number">10_000_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 内存</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InMemoryBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义初始集合，填充到布隆过滤器中</span>
    <span class="token class-name"><span class="token keyword">var</span></span> size <span class="token operator">=</span> <span class="token number">10_000_000</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 故意取100个不在布隆过滤器中的值，看下有多少值误报</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;误报的个数为：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">list<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p>优点</p><ul><li>所占空间小(并不存储真正的数据)，空间效率高</li><li>查询时间短</li></ul><p>缺点</p><ul><li>元素添加到数组后，不能被删除</li><li>有一定的误判率</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>布隆过滤器是哈希函数单向收敛(将输入数据通过哈希函数转换为固定长度的哈希值时，很难逆向推导出原始输入数据)和概率论的完美结合。</p><p>但是布隆过滤器对删除不友好，所以当数据库中有大量的键变更的时候，需要重建布隆过滤器或者定时来进行重建操作。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,34),d={href:"https://www.cnblogs.com/JulianHuang/p/14923059.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zhuanlan.zhihu.com/p/575025944",target:"_blank",rel:"noopener noreferrer"};function v(h,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[k,s("p",null,[s("a",d,[n("https://www.cnblogs.com/JulianHuang/p/14923059.html"),t(a)]),n(" | 难缠的布隆过滤器，这次终于通透了 - 博客猿马甲哥 - 博客园 "),s("a",m,[n("https://zhuanlan.zhihu.com/p/575025944"),t(a)]),n(" | 防缓存穿透利器-布隆滤器(BloomFilter) - 知乎")])])}const w=e(r,[["render",v],["__file","bulongguolvqi.html.vue"]]),f=JSON.parse('{"path":"/dotnet/csharp/bulongguolvqi.html","title":"布隆过滤器","lang":"zh-CN","frontmatter":{"title":"布隆过滤器","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"bulongguolvqi","slug":"ryzdfqdobr2wd93d","docsId":"133123002","description":"概述 一个非常节省空间的概率数据结构，运行速度快、占用内存小，但是有一定的误判率且无法删除元素。 本质上由一个位数组(每个元素都只占用1bit)和n个哈希函数组成。 特性 检查一个元素是否在集成中； 检查结果分为2种：一定不在集合中、可能在集合中； 布隆过滤器支持添加元素、检查元素，但是不支持删除元素； 检查结果的“可能在集合中”说明存在一定误判率； ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/bulongguolvqi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"布隆过滤器"}],["meta",{"property":"og:description","content":"概述 一个非常节省空间的概率数据结构，运行速度快、占用内存小，但是有一定的误判率且无法删除元素。 本质上由一个位数组(每个元素都只占用1bit)和n个哈希函数组成。 特性 检查一个元素是否在集成中； 检查结果分为2种：一定不在集合中、可能在集合中； 布隆过滤器支持添加元素、检查元素，但是不支持删除元素； 检查结果的“可能在集合中”说明存在一定误判率； ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1689591811182-3e16ee57-5b6f-424e-8ca6-79d91dfc4989.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"布隆过滤器\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1689591811182-3e16ee57-5b6f-424e-8ca6-79d91dfc4989.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1689591110549-1334fa91-0e58-43ba-a462-865609c16316.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"处理场景","slug":"处理场景","link":"#处理场景","children":[]},{"level":2,"title":"实现过程","slug":"实现过程","link":"#实现过程","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"示例1","slug":"示例1","link":"#示例1","children":[]},{"level":3,"title":"示例2(成熟组件)","slug":"示例2-成熟组件","link":"#示例2-成熟组件","children":[]}]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.66,"words":1699},"filePathRelative":"dotnet/csharp/bulongguolvqi.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>一个非常节省空间的概率数据结构，运行速度快、占用内存小，但是有一定的误判率且无法删除元素。\\n本质上由一个位数组(每个元素都只占用1bit)和n个哈希函数组成。</p>\\n<h2>特性</h2>\\n<ul>\\n<li>检查一个元素是否在集成中；</li>\\n<li>检查结果分为2种：一定不在集合中、可能在集合中；</li>\\n<li>布隆过滤器支持添加元素、检查元素，但是不支持删除元素；</li>\\n<li>检查结果的“可能在集合中”说明存在一定误判率；\\n<ul>\\n<li>已经添加进入布隆过滤器的元素是不会被误判的，仅未添加过的元素才可能被误判；</li>\\n</ul>\\n</li>\\n<li>添加的元素超过预设容量越多，误报的可能性越大。</li>\\n</ul>","autoDesc":true}');export{w as comp,f as data};
