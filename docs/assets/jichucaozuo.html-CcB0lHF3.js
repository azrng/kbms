import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-CBxp4zeL.js";const p="/kbms/common/1686925031712-f32b6597-3814-4a4f-8e55-c0e1738f0c5e.png",e="/kbms/common/1686925116079-f265e2bd-6fd4-4251-8e1b-7f4e3f3b66ad.png",o="/kbms/common/1686925135731-908374ab-cd6d-492d-9067-d4232541c0ee.png",c="/kbms/common/1686925150520-3be1b66b-78e0-4d63-a019-2a686f3152fa.png",l={},i=t(`<h2 id="main函数" tabindex="-1"><a class="header-anchor" href="#main函数"><span>Main函数</span></a></h2><h3 id="入参出参" tabindex="-1"><a class="header-anchor" href="#入参出参"><span>入参出参</span></a></h3><p>在Main方法内接收参数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">STAThread</span></span><span class="token punctuation">]</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Main方法中收到的参数：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ApplicationConfiguration<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用Enviroment.CommandLine属性和GetCommandLineArgs方法来接收，属性会用空格来区分多个参数，方法返回值就是一个string[]，与Main中args不一样的是，这里多一个应用运行所在的路径</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> args <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">GetCommandLineArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    label1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;主程序：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">,\\r\\n\\r\\n参数：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token range operator">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="窗体" tabindex="-1"><a class="header-anchor" href="#窗体"><span>窗体</span></a></h2><h3 id="无边框窗体" tabindex="-1"><a class="header-anchor" href="#无边框窗体"><span>无边框窗体</span></a></h3><p>设置主窗体的FormBorderStyle为none，然后就得到了无边框的窗体，然后在修改Mouse_Down事件，去实现窗体随意拖动</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Index_MouseDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">MouseEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ReleaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Handle<span class="token punctuation">,</span> WM_SYSCOMMAND<span class="token punctuation">,</span> SC_MOVE <span class="token operator">+</span> HTCAPTION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ReleaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hwnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> wMsg<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> wParam<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> WM_SYSCOMMAND <span class="token operator">=</span> <span class="token number">0x0112</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> SC_MOVE <span class="token operator">=</span> <span class="token number">0xF010</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> HTCAPTION <span class="token operator">=</span> <span class="token number">0x0002</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局"><span>布局</span></a></h2><p><strong>容器控件</strong> 有一组控件叫容器控件，对布局特别有作用，它们分别是：<strong>TableLayoutPanel</strong>：表格布局面板，每个单元格都可以用来作为其他控件的载体，通过设置行或列的是一个以行和列的大小型来确定每个单元格所占的大小 <strong>FlowLayoutPanel</strong>：流式布局面板，按照放上去的控件的顺序来依次呈现控件，可以通过修改FlowDirection来改烃排布的方向 <strong>Panel</strong>：普通的面板 <strong>SplitContainer</strong>：分隔面板，可以上下，或左右来布局这两个面板 <strong>TabControl</strong>：是半隐藏式的多面板容器控件，可以通过切换tab来显示对应的面板 <strong>GroupBox</strong>：分组面板，给面板加了一个标题 它们是作为其他控件的载体，用来形成一组，或一个区域的母板。</p><p><strong>布局属性</strong><strong>Anchor</strong>：锚定属性，设置一个控件边缘锚定状态，默认为左上锚定 <strong>Dock</strong>：依靠属性，设置控件本身靠父容器控件的那个边缘依靠</p><p><strong>Pading</strong>：控件本身内的控件距离边缘的距离</p><p><strong>Migrain</strong>：距离周边控件的距离</p><p><strong>AutoSize</strong>：是否是自动适应大于 <strong>AutoSizeMode</strong>：当AutoSize=true时有效，是控件的自动适应大小的模式，有只增的，有又增又减的</p><h2 id="控件" tabindex="-1"><a class="header-anchor" href="#控件"><span>控件</span></a></h2><h3 id="文本框" tabindex="-1"><a class="header-anchor" href="#文本框"><span>文本框</span></a></h3><ul><li>Cursor：Cursors.WaitCursor、Cursors.IBeam</li><li></li></ul><h4 id="输入校验" tabindex="-1"><a class="header-anchor" href="#输入校验"><span>输入校验</span></a></h4><p>编写KeyPass触发事件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">txtC_KeyPress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyPressEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">txtKeyPress</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">txtKeyPress</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyPressEventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyChar <span class="token operator">==</span> <span class="token number">0x20</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span>KeyChar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//禁止空格键  </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyChar <span class="token operator">==</span> <span class="token number">0x2D</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token comment">//处理负数  </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>KeyChar <span class="token operator">&gt;</span> <span class="token number">0x20</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TextBox<span class="token punctuation">)</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span>Text <span class="token operator">+</span> e<span class="token punctuation">.</span>KeyChar<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span>
        <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span>KeyChar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//处理非法字符  </span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtA<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtB<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txtC<span class="token punctuation">.</span>Text<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;直线方程参数不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="radiobutton" tabindex="-1"><a class="header-anchor" href="#radiobutton"><span>RadioButton</span></a></h3><h4 id="选择判断事件" tabindex="-1"><a class="header-anchor" href="#选择判断事件"><span>选择判断事件</span></a></h4><p>radioButton按钮中都添加同一个click事件,然后根据下面的代码判断具体点击了哪一个，在执行其逻辑</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// radiobutton按钮事件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>e<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">radioButtonMirrorLightClick</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//把object类型，赋值为当前按下的控件</span>
    <span class="token class-name">RadioButton</span> radioButtonClick <span class="token operator">=</span> sender <span class="token keyword">as</span> <span class="token class-name">RadioButton</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>radioButtonClick<span class="token punctuation">.</span>Checked<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>radioButtonClick<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;radioButtonMirrorLight1&quot;</span><span class="token punctuation">:</span>
                <span class="token function">ChangeRadiobutton</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>

            <span class="token keyword">case</span> <span class="token string">&quot;radioButtonMirrorLight2&quot;</span><span class="token punctuation">:</span>
                <span class="token function">ChangeRadiobutton</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;radioButtonMirrorLight3&quot;</span><span class="token punctuation">:</span>
                <span class="token function">ChangeRadiobutton</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>

            <span class="token keyword">case</span> <span class="token string">&quot;radioButtonMirrorLight4&quot;</span><span class="token punctuation">:</span>
                <span class="token function">ChangeRadiobutton</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>

            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datetimepicker" tabindex="-1"><a class="header-anchor" href="#datetimepicker"><span>DateTimePicker</span></a></h3><h4 id="自定义格式" tabindex="-1"><a class="header-anchor" href="#自定义格式"><span>自定义格式</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dtpBirthday<span class="token punctuation">.</span>Format <span class="token operator">=</span> DateTimePickerFormat<span class="token punctuation">.</span>Custom<span class="token punctuation">;</span>
dtpBirthday<span class="token punctuation">.</span>CustomFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="combobox" tabindex="-1"><a class="header-anchor" href="#combobox"><span>ComboBox</span></a></h3><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><ul><li>DropDownStyle：DropDownList(禁止输入，只能下拉选择)</li></ul><h4 id="添加默认项" tabindex="-1"><a class="header-anchor" href="#添加默认项"><span>添加默认项</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>cmbCreatePatientInfo<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> defaultDict<span class="token punctuation">.</span><span class="token function">GetPatientInfoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 增加请选择下拉框</span>
patientInfo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetNameCodeInfoDto</span><span class="token punctuation">(</span><span class="token string">&quot;请选择&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cmbCreatePatientInfo<span class="token punctuation">.</span>DisplayMember <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">;</span>
cmbCreatePatientInfo<span class="token punctuation">.</span>ValueMember <span class="token operator">=</span> <span class="token string">&quot;Code&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4><p>SelectedIndexChanged 选择项索引更改事件</p><h3 id="progressbar" tabindex="-1"><a class="header-anchor" href="#progressbar"><span>ProgressBar</span></a></h3><p>有人反映winform的进度条设置BackColor和ForeColor属性，不会产生效果，进度条颜色不会变。通过重写ProgressBar的OnePaint方法来改变它的颜色（前景色和背景色）。在此我们有如下代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Drawing</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> 界面美化
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">MyProgressBar</span><span class="token punctuation">:</span><span class="token type-list"><span class="token class-name">ProgressBar</span></span> <span class="token comment">//新建一个MyProgressBar类，它继承了ProgressBar的所有属性与方法</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">MyProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SetStyle</span><span class="token punctuation">(</span>ControlStyles<span class="token punctuation">.</span>UserPaint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使控件可由用户自由重绘</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPaint</span><span class="token punctuation">(</span><span class="token class-name">PaintEventArgs</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">SolidBrush</span> brush <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">Rectangle</span> bounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Width<span class="token punctuation">,</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>BackColor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>Width <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>Height <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处完成背景重绘，并且按照属性中的BackColor设置背景色</span>
            bounds<span class="token punctuation">.</span>Height <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            bounds<span class="token punctuation">.</span>Width <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>Width <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token keyword">base</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token keyword">base</span><span class="token punctuation">.</span>Maximum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//是的进度条跟着ProgressBar.Value值变化</span>
            brush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolidBrush</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ForeColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span>Graphics<span class="token punctuation">.</span><span class="token function">FillRectangle</span><span class="token punctuation">(</span>brush<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处完成前景重绘，依旧按照Progressbar的属性设置前景色</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以上步骤之后，我们如何在界面中插入自己的进度条呢？\`\`我们可以先插入一个winform自带的ProgressBar，调整好位置，ForeColor，BackColor属性，然后进入窗体的Designer程序中做如下修改：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//private System.Windows.Forms.ProgressBar progressBar1;//注释此句</span>
<span class="token keyword">private</span> <span class="token class-name">MyProgressBar</span> progressBar1<span class="token punctuation">;</span> <span class="token comment">//新添此句，添加新的控件MyProgressBar</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//this.progressBar1 = new System.Windows.Forms.ProgressBar();//注释此句</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>progressBar1 <span class="token operator">=</span> <span class="token keyword">new</span> 界面美化<span class="token punctuation">.</span><span class="token function">MyProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新添此句，此处对MyPorgressBar实例化</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SuspendLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>progressBar1<span class="token punctuation">.</span>Location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>progressBar1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;progressBar1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>progressBar1<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>progressBar1<span class="token punctuation">.</span>TabIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datagridview" tabindex="-1"><a class="header-anchor" href="#datagridview"><span>DataGridView</span></a></h3><h4 id="绑定datatable" tabindex="-1"><a class="header-anchor" href="#绑定datatable"><span>绑定DataTable</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Number&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;ProjectCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dt<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;LabResult&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> response<span class="token punctuation">.</span>Contained<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> obs <span class="token operator">=</span> item <span class="token keyword">as</span> <span class="token class-name">Observation</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> number <span class="token operator">=</span> obs<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> projectCode <span class="token operator">=</span> obs<span class="token punctuation">.</span>Code<span class="token punctuation">.</span>Coding<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Code <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> labResult <span class="token operator">=</span> <span class="token punctuation">(</span>obs<span class="token punctuation">.</span>Value <span class="token keyword">as</span> <span class="token class-name">Quantity</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>

    dt<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> projectCode<span class="token punctuation">,</span> labResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
dgvUpdateList<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> dt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的绑定界面上可以直接新建行。</p><h4 id="绑定集合后操作" tabindex="-1"><a class="header-anchor" href="#绑定集合后操作"><span>绑定集合后操作</span></a></h4><p>如果你是DataGridView绑定的数据源是集合，那么就需要增加一个控件ContextMenuStrip，并绑定到DataGridView上，然后ContextMenuStrip上增加添加点击按钮，在按钮事件上添加</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> myDataTable <span class="token operator">=</span> <span class="token punctuation">(</span>DataTable<span class="token punctuation">)</span>dgvUpdateList<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token comment">// 创建新行并设置值</span>
<span class="token class-name">DataRow</span> newRow <span class="token operator">=</span> myDataTable<span class="token punctuation">.</span><span class="token function">NewRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//newRow[&quot;Number&quot;] = &quot;Value1&quot;;</span>
<span class="token doc-comment comment">////newRow[&quot;ProjectCode&quot;] = &quot;Value2&quot;;</span>
<span class="token comment">//newRow[&quot;LabResult&quot;] = &quot;aaa&quot;;</span>

<span class="token comment">// 添加新行到表中</span>
myDataTable<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 重新绑定DataGridView以反映更改</span>
dgvUpdateList<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
dgvUpdateList<span class="token punctuation">.</span>DataSource <span class="token operator">=</span> myDataTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加删除按钮，按钮点击事件操作如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">int</span></span> nCounts <span class="token operator">=</span> dgvUpdateList<span class="token punctuation">.</span>SelectedRows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> nCounts <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dgvUpdateList<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>dgvUpdateList<span class="token punctuation">.</span>SelectedRows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="savefiledialog" tabindex="-1"><a class="header-anchor" href="#savefiledialog"><span>SaveFileDialog</span></a></h3><p>上传文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">SaveFileDialog</span> saveDia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SaveFileDialog</span>
<span class="token punctuation">{</span>
    Filter <span class="token operator">=</span> doc<span class="token punctuation">.</span>Filter<span class="token punctuation">,</span>
    Title <span class="token operator">=</span> <span class="token string">&quot;另存文件为&quot;</span><span class="token punctuation">,</span>
    CheckPathExists <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    AddExtension <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    AutoUpgradeEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    DefaultExt <span class="token operator">=</span> doc<span class="token punctuation">.</span>Ext<span class="token punctuation">,</span>
    InitialDirectory <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">GetFolderPath</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>SpecialFolder<span class="token punctuation">.</span>Desktop<span class="token punctuation">)</span><span class="token punctuation">,</span>
    OverwritePrompt <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    ValidateNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    FileName <span class="token operator">=</span> doc<span class="token punctuation">.</span>Dto<span class="token punctuation">.</span>DBName <span class="token operator">+</span> <span class="token string">&quot;表结构信息&quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span>Ext
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> diaResult <span class="token operator">=</span> saveDia<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>diaResult <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">try</span>
	<span class="token punctuation">{</span>
		doc<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>saveDia<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		LogFactory<span class="token punctuation">.</span><span class="token function">WriteErrorLog</span><span class="token punctuation">(</span><span class="token string">&quot;tsbBuild_Click&quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span>Message <span class="token operator">+</span> <span class="token string">&quot;  &quot;</span> <span class="token operator">+</span> saveDia<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息" tabindex="-1"><a class="header-anchor" href="#消息"><span>消息</span></a></h3><h4 id="notifyicon" tabindex="-1"><a class="header-anchor" href="#notifyicon"><span>NotifyIcon</span></a></h4><p>消息通知的图标显示在右下角</p><h5 id="设置右下角消息上下文" tabindex="-1"><a class="header-anchor" href="#设置右下角消息上下文"><span>设置右下角消息上下文</span></a></h5><p>从左边拉取一个消息图标控件，然后设置属性中Icon图标已经文本名称。 <img src="`+p+'" alt="image.png" loading="lazy"> 如果需要设置右键上下文菜单，那么就需要拉取一个ContextMenuStrip控件，然后在该控件上添加菜单项 <img src="'+e+'" alt="image.png" loading="lazy"> 最后设置消息通知的控件上下文为刚才的上下文控件即可 <img src="'+o+'" alt="image.png" loading="lazy"> 效果如下 <img src="'+c+`" alt="image.png" loading="lazy"></p><h2 id="弹框" tabindex="-1"><a class="header-anchor" href="#弹框"><span>弹框</span></a></h2><p>最基础的弹框</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;修改成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>带确定按钮的弹框</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">DialogResult</span> dr <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">&quot;你确定要删除吗？&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span> MessageBoxButtons<span class="token punctuation">.</span>OKCancel<span class="token punctuation">,</span> MessageBoxIcon<span class="token punctuation">.</span>Question<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dr <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>弹框显示其他窗体并且在确定后再回来</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dbForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DBForm</span><span class="token punctuation">(</span>OPType<span class="token punctuation">.</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> dia <span class="token operator">=</span> dbForm<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dia <span class="token operator">==</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">RefreshListView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//在弹出的页面设置</span>
BtnOk<span class="token punctuation">.</span>DialogResult <span class="token operator">=</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件-1" tabindex="-1"><a class="header-anchor" href="#事件-1"><span>事件</span></a></h2><p><strong>Load事件</strong>：发生在构造函数后，Shown事件前，这个事件的生命周期内，窗体是不可视化的。 <strong>Shown事件</strong>：当窗体发生前窗体有轮廓画出，事件结束后整个窗体渲染完并显示。 <strong>FormClosing事件</strong>：当窗体关闭过程中触发，因为是中间过程，还有机会挽救，事件订阅方法的第二个参数是FormClosingEventArgs，它有一个Cancel属性，如果设置成true，窗体就停止关闭后续步骤，继续显示。 <strong>FormClosed事件</strong>：窗体关闭后触发，不过这个事件走完后窗体才消失，这个事件订阅方法的第二个参数是FormClosedEventArgs，它有一个CloseReason的属性，说明了窗体关闭的原因，是枚举类型。 <strong>Show方法</strong>：以非模态方式显示窗体，意思就是显示出来的窗体与其他可视窗体可以切换操作，非模态窗体关闭后，就会释放。 <strong>ShowDialog方法</strong>：以模态方式显示窗体，会阻塞之前显示的窗体，独占进程内的输入设置焦点。 <strong>Hide方法</strong>：隐藏当前窗体，可以通过Show或ShowDialog再次显示出来。 <strong>Close方法</strong>：关闭当前窗体，会触发Close的相关事件。</p><h2 id="show" tabindex="-1"><a class="header-anchor" href="#show"><span>Show</span></a></h2><p>show是非模式窗体，showDialog是模式窗体，区别在于以showDialog()打开的窗体,要等窗体关闭后才能操作其他窗体.而show()则不受此限制. 示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Form2</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           
<span class="token class-name">Form3</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj3<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>form2和form3可以层叠显示，如果改用showDialog</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Form2</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           
obj<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>DialogResult <span class="token operator">=</span> DialogResult<span class="token punctuation">.</span>OK<span class="token punctuation">;</span>
<span class="token class-name">Form3</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Form3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj3<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当form2被关闭后，form3才会显示出来。</p><h2 id="鼠标" tabindex="-1"><a class="header-anchor" href="#鼠标"><span>鼠标</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 鼠标相对屏幕左上角的坐标</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Control<span class="token punctuation">.</span>MousePosition<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//this.Location：窗体左上角相对于屏左上角的坐标；</span>
<span class="token comment">//System.Windows.Forms.Cursor.Position：鼠标相对于屏左上角的坐标，等同于Control.MousePosition</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75),u=[i];function r(k,d){return s(),a("div",null,u)}const b=n(l,[["render",r],["__file","jichucaozuo.html.vue"]]),g=JSON.parse(`{"path":"/dotnet/zhuomianchengxu/winform/jichuzhishi/jichucaozuo.html","title":"基础操作","lang":"zh-CN","frontmatter":{"title":"基础操作","lang":"zh-CN","date":"2023-07-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jichucaozuo","slug":"tq70k72dow4htxuh","docsId":"122951452","description":"Main函数 入参出参 在Main方法内接收参数 用Enviroment.CommandLine属性和GetCommandLineArgs方法来接收，属性会用空格来区分多个参数，方法返回值就是一个string[]，与Main中args不一样的是，这里多一个应用运行所在的路径 窗体 无边框窗体 设置主窗体的FormBorderStyle为none，然后就...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/zhuomianchengxu/winform/jichuzhishi/jichucaozuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基础操作"}],["meta",{"property":"og:description","content":"Main函数 入参出参 在Main方法内接收参数 用Enviroment.CommandLine属性和GetCommandLineArgs方法来接收，属性会用空格来区分多个参数，方法返回值就是一个string[]，与Main中args不一样的是，这里多一个应用运行所在的路径 窗体 无边框窗体 设置主窗体的FormBorderStyle为none，然后就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1686925031712-f32b6597-3814-4a4f-8e55-c0e1738f0c5e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础操作\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1686925031712-f32b6597-3814-4a4f-8e55-c0e1738f0c5e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1686925116079-f265e2bd-6fd4-4251-8e1b-7f4e3f3b66ad.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1686925135731-908374ab-cd6d-492d-9067-d4232541c0ee.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1686925150520-3be1b66b-78e0-4d63-a019-2a686f3152fa.png\\"],\\"datePublished\\":\\"2023-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"Main函数","slug":"main函数","link":"#main函数","children":[{"level":3,"title":"入参出参","slug":"入参出参","link":"#入参出参","children":[]}]},{"level":2,"title":"窗体","slug":"窗体","link":"#窗体","children":[{"level":3,"title":"无边框窗体","slug":"无边框窗体","link":"#无边框窗体","children":[]}]},{"level":2,"title":"布局","slug":"布局","link":"#布局","children":[]},{"level":2,"title":"控件","slug":"控件","link":"#控件","children":[{"level":3,"title":"文本框","slug":"文本框","link":"#文本框","children":[{"level":4,"title":"输入校验","slug":"输入校验","link":"#输入校验","children":[]}]},{"level":3,"title":"RadioButton","slug":"radiobutton","link":"#radiobutton","children":[{"level":4,"title":"选择判断事件","slug":"选择判断事件","link":"#选择判断事件","children":[]}]},{"level":3,"title":"DateTimePicker","slug":"datetimepicker","link":"#datetimepicker","children":[{"level":4,"title":"自定义格式","slug":"自定义格式","link":"#自定义格式","children":[]}]},{"level":3,"title":"ComboBox","slug":"combobox","link":"#combobox","children":[{"level":4,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":4,"title":"添加默认项","slug":"添加默认项","link":"#添加默认项","children":[]},{"level":4,"title":"事件","slug":"事件","link":"#事件","children":[]}]},{"level":3,"title":"ProgressBar","slug":"progressbar","link":"#progressbar","children":[]},{"level":3,"title":"DataGridView","slug":"datagridview","link":"#datagridview","children":[{"level":4,"title":"绑定DataTable","slug":"绑定datatable","link":"#绑定datatable","children":[]},{"level":4,"title":"绑定集合后操作","slug":"绑定集合后操作","link":"#绑定集合后操作","children":[]}]},{"level":3,"title":"SaveFileDialog","slug":"savefiledialog","link":"#savefiledialog","children":[]},{"level":3,"title":"消息","slug":"消息","link":"#消息","children":[{"level":4,"title":"NotifyIcon","slug":"notifyicon","link":"#notifyicon","children":[{"level":5,"title":"设置右下角消息上下文","slug":"设置右下角消息上下文","link":"#设置右下角消息上下文","children":[]}]}]}]},{"level":2,"title":"弹框","slug":"弹框","link":"#弹框","children":[]},{"level":2,"title":"事件","slug":"事件-1","link":"#事件-1","children":[]},{"level":2,"title":"Show","slug":"show","link":"#show","children":[]},{"level":2,"title":"鼠标","slug":"鼠标","link":"#鼠标","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":7.39,"words":2216},"filePathRelative":"dotnet/zhuomianchengxu/winform/jichuzhishi/jichucaozuo.md","localizedDate":"2023年7月5日","excerpt":"<h2>Main函数</h2>\\n<h3>入参出参</h3>\\n<p>在Main方法内接收参数</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">STAThread</span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    MessageBox<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Show</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Main方法中收到的参数：</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Join</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">','</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    ApplicationConfiguration<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Application<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,g as data};
