import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,b as s,e as n,f as i,d as a}from"./app-Bfb6-vFH.js";const l={},u=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>选项是配置的升级版，一般情况下是把一个范围内的配置包装成类型以供使用，通过选项框架来处理服务和配置的关系 特性</p><ul><li>支持单例模式读取配置</li><li>支持快照</li><li>支持配置变更通知</li><li>支持运行时动态修改选项的值</li></ul><p>选项类别： <code>IOption&lt;XXXOptions&gt;</code>(普通选项)、不会读取到新的值 <code>IOptionsSnapshot&lt;XXXOptions&gt;</code>(热更新)、会在同一个范围内保持一致。 <code>IOptionsMonitor&lt;XXXOption&gt;</code>（监控选项）</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><blockquote><p>本文示例代码：vs2022、.Net6</p></blockquote><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><p>采用下面的形式把配置类型 实体注入到容器中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token string">&quot;RabbitMQ&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Hosts&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;**.***.***.**&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">5672</span><span class="token punctuation">,</span>
    <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;VirtualHost&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;myQueue&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//startup配置 </span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RabbitMQConfig<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>RabbitMQ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RabbitMQConfig</span> _rabbitMQConfig<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span><span class="token class-name">IOptions<span class="token punctuation">&lt;</span>RabbitMQConfig<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _rabbitMQConfig <span class="token operator">=</span> options<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),r={href:"https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0#ios",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="选项命名" tabindex="-1"><a class="header-anchor" href="#选项命名"><span>选项命名</span></a></h3><p>当相同的配置有两组时，选项命名就非常有用了，比如一主一备</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;RedisSettings&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Main&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">6379</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ConnectionTimeOut&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;10ms&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Prepare&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">6380</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ConnectionTimeOut&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;12ms&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体类可以用静态常量区分开来</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">RedisSetting</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Main <span class="token operator">=</span> <span class="token string">&quot;Main&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> Prepare <span class="token operator">=</span> <span class="token string">&quot;Prepare&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Host <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Port <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> ConnectionTimeOut <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别注入配置即可</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedisSetting<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>RedisSetting<span class="token punctuation">.</span>Main<span class="token punctuation">,</span>
                                   builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;RedisSettings:Main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RedisSetting<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>RedisSetting<span class="token punctuation">.</span>Prepare<span class="token punctuation">,</span>
                                    builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;RedisSettings:Prepare&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过只有IOptionsSnapshot和IOptionsMonitor能通过Get方法来获取命名的配置，IOptions没有实现Get方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/snapshotredissetting&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">IOptionsSnapshot<span class="token punctuation">&lt;</span>RedisSetting<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>RedisSetting<span class="token punctuation">.</span>Main<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/monitorstart&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>RedisSetting<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span>redisSetting <span class="token operator">=&gt;</span>
   <span class="token punctuation">{</span>
       app<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>RedisSetting<span class="token punctuation">.</span>Main<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       app<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>RedisSetting<span class="token punctuation">.</span>Prepare<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> options<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ioptionsfactory-对象" tabindex="-1"><a class="header-anchor" href="#ioptionsfactory-对象"><span>IOptionsFactory&lt;对象&gt;</span></a></h3><p>使用场景：一个配置类，但是配置类分别存储不同的内容。 注入配置</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">//注入第一个配置</span>
var con = new Action&lt;RabbitMQConfig&gt;(option =&gt;
<span class="token punctuation">{</span>
	option.Password = <span class="token string">&quot;aaaa111&quot;</span>;
<span class="token punctuation">}</span>);
services.Configure(<span class="token string">&quot;name1&quot;</span><span class="token punctuation">,</span> con);
<span class="token comment">//注入第二个配置</span>
var con2 = new Action&lt;RabbitMQConfig&gt;(option =&gt;
<span class="token punctuation">{</span>
	option.Password = <span class="token string">&quot;aaaa22222&quot;</span>;
<span class="token punctuation">}</span>);
services.Configure(<span class="token string">&quot;name2&quot;</span><span class="token punctuation">,</span> con2);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解：感觉类似于将两个配置放进了一个字典中，这个字典key是字符串，然后value就是对象。 使用</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>private readonly RabbitMQConfig _rabbitMQConfig;
public WeatherForecastController(IOptionsFactory&lt;RabbitMQConfig&gt; factory)
<span class="token punctuation">{</span>
	_rabbitMQConfig = factory.Create(<span class="token string">&quot;name1&quot;</span>);<span class="token comment">//相当于根据key去字典中找value</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选项框架" tabindex="-1"><a class="header-anchor" href="#选项框架"><span>选项框架</span></a></h2><p>实现需求：在Service里面读取配置并使用 这里我们新建一个简单的Web API程序，创建UserService服务以及服务选项配置(关于这个叫做选项很迷惑，知识盲区)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取默认积分</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserOptions</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 积分</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Integral <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且这里我们给这个积分默认值设置成5，然后控制器中编写接口方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> _userService<span class="token punctuation">.</span><span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单例注册配置" tabindex="-1"><a class="header-anchor" href="#单例注册配置"><span>单例注册配置</span></a></h3><p>服务注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//services.AddSingleton&lt;UserOptions&gt;();</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserOptions</span> <span class="token punctuation">{</span> Integral <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用UserOptions</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">UserOptions</span> _userOptions<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">UserOptions</span> userOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _userOptions <span class="token operator">=</span> userOptions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inheritdoc</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IUserService.GetDefaultIntegral<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _userOptions<span class="token punctuation">.</span>Integral<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目查看输出结果为10。</p><h3 id="选项对比" tabindex="-1"><a class="header-anchor" href="#选项对比"><span>选项对比</span></a></h3><p><code>IOptions&lt;T&gt;</code>(普通选项)：是单例，所以在配置改变后，我们不能读取到新的值，必须重启程序才能读到新的值。 <code>IOptionsMonitor&lt;T&gt;</code>(热更新)：是单例，但是它通过IOptionsChangeTokenSource&lt;&gt; 能够和配置文件一起更新，但是在配置改变后，我们能够读取到新的值 <code>IOptionsSnapshot&lt;T&gt;</code>(监控选项)：是范围，所以在配置文件更新的下一次访问(同一个范围内，修改配置文件，获取到的值是不会变化的)，它的值会更新，但是它不能跨范围通过代码的方式更改值，只能在当前范围（请求）内有效。</p><p>通俗的说，在一个范围内，如果A、B两处代码都读取了某一个配置项，在运行A之后并且在运行B之前，这个配置项改变了，那么如果我们使用IOptionsMonitor读取配置，在A处我们将会是旧值，在B处我们读取到的是新值；如果我们使用IOptionsSnapshot读取配置，在A处和B处读取到的都是旧值，只有再次进入这个范围才会读取到新值。</p><p>由于<code>IOptions&lt;T&gt;</code>不监听配置的改变，因此它的资源占用比较少，适用于对服务器启动后就不会改变的值进行读取。由于<code>IOptionsMonitor&lt;T&gt;</code>可能会导致同一个请求过程中，配置的改变使读取同一个选项的值不一致，从而导致程序出错，因此如果我们需要在程序运行中读取修改后的值，建议使用<code>IOptionsSnapshot&lt;T&gt;</code>。综上所述，<code>IOptionsSnapshot&lt;T&gt;</code>更符合大部分场景的需求。</p><p>官方文档是这样介绍的： <code>IOptionsMonitor&lt;TOptions&gt;</code>用于检索选项和管理TOptions实例的选项通知，它支持下面的场景：</p><ul><li>实例更新通知。</li><li>命名实例。</li><li>重新加载配置。</li><li>选择性的让实例失效。</li></ul><p><code>IOptionsSnapshot&lt;TOptions&gt;</code>在需要对每个请求重新计算选项的场景中非常有用。 <code>IOptions&lt;TOptions&gt;</code>可以用来支持Options模式，但是它不支持前面两者所支持的场景，如果你不需要支持上面的场景，你可以继续使用<code>IOptions&lt;TOptions&gt;</code>。 所以你应该根据你的实际使用场景来选择到底是用这三者中的哪一个。</p><blockquote><p>一般来说，如果你依赖配置文件，那么首先考虑IOptionsMonitor&lt;&gt;，如果不合适接着考虑IOptionsSnapshot&lt;&gt;，最后考虑IOptions&lt;&gt;。</p></blockquote><h3 id="ioptions" tabindex="-1"><a class="header-anchor" href="#ioptions"><span>IOptions</span></a></h3><p>这里需要引用组件，不过我们是API框架已经帮我们引用好了组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Options
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接修改UserService进行使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOptions<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> _userOptions<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IOptions<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> userOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _userOptions <span class="token operator">=</span> userOptions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inheritdoc</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IUserService.GetDefaultIntegral<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _userOptions<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Integral<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册方式也有所改变,通过读取配置文件然后映射到UserOptions类上</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;UserOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件增加如下配置</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;UserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;Integral&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目查看结束输出为10。但是我们更新配置里面的值，输出的值并不会热更新。</p><h3 id="ioptionssnapshot" tabindex="-1"><a class="header-anchor" href="#ioptionssnapshot"><span>IOptionsSnapshot</span></a></h3><p>IOptionsSnapshot不能注入到单例服务里面使用，因为它是scoped的。 如果想实现热更新配置，那么就需要用到IOptionsSnapshot,修改UserService</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOptionsSnapshot<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> _userOptions<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IOptionsSnapshot<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> userOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _userOptions <span class="token operator">=</span> userOptions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inheritdoc</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IUserService.GetDefaultIntegral<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _userOptions<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Integral<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改注册方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;UserOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启用调用接口我们输出积分为10，这个时候我们修改appsettings.json里面Integral值为100(不需要停止程序)，再次调用接口输出值已经变成100了。</p><h3 id="ioptionsmonitor" tabindex="-1"><a class="header-anchor" href="#ioptionsmonitor"><span>IOptionsMonitor</span></a></h3><p>如果使用配置的服务是单例的，那么就应该使用IOptionsMonitor进行热更新配置。 修改UserService如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> _userOptions<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> userOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _userOptions <span class="token operator">=</span> userOptions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inheritdoc</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IUserService.GetDefaultIntegral<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetDefaultIntegral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _userOptions<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">.</span>Integral<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改注册方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;UserOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启用调用接口我们输出积分为100，这个时候我们修改appsettings.json里面Integral值为1000(不需要停止程序)，再次调用接口输出值已经变成1000了。</p><p>我们还可以在单例服务里面监听配置的变更，需要在UserService中修改</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> _userOptions<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">UserService</span><span class="token punctuation">(</span><span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span> userOptions<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _userOptions <span class="token operator">=</span> userOptions<span class="token punctuation">;</span>
    _userOptions<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;积分配置变更为：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">option<span class="token punctuation">.</span>Integral</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置文件被修改时候会触发输出</p><h3 id="代码更新选项" tabindex="-1"><a class="header-anchor" href="#代码更新选项"><span>代码更新选项</span></a></h3><p>通过<code>IPostConfigureOptions&lt;TOptions&gt;</code>进行动态配置对象 需求：在我们读取配置然后在原来的基础上做一些操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;UserOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostConfigure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Integral <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里实现了读取后再原来基金基础上增加100积分。</p><h3 id="选项验证" tabindex="-1"><a class="header-anchor" href="#选项验证"><span>选项验证</span></a></h3><h4 id="验证方法" tabindex="-1"><a class="header-anchor" href="#验证方法"><span>验证方法</span></a></h4><p>三种验证方法</p><ul><li>直接注册验证函数</li><li>实现<code>IValidateOptions&lt;TOpions&gt;</code></li><li>使用Microsoft.Extensions.Options.DateAnnotations</li></ul><h5 id="validate" tabindex="-1"><a class="header-anchor" href="#validate"><span>Validate</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//如果积分小于等于100属于符合条件</span>
    <span class="token keyword">return</span> options<span class="token punctuation">.</span>Integral <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;积分不能大于100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不符合条件提示的错误信息</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="validatedataannotations" tabindex="-1"><a class="header-anchor" href="#validatedataannotations"><span>ValidateDataAnnotations</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateDataAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改UserOptions</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 积分</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>ErrorMessage <span class="token operator">=</span><span class="token string">&quot;积分最大为100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Integral <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="编写useroptionsvalidateoptions" tabindex="-1"><a class="header-anchor" href="#编写useroptionsvalidateoptions"><span>编写UserOptionsValidateOptions</span></a></h5><p>编写UserOptionsValidateOptions继承自：<code>IValidateOptions&lt;UserOptions&gt;</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserOptionsValidateOptions</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValidateOptions<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">ValidateOptionsResult</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">UserOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>Integral <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ValidateOptionsResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token string">&quot;积分不能大于100!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ValidateOptionsResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在修改注册方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidateOptions<span class="token punctuation">&lt;</span>UserOptions<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> UserOptionsValidateOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果配置的积分大于100就会报错。</p><h4 id="验证时机" tabindex="-1"><a class="header-anchor" href="#验证时机"><span>验证时机</span></a></h4><p>默认情况下，如果你加了验证的配置，那么会在获取配置值的时候进行验证，但是我们可以通过下面的代码来实现在在项目启动的时候就进行验证</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MinioConfig<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;Minio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ValidateOnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81);function k(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("程序启动后再修改 JSON 配置文件所做的更改获取不到。 若要读取在应用启动后的更改，请使用 "),s("a",r,[n("IOptionsSnapshot"),i(t)]),n("。")]),d])}const h=p(l,[["render",k],["__file","shuaxiangoption.html.vue"]]),f=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/shuaxiangoption.html","title":"选项Option","lang":"zh-CN","frontmatter":{"title":"选项Option","lang":"zh-CN","date":"2023-09-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shuaxiangoption","slug":"ocgez4","docsId":"30192830","description":"概述 选项是配置的升级版，一般情况下是把一个范围内的配置包装成类型以供使用，通过选项框架来处理服务和配置的关系 特性 支持单例模式读取配置 支持快照 支持配置变更通知 支持运行时动态修改选项的值 选项类别： IOption<XXXOptions>(普通选项)、不会读取到新的值 IOptionsSnapshot<XXXOptions>(热更新)、会在同一...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/shuaxiangoption.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"选项Option"}],["meta",{"property":"og:description","content":"概述 选项是配置的升级版，一般情况下是把一个范围内的配置包装成类型以供使用，通过选项框架来处理服务和配置的关系 特性 支持单例模式读取配置 支持快照 支持配置变更通知 支持运行时动态修改选项的值 选项类别： IOption<XXXOptions>(普通选项)、不会读取到新的值 IOptionsSnapshot<XXXOptions>(热更新)、会在同一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"选项Option\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":3,"title":"选项命名","slug":"选项命名","link":"#选项命名","children":[]},{"level":3,"title":"IOptionsFactory<对象>","slug":"ioptionsfactory-对象","link":"#ioptionsfactory-对象","children":[]}]},{"level":2,"title":"选项框架","slug":"选项框架","link":"#选项框架","children":[{"level":3,"title":"单例注册配置","slug":"单例注册配置","link":"#单例注册配置","children":[]},{"level":3,"title":"选项对比","slug":"选项对比","link":"#选项对比","children":[]},{"level":3,"title":"IOptions","slug":"ioptions","link":"#ioptions","children":[]},{"level":3,"title":"IOptionsSnapshot","slug":"ioptionssnapshot","link":"#ioptionssnapshot","children":[]},{"level":3,"title":"IOptionsMonitor","slug":"ioptionsmonitor","link":"#ioptionsmonitor","children":[]},{"level":3,"title":"代码更新选项","slug":"代码更新选项","link":"#代码更新选项","children":[]},{"level":3,"title":"选项验证","slug":"选项验证","link":"#选项验证","children":[{"level":4,"title":"验证方法","slug":"验证方法","link":"#验证方法","children":[{"level":5,"title":"Validate","slug":"validate","link":"#validate","children":[]},{"level":5,"title":"ValidateDataAnnotations","slug":"validatedataannotations","link":"#validatedataannotations","children":[]},{"level":5,"title":"编写UserOptionsValidateOptions","slug":"编写useroptionsvalidateoptions","link":"#编写useroptionsvalidateoptions","children":[]}]},{"level":4,"title":"验证时机","slug":"验证时机","link":"#验证时机","children":[]}]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":7.43,"words":2229},"filePathRelative":"dotnet/base/peizhikuangjia/shuaxiangoption.md","localizedDate":"2023年9月25日","excerpt":"<h2>概述</h2>\\n<p>选项是配置的升级版，一般情况下是把一个范围内的配置包装成类型以供使用，通过选项框架来处理服务和配置的关系\\n特性</p>\\n<ul>\\n<li>支持单例模式读取配置</li>\\n<li>支持快照</li>\\n<li>支持配置变更通知</li>\\n<li>支持运行时动态修改选项的值</li>\\n</ul>\\n<p>选项类别：\\n<code>IOption&lt;XXXOptions&gt;</code>(普通选项)、不会读取到新的值\\n<code>IOptionsSnapshot&lt;XXXOptions&gt;</code>(热更新)、会在同一个范围内保持一致。\\n<code>IOptionsMonitor&lt;XXXOption&gt;</code>（监控选项）</p>","autoDesc":true}');export{h as comp,f as data};
