import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as t,o as n}from"./app-B3EhLA94.js";const s={};function p(l,r){return n(),o("div",null,r[0]||(r[0]=[t('<p>守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端中都显示并且不会被任何终端所干扰。它从被执行的时候开始，结束于系统关闭。<br> 使用目的：为了让我们的程序在异常或者电脑重启的时候仍可以正常访问。<br>  <br> 现在我们将使用supervisor来管理进程，理由就是官方推荐，并且文档全<br> 在linux中操作<br> 安装supervisor<br> 命令：yum install supervisor<br> 安装完成之后，在 /ect/supervisor/conf.d/ 目录下新建一个配置文件（touch HelloWebApp.conf），取名为 HelloWebApp.conf<br> 打开HelloWebApp.conf （vim HelloWebApp.conf），写入如下命令<br> [program:HelloWebApp]<br> command=dotnet HelloWebApp.dll  #要执行的命令<br> directory=/home/yxd/Workspace/publish #命令执行的目录<br> environment=ASPNETCORE__ENVIRONMENT=Production #环境变量<br> user=www-data  #进程执行的用户身份<br> stopsignal=INT<br> autostart=true #是否自动启动<br> autorestart=true #是否自动重启<br> startsecs=1 #自动重启间隔<br> stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志<br> stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志<br>  <br>  <br> 配置好以后 (:wq保存退出)，需要重新加载一下配置<br>  <br> sudo supervisorctl shutdown &amp;&amp; sudo supervisord -c /etc/supervisor/supervisord.conf<br>  <br> 或者你可以直接重启 Supervisor：<br>  <br> sudo service supervisor stop<br> sudo service supervisor start<br> 如果启动的时候报错，可以打开位于/etc/log/supervisor/supervisord.log文件来查看具体的日志。<br>  <br> 其中dotnet 命令输出的日志文件分别为位于<br>  <br> /var/log/HelloWebApp.err.log<br> /var/log/HelloWebApp.out.log<br> 在这些文件里面你可以查看程序中的异常信息或者是运行信息。<br>  <br> 打开浏览器，输入 <a href="http://localhost:5000" target="_blank" rel="noopener noreferrer">http://localhost:5000</a> 发现已经可以浏览了。<br>  <br> Supervisor 常用命令<br> supervisorctl shutdown #关闭所有任务<br> supervisorctl stop|start program_name<br> supervisorctl status #查看所有任务状态<br>  <br>  <br>  <br> 文档地址：<br><a href="https://www.cnblogs.com/qtiger/p/13853828.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/qtiger/p/13853828.html</a><br><a href="https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html</a></p>',1)]))}const i=e(s,[["render",p],["__file","shouhujincheng.html.vue"]]),u=JSON.parse('{"path":"/dotnet/buildAndRelease/release/linux/shouhujincheng.html","title":"守护进程","lang":"zh-CN","frontmatter":{"title":"守护进程","lang":"zh-CN","date":"2021-09-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shouhujincheng","slug":"ifxngc","docsId":"32029577","description":"守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/buildAndRelease/release/linux/shouhujincheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"守护进程"}],["meta",{"property":"og:description","content":"守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T15:31:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T15:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"守护进程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T15:31:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1708875100000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":1.97,"words":590},"filePathRelative":"dotnet/buildAndRelease/release/linux/shouhujincheng.md","localizedDate":"2021年9月12日","excerpt":"<p>守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端中都显示并且不会被任何终端所干扰。它从被执行的时候开始，结束于系统关闭。<br>\\n使用目的：为了让我们的程序在异常或者电脑重启的时候仍可以正常访问。<br>\\n&nbsp;<br>\\n现在我们将使用supervisor来管理进程，理由就是官方推荐，并且文档全<br>\\n在linux中操作<br>\\n安装supervisor<br>\\n命令：yum install supervisor<br>\\n安装完成之后，在&nbsp;/ect/supervisor/conf.d/&nbsp;目录下新建一个配置文件（touch HelloWebApp.conf），取名为&nbsp;HelloWebApp.conf<br>\\n打开HelloWebApp.conf （vim HelloWebApp.conf），写入如下命令<br>\\n[program:HelloWebApp]<br>\\ncommand=dotnet HelloWebApp.dll&nbsp; #要执行的命令<br>\\ndirectory=/home/yxd/Workspace/publish #命令执行的目录<br>\\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量<br>\\nuser=www-data&nbsp; #进程执行的用户身份<br>\\nstopsignal=INT<br>\\nautostart=true #是否自动启动<br>\\nautorestart=true #是否自动重启<br>\\nstartsecs=1 #自动重启间隔<br>\\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志<br>\\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n配置好以后 (:wq保存退出)，需要重新加载一下配置<br>\\n&nbsp;<br>\\nsudo supervisorctl shutdown &amp;&amp; sudo supervisord -c /etc/supervisor/supervisord.conf<br>\\n&nbsp;<br>\\n或者你可以直接重启 Supervisor：<br>\\n&nbsp;<br>\\nsudo service supervisor stop<br>\\nsudo service supervisor start<br>\\n如果启动的时候报错，可以打开位于/etc/log/supervisor/supervisord.log文件来查看具体的日志。<br>\\n&nbsp;<br>\\n其中dotnet 命令输出的日志文件分别为位于<br>\\n&nbsp;<br>\\n/var/log/HelloWebApp.err.log<br>\\n/var/log/HelloWebApp.out.log<br>\\n在这些文件里面你可以查看程序中的异常信息或者是运行信息。<br>\\n&nbsp;<br>\\n打开浏览器，输入 <a href=\\"http://localhost:5000\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://localhost:5000</a> 发现已经可以浏览了。<br>\\n&nbsp;<br>\\nSupervisor 常用命令<br>\\nsupervisorctl shutdown #关闭所有任务<br>\\nsupervisorctl stop|start program_name<br>\\nsupervisorctl status #查看所有任务状态<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n文档地址：<br>\\n<a href=\\"https://www.cnblogs.com/qtiger/p/13853828.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/qtiger/p/13853828.html</a><br>\\n<a href=\\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html</a></p>","autoDesc":true}');export{i as comp,u as data};
