import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as l,b as n,e,f as a,d as o}from"./app-CBxp4zeL.js";const p={},r=o('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。</p><p>举个例：比如开发一个Web项目，需要有数据库、Redis、MongoDB、配置中心等等，如果将其进行容器化，可以有两种选择，第一种就是把所有的服务依赖和应用程序全部构建为一个镜像，然后以一个容器运行，即这个容器里面包含了Web应用程序、数据库、Redis、MongoDB、配置中心等；另一种方式就各自服务单独启动为一个容器服务，比较独立，一般可以一个一个的启动容器，然后通过网络连接起来就行；显然第二种方式是小伙伴们更多的选择，如果能配上一个批量操作那就完美了，而Docker Compose就是来干这个事的。</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Docker-Compose 是用于<strong>定义和运行多容器 Docker</strong> 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。比如我们发布一个系统可能包含多个服务，服务与服务之间网络需要互通，那此时我们需要一个容器一个容器去启动，如果使用Docker-Compose即可定义一个描述文件docker-compose.yaml完成所有服务的发布， 并且实现容器间互通（单台物理机）。类似于批量命令，通过一组命令可以<strong>批量构建容器，批量启动容器，批量删除</strong>。</p><blockquote><p>yaml文件以key： value方式在指定配置信息，多个配置信息以换行+缩进的方式来区分</p></blockquote><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2>',7),d={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},m=o(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 生成镜像不启动容器，已经存在镜像就覆盖</span>
<span class="token function">docker-compose</span> build

<span class="token comment"># 如果镜像不存在，构建镜像并启动容器</span>
<span class="token function">docker-compose</span> up 
<span class="token comment"># 如果添加该--build选项，即时不需要时，也会强制构建镜像。</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">--build</span>
<span class="token comment"># 跳过镜像构建的过程</span>
<span class="token function">docker-compose</span> up --no-build <span class="token comment">#如果镜像不是预先构建的，就会失败</span>

<span class="token comment"># 提供一个项目名称，以便对容器进行标识和管理，项目名称必须是唯一的</span>
<span class="token function">docker-compose</span> <span class="token parameter variable">-p</span> defalut up

<span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose.yaml  up <span class="token parameter variable">--build</span> <span class="token parameter variable">-d</span> 服务名

<span class="token comment"># 查看由docker-compose管理的容器</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span>

<span class="token comment"># 开启|关闭|重启已经存在的由docker-compose维护的容器</span>
<span class="token function">docker-compose</span> start<span class="token operator">|</span>stop<span class="token operator">|</span>restart

<span class="token comment"># 关闭并删除容器</span>
<span class="token function">docker-compose</span> down

<span class="token comment"># 查看日志</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>创建docker-compose.yaml文件，然后添加代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>version<span class="token punctuation">:</span> &#39;<span class="token number">3.4</span>&#39;

services<span class="token punctuation">:</span> 

  frontend<span class="token punctuation">:</span>
    image<span class="token punctuation">:</span> <span class="token class-name">pizzafrontend</span>
    build<span class="token punctuation">:</span>
      context<span class="token punctuation">:</span> <span class="token class-name">frontend</span>
      dockerfile<span class="token punctuation">:</span> <span class="token class-name">Dockerfile</span>
    environment<span class="token punctuation">:</span> 
      <span class="token operator">-</span> backendUrl<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token class-name">backend</span>
    ports<span class="token punctuation">:</span>
      <span class="token operator">-</span> <span class="token string">&quot;5902:80&quot;</span>
    depends_on<span class="token punctuation">:</span> 
      <span class="token operator">-</span> <span class="token class-name">backend</span>
  backend<span class="token punctuation">:</span>
    image<span class="token punctuation">:</span> <span class="token class-name">pizzabackend</span>
    build<span class="token punctuation">:</span> 
      context<span class="token punctuation">:</span> <span class="token class-name">backend</span>
      dockerfile<span class="token punctuation">:</span> <span class="token class-name">Dockerfile</span>
    ports<span class="token punctuation">:</span> 
      <span class="token operator">-</span> <span class="token string">&quot;5000:80&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码执行几项操作：</p><ul><li>首先，它会创建前端网站，将其命名为 pizzafrontend。 该代码指示 Docker 生成该网站，并指向在“前端”文件夹中找到的 Dockerfile。 然后代码会为网站设置环境变量：backendUrl=http://backend。 最后，此代码会打开一个端口，并声明它依赖于后端服务。</li><li>接下来将创建后端服务。 它被命名为 pizzabackend。 它是通过你在上一个练习中创建的同一 Dockerfile 构建的。 最后一个命令指定要打开的端口。</li></ul><p>若要生成容器映像，请打开命令提示符，并导航至 docker-compose.yml 文件所在的目录，然后运行以下命令：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker<span class="token operator">-</span>compose build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着，若要启动网站和 Web API，请运行以下命令：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker<span class="token operator">-</span>compose up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过一些输出后，就生成了一个容器。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,13),u={href:"https://www.cnblogs.com/ray-mmss/p/10868754.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/minseo/p/11548177.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/dotnet-easy/docker-compose-hub/tree/main/docker-compose",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const s=c("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[e("运行命令教程："),n("a",d,[e("https://docs.docker.com/compose/"),a(s)])]),m,n("p",null,[e("配置文件详细解释： "),n("a",u,[e("https://www.cnblogs.com/ray-mmss/p/10868754.html"),a(s)]),n("a",k,[e("https://www.cnblogs.com/minseo/p/11548177.html"),a(s)]),e(" 常用脚本："),n("a",v,[e("https://github.com/dotnet-easy/docker-compose-hub/tree/main/docker-compose"),a(s)])])])}const y=t(p,[["render",b],["__file","index.html.vue"]]),D=JSON.parse('{"path":"/cloud/container/dockerCompose/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"composebianpai","slug":"owy3it","docsId":"29455025","description":"前言 Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。 举个例：比如开发一个Web项目，需要...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/container/dockerCompose/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"前言 Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。 举个例：比如开发一个Web项目，需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-02T13:00:05.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-02T13:00:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-02T13:00:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1709384405000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":3.64,"words":1092},"filePathRelative":"cloud/container/dockerCompose/readme.md","localizedDate":"2023年9月17日","excerpt":"<h2>前言</h2>\\n<p>Docker可以将应用程序及环境很方便的以容器的形式启动，但当应用程序依赖的服务比较多，或是遇到一个大系统拆分的服务很多时，如果还一个一个的根据镜像启动容器，那就有点累人了，到这有很多小伙伴会说：弄个脚本就搞定啦；要的就是这个思路，Docker提供了一个叫Docker Compose的工具，一键启动相关服务。</p>\\n<p>举个例：比如开发一个Web项目，需要有数据库、Redis、MongoDB、配置中心等等，如果将其进行容器化，可以有两种选择，第一种就是把所有的服务依赖和应用程序全部构建为一个镜像，然后以一个容器运行，即这个容器里面包含了Web应用程序、数据库、Redis、MongoDB、配置中心等；另一种方式就各自服务单独启动为一个容器服务，比较独立，一般可以一个一个的启动容器，然后通过网络连接起来就行；显然第二种方式是小伙伴们更多的选择，如果能配上一个批量操作那就完美了，而Docker Compose就是来干这个事的。</p>","autoDesc":true}');export{y as comp,D as data};
