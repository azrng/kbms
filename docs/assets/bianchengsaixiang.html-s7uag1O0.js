import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,b as n}from"./app-qB9_Bjjp.js";const r={},i=n('<h2 id="发展路线" tabindex="-1"><a class="header-anchor" href="#发展路线"><span>发展路线</span></a></h2><p>POP(procedure oriented programming)面向过程编程：以过程为中心的编程思想，思考方式从实际出发 OOP(Object Oriented Programming)面向对象编程：相比较上面的流程比较清楚 不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。 AOP面向切面编程：在不修改原始类的情况下给程序动态增加统一功能的一种技术，是对OOP的一种补充，解决共性问题(同一个功能多次使用)和扩展问题(后台项目改造，扩展需求) 优势：1.将通用功能从业务逻辑中抽离出来，提供代码重用性，有利于后期的维护和扩展。 2.软件设计时候，抽离出通用的功能(切面)，有利于软件设计的模块化，降低软件架构的复杂度。 缺点：是对OOP思想的补充，无法单独存在，首先POP来梳理整个业务流程，根据流程OOP去整理类和模块。</p><h2 id="aop和oop的区别" tabindex="-1"><a class="header-anchor" href="#aop和oop的区别"><span>AOP和OOP的区别</span></a></h2><p>1.面向目标不同：OOP面向名词领域(商品、用户、员工)，AOP面向动词领域，鉴权、记录日志 2.思想结构不同：OOP纵向，AOP横向 3.侧重方面不同：OOP注重业务逻辑单元的划分，AOP侧重业务处理过程中某一个步骤或阶段</p><h2 id="三种架构关系" tabindex="-1"><a class="header-anchor" href="#三种架构关系"><span>三种架构关系</span></a></h2><p>相互补充，并没有替换一说，稍微复杂的系统，就不是只用这种开发出来的。</p>',6),o=[i];function p(c,s){return t(),a("div",null,o)}const l=e(r,[["render",p],["__file","bianchengsaixiang.html.vue"]]),d=JSON.parse('{"path":"/softwareDesign/bianchengsaixiang.html","title":"编程思想","lang":"zh-CN","frontmatter":{"title":"编程思想","lang":"zh-CN","date":"2022-03-30T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"bianchengsaixiang","slug":"nmp07e","docsId":"33572753","description":"发展路线 POP(procedure oriented programming)面向过程编程：以过程为中心的编程思想，思考方式从实际出发 OOP(Object Oriented Programming)面向对象编程：相比较上面的流程比较清楚 不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。 AOP面向切面编程：在不修改原始类...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/bianchengsaixiang.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"编程思想"}],["meta",{"property":"og:description","content":"发展路线 POP(procedure oriented programming)面向过程编程：以过程为中心的编程思想，思考方式从实际出发 OOP(Object Oriented Programming)面向对象编程：相比较上面的流程比较清楚 不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。 AOP面向切面编程：在不修改原始类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T15:13:58.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T15:13:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程思想\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-05T15:13:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"发展路线","slug":"发展路线","link":"#发展路线","children":[]},{"level":2,"title":"AOP和OOP的区别","slug":"aop和oop的区别","link":"#aop和oop的区别","children":[]},{"level":2,"title":"三种架构关系","slug":"三种架构关系","link":"#三种架构关系","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1693926838000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"softwareDesign/bianchengsaixiang.md","localizedDate":"2022年3月30日","excerpt":"<h2>发展路线</h2>\\n<p>POP(procedure oriented programming)面向过程编程：以过程为中心的编程思想，思考方式从实际出发\\nOOP(Object Oriented Programming)面向对象编程：相比较上面的流程比较清楚\\n不足：系统写好后，后期如果改动就比较麻烦，因为要修改类，容易造成意外的错误。\\nAOP面向切面编程：在不修改原始类的情况下给程序动态增加统一功能的一种技术，是对OOP的一种补充，解决共性问题(同一个功能多次使用)和扩展问题(后台项目改造，扩展需求)\\n优势：1.将通用功能从业务逻辑中抽离出来，提供代码重用性，有利于后期的维护和扩展。\\n2.软件设计时候，抽离出通用的功能(切面)，有利于软件设计的模块化，降低软件架构的复杂度。\\n缺点：是对OOP思想的补充，无法单独存在，首先POP来梳理整个业务流程，根据流程OOP去整理类和模块。</p>","autoDesc":true}');export{l as comp,d as data};
