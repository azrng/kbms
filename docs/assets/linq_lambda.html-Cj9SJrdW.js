import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as o,a as n,d as p,e as i,b as c}from"./app-DMmdIwn0.js";const l={},d=c(`<h4 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h4><p>linq语法：更应该叫做查询表达式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>from 变量名 <span class="token keyword">in</span> db<span class="token punctuation">.</span>对象名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>
<span class="token keyword">orderby</span>、<span class="token keyword">select</span>、<span class="token keyword">join</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>linq查询操作符</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>db<span class="token punctuation">.</span>对象名<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">OrderByDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">GroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> listinfo <span class="token operator">=</span> db<span class="token punctuation">.</span>AdminInfo<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Models<span class="token punctuation">.</span>ViewModels<span class="token punctuation">.</span>AdminInfoViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                AdminAccount <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminAccount<span class="token punctuation">,</span>
                AdminBirthday <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminBirthday<span class="token punctuation">,</span>
                AdminName <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminName<span class="token punctuation">,</span>
                AdminNo <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminNo<span class="token punctuation">,</span>
                AdminPhone <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminPhone<span class="token punctuation">,</span>
                AdminPwd <span class="token operator">=</span> item<span class="token punctuation">.</span>AdminPwd<span class="token punctuation">,</span>
                Id <span class="token operator">=</span> item<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
                RoleId <span class="token operator">=</span> item<span class="token punctuation">.</span>RoleId
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>热门搜索：搜索记录中根据文章ID分组，然后找到分组中数量最高的是最热门的搜索 <code>db.admin.\`\`GroupBy(x =&gt; x.ResID).OrderByDescending(x =&gt; x.Count());</code></p><h4 id="增加" tabindex="-1"><a class="header-anchor" href="#增加"><span>增加</span></a></h4><ol><li>将对象放入EF容器中 <code>db.对象名.Add(对象);</code></li><li>执行写入数据库操作，将数据进行持久化 <code>db.SaveChanges();</code> 例子：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdminInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        AdminNo <span class="token operator">=</span> model<span class="token punctuation">.</span>AdminNo<span class="token punctuation">,</span>
                        AdminName <span class="token operator">=</span> model<span class="token punctuation">.</span>AdminName<span class="token punctuation">,</span>
                        AdminAccount <span class="token operator">=</span> model<span class="token punctuation">.</span>AdminAccount<span class="token punctuation">,</span>
                        AdminPwd <span class="token operator">=</span> model<span class="token punctuation">.</span>AdminPwd<span class="token punctuation">,</span>
                        AdminPhone <span class="token operator">=</span> model<span class="token punctuation">.</span>AdminPhone<span class="token punctuation">,</span>
                        AdminBirthday <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">[</span><span class="token string">&quot;AdminBirthday&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        RoleId <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">[</span><span class="token string">&quot;database-dropdownlist&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Addtime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now
                    <span class="token punctuation">}</span><span class="token punctuation">;</span>
                    db<span class="token punctuation">.</span>AdminInfo<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
                   db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><p>第一种：先查后删： 1.先根据条件将对象查询出来 a.linq语法： (from 变量名 in db.对象名 where 条件).FirstOrDefault(); b:Lambda语法： db.对象名.Where(条件).FirstOrDefault(); 或： db.对象名.FirstOrDefault(条件); 2. 删除该对象： db.对象名.Remove(对象); 3. 执行写入数据库操作，将数据进行持久化 db.SaveChanges();   第二种：不查询直接删除： 1.声明一个对象 new 对象 2. 附加到EF容器中 db.对象名.Attach(对象); 3. 标记为删除 db.对象名.Remove(对象); 或： db.Entry&lt;对象名&gt;(对象).State=EntityState.Deleted； 4. 执行写入数据库操作，将数据进行持久化 db.SaveChanges();</p>`,13),r={href:"http://blog.csdn.net/itmaxin/article/details/47659817",target:"_blank",rel:"noopener noreferrer"},u=n("h4",{id:"更新",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更新"},[n("span",null,"更新")])],-1),m=n("p",null,"第一种：先查后改： 1.先根据条件将对象查询出来 a.linq语法： (from 变量名 in db.对象名 where 条件).FirstOrDefault(); b:Lambda语法： db.对象名.Where(条件).FirstOrDefault(); 或： db.对象名.FirstOrDefault(条件); 2. 修改该对象的属性 3. 执行写入数据库操作，将数据进行持久化 db.SaveChanges(); 例子：     var info = db.AdminInfo.FirstOrDefault(i => i.Id == id);                         info.AdminNo = collection.AdminNo;                         info.Addtime = DateTime.Now;                         db.SaveChanges() > 0     第二种：不查询直接更新： 1.声明一个对象 new 对象 2. 附加到EF容器中 db.对象名.Attach(对象); 3. 标记为修改 db.Entry<对象名>(对象).State=EntityState.Modified; 4. 执行写入数据库操作，将数据进行持久化 db.SaveChanges();",-1);function k(b,v){const a=e("ExternalLinkIcon");return t(),o("div",null,[d,n("blockquote",null,[n("p",null,[n("a",r,[p("http://blog.csdn.net/itmaxin/article/details/47659817"),i(a)])])]),u,m])}const f=s(l,[["render",k],["__file","linq_lambda.html.vue"]]),y=JSON.parse('{"path":"/orm/ef/linq_lambda.html","title":"Linq+lambda","lang":"zh-CN","frontmatter":{"title":"Linq+lambda","lang":"zh-CN","date":"2022-02-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"linq+lambda","slug":"efaf38","docsId":"23988602","description":"查询 linq语法：更应该叫做查询表达式 linq查询操作符 例子： 热门搜索：搜索记录中根据文章ID分组，然后找到分组中数量最高的是最热门的搜索 db.admin.``GroupBy(x => x.ResID).OrderByDescending(x => x.Count()); 增加 将对象放入EF容器中 db.对象名.Add(对象); 执行写入数...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/ef/linq_lambda.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Linq+lambda"}],["meta",{"property":"og:description","content":"查询 linq语法：更应该叫做查询表达式 linq查询操作符 例子： 热门搜索：搜索记录中根据文章ID分组，然后找到分组中数量最高的是最热门的搜索 db.admin.``GroupBy(x => x.ResID).OrderByDescending(x => x.Count()); 增加 将对象放入EF容器中 db.对象名.Add(对象); 执行写入数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linq+lambda\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":4,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":4,"title":"增加","slug":"增加","link":"#增加","children":[]},{"level":4,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":4,"title":"更新","slug":"更新","link":"#更新","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"orm/ef/linq+lambda.md","localizedDate":"2022年2月13日","excerpt":"<h4>查询</h4>\\n<p>linq语法：更应该叫做查询表达式</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>from 变量名 <span class=\\"token keyword\\">in</span> db<span class=\\"token punctuation\\">.</span>对象名 <span class=\\"token keyword\\">where</span> 条件<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">orderby</span>、<span class=\\"token keyword\\">select</span>、<span class=\\"token keyword\\">join</span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,y as data};
