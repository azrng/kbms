import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as l,d as i}from"./app-41nmD-Ik.js";const a={},n=i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>RESTful是目前最流行的API设计规范，是符合REST风格的一种软件架构风格，它不是标准。符合REST原则的架构方式被称作为 RESTful 规范。</p><ol><li>每一个URI代表一种资源;</li><li>同一种资源有多种表现形式(xml/json);</li><li>所有的操作都是无状态的。</li><li>规范统一接口。</li><li>返回一致的数据格式。</li><li>可缓存(客户端可以缓存响应的内容)</li></ol><p>HttpGet,HttpPost,HttpPut,HttpDelete，这四个就是传说中的<strong>RESTful风格</strong>的编程。 为什么会有这种风格呢： RESTful 风格接口实际情况是，我们在前后端在约定接口的时候，可以约定各种风格的接口，但是，RESTful 接口是目前来说比较流行的，并且在运用中比较方便和常见的接口。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><p>REST风格和RPC风格没有好坏的区分。RPC风格是业务驱动的产物，更加自然，而REST风格要求开发人员对REST原则更了解，并且有更高的设计能力。</p><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>所有资源都尽量通过URL来表达，语义性更清晰</li><li>对资源的操作都统一向资源发送POst、Delete、Put、Get请求，接口统一且具有描述性，减少开发人员对接口文档依赖性</li><li>对幂等性操作，网关、网络请求组件可以对失败请求进行重试。</li><li>网关可以对get请求进行缓存，能够提升系统访问速度，降低服务器压力</li><li>通过http错误码反应服务端的处理结果，能够统一错误码，避免自定义错误码带来不统一的问题。</li><li>网关可以根据状态码来分析系统的访问数据，有多少成功请求，多少失败请求</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li>很难清晰地进行资源的划分，对设计人员的技能和业务知识水平要求较高</li><li>真实系统中业务复杂，并不是操作操作都能简单对应到Put、get 、post、delete请求上</li><li>状态码个数是有限的，有些错误码并不能直接反应出来具体的错误</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>了解程序开发的都应该知道，我们所做的大多数操作都是对数据库的四格操作 “增删改查” 对应到我们的接口操作分别是：post 插入新数据delete 删除数据put 修改数据get 查询数据 注意，这里是我们约定，并非这些动作只能干这件事情。从表层来说，除get外的其他方法，没有什么区别，都是一样的。从深层来说包括 get在内的所有方法都是一模一样的，没有任何区别。但是，我们约定，每种动作对应不同的操作，这样方便我们统一规范我们的所有操作。 假设，我们的接口是 /api/v1/love 这样的接口，采用 RESTful 接口风格对应操作是如下的：get 操作 /api/v1/love获取 /api/v1/love 的分页列表数据，得到的主体，将是一个数组，我们可以用数据来遍历循环列表post 操作 /api/v1/love我们会往 /api/v1/love 插入一条新的数据，我们插入的数据，将是JOSN利用对象传输的。get 操作 /api/v1/love/1我们获取到一个 ID 为1 的数据，数据一般为一个对象，里面包含了 1 的各项字段信息。put 操作 /api/v1/love/1我们向接口提交了一个新的信息，来修改ID 为 1 的这条信息delete 操作 /api/v1/love/1我们向接口请求，删除 ID 为1 的这一条数据 由上述例子可知，我们实现了5种操作，但只用了两个接口地址， /api/v1/love 和 /api/v1/love/1 。所以，采用这种接口风格，可以大幅的简化我们的接口设计。</p><h2 id="传递参数" tabindex="-1"><a class="header-anchor" href="#传递参数"><span>传递参数</span></a></h2><p>Get、Delete请求的报文体是未定义的寓意，有些网络设备、软件、开发包会忽略Get、Delete中的报文体，因此我们可以认为Get、Delete请求不能使用报文体。</p>',15),o=[n];function r(p,s){return l(),t("div",null,o)}const h=e(a,[["render",r],["__file","restfulfengge.html.vue"]]),u=JSON.parse('{"path":"/dotnet/api/remoteProcedureCall/restfulfengge.html","title":"RESTful风格","lang":"zh-CN","frontmatter":{"title":"RESTful风格","lang":"zh-CN","date":"2022-12-16T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"restfulfengge","slug":"nuf77f","docsId":"30339949","description":"描述 RESTful是目前最流行的API设计规范，是符合REST风格的一种软件架构风格，它不是标准。符合REST原则的架构方式被称作为 RESTful 规范。 每一个URI代表一种资源; 同一种资源有多种表现形式(xml/json); 所有的操作都是无状态的。 规范统一接口。 返回一致的数据格式。 可缓存(客户端可以缓存响应的内容) HttpGet,H...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/remoteProcedureCall/restfulfengge.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"RESTful风格"}],["meta",{"property":"og:description","content":"描述 RESTful是目前最流行的API设计规范，是符合REST风格的一种软件架构风格，它不是标准。符合REST原则的架构方式被称作为 RESTful 规范。 每一个URI代表一种资源; 同一种资源有多种表现形式(xml/json); 所有的操作都是无状态的。 规范统一接口。 返回一致的数据格式。 可缓存(客户端可以缓存响应的内容) HttpGet,H..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-09T07:25:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-12-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T07:25:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RESTful风格\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-09T07:25:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"传递参数","slug":"传递参数","link":"#传递参数","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709969108000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.57,"words":1071},"filePathRelative":"dotnet/api/remoteProcedureCall/restfulfengge.md","localizedDate":"2022年12月16日","excerpt":"<h2>描述</h2>\\n<p>RESTful是目前最流行的API设计规范，是符合REST风格的一种软件架构风格，它不是标准。符合REST原则的架构方式被称作为 RESTful 规范。</p>\\n<ol>\\n<li>每一个URI代表一种资源;</li>\\n<li>同一种资源有多种表现形式(xml/json);</li>\\n<li>所有的操作都是无状态的。</li>\\n<li>规范统一接口。</li>\\n<li>返回一致的数据格式。</li>\\n<li>可缓存(客户端可以缓存响应的内容)</li>\\n</ol>\\n<p>HttpGet,HttpPost,HttpPut,HttpDelete，这四个就是传说中的<strong>RESTful风格</strong>的编程。\\n为什么会有这种风格呢：\\nRESTful 风格接口实际情况是，我们在前后端在约定接口的时候，可以约定各种风格的接口，但是，RESTful&nbsp;接口是目前来说比较流行的，并且在运用中比较方便和常见的接口。</p>","autoDesc":true}');export{h as comp,u as data};
