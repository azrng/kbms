import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,a as n,d as s,e as l,b as t}from"./app-Bw62I61B.js";const c="/kbms/common/1614395265214-520da731-f1f8-425a-b04f-8751384a372b.png",u="/kbms/common/1614395265220-a433b08a-5d72-4da7-a473-e7ef0ec5eae6.png",r="/kbms/common/1614395265226-688e16bd-4e85-4350-8910-978077902779.png",d={},m=t("<p>网关配置：</p><table><thead><tr><th><strong>key</strong></th><th><strong>value</strong></th></tr></thead><tbody><tr><td>ReRoutes</td><td>告诉Ocelot如何处理上游的请求。</td></tr><tr><td>DownstreamPathTemplate</td><td>下游的路由模板，即真实处理请求的路径模板如：/api/...</td></tr><tr><td>DownstreamScheme</td><td>请求的方式，如：http,htttps</td></tr><tr><td>DownstreamHostAndPorts</td><td>下游的IP以及端口,可以有多个(如果使用负载均衡)，方便实现负载均衡，当然你也可以使用服务发现，实现下游服务的自动注册与发现，这篇文章不会讲解。</td></tr><tr><td>UpstreamPathTemplate</td><td>上游请求的模板，即用户真实请求的链接</td></tr><tr><td>UpstreamHttpMethod</td><td>上游请求的http方法，是个数组，你可以写多个。</td></tr><tr><td>GlobalConfiguration</td><td>顾名思义就是全局配置，此节点的配置允许覆盖ReRoutes里面的配置，你可以在这里进行通用的一些配置信息。</td></tr></tbody></table><p></p>",3),k=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"名称"),n("th",null,"key"),n("th",null,"value"),n("th",null,"示例"),n("th",null,"备注")])]),n("tbody",null,[n("tr",null,[n("td",null,"负载均衡"),n("td",null,"LoadBalancerOptions"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,'"LoadBalancerOptions": {'),n("td"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,'"Type": "RoundRobin"'),n("td"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,"}"),n("td"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,"请求缓存"),n("td",null,"FileCacheOptions"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",{"TtlSeconds:10,Region:somename":""},'"FileCacheOptions":'),n("td",null,"目前只支持get方式"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,"限流"),n("td",null,"RateLimitOptions"),n("td"),n("td"),n("td")]),n("tr",null,[n("td",null,'"RateLimitOptions": {'),n("td"),n("td"),n("td"),n("td")])])],-1),g=t(`<pre><code>        &quot;ClientWhitelist&quot;: [ &quot;admin&quot; ], // 白名单
        &quot;EnableRateLimiting&quot;: true, // 是否启用限流
        &quot;Period&quot;: &quot;1m&quot;, // 统计时间段：1s, 5m, 1h, 1d
        &quot;PeriodTimespan&quot;: 15, // 多少秒之后客户端可以重试
        &quot;Limit&quot;: 5 // 在统计时间段内允许的最大请求数量
      } | 对请求进行限流可以防止下游服务器因为访问过载而崩溃 |
</code></pre><p>| 熔断器 | QoSOptions | |    &quot;QoSOptions&quot;: {         &quot;ExceptionsAllowedBeforeBreaking&quot;: 2, // 允许多少个异常请求         &quot;DurationOfBreak&quot;: 5000, // 熔断的时间，单位为毫秒         &quot;TimeoutValue&quot;: 3000 // 如果下游请求的处理时间超过多少则视如该请求超时       } | 下游出现故障时候停止转发 |</p><p></p><h2 id="网关负载均衡" tabindex="-1"><a class="header-anchor" href="#网关负载均衡"><span>网关负载均衡</span></a></h2><p>当下游拥有多个节点的时候，我们可以通过DownstreamHostAndPorts来配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;UpstreamPathTemplate&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;/Api_A/{controller}/{action}&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;DownstreamPathTemplate&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;/api/{controller}/{action}&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;DownstreamScheme&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;LoadBalancer&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;LeastConnection&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;UpstreamHttpMethod&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;DownstreamHostAndPorts&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">5001</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;127.00.1&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">5002</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LoadBalancer是来决定负载的算法</strong></p><ul><li>LeastConnection:将请求发往最空闲的那个服务器</li><li>RoundRobin:轮流转发</li><li>NoLoadBalance:总是发往第一个请求或者是服务发现</li></ul><h2 id="请求缓存" tabindex="-1"><a class="header-anchor" href="#请求缓存"><span>请求缓存</span></a></h2><p>ocelot支持对下游服务的url进行缓存，并可以设置一个秒为单位的TTL使缓存过期。我们可以通过调用ocelot的管理API来清除某个region的缓存 为了在路由中使用缓存，需要在reroute中加入 &quot;FileCacheOptions&quot;: { &quot;TtlSeconds&quot;: 10, &quot;Region&quot;: &quot;somename&quot; } 该命令标识：缓存时间10秒，region（范围）。目前只支持get方式。</p><h2 id="限流" tabindex="-1"><a class="header-anchor" href="#限流"><span>限流</span></a></h2><p>对请求进行限流防止下游服务器因为访问过载而崩溃，我们只需要在路由下加一些简单配置就好。 对于限流，我们对每个服务进行如下配置：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;RateLimitOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;ClientWhitelist&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 白名单</span>
        <span class="token string">&quot;EnableRateLimiting&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否启用限流</span>
        <span class="token string">&quot;Period&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1m&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 统计时间段：1s, 5m, 1h, 1d</span>
        <span class="token string">&quot;PeriodTimespan&quot;</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token comment">// 多少秒之后客户端可以重试</span>
        <span class="token string">&quot;Limit&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">// 在统计时间段内允许的最大请求数量</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个接口在一分钟内请求超出5次，那么就提示 <img src="`+c+`" alt="image.png" loading="lazy"> 同时，我们可以做一些全局配置，在GlobalConfiguration下配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;RateLimitOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;DisableRateLimitHeaders&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Http头  X-Rate-Limit 和 Retry-After 是否禁用</span>
      <span class="token string">&quot;QuotaExceededMessage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Too many requests, are you OK?&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 当请求过载被截断时返回的消息</span>
      <span class="token string">&quot;HttpStatusCode&quot;</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token comment">// 当请求过载被截断时返回的http status</span>
      <span class="token string">&quot;ClientIdHeader&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;client_id&quot;</span> <span class="token comment">// 用来识别客户端的请求头，默认是 ClientId</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当请求超过限制会提示 <img src="`+u+'" alt="image.png" loading="lazy"> 带header（client_id:admin）访问clientservice，可以不受限制地访问API <img src="'+r+`" alt="image.png" loading="lazy"></p><h2 id="熔断器" tabindex="-1"><a class="header-anchor" href="#熔断器"><span>熔断器</span></a></h2><p>停止将请求转发到下游服务。这个是下游服务已经出现故障的时候自动停止访问。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;QoSOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token string">&quot;ExceptionsAllowedBeforeBreaking&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 允许多少个异常请求</span>
        <span class="token string">&quot;DurationOfBreak&quot;</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment">// 熔断的时间，单位为毫秒</span>
        <span class="token string">&quot;TimeoutValue&quot;</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment">// 如果下游请求的处理时间超过多少则视如该请求超时</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由"><span>动态路由</span></a></h2>`,20),v={href:"http://%E7%BD%91%E5%85%B3ip:%E7%BD%91%E5%85%B3%E7%AB%AF%E5%8F%A3/%E6%9C%8D%E5%8A%A1%E5%90%8D/%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token comment">//动态路由</span>
  <span class="token string">&quot;ReRoutes&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Aggregates&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;GlobalConfiguration&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;RequestIdKey&quot;</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&quot;ServiceDiscoveryProvider&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;Host&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;192.168.130.148&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Consul Service IP</span>
      <span class="token string">&quot;Port&quot;</span><span class="token punctuation">:</span> <span class="token number">8500</span> <span class="token comment">// Consul Service Port</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;RateLimitOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;DisableRateLimitHeaders&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Http头  X-Rate-Limit 和 Retry-After 是否禁用</span>
      <span class="token string">&quot;QuotaExceededMessage&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Too many requests, are you OK?&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 当请求过载被截断时返回的消息</span>
      <span class="token string">&quot;HttpStatusCode&quot;</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token comment">// 当请求过载被截断时返回的http status</span>
      <span class="token string">&quot;ClientIdHeader&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 用来识别客户端的请求头，默认是 ClientId</span>
      <span class="token string">&quot;ClientWhitelist&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 白名单</span>
      <span class="token string">&quot;EnableRateLimiting&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否启用限流</span>
      <span class="token string">&quot;Period&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1m&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 统计时间段：1s, 5m, 1h, 1d</span>
      <span class="token string">&quot;PeriodTimespan&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 多少秒之后客户端可以重试</span>
      <span class="token string">&quot;Limit&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">// 在统计时间段内允许的最大请求数量</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;QoSOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token string">&quot;ExceptionsAllowedBeforeBreaking&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">//允许多少个异常请求</span>
      <span class="token string">&quot;DurationOfBreak&quot;</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment">//熔断时间，单位毫秒</span>
      <span class="token string">&quot;TimeoutValue&quot;</span><span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment">//如果下游请求的处理时间超过多少则视如该请求超时</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;BaseUrl&quot;</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&quot;LoadBalancerOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;LeastConnection&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Key&quot;</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Expiry&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;DownstreamScheme&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;HttpHandlerOptions&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;AllowAutoRedirect&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token string">&quot;UseCookieContainer&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token string">&quot;UseTracing&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function b(h,f){const a=o("ExternalLinkIcon");return p(),i("div",null,[m,k,g,n("p",null,[s("如果我们一个网关里面涉及好多个API服务，那么就不能一个一个配置，之前的请求方式http://localhost:5000/A/home/get种也不再满足我们的需求，那么这个时候就应该使用动态路由 "),n("a",v,[s("http://网关ip:网关端口/服务名/请求地址"),l(a)]),s(" 例子：http://localhost:5000/AService/api/home/get 动态路由配置：")]),q])}const O=e(d,[["render",b],["__file","wangguan-ocelot.html.vue"]]),T=JSON.parse('{"path":"/middleware/smallService/wangguan/wangguan-ocelot.html","title":"网关-Ocelot","lang":"zh-CN","frontmatter":{"title":"网关-Ocelot","lang":"zh-CN","date":"2022-09-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"wangguan-ocelot","slug":"ez80ie","docsId":"32034292","description":"网关配置： | 熔断器 | QoSOptions | | \\"QoSOptions\\": { \\"ExceptionsAllowedBeforeBreaking\\": 2, // 允许多少个异常请求 \\"DurationOfBreak\\": 5000, // 熔断的时间，单位为毫秒 \\"TimeoutValue\\": 3000 // 如果下游请求的处理时间超过多少则视...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/wangguan/wangguan-ocelot.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"网关-Ocelot"}],["meta",{"property":"og:description","content":"网关配置： | 熔断器 | QoSOptions | | \\"QoSOptions\\": { \\"ExceptionsAllowedBeforeBreaking\\": 2, // 允许多少个异常请求 \\"DurationOfBreak\\": 5000, // 熔断的时间，单位为毫秒 \\"TimeoutValue\\": 3000 // 如果下游请求的处理时间超过多少则视..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614395265214-520da731-f1f8-425a-b04f-8751384a372b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-09T14:02:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-09T14:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网关-Ocelot\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614395265214-520da731-f1f8-425a-b04f-8751384a372b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614395265220-a433b08a-5d72-4da7-a473-e7ef0ec5eae6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614395265226-688e16bd-4e85-4350-8910-978077902779.png\\"],\\"datePublished\\":\\"2022-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-09T14:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"网关负载均衡","slug":"网关负载均衡","link":"#网关负载均衡","children":[]},{"level":2,"title":"请求缓存","slug":"请求缓存","link":"#请求缓存","children":[]},{"level":2,"title":"限流","slug":"限流","link":"#限流","children":[]},{"level":2,"title":"熔断器","slug":"熔断器","link":"#熔断器","children":[]},{"level":2,"title":"动态路由","slug":"动态路由","link":"#动态路由","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1699538549000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"middleware/smallService/wangguan/wangguan-ocelot.md","localizedDate":"2022年9月12日","excerpt":"<p>网关配置：</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>key</strong></th>\\n<th><strong>value</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ReRoutes</td>\\n<td>告诉Ocelot如何处理上游的请求。</td>\\n</tr>\\n<tr>\\n<td>DownstreamPathTemplate</td>\\n<td>下游的路由模板，即真实处理请求的路径模板如：/api/...</td>\\n</tr>\\n<tr>\\n<td>DownstreamScheme</td>\\n<td>请求的方式，如：http,htttps</td>\\n</tr>\\n<tr>\\n<td>DownstreamHostAndPorts</td>\\n<td>下游的IP以及端口,可以有多个(如果使用负载均衡)，方便实现负载均衡，当然你也可以使用服务发现，实现下游服务的自动注册与发现，这篇文章不会讲解。</td>\\n</tr>\\n<tr>\\n<td>UpstreamPathTemplate</td>\\n<td>上游请求的模板，即用户真实请求的链接</td>\\n</tr>\\n<tr>\\n<td>UpstreamHttpMethod</td>\\n<td>上游请求的http方法，是个数组，你可以写多个。</td>\\n</tr>\\n<tr>\\n<td>GlobalConfiguration</td>\\n<td>顾名思义就是全局配置，此节点的配置允许覆盖ReRoutes里面的配置，你可以在这里进行通用的一些配置信息。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{O as comp,T as data};
