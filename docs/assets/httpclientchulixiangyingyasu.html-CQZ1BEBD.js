import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as i}from"./app-DMmdIwn0.js";const l={},r=i(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>服务端的主要工作就是根据Content-Encoding头信息判断采用哪种方式压缩并返回。有压缩就有解压，而解压的工作就是在请求客户端处理的。比如浏览器，这是我们最常用的Http客户端，许多浏览器都是默认在我们发出请求的时候(比如我们浏览网页的时候)在Request Head中添加Content-Encoding，然后根据响应信息处理相关解压。这些都源于浏览器已经内置了关于请求压缩和解压的机制。类似的还有许多，比如常用的代理抓包工具Filder也是内置这种机制的。只不过需要手动去处理，但实现方式都是一样的。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="httpclient" tabindex="-1"><a class="header-anchor" href="#httpclient"><span>HttpClient</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//自定义HttpClientHandler实例</span>
<span class="token class-name">HttpClientHandler</span> httpClientHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    AutomaticDecompression <span class="token operator">=</span> DecompressionMethods<span class="token punctuation">.</span>GZip
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//使用传递自定义HttpClientHandler实例的构造函数</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpClientHandler<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;http://MyDemo/Home/GetPerson?userId=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DecompressionMethods的枚举源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DecompressionMethods</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用所有压缩解压缩算法。</span>
    All <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token comment">// 不使用解压</span>
    None <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用gzip解压算法</span>
    GZip <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用deflate解压算法</span>
    Deflate <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用Brotli解压算法</span>
    Brotli <span class="token operator">=</span> <span class="token number">0x4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该枚举默认都是针对常用输出解压算法.</p><h3 id="httpclientfactory" tabindex="-1"><a class="header-anchor" href="#httpclientfactory"><span>HttpClientFactory</span></a></h3><p>HttpClientFactory的大致工作方式默认PrimaryHandler传递的就是HttpClientHandler实例，而且在我们注册HttpClientFactory的时候是可以通过ConfigurePrimaryHttpMessageHandler自定义PrimaryHandler的默认值，接下来我们具体代码实现</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;mydemo&quot;</span><span class="token punctuation">,</span> c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    c<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://MyDemo/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigurePrimaryHttpMessageHandler</span><span class="token punctuation">(</span>provider<span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    AutomaticDecompression <span class="token operator">=</span> DecompressionMethods<span class="token punctuation">.</span>GZip
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在注册HttpClientFactory的时候还可以使用自定义的HttpClient，具体的使用方式是这样的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;mydemo&quot;</span><span class="token punctuation">,</span> c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    c<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://MyDemo/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureHttpClient</span><span class="token punctuation">(</span>provider <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    AutomaticDecompression <span class="token operator">=</span> DecompressionMethods<span class="token punctuation">.</span>GZip
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpClient确实帮我们做了好多事情，只需要简单的配置一下就开启了针对响应压缩的处理。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,15),u={href:"https://mp.weixin.qq.com/s/64QO0R8qxRfYOgsOwav5hw",target:"_blank",rel:"noopener noreferrer"};function d(m,k){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[s("https://mp.weixin.qq.com/s/64QO0R8qxRfYOgsOwav5hw"),c(a)]),s(" | .Net Core HttpClient处理响应压缩")])])}const g=t(l,[["render",d],["__file","httpclientchulixiangyingyasu.html.vue"]]),b=JSON.parse('{"path":"/dotnet/api/remoteProcedureCall/httpclientchulixiangyingyasu.html","title":"HttpClient处理响应压缩","lang":"zh-CN","frontmatter":{"title":"HttpClient处理响应压缩","lang":"zh-CN","date":"2023-08-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"httpclientchulixiangyingyasu","slug":"nxoh2v","docsId":"64462985","description":"概述 服务端的主要工作就是根据Content-Encoding头信息判断采用哪种方式压缩并返回。有压缩就有解压，而解压的工作就是在请求客户端处理的。比如浏览器，这是我们最常用的Http客户端，许多浏览器都是默认在我们发出请求的时候(比如我们浏览网页的时候)在Request Head中添加Content-Encoding，然后根据响应信息处理相关解压。这...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/remoteProcedureCall/httpclientchulixiangyingyasu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"HttpClient处理响应压缩"}],["meta",{"property":"og:description","content":"概述 服务端的主要工作就是根据Content-Encoding头信息判断采用哪种方式压缩并返回。有压缩就有解压，而解压的工作就是在请求客户端处理的。比如浏览器，这是我们最常用的Http客户端，许多浏览器都是默认在我们发出请求的时候(比如我们浏览网页的时候)在Request Head中添加Content-Encoding，然后根据响应信息处理相关解压。这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-09T07:25:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T07:25:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HttpClient处理响应压缩\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-09T07:25:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"HttpClient","slug":"httpclient","link":"#httpclient","children":[]},{"level":3,"title":"HttpClientFactory","slug":"httpclientfactory","link":"#httpclientfactory","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709969108000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.75,"words":525},"filePathRelative":"dotnet/api/remoteProcedureCall/httpclientchulixiangyingyasu.md","localizedDate":"2023年8月6日","excerpt":"<h2>概述</h2>\\n<p>服务端的主要工作就是根据Content-Encoding头信息判断采用哪种方式压缩并返回。有压缩就有解压，而解压的工作就是在请求客户端处理的。比如浏览器，这是我们最常用的Http客户端，许多浏览器都是默认在我们发出请求的时候(比如我们浏览网页的时候)在Request Head中添加Content-Encoding，然后根据响应信息处理相关解压。这些都源于浏览器已经内置了关于请求压缩和解压的机制。类似的还有许多，比如常用的代理抓包工具Filder也是内置这种机制的。只不过需要手动去处理，但实现方式都是一样的。</p>\\n<h2>操作</h2>\\n<h3>HttpClient</h3>","autoDesc":true}');export{g as comp,b as data};
