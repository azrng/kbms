import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as l,b as n,e as s,f as o,d as c}from"./app-D8HBJYTp.js";const i={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),r={href:"https://www.freeformatter.com/xpath-tester.html#before-output",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="xmlns" tabindex="-1"><a class="header-anchor" href="#xmlns"><span>xmlns</span></a></h3><p>在XML文档中，xmlns属性是用来定义命名空间的。命名空间是一种将不同XML元素分组的机制，以避免命名冲突。它允许在XML文档中使用相同名称的元素，而不会产生冲突。</p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PRPA_IN201306UV02</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urn:hl7-org:v3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>acknowledgement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>acknowledgementDetail</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 元素内容 --&gt;</span>
<span class="token code keyword">        &lt;/acknowledgementDetail&gt;
    &lt;/acknowledgement&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PRPA_IN201306UV02</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的XML示例中，xmlns=&quot;urn:hl7-org:v3&quot;定义了默认的命名空间为urn:hl7-org:v3。这意味着在整个XML文档中，如果没有其他显式的命名空间声明，所有元素都属于该命名空间。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="xml序列化" tabindex="-1"><a class="header-anchor" href="#xml序列化"><span>xml序列化</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// xml序列化，目标类型必须具有无参构造函数，只会序列化public属性</span>
<span class="token class-name"><span class="token keyword">var</span></span> xmlFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlSerializer</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">@&quot;C:\\Users\\xfh\\Desktop\\stream.xml&quot;</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 序列化</span>
    xmlFormatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 写入XML文件中</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sr<span class="token punctuation">.</span>EndOfStream <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sw<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stream<span class="token punctuation">.</span>Position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 反序列化</span>
    <span class="token class-name"><span class="token keyword">var</span></span> newP3 <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>xmlFormatter<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除样式" tabindex="-1"><a class="header-anchor" href="#去除样式"><span>去除样式</span></a></h3><p>去除xml文本的样式，只留下文本内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> xmlString <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\temp\\\\2222222.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> xmlTxt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 XmlTextReader 对象</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlTextReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringReader</span><span class="token punctuation">(</span>xmlString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    reader<span class="token punctuation">.</span>WhitespaceHandling <span class="token operator">=</span> WhitespaceHandling<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span>NodeType <span class="token operator">==</span> XmlNodeType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            xmlTxt<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xmlTxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取节点" tabindex="-1"><a class="header-anchor" href="#读取节点"><span>读取节点</span></a></h3><h4 id="带命名空间" tabindex="-1"><a class="header-anchor" href="#带命名空间"><span>带命名空间</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> xml <span class="token operator">=</span> <span class="token string">@&quot;&lt;PRPA_IN201306UV02 xmlns=&quot;&quot;urn:hl7-org:v3&quot;&quot;&gt;
                  &lt;acknowledgement typeCode=&quot;&quot;AE&quot;&quot;&gt;
                      &lt;acknowledgementDetail&gt;
                          &lt;text value=&quot;&quot;未查询到数据&quot;&quot; /&gt;
                      &lt;/acknowledgementDetail&gt;
                      &lt;acknowledgementDetail&gt;
                          &lt;text value=&quot;&quot;数据已过期&quot;&quot; /&gt;
                      &lt;/acknowledgementDetail&gt;
                  &lt;/acknowledgement&gt;
              &lt;/PRPA_IN201306UV02&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">XmlDocument</span> xmlDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlDoc<span class="token punctuation">.</span><span class="token function">LoadXml</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置带有命名空间的 XmlNamespaceManager</span>
<span class="token class-name">XmlNamespaceManager</span> nsMgr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlNamespaceManager</span><span class="token punctuation">(</span>xmlDoc<span class="token punctuation">.</span>NameTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
nsMgr<span class="token punctuation">.</span><span class="token function">AddNamespace</span><span class="token punctuation">(</span><span class="token string">&quot;ns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;urn:hl7-org:v3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询所有text节点的值 如果是单个的需要使用SelectSingleNode</span>
<span class="token class-name">XmlNodeList</span> textNodes <span class="token operator">=</span> xmlDoc<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span><span class="token string">&quot;//ns:text&quot;</span><span class="token punctuation">,</span> nsMgr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">XmlNode</span> textNode <span class="token keyword">in</span> textNodes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">string</span></span> textValue <span class="token operator">=</span> textNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;text值为：&quot;</span> <span class="token operator">+</span> textValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共类" tabindex="-1"><a class="header-anchor" href="#公共类"><span>公共类</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>    public class XSerializer
    <span class="token punctuation">{</span>
        <span class="token comment">/// &lt;summary&gt;</span>
        <span class="token comment">/// 将对象序列化为xml字符串</span>
        <span class="token comment">/// &lt;/summary&gt;</span>
        <span class="token comment">/// &lt;typeparam name=&quot;T&quot;&gt;类型&lt;peparam&gt;</span>
        <span class="token comment">/// &lt;param name=&quot;t&quot;&gt;对象&lt;/param&gt;</span>
        public static string ObjectToXml&lt;T&gt;(T t) where T <span class="token operator">:</span> class
        <span class="token punctuation">{</span>
            XmlSerializer formatter = new XmlSerializer(typeof(T));
            using (MemoryStream stream = new MemoryStream())
            <span class="token punctuation">{</span>
                XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
                namespaces.Add(string.Empty<span class="token punctuation">,</span> string.Empty);
                formatter.Serialize(stream<span class="token punctuation">,</span> t<span class="token punctuation">,</span> namespaces);
                string result = Encoding.UTF8.GetString(stream.ToArray());
                return result;
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/// &lt;summary&gt;</span>
        <span class="token comment">/// 序列化成XML 清空格式</span>
        <span class="token comment">/// &lt;/summary&gt;</span>
        public static string ObjectToXml&lt;T&gt;(T t<span class="token punctuation">,</span> Encoding encoding) where T <span class="token operator">:</span> class
        <span class="token punctuation">{</span>
            XmlSerializer formatter = new XmlSerializer(typeof(T));
            using MemoryStream stream = new MemoryStream();
            XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
            namespaces.Add(string.Empty<span class="token punctuation">,</span> string.Empty);
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stream<span class="token punctuation">,</span> encoding);
            xmlTextWriter.Formatting = System.Xml.Formatting.None;
            formatter.Serialize(xmlTextWriter<span class="token punctuation">,</span> t<span class="token punctuation">,</span> namespaces);
            xmlTextWriter.Flush();
            xmlTextWriter.Close();
            string result = encoding.GetString(stream.ToArray());
            return result;
        <span class="token punctuation">}</span>

        <span class="token comment">/// &lt;summary&gt;</span>
        <span class="token comment">/// 字符串转换为对象</span>
        <span class="token comment">/// &lt;/summary&gt;</span>
        public static T XmlToObject&lt;T&gt;(string xml) where T <span class="token operator">:</span> class
        <span class="token punctuation">{</span>
            XmlSerializer formatter = new XmlSerializer(typeof(T));
            using (MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(xml)))
            <span class="token punctuation">{</span>
                T result = formatter.Deserialize(ms) as T;
                return result;
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function m(k,v){const a=t("ExternalLinkIcon");return p(),l("div",null,[u,n("p",null,[s("xml path："),n("a",r,[s("https://www.freeformatter.com/xpath-tester.html#before-output"),o(a)])]),d])}const h=e(i,[["render",m],["__file","xmlxuliehua.html.vue"]]),x=JSON.parse('{"path":"/dotnet/base/serialize/xmlxuliehua.html","title":"XML序列化","lang":"zh-CN","frontmatter":{"title":"XML序列化","lang":"zh-CN","date":"2023-07-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"xmlxuliehua","slug":"qdi3od","docsId":"65746977","description":"概述 xml path：https://www.freeformatter.com/xpath-tester.html#before-output 概念 xmlns 在XML文档中，xmlns属性是用来定义命名空间的。命名空间是一种将不同XML元素分组的机制，以避免命名冲突。它允许在XML文档中使用相同名称的元素，而不会产生冲突。 在上面的XML示例中...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/xmlxuliehua.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"XML序列化"}],["meta",{"property":"og:description","content":"概述 xml path：https://www.freeformatter.com/xpath-tester.html#before-output 概念 xmlns 在XML文档中，xmlns属性是用来定义命名空间的。命名空间是一种将不同XML元素分组的机制，以避免命名冲突。它允许在XML文档中使用相同名称的元素，而不会产生冲突。 在上面的XML示例中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XML序列化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"xmlns","slug":"xmlns","link":"#xmlns","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"xml序列化","slug":"xml序列化","link":"#xml序列化","children":[]},{"level":3,"title":"去除样式","slug":"去除样式","link":"#去除样式","children":[]},{"level":3,"title":"读取节点","slug":"读取节点","link":"#读取节点","children":[{"level":4,"title":"带命名空间","slug":"带命名空间","link":"#带命名空间","children":[]}]},{"level":3,"title":"公共类","slug":"公共类","link":"#公共类","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"dotnet/base/serialize/xmlxuliehua.md","localizedDate":"2023年7月6日","excerpt":"<h2>概述</h2>\\n<p>xml path：<a href=\\"https://www.freeformatter.com/xpath-tester.html#before-output\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.freeformatter.com/xpath-tester.html#before-output</a></p>\\n<h2>概念</h2>\\n<h3>xmlns</h3>\\n<p>在XML文档中，xmlns属性是用来定义命名空间的。命名空间是一种将不同XML元素分组的机制，以避免命名冲突。它允许在XML文档中使用相同名称的元素，而不会产生冲突。</p>","autoDesc":true}');export{h as comp,x as data};
