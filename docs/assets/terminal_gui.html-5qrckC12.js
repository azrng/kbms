import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,a as n,d as s,e as t,b as c}from"./app-Bw62I61B.js";const l={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),r=n("p",null,"Terminal.Gui 是一个使用 C## 开发的基于控制台的工具库。这个框架的设计目的是， 在单色终端和支持鼠标的现代彩色终端上， 开发人员也可以非常轻松地进行开发并运行程序。 Terminal.Gui 是跨平台的, 它适用于 Windows、Linux 和 MacOS。",-1),d={href:"https://github.com/gui-cs/Terminal.Gui",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>需要提前安装nuget包：Terminal.Gui</p><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Terminal<span class="token punctuation">.</span>Gui</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Application<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> n <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Question&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;你喜欢这个控制台应用吗?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Application<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h3 id="登录" tabindex="-1"><a class="header-anchor" href="#登录"><span>登录</span></a></h3><p>使用用户名和密码进行登录的一个示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// A simple Terminal.Gui example in C## - using C## 9.0 Top-level statements</span>

<span class="token keyword">using</span> <span class="token namespace">Terminal<span class="token punctuation">.</span>Gui</span><span class="token punctuation">;</span>

Application<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleWindow<span class="token punctuation">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span>WriteLine <span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Username: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token punctuation">(</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span>Application<span class="token punctuation">.</span>Top<span class="token punctuation">)</span><span class="token punctuation">.</span>usernameText<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Before the application exits, reset Terminal.Gui for clean shutdown</span>
Application<span class="token punctuation">.</span>Shutdown <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Defines a top-level window with border and title</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TextField</span> usernameText<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> ExampleWindow <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Title <span class="token operator">=</span> <span class="token string">&quot;Example App (Ctrl+Q to quit)&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// Create input components and labels</span>
        <span class="token class-name"><span class="token keyword">var</span></span> usernameLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            Text <span class="token operator">=</span> <span class="token string">&quot;Username:&quot;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        usernameText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextField</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Position text field adjacent to the label</span>
            X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Right <span class="token punctuation">(</span>usernameLabel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>

            <span class="token comment">// Fill remaining horizontal space</span>
            Width <span class="token operator">=</span> Dim<span class="token punctuation">.</span>Fill <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> passwordLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Label</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Text <span class="token operator">=</span> <span class="token string">&quot;Password:&quot;</span><span class="token punctuation">,</span>
            X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Left <span class="token punctuation">(</span>usernameLabel<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Bottom <span class="token punctuation">(</span>usernameLabel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> passwordText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextField</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Secret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">// align with the text box above</span>
            X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Left <span class="token punctuation">(</span>usernameText<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Top <span class="token punctuation">(</span>passwordLabel<span class="token punctuation">)</span><span class="token punctuation">,</span>
            Width <span class="token operator">=</span> Dim<span class="token punctuation">.</span>Fill <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Create login button</span>
        <span class="token class-name"><span class="token keyword">var</span></span> btnLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Text <span class="token operator">=</span> <span class="token string">&quot;Login&quot;</span><span class="token punctuation">,</span>
            Y <span class="token operator">=</span> Pos<span class="token punctuation">.</span><span class="token function">Bottom</span><span class="token punctuation">(</span>passwordLabel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token comment">// center the login button horizontally</span>
            X <span class="token operator">=</span> Pos<span class="token punctuation">.</span>Center <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            IsDefault <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// When login button is clicked display a message popup</span>
        btnLogin<span class="token punctuation">.</span>Clicked <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>usernameText<span class="token punctuation">.</span>Text <span class="token operator">==</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> passwordText<span class="token punctuation">.</span>Text <span class="token operator">==</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                MessageBox<span class="token punctuation">.</span>Query <span class="token punctuation">(</span><span class="token string">&quot;Logging In&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Login Successful&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Application<span class="token punctuation">.</span>RequestStop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                MessageBox<span class="token punctuation">.</span>ErrorQuery <span class="token punctuation">(</span><span class="token string">&quot;Logging In&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Incorrect username or password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Add the views to the Window</span>
        Add <span class="token punctuation">(</span>usernameLabel<span class="token punctuation">,</span> usernameText<span class="token punctuation">,</span> passwordLabel<span class="token punctuation">,</span> passwordText<span class="token punctuation">,</span> btnLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h2><h3 id="terminal-gui-designer" tabindex="-1"><a class="header-anchor" href="#terminal-gui-designer"><span>Terminal Gui Designer</span></a></h3><p>TerminalGuiDesigner 使用 CodeDom 和 Roslyn 构建，可让您通过拖放来创建复杂的视图，就像您熟悉和喜爱的 WinForms 设计器一样。</p><h3 id="dotnet-dump-分析器" tabindex="-1"><a class="header-anchor" href="#dotnet-dump-分析器"><span>Dotnet Dump 分析器</span></a></h3><p>这是一个基于gui.cs 的小型ui，可以和 dotnet dump 一起使用，它能够列出所有受支持的 SOS 命令的输出。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,14),m={href:"https://mp.weixin.qq.com/s/QVQi0yV5Z9gEwLEJ5FQiVw",target:"_blank",rel:"noopener noreferrer"};function v(b,g){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,r,n("p",null,[s("仓库地址："),n("a",d,[s("https://github.com/gui-cs/Terminal.Gui"),t(a)])]),k,n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/QVQi0yV5Z9gEwLEJ5FQiVw"),t(a)]),s(" | Terminal.Gui - 适用于 .NET 的跨平台终端 UI 工具包")])])}const T=e(l,[["render",v],["__file","terminal_gui.html.vue"]]),x=JSON.parse('{"path":"/dotnet/console/jiemian/terminal_gui.html","title":"Terminal.Gui","lang":"zh-CN","frontmatter":{"title":"Terminal.Gui","lang":"zh-CN","date":"2023-08-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"terminal_gui","slug":"mqyu1tvofrkgyphz","docsId":"135412143","description":"概述 Terminal.Gui 是一个使用 C## 开发的基于控制台的工具库。这个框架的设计目的是， 在单色终端和支持鼠标的现代彩色终端上， 开发人员也可以非常轻松地进行开发并运行程序。 Terminal.Gui 是跨平台的, 它适用于 Windows、Linux 和 MacOS。 仓库地址：https://github.com/gui-cs/Term...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/console/jiemian/terminal_gui.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Terminal.Gui"}],["meta",{"property":"og:description","content":"概述 Terminal.Gui 是一个使用 C## 开发的基于控制台的工具库。这个框架的设计目的是， 在单色终端和支持鼠标的现代彩色终端上， 开发人员也可以非常轻松地进行开发并运行程序。 Terminal.Gui 是跨平台的, 它适用于 Windows、Linux 和 MacOS。 仓库地址：https://github.com/gui-cs/Term..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Terminal.Gui\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"登录","slug":"登录","link":"#登录","children":[]}]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[{"level":3,"title":"Terminal Gui Designer","slug":"terminal-gui-designer","link":"#terminal-gui-designer","children":[]},{"level":3,"title":"Dotnet Dump 分析器","slug":"dotnet-dump-分析器","link":"#dotnet-dump-分析器","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.64,"words":491},"filePathRelative":"dotnet/console/jiemian/terminal_gui.md","localizedDate":"2023年8月5日","excerpt":"<h2>概述</h2>\\n<p>Terminal.Gui 是一个使用 C## 开发的基于控制台的工具库。这个框架的设计目的是， 在单色终端和支持鼠标的现代彩色终端上， 开发人员也可以非常轻松地进行开发并运行程序。\\nTerminal.Gui 是跨平台的, 它适用于 Windows、Linux 和 MacOS。</p>\\n<p>仓库地址：<a href=\\"https://github.com/gui-cs/Terminal.Gui\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/gui-cs/Terminal.Gui</a></p>","autoDesc":true}');export{T as comp,x as data};
