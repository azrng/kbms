import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-Bfb6-vFH.js";const p={},e=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>数据库表之间的关系：一对一、一对多、多对多。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>三部曲：实体类中配置关系属性；FluentAPI关系配置；使用关系操作。 一对一：HasOne(xxx).WithOne(xxx); 一对多：HasOne(xxx).WithMany(xxx); 多对多：HasMany(xxx).WithMany(xxx);</p><h3 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置"><span>基础配置</span></a></h3><p>配置基础类和约定配置</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class EntityTypeConfiguration<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> : IEntityTypeConfiguration<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token keyword">where</span> T : DataEntity
{
    <span class="token keyword">public</span> virtual void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        <span class="token keyword">Type</span> genericType <span class="token operator">=</span> typeof<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>HasKey<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;主键&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>ToTable<span class="token punctuation">(</span>genericType<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>ToLower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        var convertDateTime <span class="token operator">=</span> new ValueConverter<span class="token operator">&lt;</span><span class="token keyword">DateTime</span><span class="token punctuation">,</span> <span class="token keyword">DateTime</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">&gt;</span> v<span class="token punctuation">.</span>ToUniversalTime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v <span class="token operator">=</span><span class="token operator">&gt;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>CreateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasConversion<span class="token punctuation">(</span>convertDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>ModifyTime<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasConversion<span class="token punctuation">(</span>convertDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;修改时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}

<span class="token keyword">public</span> abstract class DataEntity
{
    <span class="token keyword">public</span> long Id { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> new Snowflake<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NewId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个生成雪花id的公共类</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 创建时间</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">DateTime</span> CreateTime { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> <span class="token keyword">DateTime</span><span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 创建时间</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">DateTime</span> ModifyTime { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> <span class="token keyword">DateTime</span><span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置上下文</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class OpenDbContext : DbContext
{
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span><span class="token keyword">Group</span><span class="token operator">&gt;</span> Groups { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span><span class="token keyword">User</span><span class="token operator">&gt;</span> Users { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Score<span class="token operator">&gt;</span> Scores { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span> Tests { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span> Employees { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span> Roles { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Address<span class="token operator">&gt;</span> Addresses { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    protected override void OnConfiguring<span class="token punctuation">(</span>DbContextOptionsBuilder optionsBuilder<span class="token punctuation">)</span>
    {
        const string connection <span class="token operator">=</span> <span class="token string">&quot;Host=localhost;Username=postgres;Password=123456;Database=test&quot;</span><span class="token punctuation">;</span>

        optionsBuilder<span class="token punctuation">.</span>UseNpgsql<span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

        optionsBuilder<span class="token punctuation">.</span>UseSnakeCaseNamingConvention<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置蛇形命名</span>
                                                      <span class="token comment">//显示敏感数据日志</span>
        optionsBuilder<span class="token punctuation">.</span>EnableSensitiveDataLogging<span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//输出标准日志</span>
        optionsBuilder<span class="token punctuation">.</span>UseLoggerFactory<span class="token punctuation">(</span>MyLogFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//输出简单日志  如果不配置日志级别或者日志级别低一点可以看到整个ef执行的日志过程</span>
        <span class="token comment">//optionsBuilder.LogTo(msg =&gt; Console.WriteLine(msg), LogLevel.Information);</span>

        <span class="token comment">////简单过滤</span>
        <span class="token comment">//optionsBuilder.LogTo(msg =&gt;</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    if (!msg.Contains(&quot;CommandExecuting&quot;))</span>
        <span class="token comment">//        return;</span>
        <span class="token comment">//    Console.WriteLine(msg);</span>
        <span class="token comment">//});</span>

        base<span class="token punctuation">.</span>OnConfiguring<span class="token punctuation">(</span>optionsBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    }

    protected override void OnModelCreating<span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>OnModelCreating<span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//会自动读取UserInfoetc</span>
        modelBuilder<span class="token punctuation">.</span>ApplyConfigurationsFromAssembly<span class="token punctuation">(</span>GetType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 输出SQL的日志配置</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> static readonly ILoggerFactory MyLogFactory <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token keyword">Create</span><span class="token punctuation">(</span>build <span class="token operator">=</span><span class="token operator">&gt;</span>
    {
        <span class="token comment">//日志过滤</span>
        build<span class="token punctuation">.</span>AddFilter<span class="token punctuation">(</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> category <span class="token operator">=</span><span class="token operator">=</span> DbLoggerCategory<span class="token punctuation">.</span><span class="token keyword">Database</span><span class="token punctuation">.</span>Command<span class="token punctuation">.</span>Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">level</span> <span class="token operator">=</span><span class="token operator">=</span> LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token punctuation">;</span>
        build<span class="token punctuation">.</span>AddConsole<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用于控制台程序的输出</span>
    }<span class="token punctuation">)</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>一对一</span></a></h3><p>就比如说一个员工对应一个地址。员工表和地址表是一对一的关联，地址表里面对应一个员工ID。</p><blockquote><p>一般情况下我们不显式创建主外键关系，而是一种逻辑上的主外键关系。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 员工表</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Employee : DataEntity
{
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 员工姓名</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 角色ID</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> long RoleId { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 地址信息 一个用户对应一个地址  一对一</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> Address Address { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
}
<span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 地址表（与用户表一对多关系，一个用户多应多个地址）</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Address : DataEntity
{
    <span class="token comment">///&lt;summary&gt;</span>
    <span class="token comment">///省份</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Province { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 员工ID</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> long EmployeeId { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 导航属性 一个地址对应一个用户  一对一</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> Employee Employee { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必须显式在其中一个实体类中声明一个外键属性。</p><p>配置模型约定</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class EmployeeEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;员工名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>RoleId<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;角色ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
<span class="token keyword">public</span> class AddressEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Address<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Address<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//builder.ToTable(&quot;group&quot;, &quot;user&quot;);</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Province<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;省份&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>EmployeeId<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;员工ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//一对一  一个用户对应一个地址信息</span>
        builder<span class="token punctuation">.</span>HasOne<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employee<span class="token punctuation">)</span><span class="token punctuation">.</span>WithOne<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加和查询操作</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>var employee <span class="token operator">=</span> new Employee
{
    RoleId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>
}<span class="token punctuation">;</span>

var address <span class="token operator">=</span> new Address
{
    Province <span class="token operator">=</span> <span class="token string">&quot;河南省&quot;</span><span class="token punctuation">,</span>
    Employee <span class="token operator">=</span> employee<span class="token punctuation">,</span>
}<span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>Addresses<span class="token punctuation">.</span>AddAsync<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>SaveChangesAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

var address <span class="token operator">=</span> await db<span class="token punctuation">.</span>Addresses<span class="token punctuation">.</span>Include<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employee<span class="token punctuation">)</span><span class="token punctuation">.</span>FirstOrDefaultAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;员工信息 {address.Employee?.Name} 地址：{address.Province}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多"><span>一对多</span></a></h3><p>一个角色对应多个员工，员工表和角色表是一对多的关系。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 角色表</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Role : DataEntity
{
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 角色名称</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 导航属性 一个角色对应多个用户</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> ICollection<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span> Employees { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}

<span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 员工表</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Employee : DataEntity
{
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 员工姓名</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 角色ID</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> long RoleId { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 角色  一个用户对应一个角色</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> Role Role { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置两个表的约定</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class RoleEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;员工名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
<span class="token keyword">public</span> class EmployeeEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;员工名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>RoleId<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;角色ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//双向导航属性：一个角色对用多个用户 一对多  指定外键列：.HasForeignKey(t=&gt;t.RoleId) </span>
        builder<span class="token punctuation">.</span>HasOne<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">.</span>WithMany<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employees<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//单向导航属性</span>
        <span class="token comment">//builder.HasOne&lt;Role&gt;(t =&gt; t.Role).WithMany().IsRequired();</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>双向导航属性：上面的列子就是双向导航属性，在两个类中都配置导航属性，对于主从结构的“一对多关系，一般是声明双向导航属性” 单向导航属性：只在多的端配置导航属性，使用场景：当一个表属于被很多表引用的场景，则用单向导航属性，否则可以自由考虑</p></blockquote><p>添加和查询操作</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//添加一对多</span>
var role <span class="token operator">=</span> new Role
{
    Name <span class="token operator">=</span> <span class="token string">&quot;超级管理员&quot;</span>
}<span class="token punctuation">;</span>

var employee1 <span class="token operator">=</span> new Employee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employee1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
role<span class="token punctuation">.</span>Employees<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>employee1<span class="token punctuation">)</span><span class="token punctuation">;</span>

var employee2 <span class="token operator">=</span> new Employee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
employee2<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;李思&quot;</span><span class="token punctuation">;</span>
role<span class="token punctuation">.</span>Employees<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>employee2<span class="token punctuation">)</span><span class="token punctuation">;</span>

db<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>SaveChangesAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//查询</span>
<span class="token comment">//查询一对多:查询角色信息以及角色对应的员工信息  两个表left join</span>
var role <span class="token operator">=</span> await db<span class="token punctuation">.</span>Roles
    <span class="token punctuation">.</span>Include<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employees<span class="token punctuation">)</span><span class="token comment">//把关联的对象也查询出来</span>
    <span class="token punctuation">.</span>FirstOrDefaultAsync<span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>Name <span class="token operator">=</span><span class="token operator">=</span> <span class="token string">&quot;超级管理员&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//查询员工对应的角色信息  两个表inner join</span>
var employee <span class="token operator">=</span> await db<span class="token punctuation">.</span>Employees<span class="token punctuation">.</span>Include<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">.</span>FirstOrDefaultAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于配置一对多的问题，在多的一段配置页可以，在单的一端也可以配置，但是考虑到有单向导航属性的可能，我们一般用HasOne().WithMany()。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">//反着配置：多个用户对应一个角色</span>
builder<span class="token punctuation">.</span>HasMany<span class="token operator">&lt;</span>Employee<span class="token operator">&gt;</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employees<span class="token punctuation">)</span><span class="token punctuation">.</span>WithOne<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//正着配置：一个角色对应多个员工</span>
builder<span class="token punctuation">.</span>HasOne<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">.</span>WithMany<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Employees<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多"><span>多对多</span></a></h3><blockquote><p>EFCore5.0开始，才正式支持多对多，多对多是需要中间表的。</p></blockquote><p>角色和菜单是多对多关系，一个角色可以设置访问多个菜单，一个菜单可以设置被多个角色访问。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 角色表</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Role : DataEntity
{
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 角色名称</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 菜单集合  多对多</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Menu<span class="token operator">&gt;</span> Menus { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> } <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Menu<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
<span class="token comment">/// &lt;summary&gt;</span>
<span class="token comment">/// 菜单表</span>
<span class="token comment">/// &lt;/summary&gt;</span>
<span class="token keyword">public</span> class Menu : DataEntity
{
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// 菜单名称</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token keyword">public</span> string Name { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span> Roles { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }<span class="token operator">=</span>new List<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体约定</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">public</span> class RoleEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;角色名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}

<span class="token keyword">public</span> class MenuEtc : EntityTypeConfiguration<span class="token operator">&lt;</span>Menu<span class="token operator">&gt;</span>
{
    <span class="token keyword">public</span> override void Configure<span class="token punctuation">(</span>EntityTypeBuilder<span class="token operator">&lt;</span>Menu<span class="token operator">&gt;</span> builder<span class="token punctuation">)</span>
    {
        base<span class="token punctuation">.</span>Configure<span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Property<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span>IsRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsUnicode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasMaxLength<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HasDefaultValue<span class="token punctuation">(</span>string<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span>HasComment<span class="token punctuation">(</span><span class="token string">&quot;菜单名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//多对多 多个角色对应多个菜单  并且设置中间表</span>
        builder<span class="token punctuation">.</span>HasMany<span class="token operator">&lt;</span>Role<span class="token operator">&gt;</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Roles<span class="token punctuation">)</span><span class="token punctuation">.</span>WithMany<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Menus<span class="token punctuation">)</span><span class="token punctuation">.</span>UsingEntity<span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">&gt;</span> o<span class="token punctuation">.</span>ToTable<span class="token punctuation">(</span><span class="token string">&quot;role_menu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置会为我们生成一个中间表role_menu。用来关联role和menu的多对多关系。</p><p>添加操作</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>var role1 <span class="token operator">=</span> new Role
{
    Name <span class="token operator">=</span> <span class="token string">&quot;管理员1&quot;</span>
}<span class="token punctuation">;</span>
var role2 <span class="token operator">=</span> new Role
{
    Name <span class="token operator">=</span> <span class="token string">&quot;管理员2&quot;</span>
}<span class="token punctuation">;</span>
var role3 <span class="token operator">=</span> new Role
{
    Name <span class="token operator">=</span> <span class="token string">&quot;管理员3&quot;</span>
}<span class="token punctuation">;</span>

var menu1 <span class="token operator">=</span> new Menu
{
    Name <span class="token operator">=</span> <span class="token string">&quot;菜单1&quot;</span>
}<span class="token punctuation">;</span>
var menu2 <span class="token operator">=</span> new Menu
{
    Name <span class="token operator">=</span> <span class="token string">&quot;菜单2&quot;</span>
}<span class="token punctuation">;</span>
var menu3 <span class="token operator">=</span> new Menu
{
    Name <span class="token operator">=</span> <span class="token string">&quot;菜单3&quot;</span>
}<span class="token punctuation">;</span>

menu1<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role1<span class="token punctuation">)</span><span class="token punctuation">;</span>
menu1<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>

menu2<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>
menu2<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role3<span class="token punctuation">)</span><span class="token punctuation">;</span>

menu3<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role1<span class="token punctuation">)</span><span class="token punctuation">;</span>
menu3<span class="token punctuation">.</span>Roles<span class="token punctuation">.</span><span class="token keyword">Add</span><span class="token punctuation">(</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>

await db<span class="token punctuation">.</span>Menus<span class="token punctuation">.</span>AddAsync<span class="token punctuation">(</span>menu1<span class="token punctuation">)</span><span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>Menus<span class="token punctuation">.</span>AddAsync<span class="token punctuation">(</span>menu2<span class="token punctuation">)</span><span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>Menus<span class="token punctuation">.</span>AddAsync<span class="token punctuation">(</span>menu3<span class="token punctuation">)</span><span class="token punctuation">;</span>
await db<span class="token punctuation">.</span>SaveChangesAsync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询操作</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>var menuList <span class="token operator">=</span> db<span class="token punctuation">.</span>Menus<span class="token punctuation">.</span>Include<span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">&gt;</span> t<span class="token punctuation">.</span>Roles<span class="token punctuation">)</span><span class="token punctuation">;</span>
foreach <span class="token punctuation">(</span>var item <span class="token operator">in</span> menuList<span class="token punctuation">)</span>
{
    Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;菜单名称：{item.Name} 角色名称:{string.Join(&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;, item.Roles.Select(t =&gt; t.Name))}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>不过日常中我不喜欢使用导航属性，也不去配置这些实体关系配置，也不去显式创建主外键操作，直接在需要关联的表增加对应表的主键，然后使用逻辑主键正常处理。</p>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","domainRelation.html.vue"]]),d=JSON.parse('{"path":"/orm/efcore/base/domainRelation.html","title":"实体间关系","lang":"zh-CN","frontmatter":{"title":"实体间关系","lang":"zh-CN","date":"2022-05-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shitijianguanji","slug":"eczgi2","docsId":"78358378","description":"介绍 数据库表之间的关系：一对一、一对多、多对多。 操作 三部曲：实体类中配置关系属性；FluentAPI关系配置；使用关系操作。 一对一：HasOne(xxx).WithOne(xxx); 一对多：HasOne(xxx).WithMany(xxx); 多对多：HasMany(xxx).WithMany(xxx); 基础配置 配置基础类和约定配置 配置...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/base/domainRelation.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"实体间关系"}],["meta",{"property":"og:description","content":"介绍 数据库表之间的关系：一对一、一对多、多对多。 操作 三部曲：实体类中配置关系属性；FluentAPI关系配置；使用关系操作。 一对一：HasOne(xxx).WithOne(xxx); 一对多：HasOne(xxx).WithMany(xxx); 多对多：HasMany(xxx).WithMany(xxx); 基础配置 配置基础类和约定配置 配置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T07:15:56.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-18T07:15:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实体间关系\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-18T07:15:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础配置","slug":"基础配置","link":"#基础配置","children":[]},{"level":3,"title":"一对一","slug":"一对一","link":"#一对一","children":[]},{"level":3,"title":"一对多","slug":"一对多","link":"#一对多","children":[]},{"level":3,"title":"多对多","slug":"多对多","link":"#多对多","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1716016556000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.34,"words":1901},"filePathRelative":"orm/efcore/base/domainRelation.md","localizedDate":"2022年5月29日","excerpt":"<h2>介绍</h2>\\n<p>数据库表之间的关系：一对一、一对多、多对多。</p>\\n<h2>操作</h2>\\n<p>三部曲：实体类中配置关系属性；FluentAPI关系配置；使用关系操作。\\n一对一：HasOne(xxx).WithOne(xxx);\\n一对多：HasOne(xxx).WithMany(xxx);\\n多对多：HasMany(xxx).WithMany(xxx);</p>\\n<h3>基础配置</h3>\\n<p>配置基础类和约定配置</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">public</span> class EntityTypeConfiguration<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;</span> : IEntityTypeConfiguration<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">where</span> T : DataEntity\\n{\\n    <span class=\\"token keyword\\">public</span> virtual void Configure<span class=\\"token punctuation\\">(</span>EntityTypeBuilder<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;</span> builder<span class=\\"token punctuation\\">)</span>\\n    {\\n        <span class=\\"token keyword\\">Type</span> genericType <span class=\\"token operator\\">=</span> typeof<span class=\\"token punctuation\\">(</span>T<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        builder<span class=\\"token punctuation\\">.</span>HasKey<span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> x<span class=\\"token punctuation\\">.</span>Id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        builder<span class=\\"token punctuation\\">.</span>Property<span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> x<span class=\\"token punctuation\\">.</span>Id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>IsRequired<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasMaxLength<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">36</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasComment<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"主键\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        builder<span class=\\"token punctuation\\">.</span>ToTable<span class=\\"token punctuation\\">(</span>genericType<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">.</span>ToLower<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"user\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        var convertDateTime <span class=\\"token operator\\">=</span> new ValueConverter<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">DateTime</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">DateTime</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>v <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> v<span class=\\"token punctuation\\">.</span>ToUniversalTime<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> v <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> v<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        builder<span class=\\"token punctuation\\">.</span>Property<span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> t<span class=\\"token punctuation\\">.</span>CreateTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>IsRequired<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasConversion<span class=\\"token punctuation\\">(</span>convertDateTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasComment<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"创建时间\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        builder<span class=\\"token punctuation\\">.</span>Property<span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">=</span><span class=\\"token operator\\">&gt;</span> t<span class=\\"token punctuation\\">.</span>ModifyTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>IsRequired<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasConversion<span class=\\"token punctuation\\">(</span>convertDateTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>HasComment<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"修改时间\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    }\\n}\\n\\n<span class=\\"token keyword\\">public</span> abstract class DataEntity\\n{\\n    <span class=\\"token keyword\\">public</span> long Id { get<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> } <span class=\\"token operator\\">=</span> new Snowflake<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>NewId<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//一个生成雪花id的公共类</span>\\n\\n    <span class=\\"token comment\\">/// &lt;summary&gt;</span>\\n    <span class=\\"token comment\\">/// 创建时间</span>\\n    <span class=\\"token comment\\">/// &lt;/summary&gt;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">DateTime</span> CreateTime { get<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> } <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">DateTime</span><span class=\\"token punctuation\\">.</span>Now<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">/// &lt;summary&gt;</span>\\n    <span class=\\"token comment\\">/// 创建时间</span>\\n    <span class=\\"token comment\\">/// &lt;/summary&gt;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">DateTime</span> ModifyTime { get<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> } <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">DateTime</span><span class=\\"token punctuation\\">.</span>Now<span class=\\"token punctuation\\">;</span>\\n}\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
