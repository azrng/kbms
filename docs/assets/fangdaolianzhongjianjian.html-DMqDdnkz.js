import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as s,e as n,f as c,d as l}from"./app-D8HBJYTp.js";const u={},i=l(`<p>通过一个简单的中间件实现防止项目内的图片被其他人引用从而占用服务器资源。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>编写中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///图片防盗链中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefuseStealingImgMiddleware</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">RefuseStealingImgMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> requestDelegate<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_next <span class="token operator">=</span> requestDelegate<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> urlReferer <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Referer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>urlReferer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//直接访问</span>
			<span class="token punctuation">{</span>
				context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
				<span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;NoFind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>urlReferer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">//await context.Response.SendFileAsync(&quot;wwwroot/forbidden.jpg&quot;);</span>
				context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>
				<span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;401&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//走正常流程</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RefuseStealingImgMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={href:"http://localhost:5000/dotnet.jpg",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,s("p",null,[n("效果 如果直接访问 "),s("a",k,[n("http://localhost:5000/dotnet.jpg"),c(a)]),n(" 会直接提示404找不到 如果访问时候头部增加Referer 如果不符合条件，那么直接返回401未授权。")])])}const f=t(u,[["render",r],["__file","fangdaolianzhongjianjian.html.vue"]]),b=JSON.parse('{"path":"/dotnet/base/pipeline/middleware/tazhan/fangdaolianzhongjianjian.html","title":"防盗链中间件","lang":"zh-CN","frontmatter":{"title":"防盗链中间件","lang":"zh-CN","date":"2022-02-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"fangdaolianzhongjianjian","slug":"ory6d0","docsId":"47036803","description":"通过一个简单的中间件实现防止项目内的图片被其他人引用从而占用服务器资源。 操作 编写中间件 启用中间件 效果 如果直接访问 http://localhost:5000/dotnet.jpg 会直接提示404找不到 如果访问时候头部增加Referer 如果不符合条件，那么直接返回401未授权。","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/middleware/tazhan/fangdaolianzhongjianjian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"防盗链中间件"}],["meta",{"property":"og:description","content":"通过一个简单的中间件实现防止项目内的图片被其他人引用从而占用服务器资源。 操作 编写中间件 启用中间件 效果 如果直接访问 http://localhost:5000/dotnet.jpg 会直接提示404找不到 如果访问时候头部增加Referer 如果不符合条件，那么直接返回401未授权。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"防盗链中间件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"dotnet/base/pipeline/middleware/tazhan/fangdaolianzhongjianjian.md","localizedDate":"2022年2月20日","excerpt":"<p>通过一个简单的中间件实现防止项目内的图片被其他人引用从而占用服务器资源。</p>\\n<h2>操作</h2>\\n<p>编写中间件</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">///图片防盗链中间件</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RefuseStealingImgMiddleware</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">RequestDelegate</span> _next<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token function\\">RefuseStealingImgMiddleware</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestDelegate</span> requestDelegate<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t_next <span class=\\"token operator\\">=</span> requestDelegate<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> context<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> url <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>url<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\".jpg\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">else</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> urlReferer <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"Referer\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsNullOrWhiteSpace</span><span class=\\"token punctuation\\">(</span>urlReferer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//直接访问</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>StatusCode <span class=\\"token operator\\">=</span> <span class=\\"token number\\">404</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"NoFind\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>urlReferer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"http://localhost:5000\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">//await context.Response.SendFileAsync(\\"wwwroot/forbidden.jpg\\");</span>\\n\\t\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>StatusCode <span class=\\"token operator\\">=</span> <span class=\\"token number\\">401</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"401\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token keyword\\">else</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_next</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ConfigureAwait</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//走正常流程</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,b as data};
