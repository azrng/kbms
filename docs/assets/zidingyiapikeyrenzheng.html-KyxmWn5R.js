import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as i}from"./app-D8HBJYTp.js";const l={},u=i(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>APIKey支持两种模式认证Spatialmap、CRS、OC、AI服务：</p><ul><li>Token认证：通过HTTP头部传递直接认证。Web用户推荐这种，避免secret写进javascript客户端。</li><li>signature签名认证：参数传递apikey以及对参数和密钥计算SHA256摘要的签名认证。</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>下面的操作来演示一下token认证的方案</p><p>编写配置常量类用于存储认证方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ApiKeyAuthenticationDefaults</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 认证schema名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> AuthenticationSchema <span class="token operator">=</span> <span class="token string">&quot;ApiKey&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写apikey认证方式配置类ApiKeyAuthenticationOptions，继承自AuthenticationSchemeOptions</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiKeyAuthenticationOptions</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthenticationSchemeOptions</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// key</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ApiKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// key名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ApiKeyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;X-ApiKey&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// key传递的位置</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">KeyLocation</span> KeyLocation <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> KeyLocation<span class="token punctuation">.</span>Header<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>HttpContext<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ApiKeyValidator <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>HttpContext<span class="token punctuation">,</span> ApiKeyAuthenticationOptions<span class="token punctuation">,</span> Claim<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> ClaimsGenerator <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>ApiKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid ApiKey configured&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// key来源</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">KeyLocation</span>
<span class="token punctuation">{</span>
    Header <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    HeaderOrQuery <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    QueryOrHeader <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写自定义认证处理程序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ApiKeyAuthenticationHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AuthenticationHandler<span class="token punctuation">&lt;</span>ApiKeyAuthenticationOptions<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ApiKeyAuthenticationHandler</span><span class="token punctuation">(</span><span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>ApiKeyAuthenticationOptions<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">,</span> <span class="token class-name">ILoggerFactory</span> logger<span class="token punctuation">,</span>
        <span class="token class-name">UrlEncoder</span> encoder<span class="token punctuation">,</span> <span class="token class-name">ISystemClock</span> clock<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> logger<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> clock<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>AuthenticateResult<span class="token punctuation">&gt;</span></span> <span class="token function">HandleAuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 获取传递过来的apikey</span>
        <span class="token class-name">StringValues</span> keyValues<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> keyExists <span class="token operator">=</span> Options<span class="token punctuation">.</span>KeyLocation <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            KeyLocation<span class="token punctuation">.</span>Query <span class="token operator">=&gt;</span> Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span><span class="token punctuation">,</span>
            KeyLocation<span class="token punctuation">.</span>HeaderOrQuery <span class="token operator">=&gt;</span> Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span> <span class="token operator">||</span>
                                         Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span><span class="token punctuation">,</span>
            KeyLocation<span class="token punctuation">.</span>QueryOrHeader <span class="token operator">=&gt;</span> Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span> <span class="token operator">||</span>
                                         Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKeyName<span class="token punctuation">,</span> <span class="token keyword">out</span> keyValues<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyExists<span class="token punctuation">)</span>
            <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">NoResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 验证apikey是否有效</span>
        <span class="token class-name"><span class="token keyword">var</span></span> validator <span class="token operator">=</span> Options<span class="token punctuation">.</span>ApiKeyValidator <span class="token operator">??</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> keyValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ApiKey<span class="token punctuation">,</span> keyValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">await</span> validator<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>Context<span class="token punctuation">,</span> keyValues<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid ApiKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将用户内容进行存储</span>
        <span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;issuer&quot;</span><span class="token punctuation">,</span> ClaimsIssuer<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>Options<span class="token punctuation">.</span>ClaimsGenerator<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>Context<span class="token punctuation">,</span> Options<span class="token punctuation">)</span> <span class="token operator">??</span> Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> claimsPrincipal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> Scheme<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
            ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationTicket</span><span class="token punctuation">(</span>claimsPrincipal<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationProperties</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//获取或设置身份验证会话是否跨多个请求持久化</span>
            IsPersistent <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> Scheme<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> AuthenticateResult<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是编写注入的配置扩展了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthenticationBuilder</span> <span class="token function">AddApiKey</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthenticationBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">AddApiKey</span><span class="token punctuation">(</span>ApiKeyAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthenticationBuilder</span> <span class="token function">AddApiKey</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthenticationBuilder</span> builder<span class="token punctuation">,</span>
    <span class="token class-name"><span class="token keyword">string</span></span> schema<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">AddApiKey</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthenticationBuilder</span> <span class="token function">AddApiKey</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthenticationBuilder</span> builder<span class="token punctuation">,</span>
    <span class="token class-name">Action<span class="token punctuation">&lt;</span>ApiKeyAuthenticationOptions<span class="token punctuation">&gt;</span></span> configureOptions<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">AddApiKey</span><span class="token punctuation">(</span>ApiKeyAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationSchema<span class="token punctuation">,</span> configureOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">AuthenticationBuilder</span> <span class="token function">AddApiKey</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">AuthenticationBuilder</span> builder<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> schema<span class="token punctuation">,</span>
    <span class="token class-name">Action<span class="token punctuation">&lt;</span>ApiKeyAuthenticationOptions<span class="token punctuation">&gt;</span></span> configureOptions<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>configureOptions <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>configureOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScheme</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApiKeyAuthenticationOptions<span class="token punctuation">,</span> ApiKeyAuthenticationHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> configureOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是使用的示例了</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>ApiKeyAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationSchema<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddApiKey</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>ApiKey <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span>ApiKeyName <span class="token operator">=</span> <span class="token string">&quot;X-ApiKey&quot;</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span>ClaimsIssuer <span class="token operator">=</span> <span class="token string">&quot;azrng.com&quot;</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span>KeyLocation <span class="token operator">=</span> KeyLocation<span class="token punctuation">.</span>Header<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们使用了swagger，那么还可以扩展swagger进行传入apikey</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span>
    <span class="token punctuation">{</span>
        Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span>
        Title <span class="token operator">=</span> <span class="token string">&quot;API&quot;</span><span class="token punctuation">,</span>
        Description <span class="token operator">=</span> <span class="token string">&quot;API说明&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//定义认证方式</span>
    options<span class="token punctuation">.</span><span class="token function">AddSecurityDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;ApiKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Description <span class="token operator">=</span> <span class="token string">&quot;输入你的的ApiKey&quot;</span><span class="token punctuation">,</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;X-ApiKey&quot;</span><span class="token punctuation">,</span> <span class="token comment">//默认的参数名称</span>
        In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span>
        Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey<span class="token punctuation">,</span>
        Scheme <span class="token operator">=</span> <span class="token string">&quot;ApiKeySchema&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//声明一个Scheme，注意下面的Id要和上面AddSecurityDefinition中的参数name一致</span>
    <span class="token class-name"><span class="token keyword">var</span></span> scheme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span>
    <span class="token punctuation">{</span>
        Reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiReference</span>
        <span class="token punctuation">{</span>
            Type <span class="token operator">=</span> ReferenceType<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">,</span>
            Id <span class="token operator">=</span> <span class="token string">&quot;ApiKey&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//注册全局认证（所有的接口都可以使用认证）</span>
    options<span class="token punctuation">.</span><span class="token function">AddSecurityRequirement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityRequirement</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">scheme</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,18),k={href:"https://mp.weixin.qq.com/s/6E9qwm0StgitgAU6PEr-fw",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/6E9qwm0StgitgAU6PEr-fw"),c(a)]),s(" | ASP.NET Core 实现基于 ApiKey 的认证")])])}const b=t(l,[["render",r],["__file","zidingyiapikeyrenzheng.html.vue"]]),g=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyiapikeyrenzheng.html","title":"自定义ApiKey认证","lang":"zh-CN","frontmatter":{"title":"自定义ApiKey认证","lang":"zh-CN","date":"2023-02-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"zidingyiapikeyrenzheng","slug":"cnnnhs","docsId":"75208588","description":"介绍 APIKey支持两种模式认证Spatialmap、CRS、OC、AI服务： Token认证：通过HTTP头部传递直接认证。Web用户推荐这种，避免secret写进javascript客户端。 signature签名认证：参数传递apikey以及对参数和密钥计算SHA256摘要的签名认证。 操作 下面的操作来演示一下token认证的方案 编写配置常...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyiapikeyrenzheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"自定义ApiKey认证"}],["meta",{"property":"og:description","content":"介绍 APIKey支持两种模式认证Spatialmap、CRS、OC、AI服务： Token认证：通过HTTP头部传递直接认证。Web用户推荐这种，避免secret写进javascript客户端。 signature签名认证：参数传递apikey以及对参数和密钥计算SHA256摘要的签名认证。 操作 下面的操作来演示一下token认证的方案 编写配置常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义ApiKey认证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.33,"words":700},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/renzhengshouquanshili/zidingyiapikeyrenzheng.md","localizedDate":"2023年2月11日","excerpt":"<h2>介绍</h2>\\n<p>APIKey支持两种模式认证Spatialmap、CRS、OC、AI服务：</p>\\n<ul>\\n<li>Token认证：通过HTTP头部传递直接认证。Web用户推荐这种，避免secret写进javascript客户端。</li>\\n<li>signature签名认证：参数传递apikey以及对参数和密钥计算SHA256摘要的签名认证。</li>\\n</ul>\\n<h2>操作</h2>\\n<p>下面的操作来演示一下token认证的方案</p>\\n<p>编写配置常量类用于存储认证方式</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ApiKeyAuthenticationDefaults</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// 认证schema名称</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> AuthenticationSchema <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"ApiKey\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,g as data};
