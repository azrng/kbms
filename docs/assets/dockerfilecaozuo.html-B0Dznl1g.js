import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-BuY9BHbl.js";const e="/kbms/common/202212111144327.webp",l="/kbms/common/202212111144648.webp",t="/kbms/common/202212111144320.webp",p="/kbms/common/202212111144960.webp",r="/kbms/common/202212111144030.webp",h="/kbms/common/202212111144782.webp",k="/kbms/common/202212111144433.webp",d="/kbms/common/202212111144833.webp",o="/kbms/common/1609560081425-6ae7cdce-7b4e-4cc7-81b8-8eaf43eb4441.png",c="/kbms/common/202212111144078.webp",g="/kbms/common/202212111144653.webp",m="/kbms/common/202212111144239.webp",b="/kbms/common/202212111145463.webp",u="/kbms/common/202212111145116.webp",y="/kbms/common/202212111145974.webp",v="/kbms/common/202212111145727.webp",f="/kbms/common/202212111145089.webp",E="/kbms/common/202212111145466.webp",B="/kbms/common/202212111145925.webp",C="/kbms/common/202212111145829.webp",A="/kbms/common/202212111145699.webp",D="/kbms/common/202212111145254.webp",F="/kbms/common/202212111145338.webp",x="/kbms/common/202212111145314.webp",w="/kbms/common/202212111145603.webp",z="/kbms/common/202212111146484.webp",_="/kbms/common/202212111146297.webp",R="/kbms/common/202212111146363.webp",O="/kbms/common/202212111146235.webp",q="/kbms/common/202212111146690.webp",N="/kbms/common/202212111146582.webp",I="/kbms/common/202212111146096.webp",T="/kbms/common/202212111146496.webp",P="/kbms/common/202212111146434.webp",M="/kbms/common/202212111146227.webp",S="/kbms/common/202212111146334.webp",Y="/kbms/common/202212111146265.webp",U="/kbms/common/202212111146461.webp",L="/kbms/common/202212111147568.webp",K="/kbms/common/202212111147870.webp",V="/kbms/common/202212111147678.webp",W="/kbms/common/202212111147353.webp",X="/kbms/common/202212111147403.webp",G="/kbms/common/202212111147541.webp",Z="/kbms/common/202212111147833.webp",j="/kbms/common/202212111147697.webp",$="/kbms/common/202212111147301.webp",H="/kbms/common/202212111147182.webp",Q="/kbms/common/202212111147082.webp",J="/kbms/common/202212111147245.webp",ii="/kbms/common/202212111147248.webp",si="/kbms/common/202212111149346.webp",ai="/kbms/common/202212111149334.webp",ni="/kbms/common/202212111149136.webp",ei="/kbms/common/202212111149214.webp",li="/kbms/common/202212111149951.webp",ti="/kbms/common/202212111149132.webp",pi="/kbms/common/202212111149148.webp",ri="/kbms/common/202212111149439.webp",hi="/kbms/common/202212111149402.webp",ki="/kbms/common/202212111149883.webp",di="/kbms/common/202212111149297.webp",oi="/kbms/common/202212111149964.webp",ci="/kbms/common/202212111149624.webp",gi="/kbms/common/202212111149767.webp",mi="/kbms/common/202212111149893.webp",bi={},ui=n('<h2 id="初体验" tabindex="-1"><a class="header-anchor" href="#初体验"><span>初体验</span></a></h2><ul><li><p>准备一个项目</p><p>这里就直接创建一个默认的API项目(基于.NetCore3.1)即可，什么都不做。</p></li><li><p>编写Dockerfile</p><p>在项目根目录下增加一个Dockerfile文件，里面内容如下：</p><figure><img src="'+e+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>具体内容如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim</span></span>
<span class="line"><span>WORKDIR /app</span></span>
<span class="line"><span>COPY . .</span></span>
<span class="line"><span>EXPOSE 80</span></span>
<span class="line"><span>ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerDemo.dll&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置Dockerfile的文件属性为始终复制，如下：</p><figure><img src="`+l+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>以文件系统的形式发布项目，指定本地目录，如下：</p><figure><img src="'+t+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>将发布之后的文件拷贝到装有Docker的主机上</p><p>将项目进行发布，把发布之后的文件拷贝到我的阿里云服务器上，用到的工具是FinalShell(一个工具完成连接服务器和上传文件，很好用)，如下：</p><figure><img src="'+p+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>打包为镜像</p><p>进入发布文件目录，执行<code>docker build</code>命令，将发布文件打包为一个镜像，如下：</p><figure><img src="'+r+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>上图中的mydockerdemo 是镜像名，可以自定义；通过<code>docker images</code>查看镜像是否生成，如下：</p><figure><img src="'+h+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>根据镜像启动容器(里面包含我们的项目)</p><p>镜像生成之后，就可以通过<code>docker run</code>指令根据镜像启动容器了，即启动我们的项目</p><figure><img src="'+k+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d --name mydockerdemo -p 9999:80 mydockerdemo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>-d：后台模式运行；</p><p>--name：给运行中的容器指定一个名字；</p><p>-p：指定端口映射， 主机的端口9999映射到容器的端80，因为在容器里面我们的项目是以80 端口启动的；</p><p>最后一个参数是上一步生成的镜像名称， 即根据此镜像启动一个容器实例。</p></li><li><p>测试访问看看，只要配置了云服务器的安全组和防火墙放开9999端口，那么外网就可以访问了,如下：</p><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li></ul><p>可能有小伙伴说，也挺麻烦的；其实编写Dockerfile，打包镜像等操作都是一次性的，只要生成了镜像，后续其他环境直接根据镜像启动即可，不用再单独安装.NetCore运行时等基础设施了，打包好的镜像里包含了完整的运行环境。</p><h2 id="命令介绍" tabindex="-1"><a class="header-anchor" href="#命令介绍"><span>命令介绍</span></a></h2><p><img src="'+o+'" alt="image.png" loading="lazy"> 分为四个部分：基础镜像信息、维护者信息、镜像操作指令、容器启动执行指令</p><h3 id="预览" tabindex="-1"><a class="header-anchor" href="#预览"><span>预览</span></a></h3><p>Docker和我们熟悉的Git很类似，都是通过命令执行相关操作，当然也有一些界面管理工具(点按钮的那种)，但大家似乎更喜欢直接敲命令，毕竟这种方式更加灵活、更加容易理解操作本质；有大神将常用命令用一张图很好的展现出来，这里借用一下(图片来源于网络，侵删)：</p><p><img src="'+c+'" alt="图片" loading="lazy">cmd_logic</p><p>不熟悉Docker的小伙伴可能看见这图直接懵圈了，别急，接着往下看， 看完再回过头来瞅这张图，绝对感觉很给力。</p><h3 id="常用命令实操" tabindex="-1"><a class="header-anchor" href="#常用命令实操"><span>常用命令实操</span></a></h3><h4 id="全局命令" tabindex="-1"><a class="header-anchor" href="#全局命令"><span>全局命令</span></a></h4><ul><li><p><strong><code>docker version</code></strong>：查看docker版本信息。</p><figure><img src="'+g+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker info</code></strong>：查看docker详情信息，比如仓储信息、加速器配置信息、有多少个镜像、有多少个容器、CPU、内存等。</p><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker events</code></strong>：从docker 服务获取实时事件，通俗一点理解就是操作日志，比如对镜像、容器、网络、挂载卷等操作，就会记录对应的事件信息；<strong>最多能返回最近的1000条日志信息</strong>。</p><p>先在一个终端执行命令，终端会阻塞：</p><figure><img src="'+b+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>开启另一个终端，执行根据镜像运行容器的命令：</p><figure><img src="'+u+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>此时开启的第一个终端就实时输出事件消息，如镜像拉取、容器启动、容器结束等信息，如下：</p><figure><img src="'+y+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>既然可以把这个命令当做操作日志理解，那肯定可以根据条件查看对应的数据，如下：</p><figure><img src="'+v+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如图所示，会先显示符合条件的事件信息，然后会继续阻塞，如果对服务端有操作，信息还会实时显示。常用的参数指定如下：</p><p><strong>-f</strong> ：根据条件过滤事件，如上图指定的是镜像为hello-world相关的事件信息；</p><p><strong>--since</strong> ：从指定的时间戳后显示所有事件，可以理解为开始时间，支持多种时间格式，默认使用本地主机的时区;</p><p><strong>--until</strong> ：显示到指定的时间为止，可以理解为结束时间；</p></li></ul><h4 id="镜像常用命令" tabindex="-1"><a class="header-anchor" href="#镜像常用命令"><span>镜像常用命令</span></a></h4><p><strong>镜像(image)可以理解为一种轻量级、可独立运行的软件包，包含了应用程序及其他运行需要的基础设施</strong>，如运行时、配置文件、依赖的库等，所以没有镜像就没法启动容器；就好比开发中没有类(class)，又怎么去根据类创建实例呢。</p><p><strong>镜像是只读的</strong>，所以操作命令不多，一般就是增、删、查。</p><ul><li><p><strong><code>docker images</code></strong>：列出Docker主机上的镜像</p><figure><img src="'+f+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以指定参数，比较常用的如下：</p><figure><img src="'+E+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>-a</strong> :列出本地所有的镜像（含中间镜像层，默认过滤掉中间镜像层）。</p><p><strong>-q</strong> :只显示镜像ID。</p><p><strong>上图中的-aq就是显示所有镜像的ID，一般用于批量删除</strong>。</p></li><li><p><strong><code>docker search</code></strong>：从远程仓储中搜索镜像，后面直接根镜像名称即可</p><figure><img src="'+B+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以指定条件进行搜索，如下：</p><figure><img src="'+C+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>--filter</strong>：指定条件搜索，<strong>is-official表示是否为官方的，stars表示要找多少星星以上的</strong>。</p><p>对于搜索，我还是比较喜欢用界面，直观好看：</p><figure><img src="'+A+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker pull</code></strong>：从远程仓储中拉取镜像，<strong>后面跟镜像名和tag即可，即指定版本拉取，如果不指定tag，默认就latest，最新的</strong>。</p><figure><img src="'+D+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>镜像的分层原理就是采用UnionFS(联合文件系统)，是一种分层、轻量级的高性能文件系统；镜像可以通过分层来进行继承，可以基于基础镜像制作出各种具体的应用镜像</strong>，比如我们刚拉取下来的nginx镜像，这里先了解，后续我们自己制作镜像的时候就明白了。</p><p><strong><code>docker pull 镜像名:tag</code></strong>：指定版本拉取；</p><figure><img src="'+F+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker rmi</code></strong>：删除指定镜像，后面可以跟名称或镜像ID</p><figure><img src="'+x+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>删除指定版本，如下：</p><figure><img src="'+w+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>根据镜像ID删除，可以一下删除多个，中间用空格隔开：</p><figure><img src="'+z+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>删除全部镜像，就是找出所有镜像ID，然后删除就行了，当然肯定不是一个一个的拷贝镜像ID；**<code>docker images -aq</code>**可以显示所有镜像ID ，所以两个命令结合用即可，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker rmi -f $(docker images -aq)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>-f</strong>：代表强制删除，比如一些镜像和容器有依赖，会提示不能直接删除，加上这个选项就可以强制删除。</p></li><li><p><strong><code>docker save</code></strong>：导出镜像，可以离线拷贝到其他主机上使用，避免没有网络不能下载镜像的场景。</p><figure><img src="'+_+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>生成的tar文件就可以根据需要拷贝到对应设备上加载使用，不用在线拉取，因为很多场景是不允许连外网的。</p></li><li><p><strong><code>docker load</code></strong>：加载镜像，根据拷贝过来的tar文件可以直接加载镜像到主机上。</p><p>这里演示就将原来拉取的镜像删除，然后通过load命令重新加载，如下：</p><figure><img src="'+R+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>加载镜像，如下：</p><figure><img src="'+O+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>换一种写法，如下：</p><figure><img src="'+q+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>选项说明：</p><p><strong>--input , -i</strong> : 指定导入的文件。</p><p><strong>--quiet , -q</strong> : 简化输出信息，不显示具体加载过程。</p><figure><img src="'+N+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>注：这里因为是在TestDockerImage目录下执行命令，所以指定tar的文件时，就在当前目录下。</p></li></ul><h4 id="容器常用命令" tabindex="-1"><a class="header-anchor" href="#容器常用命令"><span>容器常用命令</span></a></h4><p><strong>容器是用镜像创建的运行实例，</strong> 它可以被启动、开始、停止、删除，<strong>每个容器都是相互隔离</strong>；可以把容器看做是一个极简版的Linux环境和在其中运行程序的组合；</p><p><strong>容器</strong>和镜像几乎一样，唯一的区别就是<strong>镜像层上面加载了一个可写层</strong>，这层称为<strong>容器层</strong>；</p><p>以下对容器的操作，可以指定容器名称，也可以指定容器ID，演示统一用容器ID，不再重复截图。</p><ul><li><p><strong><code>docker run</code></strong>：根据镜像启动容器；语法如下：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>;</p><p>常用选项参数说明，如下：</p><p><strong>--name=&quot;容器名&quot;</strong> : 为容器指定一个名称；</p><p><strong>-d</strong>: 后台运行容器，并返回容器ID；</p><p><strong>-i</strong>: 以交互模式运行容器，一般和 -t 同时使用；</p><p><strong>-t</strong>: 为容器重新分配一个伪输入终端，一般和 -i 同时使用；</p><p><strong>-P</strong>: 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</p><p><strong>-p</strong>: 指定端口映射，格式为：<strong>主机端口:容器端口</strong></p><p>演示如下：</p><figure><img src="'+I+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>上图可以看到终端阻塞了，<strong>这种模式称为attached默认，即前台运行，与之对应的是detached模式，及后台运行</strong>，接下来会演示。由于终端阻塞，这里另开一个终端执行<code>docker ps</code>命令看运行的容器，如下：</p><figure><img src="'+T+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>前台运行模式终端很容易被关闭，启动的nginx容器也会停掉</strong>，这种情况对于很多场景是不允许的，所以可以指定为后台模式运行，即detached模式，如下：</p><figure><img src="'+P+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>现在只是在容器内启动了一个nginx，并监听80端口，如果需要通过主机能访问到容器里面的nginx，还需进行端口映射，如下：</p><figure><img src="'+M+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这里启动了两个nginx容器，都是监听80端口，但并没有报端口被占用的错，所以容器之间是互不影响的。通过**-p**选项进行端口映射，这下就可以通过主机的9999端口访问到容器内部的80端口，如下：</p><figure><img src="'+S+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>既然刚开始说可以将容器理解为简易版的Linux，那就应该可以进入容器内部操作一把，如下：</p><figure><img src="'+Y+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在容器里面只能执行一些核心的命令，因为是极简版，所以内部只包含重要的功能，如果需要其他功能可以自己安装扩展。</p><p><strong>退出容器的两种方式：</strong></p><p>a、容器中执行<strong>exit</strong>命令，容器停止并退出，回到主机；</p><figure><img src="'+U+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>b、利用组合键<strong>ctrl+p+q</strong>，容器不停止退出，回到主机；</p><figure><img src="'+L+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker ps [OPTIONS]</code></strong> ：显示主机中的容器，不加选项<strong>默认只列出运行中的容器</strong>；</p><p><strong>-a :</strong> 显示所有的容器，包括未运行的；</p><p><strong>-n :</strong> 列出最近创建的n个容器；</p><p>演示如下：</p><figure><img src="'+K+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>启动和停止容器的命令；</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker start 容器id  # 启动被停止的容器</span></span>
<span class="line"><span>docker stop 容器id  # 停止运行中的容器</span></span>
<span class="line"><span>docker restart 容器id # 重启容器</span></span>
<span class="line"><span>docker kill 容器id  # 强制停止容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**<code>docker stop</code>**停止容器，后面可以跟一个或多个容器ID：</p><figure><img src="`+V+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong><code>docker start</code></strong>：启动被停止的容器，后面可以跟一个或多个容器ID：</p><figure><img src="'+W+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>**<code>docker restart</code><strong>重启命令和</strong><code>docker kill</code>**强制停止命令就不截图啦</p></li><li><p>**<code>docker exec</code>和<code>docker attach</code>**两种方式进入正在运行的容器。</p><p>很多场景容器都是后台运行，但有时需要进入容器内部进行相关配置的更改。</p><p><strong><code>docker exec</code></strong>：进入容器后开启一个新的终端，正常执行Linux相关命令。</p><figure><img src="'+X+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong><code>docker attach</code></strong>：进入容器正在执行的终端，不会启动新的进程。</p><figure><img src="'+G+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>退出容器模式：</p><p><strong>容器中执行exit命令，容器停止并退出;</strong></p><p><strong>利用组合键ctrl+p+q，容器不停止退出;</strong></p></li><li><p><strong><code>docker logs [OPTIONS] 容器ID</code></strong>：查看指定容器的日志；</p><p>常用OPTIONS如下：</p><p><strong>-f</strong> :跟踪日志输出</p><p><strong>--since</strong> :显示指定开始时间之后所有日志</p><p><strong>-t</strong> : 显示时间戳</p><p><strong>--tail</strong> :列出最新N条容器日志</p><figure><img src="'+Z+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>可以指定选项，查看需要的日志，如下：</p><figure><img src="'+j+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker top 容器ID</code></strong>：列出指定容器内部的进程，可以看到容器内的应用进程是否正常运行，如下：</p><figure><img src="'+$+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker inspect 容器ID</code></strong>：查看指定容器的详细信息，比如运行状态、网络配置、挂载的卷等信息都有，如下：</p><figure><img src="'+H+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p><strong><code>docker commit</code>：根据容器生成一个新的镜像</strong>；容器是可编辑的，有些时候需要将已更改的容器生成一个新的镜像给其他人用。</p><figure><img src="'+Q+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>命令说明：</p><p><strong>-a</strong> :提交的镜像作者；</p><p><strong>-m</strong> :提交时的说明文字；</p><p>命令中<strong>testcommitimage:v1</strong>是自定义的镜像名和tag；</p><p>根据新生成的镜像启动容器，则内部就会有创建的对应文件(容器内部可以根据需要任意改，这里只是演示创建文件而已)。</p></li><li><p>**<code>docker export</code>和<code>docker import</code>**将容器方便离线导出和导入；</p><figure><img src="'+J+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>命令说明：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#将容器导出为tar文件</span></span>
<span class="line"><span>docker export -o testexport.tar 030aa6fcd7f3</span></span>
<span class="line"><span># -o 指定输出位置和文件名</span></span>
<span class="line"><span># 030aa6fcd7f3 这个是容器ID</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#根据生成的tar文件导入为镜像</span></span>
<span class="line"><span>docker import testexport.tar testexportimagename:v2</span></span>
<span class="line"><span># 指定对应的tar文件</span></span>
<span class="line"><span># testexportimagename:v2 镜像名和版本, 可以自己定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这对命令是不是和镜像的<code>docker save</code>、<code>docker load</code>这对命令用法很相似，但两种方式不能混用，因为export导出的仅仅是容器快照，save保存的是完整的镜像文件。</p></li><li><p><strong><code>docker rm 容器ID</code></strong>：删除指定容器，运行中的容器默认不让删除，可以增加**-f选项**强制删除，如下：</p><figure><img src="`+ii+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li></ul><p>以上只是总结了平时比较常用的命令，并没有全部列出，更多细节可以进入官网：https://docs.docker.com/engine/reference/commandline/rm/；</p><h2 id="dockerfile解析" tabindex="-1"><a class="header-anchor" href="#dockerfile解析"><span>Dockerfile解析</span></a></h2><p>使用第三方镜像肯定不是学习Docker的最终目的，最想要的还是自己构建镜像；将自己的程序、文件、环境等构建成自己想要的应用镜像，方便后续部署、启动和维护；而Dockerfile就是专门做这个事的，通过类似简单编码的形式，最终就可以构建出属于自己的镜像，所以必须学起来。</p><h3 id="dockerfile简介" tabindex="-1"><a class="header-anchor" href="#dockerfile简介"><span>Dockerfile简介</span></a></h3><p>在日常开发过程中，需要编写对应的程序文件，最后通过编译打包生成对应的可执行文件或是类库；这里的Dockerfile文件就好比平时我们编写的程序文件，但内部的语法和关键字并没有程序那么复杂和繁多，相对来说还是很简单的，最后通过<code>docker build</code>命令就可以将对应的程序、文件、环境等构建成镜像啦。</p><p>在第一篇文章最后就简单使用了Dockerfile构建了一个镜像，这里重新认识下这个Dockerfile文件，如下图：</p><figure><img src="'+si+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>Dockerfile就是一个文本文件</strong>，但不需要指定后缀类型；文件内容中FROM、WORKDIR、COPY等就是关键字，按照规则写好之后，就可以将指定的文件构建为镜像啦。</p><p><strong>构建操作统一由Docker daemon进行，它会先对文件内容语法进行初步验证(语法不对就会返回错误信息)，然后逐一运行指令，每次生成一个新的镜像层，直到执行完所有指令，就构建出最终的镜像。</strong> Dockerfile、镜像、容器的关系如下：</p><figure><img src="'+ai+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>总结一下Dockerfile的知识点；</p><ul><li><strong>构建时，指令从上到下逐一执行；</strong></li><li><strong>每条指令都会创建一个新的镜像层，每一层都是前一层变化的增量；</strong></li><li><strong>使用#号进行注释；</strong></li><li><strong>关键字约定都是大写，后面至少跟一个参数；</strong></li></ul><h3 id="dockerfile关键字" tabindex="-1"><a class="header-anchor" href="#dockerfile关键字"><span>Dockerfile关键字</span></a></h3><h4 id="from-关键字" tabindex="-1"><a class="header-anchor" href="#from-关键字"><span>FROM 关键字</span></a></h4><p><strong>指定基础镜像</strong>， 就是新镜像是基于哪个镜像构建的。</p><p>比如建房子，可以在一块空地开始，也可以在别人打好的基石基础上开始， 甚至可以在别人弄好的毛坯房基础上装修即可。</p><p>如果要建房的话，可以FROM 空地，或者FROM 打好的基石，或者 FROM 毛坯房， 反正最后建好房就行；</p><p>这里需要注意的是，不管咋样，空地是少不了的；<strong>构建镜像也一样，最底层肯定有一个最基础的镜像</strong>。</p><p>建议使用官方的镜像作为基础镜像，推荐使用Alpine这种类型，因为它是严格控制的，而且体积很小。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span></span>
<span class="line"><span> ARG  CODE_VERSION=latest # 定义变量</span></span>
<span class="line"><span> FROM base:\${CODE_VERSION} # 指定基础镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="maintainer-label-关键字" tabindex="-1"><a class="header-anchor" href="#maintainer-label-关键字"><span>MAINTAINER/LABEL 关键字</span></a></h4><p><strong>MAINTAINER 指定维护者的相关信息，也就是构建的镜像是由谁构建的，他的邮箱是什么</strong>；</p><p><strong>LABLE 就是用于给镜像打标签，以键值对的方式进行指定</strong>，相对MAINTAINER 来说比较灵活，可以使用LABLE替代MAINTAINER。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span>
<span class="line"><span> LABEL com.example.version=&quot;0.0.1-beta&quot; </span></span>
<span class="line"><span> LABEL vendor1=&quot;ACME Incorporated&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="run-关键字" tabindex="-1"><a class="header-anchor" href="#run-关键字"><span>RUN 关键字</span></a></h4><p><strong>构建过程中需要运行的命令</strong>， 比如在构建过程中需要执行一条命令下载对应的包，这里就需要用到RUN关键字；</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 两种命令方式都可以</span></span>
<span class="line"><span> # RUN &lt;command&gt;</span></span>
<span class="line"><span> # RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span>
<span class="line"><span> # 执行命令,Linux支持的相关命令</span></span>
<span class="line"><span> RUN /bin/bash -c &#39;source $HOME/.bashrc; echo $HOME&#39;</span></span>
<span class="line"><span> RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="workdir-关键字" tabindex="-1"><a class="header-anchor" href="#workdir-关键字"><span>WORKDIR 关键字</span></a></h4><p>根据镜像启动容器时，通常需要进入到容器内部；<strong>则可以通过WORKDIR指定进入容器时的目录</strong>；</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> WORKDIR /path # 指定路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="env-关键字" tabindex="-1"><a class="header-anchor" href="#env-关键字"><span>ENV 关键字</span></a></h4><p>可以在构建过程中设置环境变量；就好比平时我们安装完程序，需要配置环境变量，方便访问；ENV关键字就是根据需求可以设置对应的环境变量；</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # ENV &lt;key&gt;=&lt;value&gt; ...</span></span>
<span class="line"><span> # 指定环境变量</span></span>
<span class="line"><span> ENV PATH=/usr/local/postgres-$PG_MAJOR/bin:$PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="add-关键字" tabindex="-1"><a class="header-anchor" href="#add-关键字"><span>ADD 关键字</span></a></h4><p><strong>将宿主机的资源拷贝进镜像中，会自动解压缩，而且还能从远程宿主机中读取资源并拷贝到镜像中</strong>；</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 两种命令方式都可以</span></span>
<span class="line"><span> # ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span>
<span class="line"><span> # ADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</span></span>
<span class="line"><span> ADD https://example.com/big.tar.xz /usr/src/things/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="copy-关键字" tabindex="-1"><a class="header-anchor" href="#copy-关键字"><span>COPY 关键字</span></a></h4><p><strong>将宿主机的资源拷贝到镜像中，只支持读取构建所在宿主机的资源</strong>。相对于ADD关键字来说更加透明，操作什么就是什么。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 拷贝资源到容器，两种命令格式都行</span></span>
<span class="line"><span> # COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源地址&gt;... &lt;目标地址&gt;</span></span>
<span class="line"><span> # COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源地址&gt;&quot;,... &quot;&lt;目标地址&gt;&quot;]</span></span>
<span class="line"><span> COPY requirements.txt /tmp/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="volume-关键字" tabindex="-1"><a class="header-anchor" href="#volume-关键字"><span>VOLUME 关键字</span></a></h4><p>挂载数据卷，之前在常用命令那说到通过命令的方式进行数据卷挂载，在Dockerfile中使用<strong>VOLUME</strong>指定挂载路径即可，根据构建出来的镜像运行容器时，默认就有构建时挂载的信息。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 挂载数据卷</span></span>
<span class="line"><span> VOLUME [&quot;/data&quot;]</span></span>
<span class="line"><span> VOLUME /myvol</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="expose-关键字" tabindex="-1"><a class="header-anchor" href="#expose-关键字"><span>EXPOSE 关键字</span></a></h4><p>指定运行容器时对外暴露的端口；即根据镜像启动容器时，容器向外暴露端口。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span></span>
<span class="line"><span> EXPOSE 80/tcp # 暴露端口</span></span>
<span class="line"><span> EXPOSE 80/udp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cmd-关键字" tabindex="-1"><a class="header-anchor" href="#cmd-关键字"><span>CMD 关键字</span></a></h4><p>指定启动容器时要执行的命令，只有最后一个会生效；即根据镜像启动容器时，容器需要执行啥命令。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 两种格式都行</span></span>
<span class="line"><span> # CMD [&quot;param1&quot;,&quot;param2&quot;]</span></span>
<span class="line"><span> # CMD command param1 param2</span></span>
<span class="line"><span> # 执行命令统计 行数、字数、字节数</span></span>
<span class="line"><span> CMD echo &quot;This is a test.&quot; | wc -</span></span>
<span class="line"><span> # 执行wc --help命令 </span></span>
<span class="line"><span> CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="entrypoint-关键字" tabindex="-1"><a class="header-anchor" href="#entrypoint-关键字"><span>ENTRYPOINT 关键字</span></a></h4><p>指定根据镜像启动容器时要执行的命令，可以追加命令；执行时机同CMD。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span>
<span class="line"><span> # ENTRYPOINT command param1 param2</span></span>
<span class="line"><span> ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arg-关键字" tabindex="-1"><a class="header-anchor" href="#arg-关键字"><span>ARG 关键字</span></a></h4><p>通过ARG指令定义了一个变量；和写代码时定义的变量一样，根据需要，定义就行啦。</p><p>用法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # ARG &lt;name&gt;[=&lt;default value&gt;]</span></span>
<span class="line"><span> ARG user1=someuser</span></span>
<span class="line"><span> ARG buildno=1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="onbuild-关键字" tabindex="-1"><a class="header-anchor" href="#onbuild-关键字"><span>ONBUILD 关键字</span></a></h4><p>基于父镜像构建新的镜像时，父镜像的OBUILD会被触发。</p><h2 id="实战演示" tabindex="-1"><a class="header-anchor" href="#实战演示"><span>实战演示</span></a></h2><p>这里还是以.NetCore项目构建镜像为例，其他编程语言的项目同理；这次咱们一步一步的来，搞清楚每个命令的使用。</p><p>以下关于项目创建和发布的具体细节在第一篇最后就分享了，小伙伴可以<a href="https://mp.weixin.qq.com/s?__biz=MzU1MzYwMjQ5MQ==&amp;mid=2247485538&amp;idx=1&amp;sn=1a264b5b0cb9577ddbc10dbfdf529298&amp;chksm=fbf114b6cc869da08a707988d885f4ce99d4cf3aac57749b6b37fcf407189ae312acb0174077&amp;token=583695816&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">参考</a>，这里主要演示Dockerfile关键字。</p><h3 id="准备项目和dockerfile文件" tabindex="-1"><a class="header-anchor" href="#准备项目和dockerfile文件"><span>准备项目和Dockerfile文件</span></a></h3><p>新建一个项目，啥都不需要改，就用默认的接口演示，如下：</p><figure><img src="`+ni+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>Dockerfile内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 指定基础镜像，在此基础上构建自己的项目镜像</span></span>
<span class="line"><span> FROM mcr.microsoft.com/dotnet/core/aspnet:3.1</span></span>
<span class="line"><span> # 指定自己的工作目录，进入容器时目录</span></span>
<span class="line"><span> WORKDIR /myApp</span></span>
<span class="line"><span> # 将构建上下文目录下的文件拷贝到容器的当前工作目录中，即/myApp</span></span>
<span class="line"><span> COPY . .</span></span>
<span class="line"><span> # 容器向外暴露端口，项目以什么端口启动就暴露对应的端口</span></span>
<span class="line"><span> EXPOSE 80</span></span>
<span class="line"><span> # 执行命令，这里默认是以80端口启动的</span></span>
<span class="line"><span> #就类似于在Linux系统的项目目录下执行 dotnet DockerfileDemo.dll 是一样的</span></span>
<span class="line"><span> ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerfileDemo.dll&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>记得右键Dockerfile，选择属性，然后设置Dockerfile为始终复制</strong>，这样后续更新变动，发布时就会自动拷贝到对应的发布目录。</p><h3 id="发布" tabindex="-1"><a class="header-anchor" href="#发布"><span>发布</span></a></h3><p>以文件的形式发布项目，并连同Dockerfile拷贝到安装好Docker的机器上进行构建(这里还是用我的云服务器)；</p><figure><img src="`+ei+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong><code>docker build -t myimage:v1.0 .</code>解析</strong>：</p><ul><li><strong>-t</strong>：指定镜像的名字及标签，通常 name:tag 或者 name 格式，myimage就是镜像名字，v1.0就是tag；</li><li><strong>-f</strong> :指定要使用的Dockerfile路径，这里由于Dockerfile在当前路径，所以不用指定；</li><li><strong>最后面的点</strong>：<strong>官方称为构建上下文，点表示指定为当前目录</strong>。会把指定的这个目录下的文件发送给docker daemon进行构建，所以千万不要指定/(斜杠代表根目录，有很多文件的)。</li><li>其他选项参数小伙伴可以根据需要使用，以上是比较重要的。</li></ul><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器"><span>启动容器</span></a></h3><p>根据构建出来的镜像启动容器，看Dockerfile中的命令效果；</p><p>启动容器如下：</p><figure><img src="'+li+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong><code>ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerfileDemo.dll&quot;]</code>这行代码就等同于的项目目录下直接执行 dotnet DockerfileDemo.dll是一样的，目的就是启动我们的项目</strong>。</p><p>通过<code>docker logs</code>可以查看容器内部的日志，如下：</p><figure><img src="'+ti+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="设置dockerfile" tabindex="-1"><a class="header-anchor" href="#设置dockerfile"><span>设置Dockerfile</span></a></h3><p>丰富化Dockefile文件内容并查看构建之后的细节</p><p>文件内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 指定基础镜像，在此基础上构建自己的项目镜像</span></span>
<span class="line"><span> FROM mcr.microsoft.com/dotnet/core/aspnet:3.1</span></span>
<span class="line"><span> # 指定维护人</span></span>
<span class="line"><span> MAINTAINER CodeZYQ&lt;1137533407@qq.com&gt;</span></span>
<span class="line"><span> # 打标签</span></span>
<span class="line"><span> LABEL createname=&quot;CodeZYQ&quot;</span></span>
<span class="line"><span> # 指定自己的工作目录，进入容器时目录 app</span></span>
<span class="line"><span> WORKDIR /myapp</span></span>
<span class="line"><span> # 将构建上下文目录下的文件拷贝到容器中的工作目录中</span></span>
<span class="line"><span> COPY . .</span></span>
<span class="line"><span> # 定义变量</span></span>
<span class="line"><span> ARG myPort=8080</span></span>
<span class="line"><span> # 使用环境变量方式改变启动端口，拼接用到了定义的变量</span></span>
<span class="line"><span> ENV ASPNETCORE_URLS=http://+:$myPort</span></span>
<span class="line"><span> # 通过RUN 执行相关命令，根据需要执行相关命令</span></span>
<span class="line"><span> RUN mkdir testDir</span></span>
<span class="line"><span> # 挂载数据卷，这里模拟挂载日志目录</span></span>
<span class="line"><span> VOLUME /Logs</span></span>
<span class="line"><span> # 容器向外暴露端口，项目以什么端口启动就暴露对应的端口</span></span>
<span class="line"><span> EXPOSE $myPort</span></span>
<span class="line"><span> # 执行命令，这里默认是以80端口启动的</span></span>
<span class="line"><span> # 就类似于在Linux系统的项目目录下执行 dotnet DockerfileDemo.dll 是一样的</span></span>
<span class="line"><span> ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerfileDemo.dll&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行如下命令，构建新的镜像：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 这里没有显示指定tag 默认就latest</span></span>
<span class="line"><span> docker build -t newimage .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+pi+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>通过<code>docker logs</code>看看容器日志，如下：</p><figure><img src="'+ri+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>看看数据卷挂载是否成功，进入容器，看根目录下就会多了Logs目录，也可以通过<code>docker inspect 容器</code> 看容器详细信息，如下：</p><figure><img src="'+hi+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>标签也打成功了：</p><figure><img src="'+ki+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>也可以通过<code>docker inspect 镜像</code>查看镜像内部的详细信息，执行命令<code>docker inspect newimage</code>如下：</p><figure><img src="'+di+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>关于步骤和效果，在Dockerfile注释和图表中已经详细描述。</p><h3 id="cmd和entrypoint的区别" tabindex="-1"><a class="header-anchor" href="#cmd和entrypoint的区别"><span>CMD和ENTRYPOINT的区别</span></a></h3><p>两个命令都是启动容器时指定执行命令和对应的参数，但两者稍有不同，如下：</p><ul><li><strong>CMD</strong>：只能最后一个命令会生效，命令会被docker run之后的参数替换掉；</li><li><strong>ENTRYPOINT</strong>：可以追加命令，比如增加参数；</li></ul><p>上面构建出来的newimage镜像用到的是ENTRYPOINT，所以我们先来测试一下ENTRYPOINT，如下：</p><figure><img src="'+oi+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><code>docker run</code>启动容器时指定了参数 <code>--urls=&quot;http://+:9999&quot;</code>，容器正常启动，并且参数还能生效，等同于在当前目录直接执行如下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> dotnet DockerfileDemo.dll --urls=&quot;http://+:9999&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在把ENTRYPOINT换成CMD试试，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> # 在以上的Dockerfile中</span></span>
<span class="line"><span> # 将ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerfileDemo.dll&quot;]换成CMD，如下：</span></span>
<span class="line"><span> CMD [&quot;dotnet&quot;, &quot;DockerfileDemo.dll&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重新构建一个镜像试试，测试如下：</p><figure><img src="`+ci+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如上图，对于CMD而言，如果在运行容器时，后面指定参数，这个参数就会把CMD命令替换掉，不能拼接，导致命令不对，所以报错；但这样就可以执行，如下：</p><figure><img src="'+gi+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如果在当前构建的上下文目录中不想要一些文件参与构建，<strong>可以通过在.dockerignore文件中进行配置</strong>，这个和git中的.gitignore一个道理，编写也比较简单，这里就不演示了。</p><p>对了，.NetCore的镜像列表可以参照这个地址：https://hub.docker.com/_/microsoft-dotnet-aspnet/，每个镜像都有对应的Dockerfile，感兴趣的小伙伴可以点进去看看，参考参考。</p><figure><img src="'+mi+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>在后端项目中创建dockerfile文件，内容如下</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> backend</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">csproj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> restore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> release</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码将在调用时按顺序执行以下步骤：</p><ul><li>拉取 mcr.microsoft.com/dotnet/sdk:6.0 映像并将其命名为 build</li><li>将映像中的工作目录设置为 /src</li><li>将在本地找到的名为 backend.csproj 的文件复制到刚创建的 /src 目录中</li><li>在项目中调用 dotnet restore</li><li>将本地工作目录中的所有内容复制到映像中</li><li>在项目中调用 dotnet publish</li></ul><p>然后在最后一行的正下方输入以下内容</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">aspnet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 443</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;backend.dll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拉取 mcr.microsoft.com/dotnet/aspnet:6.0 映像</li><li>将映像中的工作目录设置为 /app</li><li>公开端口 80 和 443</li><li>将上面创建的 build 映像的 /app 目录中的所有内容复制到此映像的应用目录中</li><li>将此映像的入口点设置为 dotnet，并将 backend.dll 作为参数传递</li></ul><p>然后保存dockerfile文件，打开命令行工具并导航到保存该文件的目录，运行命令去创建镜像，pizzabackend为镜像名</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pizzabackend</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想启动该镜像，那么就可以使用命令</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> run</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">it</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5200</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pizzabackendcontainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pizzabackend</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="示例文件" tabindex="-1"><a class="header-anchor" href="#示例文件"><span>示例文件</span></a></h3><p>官方的dockerfile文件</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#引用基础镜像，起一个别名base</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">core</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">aspnet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buster</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">slim</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置工作目录为/app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#对外暴露端口为80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#引用基础镜像，起一个别名build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">core</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buster</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置工作目录为/src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#将指定文件拷贝到指定目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Demo/Demo.csproj&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Demo/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#恢复项目的依赖项和工具 相当于平时vs还远nuget包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> restore</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Demo/Demo.csproj&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#拷贝当前文件夹的文件到容器/src目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置当前工作目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;/src/Demo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#以Release形式生成项目及其依赖项到容器/app/build目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Demo.csproj&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Release</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#江商贸的build作为基础镜像，又重命名为publish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> publish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#编辑应用程序、读取依赖项并且将生成的文件集发布到容器/app/publish目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> publish</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Demo.csproj&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Release</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">publish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#将上面base作为基础镜像又重命名为final</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> final</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置容器的工作目录为/app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#拷贝/app/publish目录到当前工作目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#指定容器入口命令，容器启动时候就会运行dotnet Demo.dll</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Demo.dll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：适用于还未发布的项目（需要安装sdk，需要在构建过程中直接对源码进行编译并发布）</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#基于\`microsoft/dotnet:latest\` 最新版来构建我们的镜像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> microsoft</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">latest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置工作目录为 \`/app\` 文件夹，即容器启动默认的文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#拷贝宿主机当前目录的内容到容器的app文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#还原nuget包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> restore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#编辑并发布程序集到容器的out目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Release</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#设置对外暴露的端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">#容器启动时候执行dotnet命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/out/CoreForDocker.dll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多阶段构建</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 阶段一：build  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 选择 SDK 镜像用于编译源码和生成发布文件  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">sdk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 复制源代码  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">csproj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 生成发布文件  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> release</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 阶段二：final  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 使用 ASP.NET Core 运行时镜像  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> mcr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">aspnet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">WORKDIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">## 从 build 阶段复制生成好的发布文件  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> .  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;AspNetDemo.dll&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了提高性能，可以通过 .dockerignore文件排除上下文目录下不需要的文件和目录。</p></blockquote><h2 id="常用示例" tabindex="-1"><a class="header-anchor" href="#常用示例"><span>常用示例</span></a></h2><h3 id="excel操作" tabindex="-1"><a class="header-anchor" href="#excel操作"><span>Excel操作</span></a></h3><p>Excel导出需要对dockerfile文件做一些处理，详情看下面内容</p><h4 id="普通镜像包" tabindex="-1"><a class="header-anchor" href="#普通镜像包"><span>普通镜像包</span></a></h4><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/aspnet:6.0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> TZ Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> apt-get update -y &amp;&amp; apt-get install -y --allow-unauthenticated libgdiplus \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; ln -s /usr/lib/libgdiplus.so /usr/lib/gdiplus.dll</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/sdk:6.0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="alpine3-18镜像包" tabindex="-1"><a class="header-anchor" href="#alpine3-18镜像包"><span>alpine3.18镜像包</span></a></h4><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/aspnet:6.0-alpine3.18 </span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> base</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> TZ Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> apk update &amp;&amp; apk add libgdiplus icu  \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &amp;&amp; ln -s /usr/lib/libgdiplus.so /usr/lib/gdiplus.dll </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 安装字体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> apk add ttf-freefont</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ttf-freefont 是一个提供一系列免费 TrueType 字体（TTF）的包。这些字体涵盖了多种字符集和风格，以及常用的符号和图标。安装此包通常是为了确保在容器环境中具备显示或处理多种文字类型的能力，特别是对于涉及图形界面、文档处理、网页渲染等场景的应用程序而言。通过提供广泛的语言支持和良好的可读性，ttf-freefont 能够提升应用程序的用户体验，并确保跨平台和跨语言的一致性表现。</p><h3 id="安装字体" tabindex="-1"><a class="header-anchor" href="#安装字体"><span>安装字体</span></a></h3><p>容器内没中文字体，安装中文字体，字体可以从C:\\Windows\\Fonts中获取ttc,ttf字体文件</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> update</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">install</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">recommends</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> libgdiplus</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> libc6</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fontconfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> xfonts</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">utils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fonts</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">  /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">share</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fonts</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mkfontscale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mkfontdir</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fc</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>免费可商用字体：<a href="https://github.com/wordshub/free-font" target="_blank" rel="noopener noreferrer">free-font</a></p><h3 id="操作图片" tabindex="-1"><a class="header-anchor" href="#操作图片"><span>操作图片</span></a></h3><p>安装libgdiplus，使用场景：验证码、导出excel等</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --allow-unauthenticated</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libgdiplus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/lib/libgdiplus.so</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/lib/gdiplus.dll</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 配置自定义源然后安装包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;s@http://[^/]* @http://mirror.sy/debian-security @&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;s@http://[^/]*/@http://mirror.sy/@&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /etc/apt/sources.list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> libgdiplus</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/lib/libgdiplus.so</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/lib/gdiplus.dll</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>命令详细教程：<a href="https://www.cnblogs.com/ityouknow/p/8595384.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/ityouknow/p/8595384.html</a><a href="https://mp.weixin.qq.com/s/3YwRusLjT2w6tfbISoCAHw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3YwRusLjT2w6tfbISoCAHw</a> | 全面详解 Dockerfile 文件！</p><p></p>`,181),yi=[ui];function vi(fi,Ei){return a(),s("div",null,yi)}const Ai=i(bi,[["render",vi],["__file","dockerfilecaozuo.html.vue"]]),Di=JSON.parse('{"path":"/cloud/container/docker/dockerfilecaozuo.html","title":"Dockerfile操作","lang":"zh-CN","frontmatter":{"title":"Dockerfile操作","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["cloud"],"tag":["无"],"filename":"dockerfilecaozuo","slug":"vcbhnx","docsId":"29454325","description":"初体验 准备一个项目 这里就直接创建一个默认的API项目(基于.NetCore3.1)即可，什么都不做。 编写Dockerfile 在项目根目录下增加一个Dockerfile文件，里面内容如下： 图片图片 具体内容如下 设置Dockerfile的文件属性为始终复制，如下： 图片图片 以文件系统的形式发布项目，指定本地目录，如下： 图片图片 将发布之后的...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/container/docker/dockerfilecaozuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Dockerfile操作"}],["meta",{"property":"og:description","content":"初体验 准备一个项目 这里就直接创建一个默认的API项目(基于.NetCore3.1)即可，什么都不做。 编写Dockerfile 在项目根目录下增加一个Dockerfile文件，里面内容如下： 图片图片 具体内容如下 设置Dockerfile的文件属性为始终复制，如下： 图片图片 以文件系统的形式发布项目，指定本地目录，如下： 图片图片 将发布之后的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/202212111144327.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T15:18:05.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T15:18:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile操作\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/202212111144327.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144648.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144320.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144960.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144030.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144782.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144433.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144833.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1609560081425-6ae7cdce-7b4e-4cc7-81b8-8eaf43eb4441.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144078.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144653.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144239.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145463.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145116.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145974.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145727.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145089.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145466.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145925.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145829.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145699.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145254.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145338.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145314.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111145603.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146484.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146297.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146363.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146235.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146690.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146582.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146096.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146496.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146434.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146227.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146334.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146265.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111146461.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147568.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147870.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147678.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147353.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147403.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147541.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147833.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147697.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147301.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147182.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147082.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147245.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111147248.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149346.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149334.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149136.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149214.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149951.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149132.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149148.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149439.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149402.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149883.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149297.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149964.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149624.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149767.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111149893.webp\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-22T15:18:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"初体验","slug":"初体验","link":"#初体验","children":[]},{"level":2,"title":"命令介绍","slug":"命令介绍","link":"#命令介绍","children":[{"level":3,"title":"预览","slug":"预览","link":"#预览","children":[]},{"level":3,"title":"常用命令实操","slug":"常用命令实操","link":"#常用命令实操","children":[{"level":4,"title":"全局命令","slug":"全局命令","link":"#全局命令","children":[]},{"level":4,"title":"镜像常用命令","slug":"镜像常用命令","link":"#镜像常用命令","children":[]},{"level":4,"title":"容器常用命令","slug":"容器常用命令","link":"#容器常用命令","children":[]}]}]},{"level":2,"title":"Dockerfile解析","slug":"dockerfile解析","link":"#dockerfile解析","children":[{"level":3,"title":"Dockerfile简介","slug":"dockerfile简介","link":"#dockerfile简介","children":[]},{"level":3,"title":"Dockerfile关键字","slug":"dockerfile关键字","link":"#dockerfile关键字","children":[{"level":4,"title":"FROM 关键字","slug":"from-关键字","link":"#from-关键字","children":[]},{"level":4,"title":"MAINTAINER/LABEL 关键字","slug":"maintainer-label-关键字","link":"#maintainer-label-关键字","children":[]},{"level":4,"title":"RUN 关键字","slug":"run-关键字","link":"#run-关键字","children":[]},{"level":4,"title":"WORKDIR 关键字","slug":"workdir-关键字","link":"#workdir-关键字","children":[]},{"level":4,"title":"ENV 关键字","slug":"env-关键字","link":"#env-关键字","children":[]},{"level":4,"title":"ADD 关键字","slug":"add-关键字","link":"#add-关键字","children":[]},{"level":4,"title":"COPY 关键字","slug":"copy-关键字","link":"#copy-关键字","children":[]},{"level":4,"title":"VOLUME 关键字","slug":"volume-关键字","link":"#volume-关键字","children":[]},{"level":4,"title":"EXPOSE 关键字","slug":"expose-关键字","link":"#expose-关键字","children":[]},{"level":4,"title":"CMD 关键字","slug":"cmd-关键字","link":"#cmd-关键字","children":[]},{"level":4,"title":"ENTRYPOINT 关键字","slug":"entrypoint-关键字","link":"#entrypoint-关键字","children":[]},{"level":4,"title":"ARG 关键字","slug":"arg-关键字","link":"#arg-关键字","children":[]},{"level":4,"title":"ONBUILD 关键字","slug":"onbuild-关键字","link":"#onbuild-关键字","children":[]}]}]},{"level":2,"title":"实战演示","slug":"实战演示","link":"#实战演示","children":[{"level":3,"title":"准备项目和Dockerfile文件","slug":"准备项目和dockerfile文件","link":"#准备项目和dockerfile文件","children":[]},{"level":3,"title":"发布","slug":"发布","link":"#发布","children":[]},{"level":3,"title":"启动容器","slug":"启动容器","link":"#启动容器","children":[]},{"level":3,"title":"设置Dockerfile","slug":"设置dockerfile","link":"#设置dockerfile","children":[]},{"level":3,"title":"CMD和ENTRYPOINT的区别","slug":"cmd和entrypoint的区别","link":"#cmd和entrypoint的区别","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"示例文件","slug":"示例文件","link":"#示例文件","children":[]}]},{"level":2,"title":"常用示例","slug":"常用示例","link":"#常用示例","children":[{"level":3,"title":"Excel操作","slug":"excel操作","link":"#excel操作","children":[{"level":4,"title":"普通镜像包","slug":"普通镜像包","link":"#普通镜像包","children":[]},{"level":4,"title":"alpine3.18镜像包","slug":"alpine3-18镜像包","link":"#alpine3-18镜像包","children":[]}]},{"level":3,"title":"安装字体","slug":"安装字体","link":"#安装字体","children":[]},{"level":3,"title":"操作图片","slug":"操作图片","link":"#操作图片","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1695545400000,"updatedTime":1713799085000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2}]},"readingTime":{"minutes":26.39,"words":7917},"filePathRelative":"cloud/container/docker/dockerfilecaozuo.md","localizedDate":"2023年9月24日","excerpt":"<h2>初体验</h2>\\n<ul>\\n<li>\\n<p>准备一个项目</p>\\n<p>这里就直接创建一个默认的API项目(基于.NetCore3.1)即可，什么都不做。</p>\\n</li>\\n<li>\\n<p>编写Dockerfile</p>\\n<p>在项目根目录下增加一个Dockerfile文件，里面内容如下：</p>\\n<figure><img src=\\"/common/202212111144327.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<p>具体内容如下</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim</span></span>\\n<span class=\\"line\\"><span>WORKDIR /app</span></span>\\n<span class=\\"line\\"><span>COPY . .</span></span>\\n<span class=\\"line\\"><span>EXPOSE 80</span></span>\\n<span class=\\"line\\"><span>ENTRYPOINT [\\"dotnet\\", \\"DockerDemo.dll\\"]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>设置Dockerfile的文件属性为始终复制，如下：</p>\\n<figure><img src=\\"/common/202212111144648.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<p>以文件系统的形式发布项目，指定本地目录，如下：</p>\\n<figure><img src=\\"/common/202212111144320.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n</li>\\n<li>\\n<p>将发布之后的文件拷贝到装有Docker的主机上</p>\\n<p>将项目进行发布，把发布之后的文件拷贝到我的阿里云服务器上，用到的工具是FinalShell(一个工具完成连接服务器和上传文件，很好用)，如下：</p>\\n<figure><img src=\\"/common/202212111144960.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n</li>\\n<li>\\n<p>打包为镜像</p>\\n<p>进入发布文件目录，执行<code>docker build</code>命令，将发布文件打包为一个镜像，如下：</p>\\n<figure><img src=\\"/common/202212111144030.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<p>上图中的mydockerdemo 是镜像名，可以自定义；通过<code>docker images</code>查看镜像是否生成，如下：</p>\\n<figure><img src=\\"/common/202212111144782.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n</li>\\n<li>\\n<p>根据镜像启动容器(里面包含我们的项目)</p>\\n<p>镜像生成之后，就可以通过<code>docker run</code>指令根据镜像启动容器了，即启动我们的项目</p>\\n<figure><img src=\\"/common/202212111144433.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>docker run -d --name mydockerdemo -p 9999:80 mydockerdemo</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>-d：后台模式运行；</p>\\n<p>--name：给运行中的容器指定一个名字；</p>\\n<p>-p：指定端口映射， 主机的端口9999映射到容器的端80，因为在容器里面我们的项目是以80 端口启动的；</p>\\n<p>最后一个参数是上一步生成的镜像名称， 即根据此镜像启动一个容器实例。</p>\\n</li>\\n<li>\\n<p>测试访问看看，只要配置了云服务器的安全组和防火墙放开9999端口，那么外网就可以访问了,如下：</p>\\n<figure><img src=\\"/common/202212111144833.webp\\" alt=\\"图片\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>图片</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{Ai as comp,Di as data};
