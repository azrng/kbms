import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-Du2i1EF2.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>该文章生成的内容唯一性待确认</p><p>使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增。<br> 格式：1bit保留 + 41bit时间戳 + 10bit机器 + 12bit序列号<br> 第一位不使用，主要是为了避免部分场景变成负数；<br><strong>41位时间戳</strong>，也就是2的41次方，毫秒为单位，足够保存69年。这里一般存储1970年以来的毫秒数，建议各个系统根据需要自定义这个开始日期；<br><strong>10位机器码</strong>，理论上可以表示1024台机器，也可以拆分几位表示机房几位表示机器。这里<strong>默认采用本机IPv4地址最后两段以及进程Id一起作为机器码</strong>，确保机房内部不同机器，以及相同机器上的不同进程，拥有不同的机器码；<br><strong>12位序列号</strong>，表示范围0~4095，一直递增，即使毫秒数加一，这里也不会归零，避免被恶意用户轻易猜测得到前后订单号；</p><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h3><p>示例如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Snowflake snowflake = new Snowflake();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">for (int i = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //生成ID</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    Console.WriteLine(snowflake.NewId());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//时间转为Id</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">var bbb = snowflake.GetId(DateTime.Now.AddDays(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用到的类</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">public class Snowflake</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    #region</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 随机数生成</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    private</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> static</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> readonly</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> RandomNumberGenerator</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _rnd</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> new</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> RNGCryptoServiceProvider();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 开始时间戳。首次使用前设置，否则无效，默认1970-1-1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    private</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> DateTime</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> StartTimestamp</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> {</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> get;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } = new DateTime(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1970</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 机器Id，取10位&lt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private int WorkerId { </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">get;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> set;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private int _sequence;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 序列号，取12位</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    public int Sequence { </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">get;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> set;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private long _msStart;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private Stopwatch _watch;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private long _lastTime;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #endregion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #region 核心方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private void Init()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 初始化WorkerId，取5位实例加上5位进程，确保同一台机器的WorkerId不同</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (WorkerId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;=</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> nodeId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Next(1,</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 1024);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //SysConfig.Current.Instance;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> pid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Process.GetCurrentProcess().Id;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> tid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Thread.CurrentThread.ManagedThreadId;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            WorkerId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ((nodeId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x1F)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;&lt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 5)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> |</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ((pid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ^</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> tid)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x1F);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 记录此时距离起点的毫秒数以及开机嘀嗒数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        if (_watch == </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            _msStart</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)(DateTime.Now</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> -</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> StartTimestamp).TotalMilliseconds;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            _watch</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Stopwatch.StartNew();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 获取下一个Id</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;returns&gt;&lt;/returns&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    public virtual long NewId()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        Init();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 此时嘀嗒数减去起点嘀嗒数，加上七点毫秒数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //var ms = (Int64)(DateTime.Now - StartTimestamp).TotalMilliseconds;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _watch.ElapsedMilliseconds</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _msStart;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> wid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> WorkerId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x3FF;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> seq</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Interlocked.Increment(ref</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _sequence)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x0FFF;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //!!! 避免时间倒退</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _lastTime)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _lastTime;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 相同毫秒内，如果序列号用尽，则可能超过4096，导致生成重复Id</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 睡眠1毫秒，抢占它的位置 @656092719（广西-风吹面）</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (_lastTime</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;&amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> seq</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //ms++;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // spin等1000次耗时141us，10000次耗时397us，100000次耗时3231us。@i9-10900k</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //Thread.SpinWait(1000);</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            while</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (_lastTime</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _watch.ElapsedMilliseconds</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _msStart;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        _lastTime = ms;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            * 每个毫秒内_Sequence没有归零，主要是为了安全，避免被人猜测得到前后Id。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            * 而毫秒内的顺序，重要性不大。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        return (ms &lt;&lt; (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) | (long)(wid &lt;&lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) | (long)seq;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 获取指定时间的Id，带上节点和序列号。可用于根据业务时间构造插入Id</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;time&quot;&gt;时间&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;returns&gt;&lt;/returns&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    public virtual long NewId(DateTime time)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        Init();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)(time</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> -</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> StartTimestamp).TotalMilliseconds;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> wid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> WorkerId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x3FF;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> seq</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Interlocked.Increment(ref</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _sequence)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x0FFF;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (ms</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;&lt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (10</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 12))</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> |</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)(wid</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;&lt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 12)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> |</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)seq;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 时间转为Id，不带节点和序列号。可用于构建时间片段查询</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;time&quot;&gt;时间&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;returns&gt;&lt;/returns&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    public virtual long GetId(DateTime time)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> t</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)(time</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> -</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> StartTimestamp).TotalMilliseconds;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> t</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;&lt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (10</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 12);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;尝试分析&lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;id&quot;&gt;&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;time&quot;&gt;时间&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;workerId&quot;&gt;节点&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;sequence&quot;&gt;序列号&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;returns&gt;&lt;/returns&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    public virtual bool TryParse(long id, out DateTime time, out int workerId, out int sequence)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        time</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> StartTimestamp.AddMilliseconds(id</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &gt;&gt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (10</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 12));</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        workerId</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (int)((id</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &gt;&gt;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 12)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x3FF);</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        sequence</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (int)(id</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0x0FFF);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> true;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;summary&gt;返回一个指定范围内的随机数&lt;/summary&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;remarks&gt;调用平均耗时37.76ns，其中GC耗时77.56%&lt;/remarks&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;min&quot;&gt;返回的随机数的下界（随机数可取该下界值）&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;param name=&quot;max&quot;&gt;返回的随机数的上界（随机数不能取该上界值）&lt;/param&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// &lt;returns&gt;&lt;/returns&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    private static int Next(int min, int max)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (max</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &lt;=</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> min)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            throw</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> new</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ArgumentOutOfRangeException(nameof(max));</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        var</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> _buf</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> new</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> byte[4];</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        _rnd.GetBytes(_buf);</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        int</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int32</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> =</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> BitConverter.ToInt32(_buf,</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0);</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (min</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int.MinValue</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;&amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> max</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int.MaxValue)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int32;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        if</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (min</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;&amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> max</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int.MaxValue)</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Math.Abs(int32);</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        return</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> min</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> int.MinValue</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &amp;&amp;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> max</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ==</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 0</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ?</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> -Math.Abs(int32)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">(int)(((long)(max</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> -</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> min)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> *</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)(uint)int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> &gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">)</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> +</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> (long)min);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    #endregion</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="难点" tabindex="-1"><a class="header-anchor" href="#难点"><span>难点</span></a></h2><h3 id="时钟倒拨问题" tabindex="-1"><a class="header-anchor" href="#时钟倒拨问题"><span>时钟倒拨问题</span></a></h3><p>Snowflake根据SmartOS操作系统调度算法，初始化时锁定基准时间，并记录处理器时钟嘀嗒数。在需要生成雪花Id时，取基准时间与当时处理器时钟嘀嗒数，计算得到时间戳。也就是说，在初始化之后，Snowflake根本不会读取系统时间，即使时间倒拨，也不影响雪花Id的生成！</p>`,11)]))}const p=s(t,[["render",e],["__file","xuehuaidgonggonglei.html.vue"]]),d=JSON.parse('{"path":"/middleware/identityId/xuehuaidgonggonglei.html","title":"雪花ID公共类","lang":"zh-CN","frontmatter":{"title":"雪花ID公共类","lang":"zh-CN","date":"2023-08-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"xuehuaidgonggonglei","slug":"uifd82","docsId":"31944582","description":"概述 该文章生成的内容唯一性待确认 使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增。 格式：1bit保留 + 41bit时间戳 + 10bit机器 + 12bit序列号 第一位不使用，主要是为了避免部分场景变成负数； 41位时间戳，也就是2的41次方，毫秒为单位，足够...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/identityId/xuehuaidgonggonglei.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"雪花ID公共类"}],["meta",{"property":"og:description","content":"概述 该文章生成的内容唯一性待确认 使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增。 格式：1bit保留 + 41bit时间戳 + 10bit机器 + 12bit序列号 第一位不使用，主要是为了避免部分场景变成负数； 41位时间戳，也就是2的41次方，毫秒为单位，足够..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"雪花ID公共类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[]}]},{"level":2,"title":"难点","slug":"难点","link":"#难点","children":[{"level":3,"title":"时钟倒拨问题","slug":"时钟倒拨问题","link":"#时钟倒拨问题","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.04,"words":1211},"filePathRelative":"middleware/identityId/xuehuaidgonggonglei.md","localizedDate":"2023年8月14日","excerpt":"<h2>概述</h2>\\n<p>该文章生成的内容唯一性待确认</p>\\n<p>使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增。<br>\\n格式：1bit保留 + 41bit时间戳 + 10bit机器 + 12bit序列号<br>\\n第一位不使用，主要是为了避免部分场景变成负数；<br>\\n<strong>41位时间戳</strong>，也就是2的41次方，毫秒为单位，足够保存69年。这里一般存储1970年以来的毫秒数，建议各个系统根据需要自定义这个开始日期；<br>\\n<strong>10位机器码</strong>，理论上可以表示1024台机器，也可以拆分几位表示机房几位表示机器。这里<strong>默认采用本机IPv4地址最后两段以及进程Id一起作为机器码</strong>，确保机房内部不同机器，以及相同机器上的不同进程，拥有不同的机器码；<br>\\n<strong>12位序列号</strong>，表示范围0~4095，一直递增，即使毫秒数加一，这里也不会归零，避免被恶意用户轻易猜测得到前后订单号；</p>","autoDesc":true}');export{p as comp,d as data};
