import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,d as s,e as l,b as a}from"./app-DMmdIwn0.js";const i="/kbms/common/1693919319536-5db38320-96b9-48c1-ab83-b3d865d377a4.png",u="/kbms/common/1693919679600-fae45950-d296-4607-98c4-d2f4c3dcf6fc.png",r="/kbms/common/1693920083114-5591d0dc-40da-4d84-820e-8ead6da9045b.png",k="/kbms/common/1693921203298-a25f3e0b-54d0-4072-a66e-a7a8905191ac.png",d="/kbms/common/1693920644746-38fb3b3f-afbd-4307-bc60-2b8b3cebb375.png",m="/kbms/common/1693920723889-8ee4b8f3-08f2-4d2c-bf75-c6bf250c61b3.png",v="/kbms/common/1693920789263-63593cbd-428c-4b7d-b05a-d445dafdc9f3.png",b={},g=a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>有时候需要临时编写测试代码，会使用LINQPad进行编写代码，虽然该工具很轻量级，还可以安装Nuget包，特别合适写测试demo等(目前我只是简单测试使用)，但是有时候还是习惯使用Visual Studio编写代码，感觉提示的效果更好，所以就是还是习惯性去开Visual Studio。</p><h2 id="然而" tabindex="-1"><a class="header-anchor" href="#然而"><span>然而</span></a></h2><p>LINQPad里面的Dump扩展方法确实用着很舒服，比如我们这么使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 输出对象</span>
	p<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">{</span>
		<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> Age<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用Dump方法输出下面很清晰的结果 <img src="`+i+`" alt="image.png" loading="lazy"></p><p>如果我使用Visual Studio新建一个控制台项目，将该代码拷贝进去</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出对象</span>
        p<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么就会提示报错，因为Dump方法是LINQPad才有的内容，如果我直接使用Console输出</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出对象</span>
    <span class="token comment">//p.Dump();</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// list.Dump();</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果又不是我们想要的内容 <img src="`+u+`" alt="image.png" loading="lazy"> 所以就想，那么自己是不是要写一个扩展方法，来实现Console的输出，效果类似LINQPad的输出，造轮子之前当然要看了一下是否有现成的轮子使用，毕竟我遇到的问题基本上网上的朋友都遇到过了，然后就简单查看找到了下面两个最近还在更新的且符合我需求的nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Dumpify&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;0.6.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Dumpper&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;0.0.7&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简单对比，我选择了下载量更高的Dumpify，下面就简单演示一下</p><h2 id="dumpify操作" tabindex="-1"><a class="header-anchor" href="#dumpify操作"><span>Dumpify操作</span></a></h2>`,14),y={href:"https://github.com/MoaidHathot/Dumpify",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>在引用Dumpify包的前提下，取消注释上面的Dump扩展方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Dumpify</span><span class="token punctuation">;</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出对象</span>
        p<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>展示效果如下 <img src="`+r+`" alt="image.png" loading="lazy"> 是不是很直观方便我们查看内容，那么这个包还有哪些功能那，可以访问它的文档查看，下面列举一些</p><h3 id="嵌套和循环引用" tabindex="-1"><a class="header-anchor" href="#嵌套和循环引用"><span>嵌套和循环引用</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Dumpify</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>Children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
        Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>
        Children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span> Children <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="支持数组字典和集合" tabindex="-1"><a class="header-anchor" href="#支持数组字典和集合"><span>支持数组字典和集合</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;222&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="打开或者关闭字段和私有成员" tabindex="-1"><a class="header-anchor" href="#打开或者关闭字段和私有成员"><span>打开或者关闭字段和私有成员</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AdditionValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">members</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MembersConfig</span> <span class="token punctuation">{</span> IncludeFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IncludeNonPublicMembers <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdditionValue</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _a<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _b<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AdditionValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _a <span class="token operator">=</span> a<span class="token punctuation">;</span>
        _b <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Value <span class="token operator">=&gt;</span> _a <span class="token operator">+</span> _b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="自定义颜色" tabindex="-1"><a class="header-anchor" href="#自定义颜色"><span>自定义颜色</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> package <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dumpify&quot;</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">&quot;Dump any object to Console&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
package<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">colors</span><span class="token punctuation">:</span> ColorConfig<span class="token punctuation">.</span>NoColors<span class="token punctuation">)</span><span class="token punctuation">;</span>
package<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">colors</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ColorConfig</span> <span class="token punctuation">{</span> PropertyValueColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DumpColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RoyalBlue<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>从官方文档中得知下个版本会添加更多的支持，如果有需要可以查看官方文档，目前上面那些已经够我测试使用了。</p>',17);function h(f,N){const t=e("ExternalLinkIcon");return o(),c("div",null,[g,n("p",null,[s("官方文档地址："),n("a",y,[s("https://github.com/MoaidHathot/Dumpify"),l(t)])]),w])}const _=p(b,[["render",h],["__file","kongzhitaishuchu.html.vue"]]),D=JSON.parse('{"path":"/dotnet/commonNuget/kongzhitaishuchu.html","title":"控制台输出","lang":"zh-CN","frontmatter":{"title":"控制台输出","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"kongzhitaishuchu","slug":"op09xdtt8yei7svr","docsId":"138430709","description":"前言 有时候需要临时编写测试代码，会使用LINQPad进行编写代码，虽然该工具很轻量级，还可以安装Nuget包，特别合适写测试demo等(目前我只是简单测试使用)，但是有时候还是习惯使用Visual Studio编写代码，感觉提示的效果更好，所以就是还是习惯性去开Visual Studio。 然而 LINQPad里面的Dump扩展方法确实用着很舒服，比...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/kongzhitaishuchu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"控制台输出"}],["meta",{"property":"og:description","content":"前言 有时候需要临时编写测试代码，会使用LINQPad进行编写代码，虽然该工具很轻量级，还可以安装Nuget包，特别合适写测试demo等(目前我只是简单测试使用)，但是有时候还是习惯使用Visual Studio编写代码，感觉提示的效果更好，所以就是还是习惯性去开Visual Studio。 然而 LINQPad里面的Dump扩展方法确实用着很舒服，比..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1693919319536-5db38320-96b9-48c1-ab83-b3d865d377a4.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"控制台输出\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1693919319536-5db38320-96b9-48c1-ab83-b3d865d377a4.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693919679600-fae45950-d296-4607-98c4-d2f4c3dcf6fc.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693920083114-5591d0dc-40da-4d84-820e-8ead6da9045b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693921203298-a25f3e0b-54d0-4072-a66e-a7a8905191ac.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693920644746-38fb3b3f-afbd-4307-bc60-2b8b3cebb375.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693920723889-8ee4b8f3-08f2-4d2c-bf75-c6bf250c61b3.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1693920789263-63593cbd-428c-4b7d-b05a-d445dafdc9f3.png\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"然而","slug":"然而","link":"#然而","children":[]},{"level":2,"title":"Dumpify操作","slug":"dumpify操作","link":"#dumpify操作","children":[{"level":3,"title":"嵌套和循环引用","slug":"嵌套和循环引用","link":"#嵌套和循环引用","children":[]},{"level":3,"title":"支持数组字典和集合","slug":"支持数组字典和集合","link":"#支持数组字典和集合","children":[]},{"level":3,"title":"打开或者关闭字段和私有成员","slug":"打开或者关闭字段和私有成员","link":"#打开或者关闭字段和私有成员","children":[]},{"level":3,"title":"自定义颜色","slug":"自定义颜色","link":"#自定义颜色","children":[]}]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.18,"words":953},"filePathRelative":"dotnet/commonNuget/kongzhitaishuchu.md","localizedDate":"2023年9月5日","excerpt":"<h2>前言</h2>\\n<p>有时候需要临时编写测试代码，会使用LINQPad进行编写代码，虽然该工具很轻量级，还可以安装Nuget包，特别合适写测试demo等(目前我只是简单测试使用)，但是有时候还是习惯使用Visual Studio编写代码，感觉提示的效果更好，所以就是还是习惯性去开Visual Studio。</p>\\n<h2>然而</h2>\\n<p>LINQPad里面的Dump扩展方法确实用着很舒服，比如我们这么使用</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> p <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Person</span> <span class=\\"token punctuation\\">{</span> Name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"张三\\"</span><span class=\\"token punctuation\\">,</span> Age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">26</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 输出对象</span>\\n\\tp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dump</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span>Person<span class=\\"token punctuation\\">&gt;</span></span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Person</span><span class=\\"token punctuation\\">{</span> Name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"李四\\"</span><span class=\\"token punctuation\\">,</span> Age<span class=\\"token operator\\">=</span><span class=\\"token number\\">20</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Person</span><span class=\\"token punctuation\\">{</span> Name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"王五\\"</span><span class=\\"token punctuation\\">,</span> Age<span class=\\"token operator\\">=</span><span class=\\"token number\\">10</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dump</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">int</span></span> Age <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{_ as comp,D as data};
