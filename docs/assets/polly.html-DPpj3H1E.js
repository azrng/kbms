import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as t,b as e}from"./app-qB9_Bjjp.js";const i="/kbms/common/1622359657960-e364a275-a173-4c5a-b6a5-156d4611b463.png",u="/kbms/common/1622371056949-5dd53bce-ddf5-461e-9ef5-5d655c3e825f.png",r="/kbms/common/1622372645523-e38acc90-0e1d-4d35-b040-58a04ea544f9.png",k={},d=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),m=n("p",null,"Polly是一个.Net弹性和瞬态故障处理库，允许开发人员通过更简单并且线程安全的方式来执行如重试(Retry)、断路(Circuit Breaker)、超时(Timeout)、隔离(Bulkhead Isolation)、缓存(Cache)、降级回退(Fallback)、策略组合(PolicyWrap)等策略。 被动策略：异常处理、结果处理 主动策略：超时处理、断路器、降级回退、缓存",-1),v={href:"https://github.com/App-vNext/Polly/wiki/Supported-targets",target:"_blank",rel:"noopener noreferrer"},b=e(`<h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h2><ul><li>定义要处理的异常类型或者返回值</li><li>定义要处理的动作(重试、熔断、降级响应等)</li><li>使用定义的策略来执行代码</li></ul><p>Policy.Handle&lt; T &gt; 用来定义异常的类型，表示当执行的方法发生某种异常的时候定义为故障。当故障发生的时候 Polly 会为我们自动执行某种恢复策略，比如重试。 Policy.HandleResult&lt; T &gt; 用来定义返回值的类型，表示当执行的方法返回值达成某种条件的时候定义为故障。当故障发生的时候 Polly 会为我们自动执行某种恢复策略，比如重试。 Policy.TimeoutAsync 表示当一个操作超过设定时间时会引发一个 TimeoutRejectedException 。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>常用nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Polly&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;7.2.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">//核心包</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Polly.Extensions.Http&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// 基于http的一些扩展</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Http.Polly&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token comment">// httpfactory组件包扩展</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><ul><li>设置失败重试的次数</li><li>设置带有延长时间的等待间隔(一次时间比一次时间间隔长)</li><li>设置降级响应</li><li>设置断路器</li></ul><h3 id="失败重试-retry" tabindex="-1"><a class="header-anchor" href="#失败重试-retry"><span>失败重试(Retry)</span></a></h3><p>当程序发生故障时候，可以进行自动的重试。</p><h4 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h4><ul><li>服务“失败”是短暂的，可愈的</li><li>服务是幂等的，重复调用不会有副作用。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>网络闪断、部分服务节点异常</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">RetrySample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//手动设置重试时间</span>
	<span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">WaitAndRetry</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
			TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">try</span>
	<span class="token punctuation">{</span>
		retry<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
		<span class="token punctuation">{</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;开始调用接口&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Minute <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;接口异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;调用接口结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;异常  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果： <img src="`+i+`" alt="image.png" loading="lazy"> 其他配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token comment">//初始尝试后，再重试了三次后，还没有满足情况，然后直接抛出异常</span>
    <span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   

    <span class="token comment">//通过计算重试时间：重试3次每次间隔是2的次方</span>
    <span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> Policy
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WaitAndRetry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> retryAttempt <span class="token operator">=&gt;</span>
        TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> retryAttempt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//永久执行   间隔为2 3 4 5 6 7秒</span>
    <span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> Policy
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WaitAndRetryForever</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> tr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//重新尝试刷新授权，场景重审政策可用于维护对第三方系统的授权，因为第三方系统token会定期失效</span>
    <span class="token class-name"><span class="token keyword">var</span></span> authorisationEnsuringPolicy <span class="token operator">=</span> Policy
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HandleResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">RetryAsync</span><span class="token punctuation">(</span>
           <span class="token named-parameter punctuation">retryCount</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// Consider how many retries. If auth lapses and you have valid credentials, one should be enough; too many tries can cause some auth systems to block or throttle the caller. </span>
           onRetryAsync<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>outcome<span class="token punctuation">,</span> retryNumber<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">FooRefreshAuthorizationAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> 
          <span class="token comment">/* more configuration */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> authorisationEnsuringPolicy<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> <span class="token function">DoSomethingThatRequiresAuthorization</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断路-circuit-breaker-服务熔断" tabindex="-1"><a class="header-anchor" href="#断路-circuit-breaker-服务熔断"><span>断路(Circuit Breaker) 服务熔断</span></a></h3><p>断路器模式指，在某个服务发生故障时，断路器的故障监控向调用放返回一个及时的错误响应，而不是长时间的等待。这样就不会使得调用线程因调用故障被长时间占用，从而导致整个应用程序故障。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">CircuitBreakerSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//使用场景：调用接口推送数据，然后对方异常，出现几次错误后，触发熔断，等一段时间才能继续执行</span>
	<span class="token class-name"><span class="token keyword">var</span></span> policy <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment">//请求3次，如果还是错误，那么就熔断1分钟</span>
			<span class="token punctuation">.</span><span class="token function">CircuitBreaker</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//for循环来代替用户访问的操作</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">try</span>
		<span class="token punctuation">{</span>
			policy<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
			<span class="token punctuation">{</span>
				Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;准备执行   </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;接口值为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;接口异常</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> DateTime<span class="token punctuation">.</span>Now  </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：我们请求请求某一个服务，出现几次错误后，可以直接一段时间内熔断该服务 <img src="`+u+`" alt="image.png" loading="lazy"></p><h3 id="超时-timeout" tabindex="-1"><a class="header-anchor" href="#超时-timeout"><span>超时(Timeout)</span></a></h3><p>超时处理是指我们为服务的请求设置一个超时时间，如果超过我们设定的时候，就会按照我们呢约定的进行处理，比如返回一个缓存的数据等，但是一般不单独使用，而是搭配其他策略一起使用，比如当请求某一个第三方服务超时后，可以直接降级去请求另一个。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">TimeOutSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//设置3秒超时，悲观模式，超时直接报错</span>
            <span class="token class-name"><span class="token keyword">var</span></span> policy <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Polly<span class="token punctuation">.</span>Timeout<span class="token punctuation">.</span>TimeoutStrategy<span class="token punctuation">.</span>Pessimistic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                policy<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;异常 : </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),g={href:"https://github.com/App-vNext/Polly/wiki/Timeout",target:"_blank",rel:"noopener noreferrer"},h=e('<p>结果 <img src="'+r+`" alt="image.png" loading="lazy"></p><h3 id="缓存-cache" tabindex="-1"><a class="header-anchor" href="#缓存-cache"><span>缓存(<strong>Cache</strong>)</span></a></h3><p>可以实现类似于AOP的机制，当缓存命中的时候可以快速响应缓存。</p><h3 id="降级回退-fallback-失败降级" tabindex="-1"><a class="header-anchor" href="#降级回退-fallback-失败降级"><span>降级回退(Fallback)失败降级</span></a></h3><p>当我们服务不可用的时候，我们可以响应一个更友好的结果而不是返回一个错误信息，让我们的程序依然可以执行下去。 比如我们的订单详情服务里面会调用会员信息服务接口。如果会员信息服务接口故障会造成订单详情服务也同样故障。这时候我们可以对会员信息服务接口进行降级，在发生故障的时候直接返回固定的信息从而保证订单详情主服务是可用的。 下面我们演示下如何使用 Polly 进行服务调用的降级处理。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> fallback <span class="token operator">=</span> Policy<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token string">&quot;FALLBACK&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">WrapAsync</span><span class="token punctuation">(</span>Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RetryAsync</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> memberJson <span class="token operator">=</span> <span class="token keyword">await</span> fallback<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span>
                            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;http://</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberServiceAddress<span class="token punctuation">.</span>Address</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberServiceAddress<span class="token punctuation">.</span>Port</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/member/&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span>MemberId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        result<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> json<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>memberJson <span class="token operator">!=</span> <span class="token string">&quot;FALLBACK&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> member <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MemberVM<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>memberJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vm<span class="token punctuation">.</span>Member <span class="token operator">=</span> member<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们使用 Policy 的 FallbackAsync(&quot;FALLBACK&quot;) 方法设置降级的返回值。当我们服务需要降级的时候会返回 &quot;FALLBACK&quot; 的固定值。 同时使用 WrapAsync 方法把重试策略包裹起来。这样我们就可以达到当服务调用失败的时候重试3次，如果重试依然失败那么返回值降级为固定的 &quot;FALLBACK&quot; 值。</p><h3 id="策略组合-policywrap" tabindex="-1"><a class="header-anchor" href="#策略组合-policywrap"><span>策略组合(PolicyWrap)</span></a></h3><p>可以将上面的策略进行组合使用。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,10),y={href:"https://github.com/App-vNext/Polly/wiki",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/App-vNext/Polly",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/edisonchou/p/9159644.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.cnblogs.com/kklldog/p/netcore-with-microservices-08.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s/aSqovQOox4gl_LO9UtSRPA",target:"_blank",rel:"noopener noreferrer"};function P(_,A){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,m,n("blockquote",null,[n("p",null,[s("支持的框架："),n("a",v,[s("https://github.com/App-vNext/Polly/wiki/Supported-targets"),t(a)])])]),b,n("blockquote",null,[n("p",null,[s("一个是悲观策略（Pessimistic），一个是乐观策略（Optimistic）。其中，悲观策略超时后会直接抛异常，而乐观策略则不会，而只是触发CancellationTokenSource.Cancel函数，需要等待委托自行终止操作。一般情况下，我们都会用悲观策略。 详情："),n("a",g,[s("https://github.com/App-vNext/Polly/wiki/Timeout"),t(a)])])]),h,n("p",null,[s("GitHub："),n("a",y,[s("https://github.com/App-vNext/Polly/wiki"),t(a)]),n("a",f,[s("https://github.com/App-vNext/Polly"),t(a)]),s(" 周大佬："),n("a",w,[s("https://www.cnblogs.com/edisonchou/p/9159644.html"),t(a)]),s(" polly服务熔断 "),n("a",x,[s("https://www.cnblogs.com/kklldog/p/netcore-with-microservices-08.html"),t(a)]),n("a",q,[s("https://mp.weixin.qq.com/s/aSqovQOox4gl_LO9UtSRPA"),t(a)]),s(" | ASP.NET Core中如何做服务的熔断与降级")])])}const S=p(k,[["render",P],["__file","polly.html.vue"]]),R=JSON.parse('{"path":"/middleware/smallService/polly.html","title":"Polly","lang":"zh-CN","frontmatter":{"title":"Polly","lang":"zh-CN","date":"2023-08-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"polly","slug":"vgzrwn","docsId":"46265788","description":"介绍 Polly是一个.Net弹性和瞬态故障处理库，允许开发人员通过更简单并且线程安全的方式来执行如重试(Retry)、断路(Circuit Breaker)、超时(Timeout)、隔离(Bulkhead Isolation)、缓存(Cache)、降级回退(Fallback)、策略组合(PolicyWrap)等策略。 被动策略：异常处理、结果处理 主...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/polly.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Polly"}],["meta",{"property":"og:description","content":"介绍 Polly是一个.Net弹性和瞬态故障处理库，允许开发人员通过更简单并且线程安全的方式来执行如重试(Retry)、断路(Circuit Breaker)、超时(Timeout)、隔离(Bulkhead Isolation)、缓存(Cache)、降级回退(Fallback)、策略组合(PolicyWrap)等策略。 被动策略：异常处理、结果处理 主..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1622359657960-e364a275-a173-4c5a-b6a5-156d4611b463.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-09T14:02:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-09T14:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Polly\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1622359657960-e364a275-a173-4c5a-b6a5-156d4611b463.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1622371056949-5dd53bce-ddf5-461e-9ef5-5d655c3e825f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1622372645523-e38acc90-0e1d-4d35-b040-58a04ea544f9.png\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-09T14:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":3,"title":"失败重试(Retry)","slug":"失败重试-retry","link":"#失败重试-retry","children":[{"level":4,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":3,"title":"断路(Circuit Breaker) 服务熔断","slug":"断路-circuit-breaker-服务熔断","link":"#断路-circuit-breaker-服务熔断","children":[]},{"level":3,"title":"超时(Timeout)","slug":"超时-timeout","link":"#超时-timeout","children":[]},{"level":3,"title":"缓存(Cache)","slug":"缓存-cache","link":"#缓存-cache","children":[]},{"level":3,"title":"降级回退(Fallback)失败降级","slug":"降级回退-fallback-失败降级","link":"#降级回退-fallback-失败降级","children":[]},{"level":3,"title":"策略组合(PolicyWrap)","slug":"策略组合-policywrap","link":"#策略组合-policywrap","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1699538549000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"middleware/smallService/polly.md","localizedDate":"2023年8月6日","excerpt":"<h2>介绍</h2>\\n<p>Polly是一个.Net弹性和瞬态故障处理库，允许开发人员通过更简单并且线程安全的方式来执行如重试(Retry)、断路(Circuit Breaker)、超时(Timeout)、隔离(Bulkhead Isolation)、缓存(Cache)、降级回退(Fallback)、策略组合(PolicyWrap)等策略。\\n被动策略：异常处理、结果处理\\n主动策略：超时处理、断路器、降级回退、缓存</p>\\n<blockquote>\\n<p>支持的框架：<a href=\\"https://github.com/App-vNext/Polly/wiki/Supported-targets\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/App-vNext/Polly/wiki/Supported-targets</a></p>\\n</blockquote>","autoDesc":true}');export{S as comp,R as data};
