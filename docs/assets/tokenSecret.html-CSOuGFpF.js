import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const p={},e=t(`<p>原理:</p><h3 id="_1-认证服务" tabindex="-1"><a class="header-anchor" href="#_1-认证服务"><span>1.认证服务</span></a></h3><p>做一个认证服务，提供一个认证的webapi，用法先访问它获取对应的token（比如说利用传过去的id去生成了一个token，然后可以把这个token去存储到HttpRuntime.Cache缓存中，然后去请求接口的时候，去这个里获取token，如果不同或者找不到说明失败） 例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token comment">//插入缓存</span>
            <span class="token class-name">Tokens</span> token <span class="token operator">=</span> <span class="token punctuation">(</span>Tokens<span class="token punctuation">)</span>HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>StaffId <span class="token operator">=</span> ID<span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>SignToken <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                token<span class="token punctuation">.</span>ExpireTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                HttpRuntime<span class="token punctuation">.</span>Cache<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>StaffId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>ExpireTime<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-计算签名" tabindex="-1"><a class="header-anchor" href="#_2-计算签名"><span>2.计算签名</span></a></h3><p>用户拿着相应的token以及请求的参数和服务器提供的签名算法计算出签名后再去访问指定的api。</p><h3 id="_3-签名比对" tabindex="-1"><a class="header-anchor" href="#_3-签名比对"><span>3.签名比对</span></a></h3><p>服务器每次收到请求就去获取对应用户的token和请求参数，服务器再次计算签名和客户端签名进行比对，如果验证通过则正常访问相应的api，验证失败则返回具体的失败信息。</p><h4 id="_3-1-get请求" tabindex="-1"><a class="header-anchor" href="#_3-1-get请求"><span>3.1 get请求</span></a></h4><p>按照请求参数名称将所有请求参数按照字母先后顺序排序得到：keyvaluekeyvalue...keyvalue  字符串如：将arong=1,mrong=2,crong=3 排序为：arong=1, crong=3,mrong=2  然后将参数名和参数值进行拼接得到参数字符串：arong1crong3mrong2。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetQueryString</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> parames<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 第一步：把字典按Key的字母顺序排序</span>
            <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parames<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IEnumerator<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dem <span class="token operator">=</span> sortedParams<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 第二步：把所有参数名和参数值串在一起</span>
            <span class="token class-name">StringBuilder</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//签名字符串</span>
            <span class="token class-name">StringBuilder</span> queryStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//url参数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parames <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> parames<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>dem<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> key <span class="token operator">=</span> dem<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Key<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> dem<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    query<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queryStr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queryStr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> queryStr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-post请求" tabindex="-1"><a class="header-anchor" href="#_3-2-post请求"><span>3.2 post请求</span></a></h4><p>将请求的参数对象序列化为json格式字符串 Product product = new Product() { Id = 1, Name = &quot;安慕希&quot;, Count = 10, Price = 58.8 }; var data=JsonConvert.SerializeObject(product);</p><h4 id="_3-3-请求头" tabindex="-1"><a class="header-anchor" href="#_3-3-请求头"><span>3.3 请求头</span></a></h4><p>在请求头中添加timespan（时间戳），nonce（随机数），staffId（用户Id），signature（签名参数）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token comment">//加入头信息</span>
            request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;staffid&quot;</span><span class="token punctuation">,</span> staffId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前请求用户StaffId</span>
            request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发起请求时的时间戳（单位：毫秒）</span>
            request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;nonce&quot;</span><span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发起请求时的随机数            </span>
			request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">,</span> <span class="token function">GetSignature</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">,</span>nonce<span class="token punctuation">,</span>staffId<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前请求内容的数字签名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-计算签名" tabindex="-1"><a class="header-anchor" href="#_3-4-计算签名"><span>3.4 计算签名</span></a></h4><p>根据请求参数计算本次请求的签名，用timespan+nonc+staffId+token+data（请求参数字符串）得到signStr签名字符串，然后再进行排序和MD5加密得到最终的signature签名字符串，添加到请求头中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetSignature</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> timeStamp<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> nonce<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> staffId<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> data<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            token自己获取
            <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>MD5<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//拼接签名数据</span>
            <span class="token class-name"><span class="token keyword">var</span></span> signStr <span class="token operator">=</span> timeStamp <span class="token operator">+</span>nonce<span class="token operator">+</span> staffId <span class="token operator">+</span> token<span class="token operator">+</span> data<span class="token punctuation">;</span>
            <span class="token comment">//将字符串中字符按升序排序</span>
            <span class="token class-name"><span class="token keyword">var</span></span> sortStr <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>signStr<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>sortStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//使用MD5加密</span>
            <span class="token class-name"><span class="token keyword">var</span></span> md5Val <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//把二进制转化为大写的十六进制</span>
            <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token keyword">in</span> md5Val<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;X2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 获取时间戳</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">TimeSpan</span> ts <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>TotalMilliseconds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///获取随机数  </span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数签名" tabindex="-1"><a class="header-anchor" href="#参数签名"><span>参数签名</span></a></h2><p><strong>参数签名如何生成？作用是什么？</strong> 参数签名sign：为了提高传参过程中，防止参数被恶意修改，在请求接口的时候加上sign可以有效防止参数被篡改，那么sign是如何起作用的呢？ 看看它的生成方法就明白了 比如有这样一个接口http:127.0.0.1/api/product?&amp;type=zl&amp;p1=value1&amp;p2=value2&amp;p3=&amp;sign=signValue 第一步：拼接参数字符串，除去sign参数本身和为空值的p3，那么剩下的就是字符串type=zl&amp;p1=value1&amp;p2=value2,然后按参数名字符升（降）序，得到字符串 p1=value1&amp;p2=value2&amp;type=zl 第二步：然后做参数名和值的拼接，得到字符串p1value1p2value2type=zl,注意编码，不能出现这种&quot; ,要转码后拼接 第三步：将字符串进行DES加密，假设p1value1p2value2type=zl进行des加密后的结果是abc123，最终得到的字符串abc123就是参数sign的值signValue 第四步：在接口中我们会接收到参数名sign的参数值abc123，然后解密得到字符串p1value1p2value2type=zl，再与接口中参数拼接排序后进行比较，如果不一样则说明参数的循序不一样，参数的值就一定是被修改过了。 总结： 1.接口的调用方和接口的提供方统一约定参数加密算法 2.参数签名就是对参数key ，value的一个记录。参数如果被修改肯定对不上参数签名，就不会调用请求</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetQueryString</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> parames<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 第一步：把字典按Key的字母顺序排序</span>
            <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parames<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IEnumerator<span class="token punctuation">&lt;</span>KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dem <span class="token operator">=</span> sortedParams<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 第二步：把所有参数名和参数值串在一起</span>
            <span class="token class-name">StringBuilder</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//签名字符串</span>
            <span class="token class-name">StringBuilder</span> queryStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//url参数</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>parames <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> parames<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>dem<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> key <span class="token operator">=</span> dem<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Key<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> dem<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    query<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queryStr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Tuple<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queryStr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> queryStr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[e];function c(u,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","tokenSecret.html.vue"]]),d=JSON.parse('{"path":"/dotnet/api/controllerApi/safe/tokenSecret.html","title":"后台接口-Token+参数签名","lang":"zh-CN","frontmatter":{"title":"后台接口-Token+参数签名","lang":"zh-CN","date":"2022-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"houtaijiekou-token+canshuqianming","slug":"cnizm2","docsId":"30017721","description":"原理: 1.认证服务 做一个认证服务，提供一个认证的webapi，用法先访问它获取对应的token（比如说利用传过去的id去生成了一个token，然后可以把这个token去存储到HttpRuntime.Cache缓存中，然后去请求接口的时候，去这个里获取token，如果不同或者找不到说明失败） 例子： 2.计算签名 用户拿着相应的token以及请求的参...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/safe/tokenSecret.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"后台接口-Token+参数签名"}],["meta",{"property":"og:description","content":"原理: 1.认证服务 做一个认证服务，提供一个认证的webapi，用法先访问它获取对应的token（比如说利用传过去的id去生成了一个token，然后可以把这个token去存储到HttpRuntime.Cache缓存中，然后去请求接口的时候，去这个里获取token，如果不同或者找不到说明失败） 例子： 2.计算签名 用户拿着相应的token以及请求的参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"后台接口-Token+参数签名\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"1.认证服务","slug":"_1-认证服务","link":"#_1-认证服务","children":[]},{"level":3,"title":"2.计算签名","slug":"_2-计算签名","link":"#_2-计算签名","children":[]},{"level":3,"title":"3.签名比对","slug":"_3-签名比对","link":"#_3-签名比对","children":[{"level":4,"title":"3.1 get请求","slug":"_3-1-get请求","link":"#_3-1-get请求","children":[]},{"level":4,"title":"3.2 post请求","slug":"_3-2-post请求","link":"#_3-2-post请求","children":[]},{"level":4,"title":"3.3 请求头","slug":"_3-3-请求头","link":"#_3-3-请求头","children":[]},{"level":4,"title":"3.4 计算签名","slug":"_3-4-计算签名","link":"#_3-4-计算签名","children":[]}]},{"level":2,"title":"参数签名","slug":"参数签名","link":"#参数签名","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.52,"words":1356},"filePathRelative":"dotnet/api/controllerApi/safe/tokenSecret.md","localizedDate":"2022年9月24日","excerpt":"<p>原理:</p>\\n<h3>1.认证服务</h3>\\n<p>做一个认证服务，提供一个认证的webapi，用法先访问它获取对应的token（比如说利用传过去的id去生成了一个token，然后可以把这个token去存储到HttpRuntime.Cache缓存中，然后去请求接口的时候，去这个里获取token，如果不同或者找不到说明失败）\\n例子：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code> <span class=\\"token comment\\">//插入缓存</span>\\n            <span class=\\"token class-name\\">Tokens</span> token <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Tokens<span class=\\"token punctuation\\">)</span>HttpRuntime<span class=\\"token punctuation\\">.</span>Cache<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>HttpRuntime<span class=\\"token punctuation\\">.</span>Cache<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Get</span><span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                token <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Tokens</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                token<span class=\\"token punctuation\\">.</span>StaffId <span class=\\"token operator\\">=</span> ID<span class=\\"token punctuation\\">;</span>\\n                token<span class=\\"token punctuation\\">.</span>SignToken <span class=\\"token operator\\">=</span> Guid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewGuid</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                token<span class=\\"token punctuation\\">.</span>ExpireTime <span class=\\"token operator\\">=</span> DateTime<span class=\\"token punctuation\\">.</span>Now<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddDays</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                HttpRuntime<span class=\\"token punctuation\\">.</span>Cache<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Insert</span><span class=\\"token punctuation\\">(</span>token<span class=\\"token punctuation\\">.</span>StaffId<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> token<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> token<span class=\\"token punctuation\\">.</span>ExpireTime<span class=\\"token punctuation\\">,</span> TimeSpan<span class=\\"token punctuation\\">.</span>Zero<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
