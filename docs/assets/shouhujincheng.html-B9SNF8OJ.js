import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as p,c as l,a as o,d as e,e as r}from"./app-qB9_Bjjp.js";const a={},i={href:"http://localhost:5000",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.cnblogs.com/qtiger/p/13853828.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html",target:"_blank",rel:"noopener noreferrer"};function d(h,m){const t=s("ExternalLinkIcon");return p(),l("div",null,[o("p",null,[e("守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端中都显示并且不会被任何终端所干扰。它从被执行的时候开始，结束于系统关闭。 使用目的：为了让我们的程序在异常或者电脑重启的时候仍可以正常访问。   现在我们将使用supervisor来管理进程，理由就是官方推荐，并且文档全 在linux中操作 安装supervisor 命令：yum install supervisor 安装完成之后，在 /ect/supervisor/conf.d/ 目录下新建一个配置文件（touch HelloWebApp.conf），取名为 HelloWebApp.conf 打开HelloWebApp.conf （vim HelloWebApp.conf），写入如下命令 [program:HelloWebApp] command=dotnet HelloWebApp.dll  #要执行的命令 directory=/home/yxd/Workspace/publish #命令执行的目录 environment=ASPNETCORE__ENVIRONMENT=Production #环境变量 user=www-data  #进程执行的用户身份 stopsignal=INT autostart=true #是否自动启动 autorestart=true #是否自动重启 startsecs=1 #自动重启间隔 stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志 stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志     配置好以后 (:wq保存退出)，需要重新加载一下配置   sudo supervisorctl shutdown && sudo supervisord -c /etc/supervisor/supervisord.conf   或者你可以直接重启 Supervisor：   sudo service supervisor stop sudo service supervisor start 如果启动的时候报错，可以打开位于/etc/log/supervisor/supervisord.log文件来查看具体的日志。   其中dotnet 命令输出的日志文件分别为位于   /var/log/HelloWebApp.err.log /var/log/HelloWebApp.out.log 在这些文件里面你可以查看程序中的异常信息或者是运行信息。   打开浏览器，输入 "),o("a",i,[e("http://localhost:5000"),r(t)]),e(" 发现已经可以浏览了。   Supervisor 常用命令 supervisorctl shutdown #关闭所有任务 supervisorctl stop|start program_name supervisorctl status #查看所有任务状态       文档地址： "),o("a",c,[e("https://www.cnblogs.com/qtiger/p/13853828.html"),r(t)]),o("a",u,[e("https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html"),r(t)])])])}const v=n(a,[["render",d],["__file","shouhujincheng.html.vue"]]),f=JSON.parse('{"path":"/dotnet/buildAndRelease/release/linux/shouhujincheng.html","title":"守护进程","lang":"zh-CN","frontmatter":{"title":"守护进程","lang":"zh-CN","date":"2021-09-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shouhujincheng","slug":"ifxngc","docsId":"32029577","description":"守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/buildAndRelease/release/linux/shouhujincheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"守护进程"}],["meta",{"property":"og:description","content":"守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T15:31:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-09-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T15:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"守护进程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T15:31:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1708875100000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.97,"words":590},"filePathRelative":"dotnet/buildAndRelease/release/linux/shouhujincheng.md","localizedDate":"2021年9月12日","excerpt":"<p>守护进程：运行在后台的特殊进程，独立于控制终端并且周期性的执行某种任务或者等待处理某些事情。在linux系统中，用户和系统交互的界面称为终端，每一个终端从开始运行的进程依赖于这个终端，这个终端被称为这些进程的控制终端，终端关闭，相对应的进程也就会自动关闭。守护就是就可以突破这种限制，脱离终端并且在后台运行，脱离终端的目的就是让该进程运行的信息在所有终端中都显示并且不会被任何终端所干扰。它从被执行的时候开始，结束于系统关闭。\\n使用目的：为了让我们的程序在异常或者电脑重启的时候仍可以正常访问。\\n&nbsp;\\n现在我们将使用supervisor来管理进程，理由就是官方推荐，并且文档全\\n在linux中操作\\n安装supervisor\\n命令：yum install supervisor\\n安装完成之后，在&nbsp;/ect/supervisor/conf.d/&nbsp;目录下新建一个配置文件（touch HelloWebApp.conf），取名为&nbsp;HelloWebApp.conf\\n打开HelloWebApp.conf （vim HelloWebApp.conf），写入如下命令\\n[program:HelloWebApp]\\ncommand=dotnet HelloWebApp.dll&nbsp; #要执行的命令\\ndirectory=/home/yxd/Workspace/publish #命令执行的目录\\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量\\nuser=www-data&nbsp; #进程执行的用户身份\\nstopsignal=INT\\nautostart=true #是否自动启动\\nautorestart=true #是否自动重启\\nstartsecs=1 #自动重启间隔\\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志\\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志\\n&nbsp;\\n&nbsp;\\n配置好以后 (:wq保存退出)，需要重新加载一下配置\\n&nbsp;\\nsudo supervisorctl shutdown &amp;&amp; sudo supervisord -c /etc/supervisor/supervisord.conf\\n&nbsp;\\n或者你可以直接重启 Supervisor：\\n&nbsp;\\nsudo service supervisor stop\\nsudo service supervisor start\\n如果启动的时候报错，可以打开位于/etc/log/supervisor/supervisord.log文件来查看具体的日志。\\n&nbsp;\\n其中dotnet 命令输出的日志文件分别为位于\\n&nbsp;\\n/var/log/HelloWebApp.err.log\\n/var/log/HelloWebApp.out.log\\n在这些文件里面你可以查看程序中的异常信息或者是运行信息。\\n&nbsp;\\n打开浏览器，输入 <a href=\\"http://localhost:5000\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://localhost:5000</a> 发现已经可以浏览了。\\n&nbsp;\\nSupervisor 常用命令\\nsupervisorctl shutdown #关闭所有任务\\nsupervisorctl stop|start program_name\\nsupervisorctl status #查看所有任务状态\\n&nbsp;\\n&nbsp;\\n&nbsp;\\n文档地址：\\n<a href=\\"https://www.cnblogs.com/qtiger/p/13853828.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/qtiger/p/13853828.html</a>\\n<a href=\\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html</a></p>","autoDesc":true}');export{v as comp,f as data};
