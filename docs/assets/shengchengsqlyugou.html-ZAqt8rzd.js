import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D8HBJYTp.js";const e="/kbms/dotnet/image-20240418221307957.png",o="/kbms/dotnet/image-20240418221416958.png",p="/kbms/dotnet/image-20240418221638961.png",i={},c=t(`<h2 id="标准日志" tabindex="-1"><a class="header-anchor" href="#标准日志"><span>标准日志</span></a></h2><p>新建一个API项目，然后默认使用的ILogger日志框架，在配置EFCore好的基础上，日志的默认的配置如下</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Logging&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;LogLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置情况下，EFCore执行的过程中是不会输出执行sql的，所以需要修改该日志配置(<strong>但是这样子就修改了全局Microsoft的日志级别</strong>)</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Logging&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;LogLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 👈 此处有修改</span>
      <span class="token property">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以看到输出了日志，如果不想修改全局日志级别，那么可以采用下面的方案。</p><h3 id="startup配置-推荐" tabindex="-1"><a class="header-anchor" href="#startup配置-推荐"><span>Startup配置(推荐)</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Pgsql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        mi<span class="token punctuation">.</span><span class="token function">MigrationsAssembly</span><span class="token punctuation">(</span>migrationsAssembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mi<span class="token punctuation">.</span><span class="token function">MigrationsHistoryTable</span><span class="token punctuation">(</span><span class="token string">&quot;migrations_history&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sample&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseLoggerFactory</span><span class="token punctuation">(</span>LoggerFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//日志过滤</span>
        builder<span class="token punctuation">.</span><span class="token function">AddFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> level<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                category <span class="token operator">==</span> DbLoggerCategory<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>Name <span class="token operator">&amp;&amp;</span> level <span class="token operator">==</span> LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于控制台程序的输出</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里我们就可以看到刚执行的SQL脚本了，如果想显示匿名信息那么还得配置，在数据库上下文的OnConfiguring中添加</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 显示敏感数据日志，默认为true</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">EnableSensitiveDataLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你对接了其他第三方日志，比如使用Serilog接管默认的日志并且还使用了<code>seq</code>，那么在AddDbContext的地方就需要加上<code>AddSerilog</code>,这时候如果不写，那么比如Serilog对接的<code>seq</code>中就看不到输出的sql</p><figure><img src="`+e+'" alt="image-20240418221307957" tabindex="0" loading="lazy"><figcaption>image-20240418221307957</figcaption></figure><p>没必要在写<code>AddConsole</code>了，因为会导致重复输出</p><figure><img src="'+o+`" alt="image-20240418221416958" tabindex="0" loading="lazy"><figcaption>image-20240418221416958</figcaption></figure><p>只需要保留下面的代码即可，控制台可以输出，<code>seq</code>中也可以输出</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;
{
    options.UseNpgsql(configuration.GetConnectionString(&quot;Pgsql&quot;), mi =&gt;
    {
        mi.MigrationsAssembly(migrationsAssembly);
        mi.MigrationsHistoryTable(&quot;migrations_history&quot;, &quot;sample&quot;);
    }).UseLoggerFactory(LoggerFactory.Create(builder =&gt;
    {
        //日志过滤
        builder.AddFilter((category, level) =&gt;
                category == DbLoggerCategory.Database.Command.Name &amp;&amp; level == LogLevel.Information)
            .AddSerilog();
    }));
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20240418221638961" tabindex="0" loading="lazy"><figcaption>image-20240418221638961</figcaption></figure><h3 id="dbcontext配置" tabindex="-1"><a class="header-anchor" href="#dbcontext配置"><span>DbContext配置</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//显示敏感数据日志 默认为true</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">EnableSensitiveDataLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出标准日志</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">UseLoggerFactory</span><span class="token punctuation">(</span>MyLogFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ILoggerFactory</span> MyLogFactory <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>build <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//日志过滤</span>
    build<span class="token punctuation">.</span><span class="token function">AddFilter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> level<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> category <span class="token operator">==</span> DbLoggerCategory<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>Name <span class="token operator">&amp;&amp;</span> level <span class="token operator">==</span> LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 用于控制台程序的输出</span>
        <span class="token punctuation">.</span><span class="token function">AddDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于VS调试，输出窗口的输出</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果遇到使用<code>Serilog</code>等，操作可以参考Startup配置的写法即可</p><h2 id="简单日志" tabindex="-1"><a class="header-anchor" href="#简单日志"><span>简单日志</span></a></h2><p>如果想研究efcore执行过程可以看这个日志</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">EnableSensitiveDataLogging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示敏感数据日志</span>

    <span class="token comment">//输出简单日志  如果不配置日志级别或者日志级别低一点可以看到整个ef执行的日志过程</span>
    <span class="token comment">//optionsBuilder.LogTo(msg =&gt; Console.WriteLine(msg), LogLevel.Information);</span>
    
    <span class="token comment">//简单过滤</span>
    optionsBuilder<span class="token punctuation">.</span><span class="token function">LogTo</span><span class="token punctuation">(</span>msg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;CommandExecuting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnConfiguring</span><span class="token punctuation">(</span>optionsBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="toquerystring" tabindex="-1"><a class="header-anchor" href="#toquerystring"><span>ToQueryString</span></a></h2><p>通过执行IQueryable扩展方法ToQueryString来生成执行的语句。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>Name<span class="token operator">==</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> sql <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">ToQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不需要真的执行查询才能获取SQL语句；只能获取查询的操作。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>写测试代码，用简单日志(因为有些测试代码是没有装日志包的)。 正式需要记录SQL给审核人员或者排查故障，用标准日志。 开发阶段，需要从许多查询中立即看到SQL，使用ToQueryString。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>杨老师教程学习有感。</p>`,31),l=[c];function u(r,d){return s(),a("div",null,l)}const m=n(i,[["render",u],["__file","shengchengsqlyugou.html.vue"]]),v=JSON.parse('{"path":"/orm/efcore/jichuzhishi/shengchengsqlyugou.html","title":"生成SQL语句","lang":"zh-CN","frontmatter":{"title":"生成SQL语句","lang":"zh-CN","date":"2023-07-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shengchengsqlyugou","slug":"ep6ccn","docsId":"30832788","description":"标准日志 新建一个API项目，然后默认使用的ILogger日志框架，在配置EFCore好的基础上，日志的默认的配置如下 该配置情况下，EFCore执行的过程中是不会输出执行sql的，所以需要修改该日志配置(但是这样子就修改了全局Microsoft的日志级别) 然后就可以看到输出了日志，如果不想修改全局日志级别，那么可以采用下面的方案。 Startup配...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/shengchengsqlyugou.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"生成SQL语句"}],["meta",{"property":"og:description","content":"标准日志 新建一个API项目，然后默认使用的ILogger日志框架，在配置EFCore好的基础上，日志的默认的配置如下 该配置情况下，EFCore执行的过程中是不会输出执行sql的，所以需要修改该日志配置(但是这样子就修改了全局Microsoft的日志级别) 然后就可以看到输出了日志，如果不想修改全局日志级别，那么可以采用下面的方案。 Startup配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240418221307957.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T14:25:06.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-18T14:25:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成SQL语句\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240418221307957.png\\",\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240418221416958.png\\",\\"https://azrng.gitee.io/kbms/kbms/dotnet/image-20240418221638961.png\\"],\\"datePublished\\":\\"2023-07-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-18T14:25:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"标准日志","slug":"标准日志","link":"#标准日志","children":[{"level":3,"title":"Startup配置(推荐)","slug":"startup配置-推荐","link":"#startup配置-推荐","children":[]},{"level":3,"title":"DbContext配置","slug":"dbcontext配置","link":"#dbcontext配置","children":[]}]},{"level":2,"title":"简单日志","slug":"简单日志","link":"#简单日志","children":[]},{"level":2,"title":"ToQueryString","slug":"toquerystring","link":"#toquerystring","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1713450306000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"orm/efcore/jichuzhishi/shengchengsqlyugou.md","localizedDate":"2023年7月3日","excerpt":"<h2>标准日志</h2>\\n<p>新建一个API项目，然后默认使用的ILogger日志框架，在配置EFCore好的基础上，日志的默认的配置如下</p>\\n<div class=\\"language-json\\" data-ext=\\"json\\" data-title=\\"json\\"><pre class=\\"language-json\\"><code><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">\\"Logging\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">\\"LogLevel\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token property\\">\\"Default\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Information\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token property\\">\\"Microsoft\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Warning\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token property\\">\\"Microsoft.Hosting.Lifetime\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Information\\"</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,v as data};
