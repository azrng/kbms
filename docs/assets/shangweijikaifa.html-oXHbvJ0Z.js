import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as s,c as a,a as n,d as t,e as d}from"./app-DMmdIwn0.js";const r={},W=n("h2",{id:"框架选择",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#框架选择"},[n("span",null,"框架选择")])],-1),p=n("p",null,"1、 WASDK（WinUI 3） github：https://github.com/microsoft/WindowsAppSDK Windows 应用 SDK 是一组新的开发人员组件和工具，它们代表着 Windows 应用开发平台的下一步发展。Windows 应用 SDK 提供一组统一的 API 和工具，可供从 Windows 11 到 Windows 10 版本 1809 上的任何桌面应用以一致的方式使用。",-1),c=n("p",null,'Windows 应用 SDK 不会用 C++ 替换 Windows SDK 或现有桌面 Windows 应用类型，例如 .NET（包括 Windows 窗体和 WPF）和桌面 Win32。 相反，Windows 应用 SDK 使用一组通用 API 来补充这些现有工具和应用类型，开发人员可以在这些平台上依赖这些 API 来执行操作。有关更多详细信息，请参阅Windows 应用 SDK 的优势。 这个WASDK目前是微软主推的开源的，UI部分是结合了WinUI 3。 2、WPF github：https://github.com/dotnet/wpf 欢迎使用 Windows Presentation Foundation (WPF) 桌面指南，这是一个与分辨率无关的 UI 框架，使用基于矢量的呈现引擎，构建用于利用现代图形硬件。WPF 提供一套完善的应用程序开发功能，这些功能包括 Extensible Application Markup Language (XAML)、控件、数据绑定、布局、二维和三维图形、动画、样式、模板、文档、媒体、文本和版式。WPF 属于 .NET，因此可以生成整合 .NET API 其他元素的应用程序。 目前WPF也已经开源，而且整体上更为成熟，Visual Studio就是WPF 4.x开发的，生态也比较好。 3、WinForms github:https://github.com/dotnet/winforms) 欢迎使用 Windows 窗体的桌面指南，Windows 窗体是一个可创建适用于 Windows 的丰富桌面客户端应用的 UI 框架。Windows 窗体开发平台支持广泛的应用开发功能，包括控件、图形、数据绑定和用户输入。Windows 窗体采用 Visual Studio 中的拖放式可视化设计器，可轻松创建 Windows 窗体应用。 这个也是开源的，Winform算是上手即用的开发框架了，通过拖拉拽可以很轻松的创建出UI和编写对应的功能，对于UI美观程度不太重要的工业领域，这个用来做工具开发很简单，上手也容易。 4、UWP github:https://docs.microsoft.com/zh-cn/windows/uwp/get-started/universal-application-platform-guide) UWP 是创建适用于 Windows 的客户端应用程序的众多方法之一。UWP 应用使用 WinRT API 来提供强大的 UI 和高级异步功能，这些功能非常适用于 Internet 连接的设备。 微软对于UWP，只能说曾经爱过，当初UWP可是当红炸子鸡，号称跨windows全平台，不过现在也是跨windows全平台，可惜没搞好，不过虽然不够受重视，但是一时半会还是死不掉，毕竟WASDK还不够成熟。 为什么选择WASDK 通过上面的介绍，大家对于windows下的原生UI开发框架应该有了一些了解，如果抛开语言限制的话还有更多的选择，比如QT，各种前端的跨平台，像微软自己家的MAUI什么的，我之前还写了一篇《WinUI迁移到即将"过时"的.NET MAUI个人体验》。 最近的微软Windows App SDK 1.1版本发布了，意味着BUG应该少了很多，也可以正式的在一些项目中使用了。通过官方的WinUI库，我们可以轻松的构建符合Win11设计规范的UI，由于UWP的种种问题，WPF和WinForms又是只开源，应该不会有大的新特性了，外加本人以前也经常玩玩UWP，通过前景和自己的喜好，肯定是选择WASDK了。',-1),w=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),h={href:"https://mp.weixin.qq.com/s/jRW7_fWcDO3VkTNeVJ0-4Q",target:"_blank",rel:"noopener noreferrer"};function l(m,u){const i=e("ExternalLinkIcon");return s(),a("div",null,[W,p,c,w,n("p",null,[n("a",h,[t("https://mp.weixin.qq.com/s/jRW7_fWcDO3VkTNeVJ0-4Q"),d(i)]),t(" | C## 开发上位机应用的一些选择")])])}const P=o(r,[["render",l],["__file","shangweijikaifa.html.vue"]]),U=JSON.parse('{"path":"/dotnet/zhuomianchengxu/shangweijikaifa.html","title":"上位机开发","lang":"zh-CN","frontmatter":{"title":"上位机开发","lang":"zh-CN","date":"2023-08-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shangweijikaifa","slug":"kr7mg9r4wpwrq5yw","docsId":"135421744","description":"框架选择 1、 WASDK（WinUI 3） github：https://github.com/microsoft/WindowsAppSDK Windows 应用 SDK 是一组新的开发人员组件和工具，它们代表着 Windows 应用开发平台的下一步发展。Windows 应用 SDK 提供一组统一的 API 和工具，可供从 Windows 11 到...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/zhuomianchengxu/shangweijikaifa.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"上位机开发"}],["meta",{"property":"og:description","content":"框架选择 1、 WASDK（WinUI 3） github：https://github.com/microsoft/WindowsAppSDK Windows 应用 SDK 是一组新的开发人员组件和工具，它们代表着 Windows 应用开发平台的下一步发展。Windows 应用 SDK 提供一组统一的 API 和工具，可供从 Windows 11 到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"上位机开发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"框架选择","slug":"框架选择","link":"#框架选择","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.24,"words":971},"filePathRelative":"dotnet/zhuomianchengxu/shangweijikaifa.md","localizedDate":"2023年8月6日","excerpt":"<h2>框架选择</h2>\\n<p>1、 WASDK（WinUI 3）\\ngithub：https://github.com/microsoft/WindowsAppSDK\\nWindows 应用 SDK 是一组新的开发人员组件和工具，它们代表着 Windows 应用开发平台的下一步发展。Windows 应用 SDK 提供一组统一的 API 和工具，可供从 Windows 11 到 Windows 10 版本 1809 上的任何桌面应用以一致的方式使用。</p>\\n<p>Windows 应用 SDK 不会用 C++ 替换 Windows SDK 或现有桌面 Windows 应用类型，例如 .NET（包括 Windows 窗体和 WPF）和桌面 Win32。\\n相反，Windows 应用 SDK 使用一组通用 API 来补充这些现有工具和应用类型，开发人员可以在这些平台上依赖这些 API 来执行操作。有关更多详细信息，请参阅Windows 应用 SDK 的优势。\\n这个WASDK目前是微软主推的开源的，UI部分是结合了WinUI 3。\\n2、WPF\\ngithub：https://github.com/dotnet/wpf\\n欢迎使用 Windows Presentation Foundation (WPF) 桌面指南，这是一个与分辨率无关的 UI 框架，使用基于矢量的呈现引擎，构建用于利用现代图形硬件。WPF 提供一套完善的应用程序开发功能，这些功能包括 Extensible Application Markup Language (XAML)、控件、数据绑定、布局、二维和三维图形、动画、样式、模板、文档、媒体、文本和版式。WPF 属于 .NET，因此可以生成整合 .NET API 其他元素的应用程序。\\n目前WPF也已经开源，而且整体上更为成熟，Visual Studio就是WPF 4.x开发的，生态也比较好。\\n3、WinForms\\ngithub:https://github.com/dotnet/winforms)\\n欢迎使用 Windows 窗体的桌面指南，Windows 窗体是一个可创建适用于 Windows 的丰富桌面客户端应用的 UI 框架。Windows 窗体开发平台支持广泛的应用开发功能，包括控件、图形、数据绑定和用户输入。Windows 窗体采用 Visual Studio 中的拖放式可视化设计器，可轻松创建 Windows 窗体应用。\\n这个也是开源的，Winform算是上手即用的开发框架了，通过拖拉拽可以很轻松的创建出UI和编写对应的功能，对于UI美观程度不太重要的工业领域，这个用来做工具开发很简单，上手也容易。\\n4、UWP\\ngithub:https://docs.microsoft.com/zh-cn/windows/uwp/get-started/universal-application-platform-guide)\\nUWP 是创建适用于 Windows 的客户端应用程序的众多方法之一。UWP 应用使用 WinRT API 来提供强大的 UI 和高级异步功能，这些功能非常适用于 Internet 连接的设备。\\n微软对于UWP，只能说曾经爱过，当初UWP可是当红炸子鸡，号称跨windows全平台，不过现在也是跨windows全平台，可惜没搞好，不过虽然不够受重视，但是一时半会还是死不掉，毕竟WASDK还不够成熟。\\n为什么选择WASDK\\n通过上面的介绍，大家对于windows下的原生UI开发框架应该有了一些了解，如果抛开语言限制的话还有更多的选择，比如QT，各种前端的跨平台，像微软自己家的MAUI什么的，我之前还写了一篇《WinUI迁移到即将\\"过时\\"的.NET MAUI个人体验》。\\n最近的微软Windows App SDK 1.1版本发布了，意味着BUG应该少了很多，也可以正式的在一些项目中使用了。通过官方的WinUI库，我们可以轻松的构建符合Win11设计规范的UI，由于UWP的种种问题，WPF和WinForms又是只开源，应该不会有大的新特性了，外加本人以前也经常玩玩UWP，通过前景和自己的喜好，肯定是选择WASDK了。</p>","autoDesc":true}');export{P as comp,U as data};
