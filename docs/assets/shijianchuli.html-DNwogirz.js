import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,b as n,e as s,f as e,d as t}from"./app-CBxp4zeL.js";const l={},u=t(`<h2 id="数据库层次" tabindex="-1"><a class="header-anchor" href="#数据库层次"><span>数据库层次</span></a></h2><h3 id="时间类型" tabindex="-1"><a class="header-anchor" href="#时间类型"><span>时间类型</span></a></h3><p>对于pg数据库有两个时间类型<code>timestamp</code>和<code>timestamptz</code>，其中<code>timestamp</code>是<code>timestamp without time zone</code>的别名，<code>timestamptz</code>是<code>timestamp with time zone</code>的别名。</p><ol><li><code>timestamp</code>应存储所在时区的本地时间</li><li><code>timestamptz</code>应存储utc时间</li></ol><h3 id="时区" tabindex="-1"><a class="header-anchor" href="#时区"><span>时区</span></a></h3><p>对于pg数据库来说，数据库时区又分为服务器时区和客户端时区，对于使用者来说，客户端时区更重要。客户端时区的生命周期是连接(<code>session</code>)，因此每个连接都可以使用不同的时区或者随时切换到其他时区。可以使用<code>set time zone &#39;所属时区&#39;;</code>来切换<code>session</code>的时区。</p><h3 id="时间转换" tabindex="-1"><a class="header-anchor" href="#时间转换"><span>时间转换</span></a></h3><p><code>timestamp</code>和<code>timestamptz</code>可以相互转换，转换的结果和<code>session</code>的时区有关，例子中采用ISO 8601标准的时间字符串进行转换测试：</p><ol><li><code>session</code>时区为utc，将<code>timestamp</code>和<code>timestamptz</code>互转，因为本地时区和utc时区相同，因此转换后的结果显示相同。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">time</span> zone <span class="token string">&#39;UTC&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token string">&#39;2000-01-01T01:00:00Z&#39;</span>::timestamptz::<span class="token keyword">timestamp</span><span class="token punctuation">;</span>
<span class="token comment">--输出 2000-01-01 01:00:00.000000</span>
<span class="token keyword">select</span> <span class="token string">&#39;2000-01-01T01:00:00Z&#39;</span>::<span class="token keyword">timestamp</span>::timestamptz<span class="token punctuation">;</span>
<span class="token comment">--输出 2000-01-01 01:00:00.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>session</code>时区为东八区，将<code>timestamp</code>和<code>timestamptz</code>互转，因为本地时区和utc时区不相同，注意转换后会自动计算时区差异。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token keyword">time</span> zone <span class="token string">&#39;Asia/Shanghai&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token string">&#39;2000-01-01T01:00:00Z&#39;</span>::timestamptz::<span class="token keyword">timestamp</span><span class="token punctuation">;</span>
<span class="token comment">--输出 2000-01-01 09:00:00.000000</span>
<span class="token keyword">select</span> <span class="token string">&#39;2000-01-01T01:00:00Z&#39;</span>::<span class="token keyword">timestamp</span>::timestamptz<span class="token punctuation">;</span>
<span class="token comment">--输出 2000-01-01 01:00:00.000000 +08:00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><p>注意，time会发生隐式转换，不同的类型进行赋值操作时，或者将A类型插入到B类型的列中，都会发生隐式转换，其中时间相关的隐式转换的结果和<code>session</code>的时区相关。例如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 注意不仅仅是赋值，例如对表的更新/插入都可能发生隐式转换</span>
<span class="token comment">-- 例如update table set time = &#39;2000-01-01&#39;,这里的&#39;2000-01-01&#39;就会隐式转换成time字段定义的类型</span>
<span class="token comment">-- 例如修改表的定义，从timestamp修改到timestamptz</span>
<span class="token keyword">do</span>
$$
    <span class="token keyword">declare</span>
        time1 <span class="token keyword">timestamp</span><span class="token punctuation">;</span>
        time2 timestamptz<span class="token punctuation">;</span>
        time3 timestamptz<span class="token punctuation">;</span>
    <span class="token keyword">begin</span>
        <span class="token keyword">set</span> <span class="token keyword">time</span> zone <span class="token string">&#39;Asia/Shanghai&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">select</span> <span class="token string">&#39;2000-01-01&#39;</span> <span class="token keyword">into</span> time1<span class="token punctuation">;</span>
        <span class="token keyword">select</span> <span class="token string">&#39;2000-01-01&#39;</span> <span class="token keyword">into</span> time2<span class="token punctuation">;</span>
        <span class="token keyword">select</span> <span class="token string">&#39;2000-01-01 +00&#39;</span> <span class="token keyword">into</span> time3<span class="token punctuation">;</span>
        raise notice <span class="token string">&#39;time1:timestamp:%&#39;</span><span class="token punctuation">,</span>time1<span class="token punctuation">;</span>
        raise notice <span class="token string">&#39;time2:timestamptz:%&#39;</span><span class="token punctuation">,</span>time2<span class="token punctuation">;</span>
        raise notice <span class="token string">&#39;time3:timestamptz:%&#39;</span><span class="token punctuation">,</span>time3<span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
$$<span class="token punctuation">;</span>
<span class="token comment">-- time1:timestamp:2000-01-01 00:00:00</span>
<span class="token comment">-- time2:timestamptz:2000-01-01 00:00:00+08</span>
<span class="token comment">-- time3:timestamptz:2000-01-01 08:00:00+08</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>如果字符串转换到<code>timestamp</code>，无论字符串是否带有时区信息，对结果都无影响，timestamp会忽略字符串中的时区信息。</li><li>如果字符串转换到<code>timestamptz</code>，如果字符串中无时区信息，会被当作本地时间对待，转换的结果和<code>session</code>的时区设置有关，如果字符串中有时区信息，会根据字符串中的时区信息进行转换，实际结果和<code>session</code>时区无关，展示结果和<code>session</code>时区有关。</li><li><code>timestamp</code>和<code>timestamptz</code>隐式转换结果和<code>session</code>的时区相关</li><li>查询<code>timestamptz</code>时，会根据<code>session</code>的时区进行展示，如2000-01-01 00:00:00，如果在东一区就会显示为2000-01-01 01:00:00 +01</li></ol><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>注意DataGrip连接pg数据库时，默认<code>session</code>是0时区，因此如果数据库字段是<code>timestamp</code>类型，执行<code>update table set xx=now();</code>时，时间会少8小时，这个结果是正确的，因为对于utc的客户端<code>session</code>来说，本地时间就是utc时间。 你可以右键数据库连接-Properties，在弹出的页面上切换到Options选项卡，进行<code>session</code>时区的修改。</p><h2 id="npgsql驱动层面" tabindex="-1"><a class="header-anchor" href="#npgsql驱动层面"><span>npgsql驱动层面</span></a></h2><h3 id="默认时区" tabindex="-1"><a class="header-anchor" href="#默认时区"><span>默认时区</span></a></h3>`,20),d=n("code",null,"session",-1),r=n("code",null,"Asia/Shanghai",-1),m={href:"https://www.npgsql.org/doc/connection-string-parameters.html",target:"_blank",rel:"noopener noreferrer"},k=n("h3",{id:"默认时间映射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#默认时间映射"},[n("span",null,"默认时间映射")])],-1),v=n("code",null,"Kind",-1),b=n("code",null,"UTC",-1),h=n("code",null,"DateTime",-1),g=n("code",null,"timestamptz",-1),y=n("code",null,"Kind",-1),w=n("code",null,"Local/Unspecified",-1),T=n("code",null,"DateTime",-1),q=n("code",null,"timestamp",-1),D=n("code",null,'AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);',-1),f={href:"https://www.npgsql.org/doc/types/datetime.html",target:"_blank",rel:"noopener noreferrer"},z=t(`<table><thead><tr><th>PostgreSQL type</th><th>.NET Native Type</th></tr></thead><tbody><tr><td>timestamp</td><td>DateTime (Unspecified)</td></tr><tr><td>timestamptz</td><td>DateTime (Utc)</td></tr></tbody></table><p>发送到PG数据库的行为发生了如下改变</p><table><thead><tr><th>PostgreSQL type</th><th>Default .NET types</th><th>NpgsqlDbType</th><th>DbType</th></tr></thead><tbody><tr><td>timestamp</td><td>DateTime (Local/Unspecified)</td><td>Timestamp</td><td>DateTime, DateTime2</td></tr><tr><td>timestamptz</td><td>DateTime (Utc), DateTimeOffset</td><td>TimestampTz</td><td>DateTimeOffset</td></tr></tbody></table><p>以上的影响用代码表示，如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@p1&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token punctuation">}</span>
<span class="token comment">//6.0后等价于</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@p1&quot;</span><span class="token punctuation">,</span> NpgsqlDbType<span class="token punctuation">.</span>TimestampTz<span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@p1&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>DateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span>
<span class="token comment">//6.0后等价于</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@p1&quot;</span><span class="token punctuation">,</span> NpgsqlDbType<span class="token punctuation">.</span>Timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接操作<code>NpgsqlDbType</code>，当<code>DateTime</code>的<code>Kind</code>属性不满足要求的话，会得到一个异常 例如dapper等SqlHelper最底层都是使用ado.net的抽象进行数据库操作，因此他们的DateTime都会映射到DbType.DateTime,所以都会受到此变更影响 如果原来数据库设计就满足timestamp，timestamptz的存储约定，则由于npgsql驱动会根据传入的时间类型切换发送到数据库的时间类型，因此只要<code>session</code>的时区格式正确，则不影响结果，以东八区举例：</p><ol><li>字段类型是timestamptz，传入DateTime.Now，则数据库收到的数据类型是timestamp，值是东八区时间，存入timestamptz字段时，<code>session</code>是东八区，会发生隐式转换，存入正确的utc时间</li><li>字段类型是timestamptz，传入DateTime.UtcNow，则数据库收到的数据类型是timestamptz，值是utc时间，直接存入timestamptz的字段中</li><li>字段类型是timestamp，传入DateTime.Now，则数据库收到的数据类型是timestamp，值是东八区时间，直接存入timestamp字段中</li><li>字段类型是timestamp，传入DateTime.UtcNow，则数据库收到的数据类型是timestamptz，值是utc，存入timestamp字段时根据<code>session</code>的时区发生隐式转换，转换为东八区时间存入。</li></ol><h3 id="对于ef的影响" tabindex="-1"><a class="header-anchor" href="#对于ef的影响"><span>对于EF的影响</span></a></h3><p>对于EF来说，因为存在模型映射中已经固定了映射，因此不存在根据DateTime的<code>Kind</code>属性进行动态类型映射，对于6.0的EF来说，<code>DateTime</code>默认映射为<code>NpgsqlDbType.TimestampTz</code>，也可以手动修改模型绑定将其映射到<code>NpgsqlDbType.Timestamp</code>，因此要么全部使用UTC时间，要么全部使用本地时间。</p><h2 id="npgsql6-迁移" tabindex="-1"><a class="header-anchor" href="#npgsql6-迁移"><span>npgsql6 迁移</span></a></h2><h3 id="原始数据库设计字段类型为timestamp-存储的时间是utc时间" tabindex="-1"><a class="header-anchor" href="#原始数据库设计字段类型为timestamp-存储的时间是utc时间"><span>原始数据库设计字段类型为timestamp，存储的时间是UTC时间</span></a></h3><ul><li>方案1：按照数据库约定，修改字段为timestamptz，建议使用此方案 修改数据库字段类型为timestamptz</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 注意先将session的time zone切换到utc，否则转换类型时，字段将发生隐式转换，将目前存储的时间转换为utc时间</span>
<span class="token keyword">SET</span> timezone <span class="token keyword">TO</span> <span class="token string">&#39;UTC&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> mdm<span class="token punctuation">.</span>code_system <span class="token keyword">alter</span> <span class="token keyword">column</span> <span class="token string">&quot;CreateTime&quot;</span> <span class="token keyword">type</span> timestamptz<span class="token punctuation">;</span>
<span class="token comment">-- 注意，如果有视图引用被修改的字段，则无法修改，应先删除视图，修改完成后再创建视图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方案2：不遵循约定，依然使用timestamp，依然存储UTC时间，在代码中修改UTC时间的Kind属性（不建议）</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Ado.Net</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@time&quot;</span><span class="token punctuation">,</span> SqlDbType<span class="token punctuation">.</span>DateTime2<span class="token punctuation">)</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">SpecifyKind</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span> DateTimeKind<span class="token punctuation">.</span>Unspecified<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//EF，将DateTime映射到timestamp</span>
<span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//保存前将时间转换为Unspecified，读取时将时间转换为UTC</span>
    <span class="token class-name"><span class="token keyword">var</span></span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueConverter<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">,</span> DateTime<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
                v <span class="token operator">=&gt;</span> DateTime<span class="token punctuation">.</span><span class="token function">SpecifyKind</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>DateTimeKind<span class="token punctuation">.</span>Unspecified<span class="token punctuation">)</span><span class="token punctuation">,</span>
                v <span class="token operator">=&gt;</span> DateTime<span class="token punctuation">.</span><span class="token function">SpecifyKind</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>DateTimeKind<span class="token punctuation">.</span>Utc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Table<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                c<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnType</span><span class="token punctuation">(</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasConversion</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dapper,写和读时统一处理，写时转换Unspecified，读时转换Utc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullableDateTimeLocalHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SqlMapper<span class="token punctuation">.</span>TypeHandler<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token class-name">IDbDataParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">DateTime<span class="token punctuation">?</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">value</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">SpecifyKind</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DateTimeKind<span class="token punctuation">.</span>Unspecified<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//参考npgsql源码中的GlobalTypeMapper类中的DbTypeToNpgsqlDbType方法，DateTime2映射为NpgsqlDbType.Timestamp</span>
        parameter<span class="token punctuation">.</span>DbType <span class="token operator">=</span> DbType<span class="token punctuation">.</span>DateTime2<span class="token punctuation">;</span>
        parameter<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name">DBNull</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span><span class="token function">SpecifyKind</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">,</span> DateTimeKind<span class="token punctuation">.</span>Utc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//全局执行一遍即可</span>
<span class="token comment">//注意需要移除原来的Mapping映射</span>
 SqlMapper<span class="token punctuation">.</span><span class="token function">RemoveTypeMap</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 SqlMapper<span class="token punctuation">.</span><span class="token function">RemoveTypeMap</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DateTime<span class="token punctuation">?</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 SqlMapper<span class="token punctuation">.</span><span class="token function">AddTypeHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullableDateTimeLocalHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方案3：使用npgsql的开关回到旧版行为，EF和dapper中依然建议使用converter统一处理时间字段</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 启动后执行，参考EnableLegacyTimestampBehaviorTest.cs</span>
AppContext<span class="token punctuation">.</span><span class="token function">SetSwitch</span><span class="token punctuation">(</span><span class="token string">&quot;Npgsql.EnableLegacyTimestampBehavior&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原始数据库设计字段类型为timestamp-存储的时间是本地时间" tabindex="-1"><a class="header-anchor" href="#原始数据库设计字段类型为timestamp-存储的时间是本地时间"><span>原始数据库设计字段类型为timestamp，存储的时间是本地时间</span></a></h3><p>由于此方案是满足数据约定的，因此只需要修改EF中的字段类型映射，并注意以下几点</p><ol><li>需要设定C#服务容器所属时区为东八区</li><li>读取数据时，DateTime的Kind为Unspecified，如果使用EF最好使用统一的converter进行转换，转换到Local</li><li>DataGrip中默认的<code>session</code>是UTC，而npgsql默认<code>session</code>是数据库配置的时区，注意数据库管理工具中执行sql和程序执行sql中的now()函数的区别。</li></ol><h2 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1"><span>其他</span></a></h2><h3 id="查询指定类型的字段-生成架构修改的sql" tabindex="-1"><a class="header-anchor" href="#查询指定类型的字段-生成架构修改的sql"><span>查询指定类型的字段，生成架构修改的sql</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询出所有的without time zone类型的字段，输出修改表架构的sql</span>
    <span class="token keyword">do</span>
    $$
        <span class="token keyword">declare</span>
            my_cursor  REFCURSOR<span class="token punctuation">;</span>
            schemaname <span class="token keyword">text</span><span class="token punctuation">;</span>
            tablename  <span class="token keyword">text</span><span class="token punctuation">;</span>
            attname    <span class="token keyword">text</span><span class="token punctuation">;</span>
        <span class="token keyword">begin</span>
            <span class="token keyword">open</span> my_cursor <span class="token keyword">for</span> <span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>schemaname<span class="token punctuation">,</span>
                                    t<span class="token punctuation">.</span>tablename<span class="token punctuation">,</span>
                                    a<span class="token punctuation">.</span>attname
                            <span class="token keyword">FROM</span> pg_class <span class="token keyword">AS</span> c<span class="token punctuation">,</span>
                                    pg_attribute <span class="token keyword">AS</span> a<span class="token punctuation">,</span>
                                    pg_tables <span class="token keyword">as</span> t
                            <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>relname <span class="token operator">=</span> t<span class="token punctuation">.</span>tablename
                                <span class="token operator">AND</span> a<span class="token punctuation">.</span>attrelid <span class="token operator">=</span> c<span class="token punctuation">.</span>oid
                                <span class="token operator">AND</span> a<span class="token punctuation">.</span>attnum <span class="token operator">&gt;</span> <span class="token number">0</span>
                                <span class="token operator">AND</span> t<span class="token punctuation">.</span>schemaname <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">&#39;pg%&#39;</span>
                                <span class="token operator">AND</span> format_type<span class="token punctuation">(</span>a<span class="token punctuation">.</span>atttypid<span class="token punctuation">,</span> a<span class="token punctuation">.</span>atttypmod<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%without time zone&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">LOOP</span>
                <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> my_cursor <span class="token keyword">INTO</span> schemaname<span class="token punctuation">,</span> tablename<span class="token punctuation">,</span>attname<span class="token punctuation">;</span>
                <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> <span class="token operator">NOT</span> FOUND<span class="token punctuation">;</span>
                <span class="token comment">--execute &#39;alter table &quot;&#39; || schemaname || &#39;&quot;.&quot;&#39; || tablename || &#39;&quot; alter column &quot;&#39; || attname ||</span>
                <span class="token comment">--        &#39;&quot; type timestamp with time zone&#39;;</span>
                raise notice <span class="token string">&#39;alter table &quot;%&quot;.&quot;%&quot; alter column &quot;%&quot; type timestamptz;&#39;</span><span class="token punctuation">,</span> schemaname<span class="token punctuation">,</span>tablename<span class="token punctuation">,</span>attname<span class="token punctuation">;</span>
            <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span>
            <span class="token keyword">CLOSE</span> my_cursor<span class="token punctuation">;</span>
        <span class="token keyword">end</span><span class="token punctuation">;</span>
    $$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function _(x,N){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[s("npgsql连接数据库的"),d,s("使用的默认时区是由pg数据库返回的，公司部署的pg库都部署为"),r,s("，可以通过连接字符串中的Timezone进行控制 "),n("a",m,[s("https://www.npgsql.org/doc/connection-string-parameters.html"),e(a)])]),k,n("p",null,[s("从6.0开始npgsql默认将"),v,s("信息为"),b,s("的"),h,s("映射为"),g,s(",将"),y,s("信息为"),w,s("的"),T,s("映射为"),q,s(",可以使用"),D,s("恢复之前版本的行为。参考 "),n("a",f,[s("https://www.npgsql.org/doc/types/datetime.html"),e(a)]),s(" 从PG数据库读取数据的行为发生了如下改变")]),z])}const E=p(l,[["render",_],["__file","shijianchuli.html.vue"]]),C=JSON.parse('{"path":"/dataBase/postgresql/biaoziduanleixing/shijianchuli.html","title":"时间处理","lang":"zh-CN","frontmatter":{"title":"时间处理","lang":"zh-CN","date":"2023-08-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["dataBase"],"tag":["无"],"filename":"shijianchuli","slug":"muobmz","docsId":"90825728","description":"数据库层次 时间类型 对于pg数据库有两个时间类型timestamp和timestamptz，其中timestamp是timestamp without time zone的别名，timestamptz是timestamp with time zone的别名。 timestamp应存储所在时区的本地时间 timestamptz应存储utc时间 时区 对...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/postgresql/biaoziduanleixing/shijianchuli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"时间处理"}],["meta",{"property":"og:description","content":"数据库层次 时间类型 对于pg数据库有两个时间类型timestamp和timestamptz，其中timestamp是timestamp without time zone的别名，timestamptz是timestamp with time zone的别名。 timestamp应存储所在时区的本地时间 timestamptz应存储utc时间 时区 对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-01T14:38:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-01T14:38:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"时间处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-01T14:38:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"数据库层次","slug":"数据库层次","link":"#数据库层次","children":[{"level":3,"title":"时间类型","slug":"时间类型","link":"#时间类型","children":[]},{"level":3,"title":"时区","slug":"时区","link":"#时区","children":[]},{"level":3,"title":"时间转换","slug":"时间转换","link":"#时间转换","children":[]},{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"npgsql驱动层面","slug":"npgsql驱动层面","link":"#npgsql驱动层面","children":[{"level":3,"title":"默认时区","slug":"默认时区","link":"#默认时区","children":[]},{"level":3,"title":"默认时间映射","slug":"默认时间映射","link":"#默认时间映射","children":[]},{"level":3,"title":"对于EF的影响","slug":"对于ef的影响","link":"#对于ef的影响","children":[]}]},{"level":2,"title":"npgsql6 迁移","slug":"npgsql6-迁移","link":"#npgsql6-迁移","children":[{"level":3,"title":"原始数据库设计字段类型为timestamp，存储的时间是UTC时间","slug":"原始数据库设计字段类型为timestamp-存储的时间是utc时间","link":"#原始数据库设计字段类型为timestamp-存储的时间是utc时间","children":[]},{"level":3,"title":"原始数据库设计字段类型为timestamp，存储的时间是本地时间","slug":"原始数据库设计字段类型为timestamp-存储的时间是本地时间","link":"#原始数据库设计字段类型为timestamp-存储的时间是本地时间","children":[]}]},{"level":2,"title":"其他","slug":"其他-1","link":"#其他-1","children":[{"level":3,"title":"查询指定类型的字段，生成架构修改的sql","slug":"查询指定类型的字段-生成架构修改的sql","link":"#查询指定类型的字段-生成架构修改的sql","children":[]}]}],"git":{"createdTime":1695484404000,"updatedTime":1704119909000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":7.66,"words":2297},"filePathRelative":"dataBase/postgresql/biaoziduanleixing/shijianchuli.md","localizedDate":"2023年8月26日","excerpt":"<h2>数据库层次</h2>\\n<h3>时间类型</h3>\\n<p>对于pg数据库有两个时间类型<code>timestamp</code>和<code>timestamptz</code>，其中<code>timestamp</code>是<code>timestamp without time zone</code>的别名，<code>timestamptz</code>是<code>timestamp with time zone</code>的别名。</p>\\n<ol>\\n<li><code>timestamp</code>应存储所在时区的本地时间</li>\\n<li><code>timestamptz</code>应存储utc时间</li>\\n</ol>","autoDesc":true}');export{E as comp,C as data};
