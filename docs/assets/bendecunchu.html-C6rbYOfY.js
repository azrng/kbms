import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as o,b as n,e as s,f as t,d as l}from"./app-Bfb6-vFH.js";const i={},u=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>AsyncLocal是一个在异步环境中存储和传递状态的类型。它允许你在线程或任务之间共享数据，而不会受到异步上下文切换的影响,用于提供异步操作间的数据共享。在多线程或异步环境中，每个线程或任务可以拥有自己的副本，而不会相互干扰。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="进程共享值" tabindex="-1"><a class="header-anchor" href="#进程共享值"><span>进程共享值</span></a></h3><p>将需要共享的变量放在某一个类的静态属性上</p><h3 id="线程共享值" tabindex="-1"><a class="header-anchor" href="#线程共享值"><span>线程共享值</span></a></h3><p>使用ThreadStatic来实现一个线程上值的存储。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ThreadStatic</span></span><span class="token punctuation">]</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> _value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了可以使用 ThreadStaticAttribute 外，我们还可以使用 <code>ThreadLocal&lt;T&gt;</code> 、CallContext（.NetCore不支持） 、<code>AsyncLocal&lt;T&gt;</code> 来实现一样的功能。</p><p>异步切换的场景存取值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ThreadStatic</span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> _threadStatic<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> _asyncLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _threadStatic <span class="token operator">=</span> <span class="token string">&quot;ThreadStatic保存的数据&quot;</span><span class="token punctuation">;</span>
        _threadLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;ThreadLocal保存的数据&quot;</span><span class="token punctuation">;</span>
        _asyncLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">&quot;AsyncLocal保存的数据&quot;</span><span class="token punctuation">;</span>
        <span class="token function">PrintValuesInAnotherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintValuesInAnotherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ThreadStatic: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_threadStatic</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ThreadLocal: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_threadLocal<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;AsyncLocal: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocal<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ThreadStatic<span class="token punctuation">:</span>
ThreadLocal<span class="token punctuation">:</span>
AsyncLocal<span class="token punctuation">:</span> AsyncLocal保存的数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在线程发生了切换之后，只有 AsyncLocal 还能够保留原来的值，当然，.NET Framework 中的 CallContext 也可以实现这个需求，下面给出一个相对完整的总结。</p><table><thead><tr><th>实现方式</th><th>.NET FrameWork 可用</th><th>.NET Core 可用</th><th>是否支持数据流向辅助线程</th></tr></thead><tbody><tr><td>ThreadStaticAttribute</td><td>是</td><td>是</td><td>否</td></tr><tr><td><code>ThreadLocal&lt;T&gt;</code></td><td>是</td><td>是</td><td>否</td></tr><tr><td>CallContext.SetData(string name, object data)</td><td>是</td><td>否</td><td>仅当参数 data 对应的类型实现了 ILogicalThreadAffinative 接口时支持</td></tr><tr><td>CallContext.LogicalSetData(string name, object data)</td><td>是</td><td>否</td><td>是</td></tr><tr><td><code>AsyncLocal&lt;T&gt;</code></td><td>是</td><td>是</td><td>是</td></tr></tbody></table><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><h3 id="异步的asynclocal的数据都是独立" tabindex="-1"><a class="header-anchor" href="#异步的asynclocal的数据都是独立"><span>异步的AsyncLocal的数据都是独立</span></a></h3><ul><li>AsyncLocal主要是用来在同一个异步控制流内共享对象的，如：一个web请求经过多个 async/await 方法调用后（可能切换了多个线程）依然可以共享同一个对象；</li><li>AsyncLocal存在层级嵌套的特点，不像ThreadLocal一个线程到底，也就是说AsyncLocal是工作在树形的异步控制流上的；</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span>WebContext<span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span>WebContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//模拟5个HTTP请求</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>
                Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> ctx <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ctx<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;请求&quot;</span> <span class="token operator">+</span> index<span class="token punctuation">;</span>
                    ctx<span class="token punctuation">.</span>Id <span class="token operator">=</span> index<span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Delay前 线程ID:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string"> ctx.Name=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ctx<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> ctx.Id=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ctx<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Delay后 线程ID:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string"> ctx.Name=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ctx<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> ctx.Id=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ctx<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">WebContext</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过AsyncLocal在异步方法中保存值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span>
<span class="token punctuation">{</span>
    <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _asyncLocalValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _asyncLocalValue<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Main(Before): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">NantokaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Main(After): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">NantokaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;NantokaAsync(Before): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            _asyncLocalValue<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token string">&quot;Hello Konnichiwa!&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
                <span class="token interpolation-string"><span class="token string">$&quot;NantokaAsync(After): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;WriteAsync(Before): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            _asyncLocalValue<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token number">567</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;WriteAsync: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>
                <span class="token interpolation-string"><span class="token string">$&quot;WriteAsync(After): _asyncLocalValue.Value = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_asyncLocalValue<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在树形异步控制流上流动的特点" tabindex="-1"><a class="header-anchor" href="#在树形异步控制流上流动的特点"><span>在树形异步控制流上流动的特点</span></a></h3><ul><li>每个节点都可以有自己的对象；</li><li>当子节点没有设置对象时，则访问的是父节点的对象；</li><li>当子节点设置了对象时，则访问自己设置的对象；</li><li>父节点无法访问子节点设置的对象；</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span>WebContext<span class="token punctuation">&gt;</span></span> asyncLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span>WebContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//父上下文</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            asyncLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebContext</span>
            <span class="token punctuation">{</span>
                Id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;父&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;父:&quot;</span> <span class="token operator">+</span> asyncLocal<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">Async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;父:&quot;</span> <span class="token operator">+</span> asyncLocal<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token comment">//子上下文</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;子子:&quot;</span> <span class="token operator">+</span> asyncLocal<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asyncLocal<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebContext</span>
            <span class="token punctuation">{</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;子&quot;</span><span class="token punctuation">,</span>
                Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;子子:修改后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;子子:&quot;</span> <span class="token operator">+</span> asyncLocal<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

 
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">WebContext</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;Name=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Name</span><span class="token punctuation">}</span></span><span class="token string">,Id=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>传递状态数据：在异步操作中，例如异步方法或任务链中，我们可能需要共享某些状态数据。使用AsyncLocal，我们可以在异步操作之间传递这些状态数据，而不必显式地传递参数。</li><li>上下文相关信息：有时候，我们可能需要跨异步方法或任务访问一些上下文相关的信息，例如用户身份验证信息、语言设置等。使用AsyncLocal，我们可以在整个异步调用栈中访问这些信息，而不必在每个方法中传递它们作为参数。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//同一个web请求获取 商户上下文数据都是一样的，而且不会影响另外一个web请求</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentContext</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 商户</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">AsyncLocal<span class="token punctuation">&lt;</span>CurrentUser<span class="token punctuation">&gt;</span></span> CurrentUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncLocal<span class="token punctuation">&lt;</span>CurrentUser<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCurrentData</span><span class="token punctuation">(</span><span class="token class-name">CurrentUser</span> currentUser<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        CurrentUser<span class="token punctuation">.</span>Value <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">CurrentUser</span> <span class="token function">GetCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> CurrentUser<span class="token punctuation">.</span>Value<span class="token operator">??</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,28),r={href:"https://www.cnblogs.com/eventhorizon/articles/12240767.html",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料"},[n("span",null,"参考资料")])],-1),d={href:"https://www.cnblogs.com/lgxlsm/p/17615799.html",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=e("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[n("a",r,[s("https://www.cnblogs.com/eventhorizon/articles/12240767.html"),t(a)]),s(" | 浅析 .NET 中 AsyncLocal 的实现原理 - 黑洞视界 - 博客园")]),k,n("p",null,[n("a",d,[s("https://www.cnblogs.com/lgxlsm/p/17615799.html"),t(a)]),s(" | .Net AsyncLocal介绍 - 广州大雄 - 博客园")])])}const h=p(i,[["render",v],["__file","bendecunchu.html.vue"]]),w=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/bendecunchu.html","title":"本地存储","lang":"zh-CN","frontmatter":{"title":"本地存储","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"bendecunchu","slug":"gdd3pf","docsId":"66671264","description":"概述 AsyncLocal是一个在异步环境中存储和传递状态的类型。它允许你在线程或任务之间共享数据，而不会受到异步上下文切换的影响,用于提供异步操作间的数据共享。在多线程或异步环境中，每个线程或任务可以拥有自己的副本，而不会相互干扰。 操作 进程共享值 将需要共享的变量放在某一个类的静态属性上 线程共享值 使用ThreadStatic来实现一个线程上值...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/bendecunchu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"本地存储"}],["meta",{"property":"og:description","content":"概述 AsyncLocal是一个在异步环境中存储和传递状态的类型。它允许你在线程或任务之间共享数据，而不会受到异步上下文切换的影响,用于提供异步操作间的数据共享。在多线程或异步环境中，每个线程或任务可以拥有自己的副本，而不会相互干扰。 操作 进程共享值 将需要共享的变量放在某一个类的静态属性上 线程共享值 使用ThreadStatic来实现一个线程上值..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:36:41.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:36:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"本地存储\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-17T09:36:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"进程共享值","slug":"进程共享值","link":"#进程共享值","children":[]},{"level":3,"title":"线程共享值","slug":"线程共享值","link":"#线程共享值","children":[]}]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"异步的AsyncLocal的数据都是独立","slug":"异步的asynclocal的数据都是独立","link":"#异步的asynclocal的数据都是独立","children":[]},{"level":3,"title":"在树形异步控制流上流动的特点","slug":"在树形异步控制流上流动的特点","link":"#在树形异步控制流上流动的特点","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1710668201000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.9,"words":1170},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/bendecunchu.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>AsyncLocal是一个在异步环境中存储和传递状态的类型。它允许你在线程或任务之间共享数据，而不会受到异步上下文切换的影响,用于提供异步操作间的数据共享。在多线程或异步环境中，每个线程或任务可以拥有自己的副本，而不会相互干扰。</p>\\n<h2>操作</h2>\\n<h3>进程共享值</h3>\\n<p>将需要共享的变量放在某一个类的静态属性上</p>\\n<h3>线程共享值</h3>\\n<p>使用ThreadStatic来实现一个线程上值的存储。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">ThreadStatic</span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> _value<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,w as data};
