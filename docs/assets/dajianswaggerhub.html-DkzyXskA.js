import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,e as t,b as e}from"./app-DMmdIwn0.js";const l={},r=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u=n("p",null,"就是将多个系统的swagger集成到一块，成为swagger中心。",-1),k=n("h2",{id:"操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#操作"},[n("span",null,"操作")])],-1),d={href:"https://github.com/domaindrivendev/Swashbuckle.AspNetCore",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> swaggerUIOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SwaggerUIOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
swaggerUIOptions<span class="token punctuation">.</span>ConfigObject<span class="token punctuation">.</span>Urls <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UrlDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;swagger name&quot;</span><span class="token punctuation">,</span>
        Url<span class="token operator">=</span> <span class="token string">&quot;swagger.json&quot;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>swaggerUIOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要配置Urlsoption, 增加多个swagger json 配置就完事儿了, 如此, Hub就完成了. 本文章到这里也就算完事儿了. 剩下的就是根据公司情况如同, 采用的方案不同而要解决的一些实际问题了.</p><p>对swaggerUIOptions对象的任何更改都是实时生效的, 所以我们可以做到只要改配置即可实时生效. Url 可以配置为一个endpoint, 直接由swaggerui在浏览器中下载指定的文件.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UrlDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Url<span class="token operator">=</span><span class="token string">&quot;https://www.cnblogs.com/swagger.json&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Uri也可以是在任何地方的一个文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//配置url从当前项目的一个地址下载文件.</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">UrlDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Url<span class="token operator">=</span><span class="token string">&quot;/swagger-file/swagger.json&quot;</span><span class="token punctuation">}</span>
 
<span class="token comment">// 从本地读取swagger文件</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;/swagger-file/{swaggerName}.json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetSwaggerFileAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromRoute</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> swaggerName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;static-file-dir/swaggers/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">serviceName</span><span class="token punctuation">}</span></span><span class="token string">.json&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然, 我们也可以读取任何地方的swagger文件, 例如在github, 各种云存储(aws/s3, aliyun/oss)等等.</p><p>给swagger设置server地址 每个swagger可能代表这不同的服务, 大概率就有不同的endpoint, 也可以是多个环境配置地址(dev,uat,staging,pro). 给swagger.json增加servers节点即可.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;servers&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;server-endpoint1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;server-endpoint2&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用各个JSON组件动态插入, 也可以用Microsoft.OpenApi.Readers 组件来解析和改写所有swagger的内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiStreamReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>sourceSwaggerJson<span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>
doc<span class="token punctuation">.</span>Servers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Url <span class="token operator">=</span> <span class="token string">&quot;my-dev-server-endpoint&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
doc<span class="token punctuation">.</span>Servers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Url <span class="token operator">=</span> <span class="token string">&quot;my-pro-server-endpoint&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> swaggerJsonContent <span class="token operator">=</span> targetDoc<span class="token punctuation">.</span><span class="token function">SerializeAsJson</span><span class="token punctuation">(</span>Microsoft<span class="token punctuation">.</span>OpenApi<span class="token punctuation">.</span>OpenApiSpecVersion<span class="token punctuation">.</span>OpenApi3_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m={href:"https://github.com/microsoft/OpenAPI.NET",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>合并文档成一个 单一的一个服务由多个不同的服务提供服务支持. 举个例子, 商品服务由商品服务+商品搜索服务共同组成, 2个单独的服务由2个单独的team负责维护, 但是对外提供服务的时候暴露在同一个domian下, 根据path route到不同的服务上. 这个时候我们还是使用Microsoft.OpenApi.Readers 来做合并这个事情.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//demo代码</span>
<span class="token class-name"><span class="token keyword">var</span></span> productDoc<span class="token operator">=</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> productSearchDoc<span class="token operator">=</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> targetDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Components <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Paths <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
targetDoc<span class="token punctuation">.</span>Paths<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>productDoc<span class="token punctuation">.</span>Paths<span class="token punctuation">)</span>
targetDoc<span class="token punctuation">.</span>Paths<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>productSearchDoc<span class="token punctuation">.</span>Paths<span class="token punctuation">)</span>
targetDoc<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>Schemas<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token comment">//巴拉巴拉</span>
<span class="token class-name"><span class="token keyword">string</span></span> swaggerJsonContent <span class="token operator">=</span> targetDoc<span class="token punctuation">.</span><span class="token function">SerializeAsJson</span><span class="token punctuation">(</span>Microsoft<span class="token punctuation">.</span>OpenApi<span class="token punctuation">.</span>OpenApiSpecVersion<span class="token punctuation">.</span>OpenApi3_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面只是列出了我碰到的几个具体情况, 不同的公司不同的场景下还有更多可能的case. 这个就得case by case了. 但是一个万变不离其宗, 总之就是对openAPI生成是swagger文件进行自定义. 这个时候用Microsoft.OpenApi.Readers就完事了.</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>SwaggerHub, SwaggerUI 用Swashbuckle.AspNetCore搭建. OpenAPI Swagger Doc 用Microsoft.OpenApi.Readers做定制化修改.</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,6),w={href:"https://www.cnblogs.com/calvinK/p/netcore-buiding-swaggerhub.html",target:"_blank",rel:"noopener noreferrer"};function h(b,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,u,k,n("p",null,[s("在NetCore的世界里, 我们可以使用 "),n("a",d,[s("Swashbuckle.AspNetCore"),t(a)]),s("来构建一个我们自己的SwaggerHub. 而且特别简单, 我们仅需要一行代码即可")]),g,n("p",null,[n("a",m,[s("Microsoft.OpenApi.Readers"),t(a)]),s(" 可以用来解析openAPI 格式的文档. 支持v2,v3等版本, 支持json,yaml格式. 详情可查看官方文档. 所以这个netcore 的 swaggerhub 自然而然的就支持读取任何语言支持的openAPI文档(java, nodejs, 等等).")]),v,n("p",null,[s("NetCore 使用 Swashbuckle 搭建 SwaggerHub："),n("a",w,[s("https://www.cnblogs.com/calvinK/p/netcore-buiding-swaggerhub.html"),t(a)])])])}const _=p(l,[["render",h],["__file","dajianswaggerhub.html.vue"]]),A=JSON.parse('{"path":"/dotnet/api/swagger/tazhan/dajianswaggerhub.html","title":"搭建SwaggerHub","lang":"zh-CN","frontmatter":{"title":"搭建SwaggerHub","lang":"zh-CN","date":"2023-04-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dajianswaggerhub","slug":"hnbp7siuh01yllh8","docsId":"121630634","description":"概述 就是将多个系统的swagger集成到一块，成为swagger中心。 操作 在NetCore的世界里, 我们可以使用 Swashbuckle.AspNetCore来构建一个我们自己的SwaggerHub. 而且特别简单, 我们仅需要一行代码即可 我们只需要配置Urlsoption, 增加多个swagger json 配置就完事儿了, 如此, Hub...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/swagger/tazhan/dajianswaggerhub.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"搭建SwaggerHub"}],["meta",{"property":"og:description","content":"概述 就是将多个系统的swagger集成到一块，成为swagger中心。 操作 在NetCore的世界里, 我们可以使用 Swashbuckle.AspNetCore来构建一个我们自己的SwaggerHub. 而且特别简单, 我们仅需要一行代码即可 我们只需要配置Urlsoption, 增加多个swagger json 配置就完事儿了, 如此, Hub..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搭建SwaggerHub\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.75,"words":825},"filePathRelative":"dotnet/api/swagger/tazhan/dajianswaggerhub.md","localizedDate":"2023年4月12日","excerpt":"<h2>概述</h2>\\n<p>就是将多个系统的swagger集成到一块，成为swagger中心。</p>\\n<h2>操作</h2>\\n<p>在NetCore的世界里, 我们可以使用 <a href=\\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Swashbuckle.AspNetCore</a>来构建一个我们自己的SwaggerHub. 而且特别简单, 我们仅需要一行代码即可</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> swaggerUIOptions <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SwaggerUIOptions</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nswaggerUIOptions<span class=\\"token punctuation\\">.</span>ConfigObject<span class=\\"token punctuation\\">.</span>Urls <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">UrlDescriptor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        Name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"swagger name\\"</span><span class=\\"token punctuation\\">,</span>\\n        Url<span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"swagger.json\\"</span>\\n        <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\napp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseSwaggerUI</span><span class=\\"token punctuation\\">(</span>swaggerUIOptions<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{_ as comp,A as data};
