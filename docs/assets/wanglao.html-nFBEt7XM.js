import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,a as n,d as o,e as c,b as l}from"./app-qB9_Bjjp.js";const i="/kbms/common/1642175391107-21e8a100-0feb-47bc-adbd-57d9226e32d6.png",u={},r=l('<blockquote><p>本文为读书笔记 示例代码环境：vs2022+.Net6</p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>.NET Framework在System.Net.*命名空间中包含了支持各种网络标准的类，支持的标准包括HTTP、TCP/IP以及FTP等。 以下列出了其中的主要组件：</p><ul><li>WebClient类：支持通过HTTP或者FTP执行简单的下载/上传操作。</li><li>WebRequest和WebResponse类：可以从底层控制客户端HTTP或FTP操作。·</li><li>HttpClient类：消费HTTP Web API和RESTful服务。</li><li>HttpListener类：用于编写HTTP服务器。</li><li>SmtpClient类：构造并通过SMTP协议发送邮件。</li><li>Dns类：用于进行域名和地址之间的转换。</li><li>TcpClient、UdpClient、TcpListener和Socket类：用于直接访问传输层和网络层。</li></ul><h2 id="网络架构" tabindex="-1"><a class="header-anchor" href="#网络架构"><span>网络架构</span></a></h2><p>.Net网络编程类型以及所对应通信层，其中大多数类型位于传输层或者引用层，传输层定义了发送和接受字节的基础协议(TCP和UDP)；而应用层则定义了位了特定应用程序设计的上层协议。例如下载网络页面（HTTP）、传输文件(FTP)、发送邮件(SMTP)以及在域名和IP地址之间进行转换(DNS). 常用网络属于缩写 <img src="'+i+`" alt="image.png" loading="lazy"></p><h2 id="地址与端口" tabindex="-1"><a class="header-anchor" href="#地址与端口"><span>地址与端口</span></a></h2><p>计算机或其他设备需要一个地址才能够进行通信。Internet使用了两套地址系统。</p><ul><li>IPV4:它是目前主流的地址系统，有32位宽，用字符串标识可写为用点分割的四个十进制数(例如：100.102.103.104)，地址可以全世界唯一的，也可以再一个子网中是唯一的。</li><li>IPV6：是更新的128位地址系统，用字符串标识为以冒号分隔的十六进制数（例如：[3EA0:FFFF:198A:E4A3:4FF2:54fA:41BC:8D31]）。.NetF中要求在IPV6地址前后加上方括号。</li></ul><p>System.Net命名空间的IPAddress类是采用其中任意一种协议的地址。它的构造器可以接受一个字节数组，也可以使用静态Parse方法并传入正确格式化的字符串。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IPAddress</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">104</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IPAddress</span> a2 <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;101.102.103.104&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//True</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>AddressFamily<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//InterNetwork</span>


<span class="token class-name">IPAddress</span> a3 <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;[2409:8a1e:8fce:350:99c:ca93:94ab:a7f6]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>AddressFamily<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//InterNetworkV6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TCP和UDP协议将每一个IP地址划分为65535个端口，从而允许一台计算机在一个地址上运行多个应用程序，每一个应用程序使用一个端口。</p><p>IP地址和端口的组合是使用IPEndPoint类来表示的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">IPAddress</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">104</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IPEndPoint</span> ep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// port:222</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101.102.103.104:222</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>防火墙可以阻挡端口通信，在许多企业，只有少数端口开放，比如80端口和443端口。</p></blockquote><h2 id="uri" tabindex="-1"><a class="header-anchor" href="#uri"><span>URI</span></a></h2><p>URI是一个具有特殊格式的字符串，它描述了一个Internet或LAN资源。</p><ul><li>URI可分为三个组成部分：协议（scheme）、权限（authority)及路径（path）</li><li>Uri类适用于验证URI字符串的格式，并将URI划分为相应的组成部分。</li><li>Uri的IsLoopback属性表示Uri是否引用本地主机（IP地址为127.0.0.1）; IsFile属性则表示该Uri是否引用了一个本地或者UNC路径。如果IsFile返回true则LocalPath属性将返回一个符合本地操作系统命名习惯（带有反斜杠）的绝对路径AbsolutePath.</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;是否引用本地主机:&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span>IsLoopback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;是否引用了一个本地或者UNC路径:&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span>IsFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;绝对路径:&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span>LocalPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  /</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uri还提供了比较或者截取路径的方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com/s?wd=aa&amp;ie=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// www.baidu.com</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 443</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">IsBaseOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// True</span>

<span class="token class-name"><span class="token keyword">var</span></span> relative <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">MakeRelativeUri</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>relative<span class="token punctuation">.</span>IsAbsoluteUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>relative<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ./</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>URI后的斜杠是非常重要的。服务器会根据它来决定该URI是否包含了路径信息。如果该URI结尾处并没有斜杠的话，则Web服务器则会试图在网站的根目录下寻找名为nutshell（没有扩展名）的文件，而这种行为通常不是我们期望的。如果该文件不存在，则大多数Web服务器会将其认定为用户输入错误，并返回301永久重定向错误，表示客户端应当尝试在结尾加上斜杠。</p></blockquote><p>Uri类还提供了一些静态的辅助方法，例如EscapeUriString()方法会将ASCII值大于127的所有字符转换为十六进制，从而将一个字符串转换为一个有效的URL。CheckHostName()和CheckSchemeName()方法接受一个字符串并检查它们指定属性的语法是否正确（但它们不会确定主机或URI是否存在）。</p><h2 id="客户端类型" tabindex="-1"><a class="header-anchor" href="#客户端类型"><span>客户端类型</span></a></h2><ul><li>WebRequest和WebResponse是管理HTTP和FTP客户端活动，以及“file:”协议的通用基类。它们封装了这些协议共同的“请求/响应”模型：即客户端发起请求，然后等待服务器的响应，只支持流操作。</li><li>WebClient是一个易于使用的门面（facade）类，它负责调用WebRequest和Web-Response的功能，从而节省很多的代码。WebClient支持字符串、字节数组、文件或者流。但是WebClient也不是万能的，因为它也不支持所有的特性（例如cookie）。</li><li>HttpClient是另一个基于WebRequest和WebResponse的类（更准确说是基于Http-WebRequest和HttpWebResponse），它是.NETFramework 4.5新引入的类型。Web-Client主要作为请求/响应类型上的简单一层，而HttpClient则针对基于HTTP的Web API、基于REST的服务以及自定义的认证协议增加了很多功能性支持。</li><li>WebClient和HttpClient都支持简单的上传/下载文件、字符串或字节数组操作，并且它们都支持异步方法。但只有WebClient提供了进度报告功能。</li></ul><h3 id="webclient" tabindex="-1"><a class="header-anchor" href="#webclient"><span>WebClient</span></a></h3><p>以下列出了WebClient类型的使用步骤：</p><ol><li>实例化一个WebClient对象。</li><li>设置Proxy属性值。</li><li>若需要进行验证，则设置Credentials属性值。</li><li>使用相应的URI调用DownloadXXX或者UploadXXX方法。</li></ol><p>示例：演示将示例页面下载到当前文件夹中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Proxy <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//已过时</span>
wc<span class="token punctuation">.</span><span class="token function">DownloadFile</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：下载一个web页面，并进行进度报告，如果下载时间大于5秒，则取消下载任务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已过时</span>
wc<span class="token punctuation">.</span>DownloadProgressChanged <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>ProgressPercentage <span class="token operator">+</span> <span class="token string">&quot;% Complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>ant <span class="token operator">=&gt;</span> wc<span class="token punctuation">.</span><span class="token function">CancelAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> wc<span class="token punctuation">.</span><span class="token function">DownloadFileTaskAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;web.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当请求取消时会抛出一个WebException异常，且其Status属性的值为WebExceptionStatus.RequestCanceled。</p><h3 id="webrequest和webresponse" tabindex="-1"><a class="header-anchor" href="#webrequest和webresponse"><span>WebRequest和WebResponse</span></a></h3><p>WebRequest和WebResponse比WebClient更复杂，但是也更加灵活。以下是使用它们的基本步骤：</p><ol><li>使用一个URI调用WebRequest.Create来实例比一个Web请求对象。</li><li>设置Proxy属性。</li><li>若需要进行身份验证，则设置Credential属性。如果需要上传数据，则：</li><li>调用请求对象的GetRequestStream方法，并向流中写入数据。如果需要处理响应，则请参见第5步。如果需要下载数据，则：</li><li>调用请求对象的GetResponse方法，实例化一个Web响应对象。</li><li>在Web响应对象上调用GetResponseStream方法，并从流中读取数据（可以利用StreamReader）。</li></ol><p>示例：下载示例页面代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> req <span class="token operator">=</span> WebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已过时</span>
req<span class="token punctuation">.</span>Proxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">WebResponse</span> res <span class="token operator">=</span> <span class="token keyword">await</span> req<span class="token punctuation">.</span><span class="token function">GetResponseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name">Stream</span> rs <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name">FileStream</span> fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> rs<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create静态方法会创建一个WebRequest类型子类的实例，例如HttpWebReqeust或者FtpWebRequest。它将根据URI的前缀来选择子类。 WebRequest类提供了Timeout属性（单位为毫秒）。如果发生超时，则抛出Web-Exception，并将其Status属性设置为WebExceptionStatus.Timeout。HTTP协议默认的超时时间为100秒，而FTP协议默认不设置超时时间。 一个WebRequest对象不可用于多个请求，每一个实例仅可用于一个作业。</p><h3 id="httpclient" tabindex="-1"><a class="header-anchor" href="#httpclient"><span>HttpClient</span></a></h3><p>HttpClient类是.NET Framework 4.5引入的新类型。它在HttpWebReqeust和Http-WebResponse之上提供了另一层封装。 它在处理比获取网页更复杂的协议场景时比WebClient有更佳的体验。具体来说：</p><ul><li>一个HttpClient实例就可以支持并发请求。而要使用WebClient处理并发请求的话则需要为每一个并发线程创建一个新的实例。当需要自定义头部信息、cookie信息，以及身份验证信息时会变得更加麻烦。·</li><li>HttpClient支持插件式的自定义消息处理器。这可用于创建单元测试替身，以及创建（日志记录、压缩、加密等）自定义管道。而对于WebClient来说则很难进行单元测试代码的编写。</li><li>HttpClient有丰富且易于扩展的请求头部与内容类型系统。</li></ul><blockquote><p>HttpClient并不能完全替代WebClient，因为它不支持进度报告。</p></blockquote><p>使用HttpClient的最简单方式是创建一个实例，然后使用一个URI调用其Get*方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（除上述方法外，还有GetByteArrayAsync和GetStreamAsync方法。）HttpClient的所有I/O相关方法都是异步的（且没有同步版本）。 与WebClient不同，若想获得HttpClient的最佳性能，必须重用相同的实例(否则，诸如DNS解析等操作会不必要地重复执行)。HttpClient本身支持并发操作，因此可以像以下代码这样同时下载两个网页：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpClient包含Timeout属性和BaseAddress属性（它会为每一个请求添加URI前缀）。HttpClient在一定程度上就是一层简单外壳：而大多数属性都定义在HttpClientHandler类中。若要访问该类，可以先创建一个实例，而后将其传递给HttpClient的构造器：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    UseProxy <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 禁用代理支持</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中的处理器禁用了代理支持。此外，还有专门控制cookie、自动重定向、身份验证等功能的属性。</p><h4 id="getasync方法与响应" tabindex="-1"><a class="header-anchor" href="#getasync方法与响应"><span>GetAsync方法与响应</span></a></h4><p>GetStringAsync、GetByteArrayAsync和GetStreamAsync方法比通用方法Get-Async的操作更便捷，GetAsync会返回一个响应消息：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不写的只会返回失败的状态码，而不会抛出异常</span>
<span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpResponseMessage具有一系列访问头部信息的属性（请参见16.5节）和HTTP StatusCode属性。</p><p>HttpContent类的CopyToAsync方法可将内容数据写入到另一个流中。例如，将输出写到一个文件中：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不写的只会返回失败的状态码，而不会抛出异常</span>
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> firlStream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;test.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>firlStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GetAsync是与四种HTTP动词相关的方法之一（其他的方法为PostAsync、Put-Async、DeleteAsync）</p><h4 id="sendasync方法与请求消息" tabindex="-1"><a class="header-anchor" href="#sendasync方法与请求消息"><span>SendAsync方法与请求消息</span></a></h4><p>前面的四个方法都是对SendAsync的快捷调用，而SendAsync才是可以满足各种需求的底层方法。要使用该方法首先必须创建HttpRequestMessage对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化HttpRequestMessage对象时可以自定义请求的属性，例如头部信息和上传数据的内容。</p><h4 id="上传数据和httpcontext" tabindex="-1"><a class="header-anchor" href="#上传数据和httpcontext"><span>上传数据和HttpContext</span></a></h4><p>在实例化HttpRequestMessage对象后，可以设置其Content属性指定上传的内容。这个属性的类型是抽象类HttpContent。Framework提供了以下几种内容子类（当然我们也可以实现自定义内容类型）：</p><ul><li>ByteArrayContent</li><li>StringContent</li><li>FormUrlEncodedContent</li><li>StreamContent</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span> <span class="token punctuation">{</span> UseProxy <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> <span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpResponseMessage</span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="httpmessagehandler类" tabindex="-1"><a class="header-anchor" href="#httpmessagehandler类"><span>HttpMessageHandler类</span></a></h4><p>大多数自定义的请求属性都是在HttpClientHandler中，而不是在HttpClient中定义的。而HttpClientHandler实际上是抽象类HttpMessage-Handler的子类。HttpMessageHandler的定义如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpMessageHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>

	<span class="token keyword">protected</span> <span class="token function">HttpMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">protected</span> <span class="token keyword">internal</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">HttpResponseMessage</span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">protected</span> <span class="token keyword">internal</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中HttpClient的SendAsync方法会调用HttpMessageHandler的SendAsync方法。 使用场景：通过创建HttpMessageHandler子类这种方法扩展HttpClient的功能。</p><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h3><p>代理服务器是一个负责转发HTTP和FTP请求的中间服务器。有时，一些组织会搭建一个代理服务器来作为员工访问Internet的唯一方式（主要是为了简化安全性）。</p><p>我们可以使用WebProxy对象，令WebClient或者WebRequest对象通过代理服务器转发请求：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">WebProxy</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebProxy</span><span class="token punctuation">(</span><span class="token string">&quot;192.178.10.49&quot;</span><span class="token punctuation">,</span> <span class="token number">808</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pwssword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">WebClient</span> WebClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
WebClient<span class="token punctuation">.</span>Proxy <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用HttpClient访问代理，那么首先需要创建一个HttpClientHandler，设置其Proxy属性，然后将它传递给HttpClient的构造器：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">WebProxy</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebProxy</span><span class="token punctuation">(</span><span class="token string">&quot;192.178.10.49&quot;</span><span class="token punctuation">,</span> <span class="token number">808</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pwssword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span> <span class="token punctuation">{</span> Proxy <span class="token operator">=</span> p <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果不使用代理，则务必将WebClient和WebRequest的<strong>Proxy</strong>属性设置为null。否则，Framework可能会尝试自动检查代理设置，而这可能会令请求额外增加多达30秒钟的延迟。</p></blockquote><p>将HttpClientHandler的UserProxy属性设置为false就可以清空Proxy属性，即禁止自动检查代理设置。</p><h3 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证"><span>身份验证</span></a></h3><p>若HTTP或FTP站点需要用户名和密码，则可以创建一个NetworkCredential对象，并将其赋给WebClient或者WebRequest的Credentials属性，HttpClient也通过HttpClientHandler提供了Credentials属性：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span> <span class="token punctuation">{</span>
    Credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pwsswork&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法适用于基于对话框的身份验证协议，如Basic和Digest</p><blockquote><p>使用表单进行身份验证时无须设置Credentials属性</p></blockquote><h4 id="使用httpclient进行头部信息身份验证" tabindex="-1"><a class="header-anchor" href="#使用httpclient进行头部信息身份验证"><span>使用HttpClient进行头部信息身份验证</span></a></h4><p>如果使用HttpClient，则可以直接设置验证头信息来实现身份验证：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Basic&quot;</span><span class="token punctuation">,</span>
    Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">&quot;username:pwssawor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法同样适用于自定义身份验证系统，如OAuth.</p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><p>WebRequest、WebResponse、WebClient及它们包装的流都会在发生网络或协议错误时抛出WebException。HttpClient也会抛出异常，但是它会将WebException包装为HttpRequestException。我们可以从WebException的Status属性中确定具体的错误类型。</p><p>在HttpClient中，只有在响应对象上调用EnsureSuccessStatusCode时才会抛出异常。在执行该操作之前查询StatusCode属性，就可以获得特定的状态代码。</p><blockquote><p>若希望获得三个数字表示的状态码，如401或者404，则可以直接将Http-StatusCode或FtpStatusCode枚举值转换为整数。</p></blockquote><p>默认情况下，WebClient和WebRequest会自动产生重定向响应，因此响应中是不会出现重定向错误的。若将AllowAutoRedirect设置为false，就可以在WebRequest对象中关闭这个行为。</p><h2 id="使用http" tabindex="-1"><a class="header-anchor" href="#使用http"><span>使用HTTP</span></a></h2>`,92),k={href:"https://weread.qq.com/web/reader/710327c0718f6368710b285k82a32a302a282aa4b0af8ce",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const s=t("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",k,[o("https://weread.qq.com/web/reader/710327c0718f6368710b285k82a32a302a282aa4b0af8ce"),c(s)])])])}const w=a(u,[["render",d],["__file","wanglao.html.vue"]]),g=JSON.parse('{"path":"/dotnet/csharp/wanglao.html","title":"网络","lang":"zh-CN","frontmatter":{"title":"网络","lang":"zh-CN","date":"2023-10-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"wanglao","slug":"ndg604","docsId":"64936761","description":"本文为读书笔记 示例代码环境：vs2022+.Net6 概述 .NET Framework在System.Net.*命名空间中包含了支持各种网络标准的类，支持的标准包括HTTP、TCP/IP以及FTP等。 以下列出了其中的主要组件： WebClient类：支持通过HTTP或者FTP执行简单的下载/上传操作。 WebRequest和WebResponse...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/wanglao.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"网络"}],["meta",{"property":"og:description","content":"本文为读书笔记 示例代码环境：vs2022+.Net6 概述 .NET Framework在System.Net.*命名空间中包含了支持各种网络标准的类，支持的标准包括HTTP、TCP/IP以及FTP等。 以下列出了其中的主要组件： WebClient类：支持通过HTTP或者FTP执行简单的下载/上传操作。 WebRequest和WebResponse..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1642175391107-21e8a100-0feb-47bc-adbd-57d9226e32d6.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1642175391107-21e8a100-0feb-47bc-adbd-57d9226e32d6.png\\"],\\"datePublished\\":\\"2023-10-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"网络架构","slug":"网络架构","link":"#网络架构","children":[]},{"level":2,"title":"地址与端口","slug":"地址与端口","link":"#地址与端口","children":[]},{"level":2,"title":"URI","slug":"uri","link":"#uri","children":[]},{"level":2,"title":"客户端类型","slug":"客户端类型","link":"#客户端类型","children":[{"level":3,"title":"WebClient","slug":"webclient","link":"#webclient","children":[]},{"level":3,"title":"WebRequest和WebResponse","slug":"webrequest和webresponse","link":"#webrequest和webresponse","children":[]},{"level":3,"title":"HttpClient","slug":"httpclient","link":"#httpclient","children":[{"level":4,"title":"GetAsync方法与响应","slug":"getasync方法与响应","link":"#getasync方法与响应","children":[]},{"level":4,"title":"SendAsync方法与请求消息","slug":"sendasync方法与请求消息","link":"#sendasync方法与请求消息","children":[]},{"level":4,"title":"上传数据和HttpContext","slug":"上传数据和httpcontext","link":"#上传数据和httpcontext","children":[]},{"level":4,"title":"HttpMessageHandler类","slug":"httpmessagehandler类","link":"#httpmessagehandler类","children":[]}]},{"level":3,"title":"代理","slug":"代理","link":"#代理","children":[]},{"level":3,"title":"身份验证","slug":"身份验证","link":"#身份验证","children":[{"level":4,"title":"使用HttpClient进行头部信息身份验证","slug":"使用httpclient进行头部信息身份验证","link":"#使用httpclient进行头部信息身份验证","children":[]}]},{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]}]},{"level":2,"title":"使用HTTP","slug":"使用http","link":"#使用http","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":12.38,"words":3713},"filePathRelative":"dotnet/csharp/wanglao.md","localizedDate":"2023年10月27日","excerpt":"<blockquote>\\n<p>本文为读书笔记\\n示例代码环境：vs2022+.Net6</p>\\n</blockquote>\\n<h2>概述</h2>\\n<p>.NET Framework在System.Net.*命名空间中包含了支持各种网络标准的类，支持的标准包括HTTP、TCP/IP以及FTP等。\\n以下列出了其中的主要组件：</p>\\n<ul>\\n<li>WebClient类：支持通过HTTP或者FTP执行简单的下载/上传操作。</li>\\n<li>WebRequest和WebResponse类：可以从底层控制客户端HTTP或FTP操作。·</li>\\n<li>HttpClient类：消费HTTP Web API和RESTful服务。</li>\\n<li>HttpListener类：用于编写HTTP服务器。</li>\\n<li>SmtpClient类：构造并通过SMTP协议发送邮件。</li>\\n<li>Dns类：用于进行域名和地址之间的转换。</li>\\n<li>TcpClient、UdpClient、TcpListener和Socket类：用于直接访问传输层和网络层。</li>\\n</ul>","autoDesc":true}');export{w as comp,g as data};
