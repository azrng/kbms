import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const p={},e=t(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="二进制转换十六进制" tabindex="-1"><a class="header-anchor" href="#二进制转换十六进制"><span>二进制转换十六进制</span></a></h3><p>二进制转十六进制，下面的几个方法实现效果是一样的，有些是大小写不同</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> encrypted <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 这里Hex来自于包：BouncyCastle.NetCore</span>
<span class="token class-name"><span class="token keyword">var</span></span> hexString <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Hex<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> hexString2 <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">ToHexString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString2<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> hexString1 <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
hexString1<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 还有这个方法也可以</span>
<span class="token comment">// var stringBuilder = new StringBuilder();</span>
<span class="token comment">// for (var index = 0; index &lt; bytes.Length; ++index)</span>
<span class="token comment">//     stringBuilder.Append(bytes[index].ToString(&quot;X2&quot;));</span>
<span class="token comment">// return stringBuilder.ToString();</span>

<span class="token comment">// 输出效果</span>
<span class="token comment">//abcdef</span>
<span class="token comment">//abcdef</span>
<span class="token comment">//ABCDEF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十六进制转二进制" tabindex="-1"><a class="header-anchor" href="#十六进制转二进制"><span>十六进制转二进制</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> encrypted <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> hexString2 <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">ToHexString</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hexString2<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>hexString2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bytes<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">var</span></span> bytes2 <span class="token operator">=</span> <span class="token function">ToBytesFromHex</span><span class="token punctuation">(</span>hexString2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	bytes2<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 十六进制转二进制</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">ToBytesFromHex</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> hex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hex<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>hex<span class="token punctuation">.</span>Length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		hex <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> hex<span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>hex<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> hex<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span>
		bytes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NumberStyles<span class="token punctuation">.</span>AllowHexSpecifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","byte.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/hexincsharp/byte.html","title":"byte","lang":"zh-CN","frontmatter":{"title":"byte","lang":"zh-CN","date":"2023-11-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"byte","slug":"abswzmpf6xq64siq","docsId":"142421054","description":"操作 二进制转换十六进制 二进制转十六进制，下面的几个方法实现效果是一样的，有些是大小写不同 十六进制转二进制","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/hexincsharp/byte.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"byte"}],["meta",{"property":"og:description","content":"操作 二进制转换十六进制 二进制转十六进制，下面的几个方法实现效果是一样的，有些是大小写不同 十六进制转二进制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"byte\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"二进制转换十六进制","slug":"二进制转换十六进制","link":"#二进制转换十六进制","children":[]},{"level":3,"title":"十六进制转二进制","slug":"十六进制转二进制","link":"#十六进制转二进制","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.79,"words":237},"filePathRelative":"dotnet/csharp/hexincsharp/byte.md","localizedDate":"2023年11月9日","excerpt":"<h2>操作</h2>\\n<h3>二进制转换十六进制</h3>\\n<p>二进制转十六进制，下面的几个方法实现效果是一样的，有些是大小写不同</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> encrypted <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">0xAB</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0xCD</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0xEF</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 这里Hex来自于包：BouncyCastle.NetCore</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> hexString <span class=\\"token operator\\">=</span> Encoding<span class=\\"token punctuation\\">.</span>UTF8<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetString</span><span class=\\"token punctuation\\">(</span>Hex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Encode</span><span class=\\"token punctuation\\">(</span>encrypted<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nhexString<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dump</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> hexString2 <span class=\\"token operator\\">=</span> Hex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToHexString</span><span class=\\"token punctuation\\">(</span>encrypted<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nhexString2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dump</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> hexString1 <span class=\\"token operator\\">=</span> BitConverter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span>encrypted<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"-\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span>Empty<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nhexString1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dump</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 还有这个方法也可以</span>\\n<span class=\\"token comment\\">// var stringBuilder = new StringBuilder();</span>\\n<span class=\\"token comment\\">// for (var index = 0; index &lt; bytes.Length; ++index)</span>\\n<span class=\\"token comment\\">//     stringBuilder.Append(bytes[index].ToString(\\"X2\\"));</span>\\n<span class=\\"token comment\\">// return stringBuilder.ToString();</span>\\n\\n<span class=\\"token comment\\">// 输出效果</span>\\n<span class=\\"token comment\\">//abcdef</span>\\n<span class=\\"token comment\\">//abcdef</span>\\n<span class=\\"token comment\\">//ABCDEF</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
