import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>DefaultAuthenticateScheme <span class="token operator">=</span> <span class="token string">&quot;JwtBearer&quot;</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> <span class="token string">&quot;JwtBearer&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span><span class="token string">&quot;JwtBearer&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Audience <span class="token operator">=</span> <span class="token string">&quot;Audience&quot;</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// The signing key must match!</span>
        ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">&quot;SecurityKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the JWT Issuer (iss) claim</span>
        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidIssuer <span class="token operator">=</span> <span class="token string">&quot;Issuer&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the JWT Audience (aud) claim</span>
        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidAudience <span class="token operator">=</span> <span class="token string">&quot;Audience&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// Validate the token expiry</span>
        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// If you want to allow a certain Account of clock drift, set that here</span>
        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtBearerEvents</span>
     <span class="token punctuation">{</span>
        OnMessageReceived <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//重点在于这里；判断是Signalr的路径</span>
        <span class="token class-name"><span class="token keyword">var</span></span> accessToken <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">[</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这点有区别</span>
        <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">StartsWithSegments</span><span class="token punctuation">(</span><span class="token string">&quot;/chat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Token <span class="token operator">=</span> accessToken<span class="token punctuation">;</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","signalrshiyongjwt.html.vue"]]),d=JSON.parse('{"path":"/dotnet/signalr/signalrshiyongjwt.html","title":"signalr使用jwt","lang":"zh-CN","frontmatter":{"title":"signalr使用jwt","lang":"zh-CN","date":"2022-02-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"signalrshiyongjwt","slug":"xlggfb","docsId":"32030127","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/signalr/signalrshiyongjwt.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"signalr使用jwt"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"signalr使用jwt\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.5,"words":149},"filePathRelative":"dotnet/signalr/signalrshiyongjwt.md","localizedDate":"2022年2月25日","excerpt":"<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>services<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddAuthentication</span><span class=\\"token punctuation\\">(</span>options <span class=\\"token operator\\">=&gt;</span>\\n<span class=\\"token punctuation\\">{</span>\\n    options<span class=\\"token punctuation\\">.</span>DefaultAuthenticateScheme <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"JwtBearer\\"</span><span class=\\"token punctuation\\">;</span>\\n    options<span class=\\"token punctuation\\">.</span>DefaultChallengeScheme <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"JwtBearer\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddJwtBearer</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"JwtBearer\\"</span><span class=\\"token punctuation\\">,</span> options <span class=\\"token operator\\">=&gt;</span>\\n<span class=\\"token punctuation\\">{</span>\\n    options<span class=\\"token punctuation\\">.</span>Audience <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Audience\\"</span><span class=\\"token punctuation\\">;</span>\\n    options<span class=\\"token punctuation\\">.</span>TokenValidationParameters <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">TokenValidationParameters</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// The signing key must match!</span>\\n        ValidateIssuerSigningKey <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        IssuerSigningKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SymmetricSecurityKey</span><span class=\\"token punctuation\\">(</span>Encoding<span class=\\"token punctuation\\">.</span>ASCII<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"SecurityKey\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">// Validate the JWT Issuer (iss) claim</span>\\n        ValidateIssuer <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        ValidIssuer <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Issuer\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">// Validate the JWT Audience (aud) claim</span>\\n        ValidateAudience <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        ValidAudience <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Audience\\"</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">// Validate the token expiry</span>\\n        ValidateLifetime <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">// If you want to allow a certain Account of clock drift, set that here</span>\\n        ClockSkew <span class=\\"token operator\\">=</span> TimeSpan<span class=\\"token punctuation\\">.</span>Zero\\n     <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    options<span class=\\"token punctuation\\">.</span>Events <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">JwtBearerEvents</span>\\n     <span class=\\"token punctuation\\">{</span>\\n        OnMessageReceived <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">.</span>HasValue<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//重点在于这里；判断是Signalr的路径</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> accessToken <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Query<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"access_token\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//这点有区别</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> path <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IsNullOrWhiteSpace</span><span class=\\"token punctuation\\">(</span>accessToken<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">StartsWithSegments</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/chat\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            context<span class=\\"token punctuation\\">.</span>Token <span class=\\"token operator\\">=</span> accessToken<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre></div>"}');export{k as comp,d as data};
