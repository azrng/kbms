import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-S-drW72G.js";const l={},e=n(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>下面讲述了一些看似是面向对象，但是实际上是面向过程的操作。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="_1、滥用get、set方法" tabindex="-1"><a class="header-anchor" href="#_1、滥用get、set方法"><span>1、滥用get、set方法</span></a></h3><p>面向过程写法：外部可以随意的修改属性的值，并且会导致和Item属性的值不一致的情况。</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ShoppingCart1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> ItemCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> ToTalPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ShoppingCartItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">Items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面向对象写法</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ShoppingCart2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> ItemCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> ToTalPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ShoppingCartItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">Items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> IReadOnlyCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ShoppingCartItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetItems</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> AddItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ShoppingCartItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        ItemCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        ToTalPrice</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Price</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Clear</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Clear</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        ToTalPrice</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        ItemCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不允许外部直接修改里面的属性，也不允许外部调用者去修改集合内容，将操作这个类的方法都写到这个类中。</p><blockquote><p>总结：在设计实现类的时候，除非真的需要，否则，尽量不要给属性设置set方法，除此之外，尽管get方法相对set方法安全些，如果返回的是集合容器，也要防范集合内部数据被修改的危险。</p></blockquote><h3 id="_2、滥用全局变量和全局方法" tabindex="-1"><a class="header-anchor" href="#_2、滥用全局变量和全局方法"><span>2、滥用全局变量和全局方法</span></a></h3><p>在面向对象编程中，常见的全局变量有单例类对象、静态成员变量、常量，常见的全局方法有静态方法。 静态方法讲方法与数据分离，破坏了封装的特性，是典型的面向过程风格。</p><p>平常是专门建立一个常量文件，将所有的常量配置放到这一个类中，这个时候会导致代码的可维护性变差、因为依赖它的文件多，所以编译时间也会增加、还影响代码的可复用性，如果某一个地方只需要里面的一个常量，这个时候异能一并引用。改进方案：</p><ul><li>将这个类拆解成功能更加单一的多个类，比如将各个不同配置的常量，放到各自的配置类中。</li><li>不单独设置常量类，而是哪个类用到了某个常量，就把这个常量定义到这个类中。比如redisconfig类用到的redis的常量，就直接在这个类中定义常量，提到类设计的内聚性和代码的复用性。 <ul><li><strong>但是运引发了一个疑问？如果我多个地方都需要这个常量，那不是要定义多次吗？这样子合适吗？</strong></li></ul></li></ul><p>定义静态方法的时候，最好能细化一下，比如针对不同的功能，设计不同的Utils类，比如FileUtils、IOUtils、StringUtils等。</p><h3 id="_3、定义数据和方法分离的类" tabindex="-1"><a class="header-anchor" href="#_3、定义数据和方法分离的类"><span>3、定义数据和方法分离的类</span></a></h3><p>常见的面向过程风格的代码，那就是数据定义在一个类中，方法定义在另一个类中。映射到代码中就是Controller层负责暴露接口给前端使用、Service层负责核心业务逻辑，而Repository层负责数据读写操作。而在每一层中，又会定义相应的VO(View object)、BO(Business Object)、Entity。一般情况下，VO、BO、Entity中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都被定义到对应的Controller类、Service类、Repository类中。</p><h2 id="为什么" tabindex="-1"><a class="header-anchor" href="#为什么"><span>为什么</span></a></h2><p>为什么我们会不由自主写出来面向过程的代码，因为在生活中你去完成一个任务就会思考，先做什么，在做什么，面向过程编程风格恰恰符合这流程化思维的方式。而面向过程编程风格正好相反，它是一种自底向上的思考方式，<strong>不是先去按照流程分解任务，而是将任务翻译成一个一个小的模块(类)，设计类之间的交互，最后按照流程将类组装起来，完成整个任务</strong>。这个方式比较符合复杂程序的开发。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>面向对象编程离不开基础的面向过程编程，因为类中的每个方法的实现逻辑，不就是面向过程的代码吗。</p>`,21),t=[e];function h(p,k){return a(),s("div",null,t)}const g=i(l,[["render",h],["__file","mianxiangduixianghemianxiangguocheng.html.vue"]]),B=JSON.parse('{"path":"/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixianghemianxiangguocheng.html","title":"面向对象和面向过程","lang":"zh-CN","frontmatter":{"title":"面向对象和面向过程","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"mianxiangduixianghemianxiangguocheng","slug":"pirfp1","docsId":"67516278","description":"介绍 下面讲述了一些看似是面向对象，但是实际上是面向过程的操作。 操作 1、滥用get、set方法 面向过程写法：外部可以随意的修改属性的值，并且会导致和Item属性的值不一致的情况。 面向对象写法 不允许外部直接修改里面的属性，也不允许外部调用者去修改集合内容，将操作这个类的方法都写到这个类中。 总结：在设计实现类的时候，除非真的需要，否则，尽量不要...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixianghemianxiangguocheng.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"面向对象和面向过程"}],["meta",{"property":"og:description","content":"介绍 下面讲述了一些看似是面向对象，但是实际上是面向过程的操作。 操作 1、滥用get、set方法 面向过程写法：外部可以随意的修改属性的值，并且会导致和Item属性的值不一致的情况。 面向对象写法 不允许外部直接修改里面的属性，也不允许外部调用者去修改集合内容，将操作这个类的方法都写到这个类中。 总结：在设计实现类的时候，除非真的需要，否则，尽量不要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象和面向过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"1、滥用get、set方法","slug":"_1、滥用get、set方法","link":"#_1、滥用get、set方法","children":[]},{"level":3,"title":"2、滥用全局变量和全局方法","slug":"_2、滥用全局变量和全局方法","link":"#_2、滥用全局变量和全局方法","children":[]},{"level":3,"title":"3、定义数据和方法分离的类","slug":"_3、定义数据和方法分离的类","link":"#_3、定义数据和方法分离的类","children":[]}]},{"level":2,"title":"为什么","slug":"为什么","link":"#为什么","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1043},"filePathRelative":"softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixianghemianxiangguocheng.md","localizedDate":"2023年9月5日","excerpt":"<h2>介绍</h2>\\n<p>下面讲述了一些看似是面向对象，但是实际上是面向过程的操作。</p>\\n<h2>操作</h2>\\n<h3>1、滥用get、set方法</h3>\\n<p>面向过程写法：外部可以随意的修改属性的值，并且会导致和Item属性的值不一致的情况。</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> ShoppingCart1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> int</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\"> ItemCount</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">get</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> double</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\"> ToTalPrice</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">get</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\"> List</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">ShoppingCartItem</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt; </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#ABB2BF\\">Items</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">get</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{g as comp,B as data};
