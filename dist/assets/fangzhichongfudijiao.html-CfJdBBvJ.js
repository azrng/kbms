import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-vSdX8vi3.js";const e="/kbms/common/1614567780801-d3b41f13-bfcc-4877-9847-fed609c13fbb.webp",p={},o=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在平常开发中，我们常常会遇到防止重复请求的问题。当用户因为网络不佳或者其他问题的情况下，会多次点击，导致重复提交，重复提交的后果在交易系统、售后维权，以及支付系统中尤其严重。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h3 id="前端-按钮禁用" tabindex="-1"><a class="header-anchor" href="#前端-按钮禁用"><span>前端-按钮禁用</span></a></h3><p>当用户第一次点击按钮提交后，修改按钮的状态为禁用状态，防止用户重复提交。</p><h3 id="后端-redis缓存" tabindex="-1"><a class="header-anchor" href="#后端-redis缓存"><span>后端-redis缓存</span></a></h3><p>当用户第一次点击按钮提交后，然后存储一个redis值，key是UserId+方法名称，值随意，时间不能太长也不能太短，然后在逻辑处理结束后将该值删除，当第一次请求没有结束的时候，用户第二次请求过来，然后去redis获取值，发现值已经存在，这个时候直接返回，防止重复提交。</p><h3 id="后端-zookeeper防重策略" tabindex="-1"><a class="header-anchor" href="#后端-zookeeper防重策略"><span>后端-Zookeeper防重策略</span></a></h3><p>流程如下：</p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="过滤器实现" tabindex="-1"><a class="header-anchor" href="#过滤器实现"><span>过滤器实现</span></a></h3><p>注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CookiePolicyOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// This lambda determines whether user consent for non-essential cookies is needed for a given request.</span>
    options<span class="token punctuation">.</span>CheckConsentNeeded <span class="token operator">=</span> Context <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>MinimumSameSitePolicy <span class="token operator">=</span> SameSiteMode<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddSession</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set a short timeout for easy testing.</span>
    options<span class="token punctuation">.</span>IdleTimeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>HttpOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// Make the session cookie essential</span>
    options<span class="token punctuation">.</span>Cookie<span class="token punctuation">.</span>IsEssential <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用Session</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> app<span class="token punctuation">.</span><span class="token function">UseSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来定义一个防重复提交的过滤器。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Method<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreventDoublePostAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> _uniqFormuId <span class="token operator">=</span> <span class="token string">&quot;LastProcessedToken&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">IAntiforgery</span> antiforgery <span class="token operator">=</span> <span class="token punctuation">(</span>IAntiforgery<span class="token punctuation">)</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAntiforgery</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AntiforgeryTokenSet</span> tokens <span class="token operator">=</span> antiforgery<span class="token punctuation">.</span><span class="token function">GetAndStoreTokens</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>tokens<span class="token punctuation">.</span>FormFieldName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> currentFormId <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">[</span>tokens<span class="token punctuation">.</span>FormFieldName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> lastToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Session<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>_uniqFormuId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastToken<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>currentFormId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>ModelState<span class="token punctuation">.</span><span class="token function">AddModelError</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> <span class="token string">&quot;Looks like you accidentally submitted the same form twice.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Session<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>_uniqFormuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Session<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>_uniqFormuId<span class="token punctuation">,</span> currentFormId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Session<span class="token punctuation">.</span><span class="token function">CommitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在需要该验证规则的 Action 上进行标注。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PreventDoublePost</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Edit</span><span class="token punctuation">(</span><span class="token class-name">EditViewModel</span> model<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ModelState<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//PreventDoublePost Attribute makes ModelState invalid</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于如何生成 Anti Fogery Token，可以看下msdn: https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-2.2#javascript</p>`,20),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","fangzhichongfudijiao.html.vue"]]),m=JSON.parse('{"path":"/dotnet/api/controllerApi/idempotent/fangzhichongfudijiao.html","title":"防止重复提交","lang":"zh-CN","frontmatter":{"title":"防止重复提交","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"fangzhichongfudijiao","slug":"zguawz","docsId":"32101027","description":"简介 在平常开发中，我们常常会遇到防止重复请求的问题。当用户因为网络不佳或者其他问题的情况下，会多次点击，导致重复提交，重复提交的后果在交易系统、售后维权，以及支付系统中尤其严重。 解决方案 前端-按钮禁用 当用户第一次点击按钮提交后，修改按钮的状态为禁用状态，防止用户重复提交。 后端-redis缓存 当用户第一次点击按钮提交后，然后存储一个redis...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/idempotent/fangzhichongfudijiao.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"防止重复提交"}],["meta",{"property":"og:description","content":"简介 在平常开发中，我们常常会遇到防止重复请求的问题。当用户因为网络不佳或者其他问题的情况下，会多次点击，导致重复提交，重复提交的后果在交易系统、售后维权，以及支付系统中尤其严重。 解决方案 前端-按钮禁用 当用户第一次点击按钮提交后，修改按钮的状态为禁用状态，防止用户重复提交。 后端-redis缓存 当用户第一次点击按钮提交后，然后存储一个redis..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614567780801-d3b41f13-bfcc-4877-9847-fed609c13fbb.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"防止重复提交\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614567780801-d3b41f13-bfcc-4877-9847-fed609c13fbb.webp\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"前端-按钮禁用","slug":"前端-按钮禁用","link":"#前端-按钮禁用","children":[]},{"level":3,"title":"后端-redis缓存","slug":"后端-redis缓存","link":"#后端-redis缓存","children":[]},{"level":3,"title":"后端-Zookeeper防重策略","slug":"后端-zookeeper防重策略","link":"#后端-zookeeper防重策略","children":[]},{"level":3,"title":"过滤器实现","slug":"过滤器实现","link":"#过滤器实现","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"dotnet/api/controllerApi/idempotent/fangzhichongfudijiao.md","localizedDate":"2023年9月29日","excerpt":"<h2>简介</h2>\\n<p>在平常开发中，我们常常会遇到防止重复请求的问题。当用户因为网络不佳或者其他问题的情况下，会多次点击，导致重复提交，重复提交的后果在交易系统、售后维权，以及支付系统中尤其严重。</p>\\n<h2>解决方案</h2>\\n<h3>前端-按钮禁用</h3>\\n<p>当用户第一次点击按钮提交后，修改按钮的状态为禁用状态，防止用户重复提交。</p>\\n<h3>后端-redis缓存</h3>\\n<p>当用户第一次点击按钮提交后，然后存储一个redis值，key是UserId+方法名称，值随意，时间不能太长也不能太短，然后在逻辑处理结束后将该值删除，当第一次请求没有结束的时候，用户第二次请求过来，然后去redis获取值，发现值已经存在，这个时候直接返回，防止重复提交。</p>","autoDesc":true}');export{k as comp,m as data};
