import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-Bw62I61B.js";const t={},p=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><ul><li>依赖注入只负责由其创建的对象实例</li><li>容器或者子容器释放的时候，会释放由其创建的对象实例。</li></ul><p>推荐使用容器来来管理我们的对象的创建和释放。</p><table><thead><tr><th><strong>--</strong></th><th><strong>---</strong></th><th><strong>---</strong></th><th><strong>---</strong></th></tr></thead><tbody><tr><td>Singleton</td><td>单例</td><td>服务容器首次请求会创建，后续都使用同一实例</td><td>AddSingleton</td></tr><tr><td>Scoped</td><td>特定范围</td><td>在一个请求(连接)时被创建一次实例，生命周期横贯整次请求</td><td>AddScoped</td></tr><tr><td>Transient</td><td>瞬时</td><td>服务容器每次请求，都会创建一个实例，适合轻量级、无状态服务</td><td>AddTransient</td></tr></tbody></table><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>为了演示，我们创建一个UserService，并让该Service继承IDisposable</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span><span class="token punctuation">,</span> <span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;UserService服务被释放  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中我们通过FromServices去注入IUserService</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IUserService</span> userService2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前创建的UserService  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userService<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前创建的UserService2  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userService2<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//为当前请求创建一个子容器,一次请求会创建一次</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;子容器创建的UserService  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">service<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;子容器创建的UserService处理完毕&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;接口处理完毕 &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="瞬时生命周期" tabindex="-1"><a class="header-anchor" href="#瞬时生命周期"><span>瞬时生命周期</span></a></h3><p>现在我们将刚才的服务注册为瞬时生命周期</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行查看对象释放的时机,输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 第一次请求结束</span>
当前创建的UserService  <span class="token number">35827753</span>
当前创建的UserService2  <span class="token number">4419630</span>
子容器创建的UserService  <span class="token number">40124269</span>
子容器创建的UserService处理完毕
UserService服务被释放  <span class="token number">40124269</span>
接口处理完毕
UserService服务被释放  <span class="token number">4419630</span>
UserService服务被释放  <span class="token number">35827753</span>
    
<span class="token comment">// 第二次请求结束       </span>
当前创建的UserService  <span class="token number">17653682</span>
当前创建的UserService2  <span class="token number">42194754</span>
子容器创建的UserService  <span class="token number">15688314</span>
子容器创建的UserService处理完毕
UserService服务被释放  <span class="token number">15688314</span>
接口处理完毕
UserService服务被释放  <span class="token number">42194754</span>
UserService服务被释放  <span class="token number">17653682</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过结果可以得出结论，瞬时生命周期对象的释放在这次请求结束的时候释放，并且一次请求可能产生多次实例，多次请求产生多次实例。</p><p>但是如果我们是在跟容器进行获取的瞬时服务，那么它就不是请求结束的时候释放了。 ConfigureServices中注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Configure中配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> servise <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>servise<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会在项目启动的时候进行输出，中间调用接口并不会释放服务,当程序关闭的时候释放服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>info<span class="token punctuation">:</span> Microsoft<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>Lifetime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      Application <span class="token keyword">is</span> <span class="token class-name">shutting</span> down<span class="token range operator">..</span><span class="token punctuation">.</span>
UserService服务被释放  <span class="token number">30995104</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="范围生命周期" tabindex="-1"><a class="header-anchor" href="#范围生命周期"><span>范围生命周期</span></a></h3><p>现在我们将刚才的服务注册为范围生命周期</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行查看对象释放的时机，输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 第一次请求结束</span>
当前创建的UserService  <span class="token number">43182754</span>
当前创建的UserService2  <span class="token number">43182754</span>
子容器创建的UserService  <span class="token number">49229074</span>
子容器创建的UserService处理完毕
UserService服务被释放  <span class="token number">49229074</span>
接口处理完毕
UserService服务被释放  <span class="token number">43182754</span>
    
<span class="token comment">// 第二次请求结束    </span>
当前创建的UserService  <span class="token number">28952583</span>
当前创建的UserService2  <span class="token number">28952583</span>
子容器创建的UserService  <span class="token number">51571199</span>
子容器创建的UserService处理完毕
UserService服务被释放  <span class="token number">51571199</span>
接口处理完毕
UserService服务被释放  <span class="token number">28952583</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过结果可以得出结论，范围生命周期对象的释放在这次请求结束的时候释放，并且一次请求内只产生一次实例，多次请求产生多次实例。</p><h3 id="单例生命周期" tabindex="-1"><a class="header-anchor" href="#单例生命周期"><span>单例生命周期</span></a></h3><p>现在我们将刚才的服务注册为范围生命周期</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">,</span> UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行查看对象释放的时机，输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 第一次接口请求结束</span>
当前创建的UserService  <span class="token number">26224738</span>
当前创建的UserService2  <span class="token number">26224738</span>
子容器创建的UserService  <span class="token number">26224738</span>
子容器创建的UserService处理完毕

<span class="token comment">// 第二次</span>
接口处理完毕
当前创建的UserService  <span class="token number">26224738</span>
当前创建的UserService2  <span class="token number">26224738</span>
子容器创建的UserService  <span class="token number">26224738</span>
子容器创建的UserService处理完毕
接口处理完毕

<span class="token comment">// 当Ctrl+C关闭程序</span>
info<span class="token punctuation">:</span> Microsoft<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>Lifetime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      Application <span class="token keyword">is</span> <span class="token class-name">shutting</span> down<span class="token range operator">..</span><span class="token punctuation">.</span>
UserService服务被释放  <span class="token number">13588007</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过结果可以得出结论，单例生命周期对象的释放在程序停止运行的时候释放，并且多次请求只产生一次相同的实例。</p><p>当服务是我们自己创建的然后再次测试</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>只有单例模式下支持该方式，可能故意限制的</p></blockquote><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 第一次请求</span>
当前创建的UserService  <span class="token number">62006733</span>
当前创建的UserService2  <span class="token number">62006733</span>
子容器创建的UserService  <span class="token number">62006733</span>
子容器创建的UserService处理完毕
接口处理完毕

<span class="token comment">// 第二次请求</span>
当前创建的UserService  <span class="token number">62006733</span>
当前创建的UserService2  <span class="token number">62006733</span>
子容器创建的UserService  <span class="token number">62006733</span>
子容器创建的UserService处理完毕
接口处理完毕

<span class="token comment">//关闭程序</span>
info<span class="token punctuation">:</span> Microsoft<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>Lifetime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      Application <span class="token keyword">is</span> <span class="token class-name">shutting</span> down<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过结果得出结论，我们自己创建的实例，并不通过容器管理，也就是说不会自己释放。</p>`,39),c=[p];function i(o,l){return s(),a("div",null,c)}const d=n(t,[["render",i],["__file","shengmingzhoujiceshi.html.vue"]]),v=JSON.parse('{"path":"/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html","title":"生命周期测试","lang":"zh-CN","frontmatter":{"title":"生命周期测试","lang":"zh-CN","date":"2022-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shengmingzhoujiceshi","slug":"odso5f","docsId":"51579914","description":"介绍 依赖注入只负责由其创建的对象实例 容器或者子容器释放的时候，会释放由其创建的对象实例。 推荐使用容器来来管理我们的对象的创建和释放。 操作 为了演示，我们创建一个UserService，并让该Service继承IDisposable 在控制器中我们通过FromServices去注入IUserService 瞬时生命周期 现在我们将刚才的服务注册为...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"生命周期测试"}],["meta",{"property":"og:description","content":"介绍 依赖注入只负责由其创建的对象实例 容器或者子容器释放的时候，会释放由其创建的对象实例。 推荐使用容器来来管理我们的对象的创建和释放。 操作 为了演示，我们创建一个UserService，并让该Service继承IDisposable 在控制器中我们通过FromServices去注入IUserService 瞬时生命周期 现在我们将刚才的服务注册为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"瞬时生命周期","slug":"瞬时生命周期","link":"#瞬时生命周期","children":[]},{"level":3,"title":"范围生命周期","slug":"范围生命周期","link":"#范围生命周期","children":[]},{"level":3,"title":"单例生命周期","slug":"单例生命周期","link":"#单例生命周期","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1309},"filePathRelative":"dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.md","localizedDate":"2022年10月18日","excerpt":"<h2>介绍</h2>\\n<ul>\\n<li>依赖注入只负责由其创建的对象实例</li>\\n<li>容器或者子容器释放的时候，会释放由其创建的对象实例。</li>\\n</ul>\\n<p>推荐使用容器来来管理我们的对象的创建和释放。</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>--</strong></th>\\n<th><strong>---</strong></th>\\n<th><strong>---</strong></th>\\n<th><strong>---</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Singleton</td>\\n<td>单例</td>\\n<td>服务容器首次请求会创建，后续都使用同一实例</td>\\n<td>AddSingleton</td>\\n</tr>\\n<tr>\\n<td>Scoped</td>\\n<td>特定范围</td>\\n<td>在一个请求(连接)时被创建一次实例，生命周期横贯整次请求</td>\\n<td>AddScoped</td>\\n</tr>\\n<tr>\\n<td>Transient</td>\\n<td>瞬时</td>\\n<td>服务容器每次请求，都会创建一个实例，适合轻量级、无状态服务</td>\\n<td>AddTransient</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{d as comp,v as data};
