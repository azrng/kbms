import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,f as e,d as u}from"./app-D8HBJYTp.js";const l={},i=u(`<h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h2><h3 id="前端连接" tabindex="-1"><a class="header-anchor" href="#前端连接"><span>前端连接</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">signalR<span class="token punctuation">.</span>HubConnectionBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/chatHub&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">configureLogging</span><span class="token punctuation">(</span>signalR<span class="token punctuation">.</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">)</span><span class="token comment">//配置日志，可选</span>
                <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//自动重新连接重试4次(0、2、10、30s)，默认不会自动重新连接</span>
                <span class="token punctuation">.</span><span class="token function">withAutomaticReconnect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//自定义重新连接尝试次数(毫秒)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;我连接成功了&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出错&quot;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">onreconnecting</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//本来连接然后丢失连接触发</span>
        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>state <span class="token operator">==</span><span class="token operator">=</span> signalR<span class="token punctuation">.</span>HubConnectionState<span class="token punctuation">.</span>Reconnecting<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接已断开&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 connection<span class="token punctuation">.</span><span class="token function">onreconnected</span><span class="token punctuation">(</span>connectionId <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token doc-comment comment">////本来连接然后丢失连接然后重新连接触发</span>
        console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>state <span class="token operator">==</span><span class="token operator">=</span> signalR<span class="token punctuation">.</span>HubConnectionState<span class="token punctuation">.</span>Connected<span class="token punctuation">)</span><span class="token punctuation">;</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接又成功了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//手动重新连接</span>
<span class="token keyword">async</span> <span class="token return-type class-name">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SignalR Connected.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//手动连接</span>
connection<span class="token punctuation">.</span><span class="token function">onclose</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后端需要配置跨域连接" tabindex="-1"><a class="header-anchor" href="#后端需要配置跨域连接"><span>后端需要配置跨域连接</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> services<span class="token punctuation">.</span><span class="token function">AddCors</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                options<span class="token punctuation">.</span><span class="token function">AddDefaultPolicy</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    builder<span class="token punctuation">.</span><span class="token function">SetIsOriginAllowed</span><span class="token punctuation">(</span>str <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">AllowAnyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">AllowCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">AllowAnyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token function">AddSignalR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJsonProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//configure方法配置</span>
endpoints<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">MapHub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotificationsHub<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/chathub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调用" tabindex="-1"><a class="header-anchor" href="#调用"><span>调用</span></a></h2><h3 id="前端调用后端" tabindex="-1"><a class="header-anchor" href="#前端调用后端"><span>前端调用后端</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> connection<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&quot;GetTotalLength&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetTotalLength</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> user<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span>Length <span class="token operator">+</span> message<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后端调用前端" tabindex="-1"><a class="header-anchor" href="#后端调用前端"><span>后端调用前端</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>connection<span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveMessage&quot;</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>user<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> msg <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">&amp;</span><span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token string">&quot;&amp;amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">/</span>g<span class="token punctuation">,</span> <span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> encodedMsg <span class="token operator">=</span> user <span class="token operator">+</span> <span class="token string">&quot; says &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> encodedMsg<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;messagesList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> HubContext<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>connIds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveMessage&quot;</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,15),k={href:"https://docs.microsoft.com/zh-cn/aspnet/core/signalr/api-design?view=aspnetcore-3.1",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("API设计注意事项："),n("a",k,[s("https://docs.microsoft.com/zh-cn/aspnet/core/signalr/api-design?view=aspnetcore-3.1"),e(a)])])])}const h=t(l,[["render",r],["__file","qianhouduanfenli.html.vue"]]),b=JSON.parse(`{"path":"/dotnet/signalr/qianhouduanfenli.html","title":"前后端分离","lang":"zh-CN","frontmatter":{"title":"前后端分离","lang":"zh-CN","date":"2023-07-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"qianhouduanfenli","slug":"so0083","docsId":"32030129","description":"连接 前端连接 后端需要配置跨域连接 调用 前端调用后端 后端写法 后端调用前端 后端写法 资料 API设计注意事项：https://docs.microsoft.com/zh-cn/aspnet/core/signalr/api-design?view=aspnetcore-3.1","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/signalr/qianhouduanfenli.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"前后端分离"}],["meta",{"property":"og:description","content":"连接 前端连接 后端需要配置跨域连接 调用 前端调用后端 后端写法 后端调用前端 后端写法 资料 API设计注意事项：https://docs.microsoft.com/zh-cn/aspnet/core/signalr/api-design?view=aspnetcore-3.1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T15:51:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T15:51:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前后端分离\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T15:51:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"连接","slug":"连接","link":"#连接","children":[{"level":3,"title":"前端连接","slug":"前端连接","link":"#前端连接","children":[]},{"level":3,"title":"后端需要配置跨域连接","slug":"后端需要配置跨域连接","link":"#后端需要配置跨域连接","children":[]}]},{"level":2,"title":"调用","slug":"调用","link":"#调用","children":[{"level":3,"title":"前端调用后端","slug":"前端调用后端","link":"#前端调用后端","children":[]},{"level":3,"title":"后端调用前端","slug":"后端调用前端","link":"#后端调用前端","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697989900000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.14,"words":343},"filePathRelative":"dotnet/signalr/qianhouduanfenli.md","localizedDate":"2023年7月26日","excerpt":"<h2>连接</h2>\\n<h3>前端连接</h3>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> connection <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">signalR<span class=\\"token punctuation\\">.</span>HubConnectionBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withUrl</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"http://localhost:5000/chatHub\\"</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">configureLogging</span><span class=\\"token punctuation\\">(</span>signalR<span class=\\"token punctuation\\">.</span>LogLevel<span class=\\"token punctuation\\">.</span>Information<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//配置日志，可选</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withAutomaticReconnect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//自动重新连接重试4次(0、2、10、30s)，默认不会自动重新连接</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">withAutomaticReconnect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10000</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//自定义重新连接尝试次数(毫秒)</span>\\n                <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>function <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>'我连接成功了'<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">function</span> <span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"出错\\"</span> <span class=\\"token operator\\">+</span> err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">onreconnecting</span><span class=\\"token punctuation\\">(</span>error <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">//本来连接然后丢失连接触发</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span>connection<span class=\\"token punctuation\\">.</span>state <span class=\\"token operator\\">==</span><span class=\\"token operator\\">=</span> signalR<span class=\\"token punctuation\\">.</span>HubConnectionState<span class=\\"token punctuation\\">.</span>Reconnecting<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"连接已断开\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">onreconnected</span><span class=\\"token punctuation\\">(</span>connectionId <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token doc-comment comment\\">////本来连接然后丢失连接然后重新连接触发</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">assert</span><span class=\\"token punctuation\\">(</span>connection<span class=\\"token punctuation\\">.</span>state <span class=\\"token operator\\">==</span><span class=\\"token operator\\">=</span> signalR<span class=\\"token punctuation\\">.</span>HubConnectionState<span class=\\"token punctuation\\">.</span>Connected<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"连接又成功了\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//手动重新连接</span>\\n<span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">function</span> <span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">await</span> connection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"SignalR Connected.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">err</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span>start<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//手动连接</span>\\nconnection<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">onclose</span><span class=\\"token punctuation\\">(</span>start<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{h as comp,b as data};
