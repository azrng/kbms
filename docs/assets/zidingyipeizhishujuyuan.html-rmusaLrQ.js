import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const e={},p=t(`<blockquote><p>本文为学习笔记</p></blockquote><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>自定义数据源来扩展我们的配置框架，需要实现 IConfigurationProvider 接口。在实现过程中，需要重写 Load() 方法从数据源加载配置信息，并将其转换为键值对集合。另外，还可以根据需要实现其他方法，如 Set(), TryGet(), 和 GetChildKeys() 等。 步骤：</p><ul><li>实现IConfigurationSource</li><li>实现IConfigurationProvider</li><li>实现AddXXX扩展方法</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>新建一个MyConfigurationSource继承与我们的IConfigurationSource</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigurationSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IConfigurationSource</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IConfigurationProvider</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfigurationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：这点是故意定义为internal，不直接暴露该类而去暴露扩展方法</p></blockquote><p>实现IConfigurationProvider</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigurationProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ConfigurationProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//用于定时刷新配置的更新</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Timer</span> _timer<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">MyConfigurationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> Timer_Elapsed<span class="token punctuation">;</span>
        _timer<span class="token punctuation">.</span>Interval <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
        _timer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Timer_Elapsed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> ev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Load</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//加载数据</span>
        <span class="token function">Load</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> reload<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//配置的值</span>
        Data<span class="token punctuation">[</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Data<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//可以也可以从其他地方获取配置，比如数据库等</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>reload<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过继承自 ConfigurationProvider 并实现 Load() 方法，我们可以轻松地自定义配置系统的行为，并从任意数据源中加载配置信息</p></blockquote><p>定义暴露出来的扩展方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfigurationBuilderExtensions</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IConfigurationBuilder</span> <span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="控制台使用" tabindex="-1"><a class="header-anchor" href="#控制台使用"><span>控制台使用</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Configuration&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Configuration.Abstractions&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用上述配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将MyConfigurationSource修改为internal，而去访问扩展方法</span>
<span class="token comment">//builder.Add(new MyConfigurationSource());</span>
<span class="token comment">//使用扩展方法</span>
builder<span class="token punctuation">.</span><span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> configurationRoot <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;lastTime:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//监控变更</span>
ChangeToken<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> configurationRoot<span class="token punctuation">.</span><span class="token function">GetReloadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;变更后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;lastTime:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">configurationRoot<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">33</span>
Name<span class="token punctuation">:</span>zhangsan
变更后
lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">36</span>
Name<span class="token punctuation">:</span>zhangsan
变更后
lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">40</span>
Name<span class="token punctuation">:</span>zhangsan
变更后
lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">42</span>
Name<span class="token punctuation">:</span>zhangsan
变更后
lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">01</span><span class="token punctuation">:</span><span class="token number">45</span>
Name<span class="token punctuation">:</span>zhangsan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webapi使用" tabindex="-1"><a class="header-anchor" href="#webapi使用"><span>WebAPI使用</span></a></h3><p>修改CreateHostBuilder方法为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//config.Add(new MyConfigurationSource());</span>
        config<span class="token punctuation">.</span><span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在.Net高版本中使用方法是</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">AddMyConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制器中注入IConfiguration</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IConfiguration</span> _configuration<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;lastTime:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_configuration<span class="token punctuation">[</span><span class="token string">&quot;lastTime&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_configuration<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span> </span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>lastTime<span class="token punctuation">:</span><span class="token number">2021</span><span class="token operator">/</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">08</span><span class="token punctuation">:</span><span class="token number">08</span>
Name<span class="token punctuation">:</span>zhangsan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>极客时间教程</p>`,33),o=[p];function i(c,l){return s(),a("div",null,o)}const k=n(e,[["render",i],["__file","zidingyipeizhishujuyuan.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyipeizhishujuyuan.html","title":"自定义配置数据源","lang":"zh-CN","frontmatter":{"title":"自定义配置数据源","lang":"zh-CN","date":"2023-09-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"zidingyipeizhishujuyuan","slug":"ewhdus","docsId":"51651102","description":"本文为学习笔记 需求 自定义数据源来扩展我们的配置框架，需要实现 IConfigurationProvider 接口。在实现过程中，需要重写 Load() 方法从数据源加载配置信息，并将其转换为键值对集合。另外，还可以根据需要实现其他方法，如 Set(), TryGet(), 和 GetChildKeys() 等。 步骤： 实现IConfigurati...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyipeizhishujuyuan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"自定义配置数据源"}],["meta",{"property":"og:description","content":"本文为学习笔记 需求 自定义数据源来扩展我们的配置框架，需要实现 IConfigurationProvider 接口。在实现过程中，需要重写 Load() 方法从数据源加载配置信息，并将其转换为键值对集合。另外，还可以根据需要实现其他方法，如 Set(), TryGet(), 和 GetChildKeys() 等。 步骤： 实现IConfigurati..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义配置数据源\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"控制台使用","slug":"控制台使用","link":"#控制台使用","children":[]},{"level":3,"title":"WebAPI使用","slug":"webapi使用","link":"#webapi使用","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.99,"words":598},"filePathRelative":"dotnet/base/peizhikuangjia/zidingyipeizhiyuan/zidingyipeizhishujuyuan.md","localizedDate":"2023年9月25日","excerpt":"<blockquote>\\n<p>本文为学习笔记</p>\\n</blockquote>\\n<h2>需求</h2>\\n<p>自定义数据源来扩展我们的配置框架，需要实现 IConfigurationProvider 接口。在实现过程中，需要重写 Load() 方法从数据源加载配置信息，并将其转换为键值对集合。另外，还可以根据需要实现其他方法，如 Set(), TryGet(), 和 GetChildKeys() 等。\\n步骤：</p>\\n<ul>\\n<li>实现IConfigurationSource</li>\\n<li>实现IConfigurationProvider</li>\\n<li>实现AddXXX扩展方法</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
