import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<blockquote><p>检测当前语言版本：#error version</p></blockquote><h2 id="c-6中新增的功能" tabindex="-1"><a class="header-anchor" href="#c-6中新增的功能"><span>C## 6中新增的功能</span></a></h2><h3 id="_1-get-只读属性" tabindex="-1"><a class="header-anchor" href="#_1-get-只读属性"><span>1.get 只读属性</span></a></h3><p>简洁的语法来创建不可变类型，仅有get访问器：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然很多时候，我们使用的是私有化来设置set。 然后通过构造函数来赋值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span><span class="token punctuation">{</span>   
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span>       
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;Cannot be blank&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    FirstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    
    LastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-get-属性初始化表达式" tabindex="-1"><a class="header-anchor" href="#_2-get-属性初始化表达式"><span>2.get 属性初始化表达式</span></a></h3><p>在属性声明中声明自动属性的初始值，</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">ICollection<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> Grades <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明处就可以直接被初始化。</p><h3 id="_3-expression-bodied-函数成员" tabindex="-1"><a class="header-anchor" href="#_3-expression-bodied-函数成员"><span>3.Expression-bodied 函数成员</span></a></h3><p>这适用于方法和只读属性。 例如，重写 ToString() 通常是理想之选：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">LastName</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">FirstName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以将此语法用于只读属性：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FullName <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">FirstName</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">LastName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-using-静态命名空间" tabindex="-1"><a class="header-anchor" href="#_4-using-静态命名空间"><span>4.using 静态命名空间</span></a></h3><p>using static 增强功能可用于导入单个类的静态方法。 指定要使用的类： using static System.Math; 在 LINQ 查询中会经常看到这种情况。 可以通过导入 Enumerable 或 Queryable 来导入 LINQ 模式。</p><h3 id="_5-null-条件运算符" tabindex="-1"><a class="header-anchor" href="#_5-null-条件运算符"><span>5.Null 条件运算符</span></a></h3><p>Null 条件运算符使 null 检查更轻松、更流畅 。 将成员访问 . 替换为 ?.： var first = person?.FirstName; 如果person为空，返回的值就是null，是string的默认值，如果FirstName是int类型，那返回的就是int的默认值0。</p><h3 id="_6-字符串内插" tabindex="-1"><a class="header-anchor" href="#_6-字符串内插"><span>6.$ 字符串内插</span></a></h3><p>新的字符串内插功能可以在字符串中嵌入表达式。 使用 $ 作为字符串的开头，并使用 { 和 } 之间的表达式代替序号：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public string GetGradePointPercentage() =&gt;   $&quot;Name: {LastName}, {FirstName}. G.P.A: {Grades.Average():F2}&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上一行代码将 Grades.Average() 的值格式设置为具有两位小数的浮点数。 如果同时有<code>$</code>和<code>@</code>，<code>$</code>必须在<code>@</code>运算符前面。</p><h3 id="_7-when-异常筛选器" tabindex="-1"><a class="header-anchor" href="#_7-when-异常筛选器"><span>7.when 异常筛选器</span></a></h3><p>“异常筛选器”是确定何时应该应用给定的catch子句的子句 。如果用于异常筛选器的表达式计算结果为true，则catch子句将对异常执行正常处理。 如果表达式计算结果为false，则将跳过catch子句。一种用途是检查有关异常的信息，以确定catch子句是否可以处理该异常：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">MakeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
    <span class="token class-name">WebRequestHandler</span> webRequestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    webRequestHandler<span class="token punctuation">.</span>AllowAutoRedirect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>webRequestHandler<span class="token punctuation">)</span><span class="token punctuation">)</span>    
    <span class="token punctuation">{</span>        
        <span class="token class-name"><span class="token keyword">var</span></span> stringTask <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://docs.microsoft.com/en-us/dotnet/about/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token keyword">try</span>        
        <span class="token punctuation">{</span>            
            <span class="token class-name"><span class="token keyword">var</span></span> responseText <span class="token operator">=</span> <span class="token keyword">await</span> stringTask<span class="token punctuation">;</span>            
            <span class="token keyword">return</span> responseText<span class="token punctuation">;</span>        
        <span class="token punctuation">}</span>        
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpRequestException</span> e<span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;301&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       
        <span class="token punctuation">{</span>            
            <span class="token keyword">return</span> <span class="token string">&quot;Site Moved&quot;</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-nameof-表达式" tabindex="-1"><a class="header-anchor" href="#_8-nameof-表达式"><span>8.nameof 表达式</span></a></h3><p>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法，说白了就是更好的重构：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span>    
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;Cannot be blank&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>lastName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-catch-和-finally-块中的-await" tabindex="-1"><a class="header-anchor" href="#_9-catch-和-finally-块中的-await"><span>9.Catch 和 Finally 块中的 Await</span></a></h3><p>现在可以在 catch 或 finally 表达式中使用 await。 这通常用于日志记录方案：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">MakeRequestAndLogFailures</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>    
    <span class="token keyword">await</span> <span class="token function">logMethodEntrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token class-name"><span class="token keyword">var</span></span> streamTask <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://localHost:10000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>       
        <span class="token class-name"><span class="token keyword">var</span></span> responseText <span class="token operator">=</span> <span class="token keyword">await</span> streamTask<span class="token punctuation">;</span>        
        <span class="token keyword">return</span> responseText<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpRequestException</span> e<span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;301&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   
    <span class="token punctuation">{</span>        
        <span class="token keyword">await</span> <span class="token function">logError</span><span class="token punctuation">(</span><span class="token string">&quot;Recovered from redirect&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token keyword">return</span> <span class="token string">&quot;Site Moved&quot;</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>   
    <span class="token keyword">finally</span>    
    <span class="token punctuation">{</span>        
        <span class="token keyword">await</span> <span class="token function">logMethodExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        client<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-索引器初始化关联集合" tabindex="-1"><a class="header-anchor" href="#_10-索引器初始化关联集合"><span>10.索引器初始化关联集合</span></a></h3><p>可以将集合初始值设定项与 <code>Dictionary&lt;TKey,TValue&gt;</code> 集合和其他类型一起使用，在这种情况下，可访问的 Add 方法接受多个参数。 新语法支持使用索引分配到集合中：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> webErrors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>    
    <span class="token punctuation">[</span><span class="token number">404</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Page not Found&quot;</span><span class="token punctuation">,</span>    
    <span class="token punctuation">[</span><span class="token number">302</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Page moved, but left a forwarding address.&quot;</span><span class="token punctuation">,</span>   
    <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;The web server can&#39;t come out to play today.&quot;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-7-x-中新增的功能" tabindex="-1"><a class="header-anchor" href="#c-7-x-中新增的功能"><span>C## 7.x 中新增的功能</span></a></h2><h3 id="_1-out-变量" tabindex="-1"><a class="header-anchor" href="#_1-out-变量"><span>1.out 变量</span></a></h3><p>可以在方法调用的参数列表中声明 out 变量，而不是编写单独的声明语句：：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>   
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>   
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Could not parse input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为清晰明了，可能需指定 out 变量的类型，如上所示。 但是，该语言支持使用隐式类型的局部变量：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> answer<span class="token punctuation">)</span><span class="token punctuation">)</span>    
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>   
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Could not parse input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-tuple-元组" tabindex="-1"><a class="header-anchor" href="#_2-tuple-元组"><span>2.Tuple 元组</span></a></h3><p>低于 C## 7.0 的版本中也提供元组，但它们效率低下且不具有语言支持。这意味着元组元素只能作为 Item1 和 Item2 等引用。 可以通过为每个成员赋值来创建元组，并可选择为元组的每个成员提供语义名称：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> Alpha<span class="token punctuation">,</span> stringBeta<span class="token punctuation">)</span> namedLetters <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">namedLetters<span class="token punctuation">.</span>Alpha</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">namedLetters<span class="token punctuation">.</span>Beta</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行元组赋值时，还可以指定赋值右侧的字段的名称：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> alphabetStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token named-parameter punctuation">Alpha</span><span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">Beta</span><span class="token punctuation">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">alphabetStart<span class="token punctuation">.</span>Alpha</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">alphabetStart<span class="token punctuation">.</span>Beta</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候，可以直接点出来：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>alphabetStart<span class="token punctuation">.</span>AlphaalphabetStart<span class="token punctuation">.</span>Beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-弃元" tabindex="-1"><a class="header-anchor" href="#_3-弃元"><span>3.弃元</span></a></h3><p>C## 增添了对弃元的支持。 弃元是一个名为 _（下划线字符）的只写变量，可向单个变量赋予要放弃的所有值。 弃元类似于未赋值的变量；不可在代码中使用弃元（赋值语句除外）：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">{</span>    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
    <span class="token punctuation">{</span>       
        <span class="token keyword">var</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> pop1<span class="token punctuation">,</span> _<span class="token punctuation">,</span> pop2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">QueryCityDataForYears</span><span class="token punctuation">(</span><span class="token string">&quot;New York City&quot;</span><span class="token punctuation">,</span><span class="token number">1960</span><span class="token punctuation">,</span> <span class="token number">2010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Population change, 1960 to 2010: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">pop2 <span class="token operator">-</span> pop1</span><span class="token format-string"><span class="token punctuation">:</span>N0</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span><span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span> <span class="token function">QueryCityDataForYears</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> intyear1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> year2<span class="token punctuation">)</span>    
    <span class="token punctuation">{</span>       
        <span class="token class-name"><span class="token keyword">int</span></span> population1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> population2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        
        doublearea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&quot;New York City&quot;</span><span class="token punctuation">)</span>       
        <span class="token punctuation">{</span>            
            area <span class="token operator">=</span> <span class="token number">468.48</span><span class="token punctuation">;</span>            
            <span class="token keyword">if</span><span class="token punctuation">(</span>year1 <span class="token operator">==</span> <span class="token number">1960</span><span class="token punctuation">)</span>            
            <span class="token punctuation">{</span>                
                population1 <span class="token operator">=</span> <span class="token number">7781984</span><span class="token punctuation">;</span>           
            <span class="token punctuation">}</span>            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>year2 <span class="token operator">==</span> <span class="token number">2010</span><span class="token punctuation">)</span>            
            <span class="token punctuation">{</span>                
                population2 <span class="token operator">=</span> <span class="token number">8175133</span><span class="token punctuation">;</span>           
            <span class="token punctuation">}</span>            
            <span class="token keyword">return</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> area<span class="token punctuation">,</span> year1<span class="token punctuation">,</span> population1<span class="token punctuation">,</span> year2<span class="token punctuation">,</span> population2<span class="token punctuation">)</span><span class="token punctuation">;</span>        
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="_4-is-模式匹配" tabindex="-1"><a class="header-anchor" href="#_4-is-模式匹配"><span>4.is 模式匹配</span></a></h3><p>模式匹配支持 is 表达式和 switch 表达式。 每个表达式都允许检查对象及其属性以确定该对象是否满足所寻求的模式。 使用 when 关键字来指定模式的其他规则：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">SumPositiveNumbers</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> sequence<span class="token punctuation">)</span>
<span class="token punctuation">{</span>    
    <span class="token class-name"><span class="token keyword">int</span></span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>vari <span class="token keyword">in</span> sequence<span class="token punctuation">)</span>    
    <span class="token punctuation">{</span>       
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>        
        <span class="token punctuation">{</span>            
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>               
                <span class="token keyword">break</span><span class="token punctuation">;</span>            
                <span class="token class-name">caseIEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> childSequence<span class="token punctuation">:</span>           
                <span class="token punctuation">{</span>                
                    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token class-name">item</span> inchildSequence<span class="token punctuation">)</span>                    
                        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> item <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>               
                    <span class="token keyword">break</span><span class="token punctuation">;</span>            
                <span class="token punctuation">}</span>            
            <span class="token keyword">case</span> <span class="token class-name"><span class="token keyword">int</span></span> n <span class="token keyword">when</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                
                sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>                
                <span class="token keyword">break</span><span class="token punctuation">;</span>            
            <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">:</span>                
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NullReferenceException</span><span class="token punctuation">(</span><span class="token string">&quot;Null found in sequence&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
            <span class="token keyword">default</span><span class="token punctuation">:</span>                
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Unrecognized type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>    
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>case 0: 是常见的常量模式。 case <code>IEnumerable&lt;int&gt;</code> childSequence: 是一种类型模式。 case int n when n &gt; 0: 是具有附加 when 条件的类型模式。 case null: 是 null 模式。 default: 是常见的默认事例。</p><h3 id="_5-本地函数-内部" tabindex="-1"><a class="header-anchor" href="#_5-本地函数-内部"><span>5.本地函数（内部）</span></a></h3><p>本地函数使你能够在另一个方法的上下文内声明方法。 本地函数使得类的阅读者更容易看到本地方法仅从声明它的上下文中调用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> <span class="token function">AlphabetSubset3</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> start<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">char</span></span> end<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> start <span class="token operator">&gt;</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;start must be a letter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> end <span class="token operator">&gt;</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;end must be a letter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> start<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> must be greater than </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">alphabetSubsetImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> <span class="token function">alphabetSubsetImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token operator">=</span> start<span class="token punctuation">;</span> c <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上边的alphabetSubsetImplementation方法，是在内部定义的。 同样可以使用异步：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">PerformLongRunningWork</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> address<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;An address is required&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;The index must be non-negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;You must supply a name&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">longRunningWorkImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">longRunningWorkImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> interimResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">FirstWork</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
                varsecondResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">SecondStep</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;The results are </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">interimResult</span><span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">secondResult</span><span class="token punctuation">}</span></span><span class="token string">. Enjoy.&quot;</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也支持某些使用lambda表达式来完成。</p><h3 id="_6-数字文本语法改进" tabindex="-1"><a class="header-anchor" href="#_6-数字文本语法改进"><span>6. 数字文本语法改进</span></a></h3><p>C## 7.0 包括两项新功能，可用于以最可读的方式写入数字来用于预期用途：二进制文本和数字分隔符 。在创建位掩码时，或每当数字的二进制表示形式使代码最具可读性时，以二进制形式写入该数字：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> Sixteen <span class="token operator">=</span> <span class="token number">0b0001_0000</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> ThirtyTwo <span class="token operator">=</span> <span class="token number">0b0010_0000</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> SixtyFour <span class="token operator">=</span> <span class="token number">0b0100_0000</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> OneHundredTwentyEight <span class="token operator">=</span> <span class="token number">0b1000_0000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量开头的 0b 表示该数字以二进制数形式写入。 二进制数可能会很长，因此通过引入 _ 作为数字分隔符通常更易于查看位模式，如上面二进制常量所示。 数字分隔符可以出现在常量的任何位置。 对于十进制数字，通常将其用作千位分隔符：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">long</span></span> BillionsAndBillions <span class="token operator">=</span> <span class="token number">100_000_000_000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="c-8-0中新增的功能" tabindex="-1"><a class="header-anchor" href="#c-8-0中新增的功能"><span>C## 8.0中新增的功能</span></a></h2><p>“.NET Core 3.x”和“.NET Standard 2.1”支持 C## 8.0；</p><h3 id="_1-readonly-成员" tabindex="-1"><a class="header-anchor" href="#_1-readonly-成员"><span>1. Readonly 成员</span></a></h3><p>可将 readonly 修饰符应用于结构的成员。 它指示该成员不会修改状态。 这比将 readonly 修饰符应用于 struct 声明更精细。 请考虑以下可变结构：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> Distance <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>X <span class="token operator">*</span> X <span class="token operator">+</span> Y <span class="token operator">*</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-默认接口方法" tabindex="-1"><a class="header-anchor" href="#_2-默认接口方法"><span>2. 默认接口方法</span></a></h3><p>现在可以将成员添加到接口，并为这些成员提供实现。 借助此语言功能，API 作者可以将方法添加到以后版本的接口中，而不会破坏与该接口当前实现的源或二进制文件兼容性。 现有的实现继承默认实现。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICustomer</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IOrder<span class="token punctuation">&gt;</span></span> PreviousOrders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name">DateTime</span> DateJoined <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> LastOrder <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> Reminders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-switch-表达式升级" tabindex="-1"><a class="header-anchor" href="#_3-switch-表达式升级"><span>3. Switch 表达式升级</span></a></h3><p>通常情况下，switch 语句在其每个 case 块中生成一个值。借助 Switch 表达式，可以使用更简洁的表达式语法。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">RGBColor</span> <span class="token function">FromRainbowClassic</span><span class="token punctuation">(</span><span class="token class-name">Rainbow</span> colorBand<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>colorBand<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                    caseRainbow<span class="token punctuation">.</span>Red<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Orange<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Yellow<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Green<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Blue<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Indigo<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    caseRainbow<span class="token punctuation">.</span>Violet<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;invalid enum value&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>colorBand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有几个语法改进： 变量位于 switch 关键字之前。 不同的顺序使得在视觉上可以很轻松地区分 switch 表达式和 switch 语句。 将 case 和 : 元素替换为 =&gt;。 它更简洁，更直观。 将 default 事例替换为 _ 弃元。 正文是表达式，不是语句。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">RGBColor</span> <span class="token function">FromRainbow</span><span class="token punctuation">(</span><span class="token class-name">Rainbow</span> colorBand<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> colorBand <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            Rainbow<span class="token punctuation">.</span>Red <span class="token operator">=&gt;</span> <span class="token function">newRGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Rainbow<span class="token punctuation">.</span>Orange <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Rainbow<span class="token punctuation">.</span>Yellow <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Rainbow<span class="token punctuation">.</span>Green <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Rainbow<span class="token punctuation">.</span>Blue <span class="token operator">=&gt;</span> <span class="token function">newRGBColor</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Rainbow<span class="token punctuation">.</span>Indigo <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Rainbow<span class="token punctuation">.</span>Violet <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RGBColor</span><span class="token punctuation">(</span><span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            _ <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">message</span><span class="token punctuation">:</span> <span class="token string">&quot;invalid enum value&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">paramName</span><span class="token punctuation">:</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>colorBand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-属性模式" tabindex="-1"><a class="header-anchor" href="#_4-属性模式"><span>4. 属性模式</span></a></h3><p>借助属性模式，可以匹配所检查的对象的属性。 请看一个电子商务网站的示例，该网站必须根据买家地址计算销售税。 这种计算不是 Address 类的核心职责。 它会随时间变化，可能比地址格式的更改更频繁。 销售税的金额取决于地址的 State 属性。 下面的方法使用属性模式从地址和价格计算销售税：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">ComputeSalesTax</span><span class="token punctuation">(</span><span class="token class-name">Address</span> location<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> salePrice<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>State<span class="token punctuation">:</span> <span class="token string">&quot;WA&quot;</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> salePrice <span class="token operator">*</span> <span class="token number">0.06M</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>State<span class="token punctuation">:</span> <span class="token string">&quot;MN&quot;</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> salePrice <span class="token operator">*</span> <span class="token number">0.075M</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>State<span class="token punctuation">:</span> <span class="token string">&quot;MI&quot;</span><span class="token punctuation">}</span> <span class="token operator">=&gt;</span> salePrice <span class="token operator">*</span> <span class="token number">0.05M</span><span class="token punctuation">,</span> <span class="token comment">// other cases removed for brevity...</span>
            _ <span class="token operator">=&gt;</span> <span class="token number">0M</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 LINQ 查询中会经常看到这种情况。 可以通过导入 Enumerable 或 Queryable 来导入 LINQ 模式。</p><h3 id="_5-元组模式" tabindex="-1"><a class="header-anchor" href="#_5-元组模式"><span>5. 元组模式</span></a></h3><p>一些算法依赖于多个输入。 使用元组模式，可根据表示为元组的多个值进行切换。 以下代码显示了游戏“rock, paper, scissors（石头剪刀布）”的切换表达式：：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">RockPaperScissors</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> first<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> second<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token keyword">switch</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;paper&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;rock is covered by paper. Paper wins.&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scissors&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;rock breaks scissors. Rock wins.&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&quot;paper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;paper covers rock. Paper wins.&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&quot;paper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scissors&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;paper is cut by scissors. Scissors wins.&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&quot;scissors&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;scissors is broken by rock. Rock wins.&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&quot;scissors&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;paper&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;scissors cuts paper. Scissors wins.&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;tie&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果person为空，返回的值就是null，是string的默认值，如果FirstName是int类型，那返回的就是int的默认值0。</p><h3 id="_6-using-声明" tabindex="-1"><a class="header-anchor" href="#_6-using-声明"><span>6. using 声明</span></a></h3><p>using 声明是前面带 using 关键字的变量声明。 它指示编译器声明的变量应在封闭范围的末尾进行处理。 以下面编写文本文件的代码为例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">WriteLinesToFile</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token class-name">varfile</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>StreamWriter</span><span class="token punctuation">(</span><span class="token string">&quot;WriteLines2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Notice how we declare skippedLines after the using statement.</span>
            intskippedLines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token class-name">line</span> inlines<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;Second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    file<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    skippedLines<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token comment">// Notice how skippedLines is in scope here.</span>
            <span class="token keyword">return</span> skippedLines<span class="token punctuation">;</span> <span class="token comment">// file is disposed here}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的代码相当于下面使用经典 using 语句的代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">WriteLinesToFile</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// We must declare the variable outside of the using block</span>
            <span class="token comment">// so that it is in scope to be returned.</span>
            <span class="token class-name"><span class="token keyword">int</span></span> skippedLines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>StreamWriter</span><span class="token punctuation">(</span><span class="token string">&quot;WriteLines2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span>stringline <span class="token keyword">in</span> lines<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;Second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        file<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        skippedLines<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> skippedLines<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token comment">// file is disposed here}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-static-静态本地函数" tabindex="-1"><a class="header-anchor" href="#_7-static-静态本地函数"><span>7. Static 静态本地函数</span></a></h3><p>现在可以向本地函数添加 static 修饰符，以确保本地函数不会从封闭范围捕获（引用）任何变量。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
            <span class="token function">returnAdd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Add</span><span class="token punctuation">(</span>intleft<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> right<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-async-异步流" tabindex="-1"><a class="header-anchor" href="#_8-async-异步流"><span>8. async 异步流</span></a></h3><p>从 C## 8.0 开始，可以创建并以异步方式使用流。返回异步流的方法有三个属性： 它是用 async 修饰符声明的。 它将返回 <code>IAsyncEnumerable&lt;T&gt;</code>。 该方法包含用于在异步流中返回连续元素的 yield return 语句。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IAsyncEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">GenerateSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">yield</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">await</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> number <span class="token keyword">in</span> <span class="token function">GenerateSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步可释放： 从 C## 8.0 开始，语言支持实现 System.IAsyncDisposable 接口的异步可释放类型。可使用 await using 语句来处理异步可释放对象。</p><h3 id="_9-索引和范围" tabindex="-1"><a class="header-anchor" href="#_9-索引和范围"><span>9. 索引和范围</span></a></h3><p>范围指定范围的开始和末尾 。 包括此范围的开始，但不包括此范围的末尾，这表示此范围包含开始但不包含末尾 。 范围 [0..^0] 表示整个范围，就像 [0..sequence.Length] 表示整个范围。 以下代码创建了一个包含单词“quick”、“brown”和“fox”的子范围。 它包括 words[1] 到 words[3]。 元素 words[4] 不在该范围内。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> quickBrownFox <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token range operator">..</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> allWords <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token range operator">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">// contains &quot;The&quot; through &quot;dog&quot;.var firstPhrase = words[..4];</span>
<span class="token comment">// contains &quot;The&quot; through &quot;fox&quot;var lastPhrase = words[6..]; </span>
<span class="token comment">// contains &quot;the&quot;, &quot;lazy&quot; and &quot;dog&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-null-合并赋值" tabindex="-1"><a class="header-anchor" href="#_10-null-合并赋值"><span>10. null 合并赋值</span></a></h3><p>C## 8.0 引入了 null 合并赋值运算符 ??=。 仅当左操作数计算为 null 时，才能使用运算符 ??= 将其右操作数的值分配给左操作数。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
numbers <span class="token operator">??=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i <span class="token operator">??=</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i <span class="token operator">??=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 17 17Console.WriteLine(i);  // output: 17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-9-0中新增的功能" tabindex="-1"><a class="header-anchor" href="#c-9-0中新增的功能"><span>C## 9.0中新增的功能</span></a></h2><p>.NET5支持C#9.0.</p><h3 id="_1-记录类型" tabindex="-1"><a class="header-anchor" href="#_1-记录类型"><span>1. 记录类型</span></a></h3><p>C## 9.0 引入了记录类型，这是一种引用类型，它提供<strong>合成方法</strong>来提供值语义，从而实现相等性。 默认情况下，记录是不可变的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> first<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> last<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>FirstName<span class="token punctuation">,</span> LastName<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-init-仅限的资源库" tabindex="-1"><a class="header-anchor" href="#_2-init-仅限的资源库"><span>2. Init 仅限的资源库</span></a></h3><p>从 C## 9.0 开始，可为属性和索引器创建 init 访问器，而不是 set 访问器。 调用方可使用属性初始化表达式语法在创建表达式中设置这些值，但构造完成后，这些属性将变为只读。 仅限 init 的资源库提供了一个窗口用来更改状态。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">WeatherObservation</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> RecordedAt <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> TemperatureInCelsius <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> PressureInMillibars <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;At</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">RecordedAt</span><span class="token format-string"><span class="token punctuation">:</span>h:mm tt</span><span class="token punctuation">}</span></span><span class="token string"> on </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">RecordedAt</span><span class="token format-string"><span class="token punctuation">:</span>M/d/yyyy</span><span class="token punctuation">}</span></span><span class="token string">: &quot;</span></span> <span class="token operator">+</span>
        <span class="token interpolation-string"><span class="token string">$&quot;Temp = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">TemperatureInCelsius</span><span class="token punctuation">}</span></span><span class="token string">, with </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">PressureInMillibars</span><span class="token punctuation">}</span></span><span class="token string">pressure&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方可使用属性初始化表达式语法来设置值，同时仍保留不变性：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeatherObservation</span>
<span class="token punctuation">{</span>RecordedAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span> TemperatureInCelsius <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> PressureInMillibars <span class="token operator">=</span> <span class="token number">998.0m</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-顶级语句" tabindex="-1"><a class="header-anchor" href="#_3-顶级语句"><span>3. 顶级语句</span></a></h3><p>顶级语句从许多应用程序中删除了不必要的流程。只有一行代码执行所有操作。 借助顶级语句，可使用 using 语句和执行操作的一行替换所有样本：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要单行程序，可删除 using 指令，并使用完全限定的类型名称：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-模式匹配增强功能" tabindex="-1"><a class="header-anchor" href="#_4-模式匹配增强功能"><span>4. 模式匹配增强功能</span></a></h3><p>C## 9 包括新的模式匹配改进： 类型模式要求在变量是一种类型时匹配 带圆括号的模式强制或强调模式组合的优先级 联合 and 模式要求两个模式都匹配 析取 or 模式要求任一模式匹配 求反 not 模式要求模式不匹配 关系模式要求输入小于、大于、小于等于或大于等于给定常数。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsLetter</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token keyword">is</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token keyword">and</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span> <span class="token keyword">or</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token keyword">and</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsLetterOrSeparator</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c <span class="token keyword">is</span><span class="token punctuation">(</span><span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token keyword">and</span><span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span><span class="token punctuation">(</span><span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token keyword">and</span><span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span><span class="token char">&#39;.&#39;</span> <span class="token keyword">or</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-调试和完成功能" tabindex="-1"><a class="header-anchor" href="#_5-调试和完成功能"><span>5. 调试和完成功能</span></a></h3><p>在 C## 9.0 中，已知创建对象的类型时，可在 new 表达式中省略该类型。 最常见的用法是在字段声明中：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>WeatherObservation<span class="token punctuation">&gt;</span></span> _observations <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当需要创建新对象作为参数传递给方法时，也可使用目标类型 new。 请考虑使用以下签名的 ForecastFor() 方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">WeatherForecast</span> <span class="token function">ForecastFor</span><span class="token punctuation">(</span><span class="token class-name">DateTime</span> forecastDate<span class="token punctuation">,</span> <span class="token class-name">WeatherForecastOptions</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可按如下所示调用该方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> forecast <span class="token operator">=</span> station<span class="token punctuation">.</span><span class="token function">ForecastFor</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>`,133),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","yuyanbanbenjilu.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/yuyanbanbenjilu.html","title":"语言版本记录","lang":"zh-CN","frontmatter":{"title":"语言版本记录","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"yuyanbanbenjilu","slug":"fkhh91","docsId":"31694742","description":"检测当前语言版本：#error version C## 6中新增的功能 1.get 只读属性 简洁的语法来创建不可变类型，仅有get访问器： 当然很多时候，我们使用的是私有化来设置set。 然后通过构造函数来赋值： 2.get 属性初始化表达式 在属性声明中声明自动属性的初始值， 声明处就可以直接被初始化。 3.Expression-bodied 函数...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/yuyanbanbenjilu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"语言版本记录"}],["meta",{"property":"og:description","content":"检测当前语言版本：#error version C## 6中新增的功能 1.get 只读属性 简洁的语法来创建不可变类型，仅有get访问器： 当然很多时候，我们使用的是私有化来设置set。 然后通过构造函数来赋值： 2.get 属性初始化表达式 在属性声明中声明自动属性的初始值， 声明处就可以直接被初始化。 3.Expression-bodied 函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语言版本记录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"C## 6中新增的功能","slug":"c-6中新增的功能","link":"#c-6中新增的功能","children":[{"level":3,"title":"1.get 只读属性","slug":"_1-get-只读属性","link":"#_1-get-只读属性","children":[]},{"level":3,"title":"2.get 属性初始化表达式","slug":"_2-get-属性初始化表达式","link":"#_2-get-属性初始化表达式","children":[]},{"level":3,"title":"3.Expression-bodied 函数成员","slug":"_3-expression-bodied-函数成员","link":"#_3-expression-bodied-函数成员","children":[]},{"level":3,"title":"4.using 静态命名空间","slug":"_4-using-静态命名空间","link":"#_4-using-静态命名空间","children":[]},{"level":3,"title":"5.Null 条件运算符","slug":"_5-null-条件运算符","link":"#_5-null-条件运算符","children":[]},{"level":3,"title":"6.$ 字符串内插","slug":"_6-字符串内插","link":"#_6-字符串内插","children":[]},{"level":3,"title":"7.when 异常筛选器","slug":"_7-when-异常筛选器","link":"#_7-when-异常筛选器","children":[]},{"level":3,"title":"8.nameof 表达式","slug":"_8-nameof-表达式","link":"#_8-nameof-表达式","children":[]},{"level":3,"title":"9.Catch 和 Finally 块中的 Await","slug":"_9-catch-和-finally-块中的-await","link":"#_9-catch-和-finally-块中的-await","children":[]},{"level":3,"title":"10.索引器初始化关联集合","slug":"_10-索引器初始化关联集合","link":"#_10-索引器初始化关联集合","children":[]}]},{"level":2,"title":"C## 7.x 中新增的功能","slug":"c-7-x-中新增的功能","link":"#c-7-x-中新增的功能","children":[{"level":3,"title":"1.out 变量","slug":"_1-out-变量","link":"#_1-out-变量","children":[]},{"level":3,"title":"2.Tuple 元组","slug":"_2-tuple-元组","link":"#_2-tuple-元组","children":[]},{"level":3,"title":"3.弃元","slug":"_3-弃元","link":"#_3-弃元","children":[]},{"level":3,"title":"4.is 模式匹配","slug":"_4-is-模式匹配","link":"#_4-is-模式匹配","children":[]},{"level":3,"title":"5.本地函数（内部）","slug":"_5-本地函数-内部","link":"#_5-本地函数-内部","children":[]},{"level":3,"title":"6. 数字文本语法改进","slug":"_6-数字文本语法改进","link":"#_6-数字文本语法改进","children":[]}]},{"level":2,"title":"C## 8.0中新增的功能","slug":"c-8-0中新增的功能","link":"#c-8-0中新增的功能","children":[{"level":3,"title":"1. Readonly 成员","slug":"_1-readonly-成员","link":"#_1-readonly-成员","children":[]},{"level":3,"title":"2. 默认接口方法","slug":"_2-默认接口方法","link":"#_2-默认接口方法","children":[]},{"level":3,"title":"3. Switch 表达式升级","slug":"_3-switch-表达式升级","link":"#_3-switch-表达式升级","children":[]},{"level":3,"title":"4. 属性模式","slug":"_4-属性模式","link":"#_4-属性模式","children":[]},{"level":3,"title":"5. 元组模式","slug":"_5-元组模式","link":"#_5-元组模式","children":[]},{"level":3,"title":"6. using 声明","slug":"_6-using-声明","link":"#_6-using-声明","children":[]},{"level":3,"title":"7. Static 静态本地函数","slug":"_7-static-静态本地函数","link":"#_7-static-静态本地函数","children":[]},{"level":3,"title":"8. async 异步流","slug":"_8-async-异步流","link":"#_8-async-异步流","children":[]},{"level":3,"title":"9. 索引和范围","slug":"_9-索引和范围","link":"#_9-索引和范围","children":[]},{"level":3,"title":"10. null 合并赋值","slug":"_10-null-合并赋值","link":"#_10-null-合并赋值","children":[]}]},{"level":2,"title":"C## 9.0中新增的功能","slug":"c-9-0中新增的功能","link":"#c-9-0中新增的功能","children":[{"level":3,"title":"1. 记录类型","slug":"_1-记录类型","link":"#_1-记录类型","children":[]},{"level":3,"title":"2. Init 仅限的资源库","slug":"_2-init-仅限的资源库","link":"#_2-init-仅限的资源库","children":[]},{"level":3,"title":"3. 顶级语句","slug":"_3-顶级语句","link":"#_3-顶级语句","children":[]},{"level":3,"title":"4. 模式匹配增强功能","slug":"_4-模式匹配增强功能","link":"#_4-模式匹配增强功能","children":[]},{"level":3,"title":"5. 调试和完成功能","slug":"_5-调试和完成功能","link":"#_5-调试和完成功能","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":13.3,"words":3989},"filePathRelative":"dotnet/csharp/yuyanbanbenjilu.md","localizedDate":"2023年10月22日","excerpt":"<blockquote>\\n<p>检测当前语言版本：#error version</p>\\n</blockquote>\\n<h2>C## 6中新增的功能</h2>\\n<h3>1.get 只读属性</h3>\\n<p>简洁的语法来创建不可变类型，仅有get访问器：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> FirstName <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> LastName <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
