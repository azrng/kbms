import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,b as a}from"./app-Bw62I61B.js";const t="/kbms/cloud/image-20210715093411379.png",i="/kbms/cloud/image-20210715093724991.png",l={},r=a('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>k3s是经过CNCF认证的由Rancher公司开发维护的一个<strong>轻量级的 Kubernetes 发行版</strong>，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，<code>K3s 就是阉割版 K8s</code>，消耗资源极少。它主要用于<strong>边缘计算、物联网</strong>等场景。</p><p>官网文档：https://docs.k3s.io/zh/</p><p>中文网站：http://docs.rancher.cn/docs/k3s/quick-start/_index/</p><p>K3s 具有以下特点：</p><p>1）安装简单，占用资源少，只需要512M内存就可以运行起来； 2）apiserver 、schedule 等组件全部简化，并以进程的形式运行在节点上，把程序都打包为单个二进制文件，每个程序只需要占用100M内存； 3）使用基于<code>sqlite3</code>的轻量级存储后端作为默认存储机制。同时支持使用etcd3、MySQL 和PostgreSQL作为存储机制； 4）默认使用 <code>local-path-provisioner</code> 提供本地存储卷； 5）默认安装了<code>Helm controller</code> 和 <code>Traefik Ingress controller</code>； 6）所有 Kubernetes control-plane 组件的操作都封装在单个二进制文件和进程中，使 K3s 具有自动化和管理包括证书分发在内的复杂集群操作的能力。 7）减少外部依赖，操作系统只需要安装较新的内核（centos7.6就可以，不需要升级内核）以及支持cgroup即可，k3s安装包已经包含了containerd、Flannel、CoreDNS，非常方便地一键式安装，不需要额外安装Docker、Flannel等组件。</p><h2 id="k3s架构" tabindex="-1"><a class="header-anchor" href="#k3s架构"><span>K3s架构</span></a></h2><blockquote><p>内容来自：https://www.cnblogs.com/hujinzhong/p/15014487.html</p></blockquote><h3 id="单节点架构" tabindex="-1"><a class="header-anchor" href="#单节点架构"><span>单节点架构</span></a></h3><figure><img src="'+t+'" alt="image-20210715093411379" tabindex="0" loading="lazy"><figcaption>image-20210715093411379</figcaption></figure><p>1）k3s server节点是运行k3s server命令的机器（裸机或者虚拟机），而k3s Agent 节点是运行k3s agent命令的机器。</p><p>2）单点架构只有一个控制节点（在 K3s 里叫做server node，相当于 K8s 的 master node），而且K3s的数据存储使用 sqlite 并内置在了控制节点上</p><p>3）在这种配置中，每个 agent 节点都注册到同一个 server 节点。K3s 用户可以通过调用server节点上的K3s API来操作Kubernetes资源。</p><h3 id="高可用架构" tabindex="-1"><a class="header-anchor" href="#高可用架构"><span>高可用架构</span></a></h3><figure><img src="'+i+`" alt="image-20210715093724991" tabindex="0" loading="lazy"><figcaption>image-20210715093724991</figcaption></figure><p>虽然单节点 k3s 集群可以满足各种用例，但对于 Kubernetes control-plane 的正常运行至关重要的环境，可以在高可用配置中运行 K3s。一个高可用 K3s 集群由以下几个部分组成：</p><p>1）<strong>K3s Server 节点</strong>：两个或者更多的server节点将为 Kubernetes API 提供服务并运行其他 control-plane 服务</p><p>2）<strong>外部数据库</strong>：外部数据存储（与单节点 k3s 设置中使用的嵌入式 SQLite 数据存储相反）</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>yaml介绍：https://www.kubernetes.org.cn/1414.html</p><h3 id="redis-master-deployment-yaml" tabindex="-1"><a class="header-anchor" href="#redis-master-deployment-yaml"><span>redis-master-deployment.yaml</span></a></h3><p>这是一个Deployment（部署）的配置文件，用于定义和创建Redis主节点的副本集。Deployment是Kubernetes的资源对象，用于管理Pods的创建、更新和扩缩容等操作。在<code>redis-master-deployment.yaml</code>中，你可以定义Redis主节点的镜像、Pod的副本数、资源限制、环境变量等配置，并指定要使用的存储卷。</p><p>Deployment会创建并管理一组Pods，保证指定数量的Pods在任何时候都处于运行状态。如果Pods发生故障或被删除，Deployment会自动创建新的Pods以维持指定的副本数。因此，<code>redis-master-deployment.yaml</code>主要用于定义Redis主节点的部署规范。</p><h3 id="redis-master-service-yaml" tabindex="-1"><a class="header-anchor" href="#redis-master-service-yaml"><span>redis-master-service.yaml</span></a></h3><p><code>redis-master-service.yaml</code>：这是一个Service（服务）的配置文件，用于定义如何将Redis主节点暴露给其他应用程序或服务。Service是Kubernetes的资源对象，用于提供网络访问和负载均衡等功能。在<code>redis-master-service.yaml</code>中，你可以定义Service的类型、端口映射、选择器和负载均衡策略等配置。</p><p>Service为一组Pods提供了一个稳定的入口点，并通过Cluster IP或者LoadBalancer IP将流量分发到这组Pods上。通过Service，其他应用程序或服务可以通过Service的地址和端口访问Redis主节点。因此，<code>redis-master-service.yaml</code>主要用于定义Redis主节点的服务配置。</p><h2 id="命令脚本" tabindex="-1"><a class="header-anchor" href="#命令脚本"><span>命令脚本</span></a></h2><p>命令大全：https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html</p><h3 id="系统操作" tabindex="-1"><a class="header-anchor" href="#系统操作"><span>系统操作</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 开启服务</span>
systemctl start k3s

<span class="token comment"># 查询当前节点镜像</span>
systemctl start k3s

<span class="token comment">#查询当前节点容器状态</span>
<span class="token function">sudo</span> crictl <span class="token function">ps</span>

<span class="token comment"># 重启</span>
<span class="token function">sudo</span> systemctl restart k3s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务操作" tabindex="-1"><a class="header-anchor" href="#服务操作"><span>服务操作</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查询节点服务</span>
<span class="token function">sudo</span> kubectl get pods
<span class="token comment"># 查询当前节点所有服务</span>
<span class="token function">sudo</span> kubectl get pods --all-namespaces
<span class="token comment"># 查看节点下某一个命令空间的pod</span>
kubectl get pods <span class="token parameter variable">-n</span> kubernetes-dashboard

<span class="token comment"># 查看pod所在节点</span>
kubectl get pods --all-namespaces <span class="token parameter variable">-o</span> wide

<span class="token comment"># 查看运行状态以及映射端口</span>
<span class="token function">sudo</span> kubectl get svc

<span class="token comment"># 确认配置</span>
<span class="token function">sudo</span> kubectl apply <span class="token parameter variable">-f</span> master-deployment.yaml

<span class="token comment"># 重启pod，service【在修改yaml文件后，可执行】</span>
kubectl replace <span class="token parameter variable">--force</span> <span class="token parameter variable">-f</span> /opt/yaml/netcore/apricot/apricots.yaml

<span class="token comment"># 重启etcd</span>
systemctl  restart etcd

<span class="token comment"># 重启kube-apiserver</span>
systemctl restart kube-apiserver

<span class="token comment"># 重启 kube-controller-manager</span>
systemctl status kube-controller-manager

<span class="token comment"># 重启 kube-schduler</span>
systemctl status kube-schduler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志"><span>查看日志</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看pod信息</span>
<span class="token function">sudo</span> kubectl get pods

<span class="token comment"># 查看指定pod的日志</span>
kubectl logs <span class="token operator">&lt;</span>pod_name<span class="token operator">&gt;</span>
kubectl logs <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>pod_name<span class="token operator">&gt;</span> <span class="token comment">#类似tail -f的方式查看(tail -f 实时查看日志文件 tail -f 日志文件log)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>https://mp.weixin.qq.com/s/3qBfk7CIyfjk8zXJPbycjg | K3S 入门级实战教程，和 K8S 有何不同？</p><p>https://www.cnblogs.com/hujinzhong/p/15014487.html k3s安装于部署</p>`,37),c=[r];function d(o,p){return s(),n("div",null,c)}const v=e(l,[["render",d],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/cloud/k3s/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2022-10-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["cloud"],"tag":["k3s"],"description":"概述 k3s是经过CNCF认证的由Rancher公司开发维护的一个轻量级的 Kubernetes 发行版，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，K3s 就是阉割版 K8s，消耗资源极少。它主要用于边缘计算、物联网等场景。 官网文档：...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/k3s/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 k3s是经过CNCF认证的由Rancher公司开发维护的一个轻量级的 Kubernetes 发行版，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，K3s 就是阉割版 K8s，消耗资源极少。它主要用于边缘计算、物联网等场景。 官网文档：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093411379.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-31T07:26:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"k3s"}],["meta",{"property":"article:published_time","content":"2022-10-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-31T07:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093411379.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093724991.png\\"],\\"datePublished\\":\\"2022-10-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-31T07:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"K3s架构","slug":"k3s架构","link":"#k3s架构","children":[{"level":3,"title":"单节点架构","slug":"单节点架构","link":"#单节点架构","children":[]},{"level":3,"title":"高可用架构","slug":"高可用架构","link":"#高可用架构","children":[]}]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[{"level":3,"title":"redis-master-deployment.yaml","slug":"redis-master-deployment-yaml","link":"#redis-master-deployment-yaml","children":[]},{"level":3,"title":"redis-master-service.yaml","slug":"redis-master-service-yaml","link":"#redis-master-service-yaml","children":[]}]},{"level":2,"title":"命令脚本","slug":"命令脚本","link":"#命令脚本","children":[{"level":3,"title":"系统操作","slug":"系统操作","link":"#系统操作","children":[]},{"level":3,"title":"服务操作","slug":"服务操作","link":"#服务操作","children":[]},{"level":3,"title":"查看日志","slug":"查看日志","link":"#查看日志","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1703947377000,"updatedTime":1704007577000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":4.47,"words":1342},"filePathRelative":"cloud/k3s/readme.md","localizedDate":"2022年10月11日","excerpt":"<h2>概述</h2>\\n<p>k3s是经过CNCF认证的由Rancher公司开发维护的一个<strong>轻量级的 Kubernetes 发行版</strong>，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，<code>K3s 就是阉割版 K8s</code>，消耗资源极少。它主要用于<strong>边缘计算、物联网</strong>等场景。</p>\\n<p>官网文档：https://docs.k3s.io/zh/</p>\\n<p>中文网站：http://docs.rancher.cn/docs/k3s/quick-start/_index/</p>","autoDesc":true}');export{v as comp,h as data};
