import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,e as a}from"./app-BY9DQv5u.js";const i={},p=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>临时方法</p><h2 id="表情区域" tabindex="-1"><a class="header-anchor" href="#表情区域"><span>表情区域</span></a></h2><p>地址：https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/</p><p>👈 👍 👉</p><p>😄 😊</p><h2 id="临时代码" tabindex="-1"><a class="header-anchor" href="#临时代码"><span>临时代码</span></a></h2><p>有花堪折直须折，莫待无花空折枝</p><p>efcore多表查询</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> public async Task&lt;List&lt;Role&gt;&gt; GetRolesByConditionAsync(Expression&lt;Func&lt;Role, UserRoleMapping, bool&gt;&gt; predicate, List&lt;int&gt; userIds)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        return await _dbContext.Role</span></span>
<span class="line"><span>            .Join(</span></span>
<span class="line"><span>                _dbContext.UserRoleMapping.Where(t =&gt; userIds.Contains(t.UserId)),</span></span>
<span class="line"><span>                role =&gt; role.Id,</span></span>
<span class="line"><span>                userRoleMapping =&gt; userRoleMapping.RoleId,</span></span>
<span class="line"><span>                (role, userRoleMapping) =&gt; new { role, userRoleMapping }</span></span>
<span class="line"><span>            )</span></span>
<span class="line"><span>            .Where(joined =&gt; predicate.Compile().Invoke(joined.role, joined.userRoleMapping)) // Apply the predicate</span></span>
<span class="line"><span>            .Select(joined =&gt; joined.role) // Select the role or other properties you need</span></span>
<span class="line"><span>            .ToListAsync();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    </span></span>
<span class="line"><span> // Usage</span></span>
<span class="line"><span>var roleService = new RoleService(dbContext);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Expression&lt;Func&lt;Role, UserRoleMapping, bool&gt;&gt; roleCondition = (role, userRoleMapping) =&gt; role.Id == userRoleMapping.RoleId;</span></span>
<span class="line"><span>var userIds = new List&lt;int&gt; { 1, 2, 3 }; // Example user IDs</span></span>
<span class="line"><span>var roles = await roleService.GetRolesByConditionAsync(roleCondition, userIds);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>efcore尝试使用sqlsugar的表连接方式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class QueryService</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    private readonly MyDbContext _context;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public QueryService(MyDbContext context)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        _context = context;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public IQueryable&lt;TResult&gt; JoinQuery&lt;T1, T2, TKey, TResult&gt;(</span></span>
<span class="line"><span>        IQueryable&lt;T1&gt; firstQuery,</span></span>
<span class="line"><span>        IQueryable&lt;T2&gt; secondQuery,</span></span>
<span class="line"><span>        Expression&lt;Func&lt;T1, TKey&gt;&gt; firstKeySelector,</span></span>
<span class="line"><span>        Expression&lt;Func&lt;T2, TKey&gt;&gt; secondKeySelector,</span></span>
<span class="line"><span>        Expression&lt;Func&lt;T1, T2, TResult&gt;&gt; resultSelector)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        return firstQuery</span></span>
<span class="line"><span>            .Join(secondQuery,</span></span>
<span class="line"><span>                firstKeySelector,</span></span>
<span class="line"><span>                secondKeySelector,</span></span>
<span class="line"><span>                resultSelector);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class UserService</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    private readonly QueryService _queryService;</span></span>
<span class="line"><span>    private readonly MyDbContext _context;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public UserService(QueryService queryService, MyDbContext context)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        _queryService = queryService;</span></span>
<span class="line"><span>        _context = context;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public async Task&lt;List&lt;User&gt;&gt; GetUsersWithRolesAsync(List&lt;int&gt; userIds)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        var userQuery = _context.Users.AsQueryable();</span></span>
<span class="line"><span>        var userRoleQuery = _context.UserRoleMappings.Where(mapping =&gt; userIds.Contains(mapping.UserId));</span></span>
<span class="line"><span>        var roleQuery = _context.Roles.AsQueryable();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        var resultQuery = _queryService.JoinQuery(</span></span>
<span class="line"><span>            userQuery,</span></span>
<span class="line"><span>            userRoleQuery,</span></span>
<span class="line"><span>            user =&gt; user.Id,</span></span>
<span class="line"><span>            mapping =&gt; mapping.UserId,</span></span>
<span class="line"><span>            (user, mapping) =&gt; new { user, mapping }</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        .Join(</span></span>
<span class="line"><span>            roleQuery,</span></span>
<span class="line"><span>            joined =&gt; joined.mapping.RoleId,</span></span>
<span class="line"><span>            role =&gt; role.Id,</span></span>
<span class="line"><span>            (joined, role) =&gt; new { joined.user, role }</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        .Select(result =&gt; result.user)</span></span>
<span class="line"><span>        .Distinct();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return await resultQuery.ToListAsync();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通用" tabindex="-1"><a class="header-anchor" href="#通用"><span>通用</span></a></h2><p>使用 dotnet-monitor + prometheus + grafana 进行诊断：https://dev.to/rafaelpadovezi/diagnosticos-usando-dotnet-monitor-prometheus-grafana-3n7o</p><p>.Net Task揭秘：https://www.cnblogs.com/eventhorizon/p/15912383.html 需要看完</p><p>ThreadPool：https://dev.to/theramoliya/understanding-threadpool-in-c-203n</p><p>线程池实现：https://www.cnblogs.com/eventhorizon/p/15316955.html</p><p>深入了解垃圾回收：https://mp.weixin.qq.com/s/qlfbDk6lFqLRJKs0hOXvOQ</p><p>rx中文版：https://github.com/MarsonShine/Books/blob/master/RxNet/docs/gettting-started.md</p><p>https://github.com/Cysharp/R3</p><p>读书笔记：https://marsonshine.github.io/Books/</p><p>读书笔记仓库地址：https://github.com/MarsonShine/Books</p><p>软考刷题：软考通</p><p>使用 .NET、Redis 和 Keycloak 实现具有令牌处理程序模式的 API 网关https://medium.com/@ahmedmohamedelahmar/implement-api-gateway-with-token-handler-pattern-using-net-redis-and-keycloak-38250bfbd733了解如何使用 YARP、Redis 和 Keycloak 实现令牌身份验证 API 网关。</p><p>EF 基于 Interceptor 的自动审计https://mp.weixin.qq.com/s/H_0zoFpRRt_foNByJmyUBA</p><p>Stack Overflow基于.NET开源的轻量级监控系统:https://mp.weixin.qq.com/s/sX915Wj66RhOM4MH4c2eUQ</p><p>C# 技巧 ：JSON处理:https://mp.weixin.qq.com/s/AxF_KoeEHJiTXNE4OSRX-Q</p><p>基于.NET开源、强大易用的短链生成及监控系统:https://mp.weixin.qq.com/s/a2CdCfGGwx7s_5JW3WuecA</p><p>.NET Aspire 与 Docker | 你被黑客攻击了。https://haacked.com/archive/2024/07/01/dotnet-aspire-vs-docker/比较使用 .NET Aspire 和 Docker 配置 .NET 项目和 PostgreSQL 的步骤。</p><p>如何在.NET Framework及.NET6以前项目中使用C#12新特性https://www.cnblogs.com/vipwan/p/18313947文章讨论了如何在历史.NET Framework项目中使用C# 12特性。通过更新Visual Studio和编辑项目文件的LangVersion标签，可以间接支持C# 12。同时，还需解决兼容性问题，例如使用预编译指令和定义IsExternalInit类。文中示例项目展示了实际应用。</p><p>使用简单的模板创建强大的文档： 使用TPL文件将HTML转换为PDF:https://mp.weixin.qq.com/s/Z4phZtEgm0gl6rHYQ6Xr4g</p><p>20+本.net开发必看书籍推荐https://jhrs.com/2021/41653.html</p><p>.NET 源代码自动生成：MediatR、CQRS 与源代码生成器：https://mp.weixin.qq.com/s/u7MgxdVa7PNmFR0AA5eDlw</p><p>有微软账户的话，免费的 Visual Studio Essential 是包含永久的 Azure DevOps Services 的</p><h2 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h2><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>docker</span></a></h3><p>dockerfile的多阶段生成：https://learn.microsoft.com/zh-cn/dotnet/architecture/microservices/docker-application-development-process/docker-app-development-workflow#multi-stage-builds-in-dockerfile</p><h3 id="k8s" tabindex="-1"><a class="header-anchor" href="#k8s"><span>k8s</span></a></h3><p>概念内容文档：https://learn.microsoft.com/zh-cn/dotnet/architecture/microservices/docker-application-development-process/docker-app-development-workflow#multi-stage-builds-in-dockerfile</p><h2 id="maui" tabindex="-1"><a class="header-anchor" href="#maui"><span>Maui</span></a></h2><p>多平台流媒体播放：https://www.bilibili.com/video/BV1Pz421Q7uU/?vd_source=0a3cc07b87a63e3c53d4132b6ce1a83c</p><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h2><p>金三银四面试：C#.NET中高级面试题汇总：https://mp.weixin.qq.com/s/Dd5UBECyGav4Iks_dO2fmA</p><p>.NET工程师20K简历长啥样？：https://mp.weixin.qq.com/s/nhwVrV9iF2dlE3NcLeJrhw</p><p>https://mp.weixin.qq.com/s/yWLgpwKb9R_HhJKpYeDjGw | 金三银四面试：万字C#.NET笔试题高级进阶汇总篇</p><h2 id="知识库" tabindex="-1"><a class="header-anchor" href="#知识库"><span>知识库</span></a></h2><p>https://chat.token-ai.cn/chat/share-chat?id=af4da349d3a449709278e0bab4a5a2ec Avalonia 知识库</p><p>https://chat.token-ai.cn/chat/share-chat?id=939b3ad2f853422db0d781bcb19a8bf1 Masa知识库</p><h2 id="医保" tabindex="-1"><a class="header-anchor" href="#医保"><span>医保</span></a></h2><p>医保报销是什么？门诊那些只是用医保里面自己的钱</p><h2 id="github" tabindex="-1"><a class="header-anchor" href="#github"><span>Github</span></a></h2><p>使用github 流水线编译：https://www.bilibili.com/video/BV11e411i7Xx/?vd_source=0a3cc07b87a63e3c53d4132b6ce1a83c</p><h2 id="工具箱" tabindex="-1"><a class="header-anchor" href="#工具箱"><span>工具箱</span></a></h2><p>https://github.com/QiBowen2008/SuperTextToolBox</p><h2 id="硬件结合" tabindex="-1"><a class="header-anchor" href="#硬件结合"><span>硬件结合</span></a></h2><p>https://mp.weixin.qq.com/s/tbf6XP6QXwlPjnjpYvX-Gw | Homekit.Net 1.0.0发布：.NET原生SDK，助力打造私人智能家居新体验</p><h2 id="爬图" tabindex="-1"><a class="header-anchor" href="#爬图"><span>爬图</span></a></h2><p>https://mp.weixin.qq.com/s/gTPlq6WnS85ZUiHkTEO5wA | c#爬虫-1688官网自动以图搜图</p><h2 id="大模型" tabindex="-1"><a class="header-anchor" href="#大模型"><span>大模型</span></a></h2><p>最全中文sk教程：https://mp.weixin.qq.com/s/OSlwebdJX0yq_c8-jTMQpg?poc_token=HDEKEGajkeySY97I3lZVBhvETHtwJzqnHbRISX20</p><p>https://mp.weixin.qq.com/s/OSlwebdJX0yq_c8-jTMQpg | 这可能是目前最全的中文Semantic Kernel入门教程，呕心沥血，万字长文！！</p><p>清华 ChatGLM-6B 中文对话模型部署简易教程:https://blog.csdn.net/qq_43475750/article/details/129665389</p><p>PandoraNext</p><p>离线AI聊天清华大模型(ChatGLM3)本地搭建：https://mp.weixin.qq.com/s/UrJZCzuaxDyHwRrbPgnpdg</p><p>无需GPU，一键搭建本地大语言模型(LLM)服务，提供 OpenAI 接口 | 附 C#/Python 代码：https://mp.weixin.qq.com/s/X0ch-47lkTV1KFb7wMLs2w</p><p>chatgpt平替：claude</p><p>LLamaSharp：https://mp.weixin.qq.com/s/f6hHwEQ-wDWe1qlDTiR3aQ</p><p>仓库地址：https://github.com/SciSharp/LLamaSharp</p><p>.NET 8 开源项目 智能AI知识库：https://mp.weixin.qq.com/s/Jec7SKRJxJCsnTKiFQBeig</p><h2 id="机器学习" tabindex="-1"><a class="header-anchor" href="#机器学习"><span>机器学习</span></a></h2><p>https://mp.weixin.qq.com/s/6_JxN6sFt2GMuAw4LYRHUQ：C# 也能做机器学习？</p><p>ETL.NET 助力海量数据轻松处理：https://mp.weixin.qq.com/s/bNvnSqCjkkyjUEAW80o7qQ</p><h2 id="生产系统" tabindex="-1"><a class="header-anchor" href="#生产系统"><span>生产系统</span></a></h2><p>访客系统：https://mp.weixin.qq.com/s/D15GTs09J8cHUEWTgQksIw</p><h2 id="未知分类" tabindex="-1"><a class="header-anchor" href="#未知分类"><span>未知分类</span></a></h2><p>https://mp.weixin.qq.com/s/fk8YFa7C_31B_BY2ogkAyg | 实现简单的自动部署</p><p>https://mp.weixin.qq.com/s/gC_FZGSQ1wcDpX2x9ARYZA | 一款开源跨平台的图形化路由追踪工具 OpenTrace</p><p>https://mp.weixin.qq.com/s/Op_PeDAoiwYxZsnBItujUQ | 如何使用Chrome浏览器做前端页面性能分析</p><p>Apache Arrow 是一个用于内存分析的开发平台。它包含一个 使大数据系统能够处理和移动数据的一组技术快。</p><p>https://arrow.apache.org/docs/format/ADBC.html | ADBC： Arrow Database Connectivity — Apache Arrow v13.0.0</p><p>Nix 是一个功能强大的开源软件包管理器和操作系统部署工具，主要用于构建、配置和管理软件环境</p><p>https://nixos.org/ | Nix &amp; NixOS |可重现的构建和部署 声明式生成和部署</p><h2 id="免责声明" tabindex="-1"><a class="header-anchor" href="#免责声明"><span>免责声明</span></a></h2><p>免责声明</p><ol><li>网站内容</li></ol><p>本博客网站所提供的所有信息，包括但不限于文本、图片、视频、音频、软件、代码、文档等，均为一般信息目的而提供。我们尽最大努力确保信息的准确性，但并不保证其完整性、正确性、及时性或适用性。读者在使用此类信息时应自行判断其准确性和可靠性，并承担因此产生的全部责任。</p><ol start="2"><li>第三方链接</li></ol><p>本网站可能包含指向第三方网站的链接。这些链接仅供方便起见，我们并未对这些网站进行审核，也不对其内容负责。使用这些链接及其内容的风险由用户自行承担。</p><ol start="3"><li>版权与许可</li></ol><p>本网站上的所有原创内容均受版权法的保护。未经明确许可，禁止复制、转载、分发、修改或以任何方式使用本网站上的内容。如需使用，请联系我们获取许可。</p><ol start="4"><li>法律责任</li></ol><p>在任何情况下，本网站及其所有者、运营者、编辑、作者、代理人和任何相关方均不对任何直接、间接、附带、特殊、偶然或惩罚性损失承担责任，包括但不限于利润损失、业务中断、数据丢失或其他经济损失，无论这些损失是否由于使用或无法使用本网站的信息所致，或因违反合同、疏忽或其他行为所致。</p><ol start="5"><li>修改</li></ol><p>我们保留随时修改或更新本免责声明的权利，且无需另行通知。因此，用户应定期检查本页面以获取最新的免责声明。继续使用本网站即表示接受这些修改。</p><ol start="6"><li>法律适用与管辖</li></ol><p>本免责声明及其解释和执行均受适用的法律法规管辖。如果本免责声明中的任何条款被裁定为无效或不可执行，该条款应被视为可分离的，且其无效或不可执行不影响其他条款的有效性和可执行性。</p><p>通过访问和使用本博客网站，你表示已阅读、理解并同意遵守上述免责声明的所有条款。</p>`,97),l=[p];function t(r,c){return e(),n("div",null,l)}const h=s(i,[["render",t],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/temp/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"tag":["temp"],"description":"概述 临时方法 表情区域 地址：https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/ 👈 👍 👉 😄 😊 临时代码 有花堪折直须折，莫待无花空折枝 efcore多表查询 efcore尝试使用sqlsugar的表连接方式 通用 使用 dotnet-monitor + prometh...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/temp/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 临时方法 表情区域 地址：https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/ 👈 👍 👉 😄 😊 临时代码 有花堪折直须折，莫待无花空折枝 efcore多表查询 efcore尝试使用sqlsugar的表连接方式 通用 使用 dotnet-monitor + prometh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T14:54:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"temp"}],["meta",{"property":"article:published_time","content":"2023-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T14:54:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T14:54:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"表情区域","slug":"表情区域","link":"#表情区域","children":[]},{"level":2,"title":"临时代码","slug":"临时代码","link":"#临时代码","children":[]},{"level":2,"title":"通用","slug":"通用","link":"#通用","children":[]},{"level":2,"title":"微服务","slug":"微服务","link":"#微服务","children":[{"level":3,"title":"docker","slug":"docker","link":"#docker","children":[]},{"level":3,"title":"k8s","slug":"k8s","link":"#k8s","children":[]}]},{"level":2,"title":"Maui","slug":"maui","link":"#maui","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]},{"level":2,"title":"知识库","slug":"知识库","link":"#知识库","children":[]},{"level":2,"title":"医保","slug":"医保","link":"#医保","children":[]},{"level":2,"title":"Github","slug":"github","link":"#github","children":[]},{"level":2,"title":"工具箱","slug":"工具箱","link":"#工具箱","children":[]},{"level":2,"title":"硬件结合","slug":"硬件结合","link":"#硬件结合","children":[]},{"level":2,"title":"爬图","slug":"爬图","link":"#爬图","children":[]},{"level":2,"title":"大模型","slug":"大模型","link":"#大模型","children":[]},{"level":2,"title":"机器学习","slug":"机器学习","link":"#机器学习","children":[]},{"level":2,"title":"生产系统","slug":"生产系统","link":"#生产系统","children":[]},{"level":2,"title":"未知分类","slug":"未知分类","link":"#未知分类","children":[]},{"level":2,"title":"免责声明","slug":"免责声明","link":"#免责声明","children":[]}],"git":{"createdTime":1698997010000,"updatedTime":1722264853000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":116},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":113}]},"readingTime":{"minutes":6.19,"words":1857},"filePathRelative":"temp/readme.md","localizedDate":"2023年9月2日","excerpt":"<h2>概述</h2>\\n<p>临时方法</p>\\n<h2>表情区域</h2>\\n<p>地址：https://theme-hope.vuejs.press/zh/cookbook/markdown/emoji/</p>\\n<p>👈    👍    👉</p>\\n<p>😄 😊</p>\\n<h2>临时代码</h2>\\n<p>有花堪折直须折，莫待无花空折枝</p>\\n<p>efcore多表查询</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span> public async Task&lt;List&lt;Role&gt;&gt; GetRolesByConditionAsync(Expression&lt;Func&lt;Role, UserRoleMapping, bool&gt;&gt; predicate, List&lt;int&gt; userIds)</span></span>\\n<span class=\\"line\\"><span>    {</span></span>\\n<span class=\\"line\\"><span>        return await _dbContext.Role</span></span>\\n<span class=\\"line\\"><span>            .Join(</span></span>\\n<span class=\\"line\\"><span>                _dbContext.UserRoleMapping.Where(t =&gt; userIds.Contains(t.UserId)),</span></span>\\n<span class=\\"line\\"><span>                role =&gt; role.Id,</span></span>\\n<span class=\\"line\\"><span>                userRoleMapping =&gt; userRoleMapping.RoleId,</span></span>\\n<span class=\\"line\\"><span>                (role, userRoleMapping) =&gt; new { role, userRoleMapping }</span></span>\\n<span class=\\"line\\"><span>            )</span></span>\\n<span class=\\"line\\"><span>            .Where(joined =&gt; predicate.Compile().Invoke(joined.role, joined.userRoleMapping)) // Apply the predicate</span></span>\\n<span class=\\"line\\"><span>            .Select(joined =&gt; joined.role) // Select the role or other properties you need</span></span>\\n<span class=\\"line\\"><span>            .ToListAsync();</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span>    </span></span>\\n<span class=\\"line\\"><span> // Usage</span></span>\\n<span class=\\"line\\"><span>var roleService = new RoleService(dbContext);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>Expression&lt;Func&lt;Role, UserRoleMapping, bool&gt;&gt; roleCondition = (role, userRoleMapping) =&gt; role.Id == userRoleMapping.RoleId;</span></span>\\n<span class=\\"line\\"><span>var userIds = new List&lt;int&gt; { 1, 2, 3 }; // Example user IDs</span></span>\\n<span class=\\"line\\"><span>var roles = await roleService.GetRolesByConditionAsync(roleCondition, userIds);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{h as comp,u as data};
