import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e,b as i}from"./app-qB9_Bjjp.js";const l="/kbms/common/1660705345235-a574d724-958f-4895-a908-bc5ac69bc51b.png",u="/kbms/common/1660705386980-b02d9211-9097-41f9-8b98-13b64cb17c09.png",r={},d=n("h2",{id:"目的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目的"},[n("span",null,"目的")])],-1),k=n("p",null,"在实际项目中，为了保障服务器的稳定运行，需要对接口的可访问频次进行限流控制，避免因客户端频繁请求导致服务器压力过大。所以我们会进行限制一分钟或者一段时间内只能请求多少次，常见的是固定窗口算法。",-1),m=n("p",null,"也可以直接使用网上开源的组件来实现",-1),v={href:"https://www.yuque.com/docs/share/9f6d29ab-4a8a-4aa9-9d41-2b2b5512a4cf?view=doc_embed",target:"_blank",rel:"noopener noreferrer"},b=i('<h2 id="固定窗口算法" tabindex="-1"><a class="header-anchor" href="#固定窗口算法"><span>固定窗口算法</span></a></h2><p>固定窗口算法是将时间线划分为固定大小的窗口，并为每个窗口分配一个计数器。每个请求，根据其到达时间，被映射到一个窗口。如果窗口中的计数器已达到限制，则拒绝落在此窗口中的请求。 例如，如果我们将窗口大小设置为1分钟，每分钟允许10个请求： <img src="'+l+`" alt="image.png" loading="lazy"> 59秒的请求将被阻止,因为这时已经接受了10个请求。1分钟时计数器归零，所以1分01秒的请求可以接受。 <strong>固定窗口算法的问题主要在于，如果在窗口边缘发生大量请求，会导致限流策略失效。</strong> 比如，在59秒接收了9个请求，在1分01秒又可以再接收10个请求，相当于每分钟允许了20个请求。</p><h2 id="滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法"><span>滑动窗口算法</span></a></h2><p>滑动窗口类似于固定窗口算法，但它通过将前一个窗口中的加权计数添加到当前窗口中的计数来计算估计数，如果估计数超过计数限制，则请求将被阻止。 具体公式如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>估计数 <span class="token operator">=</span> 前一窗口计数 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> 当前窗口经过时间 <span class="token operator">/</span> 单位时间<span class="token punctuation">)</span> <span class="token operator">+</span> 当前窗口计数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，假设限制为每分钟10个： <img src="`+u+`" alt="image.png" loading="lazy"> 窗口[00:00, 00:01)中有9个请求，窗口[00:01, 00:02)中有5个请求。对于01:15(1分15秒)到达的请求，即窗口[00:01, 00:02)的25%位置，通过公式计算请求计数：9 x (1 - 25%) + 5 = 11.75 &gt; 10. 因此我们拒绝此请求。 <strong>即使两个窗口都没有超过限制，请求也会被拒绝，因为前一个和当前窗口的加权和确实超过了限制。</strong></p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>根据上面的公式，实现滑动窗口算法代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindow</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">object</span></span> _syncObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestIntervalSeconds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestLimit<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">DateTime</span> _windowStartTime<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _prevRequestCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestCount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SlidingWindow</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> requestLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> requestIntervalSeconds<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _windowStartTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
        _requestLimit <span class="token operator">=</span> requestLimit<span class="token punctuation">;</span>
        _requestIntervalSeconds <span class="token operator">=</span> requestIntervalSeconds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_syncObject<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> currentTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> elapsedSeconds <span class="token operator">=</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> _windowStartTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsedSeconds <span class="token operator">&gt;=</span> _requestIntervalSeconds <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _windowStartTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>
                _prevRequestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                _requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                elapsedSeconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsedSeconds <span class="token operator">&gt;=</span> _requestIntervalSeconds<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _windowStartTime <span class="token operator">=</span> _windowStartTime<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span>_requestIntervalSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
                _prevRequestCount <span class="token operator">=</span> _requestCount<span class="token punctuation">;</span>
                _requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                elapsedSeconds <span class="token operator">=</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> _windowStartTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 

            <span class="token class-name"><span class="token keyword">var</span></span> requestCount <span class="token operator">=</span> _prevRequestCount <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> elapsedSeconds <span class="token operator">/</span> _requestIntervalSeconds<span class="token punctuation">)</span> <span class="token operator">+</span> _requestCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCount <span class="token operator">&lt;=</span> _requestLimit<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _requestCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果最近的2次请求相距2个窗口时间，则可以认为前一窗口计数为0，重新开始计数。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>新建Middleware，使用滑动窗口算法进行限流：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitMiddleware</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMiddleware</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SlidingWindow</span> _window<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RateLimitMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlidingWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_window<span class="token punctuation">.</span><span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">SetEndpoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Endpoint</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status403Forbidden<span class="token punctuation">;</span>
                <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        EndpointMetadataCollection<span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>
                        <span class="token string">&quot;限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>需要注意的是，我们注册Middleware时，必须使用单例模式，保证所有请求通过同一SlidingWindow计数</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RateLimitMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点评：上面的算法对于上一个窗口的计算是平均值算法，还是不太精准。</p><h2 id="滑动窗口算法简单方案" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法简单方案"><span>滑动窗口算法简单方案</span></a></h2><p>定义一个线程安全的集合，每次请求的时候移除一分钟之前的数据，然后判断一下还剩余多少，剩余的超过限制的就设置不允许访问，访问频繁了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 请求限制中间件</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitMiddleware2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMiddleware</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// 还未做线程安全处理</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span> _requestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>DateTime<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> requestIntervalSeconds <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> requestLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

        _requestList <span class="token operator">=</span> _requestList<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t <span class="token operator">&gt;=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token operator">-</span>requestIntervalSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>_requestList<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> requestLimit<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>HttpStatusCode<span class="token punctuation">.</span>TooManyRequests<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> <span class="token string">&quot;请求频繁&quot;</span><span class="token punctuation">,</span> IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>使用滑动窗口算法，可以有效避免固定窗口算法存在的窗口边缘大量请求无法限制的问题。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,22),g={href:"https://mp.weixin.qq.com/s/H52dz6QVuJwCuQN5pbP7rg",target:"_blank",rel:"noopener noreferrer"};function h(w,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[d,k,m,n("p",null,[s("令牌桶算法和漏斗算法 "),n("a",v,[s("限流"),e(a)])]),b,n("p",null,[n("a",g,[s("https://mp.weixin.qq.com/s/H52dz6QVuJwCuQN5pbP7rg"),e(a)]),s(" | ASP.NET Core基于滑动窗口算法实现限流控制 https://mp.weixin.qq.com/s/c_dgU-btHOrWZ7_oFI1pWA | 两种基于时间窗口的限流器的简单实现")])])}const f=t(r,[["render",h],["__file","qingqiuxianzhichuangkousuanfa.html.vue"]]),x=JSON.parse('{"path":"/dotnet/commonNuget/xianliu/qingqiuxianzhi/qingqiuxianzhichuangkousuanfa.html","title":"请求限制窗口算法","lang":"zh-CN","frontmatter":{"title":"请求限制窗口算法","lang":"zh-CN","date":"2023-07-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"qingqiuxianzhichuangkousuanfa","slug":"xngyes","docsId":"72276624","description":"目的 在实际项目中，为了保障服务器的稳定运行，需要对接口的可访问频次进行限流控制，避免因客户端频繁请求导致服务器压力过大。所以我们会进行限制一分钟或者一段时间内只能请求多少次，常见的是固定窗口算法。 也可以直接使用网上开源的组件来实现 令牌桶算法和漏斗算法 限流 固定窗口算法 固定窗口算法是将时间线划分为固定大小的窗口，并为每个窗口分配一个计数器。每个...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/xianliu/qingqiuxianzhi/qingqiuxianzhichuangkousuanfa.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"请求限制窗口算法"}],["meta",{"property":"og:description","content":"目的 在实际项目中，为了保障服务器的稳定运行，需要对接口的可访问频次进行限流控制，避免因客户端频繁请求导致服务器压力过大。所以我们会进行限制一分钟或者一段时间内只能请求多少次，常见的是固定窗口算法。 也可以直接使用网上开源的组件来实现 令牌桶算法和漏斗算法 限流 固定窗口算法 固定窗口算法是将时间线划分为固定大小的窗口，并为每个窗口分配一个计数器。每个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1660705345235-a574d724-958f-4895-a908-bc5ac69bc51b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求限制窗口算法\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1660705345235-a574d724-958f-4895-a908-bc5ac69bc51b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1660705386980-b02d9211-9097-41f9-8b98-13b64cb17c09.png\\"],\\"datePublished\\":\\"2023-07-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"固定窗口算法","slug":"固定窗口算法","link":"#固定窗口算法","children":[]},{"level":2,"title":"滑动窗口算法","slug":"滑动窗口算法","link":"#滑动窗口算法","children":[{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"滑动窗口算法简单方案","slug":"滑动窗口算法简单方案","link":"#滑动窗口算法简单方案","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.82,"words":1147},"filePathRelative":"dotnet/commonNuget/xianliu/qingqiuxianzhi/qingqiuxianzhichuangkousuanfa.md","localizedDate":"2023年7月27日","excerpt":"<h2>目的</h2>\\n<p>在实际项目中，为了保障服务器的稳定运行，需要对接口的可访问频次进行限流控制，避免因客户端频繁请求导致服务器压力过大。所以我们会进行限制一分钟或者一段时间内只能请求多少次，常见的是固定窗口算法。</p>\\n<p>也可以直接使用网上开源的组件来实现</p>\\n<p>令牌桶算法和漏斗算法\\n<a href=\\"https://www.yuque.com/docs/share/9f6d29ab-4a8a-4aa9-9d41-2b2b5512a4cf?view=doc_embed\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">限流</a></p>","autoDesc":true}');export{f as comp,x as data};
