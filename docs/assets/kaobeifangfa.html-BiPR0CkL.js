import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as e,d as t}from"./app-CBxp4zeL.js";const i={},r=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>clone是深拷贝，copy是浅拷贝，如果是值类型的话是没什么区别的，如果是引用类型的话深拷贝拷贝的事整个对象的数据，而浅拷贝仅仅拷贝对象的引用。因为类的实例是引用类型，要想用原有的类中的实例的数据的话，既要想创建原对象的一个副本的话,只能用clone方法。Clone方法分为深clone和浅clone 。</p><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><h3 id="手动克隆" tabindex="-1"><a class="header-anchor" href="#手动克隆"><span>手动克隆</span></a></h3><p>一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。</p><h3 id="使用反射进行克隆" tabindex="-1"><a class="header-anchor" href="#使用反射进行克隆"><span>使用反射进行克隆</span></a></h3><p>用反射进行克隆是使用Activator.CreateInstance方法来创建一个相同类型的新对象，然后用反射对所有域进行浅拷贝。这种方法的优点是它是全自动的，不需要在对象中添加或删除成员的时候修改克隆方法。另外它也能被写成提供深拷贝的方法。缺点是使用了反射，因此会比较慢，而且在部分受信任的环境中是不可用的。</p><h3 id="使用序列化进行克隆" tabindex="-1"><a class="header-anchor" href="#使用序列化进行克隆"><span>使用序列化进行克隆</span></a></h3><p>克隆一个对象的最简单的方法是将它序列化并立刻反序列化为一个新对象。和反射方法一样，序列化方法是自动的，无需在对对象成员进行增删的时候做出修改。缺点是序列化比其他方法慢，甚至比用反射还慢，所有引用的对象都必须是可序列化的（Serializable）。另外，取决于你所使用的序列化的类型（XML，SOAP，二进制）的不同，私有成员可能不能像期望的那样被克隆。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 对象深度拷贝，复制出一个数据一样，但地址不一样的新版本</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">DeepClone</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">HasAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SerializableAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前对象未标记特性“</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SerializableAttribute</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">”，无法进行DeepClone操作&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binaryformatter" tabindex="-1"><a class="header-anchor" href="#binaryformatter"><span>BinaryFormatter</span></a></h3><p>使用BinaryFormatter进行操作，该方法已经被微软标识已经弃用，推荐的替代方案是使用system.text.json进行序列化。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">DeepClone</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SerializableAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前对象未标记特性“</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SerializableAttribute</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">”,无法进行DeepClose操作&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    formatter<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ms<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>formatter<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),u={href:"https://docs.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="其他组件" tabindex="-1"><a class="header-anchor" href="#其他组件"><span>其他组件</span></a></h3><h4 id="objectclonerobjectcloner" tabindex="-1"><a class="header-anchor" href="#objectclonerobjectcloner"><span>ObjectClonerObjectCloner</span></a></h4><p>https://github.com/marcelltoth/ObjectClonerObjectCloner 是一个高性能的 .NET 对象克隆开源库，内部使用了表达式树和 Reflection.Emit 。您可以从 NuGet 安装它，然后使用DeepClone方法。</p><h4 id="对象映射工具拷贝" tabindex="-1"><a class="header-anchor" href="#对象映射工具拷贝"><span>对象映射工具拷贝</span></a></h4><p>比如Mapster、AutoMapper等工具</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h2><p>手动赋值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> newtreePath <span class="token operator">=</span> treePath<span class="token punctuation">.</span><span class="token function">AsEnumerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将一个集合进行浅拷贝</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,9),d={href:"https://mp.weixin.qq.com/s/2C2arsJCzHGhexaOqN3pAQ",target:"_blank",rel:"noopener noreferrer"};function m(h,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("说明地址："),n("a",u,[s("https://docs.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide"),e(a)])])]),k,n("p",null,[n("a",d,[s("https://mp.weixin.qq.com/s/2C2arsJCzHGhexaOqN3pAQ"),e(a)]),s(" | c# Clone方法")])])}const y=p(i,[["render",m],["__file","kaobeifangfa.html.vue"]]),f=JSON.parse('{"path":"/dotnet/csharp/kaobeifangfa.html","title":"拷贝方法","lang":"zh-CN","frontmatter":{"title":"拷贝方法","lang":"zh-CN","date":"2023-10-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"kaobeifangfa","slug":"bi5se5","docsId":"49682948","description":"概述 clone是深拷贝，copy是浅拷贝，如果是值类型的话是没什么区别的，如果是引用类型的话深拷贝拷贝的事整个对象的数据，而浅拷贝仅仅拷贝对象的引用。因为类的实例是引用类型，要想用原有的类中的实例的数据的话，既要想创建原对象的一个副本的话,只能用clone方法。Clone方法分为深clone和浅clone 。 深拷贝 手动克隆 一个能够保证对象完全按...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/kaobeifangfa.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"拷贝方法"}],["meta",{"property":"og:description","content":"概述 clone是深拷贝，copy是浅拷贝，如果是值类型的话是没什么区别的，如果是引用类型的话深拷贝拷贝的事整个对象的数据，而浅拷贝仅仅拷贝对象的引用。因为类的实例是引用类型，要想用原有的类中的实例的数据的话，既要想创建原对象的一个副本的话,只能用clone方法。Clone方法分为深clone和浅clone 。 深拷贝 手动克隆 一个能够保证对象完全按..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T10:46:49.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T10:46:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拷贝方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T10:46:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[{"level":3,"title":"手动克隆","slug":"手动克隆","link":"#手动克隆","children":[]},{"level":3,"title":"使用反射进行克隆","slug":"使用反射进行克隆","link":"#使用反射进行克隆","children":[]},{"level":3,"title":"使用序列化进行克隆","slug":"使用序列化进行克隆","link":"#使用序列化进行克隆","children":[]},{"level":3,"title":"BinaryFormatter","slug":"binaryformatter","link":"#binaryformatter","children":[]},{"level":3,"title":"其他组件","slug":"其他组件","link":"#其他组件","children":[{"level":4,"title":"ObjectClonerObjectCloner","slug":"objectclonerobjectcloner","link":"#objectclonerobjectcloner","children":[]},{"level":4,"title":"对象映射工具拷贝","slug":"对象映射工具拷贝","link":"#对象映射工具拷贝","children":[]}]}]},{"level":2,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1708858009000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":2.81,"words":844},"filePathRelative":"dotnet/csharp/kaobeifangfa.md","localizedDate":"2023年10月25日","excerpt":"<h2>概述</h2>\\n<p>clone是深拷贝，copy是浅拷贝，如果是值类型的话是没什么区别的，如果是引用类型的话深拷贝拷贝的事整个对象的数据，而浅拷贝仅仅拷贝对象的引用。因为类的实例是引用类型，要想用原有的类中的实例的数据的话，既要想创建原对象的一个副本的话,只能用clone方法。Clone方法分为深clone和浅clone 。</p>\\n<h2>深拷贝</h2>\\n<h3>手动克隆</h3>\\n<p>一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。</p>","autoDesc":true}');export{y as comp,f as data};
