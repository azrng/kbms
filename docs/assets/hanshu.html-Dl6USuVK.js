import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,a as n,d as s,e as c,b as a}from"./app-Bw62I61B.js";const i={},r=a(`<h2 id="系统操作" tabindex="-1"><a class="header-anchor" href="#系统操作"><span>系统操作</span></a></h2><h3 id="pg-get-viewdef" tabindex="-1"><a class="header-anchor" href="#pg-get-viewdef"><span>pg_get_viewdef</span></a></h3><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token comment">-- 获取指定视图的DDL语句</span>
<span class="token keyword">SELECT</span> pg_get_viewdef<span class="token punctuation">(</span><span class="token string">&#39;orders.cr_order_merge_view&#39;</span><span class="token operator">:</span><span class="token operator">:</span>regclass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明</p><ul><li>regclass oid：指定要检索其定义的视图的关系 OID（Object IDentifier）。</li><li>pretty_bool boolean DEFAULT true：一个可选参数，用于指定是否对结果进行美化。默认值为 true，即返回美化后的定义。</li></ul><h2 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h2><h3 id="unnest" tabindex="-1"><a class="header-anchor" href="#unnest"><span>unnest</span></a></h3><p>列转行</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token function">unnest</span><span class="token punctuation">(</span><span class="token function">string_to_array</span><span class="token punctuation">(</span>&#39;<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">,</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace"><span>replace</span></a></h3><p>将某一列的内容进行替换操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>update cr<span class="token punctuation">.</span>chart_review_config
<span class="token keyword">set</span> content<span class="token operator">=</span><span class="token function">replace</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> &#39;<span class="token string">&quot;Filter&quot;</span>&#39;<span class="token punctuation">,</span> &#39; <span class="token string">&quot;sort&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string">&quot;Field&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;input_time&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Asc&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;false&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Filter&quot;</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="coalesce" tabindex="-1"><a class="header-anchor" href="#coalesce"><span>COALESCE</span></a></h3><p>参数可以有无限个，总是返回第一个非空参数，如果所有参数都是null，则返回null。</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> COALESCE<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">-- return 1</span>
<span class="token keyword">SELECT</span> COALESCE<span class="token punctuation">(</span><span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- return 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nullif" tabindex="-1"><a class="header-anchor" href="#nullif"><span>NULLIF</span></a></h3><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>NULLIF<span class="token punctuation">(</span>argument_1<span class="token punctuation">,</span>argument_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果两个参数相等返回null，否则返回第一个参数。请看示例：</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> NULLIF <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- return NULL</span>

<span class="token keyword">SELECT</span> NULLIF <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- return 1</span>

<span class="token keyword">SELECT</span> NULLIF <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- return A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span>SUBSTR</span></a></h3><p>查询指定关键字的前后几个字</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> SUBSTR<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> STRPOS<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> <span class="token string">&#39;keyword&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">context</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> column_name <span class="token keyword">LIKE</span> <span class="token string">&#39;%keyword%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convert-to" tabindex="-1"><a class="header-anchor" href="#convert-to"><span>convert_to</span></a></h3><p>将数据库的一个值转为其他编码格式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">convert_to</span><span class="token punctuation">(</span>masterInfo<span class="token punctuation">.</span>account_address_township<span class="token punctuation">,</span>&#39;GB18030&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>转成文本类型</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>&#39;输血不良反应记录&#39;<span class="token punctuation">::</span>text AS recordname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>int</th><th>::int</th></tr></thead><tbody><tr><td>varchar</td><td>::text</td></tr></tbody></table><h3 id="字符串连接" tabindex="-1"><a class="header-anchor" href="#字符串连接"><span>字符串连接</span></a></h3><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>样例</th><th>结果</th></tr></thead><tbody><tr><td>string || string</td><td>字符串</td><td>字符串连接</td><td>&#39;Post&#39; || &#39;greSQL&#39;</td><td>PostgreSQL</td></tr><tr><td>string || non-string or non-string || string</td><td>text</td><td>连接空字符串</td><td>&#39;Value: &#39; || 42</td><td>Value: 42</td></tr><tr><td>concat(str &quot;any&quot; [, str &quot;any&quot; [, ...] ])</td><td>字符串</td><td>连接函数里所有的字符串参数，忽略空字符串</td><td>concat(&#39;abcde&#39;, 2, NULL, 22)</td><td>abcde222</td></tr><tr><td>concat_ws(sep text, str &quot;any&quot; [, str &quot;any&quot; [, ...] ])</td><td>字符串</td><td>以第一个参数作为分隔符，连接其他的几个参数</td><td>concat_ws(&#39;,&#39;, &#39;abcde&#39;, 2, NULL, 22)</td><td>abcde,2,22</td></tr></tbody></table><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>&#39;透前评估单####&#39; <span class="token operator">||</span>	&#39;<span class="token number">2021</span>&#39; DisplayName<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：如果使用||连接的两个字符串输出的类型是字符串类型，如果两个操作数都是varchar类型，那么输出为varchar类型，如果连接的操作数有一个是text类型，那么输出结果是text类型。</p><h3 id="to-char" tabindex="-1"><a class="header-anchor" href="#to-char"><span>to_char</span></a></h3><p>将时间转换为固定格式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">to_char</span><span class="token punctuation">(</span>blood_reaction<span class="token punctuation">.</span>report_date<span class="token punctuation">,</span> &#39;yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd&#39;<span class="token punctuation">::</span>text<span class="token punctuation">)</span> AS <span class="token return-type class-name">recordtime</span>

<span class="token function">to_char</span><span class="token punctuation">(</span>diag_time<span class="token punctuation">,</span>&#39;yyyy<span class="token operator">-</span>mm<span class="token operator">-</span><span class="token class-name">dd</span> HH24<span class="token punctuation">:</span>mi<span class="token punctuation">:</span>ss&#39;<span class="token punctuation">)</span>  <span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">30</span>

<span class="token operator">--</span> 将时间<span class="token operator">+</span><span class="token number">8</span>小时输出
<span class="token function">to_char</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> interval &#39;<span class="token number">8</span> hours&#39;<span class="token punctuation">,</span> &#39;yyyymmddHH24miss&#39;<span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case" tabindex="-1"><a class="header-anchor" href="#case"><span>Case</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CASE hd_pat_record<span class="token punctuation">.</span>hd_rec_type
    WHEN <span class="token char">&#39;1&#39;</span><span class="token punctuation">::</span>text THEN &#39;透前评估单&#39;<span class="token punctuation">::</span>text
    ELSE &#39;血透治疗记录&#39;<span class="token punctuation">::</span>text
END <span class="token class-name">AS</span> recordname<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="with" tabindex="-1"><a class="header-anchor" href="#with"><span>With</span></a></h3><p>结构</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">with</span> 
<span class="token keyword">a</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user<span class="token punctuation">)</span><span class="token punctuation">,</span>
b <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> class<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token keyword">a</span><span class="token punctuation">.</span>userId<span class="token punctuation">,</span>b<span class="token punctuation">.</span>clasId <span class="token keyword">from</span> 
<span class="token keyword">a</span> innner join n <span class="token keyword">on</span> <span class="token keyword">a</span><span class="token punctuation">.</span>classId <span class="token operator">=</span> b<span class="token punctuation">.</span>classId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多个临时表逗号隔开,a和b都是临时表</p></blockquote><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>with x <span class="token keyword">as</span><span class="token punctuation">(</span>
			<span class="token keyword">select</span>
			x<span class="token punctuation">.</span>patient_name<span class="token punctuation">,</span>
			x<span class="token punctuation">.</span>age
			<span class="token keyword">from</span>
			visit<span class="token punctuation">.</span>visit_record x
			<span class="token keyword">where</span>
			<span class="token class-name">x</span><span class="token punctuation">.</span>is_valid <span class="token operator">=</span> <span class="token boolean">true</span> 
<span class="token punctuation">)</span>
    
<span class="token keyword">select</span>
	x<span class="token punctuation">.</span>patient_name<span class="token punctuation">,</span>
	x<span class="token punctuation">.</span>age
<span class="token keyword">from</span>
	x
inner <span class="token keyword">join</span> patient<span class="token punctuation">.</span>patient_master_info p <span class="token keyword">on</span>
	x<span class="token punctuation">.</span>patient_id <span class="token operator">=</span> p<span class="token punctuation">.</span>patient_id
	<span class="token keyword">and</span> p<span class="token punctuation">.</span>patient_name like &#39;<span class="token operator">%</span>涛<span class="token operator">%</span>&#39;
<span class="token keyword">where</span>
	<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>
	
order <span class="token keyword">by</span>
	x<span class="token punctuation">.</span>visit_time desc
limit <span class="token number">1</span> offset <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit-offset" tabindex="-1"><a class="header-anchor" href="#limit-offset"><span>Limit/Offset</span></a></h3><p>分页查询</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> persons limit  A  <span class="token class-name">offset</span>  B<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>A就是你需要多少行； B就是查询的起点位置。 A B是bigint类型的值</p></blockquote><p>示例： select * from persons limit 5 offset 0 ; 意思是，起点0开始查询，返回5条数据。</p><h3 id="row-number" tabindex="-1"><a class="header-anchor" href="#row-number"><span>Row_number</span></a></h3><p>生成虚拟的排序列</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token comment"># 根据账号列排序然后分页查询前十条</span>
<span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> account<span class="token punctuation">,</span> pass_word<span class="token punctuation">,</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> account <span class="token keyword">desc</span> <span class="token punctuation">)</span> ROW_NUMBER
      <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sample<span class="token punctuation">.</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> u<span class="token punctuation">)</span> c
<span class="token keyword">where</span> ROW_NUMBER <span class="token operator">BETWEEN</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-to-array" tabindex="-1"><a class="header-anchor" href="#string-to-array"><span>string_to_array</span></a></h3><p>将字符串转数组</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token function">string_to_array</span><span class="token punctuation">(</span>&#39;<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">,</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any"><span>any</span></a></h3><p>查询一个值是否在数组中存在的</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">select</span> <span class="token string">&#39;1&#39;</span><span class="token operator">=</span><span class="token keyword">any</span><span class="token punctuation">(</span>string_to_array<span class="token punctuation">(</span><span class="token string">&#39;1,2,3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token number">19</span> <span class="token operator">=</span> <span class="token keyword">ANY</span><span class="token punctuation">(</span>string_to_array<span class="token punctuation">(</span><span class="token string">&#39;1,18,19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>int4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interval" tabindex="-1"><a class="header-anchor" href="#interval"><span>INTERVAL</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span>查询当前时间<span class="token operator">+</span><span class="token number">8</span>小时的时间
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> interval &#39;<span class="token number">8</span> hours&#39;<span class="token punctuation">;</span>

<span class="token operator">--</span> 查询指定时间<span class="token operator">-</span><span class="token number">1</span>个月的时间
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> interval &#39;<span class="token number">1</span> month&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pg-column-size" tabindex="-1"><a class="header-anchor" href="#pg-column-size"><span>pg_column_size</span></a></h3><p>查询列的占用大小</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">--  查询表中患者名称列的占用</span>
<span class="token keyword">select</span> patient_name<span class="token punctuation">,</span>pg_column_size<span class="token punctuation">(</span>patient_name<span class="token punctuation">)</span> <span class="token keyword">from</span> orders<span class="token punctuation">.</span>inpat_undrug_order <span class="token keyword">where</span> order_id<span class="token operator">=</span><span class="token number">4660956</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split-part" tabindex="-1"><a class="header-anchor" href="#split-part"><span>split_part</span></a></h3><ol><li>text 为截取字段</li><li>text2 为截取标识符：按照什么形式切割(比如逗号’,’)</li><li>int 为要获取的项的位置：位置从1开始</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">split_part</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name">delimiter</span> text2<span class="token punctuation">,</span> field <span class="token keyword">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> split_part<span class="token punctuation">(</span><span class="token string">&#39;a,b,c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 输出a</span>
    
<span class="token keyword">select</span> split_part<span class="token punctuation">(</span><span class="token string">&#39;12,4&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 输出12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>Json</span></a></h3>`,69),u={href:"http://postgres.cn/docs/12/functions-json.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<blockquote><p>json和jsonb从用户操作角度来说是没有区别的，区别主要是存储和读取的系统处理和耗时方面有区别。json写入，读取慢，jsonb写入慢，读取快</p></blockquote><h4 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h4><h5 id="" tabindex="-1"><a class="header-anchor" href="#"><span>#&gt;</span></a></h5><p>获取在指定路径的json对象 示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> &#39;<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>&#39;<span class="token punctuation">::</span>json#<span class="token operator">&gt;</span>&#39;<span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span>&#39;<span class="token punctuation">;</span>
<span class="token operator">--</span> <span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">select</span> &#39;<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>&#39;<span class="token punctuation">::</span>json#<span class="token operator">&gt;</span>&#39;<span class="token punctuation">{</span>a<span class="token punctuation">}</span>&#39;<span class="token punctuation">;</span>
<span class="token operator">--</span> <span class="token punctuation">{</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>#&gt;&gt;</span></a></h5><p>以text形式获取指定路径上的json对象 示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> &#39;<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span>&#39;<span class="token punctuation">::</span>json#<span class="token operator">&gt;</span>&#39;<span class="token punctuation">{</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>&#39;<span class="token punctuation">;</span>
<span class="token operator">--</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>返回text形式和上面的区别就是，#&gt;有时候返回json对象是包含双引号的。</p><h5 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span>@&gt;</span></a></h5><p>判断一个值是否在 JSON 字段中</p><p>如果是判断json中某一个键名key是否中是否包含某一个值</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> <span class="token number">1</span> 
  <span class="token keyword">FROM</span> your_table 
  <span class="token keyword">WHERE</span> <span class="token keyword">data</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">@</span><span class="token operator">&gt;</span> <span class="token string">&#39;[10, 20, 30]&#39;</span><span class="token operator">:</span><span class="token operator">:</span>jsonb
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断某一个json值是否存在某一个数组值</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">select</span> <span class="token string">&#39;[1,8,19]&#39;</span><span class="token operator">:</span><span class="token operator">:</span>jsonb <span class="token operator">@</span><span class="token operator">&gt;</span> <span class="token string">&#39;[8]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="json处理" tabindex="-1"><a class="header-anchor" href="#json处理"><span>Json处理</span></a></h4><h5 id="jsonb-path-query" tabindex="-1"><a class="header-anchor" href="#jsonb-path-query"><span>jsonb_path_query</span></a></h5><blockquote><p>jsonb_path_query(target jsonb, path jsonpath [, vars jsonb [, silent bool]])</p></blockquote><p>获取指定的json值的json路径返回的所有json项</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> jsonb_path_query<span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;:[1,2,3,4,5]}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&quot;min&quot;:2,&quot;max&quot;:4}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 2</span>
<span class="token comment">-- 3</span>
<span class="token comment">-- 4</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> jsonb_path_query<span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;:{&quot;type&quot;: 5,&quot;name&quot;: &quot;zhangsan&quot;}}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.a[*] ? (@.type==5 ).name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- &quot;zhangsan&quot;</span>

<span class="token keyword">select</span>  jsonb_path_query<span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;:{&quot;type&quot;: 5,&quot;name&quot;: &quot;zhangsan&quot;}}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.a[*] ? (@.type==5 )&#39;</span><span class="token punctuation">)</span> <span class="token comment">#&gt;&gt;&#39;{name}&#39;</span>
<span class="token comment">-- zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="jsonb-path-query-array" tabindex="-1"><a class="header-anchor" href="#jsonb-path-query-array"><span>jsonb_path_query_array</span></a></h5><blockquote><p>jsonb_path_query_array(target jsonb, path jsonpath [, vars jsonb [, silent bool]])</p></blockquote><p>获取指定json路径返回的所有json项，并将结果封装为数组</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> jsonb_path_query_array<span class="token punctuation">(</span><span class="token string">&#39;{&quot;a&quot;:[1,2,3,4,5]}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&quot;min&quot;:2,&quot;max&quot;:4}&#39;</span><span class="token punctuation">)</span>
<span class="token comment">-- [2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="jsonb-array-elements-text" tabindex="-1"><a class="header-anchor" href="#jsonb-array-elements-text"><span>jsonb_array_elements_text</span></a></h5><p>jsonb_array_elements_text 函数将 JSON 数组展开为一系列文本元素</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> jsonb_array_elements_text<span class="token punctuation">(</span><span class="token string">&#39;[1,18,19]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recursive" tabindex="-1"><a class="header-anchor" href="#recursive"><span>recursive</span></a></h3><p>可以实现在数据库递归的效果</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 根据id将其所有子集都查询出来</span>
<span class="token keyword">with</span> recursive p <span class="token keyword">as</span>
                   <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span>::<span class="token keyword">integer</span> recursion_level<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>struct_name<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>struct_type<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>parent_struct_id
                    <span class="token keyword">from</span> meta_data<span class="token punctuation">.</span>model_struct t1
                    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11687</span> <span class="token operator">and</span> t1<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">!=</span> <span class="token number">1</span>
                    <span class="token keyword">union</span> <span class="token keyword">all</span>
                    <span class="token keyword">select</span> p<span class="token punctuation">.</span>recursion_level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>struct_name<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>struct_type<span class="token punctuation">,</span>t2<span class="token punctuation">.</span>parent_struct_id
                    <span class="token keyword">from</span> meta_data<span class="token punctuation">.</span>model_struct t2  <span class="token keyword">inner</span> <span class="token keyword">join</span> p   <span class="token keyword">on</span> t2<span class="token punctuation">.</span>parent_struct_id <span class="token operator">=</span> p<span class="token punctuation">.</span>id
                    <span class="token keyword">where</span> t2<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>
       recursion_level<span class="token punctuation">,</span>
       struct_name<span class="token punctuation">,</span>
       struct_type<span class="token punctuation">,</span>
       parent_struct_id
<span class="token keyword">from</span> p

<span class="token comment">-- 如果你希望在每一行上显示包含所有上级名称组合的列表，而不仅仅是最终路径，可以稍微修改上述查询。以下是一个更新后的示例查询</span>
<span class="token keyword">WITH</span> RECURSIVE recursive_query <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> manager_id<span class="token punctuation">,</span> ARRAY<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token keyword">AS</span> path
    <span class="token keyword">FROM</span> employees
    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token operator">&lt;</span>employee_id<span class="token operator">&gt;</span> <span class="token comment">-- 填入要查询的员工ID</span>

    <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>

    <span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>manager_id<span class="token punctuation">,</span> rq<span class="token punctuation">.</span>path <span class="token operator">||</span> e<span class="token punctuation">.</span>name
    <span class="token keyword">FROM</span> employees e
    <span class="token keyword">JOIN</span> recursive_query rq <span class="token keyword">ON</span> e<span class="token punctuation">.</span>id <span class="token operator">=</span> rq<span class="token punctuation">.</span>manager_id
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> unnest<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">AS</span> all_names
<span class="token keyword">FROM</span> recursive_query<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考资料：https://zhuanlan.zhihu.com/p/159555056</p><h3 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换"><span>格式转换</span></a></h3><h4 id="query-to-xml" tabindex="-1"><a class="header-anchor" href="#query-to-xml"><span>query_to_xml</span></a></h4><p>执行动态的查询sql并且将值转为xml格式</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 批量动态执行sql 并且使用xpath解析执行的结果</span>
<span class="token keyword">select</span> schemaname<span class="token punctuation">,</span> tablename<span class="token punctuation">,</span> <span class="token punctuation">(</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;/row/cnt/text()&#39;</span><span class="token punctuation">,</span> xml_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>::<span class="token keyword">text</span>::<span class="token keyword">int</span> <span class="token keyword">as</span> row_count
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> schemaname<span class="token punctuation">,</span>
             tablename<span class="token punctuation">,</span>
             query_to_xml<span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;select count(1) as cnt from %I.%I&#39;</span><span class="token punctuation">,</span> schemaname<span class="token punctuation">,</span> tablename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                          <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xml_count
      <span class="token keyword">from</span> pg_tables
      <span class="token keyword">where</span> schemaname <span class="token operator">=</span> <span class="token string">&#39;blog&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全文搜索" tabindex="-1"><a class="header-anchor" href="#全文搜索"><span>全文搜索</span></a></h3><h4 id="tsvector" tabindex="-1"><a class="header-anchor" href="#tsvector"><span>tsvector</span></a></h4><p>pgsql全文搜索：https://www.codenong.com/cs106302184/</p><h2 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选"><span>筛选</span></a></h2><h3 id="like" tabindex="-1"><a class="header-anchor" href="#like"><span>Like</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 忽略大小写查询</span>
<span class="token comment">-- var existingEntity = await _unitOfWork.Banks.FirstOrDefautAsync(x =&gt; (EF.Functions.ILike(x.Code, bank.Code));</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sample<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">ilike</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span>~</span></a></h3><p>正则匹配</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span> 查询长度小于<span class="token number">10</span>的
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cr<span class="token punctuation">.</span>chart_review_config <span class="token keyword">where</span> <span class="token class-name">key</span> <span class="token operator">~</span> &#39;<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>$&#39;<span class="token punctuation">;</span>

<span class="token operator">--</span> 查询key里面包含这些字符的值
<span class="token keyword">select</span> key <span class="token keyword">from</span> cr<span class="token punctuation">.</span>chart_review_config <span class="token keyword">where</span> <span class="token class-name">key</span> <span class="token operator">~</span> &#39;cda<span class="token operator">|</span>lab<span class="token operator">|</span>check&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span>随机数</span></a></h2><h3 id="random" tabindex="-1"><a class="header-anchor" href="#random"><span>random</span></a></h3><h4 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法"><span>基础用法</span></a></h4><p>函数可以用于生成一个大于等于 0 小于 1 的随机数字</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 返回的数据类型为 double precision，每次调用都会返回不同的结果</span>
<span class="token keyword">SELECT</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置随机种子" tabindex="-1"><a class="header-anchor" href="#设置随机种子"><span>设置随机种子</span></a></h4><p>如果我们想要重现某个结果，需要生成相同的随机数；这种情况下可以使用SETSEED(d) 函数设置一个随机数种子，d 的类型为 double precision，取值范围从 -1.0 到 1.0。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> setseed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random            <span class="token operator">|</span>
<span class="token comment">------------------|</span>
<span class="token number">0.0000000000000391</span><span class="token operator">|</span>

random            <span class="token operator">|</span>
<span class="token comment">------------------|</span>
<span class="token number">0.0009853946746503</span><span class="token operator">|</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">SELECT</span> setseed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random            <span class="token operator">|</span>
<span class="token comment">------------------|</span>
<span class="token number">0.0000000000000391</span><span class="token operator">|</span>

random            <span class="token operator">|</span>
<span class="token comment">------------------|</span>
<span class="token number">0.0009853946746503</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置相同的种子之后，随后的函数调用返回了一系列相同的随机数。</p><h4 id="生成指定范围的随机数" tabindex="-1"><a class="header-anchor" href="#生成指定范围的随机数"><span>生成指定范围的随机数</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 返回任意两个数字之间的随机数</span>
<span class="token comment">-- low + RANDOM() * (high - low)</span>
<span class="token comment">-- 示例</span>
<span class="token keyword">SELECT</span> <span class="token number">10</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token keyword">AS</span> rd<span class="token punctuation">;</span> <span class="token comment">-- 12.428546754341241</span>

<span class="token comment">-- 生成某个范围内的随机整数，可以加上 FLOOR 函数。例如</span>
<span class="token keyword">SELECT</span> floor<span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 14</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成验证码" tabindex="-1"><a class="header-anchor" href="#生成验证码"><span>生成验证码</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 生成6位数据手机验证码</span>
<span class="token keyword">SELECT</span> to_char<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token string">&#39;099999&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> captcha<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成遵循正态分布随机数" tabindex="-1"><a class="header-anchor" href="#生成遵循正态分布随机数"><span>生成遵循正态分布随机数</span></a></h4><p>PostgreSQL 提供了一个扩展模块 tablefunc，可以用于生成遵循正态分布（normal distribution）的随机数。首先，输入以下命令启用该模块：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> EXTENSION tablefunc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用该模块中的NORMAL_RAND(n,mean, stddev) 函数返回 n 个均值为 mean，标准差为 stddev 的随机数。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> normal_rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成随机字符串" tabindex="-1"><a class="header-anchor" href="#生成随机字符串"><span>生成随机字符串</span></a></h4><h5 id="生成固定长度随机字符串" tabindex="-1"><a class="header-anchor" href="#生成固定长度随机字符串"><span>生成固定长度随机字符串</span></a></h5><p>除了随机数字之外，有时候我们也需要生成一些随机的字符串。PostgreSQL 没有提供专门生成随机字符串的函数，但是可以通过其他函数进行模拟。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> chr<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">26</span><span class="token punctuation">)</span>::<span class="token keyword">integer</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chr<span class="token operator">|</span>
<span class="token comment">---|</span>
V  <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上查询返回了一个随机的大写字母，chr 函数用于将 ASCII 码转换为对应的字符。我们可以基于该查询进一步创建一个存储函数：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> random_string<span class="token punctuation">(</span>
  num <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>
  chars <span class="token keyword">TEXT</span> <span class="token keyword">default</span> <span class="token string">&#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">TEXT</span>
<span class="token keyword">LANGUAGE</span> plpgsql
<span class="token keyword">AS</span> $$
<span class="token keyword">DECLARE</span>
  res_str <span class="token keyword">TEXT</span> :<span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">IF</span> num <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token keyword">THEN</span>
      RAISE EXCEPTION <span class="token string">&#39;Invalid length&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
  <span class="token keyword">FOR</span> __ <span class="token operator">IN</span> <span class="token number">1.</span><span class="token punctuation">.</span>num <span class="token keyword">LOOP</span>
    res_str :<span class="token operator">=</span> res_str <span class="token operator">||</span> substr<span class="token punctuation">(</span>chars<span class="token punctuation">,</span> floor<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> length<span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">int</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span>
  <span class="token keyword">RETURN</span> res_str<span class="token punctuation">;</span>
<span class="token keyword">END</span> $$<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>random_string 函数可以返回由指定字符（默认为所有数字、大小写字母）组成的随机字符串。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> random_string<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random_string<span class="token operator">|</span>
<span class="token comment">-------------|</span>
etP3odkRgA   <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例返回了一个由字母和数字组成、长度为 10 的随机字符串。以下语句也可以用于返回一个 6 位随机数字组成的手机验证码：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> random_string<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0123456789&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random_string<span class="token operator">|</span>
<span class="token comment">-------------|</span>
<span class="token number">082661</span>       <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="生成可变长度的随机字符串" tabindex="-1"><a class="header-anchor" href="#生成可变长度的随机字符串"><span>生成可变长度的随机字符串</span></a></h5><p>那么，怎么返回一个长度可变的随机字符串呢？很简单，为 random_string 函数指定一个随机的长度参数即可。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> random_string<span class="token punctuation">(</span>floor<span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
random_string   <span class="token operator">|</span>
<span class="token comment">----------------|</span>
<span class="token number">8</span>tz5zHcbKVKoVg4S<span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例返回了一个长度大于等于 10 且小于等于 20 的随机字符串</p><h4 id="生成随机日期和时间" tabindex="-1"><a class="header-anchor" href="#生成随机日期和时间"><span>生成随机日期和时间</span></a></h4><p>将指定日期增加一个随机的数字，就可以得到随机的日期。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">current_date</span> <span class="token operator">+</span> floor<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">int</span> rand_date<span class="token punctuation">;</span>
rand_date <span class="token operator">|</span>
<span class="token comment">----------|</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例返回了当前日期 14 天之内的某个随机日期。以下语句则返回了一天中的某个随机时间：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> make_time<span class="token punctuation">(</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rand_time<span class="token punctuation">;</span>
rand_time<span class="token operator">|</span>
<span class="token comment">---------|</span>
 <span class="token number">10</span>:<span class="token number">04</span>:<span class="token number">52</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，make_time 函数用于将代表时、分、秒的整数转换为时间。</p><h4 id="获取表中的随机记录" tabindex="-1"><a class="header-anchor" href="#获取表中的随机记录"><span>获取表中的随机记录</span></a></h4><p>对于返回多行数据的查询语句，RANDOM 函数每次都会返回不同的随机值。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>
random             <span class="token operator">|</span>
<span class="token comment">-------------------|</span>
<span class="token number">0.10449782906204419</span><span class="token operator">|</span>
 <span class="token number">0.3345344734009643</span><span class="token operator">|</span>
 <span class="token number">0.7295074473683592</span><span class="token operator">|</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个特性，我们可以从表中返回随机的数据行。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> emp_id<span class="token punctuation">,</span> emp_name
<span class="token keyword">FROM</span> employee
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span>
emp_id<span class="token operator">|</span>emp_name <span class="token operator">|</span>
<span class="token comment">------|---------|</span>
     <span class="token number">2</span><span class="token operator">|</span>关羽      <span class="token operator">|</span>
     <span class="token number">9</span><span class="token operator">|</span>赵云      <span class="token operator">|</span>
    <span class="token number">13</span><span class="token operator">|</span>关兴      <span class="token operator">|</span>
    <span class="token number">25</span><span class="token operator">|</span>孙乾      <span class="token operator">|</span>
    <span class="token number">17</span><span class="token operator">|</span>马岱      <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例从 employee 表中返回了 5 行随机记录。该方法需要为表中的每行数据都生成一个随机数，然后进行排序；所以会随着表中的数据量增加而逐渐变慢。 如果表中存在自增主键，也可以基于主键生成一个随机数据。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>emp_id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> id<span class="token punctuation">;</span>
id  <span class="token operator">|</span>
<span class="token comment">----|</span>
<span class="token number">10.0</span><span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后基于这个随机数返回一条随机的记录：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>emp_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>emp_name
<span class="token keyword">FROM</span> employee e
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>emp_id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> id
           <span class="token punctuation">)</span> <span class="token keyword">AS</span> t
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>emp_id <span class="token operator">&gt;=</span> t<span class="token punctuation">.</span>id
<span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span>
emp_id<span class="token operator">|</span>emp_name<span class="token operator">|</span>
<span class="token comment">------|--------|</span>
    <span class="token number">10</span><span class="token operator">|</span>廖化     <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法一次只能返回一条随机记录，而且只有当自增字段的值没有间隙时才会返回均匀分布的随机记录。 另外，PostgreSQL 中的查询语句支持 TABLESAMPLE 子句，可以实现数据的抽样。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> emp_id<span class="token punctuation">,</span> emp_name
<span class="token keyword">FROM</span> employee 
TABLESAMPLE BERNOULLI <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emp_id<span class="token operator">|</span>emp_name<span class="token operator">|</span>
<span class="token comment">------|--------|</span>
     <span class="token number">4</span><span class="token operator">|</span>诸葛亮   <span class="token operator">|</span>
    <span class="token number">13</span><span class="token operator">|</span>关兴     <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 BERNOULLI 之外，也可以指定 SYSTEM 抽样方法，参数代表了抽样近似百分比。</p><h3 id="生成-uuid" tabindex="-1"><a class="header-anchor" href="#生成-uuid"><span>生成 UUID</span></a></h3><p>UUID（Universal Unique Identifier）或者 GUID（Globally Unique Identifier）是一个 128 比特的数字，可以用于唯一标识每个网络对象或资源。由于它的生成机制，一个 UUID 可以保证几乎不会与其他 UUID 重复，因此常常用于生成数据库中的主键值。 PostgreSQL 提供了一个用于加/解密的扩展模块 pgcrypto，其中的 gen_random_uuid() 函数可以用于返回一个 version 4 的随机 UUID。首先，输入以下命令启用该模块（gen_random_uuid() 从 PostgreSQL 13 开始成为了一个内置函数）：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> EXTENSION pgcrypto<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，通过该函数返回一个 UUID：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gen_random_uuid                     <span class="token operator">|</span>
<span class="token comment">------------------------------------|</span>
<span class="token number">2</span>d757cf5<span class="token operator">-</span>c18c<span class="token operator">-</span><span class="token number">469</span>c<span class="token operator">-</span><span class="token number">8</span>b5e<span class="token operator">-</span>eed914eacc93<span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数返回的数据类型为 uuid。如果想要生成没有中划线（-）的 UUID 字符串，可以使用 REPLACE 函数：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">replace</span><span class="token punctuation">(</span>gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">,</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">replace</span>                         <span class="token operator">|</span>
<span class="token comment">--------------------------------|</span>
cabbfcdc62c54e2889bdd2b7095f1270<span class="token operator">|</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="returning" tabindex="-1"><a class="header-anchor" href="#returning"><span>RETURNING</span></a></h3><p>在INSERT INTO或者UPDATE的时候在最后面加上RETURNING colname，PostgreSQL会在插入或者更新数据之后会返回你指定的字段。</p><p>示例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> dr<span class="token punctuation">.</span>drug_info_1<span class="token punctuation">(</span><span class="token string">&quot;drug_code&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;11111&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNING</span> <span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="on-conflict" tabindex="-1"><a class="header-anchor" href="#on-conflict"><span>ON CONFLICT</span></a></h3><blockquote><p>注意，ON CONFLICT 只在 PostgreSQL 9.5 以上可用。</p></blockquote><p>翻译为当执行一个操作冲突/矛盾的时候做什么？比如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>INSERT <span class="token return-type class-name">INTO</span> <span class="token function">table_name</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span>value_list<span class="token punctuation">)</span>
ON CONFLICT <span class="token class-name">target</span> action<span class="token punctuation">;</span>

<span class="token operator">--</span> 示例
insert <span class="token keyword">into</span> azrng<span class="token punctuation">.</span>user<span class="token return-type class-name"><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token keyword">value</span><span class="token punctuation">,</span>expire_time<span class="token punctuation">)</span></span> values <span class="token punctuation">(</span>&#39;<span class="token punctuation">{</span>lockKey<span class="token punctuation">}</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">{</span>lockValue<span class="token punctuation">}</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">{</span>SystemDateTime<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">)</span><span class="token punctuation">:</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span><span class="token class-name">dd</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">}</span>&#39;<span class="token punctuation">)</span> <span class="token return-type class-name">ON</span> CONFLICT <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token class-name">DO</span> NOTHING<span class="token punctuation">;</span>
<span class="token operator">--</span> 如果没有插入成功返回<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果插入的数据重复，那么做什么操作？ target 可以是：</p><ul><li>(column_name)：一个字段名</li><li>ON CONSTRAINT constraint_name：其中的 constraint_name 可以是一个唯一约束的名字</li><li>WHERE predicate：带谓语的 WHERE 子句</li></ul><p>action 可以是：</p><ul><li>DO NOTHING：当记录存在时，什么都不做</li><li>DO UPDATE SET column_1 = value_1, … WHERE condition：当记录存在时，更新表中的一些字段</li></ul><h2 id="空间插件" tabindex="-1"><a class="header-anchor" href="#空间插件"><span>空间插件</span></a></h2><h3 id="postgis" tabindex="-1"><a class="header-anchor" href="#postgis"><span>postgis</span></a></h3><p>Postgresql(带postgis扩展插件) 在Docker下的部署：https://blog.csdn.net/weixin_45263494/article/details/122264023</p>`,117);function k(m,v){const e=p("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[s("资料："),n("a",u,[s("http://postgres.cn/docs/12/functions-json.html"),c(e)])]),d])}const g=t(i,[["render",k],["__file","hanshu.html.vue"]]),y=JSON.parse(`{"path":"/dataBase/postgresql/hanshu.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"hanshu","slug":"fr843x","docsId":"56801437","description":"系统操作 pg_get_viewdef 参数说明 regclass oid：指定要检索其定义的视图的关系 OID（Object IDentifier）。 pretty_bool boolean DEFAULT true：一个可选参数，用于指定是否对结果进行美化。默认值为 true，即返回美化后的定义。 查询 unnest 列转行 replace 将某一...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/postgresql/hanshu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"函数"}],["meta",{"property":"og:description","content":"系统操作 pg_get_viewdef 参数说明 regclass oid：指定要检索其定义的视图的关系 OID（Object IDentifier）。 pretty_bool boolean DEFAULT true：一个可选参数，用于指定是否对结果进行美化。默认值为 true，即返回美化后的定义。 查询 unnest 列转行 replace 将某一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-10T04:24:41.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-10T04:24:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-10T04:24:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"系统操作","slug":"系统操作","link":"#系统操作","children":[{"level":3,"title":"pg_get_viewdef","slug":"pg-get-viewdef","link":"#pg-get-viewdef","children":[]}]},{"level":2,"title":"查询","slug":"查询","link":"#查询","children":[{"level":3,"title":"unnest","slug":"unnest","link":"#unnest","children":[]},{"level":3,"title":"replace","slug":"replace","link":"#replace","children":[]},{"level":3,"title":"COALESCE","slug":"coalesce","link":"#coalesce","children":[]},{"level":3,"title":"NULLIF","slug":"nullif","link":"#nullif","children":[]},{"level":3,"title":"SUBSTR","slug":"substr","link":"#substr","children":[]},{"level":3,"title":"convert_to","slug":"convert-to","link":"#convert-to","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"字符串连接","slug":"字符串连接","link":"#字符串连接","children":[]},{"level":3,"title":"to_char","slug":"to-char","link":"#to-char","children":[]},{"level":3,"title":"Case","slug":"case","link":"#case","children":[]},{"level":3,"title":"With","slug":"with","link":"#with","children":[]},{"level":3,"title":"Limit/Offset","slug":"limit-offset","link":"#limit-offset","children":[]},{"level":3,"title":"Row_number","slug":"row-number","link":"#row-number","children":[]},{"level":3,"title":"string_to_array","slug":"string-to-array","link":"#string-to-array","children":[]},{"level":3,"title":"any","slug":"any","link":"#any","children":[]},{"level":3,"title":"INTERVAL","slug":"interval","link":"#interval","children":[]},{"level":3,"title":"pg_column_size","slug":"pg-column-size","link":"#pg-column-size","children":[]},{"level":3,"title":"split_part","slug":"split-part","link":"#split-part","children":[]},{"level":3,"title":"Json","slug":"json","link":"#json","children":[{"level":4,"title":"操作符","slug":"操作符","link":"#操作符","children":[{"level":5,"title":"#>","slug":"","link":"#","children":[]},{"level":5,"title":"#>>","slug":"-1","link":"#-1","children":[]},{"level":5,"title":"@>","slug":"-2","link":"#-2","children":[]}]},{"level":4,"title":"Json处理","slug":"json处理","link":"#json处理","children":[{"level":5,"title":"jsonb_path_query","slug":"jsonb-path-query","link":"#jsonb-path-query","children":[]},{"level":5,"title":"jsonb_path_query_array","slug":"jsonb-path-query-array","link":"#jsonb-path-query-array","children":[]},{"level":5,"title":"jsonb_array_elements_text","slug":"jsonb-array-elements-text","link":"#jsonb-array-elements-text","children":[]}]}]},{"level":3,"title":"recursive","slug":"recursive","link":"#recursive","children":[]},{"level":3,"title":"格式转换","slug":"格式转换","link":"#格式转换","children":[{"level":4,"title":"query_to_xml","slug":"query-to-xml","link":"#query-to-xml","children":[]}]},{"level":3,"title":"全文搜索","slug":"全文搜索","link":"#全文搜索","children":[{"level":4,"title":"tsvector","slug":"tsvector","link":"#tsvector","children":[]}]}]},{"level":2,"title":"筛选","slug":"筛选","link":"#筛选","children":[{"level":3,"title":"Like","slug":"like","link":"#like","children":[]},{"level":3,"title":"~","slug":"-3","link":"#-3","children":[]}]},{"level":2,"title":"随机数","slug":"随机数","link":"#随机数","children":[{"level":3,"title":"random","slug":"random","link":"#random","children":[{"level":4,"title":"基础用法","slug":"基础用法","link":"#基础用法","children":[]},{"level":4,"title":"设置随机种子","slug":"设置随机种子","link":"#设置随机种子","children":[]},{"level":4,"title":"生成指定范围的随机数","slug":"生成指定范围的随机数","link":"#生成指定范围的随机数","children":[]},{"level":4,"title":"生成验证码","slug":"生成验证码","link":"#生成验证码","children":[]},{"level":4,"title":"生成遵循正态分布随机数","slug":"生成遵循正态分布随机数","link":"#生成遵循正态分布随机数","children":[]},{"level":4,"title":"生成随机字符串","slug":"生成随机字符串","link":"#生成随机字符串","children":[{"level":5,"title":"生成固定长度随机字符串","slug":"生成固定长度随机字符串","link":"#生成固定长度随机字符串","children":[]},{"level":5,"title":"生成可变长度的随机字符串","slug":"生成可变长度的随机字符串","link":"#生成可变长度的随机字符串","children":[]}]},{"level":4,"title":"生成随机日期和时间","slug":"生成随机日期和时间","link":"#生成随机日期和时间","children":[]},{"level":4,"title":"获取表中的随机记录","slug":"获取表中的随机记录","link":"#获取表中的随机记录","children":[]}]},{"level":3,"title":"生成 UUID","slug":"生成-uuid","link":"#生成-uuid","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"RETURNING","slug":"returning","link":"#returning","children":[]},{"level":3,"title":"ON CONFLICT","slug":"on-conflict","link":"#on-conflict","children":[]}]},{"level":2,"title":"空间插件","slug":"空间插件","link":"#空间插件","children":[{"level":3,"title":"postgis","slug":"postgis","link":"#postgis","children":[]}]}],"git":{"createdTime":1695484404000,"updatedTime":1707539081000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":5},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2}]},"readingTime":{"minutes":11.48,"words":3443},"filePathRelative":"dataBase/postgresql/hanshu.md","localizedDate":"2023年9月3日","excerpt":"<h2>系统操作</h2>\\n<h3>pg_get_viewdef</h3>\\n<div class=\\"language-plsql\\" data-ext=\\"plsql\\" data-title=\\"plsql\\"><pre class=\\"language-plsql\\"><code><span class=\\"token comment\\">-- 获取指定视图的DDL语句</span>\\n<span class=\\"token keyword\\">SELECT</span> pg_get_viewdef<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'orders.cr_order_merge_view'</span><span class=\\"token operator\\">:</span><span class=\\"token operator\\">:</span>regclass<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,y as data};
