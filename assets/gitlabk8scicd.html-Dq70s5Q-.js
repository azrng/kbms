import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-SmdjEsew.js";const t={};function p(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="前置条件" tabindex="-1"><a class="header-anchor" href="#前置条件"><span>前置条件</span></a></h2><ul><li>一台Linux服务器，安装好Docker</li><li>一个K8s集群环境</li><li>一个Gitlab仓库，可以自己搭建或者直接使用官方仓库(中文版gitlab:<a href="https://jihulab.com/" target="_blank" rel="noopener noreferrer">https://jihulab.com/</a>)</li><li>一个镜像仓库，用于存储docker镜像，这里我用的华为的镜像仓库 （<a href="https://www.huaweicloud.com/product/swr.html" target="_blank" rel="noopener noreferrer">https://www.huaweicloud.com/product/swr.html</a>）</li><li>本文的操作基于<a href="https://jihulab.com/" target="_blank" rel="noopener noreferrer">https://jihulab.com/</a> 仓库进行</li></ul><h2 id="部署gitlab-runner" tabindex="-1"><a class="header-anchor" href="#部署gitlab-runner"><span>部署Gitlab-Runner</span></a></h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>gitlab-runner 安装参考 <a href="https://docs.gitlab.com/runner/install/" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/runner/install/</a><br> 或者在 gitlab仓库的群组左侧菜单** CI/CD--Runner **页面点击&quot;注册一个群组runner&quot;按钮，里面有快速安装介绍</p><h3 id="注册" tabindex="-1"><a class="header-anchor" href="#注册"><span>注册</span></a></h3><p><strong>概述</strong><br> 注册的目的是将本地安装的gitlab-runner和gitlab仓库建立连接，以便代码变动时gitlab-runner会收到通知<br><strong>快速注册命令</strong>：<br><code>sudo gitlab-runner register --url https://jihulab.com/ --registration-token {yourtoken}</code><br> （在上一步<strong>安装</strong>中的**&quot;注册一个群组runner&quot;**按钮中有这条指令，里面包含了你的token）</p><p>执行完上方的注册命令后，会进入注册交互界面</p><ol><li>前两个网址和token的输入跳过，因为我们已经填了</li><li>description描述可以自己定义</li><li>tags这个需要认真填一下，这个tag将来需要在gitlab的ci文件中引用，比如你这个runner主要用于构建代码的化就填build，如果用来发布项目就填deploy等等</li><li>最后会要天一个executer，这个指的是runner的基础运行环境，这里填 docker:stable</li></ol><p>至此gitlabrunner已经注册完了</p><h2 id="编写代码和dockerfile" tabindex="-1"><a class="header-anchor" href="#编写代码和dockerfile"><span>编写代码和Dockerfile</span></a></h2><p>我创建了一个netcore项目，Dockerfile如下：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-dockerfile"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/sdk:6.0 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /source</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## copy csproj and restore as distinct layers</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dotnet restore NetCoreTest/NetCoreTest.csproj </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dotnet publish -c Release -o /app --no-restore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## final stage/image</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mcr.microsoft.com/dotnet/aspnet:6.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=build /app .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ASPNETCORE_URLS http://*:5000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TZ Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dotnet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NetCoreTest.dll&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="设置ci-cd变量" tabindex="-1"><a class="header-anchor" href="#设置ci-cd变量"><span>设置CI/CD变量</span></a></h2><p>在gitlab的<strong>设置-CI/CD-变量</strong>中点击**添加变量. **分别添加以下变量</p><ul><li>CI_REGISTRY ： <a href="http://swr.cn-north-1.myhuaweicloud.com" target="_blank" rel="noopener noreferrer">swr.cn-north-1.myhuaweicloud.com</a> （docker仓库登录地址，具体根据自己的镜像仓库而定）</li><li>CI_REGISTRY_PASSWORD： password （docker仓库登录密码）</li><li>CI_REGISTRY_USER：myname （docker仓库登录用户名）</li><li>CI_REGISTRY_REPOSITORY： <a href="http://swr.cn-north-1.myhuaweicloud.com/first" target="_blank" rel="noopener noreferrer">swr.cn-north-1.myhuaweicloud.com/first</a> (这个是仓库的分组地址,大部分的镜像仓库都有这样一个分组地址，一般就是仓库登录地址加分组名)</li><li>CI_KUBE_CONFIG_URL： <a href="http://192.168.0.246:30061/k3s.yaml" target="_blank" rel="noopener noreferrer">http://192.168.0.1:8080/mykubeconfig.yaml</a> （k8s的kubeconfig文件，如果不用密钥文件也可以用其他的加密途径，我这里为了方便直接在k8s集群中开了一个密钥文件下载服务。k8s的密钥文件默认在 /root/.kube/config，k3s在 /etc/rancher/k3s/k3s.yaml。注意修改文件中的ip地址为客户端可以访问的地址）</li></ul><h2 id="编写gitlab-ci-yaml" tabindex="-1"><a class="header-anchor" href="#编写gitlab-ci-yaml"><span>编写gitlab-ci.yaml</span></a></h2><p>下面是我配置的yaml文件，如果你上面的环境变量设置的和我一样的化，可以直接用。每一行的意思都写在里面了</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#构建步骤，先执行build，然后执行deploy</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#设置全局的环境变量，所有的stage中都可以引用这里面的变量</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">variables</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #docker 镜像地址，由Docker镜像仓库地址(CI_REGISTRY_REPOSITORY)+项目地址(CI_PROJECT_PATH_SLUG)+项目分支(CI_COMMIT_REF_SLUG):镜像版本号(CI_PIPELINE_IID)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  CI_APPLICATION_REPOSITORY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$CI_REGISTRY_REPOSITORY/$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG:$CI_PIPELINE_IID&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #docker容器名称,项目地址+版本号</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  CI_CONTAINER_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #k8s命名空间 项目地址+项目id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  CI_NAMESPACE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$CI_PROJECT_PATH_SLUG-$CI_PROJECT_ID&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## ingress访问地址 项目地址+分支+项目id+你的二级域名(我这里写死了&quot;mynetcore.com&quot;，可以配置到ci环境变量中)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  CI_HOST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG-$CI_PROJECT_ID.mynetcore.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## k8s镜像拉取密钥,用于访问你的私人镜像仓库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  secret_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;gitlab-secret&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#构建镜像，并上传至镜像仓库</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build-job</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:       </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #表示用最在最新的docker容器中运行服务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker:latest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #对应上面Stages中的build步骤</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   #在容器中再起一个docker:dind容器，后面的script命令会在该容器内运行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker:dind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  before_script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     #登录我们自己的镜像服务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker login -u &quot;$CI_REGISTRY_USER&quot; -p &quot;$CI_REGISTRY_PASSWORD&quot; $CI_REGISTRY</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    #打印所有的环境变量，用于调试</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    - env</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ## 构建镜像</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    - docker build --pull -t &quot;$CI_APPLICATION_REPOSITORY&quot; .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ## 推送镜像至仓库</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    - docker push $CI_APPLICATION_REPOSITORY</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#部署项目到k8s集群</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">deploy-job</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:      </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">deploy</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">production</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker:stable</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">env</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">install_dependence</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">install_kubectl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kubectl_publish</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">publish_finish</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  #这个就表示用我们自己的gitlab-runner执行了，&quot;deploy&quot;就是在注册gitlabrunner中填写的tag值。上面的build步骤没有写tag，他会用官方提供的一个默认runner执行(有使用时长限制)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">deploy</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">.function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">function</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> |</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  #这一步初始化一下容器的环境，更新apk包，安装基础的一些软件</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  function install_dependence() {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    echo -e &#39;https://mirrors.aliyun.com/alpine/v3.6/main/\\nhttps://mirrors.aliyun.com/alpine/v3.6/community/&#39; &gt; /etc/apk/repositories</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    apk update</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    apk add -U openssl curl tar gzip bash ca-certificates git gettext</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  #安装kubectl命令工具</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  function install_kubectl() {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    #下载kubectl</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    #给kubectl赋执行权限</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    chmod +x ./kubectl &amp;&amp; mv ./kubectl /usr/local/bin/kubectl</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    #创建kubectl 的执行密钥文件夹，然后将kubectl的config配置文件下载到~/.kube/config。$CI_KUBE_CONFIG_URL 这个是我开了一个内网服务用于下载kubeconfig</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    mkdir ~/.kube &amp;&amp; curl -o ~/.kube/config $CI_KUBE_CONFIG_URL</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ## 部署yaml</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  function kubectl_publish(){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   #首先创建命名空间（检测命名空间是否存在，不存在则创建）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    kubectl describe namespace &quot;$CI_NAMESPACE&quot; || kubectl create namespace &quot;$CI_NAMESPACE&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ## 创建 docker镜像的访问密钥，( 检测密钥是否存在，不存在则创建&quot;kubectl create secret....&quot;。最后后将密钥更新到当前项目的命名空间&quot;kubectl apply ...&quot;)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    kubectl describe secret $secret_name || kubectl create secret -n &quot;$CI_NAMESPACE&quot;  docker-registry $secret_name --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD  -o yaml --dry-run=client  | kubectl apply -n $CI_NAMESPACE -f -</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ## 将环境变量写入到yaml文件中，然后删除掉yaml中上次部署的资源</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    envsubst &lt; kube.yaml | kubectl delete -n $CI_NAMESPACE -f - || echo &quot;don&#39;t need delete&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ## 将环境变量写入到yaml文件中，然后部署</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    envsubst &lt; kube.yaml | kubectl apply -n $CI_NAMESPACE -f -</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  #部署完成，输出一下</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  function publish_finish(){</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    echo &quot;visit url is http://$CI_HOST&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    echo &quot;Application successfully deployed.&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#这个是整个ci最先执行的语句，里面可以预定义函数和变量等</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">before_script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #执行上面的 .function: &amp;function</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">function</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="kube-yaml" tabindex="-1"><a class="header-anchor" href="#kube-yaml"><span>kube.yaml</span></a></h3><p>这个是ci脚本中引用的项目k8s的yaml模板文件,下面是我的配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    matchLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_APPLICATION_REPOSITORY</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      imagePullSecrets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$secret_name</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Service</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">NodePort</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      targetPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Ingress</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ingress-$CI_CONTAINER_NAME</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_HOST</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pathType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Prefix</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        backend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$CI_CONTAINER_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,22)]))}const r=i(t,[["render",p]]),d=JSON.parse('{"path":"/cloud/k8s/gitlabk8scicd.html","title":"Gitlab和K8S自动化发布","lang":"zh-CN","frontmatter":{"title":"Gitlab和K8S自动化发布","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"gitlabhek8szidonghuafabu","slug":"ye0rclzm91y0wl9o","docsId":"110427714","description":"前置条件 一台Linux服务器，安装好Docker 一个K8s集群环境 一个Gitlab仓库，可以自己搭建或者直接使用官方仓库(中文版gitlab:https://jihulab.com/) 一个镜像仓库，用于存储docker镜像，这里我用的华为的镜像仓库 （https://www.huaweicloud.com/product/swr.html） 本...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gitlab和K8S自动化发布\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T02:59:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/k8s/gitlabk8scicd.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Gitlab和K8S自动化发布"}],["meta",{"property":"og:description","content":"前置条件 一台Linux服务器，安装好Docker 一个K8s集群环境 一个Gitlab仓库，可以自己搭建或者直接使用官方仓库(中文版gitlab:https://jihulab.com/) 一个镜像仓库，用于存储docker镜像，这里我用的华为的镜像仓库 （https://www.huaweicloud.com/product/swr.html） 本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T02:59:14.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T02:59:14.000Z"}]]},"git":{"createdTime":1695541854000,"updatedTime":1726023554000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","username":"","email":"zhang.yunpeng@synyi.com","commits":2}]},"readingTime":{"minutes":5.34,"words":1602},"filePathRelative":"cloud/k8s/gitlabk8scicd.md","excerpt":"<h2>前置条件</h2>\\n<ul>\\n<li>一台Linux服务器，安装好Docker</li>\\n<li>一个K8s集群环境</li>\\n<li>一个Gitlab仓库，可以自己搭建或者直接使用官方仓库(中文版gitlab:<a href=\\"https://jihulab.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://jihulab.com/</a>)</li>\\n<li>一个镜像仓库，用于存储docker镜像，这里我用的华为的镜像仓库 （<a href=\\"https://www.huaweicloud.com/product/swr.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.huaweicloud.com/product/swr.html</a>）</li>\\n<li>本文的操作基于<a href=\\"https://jihulab.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://jihulab.com/</a> 仓库进行</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
