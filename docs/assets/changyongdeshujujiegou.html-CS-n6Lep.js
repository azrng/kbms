import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-Bw62I61B.js";const p={},o=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">MyStructure</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Array/ArrayList/List/LinkedList/Queue/Stack/HastSet/SortedSet/Hashtable/SortedList/Dictionary/SortedDictionary</span>
    <span class="token doc-comment comment">/// IEnumerable、ICollection、IList、IQueryable</span>
    <span class="token doc-comment comment">/// 接口是标识功能的，不同的接口拆开就是为接口隔离，虽然我们接口内容也可能重复。</span>
    <span class="token doc-comment comment">/// </span>
    <span class="token doc-comment comment">/// IEnumerable 任何数据集合都实现了的，为不同的数据结构提供了统一的数据访问方式，这个就是迭代器模式。</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CollectionDemo</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//1 内存连续存储，节约空间，可以索引访问，读取快，增删慢。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> Array、ArrayList、List&lt;T&gt;</span>

            <span class="token comment">//Array</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Array：在内存上连续分配的，而且元素类型是一样的</span>
                <span class="token comment">//可以坐标访问  读取快--增删慢，长度不变</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************Array***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> stringArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;234&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//ArrayList</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//ArrayList：不定长度的，连续分配的；</span>
                <span class="token comment">//元素没有类型限制，任何元素都是当成object处理，如果是值类型，会有装箱操作</span>
                <span class="token comment">//读取快--增删慢</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************ArrayList***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ArrayList</span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;TianYa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Add增加长度</span>
                <span class="token comment">//删除数据</span>
                <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> arrayList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                arrayList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;TianYa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//List&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//List：也是Array，内存上都是连续摆放、不定长、泛型，保证类型安全，避免装箱拆箱</span>
                <span class="token comment">//读取快--增删慢</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************List&lt;T&gt;***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//stringList[0] = &quot;123&quot;; //异常的</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> intList<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> Array、ArrayList、List&lt;T&gt;</span>

            <span class="token comment">//2 非连续摆放，存储数据+地址，找数据的话就只能顺序查找，读取慢，增删快。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>

            <span class="token comment">//LinkedList&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//LinkedList：链表，泛型的特点，元素不连续分配，每个元素都有记录前后节点。</span>
                <span class="token comment">//节点值可以重复</span>
                <span class="token comment">//能不能下标访问？不能，找元素就只能遍历  查找不方便</span>
                <span class="token comment">//增删 就比较方便</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************LinkedList&lt;T&gt;***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LinkedList<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddFirst</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddLast</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name"><span class="token keyword">bool</span></span> isContain <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">LinkedListNode<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> node123 <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//元素123的位置  从头查找</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddBefore</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddBefore</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">AddAfter</span><span class="token punctuation">(</span>node123<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                linkedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>node123<span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">RemoveFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">RemoveLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                linkedList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Queue&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Queue队列： 就是链表  先进先出  放任务延迟执行；A不断写入日志任务，B不断获取任务去执行。</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************Queue&lt;T&gt;***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//入队</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;five&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> numbers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Dequeuing &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出队</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Peek at next item to dequeue: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> numbers<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Dequeuing &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> queueCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> queueCopy<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;queueCopy.Contains(\\&quot;four\\&quot;) = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">queueCopy<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                queueCopy<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;queueCopy.Count = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">queueCopy<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Stack&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Stack栈：就是链表  先进后出  解析表达式目录树的时候，先产生的数据后使用。</span>
                <span class="token comment">//操作记录为命令，撤销的时候是倒序的</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************Stack&lt;T&gt;******************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                numbers<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;five&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放进去 入栈</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> numbers<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Pop &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取并移除 出栈</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Peek at next item to dequeue: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> numbers<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取不移除</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Pop &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">numbers<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stackCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number <span class="token keyword">in</span> stackCopy<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;stackCopy.Contains(\\&quot;four\\&quot;) = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stackCopy<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stackCopy<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;stackCopy.Count = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stackCopy<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>

            <span class="token comment">//3 Set纯粹的集合，容器，东西丢进去，唯一性，无序的。</span>
            <span class="token preprocessor property">#<span class="token directive keyword">region</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>

            <span class="token comment">//HashSet&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//集合：hash分布，元素间没关系，动态增加容量  去重</span>
                <span class="token comment">//统计用户IP；IP投票；交叉并补---二次好友/间接关注/粉丝合集</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************HashSet&lt;T&gt;***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;689&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> hashSet<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token punctuation">{</span>
                    <span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> hashSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;689&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;789&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">SymmetricExceptWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//补</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">ExceptWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差</span>
                    hashSet1<span class="token punctuation">.</span><span class="token function">IntersectWith</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交</span>
                <span class="token punctuation">}</span>
                hashSet<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                hashSet<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedSet&lt;T&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//排序的集合：去重  而且排序  </span>
                <span class="token comment">//统计排名--每统计一个就丢进去集合</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************SortedSet&lt;T&gt;***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//IComparer&lt;T&gt; comparer  自定义对象要排序，就用这个指定</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;689&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> sortedSet<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> sortedSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedSet<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;689&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;12435&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">SymmetricExceptWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//补</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">UnionWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">ExceptWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//差</span>
                    sortedSet1<span class="token punctuation">.</span><span class="token function">IntersectWith</span><span class="token punctuation">(</span>sortedSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交</span>
                <span class="token punctuation">}</span>

                sortedSet<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedSet<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>

            <span class="token comment">//读取&amp;增删都快？ 有 hash散列 字典</span>
            <span class="token comment">//key-value，一段连续有限空间放value(开辟的空间比用到的多，hash是用空间换性能)，基于key散列计算得到地址索引，这样读取快</span>
            <span class="token comment">//增删也快，删除时也是计算位置，增加也不影响别人</span>
            <span class="token comment">//肯定会出现2个key(散列冲突)，散列结果一致时可以让第二次的+1</span>
            <span class="token comment">//可能会造成效率的降低，尤其是数据量大的情况下，以前测试过Dictionary在3w条左右性能就开始下降的厉害</span>

            <span class="token preprocessor property">#<span class="token directive keyword">region</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>

            <span class="token comment">//Hashtable</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//Hashtable：key-value  体积可以动态增加，拿着key计算一个地址，然后放入key - value</span>
                <span class="token comment">//object-装箱拆箱  如果不同的key得到相同的地址，第二个在前面地址上 + 1</span>
                <span class="token comment">//查找的时候，如果地址对应数据的key不对，那就 + 1查找。。</span>
                <span class="token comment">//浪费了空间，Hashtable是基于数组实现</span>
                <span class="token comment">//查找个数据  一次定位；增删 一次定位；增删改查 都很快</span>
                <span class="token comment">//浪费空间，数据太多，重复定位，效率就下去了</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************Hashtable***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                table<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">567</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4562</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                table<span class="token punctuation">[</span><span class="token string">&quot;TianYa&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">DictionaryEntry</span> objDE <span class="token keyword">in</span> table<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>objDE<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>objDE<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//线程安全</span>
                Hashtable<span class="token punctuation">.</span><span class="token function">Synchronized</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只有一个线程写  多个线程读</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//Dictionary</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//字典：泛型，key - value，增删改查 都很快，有序的</span>
                <span class="token comment">//字典不是线程安全 ConcurrentDictionary</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************Dictionary***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HaHa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;HoHo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;HeHe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;HiHi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;HuHu1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;HuHu&quot;</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;HuHu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">, Value:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedDictionary</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//排序字典</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************SortedDictionary***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedDictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;HaHa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;HoHo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;HeHe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;HiHi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;HuHu1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;HuHu&quot;</span><span class="token punctuation">;</span>
                dic<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;HuHu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> dic<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Key:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">, Value:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//SortedList</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//&quot;a&quot;.GetHashCode();</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;***************SortedList***************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SortedList</span> sortedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SortedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IComparer</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;First&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Second&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Third&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                sortedList<span class="token punctuation">[</span><span class="token string">&quot;Third&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;~~&quot;</span><span class="token punctuation">;</span><span class="token comment">//</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Fourth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Fourth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重复的Key Add会错</span>
                sortedList<span class="token punctuation">[</span><span class="token string">&quot;Fourth&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;!!!&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> keyList <span class="token operator">=</span> sortedList<span class="token punctuation">.</span><span class="token function">GetKeyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> valueList <span class="token operator">=</span> sortedList<span class="token punctuation">.</span><span class="token function">GetValueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                sortedList<span class="token punctuation">.</span><span class="token function">TrimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于最小化集合的内存开销</span>

                sortedList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;Third&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sortedList<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>

            <span class="token punctuation">{</span>
                <span class="token comment">//ConcurrentQueue 线程安全版本的Queue</span>
                <span class="token comment">//ConcurrentStack 线程安全版本的Stack</span>
                <span class="token comment">//ConcurrentBag 线程安全版本的对象集合</span>
                <span class="token comment">//ConcurrentDictionary 线程安全版本的Dictionary</span>
                <span class="token comment">//BlockingCollection</span>
            <span class="token punctuation">}</span>

            <span class="token punctuation">{</span>
                <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;passionfruit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mango&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blueberry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grape&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;strawberry&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>fruit <span class="token operator">=&gt;</span> fruit<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> query<span class="token punctuation">)</span><span class="token comment">//遍历才会去查询比较  迭代器yield</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>

                <span class="token class-name">IQueryable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> queryable <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AsQueryable</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> queryable<span class="token punctuation">)</span><span class="token comment">//表达式目录树的解析，延迟到遍历的时候才去执行  EF的延迟查询</span>
                <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),c=[o];function e(u,i){return s(),a("div",null,c)}const r=n(p,[["render",e],["__file","changyongdeshujujiegou.html.vue"]]),d=JSON.parse(`{"path":"/dotnet/csharp/duixiangheleixing/changyongdeshujujiegou.html","title":"常用的数据结构","lang":"zh-CN","frontmatter":{"title":"常用的数据结构","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"changyongdeshujujiegou","slug":"dk8yg1","docsId":"100364486","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/changyongdeshujujiegou.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"常用的数据结构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用的数据结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.7,"words":1711},"filePathRelative":"dotnet/csharp/duixiangheleixing/changyongdeshujujiegou.md","localizedDate":"2023年10月22日","excerpt":"<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Collections</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Collections<span class=\\"token punctuation\\">.</span>Generic</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Linq</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">MyStructure</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// Array/ArrayList/List/LinkedList/Queue/Stack/HastSet/SortedSet/Hashtable/SortedList/Dictionary/SortedDictionary</span>\\n    <span class=\\"token doc-comment comment\\">/// IEnumerable、ICollection、IList、IQueryable</span>\\n    <span class=\\"token doc-comment comment\\">/// 接口是标识功能的，不同的接口拆开就是为接口隔离，虽然我们接口内容也可能重复。</span>\\n    <span class=\\"token doc-comment comment\\">/// </span>\\n    <span class=\\"token doc-comment comment\\">/// IEnumerable 任何数据集合都实现了的，为不同的数据结构提供了统一的数据访问方式，这个就是迭代器模式。</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CollectionDemo</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//1 内存连续存储，节约空间，可以索引访问，读取快，增删慢。</span>\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> Array、ArrayList、List&lt;T&gt;</span>\\n\\n            <span class=\\"token comment\\">//Array</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//Array：在内存上连续分配的，而且元素类型是一样的</span>\\n                <span class=\\"token comment\\">//可以坐标访问  读取快--增删慢，长度不变</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************Array***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> intArray <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">int</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                intArray<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> stringArray <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"234\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//ArrayList</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//ArrayList：不定长度的，连续分配的；</span>\\n                <span class=\\"token comment\\">//元素没有类型限制，任何元素都是当成object处理，如果是值类型，会有装箱操作</span>\\n                <span class=\\"token comment\\">//读取快--增删慢</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************ArrayList***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">ArrayList</span> arrayList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ArrayList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                arrayList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"TianYa\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                arrayList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">32</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//Add增加长度</span>\\n                <span class=\\"token comment\\">//删除数据</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> <span class=\\"token keyword\\">value</span> <span class=\\"token operator\\">=</span> arrayList<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                arrayList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                arrayList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"TianYa\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//List&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//List：也是Array，内存上都是连续摆放、不定长、泛型，保证类型安全，避免装箱拆箱</span>\\n                <span class=\\"token comment\\">//读取快--增删慢</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************List&lt;T&gt;***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span> intList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n                intList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                intList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> stringList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//stringList[0] = \\"123\\"; //异常的</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> intList<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span> Array、ArrayList、List&lt;T&gt;</span>\\n\\n            <span class=\\"token comment\\">//2 非连续摆放，存储数据+地址，找数据的话就只能顺序查找，读取慢，增删快。</span>\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>\\n\\n            <span class=\\"token comment\\">//LinkedList&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//LinkedList：链表，泛型的特点，元素不连续分配，每个元素都有记录前后节点。</span>\\n                <span class=\\"token comment\\">//节点值可以重复</span>\\n                <span class=\\"token comment\\">//能不能下标访问？不能，找元素就只能遍历  查找不方便</span>\\n                <span class=\\"token comment\\">//增删 就比较方便</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************LinkedList&lt;T&gt;***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">LinkedList<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span> linkedList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">LinkedList<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddFirst</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">456</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> isContain <span class=\\"token operator\\">=</span> linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">LinkedListNode<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span> node123 <span class=\\"token operator\\">=</span> linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Find</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//元素123的位置  从头查找</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddBefore</span><span class=\\"token punctuation\\">(</span>node123<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddBefore</span><span class=\\"token punctuation\\">(</span>node123<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddAfter</span><span class=\\"token punctuation\\">(</span>node123<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">456</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>node123<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveFirst</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                linkedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//Queue&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//Queue队列： 就是链表  先进先出  放任务延迟执行；A不断写入日志任务，B不断获取任务去执行。</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************Queue&lt;T&gt;***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">Queue<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> numbers <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Queue<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//入队</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"three\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"four\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"four\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Enqueue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"five\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> number <span class=\\"token keyword\\">in</span> numbers<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Dequeuing '</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//出队</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Peek at next item to dequeue: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\"> numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Peek</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Dequeuing '</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Dequeue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token class-name\\">Queue<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> queueCopy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Queue<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> number <span class=\\"token keyword\\">in</span> queueCopy<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"queueCopy.Contains(\\\\\\"four\\\\\\") = </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">queueCopy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"four\\"</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                queueCopy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"queueCopy.Count = </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">queueCopy<span class=\\"token punctuation\\">.</span>Count</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//Stack&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//Stack栈：就是链表  先进后出  解析表达式目录树的时候，先产生的数据后使用。</span>\\n                <span class=\\"token comment\\">//操作记录为命令，撤销的时候是倒序的</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************Stack&lt;T&gt;******************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">Stack<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> numbers <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Stack<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"three\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"four\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"five\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//放进去 入栈</span>\\n\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> number <span class=\\"token keyword\\">in</span> numbers<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Pop '</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//获取并移除 出栈</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Peek at next item to dequeue: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\"> numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Peek</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//获取不移除</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Pop '</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token class-name\\">Stack<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> stackCopy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Stack<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>numbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> number <span class=\\"token keyword\\">in</span> stackCopy<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"stackCopy.Contains(\\\\\\"four\\\\\\") = </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">stackCopy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"four\\"</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                stackCopy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"stackCopy.Count = </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">stackCopy<span class=\\"token punctuation\\">.</span>Count</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span> 链表（LinkedList&lt;T&gt;、Queue&lt;T&gt;、Stack&lt;T&gt;）</span>\\n\\n            <span class=\\"token comment\\">//3 Set纯粹的集合，容器，东西丢进去，唯一性，无序的。</span>\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>\\n\\n            <span class=\\"token comment\\">//HashSet&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//集合：hash分布，元素间没关系，动态增加容量  去重</span>\\n                <span class=\\"token comment\\">//统计用户IP；IP投票；交叉并补---二次好友/间接关注/粉丝合集</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************HashSet&lt;T&gt;***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">HashSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> hashSet <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">HashSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"689\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"456\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> hashSet<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">.</span>Count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12345\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">HashSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> hashSet1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">HashSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"689\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"789\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SymmetricExceptWith</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//补</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UnionWith</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//并</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ExceptWith</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//差</span>\\n                    hashSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IntersectWith</span><span class=\\"token punctuation\\">(</span>hashSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//交</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                hashSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//SortedSet&lt;T&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//排序的集合：去重  而且排序  </span>\\n                <span class=\\"token comment\\">//统计排名--每统计一个就丢进去集合</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************SortedSet&lt;T&gt;***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">SortedSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> sortedSet <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SortedSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//IComparer&lt;T&gt; comparer  自定义对象要排序，就用这个指定</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"689\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"456\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> sortedSet<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">.</span>Count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12345\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">SortedSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> sortedSet1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SortedSet<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"689\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"456\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"12435\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SymmetricExceptWith</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//补</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UnionWith</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//并</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ExceptWith</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//差</span>\\n                    sortedSet1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">IntersectWith</span><span class=\\"token punctuation\\">(</span>sortedSet<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//交</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedSet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span> Set集合（HashSet&lt;T&gt;、SortedSet&lt;T&gt;）</span>\\n\\n            <span class=\\"token comment\\">//读取&amp;增删都快？ 有 hash散列 字典</span>\\n            <span class=\\"token comment\\">//key-value，一段连续有限空间放value(开辟的空间比用到的多，hash是用空间换性能)，基于key散列计算得到地址索引，这样读取快</span>\\n            <span class=\\"token comment\\">//增删也快，删除时也是计算位置，增加也不影响别人</span>\\n            <span class=\\"token comment\\">//肯定会出现2个key(散列冲突)，散列结果一致时可以让第二次的+1</span>\\n            <span class=\\"token comment\\">//可能会造成效率的降低，尤其是数据量大的情况下，以前测试过Dictionary在3w条左右性能就开始下降的厉害</span>\\n\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>\\n\\n            <span class=\\"token comment\\">//Hashtable</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//Hashtable：key-value  体积可以动态增加，拿着key计算一个地址，然后放入key - value</span>\\n                <span class=\\"token comment\\">//object-装箱拆箱  如果不同的key得到相同的地址，第二个在前面地址上 + 1</span>\\n                <span class=\\"token comment\\">//查找的时候，如果地址对应数据的key不对，那就 + 1查找。。</span>\\n                <span class=\\"token comment\\">//浪费了空间，Hashtable是基于数组实现</span>\\n                <span class=\\"token comment\\">//查找个数据  一次定位；增删 一次定位；增删改查 都很快</span>\\n                <span class=\\"token comment\\">//浪费空间，数据太多，重复定位，效率就下去了</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************Hashtable***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">Hashtable</span> table <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Hashtable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"123\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"456\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">234</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">456</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">234</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">567</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">32</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4562</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">456</span><span class=\\"token punctuation\\">;</span>\\n                table<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"TianYa\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">456</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DictionaryEntry</span> objDE <span class=\\"token keyword\\">in</span> table<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>objDE<span class=\\"token punctuation\\">.</span>Key<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>objDE<span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token comment\\">//线程安全</span>\\n                Hashtable<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Synchronized</span><span class=\\"token punctuation\\">(</span>table<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//只有一个线程写  多个线程读</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//Dictionary</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//字典：泛型，key - value，增删改查 都很快，有序的</span>\\n                <span class=\\"token comment\\">//字典不是线程安全 ConcurrentDictionary</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************Dictionary***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> dic <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HaHa\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HoHo\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HeHe\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HiHi\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HuHu1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"HuHu\\"</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HuHu\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> dic<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Key:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">item<span class=\\"token punctuation\\">.</span>Key</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">, Value:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">item<span class=\\"token punctuation\\">.</span>Value</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//SortedDictionary</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//排序字典</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************SortedDictionary***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">SortedDictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> dic <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SortedDictionary<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HaHa\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HoHo\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HeHe\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HiHi\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HuHu1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"HuHu\\"</span><span class=\\"token punctuation\\">;</span>\\n                dic<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HuHu\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> dic<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Key:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">item<span class=\\"token punctuation\\">.</span>Key</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">, Value:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">item<span class=\\"token punctuation\\">.</span>Value</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//SortedList</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//\\"a\\".GetHashCode();</span>\\n                Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"***************SortedList***************\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">SortedList</span> sortedList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SortedList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//IComparer</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"First\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Second\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"World\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Third\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                sortedList<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"Third\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"~~\\"</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Fourth\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Fourth\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//重复的Key Add会错</span>\\n                sortedList<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"Fourth\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"!!!\\"</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> keyList <span class=\\"token operator\\">=</span> sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetKeyList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> valueList <span class=\\"token operator\\">=</span> sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetValueList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TrimToSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//用于最小化集合的内存开销</span>\\n\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Third\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                sortedList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span> key-value（Hashtable、Dictionary、SortedDictionary、SortedList）</span>\\n\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//ConcurrentQueue 线程安全版本的Queue</span>\\n                <span class=\\"token comment\\">//ConcurrentStack 线程安全版本的Stack</span>\\n                <span class=\\"token comment\\">//ConcurrentBag 线程安全版本的对象集合</span>\\n                <span class=\\"token comment\\">//ConcurrentDictionary 线程安全版本的Dictionary</span>\\n                <span class=\\"token comment\\">//BlockingCollection</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> fruits <span class=\\"token operator\\">=</span>\\n                <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"apple\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"passionfruit\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"banana\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"mango\\"</span><span class=\\"token punctuation\\">,</span>\\n                    <span class=\\"token string\\">\\"orange\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"blueberry\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"grape\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"strawberry\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token class-name\\">IEnumerable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> query <span class=\\"token operator\\">=</span> fruits<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Where</span><span class=\\"token punctuation\\">(</span>fruit <span class=\\"token operator\\">=&gt;</span> fruit<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> query<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//遍历才会去查询比较  迭代器yield</span>\\n                <span class=\\"token punctuation\\">{</span>\\n\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                <span class=\\"token class-name\\">IQueryable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> queryable <span class=\\"token operator\\">=</span> fruits<span class=\\"token punctuation\\">.</span><span class=\\"token generic-method\\"><span class=\\"token function\\">AsQueryable</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Where</span><span class=\\"token punctuation\\">(</span>s <span class=\\"token operator\\">=&gt;</span> s<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> queryable<span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//表达式目录树的解析，延迟到遍历的时候才去执行  EF的延迟查询</span>\\n                <span class=\\"token punctuation\\">{</span>\\n\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{r as comp,d as data};
