import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,b as t}from"./app-qB9_Bjjp.js";const s="/kbms/common/1655872902959-9e23f82d-c9c9-4764-a040-83c847164e36.png",i={},l=t(`<h2 id="拷贝浏览器" tabindex="-1"><a class="header-anchor" href="#拷贝浏览器"><span>拷贝浏览器</span></a></h2><p>其实 Playwright 默认是到C:\\Users\\用户名\\AppData\\Local\\ms-playwright文件夹下查找依赖的浏览器，我们只需将本机文件夹复制到部署机器的对应文件夹即可。 但更简便的方式，是将浏览器也放到发布文件夹下一起部署。 操作示例</p><ul><li>修改代码，设置查询依赖浏览器路径的环境变量</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>Environment.SetEnvironmentVariable(<span class="token string">&quot;PLAYWRIGHT_BROWSERS_PATH&quot;</span><span class="token punctuation">,</span> Path.Combine(AppDomain.CurrentDomain.BaseDirectory<span class="token punctuation">,</span> <span class="token string">&quot;ms-playwright&quot;</span>));
<span class="token comment">//正式执行</span>
using var playwright = await Playwright.CreateAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改项目文件，设置发布时候执行Task，复制ms-playwright 文件夹到发布文件夹下</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>&lt;Target Name=<span class="token string">&quot;PublishPlaywright&quot;</span> AfterTargets=<span class="token string">&quot;Publish&quot;</span>&gt;
	&lt;ItemGroup&gt;
		&lt;PlaywrightFiles Include=<span class="token string">&quot;$(LOCALAPPDATA)\\ms-playwright\\**\\*.*&quot;</span> /&gt;
	&lt;/ItemGroup&gt;
	&lt;Copy SourceFiles=<span class="token string">&quot;@(PlaywrightFiles)&quot;</span> DestinationFiles=<span class="token string">&quot;$(PublishDir)\\ms-playwright\\%(RecursiveDir)%(Filename)%(Extension)&quot;</span> /&gt;
&lt;/Target&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按照正常流程发布</li></ul><p>将发布后的文件夹复制到另一个机器上，无需安装浏览器，就可以正常运行，因为会读取当前文件夹下的ms-playwright文件夹，获取依赖的浏览器。 <img src="`+s+`" alt="image.png" loading="lazy"></p><blockquote><p>缺点：开发和部署的计算机操作系统必须一致。</p></blockquote><h2 id="自动安装" tabindex="-1"><a class="header-anchor" href="#自动安装"><span>自动安装</span></a></h2><p>运行浏览器安装的命令，代码执行安装步骤</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>Console.WriteLine(<span class="token string">&quot;Start download chromium&quot;</span>);
var exitCode = Microsoft.Playwright.Program.Main(new<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;install&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chromium&quot;</span> <span class="token punctuation">}</span>);
if (exitCode != <span class="token number">0</span>)
<span class="token punctuation">{</span>
    throw new Exception($<span class="token string">&quot;Playwright exited with code {exitCode}&quot;</span>);
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后按照正常流程发布，直接运行控制台程序。</p><h2 id="部署模式选择" tabindex="-1"><a class="header-anchor" href="#部署模式选择"><span>部署模式选择</span></a></h2><p>默认情况下，Playwright 仅捆绑 .NET 发布目标运行时的驱动程序。如果您想为其他平台捆绑，您可以通过在项目文件中使用、或all、none来linux覆盖此行为。winosx</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>&lt;PropertyGroup&gt;
  &lt;PlaywrightPlatform&gt;all&lt;/PlaywrightPlatform&gt;
&lt;/PropertyGroup&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>&lt;PropertyGroup&gt;
  &lt;PlaywrightPlatform&gt;osx;linux&lt;/PlaywrightPlatform&gt;
&lt;/PropertyGroup&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动部署" tabindex="-1"><a class="header-anchor" href="#自动部署"><span>自动部署</span></a></h2><p>playwright打包部署：https://playwright.dev/dotnet/docs/ci</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>文章来源自：微信公众号【My IO】</p>`,22),r=[l];function o(p,c){return a(),n("div",null,r)}const m=e(i,[["render",o],["__file","bushu.html.vue"]]),g=JSON.parse('{"path":"/middleware/testMange/duandaoduanceshi/playwright/bushu.html","title":"部署","lang":"zh-CN","frontmatter":{"title":"部署","lang":"zh-CN","date":"2023-03-30T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"bushu","slug":"bvq9tf","docsId":"81119951","description":"拷贝浏览器 其实 Playwright 默认是到C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\ms-playwright文件夹下查找依赖的浏览器，我们只需将本机文件夹复制到部署机器的对应文件夹即可。 但更简便的方式，是将浏览器也放到发布文件夹下一起部署。 操作示例 修改代码，设置查询依赖浏览器路径的环境变量 修改项目文件，设置发布时候执行Tas...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/duandaoduanceshi/playwright/bushu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"部署"}],["meta",{"property":"og:description","content":"拷贝浏览器 其实 Playwright 默认是到C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\ms-playwright文件夹下查找依赖的浏览器，我们只需将本机文件夹复制到部署机器的对应文件夹即可。 但更简便的方式，是将浏览器也放到发布文件夹下一起部署。 操作示例 修改代码，设置查询依赖浏览器路径的环境变量 修改项目文件，设置发布时候执行Tas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1655872902959-9e23f82d-c9c9-4764-a040-83c847164e36.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:43:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"部署\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1655872902959-9e23f82d-c9c9-4764-a040-83c847164e36.png\\"],\\"datePublished\\":\\"2023-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T13:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"拷贝浏览器","slug":"拷贝浏览器","link":"#拷贝浏览器","children":[]},{"level":2,"title":"自动安装","slug":"自动安装","link":"#自动安装","children":[]},{"level":2,"title":"部署模式选择","slug":"部署模式选择","link":"#部署模式选择","children":[]},{"level":2,"title":"自动部署","slug":"自动部署","link":"#自动部署","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1700919815000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.54,"words":463},"filePathRelative":"middleware/testMange/duandaoduanceshi/playwright/bushu.md","localizedDate":"2023年3月30日","excerpt":"<h2>拷贝浏览器</h2>\\n<p>其实 Playwright 默认是到C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\ms-playwright文件夹下查找依赖的浏览器，我们只需将本机文件夹复制到部署机器的对应文件夹即可。\\n但更简便的方式，是将浏览器也放到发布文件夹下一起部署。\\n操作示例</p>\\n<ul>\\n<li>修改代码，设置查询依赖浏览器路径的环境变量</li>\\n</ul>\\n<div class=\\"language-json\\" data-ext=\\"json\\" data-title=\\"json\\"><pre class=\\"language-json\\"><code>Environment.SetEnvironmentVariable(<span class=\\"token string\\">\\"PLAYWRIGHT_BROWSERS_PATH\\"</span><span class=\\"token punctuation\\">,</span> Path.Combine(AppDomain.CurrentDomain.BaseDirectory<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"ms-playwright\\"</span>));\\n<span class=\\"token comment\\">//正式执行</span>\\nusing var playwright = await Playwright.CreateAsync();\\n</code></pre></div>","autoDesc":true}');export{m as comp,g as data};
