import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as o,o as s}from"./app-fQkBsvt-.js";const g="/kbms/common/1610778343725-08b61218-c2e9-45c2-b225-eafaf64cace2.png",a="/kbms/common/1610778343748-09faf52c-5312-43c3-82d9-6677c180a7a6.png",t="/kbms/common/1610778343765-fd191451-9692-48ec-a739-dd607e54d341.png",e="/kbms/common/1610778343759-e7297c57-e2bd-428f-a484-0c5e82c9dac4.png",m="/kbms/common/1610778343761-59dedd43-16ec-4099-b54d-51dc0c68e60b.png",c="/kbms/common/1610778343776-b9e10022-f89e-4033-949a-b06c00fa774f.png",i="/kbms/common/1610778343765-3184ea7d-819d-45ed-8d0d-17037b22e2fe.png",p="/kbms/common/1610778343763-b3c4f856-fa3b-4959-ac25-0fefd35876a6.png",l="/kbms/common/1610778343822-444327e9-4732-4c51-a93f-32428e973543.png",d="/kbms/common/1610778343778-62ab95e4-75f8-4325-86bb-7597318cf883.png",f="/kbms/common/1610778343762-b1946719-292a-44d3-861d-37e7b3645284.png",y="/kbms/common/1610778343766-aacb2c5a-eb96-42ac-ba31-feb0ac5f1364.png",z="/kbms/common/1610778343828-06ea2c0f-b88c-4a5f-b1d7-7e0fd38c97bf.png",k="/kbms/common/1610778343816-d5247770-85b2-40d8-9cd4-061bf247de00.png",u="/kbms/common/1610778343797-c4102459-5225-4477-9863-d9bb0e54ecc9.png",_="/kbms/common/1610778343798-a02a5a5c-40c4-4016-826c-94b6dfbe74e5.png",h="/kbms/common/1610778343798-6e09b8c7-791b-4333-9a94-f44baa9f073c.png",L="/kbms/common/1610778343803-f9b3c073-9ff0-4d3a-b589-848f141dfb0a.png",U="/kbms/common/1610778343801-8030c639-fe75-479d-a45b-30d77db3919e.png",R="/kbms/common/1610778343802-cf65bb92-45b9-4007-8615-f1a0aea05918.png",w="/kbms/common/1610778343800-9d46b51b-b9d4-4a6b-a8ef-47ed2f7bc4fc.png",q="/kbms/common/1610778343804-e15e0642-718b-4706-9e14-4af07b3925f5.png",P="/kbms/common/1610778343813-f9046baa-e834-43d1-b616-1e5672676d87.png",x="/kbms/common/1610778343809-1738c160-3a47-4447-9f18-fcb516f013dd.png",T="/kbms/common/1610778343808-f8c180a4-c861-48a8-a4bd-03310d63193f.png",A="/kbms/common/1610778343804-907b74c5-cea9-41ce-8f6e-ccaf91b9889d.png",B="/kbms/common/1610778343820-27b66d11-d25f-4f16-8476-79c62aa5f8ca.png",S="/kbms/common/1610778343804-9fefbd38-d739-4e4a-812f-6dad2eb4d119.png",v="/kbms/common/1610778343809-0d275af9-4c2b-4280-ae0f-90d31cf4925e.png",Z="/kbms/common/1610778343806-4858e468-a9ee-4b76-afad-aab3c7b95011.png",N="/kbms/common/1610778343806-9e25b252-5855-4f0c-aba1-1dfa3956af4a.png",j="/kbms/common/1610778343815-e10c9d64-c6f5-49b1-9fa0-35bd547a066e.png",D="/kbms/common/1610778343889-1cd8b70b-9e4f-43b4-b4cd-384824ab1e4c.png",C={};function E(I,n){return s(),b("div",null,n[0]||(n[0]=[o('<p><strong>1、使用requests</strong><br>  <br> 你可以使用requests模块从一个URL下载文件。<br>  <br> 考虑以下代码:<br>  <br><img src="'+g+'" alt="image.png" loading="lazy"><br>  <br> 你只需使用<strong>requests模块的get方法获取URL，<strong>并将结果存储到一个名为“myfile”的变量中。然后，将这个变量的内容写入文件。<br>  <br>  <br><strong>2、使用wget</strong><br><img src="'+a+'" alt="image.png" loading="lazy"><br>  <br>  <br> 你还可以</strong>使用Python的wget模块从一个URL下载文件。<strong>你可以使用pip按以下命令安装wget模块:<br>  <br> 考虑以下代码，我们将使用它下载Python的logo图像。<br><img src="'+t+'" alt="image.png" loading="lazy"><br>  <br>  <br> 在这段代码中，URL和路径(图像将存储在其中)被传递给</strong>wget模块的download方法。</strong><br>  <br>  <br>  <br><strong>3、下载重定向的文件</strong><br>  <br> 在本节中，你将学习如何**使用requests从一个URL下载文件，**该URL会被重定向到另一个带有一个.pdf文件的URL。该URL看起来如下:<br><img src="'+e+'" alt="image.png" loading="lazy"><br>  <br>  <br><strong>要下载这个pdf文件，请使用以下代码:</strong><br>  <br><img src="'+m+'" alt="image.png" loading="lazy"><br>  <br> 在这段代码中，我们第一步指定的是URL。然后，**我们使用request模块的get方法来获取该URL。<strong>在get方法中，我们将allow_redirects设置为True，这将允许</strong>URL中的重定向，<strong>并且重定向后的内容将被分配给变量myfile。<br>  <br> 最后，我们打开一个文件来写入获取的内容。<br>  <br>  <br>  <br><strong>4、分块下载大文件</strong><br>  <br><strong>考虑下面的代码:</strong><br>  <br><img src="'+c+'" alt="image.png" loading="lazy"><br>  <br> 首先，我们像以前一样使用requests模块的get方法，但是这一次，<strong>我们将把stream属性设置为True。</strong><br>  <br> 接着，我们在当前工作目录中创建一个名为PythonBook.pdf的文件，并打开它进行写入。<br>  <br> 然后，我们指定每次要下载的块大小。<strong>我们已经将其设置为1024字节，接着遍历每个块，<strong>并在文件中写入这些块，直到块结束。<br>  <br> 不漂亮吗?不要担心，稍后我们将显示一个下载过程的进度条。<br>  <br>  <br>  <br><strong>5、下载多个文件(并行/批量下载)</strong><br>  <br><strong>要同时下载多个文件，请导入以下模块:</strong><br><img src="'+i+'" alt="image.png" loading="lazy"><br>  <br>  <br> 我们导入了</strong>os和time</strong>模块来检查下载文件需要多少时间。ThreadPool模块允许你使用池运行多个线程或进程。<br>  <br> 让我们创建一个简单的函数，将响应分块发送到一个文件:<br>  <br><img src="'+p+'" alt="image.png" loading="lazy"><br>  <br><strong>这个URL是一个二维数组，它指定了你要下载的页面的路径和URL。</strong><br><img src="'+l+'" alt="image.png" loading="lazy"><br>  <br>  <br> 就像在前一节中所做的那样，我们将这个</strong>URL传递给requests.get。**最后，我们打开文件(URL中指定的路径)并写入页面内容。<br>  <br> 现在，我们可以分别为每个URL调用这个函数，我们也可以同时为所有URL调用这个函数。<strong>让我们在for循环中分别为每个URL调用这个函数，<strong>注意计时器:<br>  <br><img src="'+d+'" alt="image.png" loading="lazy"><br>  <br><strong>现在，使用以下代码行替换for循环：</strong><br>  <br><img src="'+f+'" alt="image.png" loading="lazy"><br>  <br> 运行该脚本。<br>  <br>  <br>  <br><strong>6、使用进度条进行下载</strong><br>  <br> 进度条是clint模块的一个UI组件。输入以下命令来安装clint模块：<br>  <br><img src="'+y+'" alt="image.png" loading="lazy"><br>  <br><strong>考虑以下代码:</strong><br>  <br><img src="'+z+'" alt="image.png" loading="lazy"><br>  <br> 在这段代码中，我们首先导入了requests模块，然后，我们从clint.textui导入了进度组件。唯一的区别是</strong>在for循环中。<strong>在将内容写入文件时，我们使用了进度条模块的bar方法。<br>  <br>  <br>  <br><strong>7、使用urllib下载网页</strong><br>  <br> 在本节中，我们将使用urllib下载一个网页。<br>  <br> urllib库是Python的标准库，因此你不需要安装它。<br>  <br><strong>以下代码行可以轻松地下载一个网页:</strong><br>  <br><img src="'+k+'" alt="image.png" loading="lazy"><br>  <br> 在这里指定</strong>你想将文件保存为什么以及你想将它存储在哪里的URL。</strong><br>  <br><img src="'+u+'" alt="image.png" loading="lazy"><br>  <br> 在这段代码中，我们使用了urlretrieve方法并传递了文件的URL，以及保存文件的路径。文件扩展名将是.html。<br>  <br>  <br>  <br><strong>8、通过代理下载</strong><br>  <br> 如果你需要使用代理下载你的文件，你可以使用urllib模块的ProxyHandler。<strong>请看以下代码：</strong><br>  <br><img src="'+_+'" alt="image.png" loading="lazy"><br>  <br> 在这段代码中，我们创建了代理对象，**并通过调用urllib的build_opener方法来打开该代理，<strong>并传入该代理对象。然后，我们创建请求来获取页面。<br>  <br> 此外，你还可以按照官方文档的介绍来使用requests模块:<br>  <br><img src="'+h+'" alt="image.png" loading="lazy"><br>  <br>  <br> 你只需要</strong>导入requests模块并创建你的代理对象。**然后，你就可以获取文件了。<br>  <br>  <br><strong>9、使用urllib3</strong><br>  <br> urllib3是urllib模块的改进版本。你可以使用pip下载并安装它:<br><img src="'+L+'" alt="image.png" loading="lazy"><br>  <br>  <br> 我们将通过使用urllib3来获取一个网页并将它存储在一个文本文件中。<br>  <br><strong>导入以下模块:</strong><br>  <br><img src="'+U+'" alt="image.png" loading="lazy"><br>  <br> 在处理文件时，我们使用了shutil模块。<br>  <br><strong>现在，我们像这样来初始化URL字符串变量：</strong><br>  <br><img src="'+R+'" alt="image.png" loading="lazy"><br>  <br> 然后，我们使用了urllib3的PoolManager ，<strong>它会跟踪必要的连接池。</strong><br>  <br><img src="'+w+'" alt="image.png" loading="lazy"><br>  <br><strong>创建一个文件:</strong><br>  <br> filename=&quot;test.text&quot;;<br>  <br> 最后，我们发送一个GET请求来获取该URL并打开一个文件，接着将响应写入该文件:<br>  <br><img src="'+q+'" alt="image.png" loading="lazy"><br>  <br>  <br>  <br><strong>10、使用Boto3从S3下载文件</strong><br>  <br> 要从Amazon S3下载文件，你可以使用Python boto3模块。<br>  <br><strong>在开始之前，你需要使用pip安装awscli模块:</strong><br><img src="'+P+'" alt="image.png" loading="lazy"><br>  <br>  <br><strong>对于AWS配置，请运行以下命令：</strong><br>  <br><img src="'+x+'" alt="image.png" loading="lazy"><br>  <br><strong>现在，按以下命令输入你的详细信息：</strong><br>  <br><img src="'+T+'" alt="image.png" loading="lazy"><br>  <br> 要从Amazon S3下载文件，你需要导入boto3和botocore。Boto3是一个Amazon SDK，**它允许Python访问Amazon web服务(如S3)。**Botocore提供了与Amazon web服务进行交互的命令行服务。<br>  <br> Botocore自带了awscli。要安装boto3，请运行以下命令:<br>  <br><img src="'+A+'" alt="image.png" loading="lazy"><br>  <br><strong>现在，导入这两个模块：</strong><br>  <br><img src="'+B+'" alt="image.png" loading="lazy"><br>  <br><strong>在从Amazon下载文件时，我们需要三个参数</strong>：<br> Bucket名称<br> 你需要下载的文件名称<br> 文件下载之后的名称<br>  <br><strong>初始化变量：</strong><br>  <br><img src="'+S+'" alt="image.png" loading="lazy"><br>  <br> 现在，**我们初始化一个变量来使用会话的资源。<strong>为此，我们将调用boto3的resource()方法并传入服务，即s3:<br>  <br><img src="'+v+'" alt="image.png" loading="lazy"><br>  <br> 最后，使用download_file方法下载文件并传入变量:<br>  <br><img src="'+Z+'" alt="image.png" loading="lazy"><br>  <br>  <br><strong>11、使用asyncio</strong><br>  <br> asyncio模块</strong>主要用于处理系统事件。**它围绕一个事件循环进行工作，该事件循环会等待事件发生，然后对该事件作出反应。这个反应可以是调用另一个函数。这个过程称为事件处理。asyncio模块使用协同程序进行事件处理。<br>  <br> 要使用asyncio事件处理和协同功能，我们将导入asyncio模块:<br><img src="'+N+'" alt="image.png" loading="lazy"><br>  <br>  <br><strong>现在，像这样定义asyncio协同方法：</strong><br>  <br><img src="'+j+'" alt="image.png" loading="lazy"><br>  <br> 关键字async表示这是一个原生asyncio协同程序。在协同程序的内部，我们有一个await关键字，它会返回一个特定的值。我们也可以使用return关键字。<br>  <br> 现在，让我们使用协同创建一段代码来从网站下载一个文件:<br>  <br><img src="'+D+'" alt="image.png" loading="lazy"><br>  <br> 在这段代码中，<strong>我们创建了一个异步协同函数，它会下载我们的文件并返回一条消息。</strong><br>  <br> 然后，我们使用另一个异步协同程序调用main_func，**它会等待URL并将所有URL组成一个队列。**asyncio的wait函数会等待协同程序完成。<br>  <br> 现在，为了启动协同程序，我们必须使用asyncio的get_event_loop()方法将协同程序放入事件循环中，最后，我们使用asyncio的run_until_complete()方法执行该事件循环。</p>',1)]))}const H=r(C,[["render",E],["__file","xiazai.html.vue"]]),K=JSON.parse('{"path":"/otherLanguage/python/jichuyufa/xiazai.html","title":"下载","lang":"zh-CN","frontmatter":{"title":"下载","lang":"zh-CN","date":"2021-05-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["otherLanguage"],"tag":["无"],"filename":"xiazai","slug":"ac1yg8","docsId":"30225742","description":"1、使用requests 你可以使用requests模块从一个URL下载文件。 考虑以下代码: image.png 你只需使用requests模块的get方法获取URL，并将结果存储到一个名为“myfile”的变量中。然后，将这个变量的内容写入文件。 2、使用wget image.png 你还可以使用Python的wget模块从一个URL下载文件。你可...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/otherLanguage/python/jichuyufa/xiazai.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"下载"}],["meta",{"property":"og:description","content":"1、使用requests 你可以使用requests模块从一个URL下载文件。 考虑以下代码: image.png 你只需使用requests模块的get方法获取URL，并将结果存储到一个名为“myfile”的变量中。然后，将这个变量的内容写入文件。 2、使用wget image.png 你还可以使用Python的wget模块从一个URL下载文件。你可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610778343725-08b61218-c2e9-45c2-b225-eafaf64cace2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-17T03:16:45.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-05-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-17T03:16:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"下载\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610778343725-08b61218-c2e9-45c2-b225-eafaf64cace2.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343748-09faf52c-5312-43c3-82d9-6677c180a7a6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343765-fd191451-9692-48ec-a739-dd607e54d341.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343759-e7297c57-e2bd-428f-a484-0c5e82c9dac4.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343761-59dedd43-16ec-4099-b54d-51dc0c68e60b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343776-b9e10022-f89e-4033-949a-b06c00fa774f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343765-3184ea7d-819d-45ed-8d0d-17037b22e2fe.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343763-b3c4f856-fa3b-4959-ac25-0fefd35876a6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343822-444327e9-4732-4c51-a93f-32428e973543.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343778-62ab95e4-75f8-4325-86bb-7597318cf883.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343762-b1946719-292a-44d3-861d-37e7b3645284.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343766-aacb2c5a-eb96-42ac-ba31-feb0ac5f1364.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343828-06ea2c0f-b88c-4a5f-b1d7-7e0fd38c97bf.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343816-d5247770-85b2-40d8-9cd4-061bf247de00.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343797-c4102459-5225-4477-9863-d9bb0e54ecc9.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343798-a02a5a5c-40c4-4016-826c-94b6dfbe74e5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343798-6e09b8c7-791b-4333-9a94-f44baa9f073c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343803-f9b3c073-9ff0-4d3a-b589-848f141dfb0a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343801-8030c639-fe75-479d-a45b-30d77db3919e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343802-cf65bb92-45b9-4007-8615-f1a0aea05918.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343800-9d46b51b-b9d4-4a6b-a8ef-47ed2f7bc4fc.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343804-e15e0642-718b-4706-9e14-4af07b3925f5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343813-f9046baa-e834-43d1-b616-1e5672676d87.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343809-1738c160-3a47-4447-9f18-fcb516f013dd.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343808-f8c180a4-c861-48a8-a4bd-03310d63193f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343804-907b74c5-cea9-41ce-8f6e-ccaf91b9889d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343820-27b66d11-d25f-4f16-8476-79c62aa5f8ca.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343804-9fefbd38-d739-4e4a-812f-6dad2eb4d119.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343809-0d275af9-4c2b-4280-ae0f-90d31cf4925e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343806-4858e468-a9ee-4b76-afad-aab3c7b95011.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343806-9e25b252-5855-4f0c-aba1-1dfa3956af4a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343815-e10c9d64-c6f5-49b1-9fa0-35bd547a066e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610778343889-1cd8b70b-9e4f-43b4-b4cd-384824ab1e4c.png\\"],\\"datePublished\\":\\"2021-05-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-17T03:16:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1694920605000,"updatedTime":1694920605000,"contributors":[{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":6.93,"words":2079},"filePathRelative":"otherLanguage/python/jichuyufa/xiazai.md","localizedDate":"2021年5月14日","excerpt":"<p><strong>1、使用requests</strong><br>\\n&nbsp;<br>\\n你可以使用requests模块从一个URL下载文件。<br>\\n&nbsp;<br>\\n考虑以下代码:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343725-08b61218-c2e9-45c2-b225-eafaf64cace2.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n你只需使用<strong>requests模块的get方法获取URL，<strong>并将结果存储到一个名为“myfile”的变量中。然后，将这个变量的内容写入文件。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>2、使用wget</strong><br>\\n<img src=\\"/common/1610778343748-09faf52c-5312-43c3-82d9-6677c180a7a6.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n你还可以</strong>使用Python的wget模块从一个URL下载文件。<strong>你可以使用pip按以下命令安装wget模块:<br>\\n&nbsp;<br>\\n考虑以下代码，我们将使用它下载Python的logo图像。<br>\\n<img src=\\"/common/1610778343765-fd191451-9692-48ec-a739-dd607e54d341.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n在这段代码中，URL和路径(图像将存储在其中)被传递给</strong>wget模块的download方法。</strong><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>3、下载重定向的文件</strong><br>\\n&nbsp;<br>\\n在本节中，你将学习如何**使用requests从一个URL下载文件，**该URL会被重定向到另一个带有一个.pdf文件的URL。该URL看起来如下:<br>\\n<img src=\\"/common/1610778343759-e7297c57-e2bd-428f-a484-0c5e82c9dac4.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>要下载这个pdf文件，请使用以下代码:</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343761-59dedd43-16ec-4099-b54d-51dc0c68e60b.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这段代码中，我们第一步指定的是URL。然后，**我们使用request模块的get方法来获取该URL。<strong>在get方法中，我们将allow_redirects设置为True，这将允许</strong>URL中的重定向，<strong>并且重定向后的内容将被分配给变量myfile。<br>\\n&nbsp;<br>\\n最后，我们打开一个文件来写入获取的内容。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>4、分块下载大文件</strong><br>\\n&nbsp;<br>\\n<strong>考虑下面的代码:</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343776-b9e10022-f89e-4033-949a-b06c00fa774f.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n首先，我们像以前一样使用requests模块的get方法，但是这一次，<strong>我们将把stream属性设置为True。</strong><br>\\n&nbsp;<br>\\n接着，我们在当前工作目录中创建一个名为PythonBook.pdf的文件，并打开它进行写入。<br>\\n&nbsp;<br>\\n然后，我们指定每次要下载的块大小。<strong>我们已经将其设置为1024字节，接着遍历每个块，<strong>并在文件中写入这些块，直到块结束。<br>\\n&nbsp;<br>\\n不漂亮吗?不要担心，稍后我们将显示一个下载过程的进度条。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>5、下载多个文件(并行/批量下载)</strong><br>\\n&nbsp;<br>\\n<strong>要同时下载多个文件，请导入以下模块:</strong><br>\\n<img src=\\"/common/1610778343765-3184ea7d-819d-45ed-8d0d-17037b22e2fe.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n我们导入了</strong>os和time</strong>模块来检查下载文件需要多少时间。ThreadPool模块允许你使用池运行多个线程或进程。<br>\\n&nbsp;<br>\\n让我们创建一个简单的函数，将响应分块发送到一个文件:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343763-b3c4f856-fa3b-4959-ac25-0fefd35876a6.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>这个URL是一个二维数组，它指定了你要下载的页面的路径和URL。</strong><br>\\n<img src=\\"/common/1610778343822-444327e9-4732-4c51-a93f-32428e973543.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n就像在前一节中所做的那样，我们将这个</strong>URL传递给requests.get。**最后，我们打开文件(URL中指定的路径)并写入页面内容。<br>\\n&nbsp;<br>\\n现在，我们可以分别为每个URL调用这个函数，我们也可以同时为所有URL调用这个函数。<strong>让我们在for循环中分别为每个URL调用这个函数，<strong>注意计时器:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343778-62ab95e4-75f8-4325-86bb-7597318cf883.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>现在，使用以下代码行替换for循环：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343762-b1946719-292a-44d3-861d-37e7b3645284.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n运行该脚本。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>6、使用进度条进行下载</strong><br>\\n&nbsp;<br>\\n进度条是clint模块的一个UI组件。输入以下命令来安装clint模块：<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343766-aacb2c5a-eb96-42ac-ba31-feb0ac5f1364.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>考虑以下代码:</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343828-06ea2c0f-b88c-4a5f-b1d7-7e0fd38c97bf.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这段代码中，我们首先导入了requests模块，然后，我们从clint.textui导入了进度组件。唯一的区别是</strong>在for循环中。<strong>在将内容写入文件时，我们使用了进度条模块的bar方法。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>7、使用urllib下载网页</strong><br>\\n&nbsp;<br>\\n在本节中，我们将使用urllib下载一个网页。<br>\\n&nbsp;<br>\\nurllib库是Python的标准库，因此你不需要安装它。<br>\\n&nbsp;<br>\\n<strong>以下代码行可以轻松地下载一个网页:</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343816-d5247770-85b2-40d8-9cd4-061bf247de00.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这里指定</strong>你想将文件保存为什么以及你想将它存储在哪里的URL。</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343797-c4102459-5225-4477-9863-d9bb0e54ecc9.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这段代码中，我们使用了urlretrieve方法并传递了文件的URL，以及保存文件的路径。文件扩展名将是.html。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>8、通过代理下载</strong><br>\\n&nbsp;<br>\\n如果你需要使用代理下载你的文件，你可以使用urllib模块的ProxyHandler。<strong>请看以下代码：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343798-a02a5a5c-40c4-4016-826c-94b6dfbe74e5.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这段代码中，我们创建了代理对象，**并通过调用urllib的build_opener方法来打开该代理，<strong>并传入该代理对象。然后，我们创建请求来获取页面。<br>\\n&nbsp;<br>\\n此外，你还可以按照官方文档的介绍来使用requests模块:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343798-6e09b8c7-791b-4333-9a94-f44baa9f073c.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n你只需要</strong>导入requests模块并创建你的代理对象。**然后，你就可以获取文件了。<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>9、使用urllib3</strong><br>\\n&nbsp;<br>\\nurllib3是urllib模块的改进版本。你可以使用pip下载并安装它:<br>\\n<img src=\\"/common/1610778343803-f9b3c073-9ff0-4d3a-b589-848f141dfb0a.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n我们将通过使用urllib3来获取一个网页并将它存储在一个文本文件中。<br>\\n&nbsp;<br>\\n<strong>导入以下模块:</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343801-8030c639-fe75-479d-a45b-30d77db3919e.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在处理文件时，我们使用了shutil模块。<br>\\n&nbsp;<br>\\n<strong>现在，我们像这样来初始化URL字符串变量：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343802-cf65bb92-45b9-4007-8615-f1a0aea05918.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n然后，我们使用了urllib3的PoolManager ，<strong>它会跟踪必要的连接池。</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343800-9d46b51b-b9d4-4a6b-a8ef-47ed2f7bc4fc.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>创建一个文件:</strong><br>\\n&nbsp;<br>\\nfilename=\\"test.text\\";<br>\\n&nbsp;<br>\\n最后，我们发送一个GET请求来获取该URL并打开一个文件，接着将响应写入该文件:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343804-e15e0642-718b-4706-9e14-4af07b3925f5.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>10、使用Boto3从S3下载文件</strong><br>\\n&nbsp;<br>\\n要从Amazon S3下载文件，你可以使用Python boto3模块。<br>\\n&nbsp;<br>\\n<strong>在开始之前，你需要使用pip安装awscli模块:</strong><br>\\n<img src=\\"/common/1610778343813-f9046baa-e834-43d1-b616-1e5672676d87.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>对于AWS配置，请运行以下命令：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343809-1738c160-3a47-4447-9f18-fcb516f013dd.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>现在，按以下命令输入你的详细信息：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343808-f8c180a4-c861-48a8-a4bd-03310d63193f.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n要从Amazon S3下载文件，你需要导入boto3和botocore。Boto3是一个Amazon SDK，**它允许Python访问Amazon web服务(如S3)。**Botocore提供了与Amazon web服务进行交互的命令行服务。<br>\\n&nbsp;<br>\\nBotocore自带了awscli。要安装boto3，请运行以下命令:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343804-907b74c5-cea9-41ce-8f6e-ccaf91b9889d.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>现在，导入这两个模块：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343820-27b66d11-d25f-4f16-8476-79c62aa5f8ca.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n<strong>在从Amazon下载文件时，我们需要三个参数</strong>：<br>\\nBucket名称<br>\\n你需要下载的文件名称<br>\\n文件下载之后的名称<br>\\n&nbsp;<br>\\n<strong>初始化变量：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343804-9fefbd38-d739-4e4a-812f-6dad2eb4d119.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n现在，**我们初始化一个变量来使用会话的资源。<strong>为此，我们将调用boto3的resource()方法并传入服务，即s3:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343809-0d275af9-4c2b-4280-ae0f-90d31cf4925e.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n最后，使用download_file方法下载文件并传入变量:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343806-4858e468-a9ee-4b76-afad-aab3c7b95011.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>11、使用asyncio</strong><br>\\n&nbsp;<br>\\nasyncio模块</strong>主要用于处理系统事件。**它围绕一个事件循环进行工作，该事件循环会等待事件发生，然后对该事件作出反应。这个反应可以是调用另一个函数。这个过程称为事件处理。asyncio模块使用协同程序进行事件处理。<br>\\n&nbsp;<br>\\n要使用asyncio事件处理和协同功能，我们将导入asyncio模块:<br>\\n<img src=\\"/common/1610778343806-9e25b252-5855-4f0c-aba1-1dfa3956af4a.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n&nbsp;<br>\\n<strong>现在，像这样定义asyncio协同方法：</strong><br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343815-e10c9d64-c6f5-49b1-9fa0-35bd547a066e.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n关键字async表示这是一个原生asyncio协同程序。在协同程序的内部，我们有一个await关键字，它会返回一个特定的值。我们也可以使用return关键字。<br>\\n&nbsp;<br>\\n现在，让我们使用协同创建一段代码来从网站下载一个文件:<br>\\n&nbsp;<br>\\n<img src=\\"/common/1610778343889-1cd8b70b-9e4f-43b4-b4cd-384824ab1e4c.png\\" alt=\\"image.png\\" loading=\\"lazy\\"><br>\\n&nbsp;<br>\\n在这段代码中，<strong>我们创建了一个异步协同函数，它会下载我们的文件并返回一条消息。</strong><br>\\n&nbsp;<br>\\n然后，我们使用另一个异步协同程序调用main_func，**它会等待URL并将所有URL组成一个队列。**asyncio的wait函数会等待协同程序完成。<br>\\n&nbsp;<br>\\n现在，为了启动协同程序，我们必须使用asyncio的get_event_loop()方法将协同程序放入事件循环中，最后，我们使用asyncio的run_until_complete()方法执行该事件循环。</p>","autoDesc":true}');export{H as comp,K as data};
