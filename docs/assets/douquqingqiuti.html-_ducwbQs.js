import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-Bfb6-vFH.js";const e={},p=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>本文来介绍一下如何读取Request.Body正确方式。</p><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h2><p>比如想记录每次请求的参数，这个时候就需要读取Request.Body来获取信息</p><h2 id="读取" tabindex="-1"><a class="header-anchor" href="#读取"><span>读取</span></a></h2><h3 id="中间件读取" tabindex="-1"><a class="header-anchor" href="#中间件读取"><span>中间件读取</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _requestDelegate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> requestDelegate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _requestDelegate <span class="token operator">=</span> requestDelegate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以实现多次读取Body</span>
        <span class="token comment">/*
         因为我们在读取完Stream之后，此时的Stream指针位置已经在Stream的结尾处，即Position此时不为0，
        而Stream读取正是依赖Position来标记外部读取Stream到啥位置，所以我们再次读取的时候会从结尾开始读，
        也就读取不到任何信息了。所以我们要想重复读取RequestBody那么就要再次读取之前重置RequestBody的Position为0，

         */</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> data <span class="token operator">=</span> <span class="token keyword">await</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;data=&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>

        <span class="token keyword">await</span> <span class="token function">_requestDelegate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> sr2<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;data=&quot;</span> <span class="token operator">+</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="action过滤器读取" tabindex="-1"><a class="header-anchor" href="#action过滤器读取"><span>Action过滤器读取</span></a></h3><p>在请求到达过滤器时Steam已经被读取了，此时我们在过滤器中使用EnableBuffering并没有起作用,所以就是设置一个中间件，然后启用多次读取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next <span class="token operator">=&gt;</span> context <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>All<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomActionFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//context.HttpContext.Request.EnableBuffering();//可以实现多次读取Body</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> body <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> body2 <span class="token operator">=</span> stream2<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册方式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomActionFilterAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function c(u,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","douquqingqiuti.html.vue"]]),d=JSON.parse('{"path":"/dotnet/api/controllerApi/douquqingqiuti.html","title":"读取请求体","lang":"zh-CN","frontmatter":{"title":"读取请求体","lang":"zh-CN","date":"2022-10-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"douquqingqiuti","slug":"tf3gdr","docsId":"45991740","description":"介绍 本文来介绍一下如何读取Request.Body正确方式。 场景 比如想记录每次请求的参数，这个时候就需要读取Request.Body来获取信息 读取 中间件读取 注册方式 Action过滤器读取 在请求到达过滤器时Steam已经被读取了，此时我们在过滤器中使用EnableBuffering并没有起作用,所以就是设置一个中间件，然后启用多次读取 过...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/douquqingqiuti.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"读取请求体"}],["meta",{"property":"og:description","content":"介绍 本文来介绍一下如何读取Request.Body正确方式。 场景 比如想记录每次请求的参数，这个时候就需要读取Request.Body来获取信息 读取 中间件读取 注册方式 Action过滤器读取 在请求到达过滤器时Steam已经被读取了，此时我们在过滤器中使用EnableBuffering并没有起作用,所以就是设置一个中间件，然后启用多次读取 过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"读取请求体\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"读取","slug":"读取","link":"#读取","children":[{"level":3,"title":"中间件读取","slug":"中间件读取","link":"#中间件读取","children":[]},{"level":3,"title":"Action过滤器读取","slug":"action过滤器读取","link":"#action过滤器读取","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"dotnet/api/controllerApi/douquqingqiuti.md","localizedDate":"2022年10月12日","excerpt":"<h2>介绍</h2>\\n<p>本文来介绍一下如何读取Request.Body正确方式。</p>\\n<h2>场景</h2>\\n<p>比如想记录每次请求的参数，这个时候就需要读取Request.Body来获取信息</p>\\n<h2>读取</h2>\\n<h3>中间件读取</h3>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CustomMiddleware</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">RequestDelegate</span> _requestDelegate<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">CustomMiddleware</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">RequestDelegate</span> requestDelegate<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        _requestDelegate <span class=\\"token operator\\">=</span> requestDelegate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">Invoke</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpContext</span> context<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">EnableBuffering</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//可以实现多次读取Body</span>\\n        <span class=\\"token comment\\">/*\\n         因为我们在读取完Stream之后，此时的Stream指针位置已经在Stream的结尾处，即Position此时不为0，\\n        而Stream读取正是依赖Position来标记外部读取Stream到啥位置，所以我们再次读取的时候会从结尾开始读，\\n        也就读取不到任何信息了。所以我们要想重复读取RequestBody那么就要再次读取之前重置RequestBody的Position为0，\\n\\n         */</span>\\n\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> data <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> sr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        System<span class=\\"token punctuation\\">.</span>Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"data=\\"</span> <span class=\\"token operator\\">+</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n\\n        <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">_requestDelegate</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sr2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> data2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> sr2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        System<span class=\\"token punctuation\\">.</span>Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"data=\\"</span> <span class=\\"token operator\\">+</span> data2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
