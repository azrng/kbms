import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-vSdX8vi3.js";const t={},p=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在 Razor 组件中，可以将 HTML 元素数据绑定到 C## 字段、属性和 Razor 表达式值。 数据绑定支持在 HTML 和 Microsoft .NET 之间进行双向同步。 呈现组件时，数据从 HTML 推送到 .NET。 组件在事件处理程序代码执行后呈现自身，这就是为什么在触发事件处理程序后，属性更新会立即反映在 UI 中。 可使用 @bind 标记将 C## 变量绑定到 HTML 对象。 按名称将 C## 变量定义为 HTML 中的字符串。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind"><span>Bind</span></a></h3><p>@bind 指令非常智能，并且了解它所使用的控件。 例如，在将值绑定到文本框 <code>&lt;input&gt;</code>时，它将绑定 value 属性。 HTML 复选框 <code>&lt;input&gt;</code> 具有 checked 属性，而不是 value 属性。 @bind 属性将自动改用此 checked 属性。 默认情况下，该控件绑定到 DOM onchange 事件。 例如，请考虑以下页面：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/&quot;</span>

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>My favorite pizza <span class="token keyword">is</span><span class="token punctuation">:</span> @favPizza<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    Enter your <span class="token class-name">favorite</span> pizza<span class="token punctuation">:</span>
    <span class="token operator">&lt;</span><span class="token class-name">input</span> @bind<span class="token operator">=</span><span class="token string">&quot;favPizza&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> favPizza <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Margherita&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>呈现该页时，默认值 Margherita 将同时显示在 <code>&lt;h1&gt;</code> 元素和文本框中。 在文本框中输入最喜欢的新披萨时，除非离开文本框或选择 Enter 键，否则 <code>&lt;h1&gt;</code> 元素不会发生更改，因为那时才会触发 onchange DOM 事件。</p><p>如果想将在文本框输入任何内容的时候立即更新，可以通过绑定到 oninput DOM 事件来实现这一结果。 若要绑定到此事件，必须使用 @bind-value 和 @bind-value:event 指令：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/&quot;</span>

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>My favorite pizza <span class="token keyword">is</span><span class="token punctuation">:</span> @favPizza<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    Enter your <span class="token class-name">favorite</span> pizza<span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>input @bind<span class="token operator">-</span><span class="token keyword">value</span><span class="token operator">=</span><span class="token string">&quot;favPizza&quot;</span> @bind<span class="token operator">-</span><span class="token keyword">value</span><span class="token punctuation">:</span><span class="token keyword">event</span><span class="token operator">=</span><span class="token string">&quot;oninput&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> favPizza <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Margherita&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置绑定值的格式" tabindex="-1"><a class="header-anchor" href="#设置绑定值的格式"><span>设置绑定值的格式</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/ukbirthdaypizza&quot;</span>

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Order a pizza <span class="token keyword">for</span> your birthday<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    Enter your <span class="token class-name">birth</span> date<span class="token punctuation">:</span>
    <span class="token operator">&lt;</span><span class="token class-name">input</span> @bind<span class="token operator">=</span><span class="token string">&quot;birthdate&quot;</span> @bind<span class="token punctuation">:</span>format<span class="token operator">=</span><span class="token string">&quot;dd-MM-yyyy&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name">DateTime</span> birthdate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以编写 C## 代码来设置绑定值的格式，作为使用 @bind:format 指令的一种替代方法。 在成员定义中使用 get 和 set 访问器，如以下示例所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/pizzaapproval&quot;</span>
@<span class="token keyword">using</span> System<span class="token punctuation">.</span>Globalization

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Pizza<span class="token punctuation">:</span> @PizzaName<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token class-name">Approval</span> rating<span class="token punctuation">:</span> @approvalRating<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>
        Set a <span class="token keyword">new</span> <span class="token class-name">approval</span> rating<span class="token punctuation">:</span>
        <span class="token operator">&lt;</span><span class="token class-name">input</span> @bind<span class="token operator">=</span><span class="token string">&quot;ApprovalRating&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">decimal</span></span> approvalRating <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">NumberStyles</span> style <span class="token operator">=</span> NumberStyles<span class="token punctuation">.</span>AllowDecimalPoint <span class="token operator">|</span> NumberStyles<span class="token punctuation">.</span>AllowLeadingSign<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CultureInfo</span> culture <span class="token operator">=</span> CultureInfo<span class="token punctuation">.</span><span class="token function">CreateSpecificCulture</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ApprovalRating
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> approvalRating<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">&quot;0.000&quot;</span><span class="token punctuation">,</span> culture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Decimal<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> style<span class="token punctuation">,</span> culture<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> number<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                approvalRating <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function l(c,i){return a(),s("div",null,o)}const d=n(t,[["render",l],["__file","dataBind.html.vue"]]),k=JSON.parse('{"path":"/web/blazor/baseOperator/dataBind.html","title":"数据绑定","lang":"zh-CN","frontmatter":{"title":"数据绑定","lang":"zh-CN","date":"2023-02-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["dotNET"],"tag":["无"],"filename":"shujubangding","slug":"xiwwks","docsId":"67652730","description":"介绍 在 Razor 组件中，可以将 HTML 元素数据绑定到 C## 字段、属性和 Razor 表达式值。 数据绑定支持在 HTML 和 Microsoft .NET 之间进行双向同步。 呈现组件时，数据从 HTML 推送到 .NET。 组件在事件处理程序代码执行后呈现自身，这就是为什么在触发事件处理程序后，属性更新会立即反映在 UI 中。 可使用 ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/web/blazor/baseOperator/dataBind.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据绑定"}],["meta",{"property":"og:description","content":"介绍 在 Razor 组件中，可以将 HTML 元素数据绑定到 C## 字段、属性和 Razor 表达式值。 数据绑定支持在 HTML 和 Microsoft .NET 之间进行双向同步。 呈现组件时，数据从 HTML 推送到 .NET。 组件在事件处理程序代码执行后呈现自身，这就是为什么在触发事件处理程序后，属性更新会立即反映在 UI 中。 可使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-14T12:02:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-14T12:02:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据绑定\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-14T12:02:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"Bind","slug":"bind","link":"#bind","children":[]},{"level":3,"title":"设置绑定值的格式","slug":"设置绑定值的格式","link":"#设置绑定值的格式","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1702555366000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":2.03,"words":610},"filePathRelative":"web/blazor/baseOperator/dataBind.md","localizedDate":"2023年2月2日","excerpt":"<h2>介绍</h2>\\n<p>在 Razor 组件中，可以将 HTML 元素数据绑定到 C## 字段、属性和 Razor 表达式值。 数据绑定支持在 HTML 和 Microsoft .NET 之间进行双向同步。\\n呈现组件时，数据从 HTML 推送到 .NET。 组件在事件处理程序代码执行后呈现自身，这就是为什么在触发事件处理程序后，属性更新会立即反映在 UI 中。\\n可使用 @bind 标记将 C## 变量绑定到 HTML 对象。 按名称将 C## 变量定义为 HTML 中的字符串。</p>\\n<h2>操作</h2>\\n<h3>Bind</h3>\\n<p>@bind 指令非常智能，并且了解它所使用的控件。 例如，在将值绑定到文本框 <code>&lt;input&gt;</code>时，它将绑定 value 属性。 HTML 复选框 <code>&lt;input&gt;</code> 具有 checked 属性，而不是 value 属性。 @bind 属性将自动改用此 checked 属性。 默认情况下，该控件绑定到 DOM onchange 事件。 例如，请考虑以下页面：</p>","autoDesc":true}');export{d as comp,k as data};
