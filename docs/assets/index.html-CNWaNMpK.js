import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as s,e as a}from"./app-BY9DQv5u.js";const n="/kbms/common/1608789316458-f026d617-974c-42ff-8b89-1afcb76266b0.webp",t="/kbms/common/1608789670207-de5be96a-13f0-4e04-85b1-bd8b0e034067.webp",l={},r=a(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>实现了高级消息队列协议(AMQP)的开源消息代码软件，由以高性能、健壮以及伸缩性出名的Erlang语言写成。</p><h2 id="主要的端口" tabindex="-1"><a class="header-anchor" href="#主要的端口"><span>主要的端口</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4369</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> erlang发现口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5672</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">client端通信口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">15672</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> 管理界面ui端口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">25672</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> server间内部通信口</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">如何我们要访问rabbitmq管理界面就需要访问</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//localhost:15672/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">我们需要连接rabbitmq就需要client端通信端口</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">amqp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//guest:guest@localhost:5672/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其他详细端口查询官方网站：<a href="https://www.rabbitmq.com/networking.html?__cf_chl_captcha_tk__=d5c748449db4407253ac09ecacff18ed3354715c-1596596042-0-AXJknuCjXnYrYnkcljAnVrSRstM0NIajMsfG4l_mm4CvF0jAYnR8IFdi45Whj1_aI4RG-idiQXvMzU12E6xweK5ZInVR2i-oGQvAtdT2wZ5JDnVPl-01QKfedtmfwDQUz5FxcHXoIrfs92QDvoD4xqEMaaz8Xk3M1-OuP4-rNrEgfnPDvBgcNpngMw4aPoSQwqHbbYbCMyK__daku8BS-7_gVlGWPTYG66XyZedAYErn99NOvpLmqm_M-ycaz0R-wnUDASbtKc4RGQ7Pdmn_u9IYBie5SGXsL_EvhApx3h8-mvh1aSn3g2sGhuuzZMppGdbtkrWvIumOYbMADdzIqR9U8zYzOETsAEvcUP691SRnwkVc445zBqaKdfxRgPan1RI-lv0RiTJdAUm2PAmNvNb6x-XH61lupI8829enXZRG8DlxoMizygsGHCDEt08dBEuyU8uVaST_IYpXDYgRi9Ke6ZlViny2EEjVmNpwZ2klFmzObbOCyXjAfnPhNjviZRnxaIK4rQA6uAI-sQJvs2U" target="_blank" rel="noopener noreferrer">此处</a></p></blockquote><h2 id="组件的特点" tabindex="-1"><a class="header-anchor" href="#组件的特点"><span>组件的特点</span></a></h2><ul><li>可靠性（Reliability）</li></ul><p>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</p><ul><li>灵活的路由（Flexible Routing）</li></ul><p>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</p><ul><li>消息集群（Clustering）</li></ul><p>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</p><ul><li>高可用（Highly Available Queues）</li></ul><p>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</p><ul><li>多种协议（Multi-protocol）</li></ul><p>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</p><ul><li>多语言客户端（Many Clients）</li></ul><p>RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</p><ul><li>管理界面（Management UI）</li></ul><p>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</p><ul><li>跟踪机制（Tracing）</li></ul><p>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。</p><ul><li>插件机制（Plugin System）</li></ul><p>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</p><h2 id="消息模型" tabindex="-1"><a class="header-anchor" href="#消息模型"><span>消息模型</span></a></h2><p>消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。</p><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Message 消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</li><li>Publisher 消息的生产者，也是一个向交换器发布消息的客户端应用程序。</li><li>Exchange 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列，把消息路由到一个或者多个队列中</li><li>Binding 绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。决定交换器的消息应该发送到哪个队列上。</li><li>Queue 消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。生产者把消息放到队列中，消费者从队列中获取数据。</li><li>Connection 网络连接，比如一个TCP连接。</li><li>Channel 信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</li><li>Consumer 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</li><li>Virtual Host 虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。</li><li>Broker 表示消息队列服务器实体。</li></ul><blockquote><p>一个交换机可以有多个路由键 一个队列可以有多个路由键</p></blockquote><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/0NJClZdZJGAs6GkABson-A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/0NJClZdZJGAs6GkABson-A</a> | .Net Core &amp; RabbitMQ 死信队列 <a href="https://mp.weixin.qq.com/s/WzZBNGFGMFmmwdaW5pf0jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/WzZBNGFGMFmmwdaW5pf0jQ</a> | 它把RabbitMQ的复杂全屏蔽了，我朋友用它后被老板一夜提拔为.NET架构师 <a href="https://mp.weixin.qq.com/s/J-ZKimtgC4eAYAXRXXttZA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/J-ZKimtgC4eAYAXRXXttZA</a> | .Net Core&amp;RabbitMQ消息存储可靠机制 <a href="https://mp.weixin.qq.com/s/U1gi6v42FOCrpFOeYkMzAw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/U1gi6v42FOCrpFOeYkMzAw</a> | .NET Core 中使用 RabbitMQ 六种队列模式 <a href="https://mp.weixin.qq.com/s/TvbyC-nulUrBuOkuttCEpg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/TvbyC-nulUrBuOkuttCEpg</a> | 32张图带你解决RocketMQ所有场景问题-《高性能利器》 <a href="https://mp.weixin.qq.com/s/3lEWQMos8UmY3xBAHOSiCQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3lEWQMos8UmY3xBAHOSiCQ</a> | 理论修炼之RabbitMQ，消息队列服务的稳健者 <a href="https://mp.weixin.qq.com/s/IMkQ_PkeHCUK5QoBv7mRXg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/IMkQ_PkeHCUK5QoBv7mRXg</a> | 面霸篇：MQ 的 5 大关键问题详解 <a href="https://www.cnblogs.com/zhixie/p/14918619.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhixie/p/14918619.html</a> | 『假如我是面试官』RabbitMQ我会这样问 - Java旅途 - 博客园 <a href="https://mp.weixin.qq.com/s/y0dHiZaANcXD6nNBFgJFng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/y0dHiZaANcXD6nNBFgJFng</a> | RabbitMQ 高可用集群搭建及电商平台使用经验总结 死信队列 延迟队列 <a href="https://www.cnblogs.com/wei325/p/15204179.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/wei325/p/15204179.html</a></p><p><a href="https://mp.weixin.qq.com/s/8opt_fC9-9rRQMm_X3l8wQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/8opt_fC9-9rRQMm_X3l8wQ</a> | 如何在C#中使用Channels进行异步排队 <a href="https://mp.weixin.qq.com/s/EEWhT95yMERLljqNjzyaVA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/EEWhT95yMERLljqNjzyaVA</a> | .NET 6 优先队列 PriorityQueue 实现分析 <a href="https://mp.weixin.qq.com/s/iWKRWeJFl1KLNT-WJUCTtw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/iWKRWeJFl1KLNT-WJUCTtw</a> | MQ | 消息队列核心基础学习总结 <a href="https://mp.weixin.qq.com/s/TCT0536_iW4kzBV2l0gyYw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/TCT0536_iW4kzBV2l0gyYw</a> 封装分布式事件总线</p><p>在<code>ASP.NET Core</code>微服务架构下使用RabbitMQ如何实现CQRS模式https://www.cnblogs.com/powertoolsteam/p/17951775</p><p>api中使用rabbitmq：https://mp.weixin.qq.com/s/5G7Malo_h4z3u52Knzrvew</p><p>https://mp.weixin.qq.com/s/5G7Malo_h4z3u52Knzrvew | 在 WebApi 项目中快速开始使用 RabbitMQ</p><h3 id="系列教程" tabindex="-1"><a class="header-anchor" href="#系列教程"><span>系列教程</span></a></h3><p><a href="https://mp.weixin.qq.com/s/Xo3f70EXkd1_61PWShc_2g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Xo3f70EXkd1_61PWShc_2g</a> | 万字长文：从 C# 入门学会 RabbitMQ 消息队列编程</p><p>开源一款功能强大的 .NET 消息队列通讯模型框架 Maomi.MQ:<a href="https://mp.weixin.qq.com/s/GYN40Mh_tec-06ExNDqr5w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GYN40Mh_tec-06ExNDqr5w</a></p>',40),p=[r];function h(o,k){return s(),e("div",null,p)}const m=i(l,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/middleware/messageQueue/rabbitmq/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-08-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"rabbitmq","slug":"lrw7o0","docsId":"26370883","description":"说明 实现了高级消息队列协议(AMQP)的开源消息代码软件，由以高性能、健壮以及伸缩性出名的Erlang语言写成。 主要的端口 其他详细端口查询官方网站：此处 组件的特点 可靠性（Reliability） RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 灵活的路由（Flexible Routing） 在消息进入队列之前，通过...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/messageQueue/rabbitmq/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"说明 实现了高级消息队列协议(AMQP)的开源消息代码软件，由以高性能、健壮以及伸缩性出名的Erlang语言写成。 主要的端口 其他详细端口查询官方网站：此处 组件的特点 可靠性（Reliability） RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 灵活的路由（Flexible Routing） 在消息进入队列之前，通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1608789316458-f026d617-974c-42ff-8b89-1afcb76266b0.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T14:28:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T14:28:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1608789316458-f026d617-974c-42ff-8b89-1afcb76266b0.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1608789670207-de5be96a-13f0-4e04-85b1-bd8b0e034067.webp\\"],\\"datePublished\\":\\"2023-08-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T14:28:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"主要的端口","slug":"主要的端口","link":"#主要的端口","children":[]},{"level":2,"title":"组件的特点","slug":"组件的特点","link":"#组件的特点","children":[]},{"level":2,"title":"消息模型","slug":"消息模型","link":"#消息模型","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[{"level":3,"title":"系列教程","slug":"系列教程","link":"#系列教程","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1721744930000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.2,"words":1560},"filePathRelative":"middleware/messageQueue/rabbitmq/readme.md","localizedDate":"2023年8月27日","excerpt":"<h2>说明</h2>\\n<p>实现了高级消息队列协议(AMQP)的开源消息代码软件，由以高性能、健壮以及伸缩性出名的Erlang语言写成。</p>\\n<h2>主要的端口</h2>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">4369</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> --</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> erlang发现口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">5672</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> --</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">client端通信口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">15672</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> --</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> 管理界面ui端口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">25672</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> --</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> server间内部通信口</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">如何我们要访问rabbitmq管理界面就需要访问</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\">http</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">:</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">//localhost:15672/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">我们需要连接rabbitmq就需要client端通信端口</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\">server</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\">amqp</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">:</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">//guest:guest@localhost:5672/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{m as comp,g as data};
