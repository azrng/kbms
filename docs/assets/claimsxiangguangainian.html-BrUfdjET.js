import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as i,a as n,d as s,e as c,b as o}from"./app-qB9_Bjjp.js";const l="/kbms/common/1614393556790-980f5355-b77d-4850-8f56-7ed5fdd0775e.png",u={},r=o(`<h2 id="验证模型" tabindex="-1"><a class="header-anchor" href="#验证模型"><span>验证模型</span></a></h2><p>ASP.NET Core 的验证模型是 claims-based authentication 。**Claim **是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。 You can think of claims as being a statement about...That statement consists of a name and a value. 对应现实中的事物，比如驾照，驾照中的“身份证号码：xxx”是一个claim，“姓名：xxx”是另一个claim。 一组claims构成了一个identity，具有这些claims的identity就是 <strong>ClaimsIdentity</strong> ，驾照就是一种ClaimsIdentity，可以把ClaimsIdentity理解为“证件”，驾照是一种证件，护照也是一种证件。 ClaimsIdentity的持有者就是 **ClaimsPrincipal **，一个ClaimsPrincipal可以持有多个ClaimsIdentity，就比如一个人既持有驾照，又持有护照。 理解了Claim, ClaimsIdentity, ClaimsPrincipal这三个概念，就能理解生成登录Cookie为什么要用下面的代码？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> claimsIdentity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> loginName<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Basic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> claimsPrincipal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>claimsIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span>_cookieAuthOptions<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> claimsPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要用Cookie代表一个通过验证的主体，必须包含Claim, ClaimsIdentity, ClaimsPrincipal这三个信息，以一个持有合法驾照的人做比方，ClaimsPrincipal就是持有证件的人，ClaimsIdentity就是证件，&quot;Basic&quot;就是证件类型（这里假设是驾照），Claim就是驾照中的信息。   iss = Issuer Identifier：必须。提供认证信息者的唯一标识。一般是一个https的url（不包含querystring和fragment部分）。 sub = Subject Identifier：必须。iss提供的EU的标识，在iss范围内唯一。它会被RP用来标识唯一的用户。最长为255个ASCII个字符。 aud = Audience(s)：必须。标识ID Token的受众。必须包含OAuth2的client_id。 exp = Expiration time：必须。过期时间，超过此时间的ID Token会作废不再被验证通过。 iat = Issued At Time：必须。JWT的构建的时间。 auth_time = AuthenticationTime：EU完成认证的时间。如果RP发送AuthN请求的时候携带max_age的参数，则此Claim是必须的。 nonce：RP发送请求的时候提供的随机字符串，用来减缓重放攻击，也可以来关联ID Token和RP本身的Session信息。 acr = Authentication Context Class Reference：可选。表示一个认证上下文引用值，可以用来标识认证上下文类。 amr = Authentication Methods References：可选。表示一组认证方法。 azp = Authorized party：可选。结合aud使用。只有在被认证的一方和受众（aud）不一致时才使用此值，一般情况下很少使用。</p><h2 id="claims-证件单元" tabindex="-1"><a class="header-anchor" href="#claims-证件单元"><span>Claims(证件单元)</span></a></h2><p>证件单元：比如我们需要存储一些东西，<strong>姓名</strong>：奥巴马；<strong>性别</strong>：男；<strong>民族</strong>：肯尼亚；<strong>出生</strong>：1961.08.04等这些身份信息，那么最方便的肯定是使用字段类型存储，一个key、value刚好满足我们的需求，但是我们更喜欢做成一个对象，就像下面这样子</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Claim</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ClaimType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ClaimValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个claimType就是key，claimValue就是那个value，微软就为我们准备了一些默认的claimType <img src="`+l+`" alt="image.png" loading="lazy"></p><h2 id="claimsidentity-身份证" tabindex="-1"><a class="header-anchor" href="#claimsidentity-身份证"><span>ClaimsIdentity(身份证)</span></a></h2><p>有了证件单元(claim)后，我们可以用多个claims可以组成一个身份证，然后就是claimsIdentity，这个名字代表是通过claims组织的，又表示表示其他的用途身份(Identity)， 这个身份证(ClaimsIdentity)还有一个重要的属性就是类型(AuthenticationType),这个是用来证明我们身份的，也就是你这身份的载体形式，比如实体类的还是纸质的还是电子形式的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimsIdentity</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ClaimsIdentity</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">//名字这么重要，当然不能让别人随便改啊，所以我不许 set，除了我儿子跟我姓，所以是 virtual 的</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Label <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">//这是我的证件类型，也很重要，同样不许 set</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AuthenticationType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token class-name">Claim</span> claim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RemoveClaim</span><span class="token punctuation">(</span><span class="token class-name">Claim</span> claim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FindClaim</span><span class="token punctuation">(</span><span class="token class-name">Claim</span> claim<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还要对整个证件信息进行约束，比如必须包含哪些信息，整个时候我们需要抽象出来一个接口来进行一些约束，对一些必要信息进行约束。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 定义证件对象的基本功能。</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IIdentity</span>
<span class="token punctuation">{</span>
    <span class="token comment">//证件名称</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// 用于标识证件的载体类型。</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> AuthenticationType <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">//是否是合法的证件。</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsAuthenticated <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们的ClaimsIdentity最终看起来定义的是这样子的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimsIdentity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IIdentity</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//......</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样子，我们的ClaimsIdentity(身份证)介绍完毕。</p><h2 id="claimprincipal-证件当事人" tabindex="-1"><a class="header-anchor" href="#claimprincipal-证件当事人"><span>ClaimPrincipal(证件当事人)</span></a></h2><p>一个人常常有多个身份，比如又是程序员还是外卖员，这个时候我们就需要一个载体来携带这些证件了，那我们就叫做一个证件当事人(ClaimsPrincipal)。 知道功能以后，我们就可以写出来如下代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimsPrincipal</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//把拥有的证件都给当事人</span>
    <span class="token keyword">public</span> <span class="token function">ClaimsPrincipal</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ClaimsIdentity<span class="token punctuation">&gt;</span></span> identities<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">//当事人的主身份呢</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">IIdentity</span> Identity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ClaimsIdentity<span class="token punctuation">&gt;</span></span> Identities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddIdentity</span><span class="token punctuation">(</span><span class="token class-name">ClaimsIdentity</span> identity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候我们还需要对其进行抽象一些，作为一个当事人，应该有一个主身份，这个时候就抽离出来一个接口(IPrincipal)接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrincipal</span>
<span class="token punctuation">{</span>
    <span class="token comment">//身份</span>
    <span class="token return-type class-name">IIdentity</span> Identity <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">//在否属于某个角色</span>
    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的证件当事人应该是这样子的</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClaimsPrincipal</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPrincipal</span></span> 
<span class="token punctuation">{</span>
   <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整示例" tabindex="-1"><a class="header-anchor" href="#完整示例"><span>完整示例</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//证件单元数组</span>
<span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;张先生&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>GivenName<span class="token punctuation">,</span> <span class="token string">&quot;azrng&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">&quot;aa@163.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//一个身份证，包含了多个证件单元</span>
<span class="token class-name"><span class="token keyword">var</span></span> identityClaims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span> <span class="token string">&quot;card&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//证件当事人可以存储多个证件</span>
<span class="token class-name"><span class="token keyword">var</span></span> userPrincipal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identityClaims<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="authentication-认证" tabindex="-1"><a class="header-anchor" href="#authentication-认证"><span>Authentication(认证)</span></a></h2><p>认证：类似于火车的检票员，用于鉴别用户是否购买车票(是否经过认证)，可以控制别人是否可以上车。认证里面包含一个单词叫做AuthenticationScheme，这个是用来告诉检票员采用哪种鉴别方式进行鉴别的。 注册身份验证的中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
    
    services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        
    <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AddAuthentication 这里是指定默认的认证载体类型，AddCookie 这里是注册载体类型的处理程序。 登录保存身份信息到cookie</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//证件单元</span>
<span class="token class-name"><span class="token keyword">var</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Claim<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">&quot;奥巴马&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span><span class="token string">&quot;身份证号&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//使用证件单元创建一张身份证</span>
<span class="token class-name"><span class="token keyword">var</span></span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsIdentity</span><span class="token punctuation">(</span>claims<span class="token punctuation">,</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//使用身份证创建一个证件当事人，也就是奥巴马</span>
<span class="token class-name"><span class="token keyword">var</span></span> identityPrincipal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClaimsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//奥巴马开始过安检</span>
<span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignInAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">,</span> identityPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能有些同学会有疑问，我们基于Claim的Cookie存储假如我的<strong>证件单元</strong>很多，就会生成一个非常大的cookie，每次传输是有性能影响的，并且Cookie是有最大限制的，怎么办呢？ 其实解决办法就是我们就可以开启这个 SessionStore，将Cookie存储在服务端例如Redis等缓存中。代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITicketStore<span class="token punctuation">,</span> MyRedisTicketStore<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CookieAuthenticationOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Cookies&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITicketStore<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>SessionStore <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，浏览器中已经存储了用户的身份啦。</p>`,33),d={href:"https://www.cnblogs.com/savorboard/p/authentication.html",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const a=e("ExternalLinkIcon");return p(),i("div",null,[r,n("blockquote",null,[n("p",null,[s("资料："),n("a",d,[s("https://www.cnblogs.com/savorboard/p/authentication.html"),c(a)])])])])}const g=t(u,[["render",k],["__file","claimsxiangguangainian.html.vue"]]),h=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/claimsxiangguangainian.html","title":"Claims相关概念","lang":"zh-CN","frontmatter":{"title":"Claims相关概念","lang":"zh-CN","date":"2023-09-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"claimsxiangguangainian","slug":"kga9ns","docsId":"32032890","description":"验证模型 ASP.NET Core 的验证模型是 claims-based authentication 。**Claim **是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。 You can think of claims as b...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/claimsxiangguangainian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Claims相关概念"}],["meta",{"property":"og:description","content":"验证模型 ASP.NET Core 的验证模型是 claims-based authentication 。**Claim **是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。 You can think of claims as b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1614393556790-980f5355-b77d-4850-8f56-7ed5fdd0775e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Claims相关概念\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1614393556790-980f5355-b77d-4850-8f56-7ed5fdd0775e.png\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"验证模型","slug":"验证模型","link":"#验证模型","children":[]},{"level":2,"title":"Claims(证件单元)","slug":"claims-证件单元","link":"#claims-证件单元","children":[]},{"level":2,"title":"ClaimsIdentity(身份证)","slug":"claimsidentity-身份证","link":"#claimsidentity-身份证","children":[]},{"level":2,"title":"ClaimPrincipal(证件当事人)","slug":"claimprincipal-证件当事人","link":"#claimprincipal-证件当事人","children":[{"level":3,"title":"完整示例","slug":"完整示例","link":"#完整示例","children":[]}]},{"level":2,"title":"Authentication(认证)","slug":"authentication-认证","link":"#authentication-认证","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.05,"words":1815},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/claimsxiangguangainian.md","localizedDate":"2023年9月20日","excerpt":"<h2>验证模型</h2>\\n<p>ASP.NET Core 的验证模型是&nbsp;claims-based authentication 。**Claim&nbsp;**是对被验证主体特征的一种表述，比如：登录用户名是...，email是...，用户Id是...，其中的“登录用户名”，“email”，“用户Id”就是ClaimType。\\nYou can think of claims as being a statement about...That statement consists of a name and a value.\\n对应现实中的事物，比如驾照，驾照中的“身份证号码：xxx”是一个claim，“姓名：xxx”是另一个claim。\\n一组claims构成了一个identity，具有这些claims的identity就是 <strong>ClaimsIdentity</strong> ，驾照就是一种ClaimsIdentity，可以把ClaimsIdentity理解为“证件”，驾照是一种证件，护照也是一种证件。\\nClaimsIdentity的持有者就是 **ClaimsPrincipal&nbsp;**，一个ClaimsPrincipal可以持有多个ClaimsIdentity，就比如一个人既持有驾照，又持有护照。\\n理解了Claim, ClaimsIdentity, ClaimsPrincipal这三个概念，就能理解生成登录Cookie为什么要用下面的代码？</p>","autoDesc":true}');export{g as comp,h as data};
