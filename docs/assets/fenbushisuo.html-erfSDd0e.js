import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as t,b as l}from"./app-qB9_Bjjp.js";const i="/kbms/common/5F4F1D78-7AE1-45BC-BB52-E0D183F12830.png",r={},u=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>分布式锁也可以理解为跨主机的线程同步。</p><table><thead><tr><th>进程内</th><th>跨进程</th><th>跨主机</th></tr></thead><tbody><tr><td>Lock/Monitor、SemaphoreSlim</td><td>Metux、Semaphore</td><td>分布式锁</td></tr><tr><td>用户态线程安全</td><td>内核态线程安全</td><td></td></tr></tbody></table><p>单机服务器可以通过共享堆内存来标记上锁/解锁，线程同步是建立在单击操作系统的用户态、内核态对共享内存的访问控制。</p><p>实现锁，需要实现的是需要锁的东西必须对这个锁都可以访问，比如内锁同一个项目，那么就可以使用lock，那么锁不同的项目，就需要这多个项目的进程都能访问到的地方，这个时候我们常用redis来实现。</p><h2 id="实现分布式锁" tabindex="-1"><a class="header-anchor" href="#实现分布式锁"><span>实现分布式锁</span></a></h2><p>不常用的操作：获取锁超时、锁重入、锁延期</p><figure><img src="'+i+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>该图片来自MASA技术团队公众号</p></blockquote><h3 id="基本要求" tabindex="-1"><a class="header-anchor" href="#基本要求"><span>基本要求</span></a></h3><p>简述：同一时间只能一个获取到、避免死锁、防止释放错锁。 1.分布式系统，一个锁在同一时间只能被一个服务器获取（这是分布式锁的基础） 2.具备锁失效机制，防止死锁（防止某些意外，锁没有得到方式，别人也无法获取到锁）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>SET 命令支持多个参数：
EX seconds-- 设置过期时间<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
NX -- 如果key不存在，则设置 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
因为SET命令参数可以替代SETNX，SETEX，GETSET，这些命令在未来可能被废弃。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上面设置key返回成功的时候，说明已经获取到了锁，任务完成后通过del命令解锁，或者超时后自动释放锁。 3.不要使用固定的string值作为锁标记着(比如设置该redis的值和当前业务相关起来，如果删除的时候，值是该业务的值，再执行删除操作)，而是使用一个不易被猜中的随机值，比如token 4.不适用del命令释放锁，而是发送script去移除key</p><blockquote><p>3、4是为了解决：锁提前过期，客户a还没有执行完命令，然后客户b获取锁去执行，这个时候a执行完然后删除锁的时候将锁着b的锁给删除了。</p></blockquote><h3 id="实现示例" tabindex="-1"><a class="header-anchor" href="#实现示例"><span>实现示例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/// <span class="token operator">&lt;</span>summary<span class="token operator">&gt;</span>
/// Acquires the lock.
/// <span class="token operator">&lt;</span>/summary<span class="token operator">&gt;</span>
/// <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;key&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/param<span class="token operator">&gt;</span>
/// <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;token&quot;</span><span class="token operator">&gt;</span>随机值<span class="token operator">&lt;</span>/param<span class="token operator">&gt;</span>
/// <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;expireSecond&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/param<span class="token operator">&gt;</span>
 /// <span class="token operator">&lt;</span>param <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;waitLockSeconds&quot;</span><span class="token operator">&gt;</span>非阻塞锁<span class="token operator">&lt;</span>/param<span class="token operator">&gt;</span>
static bool Lock<span class="token punctuation">(</span>string key, string token,int <span class="token assign-left variable">expireSecond</span><span class="token operator">=</span><span class="token number">10</span>, double waitLockSeconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    var waitIntervalMs <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    bool isLock<span class="token punctuation">;</span>
            
    DateTime begin <span class="token operator">=</span> DateTime.Now<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{</span>
         isLock <span class="token operator">=</span> Connection.GetDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>.StringSet<span class="token punctuation">(</span>key, token, TimeSpan.FromSeconds<span class="token punctuation">(</span>expireSecond<span class="token punctuation">)</span>, When.NotExists<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>isLock<span class="token punctuation">)</span>
             <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
             //不等待锁则返回
             <span class="token keyword">if</span> <span class="token punctuation">(</span>waitLockSeconds <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>
             //超过等待时间，则不再等待
             <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>DateTime.Now <span class="token operator">-</span> begin<span class="token punctuation">)</span>.TotalSeconds <span class="token operator">&gt;=</span> waitLockSeconds<span class="token punctuation">)</span> break<span class="token punctuation">;</span>
             Thread.Sleep<span class="token punctuation">(</span>waitIntervalMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
     } while <span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
     return false<span class="token punctuation">;</span>
 }
       
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>summary<span class="token operator">&gt;</span>  
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> Releases the lock.  
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span><span class="token operator">/</span>summary<span class="token operator">&gt;</span>  
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>returns<span class="token operator">&gt;</span><span class="token operator">&lt;</span>c<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">&gt;</span><span class="token punctuation">,</span> if lock was released<span class="token punctuation">,</span> <span class="token operator">&lt;</span>c<span class="token operator">&gt;</span>false<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">&gt;</span> otherwise.<span class="token operator">&lt;</span><span class="token operator">/</span>returns<span class="token operator">&gt;</span>  
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>param name<span class="token operator">=</span>&quot;key&quot;<span class="token operator">&gt;</span>Key.<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">&gt;</span>  
<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">&lt;</span>param name<span class="token operator">=</span>&quot;value&quot;<span class="token operator">&gt;</span>value<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">&gt;</span>  
static bool UnLock<span class="token punctuation">(</span>string key<span class="token punctuation">,</span> string value<span class="token punctuation">)</span>
{
    string lua_script <span class="token operator">=</span> @&quot;  
    if <span class="token punctuation">(</span>redis.call<span class="token punctuation">(</span>&#39;GET&#39;<span class="token punctuation">,</span> KEYS[<span class="token number">1</span>]<span class="token punctuation">)</span> <span class="token operator">==</span> ARGV[<span class="token number">1</span>]<span class="token punctuation">)</span> then  
         redis.call<span class="token punctuation">(</span>&#39;DEL&#39;<span class="token punctuation">,</span> KEYS[<span class="token number">1</span>]<span class="token punctuation">)</span>  
          return true  
          else  
          return false  
        end  
      &quot;<span class="token punctuation">;</span>
     try
     {
          var res <span class="token operator">=</span> Connection.GetDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span>.ScriptEvaluate<span class="token punctuation">(</span>lua_script<span class="token punctuation">,</span>
                                                           new RedisKey[] { key }<span class="token punctuation">,</span>
                                                           new RedisValue[] { value }<span class="token punctuation">)</span><span class="token punctuation">;</span>
            return <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>res<span class="token punctuation">;</span>
      }
     catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>
     {
          Console.WriteLine<span class="token punctuation">(</span>$&quot;ReleaseLock lock fail...{ex.Message}&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
          return false<span class="token punctuation">;</span>
     }
}
        
        private static Lazy<span class="token operator">&lt;</span>ConnectionMultiplexer<span class="token operator">&gt;</span> lazyConnection <span class="token operator">=</span> new Lazy<span class="token operator">&lt;</span>ConnectionMultiplexer<span class="token operator">&gt;</span><span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
        {
            ConfigurationOptions configuration <span class="token operator">=</span> new ConfigurationOptions
            {
                AbortOnConnectFail <span class="token operator">=</span> false<span class="token punctuation">,</span>
                ConnectTimeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span>
            }<span class="token punctuation">;</span>
            configuration.EndPoints.Add<span class="token punctuation">(</span>&quot;<span class="token number">10.100</span><span class="token number">.219</span><span class="token number">.9</span>&quot;<span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            return ConnectionMultiplexer.Connect<span class="token punctuation">(</span>configuration.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        public static ConnectionMultiplexer Connection <span class="token operator">=</span><span class="token operator">&gt;</span> lazyConnection.Value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免无限制抢锁操作，增加了非阻塞锁，就是轮询n秒后如果还没有获取的锁，那么就直接返回。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token comment">// 尝试并行执行3个任务</span>
     Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> x <span class="token operator">=&gt;</span>
     <span class="token punctuation">{</span>
           <span class="token class-name"><span class="token keyword">string</span></span> token <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;loki:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
           <span class="token class-name"><span class="token keyword">bool</span></span> isLocked <span class="token operator">=</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;loki&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
           <span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span>
           <span class="token punctuation">{</span>
               Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">token</span><span class="token punctuation">}</span></span><span class="token string"> begin reduce stocks (with lock) at </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">token</span><span class="token punctuation">}</span></span><span class="token string"> release lock </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token string">&quot;loki&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">. &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           <span class="token keyword">else</span>
           <span class="token punctuation">{</span>
             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">token</span><span class="token punctuation">}</span></span><span class="token string"> don&#39;t get lock at </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中意的写法" tabindex="-1"><a class="header-anchor" href="#中意的写法"><span>中意的写法</span></a></h2><p>借助委托去实现，看着好看不像有些，获取锁就在第一行，获取不到不往下面走</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _lockProvider<span class="token punctuation">.</span><span class="token function">TryLockAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2>`,22),k={href:"https://mp.weixin.qq.com/s/LfuEj0iB0oG3fAfINPDDqA",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/Z7TS/p/17359113.html",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"参考文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文档"},[n("span",null,"参考文档")])],-1),v={href:"https://mp.weixin.qq.com/s/hixBhYgbuJSgAUpMXwZSQQ",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/BkrKD86va-UQYhN7AyBIJA",target:"_blank",rel:"noopener noreferrer"};function g(h,f){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/LfuEj0iB0oG3fAfINPDDqA"),t(a)]),s(" | 功能强大，基于 .NET 实现的分布式锁 "),n("a",d,[s("https://www.cnblogs.com/Z7TS/p/17359113.html"),t(a)]),s(" | .NET开源分布式锁DistributedLock - Broder - 博客园 RedLock.net")]),m,n("blockquote",null,[n("p",null,[s("码甲哥："),n("a",v,[s("https://mp.weixin.qq.com/s/hixBhYgbuJSgAUpMXwZSQQ"),t(a)])]),n("p",null,[s(".Net Redis 实现分布式锁以及实现Gzip数据压缩提升性能："),n("a",b,[s("https://mp.weixin.qq.com/s/BkrKD86va-UQYhN7AyBIJA"),t(a)])])])])}const q=e(r,[["render",g],["__file","fenbushisuo.html.vue"]]),x=JSON.parse('{"path":"/middleware/smallService/fenbushisuo/fenbushisuo.html","title":"分布式锁","lang":"zh-CN","frontmatter":{"title":"分布式锁","lang":"zh-CN","date":"2023-10-04T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"fenbushisuo","slug":"lor0gr","docsId":"48321000","description":"概述 分布式锁也可以理解为跨主机的线程同步。 单机服务器可以通过共享堆内存来标记上锁/解锁，线程同步是建立在单击操作系统的用户态、内核态对共享内存的访问控制。 实现锁，需要实现的是需要锁的东西必须对这个锁都可以访问，比如内锁同一个项目，那么就可以使用lock，那么锁不同的项目，就需要这多个项目的进程都能访问到的地方，这个时候我们常用redis来实现。 ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/fenbushisuo/fenbushisuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"分布式锁"}],["meta",{"property":"og:description","content":"概述 分布式锁也可以理解为跨主机的线程同步。 单机服务器可以通过共享堆内存来标记上锁/解锁，线程同步是建立在单击操作系统的用户态、内核态对共享内存的访问控制。 实现锁，需要实现的是需要锁的东西必须对这个锁都可以访问，比如内锁同一个项目，那么就可以使用lock，那么锁不同的项目，就需要这多个项目的进程都能访问到的地方，这个时候我们常用redis来实现。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/5F4F1D78-7AE1-45BC-BB52-E0D183F12830.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-12T01:48:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-12T01:48:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式锁\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/5F4F1D78-7AE1-45BC-BB52-E0D183F12830.png\\"],\\"datePublished\\":\\"2023-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-12T01:48:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现分布式锁","slug":"实现分布式锁","link":"#实现分布式锁","children":[{"level":3,"title":"基本要求","slug":"基本要求","link":"#基本要求","children":[]},{"level":3,"title":"实现示例","slug":"实现示例","link":"#实现示例","children":[]}]},{"level":2,"title":"中意的写法","slug":"中意的写法","link":"#中意的写法","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1699753704000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.52,"words":1057},"filePathRelative":"middleware/smallService/fenbushisuo/fenbushisuo.md","localizedDate":"2023年10月4日","excerpt":"<h2>概述</h2>\\n<p>分布式锁也可以理解为跨主机的线程同步。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>进程内</th>\\n<th>跨进程</th>\\n<th>跨主机</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Lock/Monitor、SemaphoreSlim</td>\\n<td>Metux、Semaphore</td>\\n<td>分布式锁</td>\\n</tr>\\n<tr>\\n<td>用户态线程安全</td>\\n<td>内核态线程安全</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>单机服务器可以通过共享堆内存来标记上锁/解锁，线程同步是建立在单击操作系统的用户态、内核态对共享内存的访问控制。</p>","autoDesc":true}');export{q as comp,x as data};
