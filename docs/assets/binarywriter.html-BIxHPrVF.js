import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,b as n,e as s,f as e,d as c}from"./app-CBxp4zeL.js";const r={},l=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),u={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader",target:"_blank",rel:"noopener noreferrer"},d={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter",target:"_blank",rel:"noopener noreferrer"},k=c(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="序列化示例" tabindex="-1"><a class="header-anchor" href="#序列化示例"><span>序列化示例</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BinarySerializationHelper</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用 BinaryWriter 将对象序列化为二进制数据</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">SerializeObjectToBinary</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">MemoryStream</span> memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">BinaryWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryWriter</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 根据对象类型实现自定义的序列化逻辑</span>
                <span class="token comment">// 这里只是一个简单示例，你需要根据自己的对象结构编写相应的序列化逻辑</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">is</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 添加其他对象类型的序列化逻辑</span>

                writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> memoryStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用 BinaryWriter 将 Person 对象序列化为二进制数据。请注意，这只是一个简单的示例，你需要根据自己的对象结构编写相应的序列化逻辑。 以下是一个 Person 类的示例，用于演示如何使用 BinaryWriter 进行序列化：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以使用 SerializeObjectToBinary 方法将对象序列化为二进制数据：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> binaryData <span class="token operator">=</span> BinarySerializationHelper<span class="token punctuation">.</span><span class="token function">SerializeObjectToBinary</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(y,v){const a=p("ExternalLinkIcon");return o(),i("div",null,[l,n("p",null,[n("a",u,[s("BinaryReader"),e(a)]),s(" 和 "),n("a",d,[s("BinaryWriter"),e(a)]),s("，适用于 XML 和 JSON。")]),k])}const g=t(r,[["render",m],["__file","binarywriter.html.vue"]]),w=JSON.parse('{"path":"/dotnet/base/serialize/erjinzhi/binarywriter.html","title":"BinaryWriter","lang":"zh-CN","frontmatter":{"title":"BinaryWriter","lang":"zh-CN","date":"2023-09-04T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"binarywriter","slug":"oe5o6osa1ywkawaw","docsId":"138322798","description":"概述 BinaryReader 和 BinaryWriter，适用于 XML 和 JSON。 操作 序列化示例 在上述示例中，我们使用 BinaryWriter 将 Person 对象序列化为二进制数据。请注意，这只是一个简单的示例，你需要根据自己的对象结构编写相应的序列化逻辑。 以下是一个 Person 类的示例，用于演示如何使用 BinaryWri...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/serialize/erjinzhi/binarywriter.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"BinaryWriter"}],["meta",{"property":"og:description","content":"概述 BinaryReader 和 BinaryWriter，适用于 XML 和 JSON。 操作 序列化示例 在上述示例中，我们使用 BinaryWriter 将 Person 对象序列化为二进制数据。请注意，这只是一个简单的示例，你需要根据自己的对象结构编写相应的序列化逻辑。 以下是一个 Person 类的示例，用于演示如何使用 BinaryWri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BinaryWriter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"序列化示例","slug":"序列化示例","link":"#序列化示例","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.03,"words":308},"filePathRelative":"dotnet/base/serialize/erjinzhi/binarywriter.md","localizedDate":"2023年9月4日","excerpt":"<h2>概述</h2>\\n<p><a href=\\"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binaryreader\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BinaryReader</a> 和 <a href=\\"https://learn.microsoft.com/zh-cn/dotnet/api/system.io.binarywriter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BinaryWriter</a>，适用于 XML 和 JSON。</p>","autoDesc":true}');export{g as comp,w as data};
