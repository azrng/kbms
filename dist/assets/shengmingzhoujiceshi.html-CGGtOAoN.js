import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as h}from"./app-BugT5USA.js";const e={};function l(t,s){return h(),a("div",null,s[0]||(s[0]=[n(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><ul><li>依赖注入只负责由其创建的对象实例</li><li>容器或者子容器释放的时候，会释放由其创建的对象实例。</li></ul><p>推荐使用容器来来管理我们的对象的创建和释放。</p><table><thead><tr><th><strong>--</strong></th><th><strong>---</strong></th><th><strong>---</strong></th><th><strong>---</strong></th></tr></thead><tbody><tr><td>Singleton</td><td>单例</td><td>服务容器首次请求会创建，后续都使用同一实例</td><td>AddSingleton</td></tr><tr><td>Scoped</td><td>特定范围</td><td>在一个请求(连接)时被创建一次实例，生命周期横贯整次请求</td><td>AddScoped</td></tr><tr><td>Transient</td><td>瞬时</td><td>服务容器每次请求，都会创建一个实例，适合轻量级、无状态服务</td><td>AddTransient</td></tr></tbody></table><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>为了演示，我们创建一个UserService，并让该Service继承IDisposable</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IDisposable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Dispose</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;UserService服务被释放  {</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetHashCode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">()}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IUserService</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在控制器中我们通过FromServices去注入IUserService</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpGet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FromServices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FromServices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> userService2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;当前创建的UserService  {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">userService</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetHashCode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">()}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;当前创建的UserService2  {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">userService2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetHashCode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">()}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //为当前请求创建一个子容器,一次请求会创建一次</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    using</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scope</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> HttpContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RequestServices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CreateScope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ServiceProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetRequiredService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;子容器创建的UserService  {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetHashCode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">()}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;子容器创建的UserService处理完毕&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;接口处理完毕 &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> DateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ToString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="瞬时生命周期" tabindex="-1"><a class="header-anchor" href="#瞬时生命周期"><span>瞬时生命周期</span></a></h3><p>现在我们将刚才的服务注册为瞬时生命周期</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddTransient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行查看对象释放的时机,输出结果</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一次请求结束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  35827753</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  4419630</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  40124269</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  40124269</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  4419630</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  35827753</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二次请求结束       </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  17653682</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  42194754</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  15688314</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  15688314</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  42194754</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  17653682</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过结果可以得出结论，瞬时生命周期对象的释放在这次请求结束的时候释放，并且一次请求可能产生多次实例，多次请求产生多次实例。</p><p>但是如果我们是在跟容器进行获取的瞬时服务，那么它就不是请求结束的时候释放了。<br> ConfigureServices中注册</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddTransient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Configure中配置</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> servise</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ApplicationServices</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">servise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会在项目启动的时候进行输出，中间调用接口并不会释放服务,当程序关闭的时候释放服务</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Microsoft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Hosting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Lifetime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">shutting</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> down</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  30995104</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="范围生命周期" tabindex="-1"><a class="header-anchor" href="#范围生命周期"><span>范围生命周期</span></a></h3><p>现在我们将刚才的服务注册为范围生命周期</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddScoped</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddTransient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行查看对象释放的时机，输出结果</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一次请求结束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  43182754</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  43182754</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  49229074</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  49229074</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  43182754</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二次请求结束    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  28952583</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  28952583</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  51571199</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  51571199</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  28952583</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过结果可以得出结论，范围生命周期对象的释放在这次请求结束的时候释放，并且一次请求内只产生一次实例，多次请求产生多次实例。</p><h3 id="单例生命周期" tabindex="-1"><a class="header-anchor" href="#单例生命周期"><span>单例生命周期</span></a></h3><p>现在我们将刚才的服务注册为范围生命周期</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行查看对象释放的时机，输出结果</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一次接口请求结束</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二次</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  26224738</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当Ctrl+C关闭程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Microsoft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Hosting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Lifetime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">shutting</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> down</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">UserService服务被释放</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  13588007</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过结果可以得出结论，单例生命周期对象的释放在程序停止运行的时候释放，并且多次请求只产生一次相同的实例。</p><p>当服务是我们自己创建的然后再次测试</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IUserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>只有单例模式下支持该方式，可能故意限制的</p></blockquote><p>输出结果</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-csharp"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一次请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二次请求</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">当前创建的UserService2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  62006733</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">子容器创建的UserService处理完毕</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">接口处理完毕</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//关闭程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Microsoft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Hosting</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Lifetime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">shutting</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> down</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过结果得出结论，我们自己创建的实例，并不通过容器管理，也就是说不会自己释放。</p>`,39)]))}const r=i(e,[["render",l]]),d=JSON.parse('{"path":"/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html","title":"生命周期测试","lang":"zh-CN","frontmatter":{"title":"生命周期测试","lang":"zh-CN","date":"2022-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shengmingzhoujiceshi","slug":"odso5f","docsId":"51579914","description":"介绍 依赖注入只负责由其创建的对象实例 容器或者子容器释放的时候，会释放由其创建的对象实例。 推荐使用容器来来管理我们的对象的创建和释放。 操作 为了演示，我们创建一个UserService，并让该Service继承IDisposable 在控制器中我们通过FromServices去注入IUserService 瞬时生命周期 现在我们将刚才的服务注册为...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"生命周期测试"}],["meta",{"property":"og:description","content":"介绍 依赖注入只负责由其创建的对象实例 容器或者子容器释放的时候，会释放由其创建的对象实例。 推荐使用容器来来管理我们的对象的创建和释放。 操作 为了演示，我们创建一个UserService，并让该Service继承IDisposable 在控制器中我们通过FromServices去注入IUserService 瞬时生命周期 现在我们将刚才的服务注册为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}]]},"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":4.36,"words":1309},"filePathRelative":"dotnet/base/yilaizhuru/morenyilaizhuru/shengmingzhoujiceshi.md","excerpt":"<h2>介绍</h2>\\n<ul>\\n<li>依赖注入只负责由其创建的对象实例</li>\\n<li>容器或者子容器释放的时候，会释放由其创建的对象实例。</li>\\n</ul>\\n<p>推荐使用容器来来管理我们的对象的创建和释放。</p>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>--</strong></th>\\n<th><strong>---</strong></th>\\n<th><strong>---</strong></th>\\n<th><strong>---</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Singleton</td>\\n<td>单例</td>\\n<td>服务容器首次请求会创建，后续都使用同一实例</td>\\n<td>AddSingleton</td>\\n</tr>\\n<tr>\\n<td>Scoped</td>\\n<td>特定范围</td>\\n<td>在一个请求(连接)时被创建一次实例，生命周期横贯整次请求</td>\\n<td>AddScoped</td>\\n</tr>\\n<tr>\\n<td>Transient</td>\\n<td>瞬时</td>\\n<td>服务容器每次请求，都会创建一个实例，适合轻量级、无状态服务</td>\\n<td>AddTransient</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,d as data};
