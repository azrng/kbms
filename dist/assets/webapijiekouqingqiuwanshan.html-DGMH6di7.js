import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-vSdX8vi3.js";const u="/kbms/common/1662823186138-84cf332f-1397-4d06-b863-0d52b240266b.png",i="/kbms/common/1662866734791-b11bbdd0-b027-4909-a853-e49e8f3a1ea8.png",k="/kbms/common/1662825041106-57360561-34bd-4633-877f-7304a4b5fe5d.png",r="/kbms/common/1662867846712-07cdbdf4-52c9-42e5-97dc-4353ceb05eaa.png",d="/kbms/common/1662887452094-03bbd8da-a4f8-49fe-97ba-66ab4e3729a7.png",m="/kbms/common/1662887879216-7df10bec-f42e-40fa-9e8d-c6802bca5405.png",v="/kbms/common/1662889332097-f3e058bb-b5f6-40e6-8426-e05734331bc0.png",b={},g=n("h2",{id:"目的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目的"},[n("span",null,"目的")])],-1),h={href:"https://www.php.cn/course/1020.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<blockquote><p>本文示例代码环境：vs2022、net6</p></blockquote><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>新创建了一个.NetWebAPI程序，安装组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoMapper.Extensions.Microsoft.DependencyInjection&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;11.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Mvc.NewtonsoftJson&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.3.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore.Newtonsoft&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.3.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ConfigureServices配置NewtonsoftJson以及Automapper和操作数据库代码(为了省事，删除了一些不影响当前效果的代码)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">&quot;MyWebApi&quot;</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//注入AutoMapper</span>
	services<span class="token punctuation">.</span><span class="token function">AddAutoMapper</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>DefinedTypes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Profile</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在Net core3.0以后，微软移除了Newtonsoft.Json，而使用了System.Text.Json，所以依赖于Newtonsoft.Json的组件将不可用，需要安装 Microsoft.AspNetCore.Mvc.NewtonsoftJson 包</p></blockquote><p>因为仅仅作为演示，所以我只是新增一个控制器，里面包含了get、post、put、patch、delete几种类型的接口。这里先不贴代码，一点一点看。通过一个用户的添加、修改、删除作为一个演示的流程。</p>`,8),w={href:"https://mp.weixin.qq.com/s/5MEVtDhHmdmjXe2x-yr6dg",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>数据来源就是控制器里面的一个静态变量，格式如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态变量如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span> _userDtoList <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">,</span>
            Sex <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span>
            UserId <span class="token operator">=</span> <span class="token number">6974150586715897857</span> <span class="token operator">+</span> t
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端请求的方法我使用的是HttpClient，并且做成了一个公共类，部分需要用到的如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientHelper</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHttpHelper</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpClient</span> _client<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造函数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>httpClientFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">HttpClientHelper</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> httpClientFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _client <span class="token operator">=</span> httpClientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">VerifyParam</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken<span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">&quot;url不能为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;Bearer </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">jwtToken</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">?.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">in</span> headers<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">HttpResponseMessage</span> httpResponse<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//确保成功完成，不是成功就返回具体错误信息</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> resStr <span class="token operator">=</span> <span class="token keyword">await</span> httpResponse<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Convert<span class="token punctuation">.</span><span class="token function">ChangeType</span><span class="token punctuation">(</span>resStr<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>resStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><blockquote><p>请求头传递token只是为了演示请求头传递参数的写法，token为伪值</p></blockquote><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>GET</span></a></h3><p>从web服务检索数据。传递参数的本质是url字符串拼接，Request-Head头部传递，Request-Body中不能传递(严格点说不建议，因为我使用Apifox等工具可以在body中传值，swagger会提示 Request with GET/HEAD method cannot have body)</p><h4 id="query格式" tabindex="-1"><a class="header-anchor" href="#query格式"><span>Query格式</span></a></h4><p>编写用户id查询用户信息接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/details&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">UserDto</span> <span class="token function">GetUserDetails</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_userDtoList<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;未找到用户标识&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求" tabindex="-1"><a class="header-anchor" href="#前端请求"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/details?userId=6974150586715897857&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> postdata <span class="token operator">=</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">&quot;6974150586715897857&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Bearer 123456&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/details&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> postdata<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求" tabindex="-1"><a class="header-anchor" href="#后端请求"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5000/api/HttpSample/user/details?userId=6974150586715897857&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的_httpHelper是注入的IHttpHelper(下面其他的方法一样)，对应的GetAsync为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求" tabindex="-1"><a class="header-anchor" href="#接口工具请求"><span>接口工具请求</span></a></h5>`,20),q={href:"http://localhost:5000/api/HttpSample/user/details?userId=6974150586715897857",target:"_blank",rel:"noopener noreferrer"},x=n("img",{src:u,alt:"image.png",loading:"lazy"},null,-1),A=p(`<h3 id="post" tabindex="-1"><a class="header-anchor" href="#post"><span>POST</span></a></h3><p>在web服务上创建新的数据项。约定用于向服务端提交数据操作，请求时候参数放在参数FromBody传递</p><h4 id="json格式" tabindex="-1"><a class="header-anchor" href="#json格式"><span>Json格式</span></a></h4><p>演示添加用户操作 请求类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口代码示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/add&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">UserDto</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_userDtoList<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> request<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识已经存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;   &quot;</span> <span class="token operator">+</span> HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _userDtoList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求-1" tabindex="-1"><a class="header-anchor" href="#前端请求-1"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> param <span class="token operator">=</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">&quot;8974150586715897867&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;老八&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">sex</span><span class="token punctuation">:</span> <span class="token string">&quot;女&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">dataType</span><span class="token punctuation">:</span> &#39;json&#39;<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/add&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-1" tabindex="-1"><a class="header-anchor" href="#后端请求-1"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>
<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/add&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> usedto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
    UserId <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> <span class="token string">&quot;女&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> usedto<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">PostAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> data <span class="token keyword">is</span> <span class="token return-type class-name"><span class="token keyword">string</span> <span class="token punctuation">?</span></span> data<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>jsonData <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-1" tabindex="-1"><a class="header-anchor" href="#接口工具请求-1"><span>接口工具请求</span></a></h5><p>传递参数格式为json格式，请求头部默认添加：&quot;Content-Type&quot;, &quot;application/json&quot; <img src="`+i+`" alt="image.png" loading="lazy"></p><h4 id="x-www-form-unlencoded格式" tabindex="-1"><a class="header-anchor" href="#x-www-form-unlencoded格式"><span>x-www-form-unlencoded格式</span></a></h4><p>更新用户姓名</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/updatename&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">UpdateName</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    entity<span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求-2" tabindex="-1"><a class="header-anchor" href="#前端请求-2"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> postdata <span class="token operator">=</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">&quot;6974150586715897857&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;赵六&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/updatename&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> postdata<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-2" tabindex="-1"><a class="header-anchor" href="#后端请求-2"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>
<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/updatename&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;6974150586715897857&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostFormDataAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> dic<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">PostFormDataAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> httpContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-2" tabindex="-1"><a class="header-anchor" href="#接口工具请求-2"><span>接口工具请求</span></a></h5><p>选择post请求，参数在Body，然后选择x-www-form-unlencoded格式。 <img src="`+k+`" alt="image.png" loading="lazy"></p><h4 id="form-data格式" tabindex="-1"><a class="header-anchor" href="#form-data格式"><span>Form-data格式</span></a></h4><p>模拟上传用户头像操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/uploadImg&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Upload</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span> <span class="token class-name">IFormFile</span> img<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromForm</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>img <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户头像不能为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> img<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：当你上传大于30000000字节长度的文件时候，需要修改上传文件的默认限制</p></blockquote><h5 id="前端请求-3" tabindex="-1"><a class="header-anchor" href="#前端请求-3"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">(</span><span class="token string">&quot;#tijiao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//logoimg是&lt;input type=&quot;file&quot; id=&quot;logoimg&quot;&quot; /&gt;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> files <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">&quot;#logoimg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span>&#39;files&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取到文件列表</span>

        <span class="token class-name"><span class="token keyword">var</span></span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6974150586715897857&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;1122.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图片文件流</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            type<span class="token punctuation">:</span> &#39;post&#39;<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/uploadImg&quot;</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">mimeType</span><span class="token punctuation">:</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">processData</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> formData<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//后端Httpclient请求成功后返回过来的结果</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-3" tabindex="-1"><a class="header-anchor" href="#后端请求-3"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/uploadImg&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultipartFormDataContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Downloads\\\\11111.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> byteContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ByteArrayContent</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
byteContent<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDisposition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDispositionHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;form-data&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;img&quot;</span><span class="token punctuation">,</span>
    FileName <span class="token operator">=</span> <span class="token string">&quot;111.jpg&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写法一</span>
formData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span><span class="token string">&quot;6974150586715897857&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 写法二</span>
<span class="token class-name"><span class="token keyword">var</span></span> byteContent2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ByteArrayContent</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">&quot;天气&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
byteContent2<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDisposition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDispositionHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;form-data&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>byteContent2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> headerDic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
	<span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Bearer 123456&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostFormDataAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> formData<span class="token punctuation">,</span> headerDic<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">PostFormDataAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name">MultipartFormDataContent</span> data<span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-3" tabindex="-1"><a class="header-anchor" href="#接口工具请求-3"><span>接口工具请求</span></a></h5><p>选择Body=&gt;form-data <img src="`+r+`" alt="image.png" loading="lazy"></p><h5 id="设置上传大小" tabindex="-1"><a class="header-anchor" href="#设置上传大小"><span>设置上传大小</span></a></h5><p>Form请求大小设置</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>services.Configure&lt;FormOptions&gt;(x =&gt;
{
    x.ValueLengthLimit = int.MaxValue;
    // 设置上传大小限制
    x.MultipartBodyLengthLimit = int.MaxValue;
    x.MemoryBufferThreshold = int.MaxValue;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put" tabindex="-1"><a class="header-anchor" href="#put"><span>PUT</span></a></h3><p>更新web服务上的数据项。</p><h4 id="json格式-1" tabindex="-1"><a class="header-anchor" href="#json格式-1"><span>Json格式</span></a></h4><p>更新用户信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPut</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/update&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token class-name">UserDto</span> userDto<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userDto <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;参数不能为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;    &quot;</span> <span class="token operator">+</span> HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currUser <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userDto<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currUser <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    currUser<span class="token punctuation">.</span>Name <span class="token operator">=</span> userDto<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
    currUser<span class="token punctuation">.</span>Sex <span class="token operator">=</span> userDto<span class="token punctuation">.</span>Sex<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求-4" tabindex="-1"><a class="header-anchor" href="#前端请求-4"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> param <span class="token operator">=</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">&quot;6974150586715897859&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;老八&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">sex</span><span class="token punctuation">:</span> <span class="token string">&quot;女&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;put&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">dataType</span><span class="token punctuation">:</span> &#39;json&#39;<span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/update&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-4" tabindex="-1"><a class="header-anchor" href="#后端请求-4"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>

<span class="token class-name"><span class="token keyword">var</span></span> usedto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserDto</span>
<span class="token punctuation">{</span>
    UserId <span class="token operator">=</span> <span class="token number">6974150586715897859</span><span class="token punctuation">,</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;老八&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> <span class="token string">&quot;女&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/update&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PutAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> usedto<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">PutAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> data <span class="token keyword">is</span> <span class="token return-type class-name"><span class="token keyword">string</span> <span class="token punctuation">?</span></span> data<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>jsonData <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">PutAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-4" tabindex="-1"><a class="header-anchor" href="#接口工具请求-4"><span>接口工具请求</span></a></h5>`,45),_={href:"http://localhost:5000/api/HttpSample/user/update",target:"_blank",rel:"noopener noreferrer"},T=n("img",{src:d,alt:"image.png",loading:"lazy"},null,-1),D=p(`<h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>DELETE</span></a></h3><p>删除web服务上的数据项。</p><h4 id="query格式-1" tabindex="-1"><a class="header-anchor" href="#query格式-1"><span>Query格式</span></a></h4><p>删除用户信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpDelete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> <span class="token string">&quot;    &quot;</span> <span class="token operator">+</span> HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _userDtoList<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求-5" tabindex="-1"><a class="header-anchor" href="#前端请求-5"><span>前端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user?userId=6974150586715897861&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-5" tabindex="-1"><a class="header-anchor" href="#后端请求-5"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>
<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user?userId=6974150586715897862&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">DeleteAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">DeleteAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-5" tabindex="-1"><a class="header-anchor" href="#接口工具请求-5"><span>接口工具请求</span></a></h5>`,10),C={href:"http://localhost:5000/api/HttpSample/user?userId=6974150586715897859",target:"_blank",rel:"noopener noreferrer"},S=n("img",{src:m,alt:"image.png",loading:"lazy"},null,-1),I=n("h3",{id:"patch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#patch"},[n("span",null,"Patch")])],-1),H=n("p",null,"通过描述有关如何修改项的一组说明，更新web服务上的数据项。",-1),j=n("p",null,'请求格式如下： [{"op" : "replace", "path" : "/PassWord", "value" : "222222"}]',-1),R=n("blockquote",null,[n("p",null,"op属性指示操作的类型，path属性指示要更新的元素，value属性提供新值。")],-1),P=n("blockquote",null,[n("p",null,"add：添加属性或数组元素。 对于现有属性：设置值。 remove：删除属性或数组元素。 replace：替换操作")],-1),N={href:"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/jsonpatch?view=aspnetcore-6.0",target:"_blank",rel:"noopener noreferrer"},E=p(`<h4 id="json格式-2" tabindex="-1"><a class="header-anchor" href="#json格式-2"><span>Json格式</span></a></h4><p>在此用于更新数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPatch</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user/update2/{userId}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">UserDto</span> <span class="token function">Update2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromRoute</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">,</span> <span class="token class-name">JsonPatchDocument<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span> jsonPatch<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IMapper</span> mapper<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParameterException</span><span class="token punctuation">(</span><span class="token string">&quot;用户标识无效&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> dto <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jsonPatch<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> ModelState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> _userDtoList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mapper<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="前端请求-6" tabindex="-1"><a class="header-anchor" href="#前端请求-6"><span>前端请求</span></a></h5><p>演示根据用户id去更新用户的姓名</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>$<span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> par <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">&quot;op&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;replace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;/name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;老六&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">&quot;Patch&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">url</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/update2/6974150586715897857&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">headers</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer 123456&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">contentType</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">data</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>par<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token named-parameter punctuation">success</span><span class="token punctuation">:</span> function <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="后端请求-6" tabindex="-1"><a class="header-anchor" href="#后端请求-6"><span>后端请求</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span><span class="token comment">//此处token是伪值</span>
<span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/api/HttpSample/user/update2/6974150586715897859&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token string">&quot;[{\\&quot;op\\&quot;:\\&quot;replace\\&quot;,\\&quot;path\\&quot;:\\&quot;/name\\&quot;,\\&quot;value\\&quot;:\\&quot;小七七\\&quot;}]&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _httpHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PatchAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResultModel<span class="token punctuation">&lt;</span>UserDto<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">PatchAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jwtToken <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">VerifyParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> jsonData <span class="token operator">=</span> data <span class="token keyword">is</span> <span class="token return-type class-name"><span class="token keyword">string</span> <span class="token punctuation">?</span></span> data<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>jsonData <span class="token operator">??</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">PatchAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-method"><span class="token function">ConvertResponseResult</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="接口工具请求-6" tabindex="-1"><a class="header-anchor" href="#接口工具请求-6"><span>接口工具请求</span></a></h5><p>参数传递：Body=&gt;json <img src="`+v+'" alt="image.png" loading="lazy"></p><h2 id="流式响应" tabindex="-1"><a class="header-anchor" href="#流式响应"><span>流式响应</span></a></h2>',11),F={href:"https://www.cnblogs.com/cplemom/p/17269789.html",target:"_blank",rel:"noopener noreferrer"},U={href:"http://xn--asp-y28dw06dvh8amc2c.net/",target:"_blank",rel:"noopener noreferrer"},z=p(`<h3 id="返回文本内容" tabindex="-1"><a class="header-anchor" href="#返回文本内容"><span>返回文本内容</span></a></h3><p>服务端</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;文档.txt&quot;</span><span class="token punctuation">;</span>
    Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Memory<span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">char</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> writeLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//每次读取5个字符写入到流中</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>writeLength <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadBlockAsync</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>writeLength <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        	buffer <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token range operator">..</span>writeLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端HttpClient</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/config/text&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name">HttpRequestMessage</span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>httpRequestMessage<span class="token punctuation">,</span> HttpCompletionOption<span class="token punctuation">.</span>ResponseHeadersRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStreamAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> writeLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>writeLength <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> writeLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;END&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpCompletionOption枚举有两个值，默认情况下使用的是ResponseContentRead</p><ul><li>ResponseContentRead：等到整个响应完成才完成操作</li><li>ResponseHeadersRead：一旦获取到响应头即完成操作，不用等到整个内容响应</li></ul><p>JS</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5000/config/text&quot;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> function <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> progressEvent<span class="token punctuation">.</span>target<span class="token punctuation">.</span>responseText
    <span class="token punctuation">}</span>
    client<span class="token punctuation">.</span>onloadend <span class="token operator">=</span> function <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        div<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;END&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回图片" tabindex="-1"><a class="header-anchor" href="#返回图片"><span>返回图片</span></a></h3><p>服务端</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;pixelcity.png&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileExtensionContentTypeProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">TryGetContentType</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> contentType <span class="token operator">??</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileStream <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">OpenRead</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> writeLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>writeLength <span class="token operator">=</span> fileStream<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Response<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> writeLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function L(M,J){const a=o("ExternalLinkIcon");return c(),l("div",null,[g,n("p",null,[s("通过一个简单的项目，编写一些WebApi操作示例。 http状态码大全："),n("a",h,[s("https://www.php.cn/course/1020.html"),t(a)])]),y,n("blockquote",null,[n("p",null,[s("记得配置允许跨域请求，要不js请求会因为跨域问题而报错。详情看"),n("a",w,[s("此处"),t(a)])])]),f,n("p",null,[s("url："),n("a",q,[s("http://localhost:5000/api/HttpSample/user/details?userId=6974150586715897857"),t(a)]),s(" 并且再请求头增加：Authorization，值为Bearer xxxx 返回结果如下 "),x]),A,n("p",null,[s("URL："),n("a",_,[s("http://localhost:5000/api/HttpSample/user/update"),t(a)]),s(" 参数传递：Body=>json "),T]),D,n("p",null,[s("URL："),n("a",C,[s("http://localhost:5000/api/HttpSample/user?userId=6974150586715897859"),t(a)]),S]),I,H,j,R,P,n("p",null,[s("为了支持该请求方式，需要安装nuget包Microsoft.AspNetCore.Mvc.NewtonsoftJson。 参考文档："),n("a",N,[s("https://docs.microsoft.com/zh-cn/aspnet/core/web-api/jsonpatch?view=aspnetcore-6.0"),t(a)])]),E,n("p",null,[s("参考资料："),n("a",F,[s("https://www.cnblogs.com/cplemom/p/17269789.htmlopen in new window"),t(a)])]),n("p",null,[s("当客户端返回流的时候，客户端可以实时捕获到返回的信息，并不需要等全部Response结束了再处理。 "),n("a",U,[s("下面就用ASP.NETopen in new window"),t(a)]),s(" Core Web API作为服务端实现流式响应。")]),z])}const V=e(b,[["render",L],["__file","webapijiekouqingqiuwanshan.html.vue"]]),W=JSON.parse('{"path":"/dotnet/api/controllerApi/webapijiekouqingqiuwanshan.html","title":"WebApi操作示例","lang":"zh-CN","frontmatter":{"title":"WebApi操作示例","lang":"zh-CN","date":"2023-08-04T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"webapijiekouqingqiuwanshan","slug":"akgbrx","docsId":"92656475","description":"目的 通过一个简单的项目，编写一些WebApi操作示例。 http状态码大全：https://www.php.cn/course/1020.html 本文示例代码环境：vs2022、net6 准备 新创建了一个.NetWebAPI程序，安装组件 ConfigureServices配置NewtonsoftJson以及Automapper和操作数据库代码(...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/webapijiekouqingqiuwanshan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"WebApi操作示例"}],["meta",{"property":"og:description","content":"目的 通过一个简单的项目，编写一些WebApi操作示例。 http状态码大全：https://www.php.cn/course/1020.html 本文示例代码环境：vs2022、net6 准备 新创建了一个.NetWebAPI程序，安装组件 ConfigureServices配置NewtonsoftJson以及Automapper和操作数据库代码(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1662823186138-84cf332f-1397-4d06-b863-0d52b240266b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T15:21:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T15:21:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebApi操作示例\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1662823186138-84cf332f-1397-4d06-b863-0d52b240266b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662866734791-b11bbdd0-b027-4909-a853-e49e8f3a1ea8.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662825041106-57360561-34bd-4633-877f-7304a4b5fe5d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662867846712-07cdbdf4-52c9-42e5-97dc-4353ceb05eaa.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662887452094-03bbd8da-a4f8-49fe-97ba-66ab4e3729a7.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662887879216-7df10bec-f42e-40fa-9e8d-c6802bca5405.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1662889332097-f3e058bb-b5f6-40e6-8426-e05734331bc0.png\\"],\\"datePublished\\":\\"2023-08-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-23T15:21:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"GET","slug":"get","link":"#get","children":[{"level":4,"title":"Query格式","slug":"query格式","link":"#query格式","children":[{"level":5,"title":"前端请求","slug":"前端请求","link":"#前端请求","children":[]},{"level":5,"title":"后端请求","slug":"后端请求","link":"#后端请求","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求","link":"#接口工具请求","children":[]}]}]},{"level":3,"title":"POST","slug":"post","link":"#post","children":[{"level":4,"title":"Json格式","slug":"json格式","link":"#json格式","children":[{"level":5,"title":"前端请求","slug":"前端请求-1","link":"#前端请求-1","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-1","link":"#后端请求-1","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-1","link":"#接口工具请求-1","children":[]}]},{"level":4,"title":"x-www-form-unlencoded格式","slug":"x-www-form-unlencoded格式","link":"#x-www-form-unlencoded格式","children":[{"level":5,"title":"前端请求","slug":"前端请求-2","link":"#前端请求-2","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-2","link":"#后端请求-2","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-2","link":"#接口工具请求-2","children":[]}]},{"level":4,"title":"Form-data格式","slug":"form-data格式","link":"#form-data格式","children":[{"level":5,"title":"前端请求","slug":"前端请求-3","link":"#前端请求-3","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-3","link":"#后端请求-3","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-3","link":"#接口工具请求-3","children":[]},{"level":5,"title":"设置上传大小","slug":"设置上传大小","link":"#设置上传大小","children":[]}]}]},{"level":3,"title":"PUT","slug":"put","link":"#put","children":[{"level":4,"title":"Json格式","slug":"json格式-1","link":"#json格式-1","children":[{"level":5,"title":"前端请求","slug":"前端请求-4","link":"#前端请求-4","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-4","link":"#后端请求-4","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-4","link":"#接口工具请求-4","children":[]}]}]},{"level":3,"title":"DELETE","slug":"delete","link":"#delete","children":[{"level":4,"title":"Query格式","slug":"query格式-1","link":"#query格式-1","children":[{"level":5,"title":"前端请求","slug":"前端请求-5","link":"#前端请求-5","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-5","link":"#后端请求-5","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-5","link":"#接口工具请求-5","children":[]}]}]},{"level":3,"title":"Patch","slug":"patch","link":"#patch","children":[{"level":4,"title":"Json格式","slug":"json格式-2","link":"#json格式-2","children":[{"level":5,"title":"前端请求","slug":"前端请求-6","link":"#前端请求-6","children":[]},{"level":5,"title":"后端请求","slug":"后端请求-6","link":"#后端请求-6","children":[]},{"level":5,"title":"接口工具请求","slug":"接口工具请求-6","link":"#接口工具请求-6","children":[]}]}]}]},{"level":2,"title":"流式响应","slug":"流式响应","link":"#流式响应","children":[{"level":3,"title":"返回文本内容","slug":"返回文本内容","link":"#返回文本内容","children":[]},{"level":3,"title":"返回图片","slug":"返回图片","link":"#返回图片","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1711207291000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":9.44,"words":2832},"filePathRelative":"dotnet/api/controllerApi/webapijiekouqingqiuwanshan.md","localizedDate":"2023年8月4日","excerpt":"<h2>目的</h2>\\n<p>通过一个简单的项目，编写一些WebApi操作示例。\\nhttp状态码大全：<a href=\\"https://www.php.cn/course/1020.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.php.cn/course/1020.html</a></p>\\n<blockquote>\\n<p>本文示例代码环境：vs2022、net6</p>\\n</blockquote>\\n<h2>准备</h2>\\n<p>新创建了一个.NetWebAPI程序，安装组件</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span>ItemGroup<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"AutoMapper.Extensions.Microsoft.DependencyInjection\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"11.0.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Microsoft.AspNetCore.Mvc.NewtonsoftJson\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"6.0.1\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Swashbuckle.AspNetCore\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"6.3.1\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Swashbuckle.AspNetCore.Newtonsoft\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"6.3.1\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>ItemGroup<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{V as comp,W as data};
