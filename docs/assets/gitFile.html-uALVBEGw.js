import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,e as a}from"./app-BY9DQv5u.js";const n={},l=a(`<h2 id="_1-开始初始化" tabindex="-1"><a class="header-anchor" href="#_1-开始初始化"><span>1. 开始初始化</span></a></h2><p>大家都知道，在开始使用 git 时，我们首先要做的就是执行 <code>git init</code>。这个指令会显示出一个我们都很熟悉的提示，特别是对于那些经常启动但又很快放弃的项目。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Initialized empty Git repository in /home/meain/dev/src/git-talk/.git/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来，我们来探索一下 <code>.git</code> 仓库里都有些什么。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ tree .git</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.git</span></span>
<span class="line"><span>├── config</span></span>
<span class="line"><span>├── HEAD</span></span>
<span class="line"><span>├── hooks</span></span>
<span class="line"><span>│   └── prepare-commit-msg.msample</span></span>
<span class="line"><span>├── objects</span></span>
<span class="line"><span>│   ├── info</span></span>
<span class="line"><span>│   └── pack</span></span>
<span class="line"><span>└── refs</span></span>
<span class="line"><span>    ├── heads</span></span>
<span class="line"><span>    └── tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，创建了多个文件和文件夹。它们分别扮演什么角色呢？下面我们来逐一了解。</p><ul><li><code>config</code> 是一个 txt 文件，里面记录了当前仓库的 git 设置，如作者信息、文件模式等。</li><li><code>HEAD</code> 表示仓库的当前 head。根据你设置的默认分支，它可能是 <code>refs/heads/master</code> 或 <code>refs/heads/main</code> 或其他你设定的名字。实际上，它指向 <code>refs/heads</code> 这个文件夹，并关联了一个名为 <code>master</code> 的文件，但该文件目前还不存在。只有在你完成首次提交后，<code>master</code> 文件才会生成。</li><li><code>hooks</code> 是一个特殊的目录，其中包含了可以在 git 执行任何操作前后运行的脚本。如果你对此感兴趣，我在这里写了一篇更详细的文章，介绍了 git 钩子的工作方式。(https://blog.meain.io/2019/making-sure-you-wont-commit-conflict-markers/)</li><li><code>objects</code> 存放的是 git 的对象，比如关于仓库中的文件、提交等的数据。我们稍后会对此进行深入探讨。</li><li><code>refs</code> 正如我们之前提到的，是用来存放引用的目录。例如，<code>refs/heads</code> 里存放的是分支的引用，而 <code>refs/tags</code> 则存放的是标签的引用。我们将进一步深入了解这些文件的内容。</li></ul><h3 id="_1-1-加入一个新文件的操作" tabindex="-1"><a class="header-anchor" href="#_1-1-加入一个新文件的操作"><span>1.1 加入一个新文件的操作</span></a></h3><p>了解了 <code>.git</code> 中的初始文件集后，我们来进行第一个操作,将内容添加到 <code>.git</code> 目录。现在我们将创建并加入一个文件（此刻还未提交）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>echo &#39;meain.io&#39; &gt; file</span></span>
<span class="line"><span>git add file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后，变动如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--- init       2023-07-02 15:14:00.584674816 +0530</span></span>
<span class="line"><span>+++ add        2023-07-02 15:13:53.869525054 +0530</span></span>
<span class="line"><span>@@ -3,7 +3,10 @@</span></span>
<span class="line"><span> ├── HEAD</span></span>
<span class="line"><span> ├── hooks</span></span>
<span class="line"><span> │   └── prepare-commit-msg.msample</span></span>
<span class="line"><span>+├── index</span></span>
<span class="line"><span> ├── objects</span></span>
<span class="line"><span>+│   ├── 4c</span></span>
<span class="line"><span>+│   │   └── 5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span> │   ├── info</span></span>
<span class="line"><span> │   └── pack</span></span>
<span class="line"><span> └── refs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此操作主要引发了两个变化。首先，文件 <code>index</code> 被修改。index 是记录当前暂存信息的地方，这表明名为 <code>file</code> 的文件已经被加入到索引中。</p><p>更为关键的是，新建了一个 <code>objects/4c</code> 文件夹，并在其中添加了 <code>5b58f323d7b459664b5d3fb9587048bb0296de</code> 文件。</p><h3 id="_1-2-这个文件里都保存了什么内容" tabindex="-1"><a class="header-anchor" href="#_1-2-这个文件里都保存了什么内容"><span>1.2 这个文件里都保存了什么内容？</span></a></h3><p>为了深入理解 <code>git</code> 的存储机制，我们先来看看这个文件具体包含了什么信息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ file .git/objects/4c/5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>.git/objects/4c/5b58f323d7b459664b5d3fb9587048bb0296de: zlib compressed data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，这个用 zlib 压缩的数据中具体包含了什么呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ zlib-flate -uncompress &lt;.git/objects/4c/5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>blob 9\\0meain.io</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果可以看出，这个文件记录了我们之前通过 <code>git add</code> 命令添加的 <code>file</code> 文件的相关信息，包括文件的类型、大小和内容。具体地说，文件类型为 <code>blob</code>，大小为 <code>9</code>，内容则是 <code>meain.io</code>。</p><h3 id="_1-3-那个文件名是如何得来的" tabindex="-1"><a class="header-anchor" href="#_1-3-那个文件名是如何得来的"><span>1.3 那个文件名是如何得来的？</span></a></h3><p>这确实是个有趣的问题。这个文件名其实是基于内容的 sha1 哈希值生成的。通过对 zlib 压缩的数据进行 <code>sha1sum</code> 处理，我们就可以得到这样的文件名。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ zlib-flate -uncompress &lt;.git/objects/4c/5b58f323d7b459664b5d3fb9587048bb0296de|sha1sum</span></span>
<span class="line"><span>4c5b58f323d7b459664b5d3fb9587048bb0296de</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git</code> 在存储内容时，会使用内容的 <code>sha1</code> 哈希值，取其前两个字符作为文件夹名（如 <code>4c</code>），余下的部分作为文件名。这种方式是为了确保在 <code>objects</code> 文件夹中不会有过多的文件，从而使文件系统保持高效。</p><h3 id="_1-4-了解-git-cat-file" tabindex="-1"><a class="header-anchor" href="#_1-4-了解-git-cat-file"><span>1.4 了解 <code>git cat-file</code></span></a></h3><p>实际上，由于这是 git 中的一个更为重要的部分，git 提供了一个基础命令 <code>git cat-file</code>，让我们可以更直观地查看它。通过 <code>-t</code> 参数，你可以查询对象的类型；使用 <code>-s</code> 参数，你可以得知对象的大小；而 <code>-p</code> 参数则能让你直观地查看对象的具体内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git cat-file -t 4c5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>blob</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -s 4c5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -p 4c5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>meain.io</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-开始提交" tabindex="-1"><a class="header-anchor" href="#_2-开始提交"><span>2. 开始提交</span></a></h2><p>现在我们已经了解当增加一个文件时，git 会有哪些变化，接下来，我们将通过进行&quot;提交&quot;操作来进行下一步探索。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git commit -m &#39;Initial commit&#39;</span></span>
<span class="line"><span>[master (root-commit) 4c201df] Initial commit</span></span>
<span class="line"><span> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span> create mode 100644 file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是相关的变动：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--- init        2023-07-02 15:14:00.584674816 +0530</span></span>
<span class="line"><span>+++ commit      2023-07-02 15:33:28.536144046 +0530</span></span>
<span class="line"><span>@@ -1,11 +1,25 @@</span></span>
<span class="line"><span> .git</span></span>
<span class="line"><span>+├── COMMIT_EDITMSG</span></span>
<span class="line"><span> ├── config</span></span>
<span class="line"><span> ├── HEAD</span></span>
<span class="line"><span> ├── hooks</span></span>
<span class="line"><span> │   └── prepare-commit-msg.msample</span></span>
<span class="line"><span> ├── index</span></span>
<span class="line"><span>+├── logs</span></span>
<span class="line"><span>+│   ├── HEAD</span></span>
<span class="line"><span>+│   └── refs</span></span>
<span class="line"><span>+│       └── heads</span></span>
<span class="line"><span>+│           └── master</span></span>
<span class="line"><span> ├── objects</span></span>
<span class="line"><span>+│   ├── 3c</span></span>
<span class="line"><span>+│   │   └── 201df6a1c4d4c87177e30e93be1df8bfe2fe19</span></span>
<span class="line"><span> │   ├── 4c</span></span>
<span class="line"><span> │   │   └── 5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span>+│   ├── 62</span></span>
<span class="line"><span>+│   │   └── 901ec0eca9faceb8fe0a9870b9b6cde75a9545</span></span>
<span class="line"><span> │   ├── info</span></span>
<span class="line"><span> │   └── pack</span></span>
<span class="line"><span> └── refs</span></span>
<span class="line"><span>     ├── heads</span></span>
<span class="line"><span>+    │   └── master</span></span>
<span class="line"><span>     └── tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变化还真多。首先有一个新文件 <code>COMMIT_EDITMSG</code>，顾名思义，它保存了最新的提交信息。</p><p>若直接运行 <code>git commit</code> 未带 <code>-m</code> 参数，git 会启动一个编辑器并加载 <code>COMMIT_EDITMSG</code> 文件，方便用户编辑提交信息。编辑完成后，git 就采用该文件内容作为提交信息。</p><p>此外，新增了一个 <code>logs</code> 目录，git 通过它来记录所有的提交变动。在此，你可以查看所有引用（refs）及 <code>HEAD</code> 的提交记录。</p><p><code>object</code> 文件夹也发生了些变化，但首先，我希望你关注一下 <code>refs/heads</code> 目录，里面现有一个 <code>master</code> 文件。毫无疑问，这就是 <code>master</code> 分支的引用。来，我们进一步了解其中的内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ cat refs/heads/master</span></span>
<span class="line"><span>3c201df6a1c4d4c87177e30e93be1df8bfe2fe19</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，它是指向了一个新的对象。我们有方法查看这类对象，接着来试试。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git cat-file -t 3c201df6a1c4d4c87177e30e93be1df8bfe2fe19</span></span>
<span class="line"><span>commit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -p 3c201df6a1c4d4c87177e30e93be1df8bfe2fe19</span></span>
<span class="line"><span>tree 62902ec0eca9faceb8fe0a9870b9b6cde75a9545</span></span>
<span class="line"><span>author Abin Simon &lt;mail@meain.io&gt; 1688292123 +0530</span></span>
<span class="line"><span>committer Abin Simon &lt;mail@meain.io&gt; 1688292123 +0530</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Initial commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>你同样可以使用 <code>git cat-file -t refs/heads/master</code> 命令来查看。</p></blockquote><p>看起来，这是我们未曾遇见的新对象类型：<code>commit</code>。从 <code>commit</code> 的内容中，我们得知它包含了一个哈希值为 <code>62902ec0eca9faceb8fe0a9870b9b6cde75a9545</code> 的 <code>tree</code> 对象，这与我们在提交时新加的对象相似。<code>commit</code> 还显示了这次提交的作者和提交者信息，这里都是我。最后，它还展示了这次提交的信息。</p><p>接下来，让我们看一下 <code>tree</code> 对象中包含的内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git cat-file -t 62902ec0eca9faceb8fe0a9870b9b6cde75a9545</span></span>
<span class="line"><span>tree</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -p 62901ec0eca9faceb8fe0a9870b9b6cde75a9545</span></span>
<span class="line"><span>100644 blob 4c5b58f323d7b459664b5d3fb9587048bb0296de    file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tree</code> 对象中会通过其他 <code>tree</code> 和 <code>blob</code> 对象的形式呈现工作目录的状态。在这个示例中，因为我们仅有一个名为 <code>file</code> 的文件，所以你只能见到一个对象。细看的话，你会发现这个文件指向了我们在执行 <code>git add file</code> 时加入的那个初始对象。</p><p>下面展示了一个更为成熟的仓库中的 <code>tree</code> 示意。在 <code>commit</code> 对象关联的 <code>tree</code> 对象中，嵌套有更多的 <code>tree</code> 对象，用以标识不同的文件夹。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git cat-file -p 2e5e84c3ee1f7e4cb3f709ff5ca0ddfc259a8d04</span></span>
<span class="line"><span>100644 blob 3cf56579491f151d82b384c211cf1971c300fbf8    .dockerignore</span></span>
<span class="line"><span>100644 blob 02c348c202dd41f90e66cfeb36ebbd928677cff6    .gitattributes</span></span>
<span class="line"><span>040000 tree ab2ba080c4c3e4f2bc643ae29d5040f85aca2551    .github</span></span>
<span class="line"><span>100644 blob bdda0724b18c16e69b800e5e887ed2a8a210c936    .gitignore</span></span>
<span class="line"><span>100644 blob 3a592bc0200af2fd5e3e9d2790038845f3a5cf9b    CHANGELOG.md</span></span>
<span class="line"><span>100644 blob 71a7a8c5aacbcaccf56740ce16a6c5544783d095    CODE_OF_CONDUCT.md</span></span>
<span class="line"><span>100644 blob f433b1a53f5b830a205fd2df78e2b34974656c7b    LICENSE</span></span>
<span class="line"><span>100644 blob 413072d502db332006536e1af3fad0dce570e727    README.md</span></span>
<span class="line"><span>100644 blob 1dd7ed99019efd6d872d5f6764115a86b5121ae9    SECURITY.md</span></span>
<span class="line"><span>040000 tree 918756f1a4e5d648ae273801359c440c951555f9    build</span></span>
<span class="line"><span>040000 tree 219a6e58af53f2e53b14b710a2dd8cbe9fea15f5    design</span></span>
<span class="line"><span>040000 tree 5810c119dd4d9a1c033c38c12fae781aeffeafc1    docker</span></span>
<span class="line"><span>040000 tree f09c5708676cdca6562f10e1f36c9cfd7ee45e07    src</span></span>
<span class="line"><span>040000 tree e6e1595f412599d0627a9e634007fcb2e32b62e5    website</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-进行修改" tabindex="-1"><a class="header-anchor" href="#_3-进行修改"><span>3. 进行修改</span></a></h2><p>让我们对文件进行修改，并观察这样做的结果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ echo &#39;blog.meain.io&#39; &gt; file</span></span>
<span class="line"><span>$ git commit -am &#39;Use blog link&#39;</span></span>
<span class="line"><span>[master 68ed5aa] Use blog link</span></span>
<span class="line"><span> 1 file changed, 1 insertion(+), 1 deletion(-)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--- commit      2023-07-02 15:33:28.536144046 +0530</span></span>
<span class="line"><span>+++ update      2023-07-02 15:47:20.841154907 +0530</span></span>
<span class="line"><span>@@ -17,6 +17,12 @@</span></span>
<span class="line"><span> │   │   └── 5b58f323d7b459664b5d3fb9587048bb0296de</span></span>
<span class="line"><span> │   ├── 62</span></span>
<span class="line"><span> │   │   └── 901ec0eca9faceb8fe0a9870b9b6cde75a9545</span></span>
<span class="line"><span>+│   ├── 67</span></span>
<span class="line"><span>+│   │   └── ed5aa2372445cf2249d85573ade1c0cbb312b1</span></span>
<span class="line"><span>+│   ├── 8a</span></span>
<span class="line"><span>+│   │   └── b377e2f9acd9eaca12e750a7d3cb345065049e</span></span>
<span class="line"><span>+│   ├── e5</span></span>
<span class="line"><span>+│   │   └── ec63cd761e6ab9d11e7dc2c4c2752d682b36e2</span></span>
<span class="line"><span> │   ├── info</span></span>
<span class="line"><span> │   └── pack</span></span>
<span class="line"><span> └── refs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，我们新增了三个对象。一个是含有文件新内容的 <code>blob</code> 对象，还有一个是 <code>tree</code> 对象，以及一个 <code>commit</code> 对象。</p><p>我们再次从 <code>HEAD</code> 或 <code>refs/heads/master</code> 开始追踪这些对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git cat-file -p refs/heads/master</span></span>
<span class="line"><span>tree 9ab377e2f9acd9eaca12e750a7d3cb345065049e</span></span>
<span class="line"><span>parent 3c201df6a1c4d4c87177e30e93be1df8bfe2fe19</span></span>
<span class="line"><span>author Abin Simon &lt;mail@meain.io&gt; 1688292975 +0530</span></span>
<span class="line"><span>committer Abin Simon &lt;mail@meain.io&gt; 1688292975 +0530</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Use blog link</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -p 9ab377e2f9acd9eaca12e750a7d3cb345065049e</span></span>
<span class="line"><span>100644 blob e5ec63cd761e6ab9d11e7dc2c4c2752d682b36e2    file</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git cat-file -p e6ec63cd761e6ab9d11e7dc2c4c2752d682b36e2</span></span>
<span class="line"><span>blog.meain.io</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察的话，你会注意到 <code>commit</code> 对象现在有了一个额外的键名为 parent，它链接到上一个提交，因为当前提交是基于上一个提交创建的。</p><h2 id="_4-创建新分支" tabindex="-1"><a class="header-anchor" href="#_4-创建新分支"><span>4. 创建新分支</span></a></h2><p>现在我们需要创建一个新的分支。我们将使用 <code>git branch fix-url</code> 来完成这个操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--- update      2023-07-02 15:47:20.841154907 +0530</span></span>
<span class="line"><span>+++ branch      2023-07-02 15:55:25.165204941 +0530</span></span>
<span class="line"><span>@@ -27,5 +28,6 @@</span></span>
<span class="line"><span> │   └── pack</span></span>
<span class="line"><span> └── refs</span></span>
<span class="line"><span>     ├── heads</span></span>
<span class="line"><span>+    │   ├── fix-url</span></span>
<span class="line"><span>     │   └── master</span></span>
<span class="line"><span>     └── tags</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>此操作会在 \`refs/heads\` 目录下加入一个新的文件。该文件的名称就是我们新建的分支名，而内容则是最新的提交标识 id。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`batch</span></span>
<span class="line"><span>$ cat .git/refs/heads/fix-url</span></span>
<span class="line"><span>68ed5aa2372445cf2249d85573ade1c0cbb312b1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这基本上就是创建分支的全部内容。在 <code>git</code> 中，分支是相当轻便的。另外，标签的创建也是类似的操作，但它们是被创建在 <code>refs/tags</code> 目录下。</p><p>在 <code>logs</code> 目录下也新增了一个文件，该文件用于记录与 <code>master</code> 分支类似的提交历史信息。</p><h2 id="_5-分支切换" tabindex="-1"><a class="header-anchor" href="#_5-分支切换"><span>5. 分支切换</span></a></h2><p>在 <code>git</code> 中进行分支切换实际上是让 git 获取某个提交的 <code>tree</code> 对象，并更新工作区中的文件，使其与其中记录的状态相匹配。在此例中，由于我们是从 <code>master</code> 分支切换到 <code>fix-url</code> 分支，而这两个分支都指向同一个 <code>commit</code> 和它的 <code>tree</code> 对象，因此 <code>git</code> 在工作区的文件上并没有任何更改。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git checkout fix-url</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在进行分支切换时，<code>.git</code> 目录中唯一发生的变化是 <code>.git/HEAD</code> 文件的内容，现在它指向 <code>fix-url</code> 分支。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ cat .git/HEAD</span></span>
<span class="line"><span>ref: refs/heads/fix-url</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>既然我们在这里，我将进行一个提交操作。这将有助于我稍后展示合并的效果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ echo &#39;https://blog.meain.io&#39;&gt;file</span></span>
<span class="line"><span>$ git commit -am &#39;Fix url&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-合并操作" tabindex="-1"><a class="header-anchor" href="#_6-合并操作"><span>6. 合并操作</span></a></h2><p>有三种主要的合并方法。</p><ol><li>最简单且直观的是快进式合并。这种方式中，你只是更新一个分支的提交，使其指向另一个分支的提交。具体操作就是把 <code>refs/heads/fix-url</code> 中的哈希值复制到 <code>refs/heads/master</code>。</li><li>第二种是变基（rebase）合并。在这种方式中，我们首先将更改依次应用到主分支当前的提交上，然后进行类似于快进式的合并。</li><li>第三种是通过创建一个独立的合并来合并两个分支。这种方法与前两者略有不同，因为它的提交对象会有两个 <code>parent</code> 条目。我们稍后会详细探讨这种方法。</li></ol><p>首先，我们来看看合并前的 graph。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git log --graph --oneline --all</span></span>
<span class="line"><span>* 42c6318 (fix-url) Fix url</span></span>
<span class="line"><span>* 67ed5aa (HEAD -&gt; master) Use blog link</span></span>
<span class="line"><span>* 3c201df Initial commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来进行合并：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git merge fix-url # updates refs/heads/master to the hash in refs/heads/fix-url</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们再来看看合并后的 graph。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git log --graph --oneline --all</span></span>
<span class="line"><span>* 42c6318 (HEAD -&gt; master) (fix-url) Fix url</span></span>
<span class="line"><span>* 67ed5aa Use blog link</span></span>
<span class="line"><span>* 3c201df Initial commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-执行推送" tabindex="-1"><a class="header-anchor" href="#_7-执行推送"><span>7. 执行推送</span></a></h2><p>在我们对本地 <code>git</code> 仓库进行了一系列操纵之后，现在我们来看看进行推送时会发生什么事情。远程 <code>git</code> 仓库会接收哪些数据？</p><p>为了演示这个过程，我首先创建了一个新的 <code>git</code> 仓库作为这个仓库的远程连接。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ mkdir git-talk-2</span></span>
<span class="line"><span>$ cd git-talk-2 &amp;&amp; git init --bare</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ cd ../git-talk &amp;&amp; git remote add origin ../git-talk-2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，添加新的远程仓库实际上是修改了配置文件，你可以在 <code>.git/config</code> 中查看这个变更。具体做了哪些修改，我鼓励你自己去探索。</p><p>接下来，执行推送操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$ git push origin master</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们再来检查一下本地仓库发生了哪些改变。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>--- branch	2023-07-02 15:55:25.165204941 +0530</span></span>
<span class="line"><span>+++ remote	2023-07-02 17:41:05.170923141 +0530</span></span>
<span class="line"><span>@@ -22,12 +29,18 @@</span></span>
<span class="line"><span> │   ├── e5</span></span>
<span class="line"><span> │   │   └── ec63cd761e6ab9d11e7dc2c4c2752d682b36e2</span></span>
<span class="line"><span> │   ├── info</span></span>
<span class="line"><span> │   └── pack</span></span>
<span class="line"><span> ├── ORIG_HEAD</span></span>
<span class="line"><span> └── refs</span></span>
<span class="line"><span>     ├── heads</span></span>
<span class="line"><span>     │   ├── fix-url</span></span>
<span class="line"><span>     │   └── master</span></span>
<span class="line"><span>+    ├── remotes</span></span>
<span class="line"><span>+    │   └── origin</span></span>
<span class="line"><span>+    │       └── master</span></span>
<span class="line"><span>     └── tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现新增了一个新的 <code>refs/remotes</code> 目录，这是用来存储不同远程仓库相关信息的。</p><p>但是，实际上传送到远程 <code>git</code> 仓库的数据是什么呢？那就是 <code>objects</code> 文件夹内的所有数据，以及你明确推送的 <code>refs</code> 下的分支和标签。仅凭这些，远程的 git 就能完整地构建出你的所有 <code>git</code> 历史记录。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li>https://git-scm.com/book/en/v3/Git-Internals-Git-Objects</li><li>https://matthew-brett.github.io/curious-git/reading_git_objects.html</li><li>https://blog.meain.io/2020/bunch-of-git-stuff/</li></ol>`,89),d=[l];function c(p,t){return i(),e("div",null,d)}const o=s(n,[["render",c],["__file","gitFile.html.vue"]]),h=JSON.parse('{"path":"/soft/devTools/sourceCodeManage/gitFile.html","title":".git目录下有什么","lang":"zh-CN","frontmatter":{"title":".git目录下有什么","lang":"zh-CN","date":"2023-09-02T00:00:00.000Z","publish":true,"author":"Abin Simon","isOriginal":false,"category":["csharp"],"tag":["class","生成"],"article":false,"description":"1. 开始初始化 大家都知道，在开始使用 git 时，我们首先要做的就是执行 git init。这个指令会显示出一个我们都很熟悉的提示，特别是对于那些经常启动但又很快放弃的项目。 接下来，我们来探索一下 .git 仓库里都有些什么。 如上所示，创建了多个文件和文件夹。它们分别扮演什么角色呢？下面我们来逐一了解。 config 是一个 txt 文件，里面...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/soft/devTools/sourceCodeManage/gitFile.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":".git目录下有什么"}],["meta",{"property":"og:description","content":"1. 开始初始化 大家都知道，在开始使用 git 时，我们首先要做的就是执行 git init。这个指令会显示出一个我们都很熟悉的提示，特别是对于那些经常启动但又很快放弃的项目。 接下来，我们来探索一下 .git 仓库里都有些什么。 如上所示，创建了多个文件和文件夹。它们分别扮演什么角色呢？下面我们来逐一了解。 config 是一个 txt 文件，里面..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T13:48:26.000Z"}],["meta",{"property":"article:author","content":"Abin Simon"}],["meta",{"property":"article:tag","content":"class"}],["meta",{"property":"article:tag","content":"生成"}],["meta",{"property":"article:published_time","content":"2023-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-08T13:48:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\".git目录下有什么\\",\\"description\\":\\"1. 开始初始化 大家都知道，在开始使用 git 时，我们首先要做的就是执行 git init。这个指令会显示出一个我们都很熟悉的提示，特别是对于那些经常启动但又很快放弃的项目。 接下来，我们来探索一下 .git 仓库里都有些什么。 如上所示，创建了多个文件和文件夹。它们分别扮演什么角色呢？下面我们来逐一了解。 config 是一个 txt 文件，里面...\\"}"]]},"headers":[{"level":2,"title":"1. 开始初始化","slug":"_1-开始初始化","link":"#_1-开始初始化","children":[{"level":3,"title":"1.1 加入一个新文件的操作","slug":"_1-1-加入一个新文件的操作","link":"#_1-1-加入一个新文件的操作","children":[]},{"level":3,"title":"1.2 这个文件里都保存了什么内容？","slug":"_1-2-这个文件里都保存了什么内容","link":"#_1-2-这个文件里都保存了什么内容","children":[]},{"level":3,"title":"1.3 那个文件名是如何得来的？","slug":"_1-3-那个文件名是如何得来的","link":"#_1-3-那个文件名是如何得来的","children":[]},{"level":3,"title":"1.4 了解 git cat-file","slug":"_1-4-了解-git-cat-file","link":"#_1-4-了解-git-cat-file","children":[]}]},{"level":2,"title":"2. 开始提交","slug":"_2-开始提交","link":"#_2-开始提交","children":[]},{"level":2,"title":"3. 进行修改","slug":"_3-进行修改","link":"#_3-进行修改","children":[]},{"level":2,"title":"4. 创建新分支","slug":"_4-创建新分支","link":"#_4-创建新分支","children":[]},{"level":2,"title":"5. 分支切换","slug":"_5-分支切换","link":"#_5-分支切换","children":[]},{"level":2,"title":"6. 合并操作","slug":"_6-合并操作","link":"#_6-合并操作","children":[]},{"level":2,"title":"7. 执行推送","slug":"_7-执行推送","link":"#_7-执行推送","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1698924167000,"updatedTime":1702043306000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":10.15,"words":3044},"filePathRelative":"soft/devTools/sourceCodeManage/gitFile.md","localizedDate":"2023年9月2日","excerpt":"<h2>1. 开始初始化</h2>\\n<p>大家都知道，在开始使用 git 时，我们首先要做的就是执行 <code>git init</code>。这个指令会显示出一个我们都很熟悉的提示，特别是对于那些经常启动但又很快放弃的项目。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>Initialized empty Git repository in /home/meain/dev/src/git-talk/.git/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,h as data};
